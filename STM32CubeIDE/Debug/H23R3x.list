
H23R3x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000176e4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000315c  080177a0  080177a0  000277a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a8fc  0801a8fc  00030a58  2**0
                  CONTENTS
  4 .ARM          00000008  0801a8fc  0801a8fc  0002a8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a904  0801a904  00030a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a904  0801a904  0002a904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a90c  0801a90c  0002a90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a58  20000000  0801a910  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006490  20000a58  0801b368  00030a58  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006ee8  0801b368  00036ee8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030a58  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005051a  00000000  00000000  00030a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008a90  00000000  00000000  00080f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00019a9e  00000000  00000000  00089a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001c68  00000000  00000000  000a34c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001fc8  00000000  00000000  000a5130  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001649a  00000000  00000000  000a70f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a606  00000000  00000000  000bd592  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7b98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006094  00000000  00000000  000c7c14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a58 	.word	0x20000a58
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08017788 	.word	0x08017788

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a5c 	.word	0x20000a5c
 8000100:	08017788 	.word	0x08017788

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc89 	bl	8001d64 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbe1 	bl	8001c24 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7b 	bl	8001d64 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc71 	bl	8001d64 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc03 	bl	8001c9c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fbf9 	bl	8001c9c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9eb 	bl	800089c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f96d 	bl	80007b0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9dd 	bl	800089c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9d3 	bl	800089c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f97b 	bl	8000800 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f971 	bl	8000800 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fca9 	bl	8000f28 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fadf 	bl	8000ba0 <__aeabi_fsub>
 80005e2:	f000 fca1 	bl	8000f28 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 f9eb 	bl	80029e0 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fe80 	bl	8002318 <__aeabi_dsub>
 8000618:	f002 f9e2 	bl	80029e0 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fb5f 	bl	8002d0c <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fb5a 	bl	8002d0c <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__eqsf2>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	0042      	lsls	r2, r0, #1
 80007b4:	024e      	lsls	r6, r1, #9
 80007b6:	004c      	lsls	r4, r1, #1
 80007b8:	0245      	lsls	r5, r0, #9
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	0e12      	lsrs	r2, r2, #24
 80007be:	0fc3      	lsrs	r3, r0, #31
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	0e24      	lsrs	r4, r4, #24
 80007c4:	0fc9      	lsrs	r1, r1, #31
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d00f      	beq.n	80007ea <__eqsf2+0x3a>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d011      	beq.n	80007f2 <__eqsf2+0x42>
 80007ce:	2001      	movs	r0, #1
 80007d0:	42a2      	cmp	r2, r4
 80007d2:	d000      	beq.n	80007d6 <__eqsf2+0x26>
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d1fc      	bne.n	80007d4 <__eqsf2+0x24>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d00d      	beq.n	80007fa <__eqsf2+0x4a>
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d1f8      	bne.n	80007d4 <__eqsf2+0x24>
 80007e2:	0028      	movs	r0, r5
 80007e4:	1e45      	subs	r5, r0, #1
 80007e6:	41a8      	sbcs	r0, r5
 80007e8:	e7f4      	b.n	80007d4 <__eqsf2+0x24>
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d1f1      	bne.n	80007d4 <__eqsf2+0x24>
 80007f0:	e7eb      	b.n	80007ca <__eqsf2+0x1a>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d1ed      	bne.n	80007d4 <__eqsf2+0x24>
 80007f8:	e7e9      	b.n	80007ce <__eqsf2+0x1e>
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7ea      	b.n	80007d4 <__eqsf2+0x24>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__gesf2>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	004a      	lsls	r2, r1, #1
 8000804:	024e      	lsls	r6, r1, #9
 8000806:	0245      	lsls	r5, r0, #9
 8000808:	0044      	lsls	r4, r0, #1
 800080a:	0a6d      	lsrs	r5, r5, #9
 800080c:	0e24      	lsrs	r4, r4, #24
 800080e:	0fc3      	lsrs	r3, r0, #31
 8000810:	0a76      	lsrs	r6, r6, #9
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	0fc9      	lsrs	r1, r1, #31
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d015      	beq.n	8000846 <__gesf2+0x46>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d00e      	beq.n	800083c <__gesf2+0x3c>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d115      	bne.n	800084e <__gesf2+0x4e>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d101      	bne.n	800082a <__gesf2+0x2a>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d01c      	beq.n	8000864 <__gesf2+0x64>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d014      	beq.n	8000858 <__gesf2+0x58>
 800082e:	428b      	cmp	r3, r1
 8000830:	d027      	beq.n	8000882 <__gesf2+0x82>
 8000832:	2002      	movs	r0, #2
 8000834:	3b01      	subs	r3, #1
 8000836:	4018      	ands	r0, r3
 8000838:	3801      	subs	r0, #1
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0ee      	beq.n	800081e <__gesf2+0x1e>
 8000840:	2002      	movs	r0, #2
 8000842:	4240      	negs	r0, r0
 8000844:	e7f9      	b.n	800083a <__gesf2+0x3a>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d1fa      	bne.n	8000840 <__gesf2+0x40>
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00e      	beq.n	800086c <__gesf2+0x6c>
 800084e:	2a00      	cmp	r2, #0
 8000850:	d10e      	bne.n	8000870 <__gesf2+0x70>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d0ed      	beq.n	8000832 <__gesf2+0x32>
 8000856:	e00b      	b.n	8000870 <__gesf2+0x70>
 8000858:	2301      	movs	r3, #1
 800085a:	3901      	subs	r1, #1
 800085c:	4399      	bics	r1, r3
 800085e:	0008      	movs	r0, r1
 8000860:	3001      	adds	r0, #1
 8000862:	e7ea      	b.n	800083a <__gesf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e7      	beq.n	800083a <__gesf2+0x3a>
 800086a:	e7e2      	b.n	8000832 <__gesf2+0x32>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1e7      	bne.n	8000840 <__gesf2+0x40>
 8000870:	428b      	cmp	r3, r1
 8000872:	d1de      	bne.n	8000832 <__gesf2+0x32>
 8000874:	4294      	cmp	r4, r2
 8000876:	dd05      	ble.n	8000884 <__gesf2+0x84>
 8000878:	2102      	movs	r1, #2
 800087a:	1e58      	subs	r0, r3, #1
 800087c:	4008      	ands	r0, r1
 800087e:	3801      	subs	r0, #1
 8000880:	e7db      	b.n	800083a <__gesf2+0x3a>
 8000882:	2400      	movs	r4, #0
 8000884:	42a2      	cmp	r2, r4
 8000886:	dc04      	bgt.n	8000892 <__gesf2+0x92>
 8000888:	42b5      	cmp	r5, r6
 800088a:	d8d2      	bhi.n	8000832 <__gesf2+0x32>
 800088c:	2000      	movs	r0, #0
 800088e:	42b5      	cmp	r5, r6
 8000890:	d2d3      	bcs.n	800083a <__gesf2+0x3a>
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	2301      	movs	r3, #1
 8000896:	4398      	bics	r0, r3
 8000898:	3001      	adds	r0, #1
 800089a:	e7ce      	b.n	800083a <__gesf2+0x3a>

0800089c <__lesf2>:
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	0042      	lsls	r2, r0, #1
 80008a0:	0244      	lsls	r4, r0, #9
 80008a2:	024d      	lsls	r5, r1, #9
 80008a4:	0fc3      	lsrs	r3, r0, #31
 80008a6:	0048      	lsls	r0, r1, #1
 80008a8:	0a64      	lsrs	r4, r4, #9
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e00      	lsrs	r0, r0, #24
 80008b0:	0fc9      	lsrs	r1, r1, #31
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d012      	beq.n	80008dc <__lesf2+0x40>
 80008b6:	28ff      	cmp	r0, #255	; 0xff
 80008b8:	d00c      	beq.n	80008d4 <__lesf2+0x38>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d112      	bne.n	80008e4 <__lesf2+0x48>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d119      	bne.n	80008f6 <__lesf2+0x5a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d117      	bne.n	80008f6 <__lesf2+0x5a>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d02b      	beq.n	8000922 <__lesf2+0x86>
 80008ca:	2002      	movs	r0, #2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4018      	ands	r0, r3
 80008d0:	3801      	subs	r0, #1
 80008d2:	e026      	b.n	8000922 <__lesf2+0x86>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d0f0      	beq.n	80008ba <__lesf2+0x1e>
 80008d8:	2002      	movs	r0, #2
 80008da:	e022      	b.n	8000922 <__lesf2+0x86>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d1fb      	bne.n	80008d8 <__lesf2+0x3c>
 80008e0:	28ff      	cmp	r0, #255	; 0xff
 80008e2:	d01f      	beq.n	8000924 <__lesf2+0x88>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d11f      	bne.n	8000928 <__lesf2+0x8c>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d11d      	bne.n	8000928 <__lesf2+0x8c>
 80008ec:	2002      	movs	r0, #2
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4018      	ands	r0, r3
 80008f2:	3801      	subs	r0, #1
 80008f4:	e015      	b.n	8000922 <__lesf2+0x86>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d00e      	beq.n	8000918 <__lesf2+0x7c>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d1e5      	bne.n	80008ca <__lesf2+0x2e>
 80008fe:	2200      	movs	r2, #0
 8000900:	4290      	cmp	r0, r2
 8000902:	dc04      	bgt.n	800090e <__lesf2+0x72>
 8000904:	42ac      	cmp	r4, r5
 8000906:	d8e0      	bhi.n	80008ca <__lesf2+0x2e>
 8000908:	2000      	movs	r0, #0
 800090a:	42ac      	cmp	r4, r5
 800090c:	d209      	bcs.n	8000922 <__lesf2+0x86>
 800090e:	1e58      	subs	r0, r3, #1
 8000910:	2301      	movs	r3, #1
 8000912:	4398      	bics	r0, r3
 8000914:	3001      	adds	r0, #1
 8000916:	e004      	b.n	8000922 <__lesf2+0x86>
 8000918:	2301      	movs	r3, #1
 800091a:	3901      	subs	r1, #1
 800091c:	4399      	bics	r1, r3
 800091e:	0008      	movs	r0, r1
 8000920:	3001      	adds	r0, #1
 8000922:	bd30      	pop	{r4, r5, pc}
 8000924:	2d00      	cmp	r5, #0
 8000926:	d1d7      	bne.n	80008d8 <__lesf2+0x3c>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1ce      	bne.n	80008ca <__lesf2+0x2e>
 800092c:	4282      	cmp	r2, r0
 800092e:	dde7      	ble.n	8000900 <__lesf2+0x64>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7f3      	b.n	8000922 <__lesf2+0x86>
 800093a:	46c0      	nop			; (mov r8, r8)

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464e      	mov	r6, r9
 8000940:	4657      	mov	r7, sl
 8000942:	4645      	mov	r5, r8
 8000944:	46de      	mov	lr, fp
 8000946:	b5e0      	push	{r5, r6, r7, lr}
 8000948:	0243      	lsls	r3, r0, #9
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	0045      	lsls	r5, r0, #1
 800094e:	b083      	sub	sp, #12
 8000950:	1c0f      	adds	r7, r1, #0
 8000952:	4699      	mov	r9, r3
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0fc6      	lsrs	r6, r0, #31
 8000958:	2d00      	cmp	r5, #0
 800095a:	d057      	beq.n	8000a0c <__aeabi_fmul+0xd0>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d024      	beq.n	80009aa <__aeabi_fmul+0x6e>
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	04c0      	lsls	r0, r0, #19
 8000966:	4318      	orrs	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4681      	mov	r9, r0
 800096c:	469a      	mov	sl, r3
 800096e:	469b      	mov	fp, r3
 8000970:	3d7f      	subs	r5, #127	; 0x7f
 8000972:	027c      	lsls	r4, r7, #9
 8000974:	007a      	lsls	r2, r7, #1
 8000976:	0ffb      	lsrs	r3, r7, #31
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d023      	beq.n	80009c8 <__aeabi_fmul+0x8c>
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d04b      	beq.n	8000a1c <__aeabi_fmul+0xe0>
 8000984:	00e3      	lsls	r3, r4, #3
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	04e4      	lsls	r4, r4, #19
 800098c:	3a7f      	subs	r2, #127	; 0x7f
 800098e:	431c      	orrs	r4, r3
 8000990:	18ad      	adds	r5, r5, r2
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	4647      	mov	r7, r8
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4653      	mov	r3, sl
 800099a:	4077      	eors	r7, r6
 800099c:	003a      	movs	r2, r7
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d848      	bhi.n	8000a34 <__aeabi_fmul+0xf8>
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <__aeabi_fmul+0x25c>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58cb      	ldr	r3, [r1, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x74>
 80009ae:	e085      	b.n	8000abc <__aeabi_fmul+0x180>
 80009b0:	3308      	adds	r3, #8
 80009b2:	469a      	mov	sl, r3
 80009b4:	3b06      	subs	r3, #6
 80009b6:	469b      	mov	fp, r3
 80009b8:	027c      	lsls	r4, r7, #9
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0ffb      	lsrs	r3, r7, #31
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	4698      	mov	r8, r3
 80009c6:	d1db      	bne.n	8000980 <__aeabi_fmul+0x44>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x92>
 80009cc:	e090      	b.n	8000af0 <__aeabi_fmul+0x1b4>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2301      	movs	r3, #1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	4692      	mov	sl, r2
 80009d6:	2001      	movs	r0, #1
 80009d8:	e7db      	b.n	8000992 <__aeabi_fmul+0x56>
 80009da:	464c      	mov	r4, r9
 80009dc:	4658      	mov	r0, fp
 80009de:	0017      	movs	r7, r2
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d024      	beq.n	8000a2e <__aeabi_fmul+0xf2>
 80009e4:	2803      	cmp	r0, #3
 80009e6:	d100      	bne.n	80009ea <__aeabi_fmul+0xae>
 80009e8:	e0cf      	b.n	8000b8a <__aeabi_fmul+0x24e>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	2801      	cmp	r0, #1
 80009f0:	d14d      	bne.n	8000a8e <__aeabi_fmul+0x152>
 80009f2:	0258      	lsls	r0, r3, #9
 80009f4:	05d2      	lsls	r2, r2, #23
 80009f6:	0a40      	lsrs	r0, r0, #9
 80009f8:	07ff      	lsls	r7, r7, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	4338      	orrs	r0, r7
 80009fe:	b003      	add	sp, #12
 8000a00:	bc3c      	pop	{r2, r3, r4, r5}
 8000a02:	4690      	mov	r8, r2
 8000a04:	4699      	mov	r9, r3
 8000a06:	46a2      	mov	sl, r4
 8000a08:	46ab      	mov	fp, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <__aeabi_fmul+0x18c>
 8000a10:	2304      	movs	r3, #4
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2500      	movs	r5, #0
 8000a18:	469b      	mov	fp, r3
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fmul+0x36>
 8000a1c:	35ff      	adds	r5, #255	; 0xff
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d160      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a22:	4652      	mov	r2, sl
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4692      	mov	sl, r2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	e7b1      	b.n	8000992 <__aeabi_fmul+0x56>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7de      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	469c      	mov	ip, r3
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	0426      	lsls	r6, r4, #16
 8000a3e:	0c36      	lsrs	r6, r6, #16
 8000a40:	0418      	lsls	r0, r3, #16
 8000a42:	4661      	mov	r1, ip
 8000a44:	0033      	movs	r3, r6
 8000a46:	0c22      	lsrs	r2, r4, #16
 8000a48:	4664      	mov	r4, ip
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	434e      	muls	r6, r1
 8000a50:	4350      	muls	r0, r2
 8000a52:	4354      	muls	r4, r2
 8000a54:	1980      	adds	r0, r0, r6
 8000a56:	0c1a      	lsrs	r2, r3, #16
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	4296      	cmp	r6, r2
 8000a5c:	d903      	bls.n	8000a66 <__aeabi_fmul+0x12a>
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	468c      	mov	ip, r1
 8000a64:	4464      	add	r4, ip
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	0410      	lsls	r0, r2, #16
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	0183      	lsls	r3, r0, #6
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	41b3      	sbcs	r3, r6
 8000a74:	0e80      	lsrs	r0, r0, #26
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0c13      	lsrs	r3, r2, #16
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	001c      	movs	r4, r3
 8000a82:	0123      	lsls	r3, r4, #4
 8000a84:	d579      	bpl.n	8000b7a <__aeabi_fmul+0x23e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	0862      	lsrs	r2, r4, #1
 8000a8a:	401c      	ands	r4, r3
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	9a01      	ldr	r2, [sp, #4]
 8000a90:	327f      	adds	r2, #127	; 0x7f
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd4d      	ble.n	8000b32 <__aeabi_fmul+0x1f6>
 8000a96:	0763      	lsls	r3, r4, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4023      	ands	r3, r4
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000aa2:	3404      	adds	r4, #4
 8000aa4:	0123      	lsls	r3, r4, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fmul+0x174>
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <__aeabi_fmul+0x260>)
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	401c      	ands	r4, r3
 8000aae:	3280      	adds	r2, #128	; 0x80
 8000ab0:	2afe      	cmp	r2, #254	; 0xfe
 8000ab2:	dcbc      	bgt.n	8000a2e <__aeabi_fmul+0xf2>
 8000ab4:	01a3      	lsls	r3, r4, #6
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	e79a      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000abc:	230c      	movs	r3, #12
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e754      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f901 	bl	8002cd0 <__clzsi2>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	426d      	negs	r5, r5
 8000ada:	4691      	mov	r9, r2
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	469a      	mov	sl, r3
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e746      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	2003      	movs	r0, #3
 8000aee:	e750      	b.n	8000992 <__aeabi_fmul+0x56>
 8000af0:	0020      	movs	r0, r4
 8000af2:	f002 f8ed 	bl	8002cd0 <__clzsi2>
 8000af6:	1f43      	subs	r3, r0, #5
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	409c      	lsls	r4, r3
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	2000      	movs	r0, #0
 8000b00:	e747      	b.n	8000992 <__aeabi_fmul+0x56>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	2700      	movs	r7, #0
 8000b06:	03db      	lsls	r3, r3, #15
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	e772      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	e766      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b10:	464c      	mov	r4, r9
 8000b12:	0032      	movs	r2, r6
 8000b14:	4658      	mov	r0, fp
 8000b16:	e762      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	421a      	tst	r2, r3
 8000b20:	d022      	beq.n	8000b68 <__aeabi_fmul+0x22c>
 8000b22:	421c      	tst	r4, r3
 8000b24:	d120      	bne.n	8000b68 <__aeabi_fmul+0x22c>
 8000b26:	4323      	orrs	r3, r4
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b32:	2301      	movs	r3, #1
 8000b34:	1a9a      	subs	r2, r3, r2
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc21      	bgt.n	8000b7e <__aeabi_fmul+0x242>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	319e      	adds	r1, #158	; 0x9e
 8000b42:	408c      	lsls	r4, r1
 8000b44:	001a      	movs	r2, r3
 8000b46:	0023      	movs	r3, r4
 8000b48:	1e5c      	subs	r4, r3, #1
 8000b4a:	41a3      	sbcs	r3, r4
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b52:	220f      	movs	r2, #15
 8000b54:	401a      	ands	r2, r3
 8000b56:	2a04      	cmp	r2, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	015a      	lsls	r2, r3, #5
 8000b5e:	d411      	bmi.n	8000b84 <__aeabi_fmul+0x248>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	2200      	movs	r2, #0
 8000b66:	e744      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	0037      	movs	r7, r6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	e73b      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b7a:	9501      	str	r5, [sp, #4]
 8000b7c:	e787      	b.n	8000a8e <__aeabi_fmul+0x152>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e736      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b84:	2201      	movs	r2, #1
 8000b86:	2300      	movs	r3, #0
 8000b88:	e733      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e72c      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b98:	080177d4 	.word	0x080177d4
 8000b9c:	f7ffffff 	.word	0xf7ffffff

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4647      	mov	r7, r8
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	0044      	lsls	r4, r0, #1
 8000ba8:	0fc2      	lsrs	r2, r0, #31
 8000baa:	b580      	push	{r7, lr}
 8000bac:	0247      	lsls	r7, r0, #9
 8000bae:	0248      	lsls	r0, r1, #9
 8000bb0:	0a40      	lsrs	r0, r0, #9
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	4666      	mov	r6, ip
 8000bb6:	0048      	lsls	r0, r1, #1
 8000bb8:	0a7f      	lsrs	r7, r7, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	00f6      	lsls	r6, r6, #3
 8000bbe:	0025      	movs	r5, r4
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	00fb      	lsls	r3, r7, #3
 8000bc4:	0e00      	lsrs	r0, r0, #24
 8000bc6:	0fc9      	lsrs	r1, r1, #31
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	28ff      	cmp	r0, #255	; 0xff
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fsub+0x30>
 8000bce:	e085      	b.n	8000cdc <__aeabi_fsub+0x13c>
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	4071      	eors	r1, r6
 8000bd4:	1a26      	subs	r6, r4, r0
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d057      	beq.n	8000c8a <__aeabi_fsub+0xea>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	dd43      	ble.n	8000c66 <__aeabi_fsub+0xc6>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_fsub+0x44>
 8000be2:	e07f      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e0aa      	b.n	8000d42 <__aeabi_fsub+0x1a2>
 8000bec:	3e01      	subs	r6, #1
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x54>
 8000bf2:	e0f7      	b.n	8000de4 <__aeabi_fsub+0x244>
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x5c>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	099c      	lsrs	r4, r3, #6
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 f865 	bl	8002cd0 <__clzsi2>
 8000c06:	3805      	subs	r0, #5
 8000c08:	4084      	lsls	r4, r0
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fsub+0x70>
 8000c0e:	e0d3      	b.n	8000db8 <__aeabi_fsub+0x218>
 8000c10:	1b45      	subs	r5, r0, r5
 8000c12:	0023      	movs	r3, r4
 8000c14:	2020      	movs	r0, #32
 8000c16:	3501      	adds	r5, #1
 8000c18:	40eb      	lsrs	r3, r5
 8000c1a:	1b45      	subs	r5, r0, r5
 8000c1c:	40ac      	lsls	r4, r5
 8000c1e:	1e62      	subs	r2, r4, #1
 8000c20:	4194      	sbcs	r4, r2
 8000c22:	4323      	orrs	r3, r4
 8000c24:	2407      	movs	r4, #7
 8000c26:	2500      	movs	r5, #0
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0xa4>
 8000c42:	e080      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000c44:	3501      	adds	r5, #1
 8000c46:	b2ec      	uxtb	r4, r5
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0xae>
 8000c4c:	e0a3      	b.n	8000d96 <__aeabi_fsub+0x1f6>
 8000c4e:	24ff      	movs	r4, #255	; 0xff
 8000c50:	2300      	movs	r3, #0
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	05e4      	lsls	r4, r4, #23
 8000c56:	0a58      	lsrs	r0, r3, #9
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	bc0c      	pop	{r2, r3}
 8000c60:	4690      	mov	r8, r2
 8000c62:	4699      	mov	r9, r3
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d174      	bne.n	8000d54 <__aeabi_fsub+0x1b4>
 8000c6a:	1c60      	adds	r0, r4, #1
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fsub+0xd4>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x224>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a9c      	subs	r4, r3, r2
 8000c78:	0162      	lsls	r2, r4, #5
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_fsub+0xde>
 8000c7c:	e0b6      	b.n	8000dec <__aeabi_fsub+0x24c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1be      	bne.n	8000c00 <__aeabi_fsub+0x60>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2400      	movs	r4, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7e3      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xf0>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fsub+0x1fc>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d046      	beq.n	8000d22 <__aeabi_fsub+0x182>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d049      	beq.n	8000d2c <__aeabi_fsub+0x18c>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x11c>
 8000ca8:	2020      	movs	r0, #32
 8000caa:	464c      	mov	r4, r9
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	4084      	lsls	r4, r0
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e44      	subs	r4, r0, #1
 8000cb8:	41a0      	sbcs	r0, r4
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d528      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x12a>
 8000cc8:	e0a8      	b.n	8000e1c <__aeabi_fsub+0x27c>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2407      	movs	r4, #7
 8000cce:	4994      	ldr	r1, [pc, #592]	; (8000f20 <__aeabi_fsub+0x380>)
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	401c      	ands	r4, r3
 8000cda:	e7a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x142>
 8000ce0:	e778      	b.n	8000bd4 <__aeabi_fsub+0x34>
 8000ce2:	e775      	b.n	8000bd0 <__aeabi_fsub+0x30>
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d054      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	4649      	mov	r1, r9
 8000cec:	04d2      	lsls	r2, r2, #19
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2e1b      	cmp	r6, #27
 8000cf6:	dc09      	bgt.n	8000d0c <__aeabi_fsub+0x16c>
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	1b89      	subs	r1, r1, r6
 8000cfe:	4088      	lsls	r0, r1
 8000d00:	464a      	mov	r2, r9
 8000d02:	0001      	movs	r1, r0
 8000d04:	40f2      	lsrs	r2, r6
 8000d06:	1e48      	subs	r0, r1, #1
 8000d08:	4181      	sbcs	r1, r0
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d500      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000d12:	e773      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d14:	2201      	movs	r2, #1
 8000d16:	4641      	mov	r1, r8
 8000d18:	400a      	ands	r2, r1
 8000d1a:	0759      	lsls	r1, r3, #29
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x180>
 8000d1e:	e789      	b.n	8000c34 <__aeabi_fsub+0x94>
 8000d20:	e011      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d158      	bne.n	8000dda <__aeabi_fsub+0x23a>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d10c      	bne.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x194>
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	0a5b      	lsrs	r3, r3, #9
 8000d3e:	24ff      	movs	r4, #255	; 0xff
 8000d40:	e787      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d025      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	2dff      	cmp	r5, #255	; 0xff
 8000d4a:	d0f0      	beq.n	8000d2e <__aeabi_fsub+0x18e>
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b2ec      	uxtb	r4, r5
 8000d52:	e77e      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04d      	beq.n	8000df4 <__aeabi_fsub+0x254>
 8000d58:	28ff      	cmp	r0, #255	; 0xff
 8000d5a:	d018      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	04e4      	lsls	r4, r4, #19
 8000d60:	4272      	negs	r2, r6
 8000d62:	4323      	orrs	r3, r4
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_fsub+0x1ca>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_fsub+0x354>
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	2520      	movs	r5, #32
 8000d6e:	40d4      	lsrs	r4, r2
 8000d70:	1aaa      	subs	r2, r5, r2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4193      	sbcs	r3, r2
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4688      	mov	r8, r1
 8000d82:	e738      	b.n	8000bf6 <__aeabi_fsub+0x56>
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	d0f8      	beq.n	8000d7a <__aeabi_fsub+0x1da>
 8000d88:	43f2      	mvns	r2, r6
 8000d8a:	28ff      	cmp	r0, #255	; 0xff
 8000d8c:	d1ea      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	464b      	mov	r3, r9
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	e7d7      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	e75a      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d141      	bne.n	8000e24 <__aeabi_fsub+0x284>
 8000da0:	1c65      	adds	r5, r4, #1
 8000da2:	b2e9      	uxtb	r1, r5
 8000da4:	2901      	cmp	r1, #1
 8000da6:	dd45      	ble.n	8000e34 <__aeabi_fsub+0x294>
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x20e>
 8000dac:	e74f      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000dae:	2407      	movs	r4, #7
 8000db0:	444b      	add	r3, r9
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <__aeabi_fsub+0x384>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	e732      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_fsub+0x264>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d17a      	bne.n	8000ec2 <__aeabi_fsub+0x322>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x234>
 8000dd2:	e091      	b.n	8000ef8 <__aeabi_fsub+0x358>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	e7b5      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d119      	bne.n	8000e14 <__aeabi_fsub+0x274>
 8000de0:	444b      	add	r3, r9
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d184      	bne.n	8000cf2 <__aeabi_fsub+0x152>
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e7ac      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dec:	464a      	mov	r2, r9
 8000dee:	4688      	mov	r8, r1
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	e705      	b.n	8000c00 <__aeabi_fsub+0x60>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1c5      	bne.n	8000d84 <__aeabi_fsub+0x1e4>
 8000df8:	000a      	movs	r2, r1
 8000dfa:	28ff      	cmp	r0, #255	; 0xff
 8000dfc:	d0c8      	beq.n	8000d90 <__aeabi_fsub+0x1f0>
 8000dfe:	0005      	movs	r5, r0
 8000e00:	464b      	mov	r3, r9
 8000e02:	e7a0      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d149      	bne.n	8000e9c <__aeabi_fsub+0x2fc>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d077      	beq.n	8000efe <__aeabi_fsub+0x35e>
 8000e0e:	000a      	movs	r2, r1
 8000e10:	25ff      	movs	r5, #255	; 0xff
 8000e12:	e798      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x27a>
 8000e18:	e743      	b.n	8000ca2 <__aeabi_fsub+0x102>
 8000e1a:	e787      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	e716      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d115      	bne.n	8000e54 <__aeabi_fsub+0x2b4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d157      	bne.n	8000edc <__aeabi_fsub+0x33c>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d1e6      	bne.n	8000dfe <__aeabi_fsub+0x25e>
 8000e30:	464b      	mov	r3, r9
 8000e32:	e77b      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d120      	bne.n	8000e7a <__aeabi_fsub+0x2da>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d057      	beq.n	8000eec <__aeabi_fsub+0x34c>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d053      	beq.n	8000eea <__aeabi_fsub+0x34a>
 8000e42:	444b      	add	r3, r9
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d568      	bpl.n	8000f1a <__aeabi_fsub+0x37a>
 8000e48:	2407      	movs	r4, #7
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <__aeabi_fsub+0x384>)
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2501      	movs	r5, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	e6ea      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000e54:	28ff      	cmp	r0, #255	; 0xff
 8000e56:	d0eb      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	04d2      	lsls	r2, r2, #19
 8000e5c:	4276      	negs	r6, r6
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	2e1b      	cmp	r6, #27
 8000e62:	dc53      	bgt.n	8000f0c <__aeabi_fsub+0x36c>
 8000e64:	2520      	movs	r5, #32
 8000e66:	1bad      	subs	r5, r5, r6
 8000e68:	001a      	movs	r2, r3
 8000e6a:	40ab      	lsls	r3, r5
 8000e6c:	40f2      	lsrs	r2, r6
 8000e6e:	1e5c      	subs	r4, r3, #1
 8000e70:	41a3      	sbcs	r3, r4
 8000e72:	4313      	orrs	r3, r2
 8000e74:	444b      	add	r3, r9
 8000e76:	0005      	movs	r5, r0
 8000e78:	e721      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d8      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x2e6>
 8000e84:	e752      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	03c9      	lsls	r1, r1, #15
 8000e8a:	420f      	tst	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x2f0>
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e90:	4660      	mov	r0, ip
 8000e92:	4208      	tst	r0, r1
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fsub+0x2f8>
 8000e96:	e749      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	e747      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x306>
 8000ea4:	e74f      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	4217      	tst	r7, r2
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fsub+0x318>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	4210      	tst	r0, r2
 8000eb2:	d101      	bne.n	8000eb8 <__aeabi_fsub+0x318>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4641      	mov	r1, r8
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	e741      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d01f      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000ec8:	1a1a      	subs	r2, r3, r0
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d520      	bpl.n	8000f10 <__aeabi_fsub+0x370>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	401c      	ands	r4, r3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000edc:	1c74      	adds	r4, r6, #1
 8000ede:	d0c9      	beq.n	8000e74 <__aeabi_fsub+0x2d4>
 8000ee0:	43f6      	mvns	r6, r6
 8000ee2:	28ff      	cmp	r0, #255	; 0xff
 8000ee4:	d1bc      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e720      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000eea:	4699      	mov	r9, r3
 8000eec:	464b      	mov	r3, r9
 8000eee:	2500      	movs	r5, #0
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e740      	b.n	8000d7a <__aeabi_fsub+0x1da>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e6a9      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	2200      	movs	r2, #0
 8000f02:	03db      	lsls	r3, r3, #15
 8000f04:	24ff      	movs	r4, #255	; 0xff
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e71c      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e7b1      	b.n	8000e74 <__aeabi_fsub+0x2d4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d0f1      	beq.n	8000ef8 <__aeabi_fsub+0x358>
 8000f14:	0013      	movs	r3, r2
 8000f16:	2500      	movs	r5, #0
 8000f18:	e6fc      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e6fa      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	fbffffff 	.word	0xfbffffff

08000f28 <__aeabi_f2iz>:
 8000f28:	0241      	lsls	r1, r0, #9
 8000f2a:	0042      	lsls	r2, r0, #1
 8000f2c:	0fc3      	lsrs	r3, r0, #31
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	2000      	movs	r0, #0
 8000f34:	2a7e      	cmp	r2, #126	; 0x7e
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f38:	2a9d      	cmp	r2, #157	; 0x9d
 8000f3a:	d80c      	bhi.n	8000f56 <__aeabi_f2iz+0x2e>
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	4301      	orrs	r1, r0
 8000f42:	2a95      	cmp	r2, #149	; 0x95
 8000f44:	dc0a      	bgt.n	8000f5c <__aeabi_f2iz+0x34>
 8000f46:	2096      	movs	r0, #150	; 0x96
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	40d1      	lsrs	r1, r2
 8000f4c:	4248      	negs	r0, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f52:	0008      	movs	r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <__aeabi_f2iz+0x3c>)
 8000f58:	1898      	adds	r0, r3, r2
 8000f5a:	e7fb      	b.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f5c:	3a96      	subs	r2, #150	; 0x96
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	e7f4      	b.n	8000f4c <__aeabi_f2iz+0x24>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7fffffff 	.word	0x7fffffff

08000f68 <__aeabi_ui2f>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	1e04      	subs	r4, r0, #0
 8000f6c:	d034      	beq.n	8000fd8 <__aeabi_ui2f+0x70>
 8000f6e:	f001 feaf 	bl	8002cd0 <__clzsi2>
 8000f72:	229e      	movs	r2, #158	; 0x9e
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	2a96      	cmp	r2, #150	; 0x96
 8000f78:	dc07      	bgt.n	8000f8a <__aeabi_ui2f+0x22>
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	2808      	cmp	r0, #8
 8000f7e:	dd2e      	ble.n	8000fde <__aeabi_ui2f+0x76>
 8000f80:	3808      	subs	r0, #8
 8000f82:	4084      	lsls	r4, r0
 8000f84:	0260      	lsls	r0, r4, #9
 8000f86:	0a40      	lsrs	r0, r0, #9
 8000f88:	e021      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000f8a:	2a99      	cmp	r2, #153	; 0x99
 8000f8c:	dd09      	ble.n	8000fa2 <__aeabi_ui2f+0x3a>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0021      	movs	r1, r4
 8000f92:	331b      	adds	r3, #27
 8000f94:	4099      	lsls	r1, r3
 8000f96:	1e4b      	subs	r3, r1, #1
 8000f98:	4199      	sbcs	r1, r3
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	40dc      	lsrs	r4, r3
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2805      	cmp	r0, #5
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_ui2f+0x42>
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409c      	lsls	r4, r3
 8000faa:	0023      	movs	r3, r4
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <__aeabi_ui2f+0x7c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	0765      	lsls	r5, r4, #29
 8000fb2:	d009      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fb4:	250f      	movs	r5, #15
 8000fb6:	402c      	ands	r4, r5
 8000fb8:	2c04      	cmp	r4, #4
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	015c      	lsls	r4, r3, #5
 8000fc0:	d502      	bpl.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fc2:	229f      	movs	r2, #159	; 0x9f
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	0a58      	lsrs	r0, r3, #9
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0240      	lsls	r0, r0, #9
 8000fd0:	05d2      	lsls	r2, r2, #23
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	4310      	orrs	r0, r2
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e7f7      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fde:	0260      	lsls	r0, r4, #9
 8000fe0:	0a40      	lsrs	r0, r0, #9
 8000fe2:	e7f4      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fe4:	fbffffff 	.word	0xfbffffff

08000fe8 <__aeabi_dadd>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	464f      	mov	r7, r9
 8000fec:	4646      	mov	r6, r8
 8000fee:	46d6      	mov	lr, sl
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	0309      	lsls	r1, r1, #12
 8000ff4:	b5c0      	push	{r6, r7, lr}
 8000ff6:	0a49      	lsrs	r1, r1, #9
 8000ff8:	0f47      	lsrs	r7, r0, #29
 8000ffa:	005e      	lsls	r6, r3, #1
 8000ffc:	4339      	orrs	r1, r7
 8000ffe:	031f      	lsls	r7, r3, #12
 8001000:	0fdb      	lsrs	r3, r3, #31
 8001002:	469c      	mov	ip, r3
 8001004:	0065      	lsls	r5, r4, #1
 8001006:	0a7b      	lsrs	r3, r7, #9
 8001008:	0f57      	lsrs	r7, r2, #29
 800100a:	431f      	orrs	r7, r3
 800100c:	0d6d      	lsrs	r5, r5, #21
 800100e:	0fe4      	lsrs	r4, r4, #31
 8001010:	0d76      	lsrs	r6, r6, #21
 8001012:	46a1      	mov	r9, r4
 8001014:	00c0      	lsls	r0, r0, #3
 8001016:	46b8      	mov	r8, r7
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	1bab      	subs	r3, r5, r6
 800101c:	4564      	cmp	r4, ip
 800101e:	d07b      	beq.n	8001118 <__aeabi_dadd+0x130>
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd5f      	ble.n	80010e4 <__aeabi_dadd+0xfc>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x42>
 8001028:	e0a4      	b.n	8001174 <__aeabi_dadd+0x18c>
 800102a:	003e      	movs	r6, r7
 800102c:	4316      	orrs	r6, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x4a>
 8001030:	e112      	b.n	8001258 <__aeabi_dadd+0x270>
 8001032:	1e5e      	subs	r6, r3, #1
 8001034:	2e00      	cmp	r6, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x52>
 8001038:	e19e      	b.n	8001378 <__aeabi_dadd+0x390>
 800103a:	1a87      	subs	r7, r0, r2
 800103c:	4643      	mov	r3, r8
 800103e:	42b8      	cmp	r0, r7
 8001040:	4180      	sbcs	r0, r0
 8001042:	2501      	movs	r5, #1
 8001044:	1ac9      	subs	r1, r1, r3
 8001046:	4240      	negs	r0, r0
 8001048:	1a09      	subs	r1, r1, r0
 800104a:	020b      	lsls	r3, r1, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x68>
 800104e:	e131      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	0a4e      	lsrs	r6, r1, #9
 8001054:	2e00      	cmp	r6, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x72>
 8001058:	e16e      	b.n	8001338 <__aeabi_dadd+0x350>
 800105a:	0030      	movs	r0, r6
 800105c:	f001 fe38 	bl	8002cd0 <__clzsi2>
 8001060:	0003      	movs	r3, r0
 8001062:	3b08      	subs	r3, #8
 8001064:	2b1f      	cmp	r3, #31
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x82>
 8001068:	e161      	b.n	800132e <__aeabi_dadd+0x346>
 800106a:	2220      	movs	r2, #32
 800106c:	0039      	movs	r1, r7
 800106e:	1ad2      	subs	r2, r2, r3
 8001070:	409e      	lsls	r6, r3
 8001072:	40d1      	lsrs	r1, r2
 8001074:	409f      	lsls	r7, r3
 8001076:	430e      	orrs	r6, r1
 8001078:	429d      	cmp	r5, r3
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0x96>
 800107c:	e151      	b.n	8001322 <__aeabi_dadd+0x33a>
 800107e:	1b5d      	subs	r5, r3, r5
 8001080:	1c6b      	adds	r3, r5, #1
 8001082:	2b1f      	cmp	r3, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0xa0>
 8001086:	e17c      	b.n	8001382 <__aeabi_dadd+0x39a>
 8001088:	2120      	movs	r1, #32
 800108a:	1ac9      	subs	r1, r1, r3
 800108c:	003d      	movs	r5, r7
 800108e:	0030      	movs	r0, r6
 8001090:	408f      	lsls	r7, r1
 8001092:	4088      	lsls	r0, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	1e79      	subs	r1, r7, #1
 8001098:	418f      	sbcs	r7, r1
 800109a:	0031      	movs	r1, r6
 800109c:	2207      	movs	r2, #7
 800109e:	4328      	orrs	r0, r5
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	2500      	movs	r5, #0
 80010a4:	4307      	orrs	r7, r0
 80010a6:	403a      	ands	r2, r7
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d009      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010ac:	230f      	movs	r3, #15
 80010ae:	403b      	ands	r3, r7
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	41bf      	sbcs	r7, r7
 80010ba:	427f      	negs	r7, r7
 80010bc:	19c9      	adds	r1, r1, r7
 80010be:	001f      	movs	r7, r3
 80010c0:	020b      	lsls	r3, r1, #8
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dadd+0xde>
 80010c4:	e226      	b.n	8001514 <__aeabi_dadd+0x52c>
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4bc6      	ldr	r3, [pc, #792]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80010ca:	0555      	lsls	r5, r2, #21
 80010cc:	0d6d      	lsrs	r5, r5, #21
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0xec>
 80010d2:	e106      	b.n	80012e2 <__aeabi_dadd+0x2fa>
 80010d4:	4ac4      	ldr	r2, [pc, #784]	; (80013e8 <__aeabi_dadd+0x400>)
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0753      	lsls	r3, r2, #29
 80010dc:	0252      	lsls	r2, r2, #9
 80010de:	433b      	orrs	r3, r7
 80010e0:	0b12      	lsrs	r2, r2, #12
 80010e2:	e08e      	b.n	8001202 <__aeabi_dadd+0x21a>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x102>
 80010e8:	e0b8      	b.n	800125c <__aeabi_dadd+0x274>
 80010ea:	1c6b      	adds	r3, r5, #1
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dadd+0x10e>
 80010f4:	e130      	b.n	8001358 <__aeabi_dadd+0x370>
 80010f6:	1a87      	subs	r7, r0, r2
 80010f8:	4643      	mov	r3, r8
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	41b6      	sbcs	r6, r6
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	4276      	negs	r6, r6
 8001102:	1b9e      	subs	r6, r3, r6
 8001104:	0233      	lsls	r3, r6, #8
 8001106:	d500      	bpl.n	800110a <__aeabi_dadd+0x122>
 8001108:	e14c      	b.n	80013a4 <__aeabi_dadd+0x3bc>
 800110a:	003b      	movs	r3, r7
 800110c:	4333      	orrs	r3, r6
 800110e:	d1a1      	bne.n	8001054 <__aeabi_dadd+0x6c>
 8001110:	2200      	movs	r2, #0
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e070      	b.n	80011fa <__aeabi_dadd+0x212>
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_dadd+0x136>
 800111c:	e0e5      	b.n	80012ea <__aeabi_dadd+0x302>
 800111e:	2e00      	cmp	r6, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x13c>
 8001122:	e083      	b.n	800122c <__aeabi_dadd+0x244>
 8001124:	4eaf      	ldr	r6, [pc, #700]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001126:	42b5      	cmp	r5, r6
 8001128:	d060      	beq.n	80011ec <__aeabi_dadd+0x204>
 800112a:	2680      	movs	r6, #128	; 0x80
 800112c:	0436      	lsls	r6, r6, #16
 800112e:	4337      	orrs	r7, r6
 8001130:	46b8      	mov	r8, r7
 8001132:	2b38      	cmp	r3, #56	; 0x38
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x150>
 8001136:	e13e      	b.n	80013b6 <__aeabi_dadd+0x3ce>
 8001138:	4643      	mov	r3, r8
 800113a:	4313      	orrs	r3, r2
 800113c:	001f      	movs	r7, r3
 800113e:	1e7a      	subs	r2, r7, #1
 8001140:	4197      	sbcs	r7, r2
 8001142:	183f      	adds	r7, r7, r0
 8001144:	4287      	cmp	r7, r0
 8001146:	4180      	sbcs	r0, r0
 8001148:	4240      	negs	r0, r0
 800114a:	1809      	adds	r1, r1, r0
 800114c:	020b      	lsls	r3, r1, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x16a>
 8001150:	e0b0      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001152:	4ba4      	ldr	r3, [pc, #656]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001154:	3501      	adds	r5, #1
 8001156:	429d      	cmp	r5, r3
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x174>
 800115a:	e0c3      	b.n	80012e4 <__aeabi_dadd+0x2fc>
 800115c:	4aa2      	ldr	r2, [pc, #648]	; (80013e8 <__aeabi_dadd+0x400>)
 800115e:	087b      	lsrs	r3, r7, #1
 8001160:	400a      	ands	r2, r1
 8001162:	2101      	movs	r1, #1
 8001164:	400f      	ands	r7, r1
 8001166:	431f      	orrs	r7, r3
 8001168:	0851      	lsrs	r1, r2, #1
 800116a:	07d3      	lsls	r3, r2, #31
 800116c:	2207      	movs	r2, #7
 800116e:	431f      	orrs	r7, r3
 8001170:	403a      	ands	r2, r7
 8001172:	e799      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001174:	4e9b      	ldr	r6, [pc, #620]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001176:	42b5      	cmp	r5, r6
 8001178:	d038      	beq.n	80011ec <__aeabi_dadd+0x204>
 800117a:	2680      	movs	r6, #128	; 0x80
 800117c:	0436      	lsls	r6, r6, #16
 800117e:	4337      	orrs	r7, r6
 8001180:	46b8      	mov	r8, r7
 8001182:	2b38      	cmp	r3, #56	; 0x38
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x1a0>
 8001186:	e0dc      	b.n	8001342 <__aeabi_dadd+0x35a>
 8001188:	2b1f      	cmp	r3, #31
 800118a:	dc00      	bgt.n	800118e <__aeabi_dadd+0x1a6>
 800118c:	e130      	b.n	80013f0 <__aeabi_dadd+0x408>
 800118e:	001e      	movs	r6, r3
 8001190:	4647      	mov	r7, r8
 8001192:	3e20      	subs	r6, #32
 8001194:	40f7      	lsrs	r7, r6
 8001196:	46bc      	mov	ip, r7
 8001198:	2b20      	cmp	r3, #32
 800119a:	d004      	beq.n	80011a6 <__aeabi_dadd+0x1be>
 800119c:	2640      	movs	r6, #64	; 0x40
 800119e:	1af3      	subs	r3, r6, r3
 80011a0:	4646      	mov	r6, r8
 80011a2:	409e      	lsls	r6, r3
 80011a4:	4332      	orrs	r2, r6
 80011a6:	0017      	movs	r7, r2
 80011a8:	4663      	mov	r3, ip
 80011aa:	1e7a      	subs	r2, r7, #1
 80011ac:	4197      	sbcs	r7, r2
 80011ae:	431f      	orrs	r7, r3
 80011b0:	e0cc      	b.n	800134c <__aeabi_dadd+0x364>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x1d0>
 80011b6:	e204      	b.n	80015c2 <__aeabi_dadd+0x5da>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x1d8>
 80011be:	e159      	b.n	8001474 <__aeabi_dadd+0x48c>
 80011c0:	074b      	lsls	r3, r1, #29
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	4318      	orrs	r0, r3
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	08c9      	lsrs	r1, r1, #3
 80011ca:	031b      	lsls	r3, r3, #12
 80011cc:	4219      	tst	r1, r3
 80011ce:	d008      	beq.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d0:	4645      	mov	r5, r8
 80011d2:	08ed      	lsrs	r5, r5, #3
 80011d4:	421d      	tst	r5, r3
 80011d6:	d104      	bne.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d8:	4643      	mov	r3, r8
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	4308      	orrs	r0, r1
 80011e0:	0029      	movs	r1, r5
 80011e2:	0f42      	lsrs	r2, r0, #29
 80011e4:	00c9      	lsls	r1, r1, #3
 80011e6:	4d7f      	ldr	r5, [pc, #508]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011e8:	4311      	orrs	r1, r2
 80011ea:	00c0      	lsls	r0, r0, #3
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08ca      	lsrs	r2, r1, #3
 80011f0:	497c      	ldr	r1, [pc, #496]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011f2:	08c0      	lsrs	r0, r0, #3
 80011f4:	4303      	orrs	r3, r0
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d068      	beq.n	80012cc <__aeabi_dadd+0x2e4>
 80011fa:	0312      	lsls	r2, r2, #12
 80011fc:	056d      	lsls	r5, r5, #21
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0d6d      	lsrs	r5, r5, #21
 8001202:	2100      	movs	r1, #0
 8001204:	0312      	lsls	r2, r2, #12
 8001206:	0018      	movs	r0, r3
 8001208:	0b13      	lsrs	r3, r2, #12
 800120a:	0d0a      	lsrs	r2, r1, #20
 800120c:	0512      	lsls	r2, r2, #20
 800120e:	431a      	orrs	r2, r3
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <__aeabi_dadd+0x404>)
 8001212:	052d      	lsls	r5, r5, #20
 8001214:	4013      	ands	r3, r2
 8001216:	432b      	orrs	r3, r5
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	07e4      	lsls	r4, r4, #31
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	4323      	orrs	r3, r4
 8001220:	0019      	movs	r1, r3
 8001222:	bc1c      	pop	{r2, r3, r4}
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	46a2      	mov	sl, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	003e      	movs	r6, r7
 800122e:	4316      	orrs	r6, r2
 8001230:	d012      	beq.n	8001258 <__aeabi_dadd+0x270>
 8001232:	1e5e      	subs	r6, r3, #1
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x252>
 8001238:	e100      	b.n	800143c <__aeabi_dadd+0x454>
 800123a:	1887      	adds	r7, r0, r2
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	4441      	add	r1, r8
 8001242:	4240      	negs	r0, r0
 8001244:	1809      	adds	r1, r1, r0
 8001246:	2501      	movs	r5, #1
 8001248:	020b      	lsls	r3, r1, #8
 800124a:	d533      	bpl.n	80012b4 <__aeabi_dadd+0x2cc>
 800124c:	2502      	movs	r5, #2
 800124e:	e785      	b.n	800115c <__aeabi_dadd+0x174>
 8001250:	4664      	mov	r4, ip
 8001252:	0033      	movs	r3, r6
 8001254:	4641      	mov	r1, r8
 8001256:	0010      	movs	r0, r2
 8001258:	001d      	movs	r5, r3
 800125a:	e7c7      	b.n	80011ec <__aeabi_dadd+0x204>
 800125c:	2d00      	cmp	r5, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x27a>
 8001260:	e0da      	b.n	8001418 <__aeabi_dadd+0x430>
 8001262:	000c      	movs	r4, r1
 8001264:	4304      	orrs	r4, r0
 8001266:	d0f3      	beq.n	8001250 <__aeabi_dadd+0x268>
 8001268:	1c5c      	adds	r4, r3, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x286>
 800126c:	e19f      	b.n	80015ae <__aeabi_dadd+0x5c6>
 800126e:	4c5d      	ldr	r4, [pc, #372]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001270:	42a6      	cmp	r6, r4
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x28e>
 8001274:	e12f      	b.n	80014d6 <__aeabi_dadd+0x4ee>
 8001276:	43db      	mvns	r3, r3
 8001278:	2b38      	cmp	r3, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x296>
 800127c:	e166      	b.n	800154c <__aeabi_dadd+0x564>
 800127e:	2b1f      	cmp	r3, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x29c>
 8001282:	e183      	b.n	800158c <__aeabi_dadd+0x5a4>
 8001284:	2420      	movs	r4, #32
 8001286:	0005      	movs	r5, r0
 8001288:	1ae4      	subs	r4, r4, r3
 800128a:	000f      	movs	r7, r1
 800128c:	40dd      	lsrs	r5, r3
 800128e:	40d9      	lsrs	r1, r3
 8001290:	40a0      	lsls	r0, r4
 8001292:	4643      	mov	r3, r8
 8001294:	40a7      	lsls	r7, r4
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	1e44      	subs	r4, r0, #1
 800129a:	41a0      	sbcs	r0, r4
 800129c:	4698      	mov	r8, r3
 800129e:	432f      	orrs	r7, r5
 80012a0:	4338      	orrs	r0, r7
 80012a2:	1a17      	subs	r7, r2, r0
 80012a4:	42ba      	cmp	r2, r7
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	4252      	negs	r2, r2
 80012ac:	1a99      	subs	r1, r3, r2
 80012ae:	4664      	mov	r4, ip
 80012b0:	0035      	movs	r5, r6
 80012b2:	e6ca      	b.n	800104a <__aeabi_dadd+0x62>
 80012b4:	2207      	movs	r2, #7
 80012b6:	403a      	ands	r2, r7
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x2d6>
 80012bc:	e6f6      	b.n	80010ac <__aeabi_dadd+0xc4>
 80012be:	074b      	lsls	r3, r1, #29
 80012c0:	08ca      	lsrs	r2, r1, #3
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012c4:	08ff      	lsrs	r7, r7, #3
 80012c6:	433b      	orrs	r3, r7
 80012c8:	428d      	cmp	r5, r1
 80012ca:	d196      	bne.n	80011fa <__aeabi_dadd+0x212>
 80012cc:	0019      	movs	r1, r3
 80012ce:	4311      	orrs	r1, r2
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x2ec>
 80012d2:	e19e      	b.n	8001612 <__aeabi_dadd+0x62a>
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0309      	lsls	r1, r1, #12
 80012d8:	430a      	orrs	r2, r1
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	0b12      	lsrs	r2, r2, #12
 80012de:	4d41      	ldr	r5, [pc, #260]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012e0:	e78f      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012e2:	0015      	movs	r5, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2300      	movs	r3, #0
 80012e8:	e78b      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x308>
 80012ee:	e0c7      	b.n	8001480 <__aeabi_dadd+0x498>
 80012f0:	1c6b      	adds	r3, r5, #1
 80012f2:	055f      	lsls	r7, r3, #21
 80012f4:	0d7f      	lsrs	r7, r7, #21
 80012f6:	2f01      	cmp	r7, #1
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dadd+0x314>
 80012fa:	e0f1      	b.n	80014e0 <__aeabi_dadd+0x4f8>
 80012fc:	4d39      	ldr	r5, [pc, #228]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x31c>
 8001302:	e0b9      	b.n	8001478 <__aeabi_dadd+0x490>
 8001304:	1885      	adds	r5, r0, r2
 8001306:	000a      	movs	r2, r1
 8001308:	4285      	cmp	r5, r0
 800130a:	4189      	sbcs	r1, r1
 800130c:	4442      	add	r2, r8
 800130e:	4249      	negs	r1, r1
 8001310:	1851      	adds	r1, r2, r1
 8001312:	2207      	movs	r2, #7
 8001314:	07cf      	lsls	r7, r1, #31
 8001316:	086d      	lsrs	r5, r5, #1
 8001318:	432f      	orrs	r7, r5
 800131a:	0849      	lsrs	r1, r1, #1
 800131c:	403a      	ands	r2, r7
 800131e:	001d      	movs	r5, r3
 8001320:	e6c2      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001322:	2207      	movs	r2, #7
 8001324:	4930      	ldr	r1, [pc, #192]	; (80013e8 <__aeabi_dadd+0x400>)
 8001326:	1aed      	subs	r5, r5, r3
 8001328:	4031      	ands	r1, r6
 800132a:	403a      	ands	r2, r7
 800132c:	e6bc      	b.n	80010a8 <__aeabi_dadd+0xc0>
 800132e:	003e      	movs	r6, r7
 8001330:	3828      	subs	r0, #40	; 0x28
 8001332:	4086      	lsls	r6, r0
 8001334:	2700      	movs	r7, #0
 8001336:	e69f      	b.n	8001078 <__aeabi_dadd+0x90>
 8001338:	0038      	movs	r0, r7
 800133a:	f001 fcc9 	bl	8002cd0 <__clzsi2>
 800133e:	3020      	adds	r0, #32
 8001340:	e68e      	b.n	8001060 <__aeabi_dadd+0x78>
 8001342:	4643      	mov	r3, r8
 8001344:	4313      	orrs	r3, r2
 8001346:	001f      	movs	r7, r3
 8001348:	1e7a      	subs	r2, r7, #1
 800134a:	4197      	sbcs	r7, r2
 800134c:	1bc7      	subs	r7, r0, r7
 800134e:	42b8      	cmp	r0, r7
 8001350:	4180      	sbcs	r0, r0
 8001352:	4240      	negs	r0, r0
 8001354:	1a09      	subs	r1, r1, r0
 8001356:	e678      	b.n	800104a <__aeabi_dadd+0x62>
 8001358:	000e      	movs	r6, r1
 800135a:	003b      	movs	r3, r7
 800135c:	4306      	orrs	r6, r0
 800135e:	4313      	orrs	r3, r2
 8001360:	2d00      	cmp	r5, #0
 8001362:	d161      	bne.n	8001428 <__aeabi_dadd+0x440>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x382>
 8001368:	e0f4      	b.n	8001554 <__aeabi_dadd+0x56c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x388>
 800136e:	e11b      	b.n	80015a8 <__aeabi_dadd+0x5c0>
 8001370:	4664      	mov	r4, ip
 8001372:	0039      	movs	r1, r7
 8001374:	0010      	movs	r0, r2
 8001376:	e739      	b.n	80011ec <__aeabi_dadd+0x204>
 8001378:	4f1a      	ldr	r7, [pc, #104]	; (80013e4 <__aeabi_dadd+0x3fc>)
 800137a:	42bb      	cmp	r3, r7
 800137c:	d07a      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800137e:	0033      	movs	r3, r6
 8001380:	e6ff      	b.n	8001182 <__aeabi_dadd+0x19a>
 8001382:	0030      	movs	r0, r6
 8001384:	3d1f      	subs	r5, #31
 8001386:	40e8      	lsrs	r0, r5
 8001388:	2b20      	cmp	r3, #32
 800138a:	d003      	beq.n	8001394 <__aeabi_dadd+0x3ac>
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	409e      	lsls	r6, r3
 8001392:	4337      	orrs	r7, r6
 8001394:	1e7b      	subs	r3, r7, #1
 8001396:	419f      	sbcs	r7, r3
 8001398:	2207      	movs	r2, #7
 800139a:	4307      	orrs	r7, r0
 800139c:	403a      	ands	r2, r7
 800139e:	2100      	movs	r1, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e789      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 80013a4:	1a17      	subs	r7, r2, r0
 80013a6:	4643      	mov	r3, r8
 80013a8:	42ba      	cmp	r2, r7
 80013aa:	41b6      	sbcs	r6, r6
 80013ac:	1a59      	subs	r1, r3, r1
 80013ae:	4276      	negs	r6, r6
 80013b0:	1b8e      	subs	r6, r1, r6
 80013b2:	4664      	mov	r4, ip
 80013b4:	e64e      	b.n	8001054 <__aeabi_dadd+0x6c>
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x3d4>
 80013ba:	e0ad      	b.n	8001518 <__aeabi_dadd+0x530>
 80013bc:	2620      	movs	r6, #32
 80013be:	4647      	mov	r7, r8
 80013c0:	1af6      	subs	r6, r6, r3
 80013c2:	40b7      	lsls	r7, r6
 80013c4:	46b9      	mov	r9, r7
 80013c6:	0017      	movs	r7, r2
 80013c8:	46b2      	mov	sl, r6
 80013ca:	40df      	lsrs	r7, r3
 80013cc:	464e      	mov	r6, r9
 80013ce:	433e      	orrs	r6, r7
 80013d0:	0037      	movs	r7, r6
 80013d2:	4656      	mov	r6, sl
 80013d4:	40b2      	lsls	r2, r6
 80013d6:	1e56      	subs	r6, r2, #1
 80013d8:	41b2      	sbcs	r2, r6
 80013da:	4317      	orrs	r7, r2
 80013dc:	4642      	mov	r2, r8
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1889      	adds	r1, r1, r2
 80013e2:	e6ae      	b.n	8001142 <__aeabi_dadd+0x15a>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	800fffff 	.word	0x800fffff
 80013f0:	2620      	movs	r6, #32
 80013f2:	4647      	mov	r7, r8
 80013f4:	1af6      	subs	r6, r6, r3
 80013f6:	40b7      	lsls	r7, r6
 80013f8:	46b9      	mov	r9, r7
 80013fa:	0017      	movs	r7, r2
 80013fc:	46b2      	mov	sl, r6
 80013fe:	40df      	lsrs	r7, r3
 8001400:	464e      	mov	r6, r9
 8001402:	433e      	orrs	r6, r7
 8001404:	0037      	movs	r7, r6
 8001406:	4656      	mov	r6, sl
 8001408:	40b2      	lsls	r2, r6
 800140a:	1e56      	subs	r6, r2, #1
 800140c:	41b2      	sbcs	r2, r6
 800140e:	4317      	orrs	r7, r2
 8001410:	4642      	mov	r2, r8
 8001412:	40da      	lsrs	r2, r3
 8001414:	1a89      	subs	r1, r1, r2
 8001416:	e799      	b.n	800134c <__aeabi_dadd+0x364>
 8001418:	4c7f      	ldr	r4, [pc, #508]	; (8001618 <__aeabi_dadd+0x630>)
 800141a:	42a6      	cmp	r6, r4
 800141c:	d05b      	beq.n	80014d6 <__aeabi_dadd+0x4ee>
 800141e:	2480      	movs	r4, #128	; 0x80
 8001420:	0424      	lsls	r4, r4, #16
 8001422:	425b      	negs	r3, r3
 8001424:	4321      	orrs	r1, r4
 8001426:	e727      	b.n	8001278 <__aeabi_dadd+0x290>
 8001428:	2e00      	cmp	r6, #0
 800142a:	d10c      	bne.n	8001446 <__aeabi_dadd+0x45e>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x44a>
 8001430:	e0cb      	b.n	80015ca <__aeabi_dadd+0x5e2>
 8001432:	4664      	mov	r4, ip
 8001434:	0039      	movs	r1, r7
 8001436:	0010      	movs	r0, r2
 8001438:	4d77      	ldr	r5, [pc, #476]	; (8001618 <__aeabi_dadd+0x630>)
 800143a:	e6d7      	b.n	80011ec <__aeabi_dadd+0x204>
 800143c:	4f76      	ldr	r7, [pc, #472]	; (8001618 <__aeabi_dadd+0x630>)
 800143e:	42bb      	cmp	r3, r7
 8001440:	d018      	beq.n	8001474 <__aeabi_dadd+0x48c>
 8001442:	0033      	movs	r3, r6
 8001444:	e675      	b.n	8001132 <__aeabi_dadd+0x14a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d014      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800144a:	074b      	lsls	r3, r1, #29
 800144c:	08c0      	lsrs	r0, r0, #3
 800144e:	4318      	orrs	r0, r3
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d007      	beq.n	800146a <__aeabi_dadd+0x482>
 800145a:	08fc      	lsrs	r4, r7, #3
 800145c:	421c      	tst	r4, r3
 800145e:	d104      	bne.n	800146a <__aeabi_dadd+0x482>
 8001460:	0779      	lsls	r1, r7, #29
 8001462:	08d0      	lsrs	r0, r2, #3
 8001464:	4308      	orrs	r0, r1
 8001466:	46e1      	mov	r9, ip
 8001468:	0021      	movs	r1, r4
 800146a:	464c      	mov	r4, r9
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	4311      	orrs	r1, r2
 8001472:	00c0      	lsls	r0, r0, #3
 8001474:	4d68      	ldr	r5, [pc, #416]	; (8001618 <__aeabi_dadd+0x630>)
 8001476:	e6b9      	b.n	80011ec <__aeabi_dadd+0x204>
 8001478:	001d      	movs	r5, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2300      	movs	r3, #0
 800147e:	e6c0      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d15b      	bne.n	800153c <__aeabi_dadd+0x554>
 8001484:	000d      	movs	r5, r1
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x4a4>
 800148a:	e6e2      	b.n	8001252 <__aeabi_dadd+0x26a>
 800148c:	1c5d      	adds	r5, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x4aa>
 8001490:	e0b0      	b.n	80015f4 <__aeabi_dadd+0x60c>
 8001492:	4d61      	ldr	r5, [pc, #388]	; (8001618 <__aeabi_dadd+0x630>)
 8001494:	42ae      	cmp	r6, r5
 8001496:	d01f      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001498:	43db      	mvns	r3, r3
 800149a:	2b38      	cmp	r3, #56	; 0x38
 800149c:	dc71      	bgt.n	8001582 <__aeabi_dadd+0x59a>
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x4bc>
 80014a2:	e096      	b.n	80015d2 <__aeabi_dadd+0x5ea>
 80014a4:	2520      	movs	r5, #32
 80014a6:	000f      	movs	r7, r1
 80014a8:	1aed      	subs	r5, r5, r3
 80014aa:	40af      	lsls	r7, r5
 80014ac:	46b9      	mov	r9, r7
 80014ae:	0007      	movs	r7, r0
 80014b0:	46aa      	mov	sl, r5
 80014b2:	40df      	lsrs	r7, r3
 80014b4:	464d      	mov	r5, r9
 80014b6:	433d      	orrs	r5, r7
 80014b8:	002f      	movs	r7, r5
 80014ba:	4655      	mov	r5, sl
 80014bc:	40a8      	lsls	r0, r5
 80014be:	40d9      	lsrs	r1, r3
 80014c0:	1e45      	subs	r5, r0, #1
 80014c2:	41a8      	sbcs	r0, r5
 80014c4:	4488      	add	r8, r1
 80014c6:	4307      	orrs	r7, r0
 80014c8:	18bf      	adds	r7, r7, r2
 80014ca:	4297      	cmp	r7, r2
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	4251      	negs	r1, r2
 80014d0:	4441      	add	r1, r8
 80014d2:	0035      	movs	r5, r6
 80014d4:	e63a      	b.n	800114c <__aeabi_dadd+0x164>
 80014d6:	4664      	mov	r4, ip
 80014d8:	0035      	movs	r5, r6
 80014da:	4641      	mov	r1, r8
 80014dc:	0010      	movs	r0, r2
 80014de:	e685      	b.n	80011ec <__aeabi_dadd+0x204>
 80014e0:	000b      	movs	r3, r1
 80014e2:	4303      	orrs	r3, r0
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x502>
 80014e8:	e663      	b.n	80011b2 <__aeabi_dadd+0x1ca>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f5      	beq.n	80014da <__aeabi_dadd+0x4f2>
 80014ee:	4643      	mov	r3, r8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x50e>
 80014f4:	e67a      	b.n	80011ec <__aeabi_dadd+0x204>
 80014f6:	1887      	adds	r7, r0, r2
 80014f8:	4287      	cmp	r7, r0
 80014fa:	4180      	sbcs	r0, r0
 80014fc:	2207      	movs	r2, #7
 80014fe:	4441      	add	r1, r8
 8001500:	4240      	negs	r0, r0
 8001502:	1809      	adds	r1, r1, r0
 8001504:	403a      	ands	r2, r7
 8001506:	020b      	lsls	r3, r1, #8
 8001508:	d400      	bmi.n	800150c <__aeabi_dadd+0x524>
 800150a:	e6d5      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <__aeabi_dadd+0x634>)
 800150e:	3501      	adds	r5, #1
 8001510:	4019      	ands	r1, r3
 8001512:	e5c9      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001514:	0038      	movs	r0, r7
 8001516:	e669      	b.n	80011ec <__aeabi_dadd+0x204>
 8001518:	001e      	movs	r6, r3
 800151a:	4647      	mov	r7, r8
 800151c:	3e20      	subs	r6, #32
 800151e:	40f7      	lsrs	r7, r6
 8001520:	46bc      	mov	ip, r7
 8001522:	2b20      	cmp	r3, #32
 8001524:	d004      	beq.n	8001530 <__aeabi_dadd+0x548>
 8001526:	2640      	movs	r6, #64	; 0x40
 8001528:	1af3      	subs	r3, r6, r3
 800152a:	4646      	mov	r6, r8
 800152c:	409e      	lsls	r6, r3
 800152e:	4332      	orrs	r2, r6
 8001530:	0017      	movs	r7, r2
 8001532:	4663      	mov	r3, ip
 8001534:	1e7a      	subs	r2, r7, #1
 8001536:	4197      	sbcs	r7, r2
 8001538:	431f      	orrs	r7, r3
 800153a:	e602      	b.n	8001142 <__aeabi_dadd+0x15a>
 800153c:	4d36      	ldr	r5, [pc, #216]	; (8001618 <__aeabi_dadd+0x630>)
 800153e:	42ae      	cmp	r6, r5
 8001540:	d0ca      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001542:	2580      	movs	r5, #128	; 0x80
 8001544:	042d      	lsls	r5, r5, #16
 8001546:	425b      	negs	r3, r3
 8001548:	4329      	orrs	r1, r5
 800154a:	e7a6      	b.n	800149a <__aeabi_dadd+0x4b2>
 800154c:	4308      	orrs	r0, r1
 800154e:	1e41      	subs	r1, r0, #1
 8001550:	4188      	sbcs	r0, r1
 8001552:	e6a6      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x572>
 8001558:	e648      	b.n	80011ec <__aeabi_dadd+0x204>
 800155a:	1a87      	subs	r7, r0, r2
 800155c:	4643      	mov	r3, r8
 800155e:	42b8      	cmp	r0, r7
 8001560:	41b6      	sbcs	r6, r6
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	4276      	negs	r6, r6
 8001566:	1b9e      	subs	r6, r3, r6
 8001568:	0233      	lsls	r3, r6, #8
 800156a:	d54b      	bpl.n	8001604 <__aeabi_dadd+0x61c>
 800156c:	1a17      	subs	r7, r2, r0
 800156e:	4643      	mov	r3, r8
 8001570:	42ba      	cmp	r2, r7
 8001572:	4192      	sbcs	r2, r2
 8001574:	1a59      	subs	r1, r3, r1
 8001576:	4252      	negs	r2, r2
 8001578:	1a89      	subs	r1, r1, r2
 800157a:	2207      	movs	r2, #7
 800157c:	4664      	mov	r4, ip
 800157e:	403a      	ands	r2, r7
 8001580:	e592      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001582:	4301      	orrs	r1, r0
 8001584:	000f      	movs	r7, r1
 8001586:	1e79      	subs	r1, r7, #1
 8001588:	418f      	sbcs	r7, r1
 800158a:	e79d      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 800158c:	001c      	movs	r4, r3
 800158e:	000f      	movs	r7, r1
 8001590:	3c20      	subs	r4, #32
 8001592:	40e7      	lsrs	r7, r4
 8001594:	2b20      	cmp	r3, #32
 8001596:	d003      	beq.n	80015a0 <__aeabi_dadd+0x5b8>
 8001598:	2440      	movs	r4, #64	; 0x40
 800159a:	1ae3      	subs	r3, r4, r3
 800159c:	4099      	lsls	r1, r3
 800159e:	4308      	orrs	r0, r1
 80015a0:	1e41      	subs	r1, r0, #1
 80015a2:	4188      	sbcs	r0, r1
 80015a4:	4338      	orrs	r0, r7
 80015a6:	e67c      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2400      	movs	r4, #0
 80015ac:	e625      	b.n	80011fa <__aeabi_dadd+0x212>
 80015ae:	1a17      	subs	r7, r2, r0
 80015b0:	4643      	mov	r3, r8
 80015b2:	42ba      	cmp	r2, r7
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	1a59      	subs	r1, r3, r1
 80015b8:	4252      	negs	r2, r2
 80015ba:	1a89      	subs	r1, r1, r2
 80015bc:	4664      	mov	r4, ip
 80015be:	0035      	movs	r5, r6
 80015c0:	e543      	b.n	800104a <__aeabi_dadd+0x62>
 80015c2:	4641      	mov	r1, r8
 80015c4:	0010      	movs	r0, r2
 80015c6:	4d14      	ldr	r5, [pc, #80]	; (8001618 <__aeabi_dadd+0x630>)
 80015c8:	e610      	b.n	80011ec <__aeabi_dadd+0x204>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	2400      	movs	r4, #0
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	e680      	b.n	80012d4 <__aeabi_dadd+0x2ec>
 80015d2:	001d      	movs	r5, r3
 80015d4:	000f      	movs	r7, r1
 80015d6:	3d20      	subs	r5, #32
 80015d8:	40ef      	lsrs	r7, r5
 80015da:	46bc      	mov	ip, r7
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dadd+0x600>
 80015e0:	2540      	movs	r5, #64	; 0x40
 80015e2:	1aeb      	subs	r3, r5, r3
 80015e4:	4099      	lsls	r1, r3
 80015e6:	4308      	orrs	r0, r1
 80015e8:	0007      	movs	r7, r0
 80015ea:	4663      	mov	r3, ip
 80015ec:	1e78      	subs	r0, r7, #1
 80015ee:	4187      	sbcs	r7, r0
 80015f0:	431f      	orrs	r7, r3
 80015f2:	e769      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 80015f4:	1887      	adds	r7, r0, r2
 80015f6:	4297      	cmp	r7, r2
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4441      	add	r1, r8
 80015fc:	425b      	negs	r3, r3
 80015fe:	18c9      	adds	r1, r1, r3
 8001600:	0035      	movs	r5, r6
 8001602:	e5a3      	b.n	800114c <__aeabi_dadd+0x164>
 8001604:	003b      	movs	r3, r7
 8001606:	4333      	orrs	r3, r6
 8001608:	d0ce      	beq.n	80015a8 <__aeabi_dadd+0x5c0>
 800160a:	2207      	movs	r2, #7
 800160c:	0031      	movs	r1, r6
 800160e:	403a      	ands	r2, r7
 8001610:	e652      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 8001612:	2300      	movs	r3, #0
 8001614:	001a      	movs	r2, r3
 8001616:	e5f4      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <__aeabi_ddiv>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	4683      	mov	fp, r0
 800162e:	0007      	movs	r7, r0
 8001630:	030e      	lsls	r6, r1, #12
 8001632:	0048      	lsls	r0, r1, #1
 8001634:	b085      	sub	sp, #20
 8001636:	4692      	mov	sl, r2
 8001638:	001c      	movs	r4, r3
 800163a:	0b36      	lsrs	r6, r6, #12
 800163c:	0d40      	lsrs	r0, r0, #21
 800163e:	0fcd      	lsrs	r5, r1, #31
 8001640:	2800      	cmp	r0, #0
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x26>
 8001644:	e09d      	b.n	8001782 <__aeabi_ddiv+0x162>
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <__aeabi_ddiv+0x27c>)
 8001648:	4298      	cmp	r0, r3
 800164a:	d039      	beq.n	80016c0 <__aeabi_ddiv+0xa0>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	00f6      	lsls	r6, r6, #3
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431e      	orrs	r6, r3
 8001654:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <__aeabi_ddiv+0x280>)
 8001656:	0f7b      	lsrs	r3, r7, #29
 8001658:	4333      	orrs	r3, r6
 800165a:	4699      	mov	r9, r3
 800165c:	4694      	mov	ip, r2
 800165e:	0003      	movs	r3, r0
 8001660:	4463      	add	r3, ip
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2600      	movs	r6, #0
 8001668:	00ff      	lsls	r7, r7, #3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	0323      	lsls	r3, r4, #12
 800166e:	0b1b      	lsrs	r3, r3, #12
 8001670:	4698      	mov	r8, r3
 8001672:	0063      	lsls	r3, r4, #1
 8001674:	0fe4      	lsrs	r4, r4, #31
 8001676:	4652      	mov	r2, sl
 8001678:	0d5b      	lsrs	r3, r3, #21
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x60>
 800167e:	e0b3      	b.n	80017e8 <__aeabi_ddiv+0x1c8>
 8001680:	4986      	ldr	r1, [pc, #536]	; (800189c <__aeabi_ddiv+0x27c>)
 8001682:	428b      	cmp	r3, r1
 8001684:	d100      	bne.n	8001688 <__aeabi_ddiv+0x68>
 8001686:	e09e      	b.n	80017c6 <__aeabi_ddiv+0x1a6>
 8001688:	4642      	mov	r2, r8
 800168a:	00d1      	lsls	r1, r2, #3
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	4651      	mov	r1, sl
 8001694:	0f49      	lsrs	r1, r1, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	468b      	mov	fp, r1
 800169a:	4981      	ldr	r1, [pc, #516]	; (80018a0 <__aeabi_ddiv+0x280>)
 800169c:	4652      	mov	r2, sl
 800169e:	468c      	mov	ip, r1
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	4463      	add	r3, ip
 80016a4:	1acb      	subs	r3, r1, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	002b      	movs	r3, r5
 80016ae:	4063      	eors	r3, r4
 80016b0:	469a      	mov	sl, r3
 80016b2:	2e0f      	cmp	r6, #15
 80016b4:	d900      	bls.n	80016b8 <__aeabi_ddiv+0x98>
 80016b6:	e105      	b.n	80018c4 <__aeabi_ddiv+0x2a4>
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <__aeabi_ddiv+0x284>)
 80016ba:	00b6      	lsls	r6, r6, #2
 80016bc:	599b      	ldr	r3, [r3, r6]
 80016be:	469f      	mov	pc, r3
 80016c0:	465b      	mov	r3, fp
 80016c2:	4333      	orrs	r3, r6
 80016c4:	4699      	mov	r9, r3
 80016c6:	d000      	beq.n	80016ca <__aeabi_ddiv+0xaa>
 80016c8:	e0b8      	b.n	800183c <__aeabi_ddiv+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	2608      	movs	r6, #8
 80016ce:	2700      	movs	r7, #0
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	e7ca      	b.n	800166c <__aeabi_ddiv+0x4c>
 80016d6:	46cb      	mov	fp, r9
 80016d8:	003a      	movs	r2, r7
 80016da:	9902      	ldr	r1, [sp, #8]
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	469a      	mov	sl, r3
 80016e2:	2902      	cmp	r1, #2
 80016e4:	d027      	beq.n	8001736 <__aeabi_ddiv+0x116>
 80016e6:	2903      	cmp	r1, #3
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0xcc>
 80016ea:	e280      	b.n	8001bee <__aeabi_ddiv+0x5ce>
 80016ec:	2901      	cmp	r1, #1
 80016ee:	d044      	beq.n	800177a <__aeabi_ddiv+0x15a>
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <__aeabi_ddiv+0x288>)
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	468c      	mov	ip, r1
 80016f6:	4463      	add	r3, ip
 80016f8:	001c      	movs	r4, r3
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	dd38      	ble.n	8001770 <__aeabi_ddiv+0x150>
 80016fe:	0753      	lsls	r3, r2, #29
 8001700:	d000      	beq.n	8001704 <__aeabi_ddiv+0xe4>
 8001702:	e213      	b.n	8001b2c <__aeabi_ddiv+0x50c>
 8001704:	08d2      	lsrs	r2, r2, #3
 8001706:	465b      	mov	r3, fp
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	d509      	bpl.n	8001720 <__aeabi_ddiv+0x100>
 800170c:	4659      	mov	r1, fp
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <__aeabi_ddiv+0x28c>)
 8001710:	4019      	ands	r1, r3
 8001712:	468b      	mov	fp, r1
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	00c9      	lsls	r1, r1, #3
 8001718:	468c      	mov	ip, r1
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	4463      	add	r3, ip
 800171e:	001c      	movs	r4, r3
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <__aeabi_ddiv+0x290>)
 8001722:	429c      	cmp	r4, r3
 8001724:	dc07      	bgt.n	8001736 <__aeabi_ddiv+0x116>
 8001726:	465b      	mov	r3, fp
 8001728:	0564      	lsls	r4, r4, #21
 800172a:	075f      	lsls	r7, r3, #29
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4317      	orrs	r7, r2
 8001730:	0b1b      	lsrs	r3, r3, #12
 8001732:	0d62      	lsrs	r2, r4, #21
 8001734:	e002      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001736:	2300      	movs	r3, #0
 8001738:	2700      	movs	r7, #0
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <__aeabi_ddiv+0x27c>)
 800173c:	2100      	movs	r1, #0
 800173e:	031b      	lsls	r3, r3, #12
 8001740:	0b1c      	lsrs	r4, r3, #12
 8001742:	0d0b      	lsrs	r3, r1, #20
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	4323      	orrs	r3, r4
 8001748:	0514      	lsls	r4, r2, #20
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <__aeabi_ddiv+0x294>)
 800174c:	0038      	movs	r0, r7
 800174e:	4013      	ands	r3, r2
 8001750:	431c      	orrs	r4, r3
 8001752:	4653      	mov	r3, sl
 8001754:	0064      	lsls	r4, r4, #1
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	0864      	lsrs	r4, r4, #1
 800175a:	431c      	orrs	r4, r3
 800175c:	0021      	movs	r1, r4
 800175e:	b005      	add	sp, #20
 8001760:	bc3c      	pop	{r2, r3, r4, r5}
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	46a2      	mov	sl, r4
 8001768:	46ab      	mov	fp, r5
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	2201      	movs	r2, #1
 800176e:	4252      	negs	r2, r2
 8001770:	2301      	movs	r3, #1
 8001772:	1b1b      	subs	r3, r3, r4
 8001774:	2b38      	cmp	r3, #56	; 0x38
 8001776:	dc00      	bgt.n	800177a <__aeabi_ddiv+0x15a>
 8001778:	e1ad      	b.n	8001ad6 <__aeabi_ddiv+0x4b6>
 800177a:	2200      	movs	r2, #0
 800177c:	2300      	movs	r3, #0
 800177e:	2700      	movs	r7, #0
 8001780:	e7dc      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001782:	465b      	mov	r3, fp
 8001784:	4333      	orrs	r3, r6
 8001786:	4699      	mov	r9, r3
 8001788:	d05e      	beq.n	8001848 <__aeabi_ddiv+0x228>
 800178a:	2e00      	cmp	r6, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x170>
 800178e:	e18a      	b.n	8001aa6 <__aeabi_ddiv+0x486>
 8001790:	0030      	movs	r0, r6
 8001792:	f001 fa9d 	bl	8002cd0 <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	3b0b      	subs	r3, #11
 800179a:	2b1c      	cmp	r3, #28
 800179c:	dd00      	ble.n	80017a0 <__aeabi_ddiv+0x180>
 800179e:	e17b      	b.n	8001a98 <__aeabi_ddiv+0x478>
 80017a0:	221d      	movs	r2, #29
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	465a      	mov	r2, fp
 80017a6:	0001      	movs	r1, r0
 80017a8:	40da      	lsrs	r2, r3
 80017aa:	3908      	subs	r1, #8
 80017ac:	408e      	lsls	r6, r1
 80017ae:	0013      	movs	r3, r2
 80017b0:	465f      	mov	r7, fp
 80017b2:	4333      	orrs	r3, r6
 80017b4:	4699      	mov	r9, r3
 80017b6:	408f      	lsls	r7, r1
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <__aeabi_ddiv+0x298>)
 80017ba:	2600      	movs	r6, #0
 80017bc:	1a1b      	subs	r3, r3, r0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	e752      	b.n	800166c <__aeabi_ddiv+0x4c>
 80017c6:	4641      	mov	r1, r8
 80017c8:	4653      	mov	r3, sl
 80017ca:	430b      	orrs	r3, r1
 80017cc:	493b      	ldr	r1, [pc, #236]	; (80018bc <__aeabi_ddiv+0x29c>)
 80017ce:	469b      	mov	fp, r3
 80017d0:	468c      	mov	ip, r1
 80017d2:	9b00      	ldr	r3, [sp, #0]
 80017d4:	4463      	add	r3, ip
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	465b      	mov	r3, fp
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d13b      	bne.n	8001856 <__aeabi_ddiv+0x236>
 80017de:	2302      	movs	r3, #2
 80017e0:	2200      	movs	r2, #0
 80017e2:	431e      	orrs	r6, r3
 80017e4:	2102      	movs	r1, #2
 80017e6:	e761      	b.n	80016ac <__aeabi_ddiv+0x8c>
 80017e8:	4643      	mov	r3, r8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	d037      	beq.n	8001860 <__aeabi_ddiv+0x240>
 80017f0:	4643      	mov	r3, r8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <__aeabi_ddiv+0x1d8>
 80017f6:	e162      	b.n	8001abe <__aeabi_ddiv+0x49e>
 80017f8:	4640      	mov	r0, r8
 80017fa:	f001 fa69 	bl	8002cd0 <__clzsi2>
 80017fe:	0003      	movs	r3, r0
 8001800:	3b0b      	subs	r3, #11
 8001802:	2b1c      	cmp	r3, #28
 8001804:	dd00      	ble.n	8001808 <__aeabi_ddiv+0x1e8>
 8001806:	e153      	b.n	8001ab0 <__aeabi_ddiv+0x490>
 8001808:	0002      	movs	r2, r0
 800180a:	4641      	mov	r1, r8
 800180c:	3a08      	subs	r2, #8
 800180e:	4091      	lsls	r1, r2
 8001810:	4688      	mov	r8, r1
 8001812:	211d      	movs	r1, #29
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	4651      	mov	r1, sl
 8001818:	40d9      	lsrs	r1, r3
 800181a:	000b      	movs	r3, r1
 800181c:	4641      	mov	r1, r8
 800181e:	430b      	orrs	r3, r1
 8001820:	469b      	mov	fp, r3
 8001822:	4653      	mov	r3, sl
 8001824:	4093      	lsls	r3, r2
 8001826:	001a      	movs	r2, r3
 8001828:	9b00      	ldr	r3, [sp, #0]
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <__aeabi_ddiv+0x2a0>)
 800182c:	469c      	mov	ip, r3
 800182e:	4460      	add	r0, ip
 8001830:	0003      	movs	r3, r0
 8001832:	468c      	mov	ip, r1
 8001834:	4463      	add	r3, ip
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	e737      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800183c:	2303      	movs	r3, #3
 800183e:	46b1      	mov	r9, r6
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	260c      	movs	r6, #12
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2604      	movs	r6, #4
 8001850:	2700      	movs	r7, #0
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	e70a      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001856:	2303      	movs	r3, #3
 8001858:	46c3      	mov	fp, r8
 800185a:	431e      	orrs	r6, r3
 800185c:	2103      	movs	r1, #3
 800185e:	e725      	b.n	80016ac <__aeabi_ddiv+0x8c>
 8001860:	3301      	adds	r3, #1
 8001862:	431e      	orrs	r6, r3
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	e720      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800186a:	2300      	movs	r3, #0
 800186c:	469a      	mov	sl, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	2700      	movs	r7, #0
 8001872:	031b      	lsls	r3, r3, #12
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <__aeabi_ddiv+0x27c>)
 8001876:	e761      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	4649      	mov	r1, r9
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	4219      	tst	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x264>
 8001882:	e0e2      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 8001884:	4659      	mov	r1, fp
 8001886:	4219      	tst	r1, r3
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0x26c>
 800188a:	e0de      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 800188c:	430b      	orrs	r3, r1
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	0017      	movs	r7, r2
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	46a2      	mov	sl, r4
 8001896:	4a01      	ldr	r2, [pc, #4]	; (800189c <__aeabi_ddiv+0x27c>)
 8001898:	e750      	b.n	800173c <__aeabi_ddiv+0x11c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	fffffc01 	.word	0xfffffc01
 80018a4:	08017814 	.word	0x08017814
 80018a8:	000003ff 	.word	0x000003ff
 80018ac:	feffffff 	.word	0xfeffffff
 80018b0:	000007fe 	.word	0x000007fe
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	fffff801 	.word	0xfffff801
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	45d9      	cmp	r9, fp
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x2aa>
 80018c8:	e0cb      	b.n	8001a62 <__aeabi_ddiv+0x442>
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x2ae>
 80018cc:	e0c6      	b.n	8001a5c <__aeabi_ddiv+0x43c>
 80018ce:	003c      	movs	r4, r7
 80018d0:	4648      	mov	r0, r9
 80018d2:	2700      	movs	r7, #0
 80018d4:	9b00      	ldr	r3, [sp, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	465b      	mov	r3, fp
 80018dc:	0e16      	lsrs	r6, r2, #24
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431e      	orrs	r6, r3
 80018e2:	0213      	lsls	r3, r2, #8
 80018e4:	4698      	mov	r8, r3
 80018e6:	0433      	lsls	r3, r6, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	4699      	mov	r9, r3
 80018ec:	0c31      	lsrs	r1, r6, #16
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	f7fe fcb4 	bl	800025c <__aeabi_uidivmod>
 80018f4:	464a      	mov	r2, r9
 80018f6:	4342      	muls	r2, r0
 80018f8:	040b      	lsls	r3, r1, #16
 80018fa:	0c21      	lsrs	r1, r4, #16
 80018fc:	0005      	movs	r5, r0
 80018fe:	4319      	orrs	r1, r3
 8001900:	428a      	cmp	r2, r1
 8001902:	d907      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001904:	1989      	adds	r1, r1, r6
 8001906:	3d01      	subs	r5, #1
 8001908:	428e      	cmp	r6, r1
 800190a:	d803      	bhi.n	8001914 <__aeabi_ddiv+0x2f4>
 800190c:	428a      	cmp	r2, r1
 800190e:	d901      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001910:	1e85      	subs	r5, r0, #2
 8001912:	1989      	adds	r1, r1, r6
 8001914:	1a88      	subs	r0, r1, r2
 8001916:	9901      	ldr	r1, [sp, #4]
 8001918:	f7fe fca0 	bl	800025c <__aeabi_uidivmod>
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	468c      	mov	ip, r1
 8001920:	464a      	mov	r2, r9
 8001922:	0421      	lsls	r1, r4, #16
 8001924:	4664      	mov	r4, ip
 8001926:	4342      	muls	r2, r0
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	0003      	movs	r3, r0
 800192c:	4321      	orrs	r1, r4
 800192e:	428a      	cmp	r2, r1
 8001930:	d904      	bls.n	800193c <__aeabi_ddiv+0x31c>
 8001932:	1989      	adds	r1, r1, r6
 8001934:	3b01      	subs	r3, #1
 8001936:	428e      	cmp	r6, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x31c>
 800193a:	e0f1      	b.n	8001b20 <__aeabi_ddiv+0x500>
 800193c:	042d      	lsls	r5, r5, #16
 800193e:	431d      	orrs	r5, r3
 8001940:	46ab      	mov	fp, r5
 8001942:	4643      	mov	r3, r8
 8001944:	1a89      	subs	r1, r1, r2
 8001946:	4642      	mov	r2, r8
 8001948:	0c28      	lsrs	r0, r5, #16
 800194a:	0412      	lsls	r2, r2, #16
 800194c:	0c1d      	lsrs	r5, r3, #16
 800194e:	465b      	mov	r3, fp
 8001950:	0c14      	lsrs	r4, r2, #16
 8001952:	0022      	movs	r2, r4
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	435a      	muls	r2, r3
 800195a:	9403      	str	r4, [sp, #12]
 800195c:	436b      	muls	r3, r5
 800195e:	4344      	muls	r4, r0
 8001960:	9502      	str	r5, [sp, #8]
 8001962:	4368      	muls	r0, r5
 8001964:	191b      	adds	r3, r3, r4
 8001966:	0c15      	lsrs	r5, r2, #16
 8001968:	18eb      	adds	r3, r5, r3
 800196a:	429c      	cmp	r4, r3
 800196c:	d903      	bls.n	8001976 <__aeabi_ddiv+0x356>
 800196e:	2480      	movs	r4, #128	; 0x80
 8001970:	0264      	lsls	r4, r4, #9
 8001972:	46a4      	mov	ip, r4
 8001974:	4460      	add	r0, ip
 8001976:	0c1c      	lsrs	r4, r3, #16
 8001978:	0415      	lsls	r5, r2, #16
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	0c2d      	lsrs	r5, r5, #16
 800197e:	1820      	adds	r0, r4, r0
 8001980:	195d      	adds	r5, r3, r5
 8001982:	4281      	cmp	r1, r0
 8001984:	d377      	bcc.n	8001a76 <__aeabi_ddiv+0x456>
 8001986:	d073      	beq.n	8001a70 <__aeabi_ddiv+0x450>
 8001988:	1a0c      	subs	r4, r1, r0
 800198a:	4aa2      	ldr	r2, [pc, #648]	; (8001c14 <__aeabi_ddiv+0x5f4>)
 800198c:	1b7d      	subs	r5, r7, r5
 800198e:	42af      	cmp	r7, r5
 8001990:	41bf      	sbcs	r7, r7
 8001992:	4694      	mov	ip, r2
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	427f      	negs	r7, r7
 8001998:	4463      	add	r3, ip
 800199a:	1be0      	subs	r0, r4, r7
 800199c:	001c      	movs	r4, r3
 800199e:	4286      	cmp	r6, r0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x384>
 80019a2:	e0db      	b.n	8001b5c <__aeabi_ddiv+0x53c>
 80019a4:	9901      	ldr	r1, [sp, #4]
 80019a6:	f7fe fc59 	bl	800025c <__aeabi_uidivmod>
 80019aa:	464a      	mov	r2, r9
 80019ac:	4342      	muls	r2, r0
 80019ae:	040b      	lsls	r3, r1, #16
 80019b0:	0c29      	lsrs	r1, r5, #16
 80019b2:	0007      	movs	r7, r0
 80019b4:	4319      	orrs	r1, r3
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d907      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	3f01      	subs	r7, #1
 80019be:	428e      	cmp	r6, r1
 80019c0:	d803      	bhi.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d901      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c6:	1e87      	subs	r7, r0, #2
 80019c8:	1989      	adds	r1, r1, r6
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	9901      	ldr	r1, [sp, #4]
 80019ce:	f7fe fc45 	bl	800025c <__aeabi_uidivmod>
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	464a      	mov	r2, r9
 80019d6:	4689      	mov	r9, r1
 80019d8:	0429      	lsls	r1, r5, #16
 80019da:	464d      	mov	r5, r9
 80019dc:	4342      	muls	r2, r0
 80019de:	0c09      	lsrs	r1, r1, #16
 80019e0:	0003      	movs	r3, r0
 80019e2:	4329      	orrs	r1, r5
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d907      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019e8:	1989      	adds	r1, r1, r6
 80019ea:	3b01      	subs	r3, #1
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d803      	bhi.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d901      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f4:	1e83      	subs	r3, r0, #2
 80019f6:	1989      	adds	r1, r1, r6
 80019f8:	043f      	lsls	r7, r7, #16
 80019fa:	1a89      	subs	r1, r1, r2
 80019fc:	003a      	movs	r2, r7
 80019fe:	9f03      	ldr	r7, [sp, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	0038      	movs	r0, r7
 8001a04:	0413      	lsls	r3, r2, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4358      	muls	r0, r3
 8001a0a:	4681      	mov	r9, r0
 8001a0c:	9802      	ldr	r0, [sp, #8]
 8001a0e:	0c15      	lsrs	r5, r2, #16
 8001a10:	436f      	muls	r7, r5
 8001a12:	4343      	muls	r3, r0
 8001a14:	4345      	muls	r5, r0
 8001a16:	4648      	mov	r0, r9
 8001a18:	0c00      	lsrs	r0, r0, #16
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	19db      	adds	r3, r3, r7
 8001a1e:	4463      	add	r3, ip
 8001a20:	429f      	cmp	r7, r3
 8001a22:	d903      	bls.n	8001a2c <__aeabi_ddiv+0x40c>
 8001a24:	2080      	movs	r0, #128	; 0x80
 8001a26:	0240      	lsls	r0, r0, #9
 8001a28:	4684      	mov	ip, r0
 8001a2a:	4465      	add	r5, ip
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	0c1f      	lsrs	r7, r3, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c00      	lsrs	r0, r0, #16
 8001a36:	197d      	adds	r5, r7, r5
 8001a38:	1818      	adds	r0, r3, r0
 8001a3a:	42a9      	cmp	r1, r5
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x420>
 8001a3e:	e084      	b.n	8001b4a <__aeabi_ddiv+0x52a>
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x424>
 8001a42:	e07f      	b.n	8001b44 <__aeabi_ddiv+0x524>
 8001a44:	2301      	movs	r3, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	e657      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	4313      	orrs	r3, r2
 8001a52:	031b      	lsls	r3, r3, #12
 8001a54:	0b1b      	lsrs	r3, r3, #12
 8001a56:	46aa      	mov	sl, r5
 8001a58:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001a5a:	e66f      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001a5c:	42ba      	cmp	r2, r7
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_ddiv+0x442>
 8001a60:	e735      	b.n	80018ce <__aeabi_ddiv+0x2ae>
 8001a62:	464b      	mov	r3, r9
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	0858      	lsrs	r0, r3, #1
 8001a68:	087b      	lsrs	r3, r7, #1
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	07ff      	lsls	r7, r7, #31
 8001a6e:	e734      	b.n	80018da <__aeabi_ddiv+0x2ba>
 8001a70:	2400      	movs	r4, #0
 8001a72:	42af      	cmp	r7, r5
 8001a74:	d289      	bcs.n	800198a <__aeabi_ddiv+0x36a>
 8001a76:	4447      	add	r7, r8
 8001a78:	4547      	cmp	r7, r8
 8001a7a:	41a4      	sbcs	r4, r4
 8001a7c:	465b      	mov	r3, fp
 8001a7e:	4264      	negs	r4, r4
 8001a80:	19a4      	adds	r4, r4, r6
 8001a82:	1864      	adds	r4, r4, r1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d21e      	bcs.n	8001ac8 <__aeabi_ddiv+0x4a8>
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	d86d      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001a90:	e0b6      	b.n	8001c00 <__aeabi_ddiv+0x5e0>
 8001a92:	1a24      	subs	r4, r4, r0
 8001a94:	469b      	mov	fp, r3
 8001a96:	e778      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	465a      	mov	r2, fp
 8001a9c:	3b28      	subs	r3, #40	; 0x28
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	e688      	b.n	80017b8 <__aeabi_ddiv+0x198>
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f001 f912 	bl	8002cd0 <__clzsi2>
 8001aac:	3020      	adds	r0, #32
 8001aae:	e672      	b.n	8001796 <__aeabi_ddiv+0x176>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	3b28      	subs	r3, #40	; 0x28
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	4693      	mov	fp, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	e6b4      	b.n	8001828 <__aeabi_ddiv+0x208>
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f001 f906 	bl	8002cd0 <__clzsi2>
 8001ac4:	3020      	adds	r0, #32
 8001ac6:	e69a      	b.n	80017fe <__aeabi_ddiv+0x1de>
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d1e2      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001acc:	45b8      	cmp	r8, r7
 8001ace:	d9dc      	bls.n	8001a8a <__aeabi_ddiv+0x46a>
 8001ad0:	1a34      	subs	r4, r6, r0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	e759      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	dc65      	bgt.n	8001ba6 <__aeabi_ddiv+0x586>
 8001ada:	4c50      	ldr	r4, [pc, #320]	; (8001c1c <__aeabi_ddiv+0x5fc>)
 8001adc:	9900      	ldr	r1, [sp, #0]
 8001ade:	46a4      	mov	ip, r4
 8001ae0:	465c      	mov	r4, fp
 8001ae2:	4461      	add	r1, ip
 8001ae4:	0008      	movs	r0, r1
 8001ae6:	408c      	lsls	r4, r1
 8001ae8:	0011      	movs	r1, r2
 8001aea:	4082      	lsls	r2, r0
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	1e50      	subs	r0, r2, #1
 8001af0:	4182      	sbcs	r2, r0
 8001af2:	430c      	orrs	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	465a      	mov	r2, fp
 8001af8:	40da      	lsrs	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	0762      	lsls	r2, r4, #29
 8001afe:	d009      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b00:	220f      	movs	r2, #15
 8001b02:	4022      	ands	r2, r4
 8001b04:	2a04      	cmp	r2, #4
 8001b06:	d005      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b08:	0022      	movs	r2, r4
 8001b0a:	1d14      	adds	r4, r2, #4
 8001b0c:	4294      	cmp	r4, r2
 8001b0e:	4189      	sbcs	r1, r1
 8001b10:	4249      	negs	r1, r1
 8001b12:	185b      	adds	r3, r3, r1
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	d562      	bpl.n	8001bde <__aeabi_ddiv+0x5be>
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	e60d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001b20:	428a      	cmp	r2, r1
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x506>
 8001b24:	e70a      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b26:	1e83      	subs	r3, r0, #2
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	e707      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x516>
 8001b34:	e5e6      	b.n	8001704 <__aeabi_ddiv+0xe4>
 8001b36:	1d17      	adds	r7, r2, #4
 8001b38:	4297      	cmp	r7, r2
 8001b3a:	4192      	sbcs	r2, r2
 8001b3c:	4253      	negs	r3, r2
 8001b3e:	449b      	add	fp, r3
 8001b40:	08fa      	lsrs	r2, r7, #3
 8001b42:	e5e0      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x52a>
 8001b48:	e5d7      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001b4a:	1871      	adds	r1, r6, r1
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	42b1      	cmp	r1, r6
 8001b50:	d327      	bcc.n	8001ba2 <__aeabi_ddiv+0x582>
 8001b52:	42a9      	cmp	r1, r5
 8001b54:	d315      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001b56:	d058      	beq.n	8001c0a <__aeabi_ddiv+0x5ea>
 8001b58:	001a      	movs	r2, r3
 8001b5a:	e773      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x542>
 8001b60:	e604      	b.n	800176c <__aeabi_ddiv+0x14c>
 8001b62:	2301      	movs	r3, #1
 8001b64:	2200      	movs	r2, #0
 8001b66:	449b      	add	fp, r3
 8001b68:	e5cd      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	4447      	add	r7, r8
 8001b6e:	4547      	cmp	r7, r8
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	425b      	negs	r3, r3
 8001b74:	469c      	mov	ip, r3
 8001b76:	4249      	negs	r1, r1
 8001b78:	1989      	adds	r1, r1, r6
 8001b7a:	190c      	adds	r4, r1, r4
 8001b7c:	44e3      	add	fp, ip
 8001b7e:	1a24      	subs	r4, r4, r0
 8001b80:	e703      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001b82:	4643      	mov	r3, r8
 8001b84:	005f      	lsls	r7, r3, #1
 8001b86:	4547      	cmp	r7, r8
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	46b8      	mov	r8, r7
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	199e      	adds	r6, r3, r6
 8001b90:	3a02      	subs	r2, #2
 8001b92:	1989      	adds	r1, r1, r6
 8001b94:	42a9      	cmp	r1, r5
 8001b96:	d000      	beq.n	8001b9a <__aeabi_ddiv+0x57a>
 8001b98:	e754      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d000      	beq.n	8001ba0 <__aeabi_ddiv+0x580>
 8001b9e:	e751      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001ba0:	e5ab      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	e7f6      	b.n	8001b94 <__aeabi_ddiv+0x574>
 8001ba6:	211f      	movs	r1, #31
 8001ba8:	465f      	mov	r7, fp
 8001baa:	4249      	negs	r1, r1
 8001bac:	1b0c      	subs	r4, r1, r4
 8001bae:	40e7      	lsrs	r7, r4
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d007      	beq.n	8001bc4 <__aeabi_ddiv+0x5a4>
 8001bb4:	491a      	ldr	r1, [pc, #104]	; (8001c20 <__aeabi_ddiv+0x600>)
 8001bb6:	9b00      	ldr	r3, [sp, #0]
 8001bb8:	468c      	mov	ip, r1
 8001bba:	4463      	add	r3, ip
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	465b      	mov	r3, fp
 8001bc0:	4083      	lsls	r3, r0
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	1e50      	subs	r0, r2, #1
 8001bc6:	4182      	sbcs	r2, r0
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	2707      	movs	r7, #7
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4017      	ands	r7, r2
 8001bd0:	d009      	beq.n	8001be6 <__aeabi_ddiv+0x5c6>
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	0014      	movs	r4, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d195      	bne.n	8001b0a <__aeabi_ddiv+0x4ea>
 8001bde:	0022      	movs	r2, r4
 8001be0:	075f      	lsls	r7, r3, #29
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	08d2      	lsrs	r2, r2, #3
 8001be8:	4317      	orrs	r7, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	e5a6      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	031b      	lsls	r3, r3, #12
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	0b1b      	lsrs	r3, r3, #12
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001bfe:	e59d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001c00:	42bd      	cmp	r5, r7
 8001c02:	d8b2      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001c04:	469b      	mov	fp, r3
 8001c06:	2400      	movs	r4, #0
 8001c08:	e6bf      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001c0a:	4580      	cmp	r8, r0
 8001c0c:	d3b9      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001c0e:	001a      	movs	r2, r3
 8001c10:	e7c3      	b.n	8001b9a <__aeabi_ddiv+0x57a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000003ff 	.word	0x000003ff
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	0000041e 	.word	0x0000041e
 8001c20:	0000043e 	.word	0x0000043e

08001c24 <__eqdf2>:
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	464f      	mov	r7, r9
 8001c28:	4646      	mov	r6, r8
 8001c2a:	46d6      	mov	lr, sl
 8001c2c:	4684      	mov	ip, r0
 8001c2e:	b5c0      	push	{r6, r7, lr}
 8001c30:	4680      	mov	r8, r0
 8001c32:	4e19      	ldr	r6, [pc, #100]	; (8001c98 <__eqdf2+0x74>)
 8001c34:	0318      	lsls	r0, r3, #12
 8001c36:	030f      	lsls	r7, r1, #12
 8001c38:	004d      	lsls	r5, r1, #1
 8001c3a:	0b00      	lsrs	r0, r0, #12
 8001c3c:	005c      	lsls	r4, r3, #1
 8001c3e:	4682      	mov	sl, r0
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d6d      	lsrs	r5, r5, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	4691      	mov	r9, r2
 8001c48:	0d64      	lsrs	r4, r4, #21
 8001c4a:	0fdb      	lsrs	r3, r3, #31
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	d00a      	beq.n	8001c68 <__eqdf2+0x44>
 8001c52:	42b4      	cmp	r4, r6
 8001c54:	d003      	beq.n	8001c5e <__eqdf2+0x3a>
 8001c56:	42a5      	cmp	r5, r4
 8001c58:	d101      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c5a:	4557      	cmp	r7, sl
 8001c5c:	d00c      	beq.n	8001c78 <__eqdf2+0x54>
 8001c5e:	bc1c      	pop	{r2, r3, r4}
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	46a2      	mov	sl, r4
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	4666      	mov	r6, ip
 8001c6a:	433e      	orrs	r6, r7
 8001c6c:	d1f7      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c6e:	42ac      	cmp	r4, r5
 8001c70:	d1f5      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c72:	4654      	mov	r4, sl
 8001c74:	4314      	orrs	r4, r2
 8001c76:	d1f2      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	45c8      	cmp	r8, r9
 8001c7c:	d1ef      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	d007      	beq.n	8001c92 <__eqdf2+0x6e>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d1eb      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c86:	4663      	mov	r3, ip
 8001c88:	431f      	orrs	r7, r3
 8001c8a:	0038      	movs	r0, r7
 8001c8c:	1e47      	subs	r7, r0, #1
 8001c8e:	41b8      	sbcs	r0, r7
 8001c90:	e7e5      	b.n	8001c5e <__eqdf2+0x3a>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7e3      	b.n	8001c5e <__eqdf2+0x3a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff

08001c9c <__gedf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	4646      	mov	r6, r8
 8001ca2:	46d6      	mov	lr, sl
 8001ca4:	004d      	lsls	r5, r1, #1
 8001ca6:	b5c0      	push	{r6, r7, lr}
 8001ca8:	030e      	lsls	r6, r1, #12
 8001caa:	0fc9      	lsrs	r1, r1, #31
 8001cac:	468a      	mov	sl, r1
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <__gedf2+0xc4>)
 8001cb0:	031f      	lsls	r7, r3, #12
 8001cb2:	005c      	lsls	r4, r3, #1
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	0b36      	lsrs	r6, r6, #12
 8001cb8:	0d6d      	lsrs	r5, r5, #21
 8001cba:	4691      	mov	r9, r2
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d64      	lsrs	r4, r4, #21
 8001cc0:	0fdb      	lsrs	r3, r3, #31
 8001cc2:	428d      	cmp	r5, r1
 8001cc4:	d01e      	beq.n	8001d04 <__gedf2+0x68>
 8001cc6:	428c      	cmp	r4, r1
 8001cc8:	d016      	beq.n	8001cf8 <__gedf2+0x5c>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d11e      	bne.n	8001d0c <__gedf2+0x70>
 8001cce:	4330      	orrs	r0, r6
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d101      	bne.n	8001cda <__gedf2+0x3e>
 8001cd6:	433a      	orrs	r2, r7
 8001cd8:	d023      	beq.n	8001d22 <__gedf2+0x86>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d01a      	beq.n	8001d16 <__gedf2+0x7a>
 8001ce0:	459a      	cmp	sl, r3
 8001ce2:	d029      	beq.n	8001d38 <__gedf2+0x9c>
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	3901      	subs	r1, #1
 8001cea:	4008      	ands	r0, r1
 8001cec:	3801      	subs	r0, #1
 8001cee:	bc1c      	pop	{r2, r3, r4}
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	46a2      	mov	sl, r4
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	0039      	movs	r1, r7
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	d0e5      	beq.n	8001cca <__gedf2+0x2e>
 8001cfe:	2002      	movs	r0, #2
 8001d00:	4240      	negs	r0, r0
 8001d02:	e7f4      	b.n	8001cee <__gedf2+0x52>
 8001d04:	4330      	orrs	r0, r6
 8001d06:	d1fa      	bne.n	8001cfe <__gedf2+0x62>
 8001d08:	42ac      	cmp	r4, r5
 8001d0a:	d00f      	beq.n	8001d2c <__gedf2+0x90>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d10f      	bne.n	8001d30 <__gedf2+0x94>
 8001d10:	433a      	orrs	r2, r7
 8001d12:	d0e7      	beq.n	8001ce4 <__gedf2+0x48>
 8001d14:	e00c      	b.n	8001d30 <__gedf2+0x94>
 8001d16:	2201      	movs	r2, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	3001      	adds	r0, #1
 8001d20:	e7e5      	b.n	8001cee <__gedf2+0x52>
 8001d22:	4663      	mov	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0e1      	beq.n	8001cee <__gedf2+0x52>
 8001d2a:	e7db      	b.n	8001ce4 <__gedf2+0x48>
 8001d2c:	433a      	orrs	r2, r7
 8001d2e:	d1e6      	bne.n	8001cfe <__gedf2+0x62>
 8001d30:	459a      	cmp	sl, r3
 8001d32:	d1d7      	bne.n	8001ce4 <__gedf2+0x48>
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	dcd5      	bgt.n	8001ce4 <__gedf2+0x48>
 8001d38:	42a5      	cmp	r5, r4
 8001d3a:	db05      	blt.n	8001d48 <__gedf2+0xac>
 8001d3c:	42be      	cmp	r6, r7
 8001d3e:	d8d1      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d40:	d008      	beq.n	8001d54 <__gedf2+0xb8>
 8001d42:	2000      	movs	r0, #0
 8001d44:	42be      	cmp	r6, r7
 8001d46:	d2d2      	bcs.n	8001cee <__gedf2+0x52>
 8001d48:	4650      	mov	r0, sl
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	4398      	bics	r0, r3
 8001d50:	3001      	adds	r0, #1
 8001d52:	e7cc      	b.n	8001cee <__gedf2+0x52>
 8001d54:	45c8      	cmp	r8, r9
 8001d56:	d8c5      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	45c8      	cmp	r8, r9
 8001d5c:	d3f4      	bcc.n	8001d48 <__gedf2+0xac>
 8001d5e:	e7c6      	b.n	8001cee <__gedf2+0x52>
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__ledf2>:
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	464f      	mov	r7, r9
 8001d68:	4646      	mov	r6, r8
 8001d6a:	46d6      	mov	lr, sl
 8001d6c:	004d      	lsls	r5, r1, #1
 8001d6e:	b5c0      	push	{r6, r7, lr}
 8001d70:	030e      	lsls	r6, r1, #12
 8001d72:	0fc9      	lsrs	r1, r1, #31
 8001d74:	468a      	mov	sl, r1
 8001d76:	492e      	ldr	r1, [pc, #184]	; (8001e30 <__ledf2+0xcc>)
 8001d78:	031f      	lsls	r7, r3, #12
 8001d7a:	005c      	lsls	r4, r3, #1
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	0b36      	lsrs	r6, r6, #12
 8001d80:	0d6d      	lsrs	r5, r5, #21
 8001d82:	4691      	mov	r9, r2
 8001d84:	0b3f      	lsrs	r7, r7, #12
 8001d86:	0d64      	lsrs	r4, r4, #21
 8001d88:	0fdb      	lsrs	r3, r3, #31
 8001d8a:	428d      	cmp	r5, r1
 8001d8c:	d018      	beq.n	8001dc0 <__ledf2+0x5c>
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	d011      	beq.n	8001db6 <__ledf2+0x52>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d118      	bne.n	8001dc8 <__ledf2+0x64>
 8001d96:	4330      	orrs	r0, r6
 8001d98:	4684      	mov	ip, r0
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	d11e      	bne.n	8001ddc <__ledf2+0x78>
 8001d9e:	433a      	orrs	r2, r7
 8001da0:	d11c      	bne.n	8001ddc <__ledf2+0x78>
 8001da2:	4663      	mov	r3, ip
 8001da4:	2000      	movs	r0, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <__ledf2+0xa8>
 8001daa:	4651      	mov	r1, sl
 8001dac:	2002      	movs	r0, #2
 8001dae:	3901      	subs	r1, #1
 8001db0:	4008      	ands	r0, r1
 8001db2:	3801      	subs	r0, #1
 8001db4:	e02a      	b.n	8001e0c <__ledf2+0xa8>
 8001db6:	0039      	movs	r1, r7
 8001db8:	4311      	orrs	r1, r2
 8001dba:	d0ea      	beq.n	8001d92 <__ledf2+0x2e>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	e025      	b.n	8001e0c <__ledf2+0xa8>
 8001dc0:	4330      	orrs	r0, r6
 8001dc2:	d1fb      	bne.n	8001dbc <__ledf2+0x58>
 8001dc4:	42ac      	cmp	r4, r5
 8001dc6:	d026      	beq.n	8001e16 <__ledf2+0xb2>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d126      	bne.n	8001e1a <__ledf2+0xb6>
 8001dcc:	433a      	orrs	r2, r7
 8001dce:	d124      	bne.n	8001e1a <__ledf2+0xb6>
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	3901      	subs	r1, #1
 8001dd6:	4008      	ands	r0, r1
 8001dd8:	3801      	subs	r0, #1
 8001dda:	e017      	b.n	8001e0c <__ledf2+0xa8>
 8001ddc:	4662      	mov	r2, ip
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d00f      	beq.n	8001e02 <__ledf2+0x9e>
 8001de2:	459a      	cmp	sl, r3
 8001de4:	d1e1      	bne.n	8001daa <__ledf2+0x46>
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	db05      	blt.n	8001df6 <__ledf2+0x92>
 8001dea:	42be      	cmp	r6, r7
 8001dec:	d8dd      	bhi.n	8001daa <__ledf2+0x46>
 8001dee:	d019      	beq.n	8001e24 <__ledf2+0xc0>
 8001df0:	2000      	movs	r0, #0
 8001df2:	42be      	cmp	r6, r7
 8001df4:	d20a      	bcs.n	8001e0c <__ledf2+0xa8>
 8001df6:	4650      	mov	r0, sl
 8001df8:	2301      	movs	r3, #1
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	4398      	bics	r0, r3
 8001dfe:	3001      	adds	r0, #1
 8001e00:	e004      	b.n	8001e0c <__ledf2+0xa8>
 8001e02:	2201      	movs	r2, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4393      	bics	r3, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	bc1c      	pop	{r2, r3, r4}
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	46a2      	mov	sl, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	433a      	orrs	r2, r7
 8001e18:	d1d0      	bne.n	8001dbc <__ledf2+0x58>
 8001e1a:	459a      	cmp	sl, r3
 8001e1c:	d1c5      	bne.n	8001daa <__ledf2+0x46>
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	dcc3      	bgt.n	8001daa <__ledf2+0x46>
 8001e22:	e7e0      	b.n	8001de6 <__ledf2+0x82>
 8001e24:	45c8      	cmp	r8, r9
 8001e26:	d8c0      	bhi.n	8001daa <__ledf2+0x46>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c8      	cmp	r8, r9
 8001e2c:	d3e3      	bcc.n	8001df6 <__ledf2+0x92>
 8001e2e:	e7ed      	b.n	8001e0c <__ledf2+0xa8>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	46de      	mov	lr, fp
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4683      	mov	fp, r0
 8001e42:	0006      	movs	r6, r0
 8001e44:	030f      	lsls	r7, r1, #12
 8001e46:	0048      	lsls	r0, r1, #1
 8001e48:	b087      	sub	sp, #28
 8001e4a:	4692      	mov	sl, r2
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	0b3f      	lsrs	r7, r7, #12
 8001e50:	0d40      	lsrs	r0, r0, #21
 8001e52:	0fcc      	lsrs	r4, r1, #31
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dmul+0x26>
 8001e58:	e06f      	b.n	8001f3a <__aeabi_dmul+0x106>
 8001e5a:	4bde      	ldr	r3, [pc, #888]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d038      	beq.n	8001ed2 <__aeabi_dmul+0x9e>
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00ff      	lsls	r7, r7, #3
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431f      	orrs	r7, r3
 8001e68:	0f73      	lsrs	r3, r6, #29
 8001e6a:	433b      	orrs	r3, r7
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4bda      	ldr	r3, [pc, #872]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001e70:	2700      	movs	r7, #0
 8001e72:	4699      	mov	r9, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	469b      	mov	fp, r3
 8001e78:	00f6      	lsls	r6, r6, #3
 8001e7a:	4481      	add	r9, r0
 8001e7c:	032b      	lsls	r3, r5, #12
 8001e7e:	0069      	lsls	r1, r5, #1
 8001e80:	0b1b      	lsrs	r3, r3, #12
 8001e82:	4652      	mov	r2, sl
 8001e84:	4698      	mov	r8, r3
 8001e86:	0d49      	lsrs	r1, r1, #21
 8001e88:	0fed      	lsrs	r5, r5, #31
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x5c>
 8001e8e:	e085      	b.n	8001f9c <__aeabi_dmul+0x168>
 8001e90:	4bd0      	ldr	r3, [pc, #832]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x64>
 8001e96:	e073      	b.n	8001f80 <__aeabi_dmul+0x14c>
 8001e98:	4643      	mov	r3, r8
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	48cc      	ldr	r0, [pc, #816]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001ea6:	0f52      	lsrs	r2, r2, #29
 8001ea8:	4684      	mov	ip, r0
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4652      	mov	r2, sl
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4461      	add	r1, ip
 8001eb2:	00d2      	lsls	r2, r2, #3
 8001eb4:	4489      	add	r9, r1
 8001eb6:	0021      	movs	r1, r4
 8001eb8:	4069      	eors	r1, r5
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	468c      	mov	ip, r1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4449      	add	r1, r9
 8001ec2:	468a      	mov	sl, r1
 8001ec4:	2f0f      	cmp	r7, #15
 8001ec6:	d900      	bls.n	8001eca <__aeabi_dmul+0x96>
 8001ec8:	e090      	b.n	8001fec <__aeabi_dmul+0x1b8>
 8001eca:	49c4      	ldr	r1, [pc, #784]	; (80021dc <__aeabi_dmul+0x3a8>)
 8001ecc:	00bf      	lsls	r7, r7, #2
 8001ece:	59cf      	ldr	r7, [r1, r7]
 8001ed0:	46bf      	mov	pc, r7
 8001ed2:	465b      	mov	r3, fp
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dmul+0xa8>
 8001eda:	e16a      	b.n	80021b2 <__aeabi_dmul+0x37e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	2708      	movs	r7, #8
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	4681      	mov	r9, r0
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	e7c9      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001ee8:	0032      	movs	r2, r6
 8001eea:	4658      	mov	r0, fp
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	4661      	mov	r1, ip
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dmul+0xc4>
 8001ef6:	e075      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8001ef8:	2803      	cmp	r0, #3
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0xca>
 8001efc:	e1fe      	b.n	80022fc <__aeabi_dmul+0x4c8>
 8001efe:	2801      	cmp	r0, #1
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dmul+0xd0>
 8001f02:	e12c      	b.n	800215e <__aeabi_dmul+0x32a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2700      	movs	r7, #0
 8001f08:	2600      	movs	r6, #0
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	033f      	lsls	r7, r7, #12
 8001f0e:	0d2a      	lsrs	r2, r5, #20
 8001f10:	0b3f      	lsrs	r7, r7, #12
 8001f12:	48b3      	ldr	r0, [pc, #716]	; (80021e0 <__aeabi_dmul+0x3ac>)
 8001f14:	0512      	lsls	r2, r2, #20
 8001f16:	433a      	orrs	r2, r7
 8001f18:	4002      	ands	r2, r0
 8001f1a:	051b      	lsls	r3, r3, #20
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	9a00      	ldr	r2, [sp, #0]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	07d1      	lsls	r1, r2, #31
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0030      	movs	r0, r6
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	b007      	add	sp, #28
 8001f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8001f30:	4690      	mov	r8, r2
 8001f32:	4699      	mov	r9, r3
 8001f34:	46a2      	mov	sl, r4
 8001f36:	46ab      	mov	fp, r5
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x110>
 8001f42:	e12f      	b.n	80021a4 <__aeabi_dmul+0x370>
 8001f44:	2f00      	cmp	r7, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0x116>
 8001f48:	e1a5      	b.n	8002296 <__aeabi_dmul+0x462>
 8001f4a:	0038      	movs	r0, r7
 8001f4c:	f000 fec0 	bl	8002cd0 <__clzsi2>
 8001f50:	0003      	movs	r3, r0
 8001f52:	3b0b      	subs	r3, #11
 8001f54:	2b1c      	cmp	r3, #28
 8001f56:	dd00      	ble.n	8001f5a <__aeabi_dmul+0x126>
 8001f58:	e196      	b.n	8002288 <__aeabi_dmul+0x454>
 8001f5a:	221d      	movs	r2, #29
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	465a      	mov	r2, fp
 8001f60:	0001      	movs	r1, r0
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	465e      	mov	r6, fp
 8001f66:	3908      	subs	r1, #8
 8001f68:	408f      	lsls	r7, r1
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	408e      	lsls	r6, r1
 8001f6e:	433b      	orrs	r3, r7
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	4b9c      	ldr	r3, [pc, #624]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001f74:	2700      	movs	r7, #0
 8001f76:	1a1b      	subs	r3, r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	e77d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001f80:	4641      	mov	r1, r8
 8001f82:	4653      	mov	r3, sl
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4993      	ldr	r1, [pc, #588]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001f88:	468c      	mov	ip, r1
 8001f8a:	44e1      	add	r9, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dmul+0x15e>
 8001f90:	e11a      	b.n	80021c8 <__aeabi_dmul+0x394>
 8001f92:	2202      	movs	r2, #2
 8001f94:	2002      	movs	r0, #2
 8001f96:	4317      	orrs	r7, r2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	e78c      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x16e>
 8001fa0:	e10d      	b.n	80021be <__aeabi_dmul+0x38a>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x176>
 8001fa8:	e181      	b.n	80022ae <__aeabi_dmul+0x47a>
 8001faa:	4640      	mov	r0, r8
 8001fac:	f000 fe90 	bl	8002cd0 <__clzsi2>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	3a0b      	subs	r2, #11
 8001fb4:	2a1c      	cmp	r2, #28
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dmul+0x186>
 8001fb8:	e172      	b.n	80022a0 <__aeabi_dmul+0x46c>
 8001fba:	0001      	movs	r1, r0
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	3908      	subs	r1, #8
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	231d      	movs	r3, #29
 8001fc6:	1a9a      	subs	r2, r3, r2
 8001fc8:	4653      	mov	r3, sl
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	001a      	movs	r2, r3
 8001fce:	4643      	mov	r3, r8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	1a08      	subs	r0, r1, r0
 8001fda:	4982      	ldr	r1, [pc, #520]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001fdc:	4689      	mov	r9, r1
 8001fde:	4481      	add	r9, r0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e768      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001fe6:	2700      	movs	r7, #0
 8001fe8:	2600      	movs	r6, #0
 8001fea:	e78e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8001fec:	0c14      	lsrs	r4, r2, #16
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	0c12      	lsrs	r2, r2, #16
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0c37      	lsrs	r7, r6, #16
 8001ff6:	0436      	lsls	r6, r6, #16
 8001ff8:	0c35      	lsrs	r5, r6, #16
 8001ffa:	4379      	muls	r1, r7
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	468c      	mov	ip, r1
 8002000:	002e      	movs	r6, r5
 8002002:	4360      	muls	r0, r4
 8002004:	4460      	add	r0, ip
 8002006:	4683      	mov	fp, r0
 8002008:	4356      	muls	r6, r2
 800200a:	0021      	movs	r1, r4
 800200c:	0c30      	lsrs	r0, r6, #16
 800200e:	4680      	mov	r8, r0
 8002010:	4658      	mov	r0, fp
 8002012:	4379      	muls	r1, r7
 8002014:	4440      	add	r0, r8
 8002016:	9102      	str	r1, [sp, #8]
 8002018:	4584      	cmp	ip, r0
 800201a:	d906      	bls.n	800202a <__aeabi_dmul+0x1f6>
 800201c:	4688      	mov	r8, r1
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0249      	lsls	r1, r1, #9
 8002022:	468c      	mov	ip, r1
 8002024:	44e0      	add	r8, ip
 8002026:	4641      	mov	r1, r8
 8002028:	9102      	str	r1, [sp, #8]
 800202a:	0436      	lsls	r6, r6, #16
 800202c:	0c01      	lsrs	r1, r0, #16
 800202e:	0c36      	lsrs	r6, r6, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	468b      	mov	fp, r1
 8002034:	1981      	adds	r1, r0, r6
 8002036:	0c1e      	lsrs	r6, r3, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	9103      	str	r1, [sp, #12]
 800203e:	0019      	movs	r1, r3
 8002040:	4379      	muls	r1, r7
 8002042:	468c      	mov	ip, r1
 8002044:	0028      	movs	r0, r5
 8002046:	4375      	muls	r5, r6
 8002048:	4465      	add	r5, ip
 800204a:	46a8      	mov	r8, r5
 800204c:	4358      	muls	r0, r3
 800204e:	0c05      	lsrs	r5, r0, #16
 8002050:	4445      	add	r5, r8
 8002052:	4377      	muls	r7, r6
 8002054:	42a9      	cmp	r1, r5
 8002056:	d903      	bls.n	8002060 <__aeabi_dmul+0x22c>
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0249      	lsls	r1, r1, #9
 800205c:	468c      	mov	ip, r1
 800205e:	4467      	add	r7, ip
 8002060:	0c29      	lsrs	r1, r5, #16
 8002062:	468c      	mov	ip, r1
 8002064:	0039      	movs	r1, r7
 8002066:	0400      	lsls	r0, r0, #16
 8002068:	0c00      	lsrs	r0, r0, #16
 800206a:	042d      	lsls	r5, r5, #16
 800206c:	182d      	adds	r5, r5, r0
 800206e:	4461      	add	r1, ip
 8002070:	44ab      	add	fp, r5
 8002072:	9105      	str	r1, [sp, #20]
 8002074:	4659      	mov	r1, fp
 8002076:	9104      	str	r1, [sp, #16]
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	040f      	lsls	r7, r1, #16
 800207c:	0c3f      	lsrs	r7, r7, #16
 800207e:	0c08      	lsrs	r0, r1, #16
 8002080:	0039      	movs	r1, r7
 8002082:	4351      	muls	r1, r2
 8002084:	4342      	muls	r2, r0
 8002086:	4690      	mov	r8, r2
 8002088:	0002      	movs	r2, r0
 800208a:	468c      	mov	ip, r1
 800208c:	0c09      	lsrs	r1, r1, #16
 800208e:	468b      	mov	fp, r1
 8002090:	4362      	muls	r2, r4
 8002092:	437c      	muls	r4, r7
 8002094:	4444      	add	r4, r8
 8002096:	445c      	add	r4, fp
 8002098:	45a0      	cmp	r8, r4
 800209a:	d903      	bls.n	80020a4 <__aeabi_dmul+0x270>
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0249      	lsls	r1, r1, #9
 80020a0:	4688      	mov	r8, r1
 80020a2:	4442      	add	r2, r8
 80020a4:	0c21      	lsrs	r1, r4, #16
 80020a6:	4688      	mov	r8, r1
 80020a8:	4661      	mov	r1, ip
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	0c09      	lsrs	r1, r1, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	4359      	muls	r1, r3
 80020b4:	4343      	muls	r3, r0
 80020b6:	4370      	muls	r0, r6
 80020b8:	437e      	muls	r6, r7
 80020ba:	0c0f      	lsrs	r7, r1, #16
 80020bc:	18f6      	adds	r6, r6, r3
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	19be      	adds	r6, r7, r6
 80020c2:	4464      	add	r4, ip
 80020c4:	4442      	add	r2, r8
 80020c6:	468c      	mov	ip, r1
 80020c8:	42b3      	cmp	r3, r6
 80020ca:	d903      	bls.n	80020d4 <__aeabi_dmul+0x2a0>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4698      	mov	r8, r3
 80020d2:	4440      	add	r0, r8
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4661      	mov	r1, ip
 80020d8:	4698      	mov	r8, r3
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	0437      	lsls	r7, r6, #16
 80020de:	4443      	add	r3, r8
 80020e0:	469b      	mov	fp, r3
 80020e2:	45ab      	cmp	fp, r5
 80020e4:	41ad      	sbcs	r5, r5
 80020e6:	426b      	negs	r3, r5
 80020e8:	040d      	lsls	r5, r1, #16
 80020ea:	9905      	ldr	r1, [sp, #20]
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	468c      	mov	ip, r1
 80020f0:	197f      	adds	r7, r7, r5
 80020f2:	4467      	add	r7, ip
 80020f4:	18fd      	adds	r5, r7, r3
 80020f6:	46a8      	mov	r8, r5
 80020f8:	465d      	mov	r5, fp
 80020fa:	192d      	adds	r5, r5, r4
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	41a4      	sbcs	r4, r4
 8002100:	4693      	mov	fp, r2
 8002102:	4264      	negs	r4, r4
 8002104:	46a4      	mov	ip, r4
 8002106:	44c3      	add	fp, r8
 8002108:	44dc      	add	ip, fp
 800210a:	428f      	cmp	r7, r1
 800210c:	41bf      	sbcs	r7, r7
 800210e:	4598      	cmp	r8, r3
 8002110:	419b      	sbcs	r3, r3
 8002112:	4593      	cmp	fp, r2
 8002114:	4192      	sbcs	r2, r2
 8002116:	45a4      	cmp	ip, r4
 8002118:	41a4      	sbcs	r4, r4
 800211a:	425b      	negs	r3, r3
 800211c:	427f      	negs	r7, r7
 800211e:	431f      	orrs	r7, r3
 8002120:	0c36      	lsrs	r6, r6, #16
 8002122:	4252      	negs	r2, r2
 8002124:	4264      	negs	r4, r4
 8002126:	19bf      	adds	r7, r7, r6
 8002128:	4322      	orrs	r2, r4
 800212a:	18bf      	adds	r7, r7, r2
 800212c:	4662      	mov	r2, ip
 800212e:	1838      	adds	r0, r7, r0
 8002130:	0243      	lsls	r3, r0, #9
 8002132:	0dd2      	lsrs	r2, r2, #23
 8002134:	9903      	ldr	r1, [sp, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	026a      	lsls	r2, r5, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	1e50      	subs	r0, r2, #1
 800213e:	4182      	sbcs	r2, r0
 8002140:	4661      	mov	r1, ip
 8002142:	0ded      	lsrs	r5, r5, #23
 8002144:	432a      	orrs	r2, r5
 8002146:	024e      	lsls	r6, r1, #9
 8002148:	4332      	orrs	r2, r6
 800214a:	01d9      	lsls	r1, r3, #7
 800214c:	d400      	bmi.n	8002150 <__aeabi_dmul+0x31c>
 800214e:	e0b3      	b.n	80022b8 <__aeabi_dmul+0x484>
 8002150:	2601      	movs	r6, #1
 8002152:	0850      	lsrs	r0, r2, #1
 8002154:	4032      	ands	r2, r6
 8002156:	4302      	orrs	r2, r0
 8002158:	07de      	lsls	r6, r3, #31
 800215a:	4332      	orrs	r2, r6
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	4c22      	ldr	r4, [pc, #136]	; (80021e8 <__aeabi_dmul+0x3b4>)
 8002160:	4454      	add	r4, sl
 8002162:	2c00      	cmp	r4, #0
 8002164:	dd62      	ble.n	800222c <__aeabi_dmul+0x3f8>
 8002166:	0751      	lsls	r1, r2, #29
 8002168:	d009      	beq.n	800217e <__aeabi_dmul+0x34a>
 800216a:	200f      	movs	r0, #15
 800216c:	4010      	ands	r0, r2
 800216e:	2804      	cmp	r0, #4
 8002170:	d005      	beq.n	800217e <__aeabi_dmul+0x34a>
 8002172:	1d10      	adds	r0, r2, #4
 8002174:	4290      	cmp	r0, r2
 8002176:	4192      	sbcs	r2, r2
 8002178:	4252      	negs	r2, r2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	0002      	movs	r2, r0
 800217e:	01d9      	lsls	r1, r3, #7
 8002180:	d504      	bpl.n	800218c <__aeabi_dmul+0x358>
 8002182:	2480      	movs	r4, #128	; 0x80
 8002184:	4819      	ldr	r0, [pc, #100]	; (80021ec <__aeabi_dmul+0x3b8>)
 8002186:	00e4      	lsls	r4, r4, #3
 8002188:	4003      	ands	r3, r0
 800218a:	4454      	add	r4, sl
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <__aeabi_dmul+0x3bc>)
 800218e:	4284      	cmp	r4, r0
 8002190:	dd00      	ble.n	8002194 <__aeabi_dmul+0x360>
 8002192:	e727      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8002194:	075e      	lsls	r6, r3, #29
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	08d2      	lsrs	r2, r2, #3
 800219a:	0b1f      	lsrs	r7, r3, #12
 800219c:	0563      	lsls	r3, r4, #21
 800219e:	4316      	orrs	r6, r2
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	e6b2      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	4699      	mov	r9, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	2704      	movs	r7, #4
 80021ac:	2600      	movs	r6, #0
 80021ae:	469b      	mov	fp, r3
 80021b0:	e664      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021b2:	2303      	movs	r3, #3
 80021b4:	9701      	str	r7, [sp, #4]
 80021b6:	4681      	mov	r9, r0
 80021b8:	270c      	movs	r7, #12
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	2201      	movs	r2, #1
 80021c0:	2001      	movs	r0, #1
 80021c2:	4317      	orrs	r7, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	e676      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021c8:	2303      	movs	r3, #3
 80021ca:	2003      	movs	r0, #3
 80021cc:	431f      	orrs	r7, r3
 80021ce:	4643      	mov	r3, r8
 80021d0:	e671      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	fffffc01 	.word	0xfffffc01
 80021dc:	08017854 	.word	0x08017854
 80021e0:	800fffff 	.word	0x800fffff
 80021e4:	fffffc0d 	.word	0xfffffc0d
 80021e8:	000003ff 	.word	0x000003ff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	2300      	movs	r3, #0
 80021f6:	2780      	movs	r7, #128	; 0x80
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	033f      	lsls	r7, r7, #12
 80021fc:	2600      	movs	r6, #0
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <__aeabi_dmul+0x4d8>)
 8002200:	e683      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	0032      	movs	r2, r6
 8002206:	46a4      	mov	ip, r4
 8002208:	4658      	mov	r0, fp
 800220a:	e670      	b.n	8001eee <__aeabi_dmul+0xba>
 800220c:	46ac      	mov	ip, r5
 800220e:	e66e      	b.n	8001eee <__aeabi_dmul+0xba>
 8002210:	2780      	movs	r7, #128	; 0x80
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	033f      	lsls	r7, r7, #12
 8002216:	4239      	tst	r1, r7
 8002218:	d02d      	beq.n	8002276 <__aeabi_dmul+0x442>
 800221a:	423b      	tst	r3, r7
 800221c:	d12b      	bne.n	8002276 <__aeabi_dmul+0x442>
 800221e:	431f      	orrs	r7, r3
 8002220:	033f      	lsls	r7, r7, #12
 8002222:	0b3f      	lsrs	r7, r7, #12
 8002224:	9500      	str	r5, [sp, #0]
 8002226:	0016      	movs	r6, r2
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <__aeabi_dmul+0x4d8>)
 800222a:	e66e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800222c:	2501      	movs	r5, #1
 800222e:	1b2d      	subs	r5, r5, r4
 8002230:	2d38      	cmp	r5, #56	; 0x38
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x402>
 8002234:	e666      	b.n	8001f04 <__aeabi_dmul+0xd0>
 8002236:	2d1f      	cmp	r5, #31
 8002238:	dc40      	bgt.n	80022bc <__aeabi_dmul+0x488>
 800223a:	4835      	ldr	r0, [pc, #212]	; (8002310 <__aeabi_dmul+0x4dc>)
 800223c:	001c      	movs	r4, r3
 800223e:	4450      	add	r0, sl
 8002240:	0016      	movs	r6, r2
 8002242:	4082      	lsls	r2, r0
 8002244:	4084      	lsls	r4, r0
 8002246:	40ee      	lsrs	r6, r5
 8002248:	1e50      	subs	r0, r2, #1
 800224a:	4182      	sbcs	r2, r0
 800224c:	4334      	orrs	r4, r6
 800224e:	4314      	orrs	r4, r2
 8002250:	40eb      	lsrs	r3, r5
 8002252:	0762      	lsls	r2, r4, #29
 8002254:	d009      	beq.n	800226a <__aeabi_dmul+0x436>
 8002256:	220f      	movs	r2, #15
 8002258:	4022      	ands	r2, r4
 800225a:	2a04      	cmp	r2, #4
 800225c:	d005      	beq.n	800226a <__aeabi_dmul+0x436>
 800225e:	0022      	movs	r2, r4
 8002260:	1d14      	adds	r4, r2, #4
 8002262:	4294      	cmp	r4, r2
 8002264:	4180      	sbcs	r0, r0
 8002266:	4240      	negs	r0, r0
 8002268:	181b      	adds	r3, r3, r0
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	d53e      	bpl.n	80022ec <__aeabi_dmul+0x4b8>
 800226e:	2301      	movs	r3, #1
 8002270:	2700      	movs	r7, #0
 8002272:	2600      	movs	r6, #0
 8002274:	e649      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002276:	2780      	movs	r7, #128	; 0x80
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	033f      	lsls	r7, r7, #12
 800227c:	431f      	orrs	r7, r3
 800227e:	033f      	lsls	r7, r7, #12
 8002280:	0b3f      	lsrs	r7, r7, #12
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <__aeabi_dmul+0x4d8>)
 8002286:	e640      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002288:	0003      	movs	r3, r0
 800228a:	465a      	mov	r2, fp
 800228c:	3b28      	subs	r3, #40	; 0x28
 800228e:	409a      	lsls	r2, r3
 8002290:	2600      	movs	r6, #0
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	e66d      	b.n	8001f72 <__aeabi_dmul+0x13e>
 8002296:	4658      	mov	r0, fp
 8002298:	f000 fd1a 	bl	8002cd0 <__clzsi2>
 800229c:	3020      	adds	r0, #32
 800229e:	e657      	b.n	8001f50 <__aeabi_dmul+0x11c>
 80022a0:	0003      	movs	r3, r0
 80022a2:	4652      	mov	r2, sl
 80022a4:	3b28      	subs	r3, #40	; 0x28
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	e693      	b.n	8001fd6 <__aeabi_dmul+0x1a2>
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fd0e 	bl	8002cd0 <__clzsi2>
 80022b4:	3020      	adds	r0, #32
 80022b6:	e67b      	b.n	8001fb0 <__aeabi_dmul+0x17c>
 80022b8:	46ca      	mov	sl, r9
 80022ba:	e750      	b.n	800215e <__aeabi_dmul+0x32a>
 80022bc:	201f      	movs	r0, #31
 80022be:	001e      	movs	r6, r3
 80022c0:	4240      	negs	r0, r0
 80022c2:	1b04      	subs	r4, r0, r4
 80022c4:	40e6      	lsrs	r6, r4
 80022c6:	2d20      	cmp	r5, #32
 80022c8:	d003      	beq.n	80022d2 <__aeabi_dmul+0x49e>
 80022ca:	4c12      	ldr	r4, [pc, #72]	; (8002314 <__aeabi_dmul+0x4e0>)
 80022cc:	4454      	add	r4, sl
 80022ce:	40a3      	lsls	r3, r4
 80022d0:	431a      	orrs	r2, r3
 80022d2:	1e50      	subs	r0, r2, #1
 80022d4:	4182      	sbcs	r2, r0
 80022d6:	4332      	orrs	r2, r6
 80022d8:	2607      	movs	r6, #7
 80022da:	2700      	movs	r7, #0
 80022dc:	4016      	ands	r6, r2
 80022de:	d009      	beq.n	80022f4 <__aeabi_dmul+0x4c0>
 80022e0:	200f      	movs	r0, #15
 80022e2:	2300      	movs	r3, #0
 80022e4:	4010      	ands	r0, r2
 80022e6:	0014      	movs	r4, r2
 80022e8:	2804      	cmp	r0, #4
 80022ea:	d1b9      	bne.n	8002260 <__aeabi_dmul+0x42c>
 80022ec:	0022      	movs	r2, r4
 80022ee:	075e      	lsls	r6, r3, #29
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	0b1f      	lsrs	r7, r3, #12
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	2300      	movs	r3, #0
 80022fa:	e606      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80022fc:	2780      	movs	r7, #128	; 0x80
 80022fe:	033f      	lsls	r7, r7, #12
 8002300:	431f      	orrs	r7, r3
 8002302:	033f      	lsls	r7, r7, #12
 8002304:	0b3f      	lsrs	r7, r7, #12
 8002306:	0016      	movs	r6, r2
 8002308:	4b00      	ldr	r3, [pc, #0]	; (800230c <__aeabi_dmul+0x4d8>)
 800230a:	e5fe      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800230c:	000007ff 	.word	0x000007ff
 8002310:	0000041e 	.word	0x0000041e
 8002314:	0000043e 	.word	0x0000043e

08002318 <__aeabi_dsub>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	4657      	mov	r7, sl
 800231c:	464e      	mov	r6, r9
 800231e:	4645      	mov	r5, r8
 8002320:	46de      	mov	lr, fp
 8002322:	000c      	movs	r4, r1
 8002324:	0309      	lsls	r1, r1, #12
 8002326:	b5e0      	push	{r5, r6, r7, lr}
 8002328:	0a49      	lsrs	r1, r1, #9
 800232a:	0f46      	lsrs	r6, r0, #29
 800232c:	005f      	lsls	r7, r3, #1
 800232e:	4331      	orrs	r1, r6
 8002330:	031e      	lsls	r6, r3, #12
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	0a76      	lsrs	r6, r6, #9
 8002336:	469b      	mov	fp, r3
 8002338:	0f53      	lsrs	r3, r2, #29
 800233a:	4333      	orrs	r3, r6
 800233c:	4ec8      	ldr	r6, [pc, #800]	; (8002660 <__aeabi_dsub+0x348>)
 800233e:	0065      	lsls	r5, r4, #1
 8002340:	00c0      	lsls	r0, r0, #3
 8002342:	0fe4      	lsrs	r4, r4, #31
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	0d6d      	lsrs	r5, r5, #21
 8002348:	46a2      	mov	sl, r4
 800234a:	4681      	mov	r9, r0
 800234c:	0d7f      	lsrs	r7, r7, #21
 800234e:	469c      	mov	ip, r3
 8002350:	4690      	mov	r8, r2
 8002352:	42b7      	cmp	r7, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x40>
 8002356:	e0b9      	b.n	80024cc <__aeabi_dsub+0x1b4>
 8002358:	465b      	mov	r3, fp
 800235a:	2601      	movs	r6, #1
 800235c:	4073      	eors	r3, r6
 800235e:	469b      	mov	fp, r3
 8002360:	1bee      	subs	r6, r5, r7
 8002362:	45a3      	cmp	fp, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x50>
 8002366:	e083      	b.n	8002470 <__aeabi_dsub+0x158>
 8002368:	2e00      	cmp	r6, #0
 800236a:	dd63      	ble.n	8002434 <__aeabi_dsub+0x11c>
 800236c:	2f00      	cmp	r7, #0
 800236e:	d000      	beq.n	8002372 <__aeabi_dsub+0x5a>
 8002370:	e0b1      	b.n	80024d6 <__aeabi_dsub+0x1be>
 8002372:	4663      	mov	r3, ip
 8002374:	4313      	orrs	r3, r2
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x62>
 8002378:	e123      	b.n	80025c2 <__aeabi_dsub+0x2aa>
 800237a:	1e73      	subs	r3, r6, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d000      	beq.n	8002382 <__aeabi_dsub+0x6a>
 8002380:	e1ba      	b.n	80026f8 <__aeabi_dsub+0x3e0>
 8002382:	1a86      	subs	r6, r0, r2
 8002384:	4663      	mov	r3, ip
 8002386:	42b0      	cmp	r0, r6
 8002388:	4180      	sbcs	r0, r0
 800238a:	2501      	movs	r5, #1
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	4240      	negs	r0, r0
 8002390:	1a09      	subs	r1, r1, r0
 8002392:	020b      	lsls	r3, r1, #8
 8002394:	d400      	bmi.n	8002398 <__aeabi_dsub+0x80>
 8002396:	e147      	b.n	8002628 <__aeabi_dsub+0x310>
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	0a4b      	lsrs	r3, r1, #9
 800239c:	4698      	mov	r8, r3
 800239e:	4643      	mov	r3, r8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x8e>
 80023a4:	e189      	b.n	80026ba <__aeabi_dsub+0x3a2>
 80023a6:	4640      	mov	r0, r8
 80023a8:	f000 fc92 	bl	8002cd0 <__clzsi2>
 80023ac:	0003      	movs	r3, r0
 80023ae:	3b08      	subs	r3, #8
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x9e>
 80023b4:	e17c      	b.n	80026b0 <__aeabi_dsub+0x398>
 80023b6:	2220      	movs	r2, #32
 80023b8:	0030      	movs	r0, r6
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	4641      	mov	r1, r8
 80023be:	40d0      	lsrs	r0, r2
 80023c0:	4099      	lsls	r1, r3
 80023c2:	0002      	movs	r2, r0
 80023c4:	409e      	lsls	r6, r3
 80023c6:	430a      	orrs	r2, r1
 80023c8:	429d      	cmp	r5, r3
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dsub+0xb6>
 80023cc:	e16a      	b.n	80026a4 <__aeabi_dsub+0x38c>
 80023ce:	1b5d      	subs	r5, r3, r5
 80023d0:	1c6b      	adds	r3, r5, #1
 80023d2:	2b1f      	cmp	r3, #31
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_dsub+0xc0>
 80023d6:	e194      	b.n	8002702 <__aeabi_dsub+0x3ea>
 80023d8:	2120      	movs	r1, #32
 80023da:	0010      	movs	r0, r2
 80023dc:	0035      	movs	r5, r6
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	408e      	lsls	r6, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4088      	lsls	r0, r1
 80023e6:	40dd      	lsrs	r5, r3
 80023e8:	1e71      	subs	r1, r6, #1
 80023ea:	418e      	sbcs	r6, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4328      	orrs	r0, r5
 80023f2:	2500      	movs	r5, #0
 80023f4:	4306      	orrs	r6, r0
 80023f6:	4032      	ands	r2, r6
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d009      	beq.n	8002410 <__aeabi_dsub+0xf8>
 80023fc:	230f      	movs	r3, #15
 80023fe:	4033      	ands	r3, r6
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <__aeabi_dsub+0xf8>
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	42b3      	cmp	r3, r6
 8002408:	41b6      	sbcs	r6, r6
 800240a:	4276      	negs	r6, r6
 800240c:	1989      	adds	r1, r1, r6
 800240e:	001e      	movs	r6, r3
 8002410:	020b      	lsls	r3, r1, #8
 8002412:	d400      	bmi.n	8002416 <__aeabi_dsub+0xfe>
 8002414:	e23d      	b.n	8002892 <__aeabi_dsub+0x57a>
 8002416:	1c6a      	adds	r2, r5, #1
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <__aeabi_dsub+0x348>)
 800241a:	0555      	lsls	r5, r2, #21
 800241c:	0d6d      	lsrs	r5, r5, #21
 800241e:	429a      	cmp	r2, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x10c>
 8002422:	e119      	b.n	8002658 <__aeabi_dsub+0x340>
 8002424:	4a8f      	ldr	r2, [pc, #572]	; (8002664 <__aeabi_dsub+0x34c>)
 8002426:	08f6      	lsrs	r6, r6, #3
 8002428:	400a      	ands	r2, r1
 800242a:	0757      	lsls	r7, r2, #29
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	4337      	orrs	r7, r6
 8002430:	0b12      	lsrs	r2, r2, #12
 8002432:	e09b      	b.n	800256c <__aeabi_dsub+0x254>
 8002434:	2e00      	cmp	r6, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x122>
 8002438:	e0c5      	b.n	80025c6 <__aeabi_dsub+0x2ae>
 800243a:	1c6e      	adds	r6, r5, #1
 800243c:	0576      	lsls	r6, r6, #21
 800243e:	0d76      	lsrs	r6, r6, #21
 8002440:	2e01      	cmp	r6, #1
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dsub+0x12e>
 8002444:	e148      	b.n	80026d8 <__aeabi_dsub+0x3c0>
 8002446:	4667      	mov	r7, ip
 8002448:	1a86      	subs	r6, r0, r2
 800244a:	1bcb      	subs	r3, r1, r7
 800244c:	42b0      	cmp	r0, r6
 800244e:	41bf      	sbcs	r7, r7
 8002450:	427f      	negs	r7, r7
 8002452:	46b8      	mov	r8, r7
 8002454:	001f      	movs	r7, r3
 8002456:	4643      	mov	r3, r8
 8002458:	1aff      	subs	r7, r7, r3
 800245a:	003b      	movs	r3, r7
 800245c:	46b8      	mov	r8, r7
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	d500      	bpl.n	8002464 <__aeabi_dsub+0x14c>
 8002462:	e15f      	b.n	8002724 <__aeabi_dsub+0x40c>
 8002464:	4337      	orrs	r7, r6
 8002466:	d19a      	bne.n	800239e <__aeabi_dsub+0x86>
 8002468:	2200      	movs	r2, #0
 800246a:	2400      	movs	r4, #0
 800246c:	2500      	movs	r5, #0
 800246e:	e079      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002470:	2e00      	cmp	r6, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dsub+0x15e>
 8002474:	e0fa      	b.n	800266c <__aeabi_dsub+0x354>
 8002476:	2f00      	cmp	r7, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x164>
 800247a:	e08d      	b.n	8002598 <__aeabi_dsub+0x280>
 800247c:	4b78      	ldr	r3, [pc, #480]	; (8002660 <__aeabi_dsub+0x348>)
 800247e:	429d      	cmp	r5, r3
 8002480:	d067      	beq.n	8002552 <__aeabi_dsub+0x23a>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	4667      	mov	r7, ip
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431f      	orrs	r7, r3
 800248a:	46bc      	mov	ip, r7
 800248c:	2e38      	cmp	r6, #56	; 0x38
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x17a>
 8002490:	e152      	b.n	8002738 <__aeabi_dsub+0x420>
 8002492:	4663      	mov	r3, ip
 8002494:	4313      	orrs	r3, r2
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	4193      	sbcs	r3, r2
 800249a:	181e      	adds	r6, r3, r0
 800249c:	4286      	cmp	r6, r0
 800249e:	4180      	sbcs	r0, r0
 80024a0:	4240      	negs	r0, r0
 80024a2:	1809      	adds	r1, r1, r0
 80024a4:	020b      	lsls	r3, r1, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0x192>
 80024a8:	e0be      	b.n	8002628 <__aeabi_dsub+0x310>
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <__aeabi_dsub+0x348>)
 80024ac:	3501      	adds	r5, #1
 80024ae:	429d      	cmp	r5, r3
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x19c>
 80024b2:	e0d2      	b.n	800265a <__aeabi_dsub+0x342>
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <__aeabi_dsub+0x34c>)
 80024b6:	0873      	lsrs	r3, r6, #1
 80024b8:	400a      	ands	r2, r1
 80024ba:	2101      	movs	r1, #1
 80024bc:	400e      	ands	r6, r1
 80024be:	431e      	orrs	r6, r3
 80024c0:	0851      	lsrs	r1, r2, #1
 80024c2:	07d3      	lsls	r3, r2, #31
 80024c4:	2207      	movs	r2, #7
 80024c6:	431e      	orrs	r6, r3
 80024c8:	4032      	ands	r2, r6
 80024ca:	e795      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80024cc:	001e      	movs	r6, r3
 80024ce:	4316      	orrs	r6, r2
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x1bc>
 80024d2:	e745      	b.n	8002360 <__aeabi_dsub+0x48>
 80024d4:	e740      	b.n	8002358 <__aeabi_dsub+0x40>
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <__aeabi_dsub+0x348>)
 80024d8:	429d      	cmp	r5, r3
 80024da:	d03a      	beq.n	8002552 <__aeabi_dsub+0x23a>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	4667      	mov	r7, ip
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431f      	orrs	r7, r3
 80024e4:	46bc      	mov	ip, r7
 80024e6:	2e38      	cmp	r6, #56	; 0x38
 80024e8:	dd00      	ble.n	80024ec <__aeabi_dsub+0x1d4>
 80024ea:	e0eb      	b.n	80026c4 <__aeabi_dsub+0x3ac>
 80024ec:	2e1f      	cmp	r6, #31
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dsub+0x1da>
 80024f0:	e13a      	b.n	8002768 <__aeabi_dsub+0x450>
 80024f2:	0033      	movs	r3, r6
 80024f4:	4667      	mov	r7, ip
 80024f6:	3b20      	subs	r3, #32
 80024f8:	40df      	lsrs	r7, r3
 80024fa:	003b      	movs	r3, r7
 80024fc:	2e20      	cmp	r6, #32
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x1f4>
 8002500:	2740      	movs	r7, #64	; 0x40
 8002502:	1bbf      	subs	r7, r7, r6
 8002504:	4666      	mov	r6, ip
 8002506:	40be      	lsls	r6, r7
 8002508:	4332      	orrs	r2, r6
 800250a:	4690      	mov	r8, r2
 800250c:	4646      	mov	r6, r8
 800250e:	1e72      	subs	r2, r6, #1
 8002510:	4196      	sbcs	r6, r2
 8002512:	4333      	orrs	r3, r6
 8002514:	e0da      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x204>
 800251a:	e214      	b.n	8002946 <__aeabi_dsub+0x62e>
 800251c:	4663      	mov	r3, ip
 800251e:	4313      	orrs	r3, r2
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x20c>
 8002522:	e168      	b.n	80027f6 <__aeabi_dsub+0x4de>
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	074e      	lsls	r6, r1, #29
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	08c9      	lsrs	r1, r1, #3
 800252c:	031b      	lsls	r3, r3, #12
 800252e:	4306      	orrs	r6, r0
 8002530:	4219      	tst	r1, r3
 8002532:	d008      	beq.n	8002546 <__aeabi_dsub+0x22e>
 8002534:	4660      	mov	r0, ip
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4218      	tst	r0, r3
 800253a:	d104      	bne.n	8002546 <__aeabi_dsub+0x22e>
 800253c:	4663      	mov	r3, ip
 800253e:	0001      	movs	r1, r0
 8002540:	08d2      	lsrs	r2, r2, #3
 8002542:	075e      	lsls	r6, r3, #29
 8002544:	4316      	orrs	r6, r2
 8002546:	00f3      	lsls	r3, r6, #3
 8002548:	4699      	mov	r9, r3
 800254a:	00c9      	lsls	r1, r1, #3
 800254c:	0f72      	lsrs	r2, r6, #29
 800254e:	4d44      	ldr	r5, [pc, #272]	; (8002660 <__aeabi_dsub+0x348>)
 8002550:	4311      	orrs	r1, r2
 8002552:	464b      	mov	r3, r9
 8002554:	08de      	lsrs	r6, r3, #3
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <__aeabi_dsub+0x348>)
 8002558:	074f      	lsls	r7, r1, #29
 800255a:	4337      	orrs	r7, r6
 800255c:	08ca      	lsrs	r2, r1, #3
 800255e:	429d      	cmp	r5, r3
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x24c>
 8002562:	e06e      	b.n	8002642 <__aeabi_dsub+0x32a>
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	056d      	lsls	r5, r5, #21
 8002568:	0b12      	lsrs	r2, r2, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	2100      	movs	r1, #0
 800256e:	0312      	lsls	r2, r2, #12
 8002570:	0b13      	lsrs	r3, r2, #12
 8002572:	0d0a      	lsrs	r2, r1, #20
 8002574:	0512      	lsls	r2, r2, #20
 8002576:	431a      	orrs	r2, r3
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <__aeabi_dsub+0x350>)
 800257a:	052d      	lsls	r5, r5, #20
 800257c:	4013      	ands	r3, r2
 800257e:	432b      	orrs	r3, r5
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	07e4      	lsls	r4, r4, #31
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	4323      	orrs	r3, r4
 8002588:	0038      	movs	r0, r7
 800258a:	0019      	movs	r1, r3
 800258c:	bc3c      	pop	{r2, r3, r4, r5}
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	46a2      	mov	sl, r4
 8002594:	46ab      	mov	fp, r5
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002598:	4663      	mov	r3, ip
 800259a:	4313      	orrs	r3, r2
 800259c:	d011      	beq.n	80025c2 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x28e>
 80025a4:	e107      	b.n	80027b6 <__aeabi_dsub+0x49e>
 80025a6:	1886      	adds	r6, r0, r2
 80025a8:	4286      	cmp	r6, r0
 80025aa:	4180      	sbcs	r0, r0
 80025ac:	4461      	add	r1, ip
 80025ae:	4240      	negs	r0, r0
 80025b0:	1809      	adds	r1, r1, r0
 80025b2:	2501      	movs	r5, #1
 80025b4:	020b      	lsls	r3, r1, #8
 80025b6:	d537      	bpl.n	8002628 <__aeabi_dsub+0x310>
 80025b8:	2502      	movs	r5, #2
 80025ba:	e77b      	b.n	80024b4 <__aeabi_dsub+0x19c>
 80025bc:	003e      	movs	r6, r7
 80025be:	4661      	mov	r1, ip
 80025c0:	4691      	mov	r9, r2
 80025c2:	0035      	movs	r5, r6
 80025c4:	e7c5      	b.n	8002552 <__aeabi_dsub+0x23a>
 80025c6:	465c      	mov	r4, fp
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d000      	beq.n	80025ce <__aeabi_dsub+0x2b6>
 80025cc:	e0e1      	b.n	8002792 <__aeabi_dsub+0x47a>
 80025ce:	000b      	movs	r3, r1
 80025d0:	4303      	orrs	r3, r0
 80025d2:	d0f3      	beq.n	80025bc <__aeabi_dsub+0x2a4>
 80025d4:	1c73      	adds	r3, r6, #1
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x2c2>
 80025d8:	e1ac      	b.n	8002934 <__aeabi_dsub+0x61c>
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <__aeabi_dsub+0x348>)
 80025dc:	429f      	cmp	r7, r3
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x2ca>
 80025e0:	e13a      	b.n	8002858 <__aeabi_dsub+0x540>
 80025e2:	43f3      	mvns	r3, r6
 80025e4:	2b38      	cmp	r3, #56	; 0x38
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x2d2>
 80025e8:	e16f      	b.n	80028ca <__aeabi_dsub+0x5b2>
 80025ea:	2b1f      	cmp	r3, #31
 80025ec:	dd00      	ble.n	80025f0 <__aeabi_dsub+0x2d8>
 80025ee:	e18c      	b.n	800290a <__aeabi_dsub+0x5f2>
 80025f0:	2520      	movs	r5, #32
 80025f2:	000e      	movs	r6, r1
 80025f4:	1aed      	subs	r5, r5, r3
 80025f6:	40ae      	lsls	r6, r5
 80025f8:	46b0      	mov	r8, r6
 80025fa:	0006      	movs	r6, r0
 80025fc:	46aa      	mov	sl, r5
 80025fe:	40de      	lsrs	r6, r3
 8002600:	4645      	mov	r5, r8
 8002602:	4335      	orrs	r5, r6
 8002604:	002e      	movs	r6, r5
 8002606:	4655      	mov	r5, sl
 8002608:	40d9      	lsrs	r1, r3
 800260a:	40a8      	lsls	r0, r5
 800260c:	4663      	mov	r3, ip
 800260e:	1e45      	subs	r5, r0, #1
 8002610:	41a8      	sbcs	r0, r5
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	469c      	mov	ip, r3
 8002616:	4330      	orrs	r0, r6
 8002618:	1a16      	subs	r6, r2, r0
 800261a:	42b2      	cmp	r2, r6
 800261c:	4192      	sbcs	r2, r2
 800261e:	4663      	mov	r3, ip
 8002620:	4252      	negs	r2, r2
 8002622:	1a99      	subs	r1, r3, r2
 8002624:	003d      	movs	r5, r7
 8002626:	e6b4      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002628:	2207      	movs	r2, #7
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x31a>
 8002630:	e6e4      	b.n	80023fc <__aeabi_dsub+0xe4>
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <__aeabi_dsub+0x348>)
 8002634:	08f6      	lsrs	r6, r6, #3
 8002636:	074f      	lsls	r7, r1, #29
 8002638:	4337      	orrs	r7, r6
 800263a:	08ca      	lsrs	r2, r1, #3
 800263c:	429d      	cmp	r5, r3
 800263e:	d000      	beq.n	8002642 <__aeabi_dsub+0x32a>
 8002640:	e790      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002642:	003b      	movs	r3, r7
 8002644:	4313      	orrs	r3, r2
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x332>
 8002648:	e1a6      	b.n	8002998 <__aeabi_dsub+0x680>
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	431a      	orrs	r2, r3
 8002650:	0312      	lsls	r2, r2, #12
 8002652:	0b12      	lsrs	r2, r2, #12
 8002654:	4d02      	ldr	r5, [pc, #8]	; (8002660 <__aeabi_dsub+0x348>)
 8002656:	e789      	b.n	800256c <__aeabi_dsub+0x254>
 8002658:	0015      	movs	r5, r2
 800265a:	2200      	movs	r2, #0
 800265c:	2700      	movs	r7, #0
 800265e:	e785      	b.n	800256c <__aeabi_dsub+0x254>
 8002660:	000007ff 	.word	0x000007ff
 8002664:	ff7fffff 	.word	0xff7fffff
 8002668:	800fffff 	.word	0x800fffff
 800266c:	2e00      	cmp	r6, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x35a>
 8002670:	e0c7      	b.n	8002802 <__aeabi_dsub+0x4ea>
 8002672:	1c6b      	adds	r3, r5, #1
 8002674:	055e      	lsls	r6, r3, #21
 8002676:	0d76      	lsrs	r6, r6, #21
 8002678:	2e01      	cmp	r6, #1
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x366>
 800267c:	e0f0      	b.n	8002860 <__aeabi_dsub+0x548>
 800267e:	4dc8      	ldr	r5, [pc, #800]	; (80029a0 <__aeabi_dsub+0x688>)
 8002680:	42ab      	cmp	r3, r5
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x36e>
 8002684:	e0b9      	b.n	80027fa <__aeabi_dsub+0x4e2>
 8002686:	1885      	adds	r5, r0, r2
 8002688:	000a      	movs	r2, r1
 800268a:	4285      	cmp	r5, r0
 800268c:	4189      	sbcs	r1, r1
 800268e:	4462      	add	r2, ip
 8002690:	4249      	negs	r1, r1
 8002692:	1851      	adds	r1, r2, r1
 8002694:	2207      	movs	r2, #7
 8002696:	07ce      	lsls	r6, r1, #31
 8002698:	086d      	lsrs	r5, r5, #1
 800269a:	432e      	orrs	r6, r5
 800269c:	0849      	lsrs	r1, r1, #1
 800269e:	4032      	ands	r2, r6
 80026a0:	001d      	movs	r5, r3
 80026a2:	e6a9      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026a4:	49bf      	ldr	r1, [pc, #764]	; (80029a4 <__aeabi_dsub+0x68c>)
 80026a6:	1aed      	subs	r5, r5, r3
 80026a8:	4011      	ands	r1, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	4032      	ands	r2, r6
 80026ae:	e6a3      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026b0:	0032      	movs	r2, r6
 80026b2:	3828      	subs	r0, #40	; 0x28
 80026b4:	4082      	lsls	r2, r0
 80026b6:	2600      	movs	r6, #0
 80026b8:	e686      	b.n	80023c8 <__aeabi_dsub+0xb0>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fb08 	bl	8002cd0 <__clzsi2>
 80026c0:	3020      	adds	r0, #32
 80026c2:	e673      	b.n	80023ac <__aeabi_dsub+0x94>
 80026c4:	4663      	mov	r3, ip
 80026c6:	4313      	orrs	r3, r2
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	4193      	sbcs	r3, r2
 80026cc:	1ac6      	subs	r6, r0, r3
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	4240      	negs	r0, r0
 80026d4:	1a09      	subs	r1, r1, r0
 80026d6:	e65c      	b.n	8002392 <__aeabi_dsub+0x7a>
 80026d8:	000e      	movs	r6, r1
 80026da:	4667      	mov	r7, ip
 80026dc:	4306      	orrs	r6, r0
 80026de:	4317      	orrs	r7, r2
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d15e      	bne.n	80027a2 <__aeabi_dsub+0x48a>
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x3d2>
 80026e8:	e0f3      	b.n	80028d2 <__aeabi_dsub+0x5ba>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x3d8>
 80026ee:	e11e      	b.n	800292e <__aeabi_dsub+0x616>
 80026f0:	465c      	mov	r4, fp
 80026f2:	4661      	mov	r1, ip
 80026f4:	4691      	mov	r9, r2
 80026f6:	e72c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80026f8:	4fa9      	ldr	r7, [pc, #676]	; (80029a0 <__aeabi_dsub+0x688>)
 80026fa:	42be      	cmp	r6, r7
 80026fc:	d07b      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80026fe:	001e      	movs	r6, r3
 8002700:	e6f1      	b.n	80024e6 <__aeabi_dsub+0x1ce>
 8002702:	0010      	movs	r0, r2
 8002704:	3d1f      	subs	r5, #31
 8002706:	40e8      	lsrs	r0, r5
 8002708:	2b20      	cmp	r3, #32
 800270a:	d003      	beq.n	8002714 <__aeabi_dsub+0x3fc>
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	409a      	lsls	r2, r3
 8002712:	4316      	orrs	r6, r2
 8002714:	1e73      	subs	r3, r6, #1
 8002716:	419e      	sbcs	r6, r3
 8002718:	2207      	movs	r2, #7
 800271a:	4306      	orrs	r6, r0
 800271c:	4032      	ands	r2, r6
 800271e:	2100      	movs	r1, #0
 8002720:	2500      	movs	r5, #0
 8002722:	e783      	b.n	800262c <__aeabi_dsub+0x314>
 8002724:	1a16      	subs	r6, r2, r0
 8002726:	4663      	mov	r3, ip
 8002728:	42b2      	cmp	r2, r6
 800272a:	4180      	sbcs	r0, r0
 800272c:	1a59      	subs	r1, r3, r1
 800272e:	4240      	negs	r0, r0
 8002730:	1a0b      	subs	r3, r1, r0
 8002732:	4698      	mov	r8, r3
 8002734:	465c      	mov	r4, fp
 8002736:	e632      	b.n	800239e <__aeabi_dsub+0x86>
 8002738:	2e1f      	cmp	r6, #31
 800273a:	dd00      	ble.n	800273e <__aeabi_dsub+0x426>
 800273c:	e0ab      	b.n	8002896 <__aeabi_dsub+0x57e>
 800273e:	2720      	movs	r7, #32
 8002740:	1bbb      	subs	r3, r7, r6
 8002742:	469a      	mov	sl, r3
 8002744:	4663      	mov	r3, ip
 8002746:	4657      	mov	r7, sl
 8002748:	40bb      	lsls	r3, r7
 800274a:	4699      	mov	r9, r3
 800274c:	0013      	movs	r3, r2
 800274e:	464f      	mov	r7, r9
 8002750:	40f3      	lsrs	r3, r6
 8002752:	431f      	orrs	r7, r3
 8002754:	003b      	movs	r3, r7
 8002756:	4657      	mov	r7, sl
 8002758:	40ba      	lsls	r2, r7
 800275a:	1e57      	subs	r7, r2, #1
 800275c:	41ba      	sbcs	r2, r7
 800275e:	4313      	orrs	r3, r2
 8002760:	4662      	mov	r2, ip
 8002762:	40f2      	lsrs	r2, r6
 8002764:	1889      	adds	r1, r1, r2
 8002766:	e698      	b.n	800249a <__aeabi_dsub+0x182>
 8002768:	2720      	movs	r7, #32
 800276a:	1bbb      	subs	r3, r7, r6
 800276c:	469a      	mov	sl, r3
 800276e:	4663      	mov	r3, ip
 8002770:	4657      	mov	r7, sl
 8002772:	40bb      	lsls	r3, r7
 8002774:	4699      	mov	r9, r3
 8002776:	0013      	movs	r3, r2
 8002778:	464f      	mov	r7, r9
 800277a:	40f3      	lsrs	r3, r6
 800277c:	431f      	orrs	r7, r3
 800277e:	003b      	movs	r3, r7
 8002780:	4657      	mov	r7, sl
 8002782:	40ba      	lsls	r2, r7
 8002784:	1e57      	subs	r7, r2, #1
 8002786:	41ba      	sbcs	r2, r7
 8002788:	4313      	orrs	r3, r2
 800278a:	4662      	mov	r2, ip
 800278c:	40f2      	lsrs	r2, r6
 800278e:	1a89      	subs	r1, r1, r2
 8002790:	e79c      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <__aeabi_dsub+0x688>)
 8002794:	429f      	cmp	r7, r3
 8002796:	d05f      	beq.n	8002858 <__aeabi_dsub+0x540>
 8002798:	2580      	movs	r5, #128	; 0x80
 800279a:	042d      	lsls	r5, r5, #16
 800279c:	4273      	negs	r3, r6
 800279e:	4329      	orrs	r1, r5
 80027a0:	e720      	b.n	80025e4 <__aeabi_dsub+0x2cc>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d10c      	bne.n	80027c0 <__aeabi_dsub+0x4a8>
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x494>
 80027aa:	e0d0      	b.n	800294e <__aeabi_dsub+0x636>
 80027ac:	465c      	mov	r4, fp
 80027ae:	4661      	mov	r1, ip
 80027b0:	4691      	mov	r9, r2
 80027b2:	4d7b      	ldr	r5, [pc, #492]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b4:	e6cd      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027b6:	4f7a      	ldr	r7, [pc, #488]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b8:	42be      	cmp	r6, r7
 80027ba:	d01c      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027bc:	001e      	movs	r6, r3
 80027be:	e665      	b.n	800248c <__aeabi_dsub+0x174>
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d018      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	074e      	lsls	r6, r1, #29
 80027c8:	4306      	orrs	r6, r0
 80027ca:	2080      	movs	r0, #128	; 0x80
 80027cc:	08c9      	lsrs	r1, r1, #3
 80027ce:	0300      	lsls	r0, r0, #12
 80027d0:	4201      	tst	r1, r0
 80027d2:	d008      	beq.n	80027e6 <__aeabi_dsub+0x4ce>
 80027d4:	4663      	mov	r3, ip
 80027d6:	08dc      	lsrs	r4, r3, #3
 80027d8:	4204      	tst	r4, r0
 80027da:	d104      	bne.n	80027e6 <__aeabi_dsub+0x4ce>
 80027dc:	0021      	movs	r1, r4
 80027de:	46da      	mov	sl, fp
 80027e0:	08d2      	lsrs	r2, r2, #3
 80027e2:	075e      	lsls	r6, r3, #29
 80027e4:	4316      	orrs	r6, r2
 80027e6:	00f3      	lsls	r3, r6, #3
 80027e8:	4699      	mov	r9, r3
 80027ea:	2401      	movs	r4, #1
 80027ec:	4653      	mov	r3, sl
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	0f72      	lsrs	r2, r6, #29
 80027f2:	4311      	orrs	r1, r2
 80027f4:	401c      	ands	r4, r3
 80027f6:	4d6a      	ldr	r5, [pc, #424]	; (80029a0 <__aeabi_dsub+0x688>)
 80027f8:	e6ab      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027fa:	001d      	movs	r5, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	2700      	movs	r7, #0
 8002800:	e6b4      	b.n	800256c <__aeabi_dsub+0x254>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d159      	bne.n	80028ba <__aeabi_dsub+0x5a2>
 8002806:	000b      	movs	r3, r1
 8002808:	4303      	orrs	r3, r0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x4f6>
 800280c:	e6d6      	b.n	80025bc <__aeabi_dsub+0x2a4>
 800280e:	1c73      	adds	r3, r6, #1
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x4fc>
 8002812:	e0b2      	b.n	800297a <__aeabi_dsub+0x662>
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <__aeabi_dsub+0x688>)
 8002816:	429f      	cmp	r7, r3
 8002818:	d01e      	beq.n	8002858 <__aeabi_dsub+0x540>
 800281a:	43f3      	mvns	r3, r6
 800281c:	2b38      	cmp	r3, #56	; 0x38
 800281e:	dc6f      	bgt.n	8002900 <__aeabi_dsub+0x5e8>
 8002820:	2b1f      	cmp	r3, #31
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x50e>
 8002824:	e097      	b.n	8002956 <__aeabi_dsub+0x63e>
 8002826:	2520      	movs	r5, #32
 8002828:	000e      	movs	r6, r1
 800282a:	1aed      	subs	r5, r5, r3
 800282c:	40ae      	lsls	r6, r5
 800282e:	46b0      	mov	r8, r6
 8002830:	0006      	movs	r6, r0
 8002832:	46aa      	mov	sl, r5
 8002834:	40de      	lsrs	r6, r3
 8002836:	4645      	mov	r5, r8
 8002838:	4335      	orrs	r5, r6
 800283a:	002e      	movs	r6, r5
 800283c:	4655      	mov	r5, sl
 800283e:	40a8      	lsls	r0, r5
 8002840:	40d9      	lsrs	r1, r3
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	448c      	add	ip, r1
 8002848:	4306      	orrs	r6, r0
 800284a:	18b6      	adds	r6, r6, r2
 800284c:	4296      	cmp	r6, r2
 800284e:	4192      	sbcs	r2, r2
 8002850:	4251      	negs	r1, r2
 8002852:	4461      	add	r1, ip
 8002854:	003d      	movs	r5, r7
 8002856:	e625      	b.n	80024a4 <__aeabi_dsub+0x18c>
 8002858:	003d      	movs	r5, r7
 800285a:	4661      	mov	r1, ip
 800285c:	4691      	mov	r9, r2
 800285e:	e678      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002860:	000b      	movs	r3, r1
 8002862:	4303      	orrs	r3, r0
 8002864:	2d00      	cmp	r5, #0
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x552>
 8002868:	e655      	b.n	8002516 <__aeabi_dsub+0x1fe>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f5      	beq.n	800285a <__aeabi_dsub+0x542>
 800286e:	4663      	mov	r3, ip
 8002870:	4313      	orrs	r3, r2
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x55e>
 8002874:	e66d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002876:	1886      	adds	r6, r0, r2
 8002878:	4286      	cmp	r6, r0
 800287a:	4180      	sbcs	r0, r0
 800287c:	4461      	add	r1, ip
 800287e:	4240      	negs	r0, r0
 8002880:	1809      	adds	r1, r1, r0
 8002882:	2200      	movs	r2, #0
 8002884:	020b      	lsls	r3, r1, #8
 8002886:	d400      	bmi.n	800288a <__aeabi_dsub+0x572>
 8002888:	e6d0      	b.n	800262c <__aeabi_dsub+0x314>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <__aeabi_dsub+0x68c>)
 800288c:	3501      	adds	r5, #1
 800288e:	4019      	ands	r1, r3
 8002890:	e5b2      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002892:	46b1      	mov	r9, r6
 8002894:	e65d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002896:	0033      	movs	r3, r6
 8002898:	4667      	mov	r7, ip
 800289a:	3b20      	subs	r3, #32
 800289c:	40df      	lsrs	r7, r3
 800289e:	003b      	movs	r3, r7
 80028a0:	2e20      	cmp	r6, #32
 80028a2:	d005      	beq.n	80028b0 <__aeabi_dsub+0x598>
 80028a4:	2740      	movs	r7, #64	; 0x40
 80028a6:	1bbf      	subs	r7, r7, r6
 80028a8:	4666      	mov	r6, ip
 80028aa:	40be      	lsls	r6, r7
 80028ac:	4332      	orrs	r2, r6
 80028ae:	4690      	mov	r8, r2
 80028b0:	4646      	mov	r6, r8
 80028b2:	1e72      	subs	r2, r6, #1
 80028b4:	4196      	sbcs	r6, r2
 80028b6:	4333      	orrs	r3, r6
 80028b8:	e5ef      	b.n	800249a <__aeabi_dsub+0x182>
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <__aeabi_dsub+0x688>)
 80028bc:	429f      	cmp	r7, r3
 80028be:	d0cb      	beq.n	8002858 <__aeabi_dsub+0x540>
 80028c0:	2580      	movs	r5, #128	; 0x80
 80028c2:	042d      	lsls	r5, r5, #16
 80028c4:	4273      	negs	r3, r6
 80028c6:	4329      	orrs	r1, r5
 80028c8:	e7a8      	b.n	800281c <__aeabi_dsub+0x504>
 80028ca:	4308      	orrs	r0, r1
 80028cc:	1e41      	subs	r1, r0, #1
 80028ce:	4188      	sbcs	r0, r1
 80028d0:	e6a2      	b.n	8002618 <__aeabi_dsub+0x300>
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x5c0>
 80028d6:	e63c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80028d8:	4663      	mov	r3, ip
 80028da:	1a86      	subs	r6, r0, r2
 80028dc:	1acf      	subs	r7, r1, r3
 80028de:	42b0      	cmp	r0, r6
 80028e0:	419b      	sbcs	r3, r3
 80028e2:	425b      	negs	r3, r3
 80028e4:	1afb      	subs	r3, r7, r3
 80028e6:	4698      	mov	r8, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	d54e      	bpl.n	800298a <__aeabi_dsub+0x672>
 80028ec:	1a16      	subs	r6, r2, r0
 80028ee:	4663      	mov	r3, ip
 80028f0:	42b2      	cmp	r2, r6
 80028f2:	4192      	sbcs	r2, r2
 80028f4:	1a59      	subs	r1, r3, r1
 80028f6:	4252      	negs	r2, r2
 80028f8:	1a89      	subs	r1, r1, r2
 80028fa:	465c      	mov	r4, fp
 80028fc:	2200      	movs	r2, #0
 80028fe:	e57b      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002900:	4301      	orrs	r1, r0
 8002902:	000e      	movs	r6, r1
 8002904:	1e71      	subs	r1, r6, #1
 8002906:	418e      	sbcs	r6, r1
 8002908:	e79f      	b.n	800284a <__aeabi_dsub+0x532>
 800290a:	001d      	movs	r5, r3
 800290c:	000e      	movs	r6, r1
 800290e:	3d20      	subs	r5, #32
 8002910:	40ee      	lsrs	r6, r5
 8002912:	46b0      	mov	r8, r6
 8002914:	2b20      	cmp	r3, #32
 8002916:	d004      	beq.n	8002922 <__aeabi_dsub+0x60a>
 8002918:	2540      	movs	r5, #64	; 0x40
 800291a:	1aeb      	subs	r3, r5, r3
 800291c:	4099      	lsls	r1, r3
 800291e:	4308      	orrs	r0, r1
 8002920:	4681      	mov	r9, r0
 8002922:	4648      	mov	r0, r9
 8002924:	4643      	mov	r3, r8
 8002926:	1e41      	subs	r1, r0, #1
 8002928:	4188      	sbcs	r0, r1
 800292a:	4318      	orrs	r0, r3
 800292c:	e674      	b.n	8002618 <__aeabi_dsub+0x300>
 800292e:	2200      	movs	r2, #0
 8002930:	2400      	movs	r4, #0
 8002932:	e617      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002934:	1a16      	subs	r6, r2, r0
 8002936:	4663      	mov	r3, ip
 8002938:	42b2      	cmp	r2, r6
 800293a:	4192      	sbcs	r2, r2
 800293c:	1a59      	subs	r1, r3, r1
 800293e:	4252      	negs	r2, r2
 8002940:	1a89      	subs	r1, r1, r2
 8002942:	003d      	movs	r5, r7
 8002944:	e525      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002946:	4661      	mov	r1, ip
 8002948:	4691      	mov	r9, r2
 800294a:	4d15      	ldr	r5, [pc, #84]	; (80029a0 <__aeabi_dsub+0x688>)
 800294c:	e601      	b.n	8002552 <__aeabi_dsub+0x23a>
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2400      	movs	r4, #0
 8002952:	0312      	lsls	r2, r2, #12
 8002954:	e679      	b.n	800264a <__aeabi_dsub+0x332>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x656>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	464e      	mov	r6, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e71      	subs	r1, r6, #1
 8002974:	418e      	sbcs	r6, r1
 8002976:	431e      	orrs	r6, r3
 8002978:	e767      	b.n	800284a <__aeabi_dsub+0x532>
 800297a:	1886      	adds	r6, r0, r2
 800297c:	4296      	cmp	r6, r2
 800297e:	419b      	sbcs	r3, r3
 8002980:	4461      	add	r1, ip
 8002982:	425b      	negs	r3, r3
 8002984:	18c9      	adds	r1, r1, r3
 8002986:	003d      	movs	r5, r7
 8002988:	e58c      	b.n	80024a4 <__aeabi_dsub+0x18c>
 800298a:	4647      	mov	r7, r8
 800298c:	4337      	orrs	r7, r6
 800298e:	d0ce      	beq.n	800292e <__aeabi_dsub+0x616>
 8002990:	2207      	movs	r2, #7
 8002992:	4641      	mov	r1, r8
 8002994:	4032      	ands	r2, r6
 8002996:	e649      	b.n	800262c <__aeabi_dsub+0x314>
 8002998:	2700      	movs	r7, #0
 800299a:	003a      	movs	r2, r7
 800299c:	e5e6      	b.n	800256c <__aeabi_dsub+0x254>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	000007ff 	.word	0x000007ff
 80029a4:	ff7fffff 	.word	0xff7fffff

080029a8 <__aeabi_dcmpun>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4e0c      	ldr	r6, [pc, #48]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029ac:	030d      	lsls	r5, r1, #12
 80029ae:	031c      	lsls	r4, r3, #12
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	0b2d      	lsrs	r5, r5, #12
 80029b6:	0d49      	lsrs	r1, r1, #21
 80029b8:	0b24      	lsrs	r4, r4, #12
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	42b1      	cmp	r1, r6
 80029be:	d008      	beq.n	80029d2 <__aeabi_dcmpun+0x2a>
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d103      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029c8:	4314      	orrs	r4, r2
 80029ca:	0020      	movs	r0, r4
 80029cc:	1e44      	subs	r4, r0, #1
 80029ce:	41a0      	sbcs	r0, r4
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	4305      	orrs	r5, r0
 80029d4:	2001      	movs	r0, #1
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d1fa      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029da:	e7f1      	b.n	80029c0 <__aeabi_dcmpun+0x18>
 80029dc:	000007ff 	.word	0x000007ff

080029e0 <__aeabi_d2iz>:
 80029e0:	b530      	push	{r4, r5, lr}
 80029e2:	4d14      	ldr	r5, [pc, #80]	; (8002a34 <__aeabi_d2iz+0x54>)
 80029e4:	030a      	lsls	r2, r1, #12
 80029e6:	004b      	lsls	r3, r1, #1
 80029e8:	0b12      	lsrs	r2, r2, #12
 80029ea:	0d5b      	lsrs	r3, r3, #21
 80029ec:	0fc9      	lsrs	r1, r1, #31
 80029ee:	2400      	movs	r4, #0
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dd11      	ble.n	8002a18 <__aeabi_d2iz+0x38>
 80029f4:	4c10      	ldr	r4, [pc, #64]	; (8002a38 <__aeabi_d2iz+0x58>)
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	dc10      	bgt.n	8002a1c <__aeabi_d2iz+0x3c>
 80029fa:	2480      	movs	r4, #128	; 0x80
 80029fc:	0364      	lsls	r4, r4, #13
 80029fe:	4322      	orrs	r2, r4
 8002a00:	4c0e      	ldr	r4, [pc, #56]	; (8002a3c <__aeabi_d2iz+0x5c>)
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd0c      	ble.n	8002a22 <__aeabi_d2iz+0x42>
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <__aeabi_d2iz+0x60>)
 8002a0a:	1ac3      	subs	r3, r0, r3
 8002a0c:	40da      	lsrs	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	425c      	negs	r4, r3
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_d2iz+0x38>
 8002a16:	001c      	movs	r4, r3
 8002a18:	0020      	movs	r0, r4
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__aeabi_d2iz+0x64>)
 8002a1e:	18cc      	adds	r4, r1, r3
 8002a20:	e7fa      	b.n	8002a18 <__aeabi_d2iz+0x38>
 8002a22:	4d09      	ldr	r5, [pc, #36]	; (8002a48 <__aeabi_d2iz+0x68>)
 8002a24:	40e0      	lsrs	r0, r4
 8002a26:	46ac      	mov	ip, r5
 8002a28:	4463      	add	r3, ip
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	e7ee      	b.n	8002a10 <__aeabi_d2iz+0x30>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000003fe 	.word	0x000003fe
 8002a38:	0000041d 	.word	0x0000041d
 8002a3c:	00000433 	.word	0x00000433
 8002a40:	00000413 	.word	0x00000413
 8002a44:	7fffffff 	.word	0x7fffffff
 8002a48:	fffffbed 	.word	0xfffffbed

08002a4c <__aeabi_i2d>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d02d      	beq.n	8002aae <__aeabi_i2d+0x62>
 8002a52:	17c3      	asrs	r3, r0, #31
 8002a54:	18c5      	adds	r5, r0, r3
 8002a56:	405d      	eors	r5, r3
 8002a58:	0fc4      	lsrs	r4, r0, #31
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f000 f938 	bl	8002cd0 <__clzsi2>
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <__aeabi_i2d+0x6c>)
 8002a62:	1a1b      	subs	r3, r3, r0
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	0d5b      	lsrs	r3, r3, #21
 8002a68:	280a      	cmp	r0, #10
 8002a6a:	dd15      	ble.n	8002a98 <__aeabi_i2d+0x4c>
 8002a6c:	380b      	subs	r0, #11
 8002a6e:	4085      	lsls	r5, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	032d      	lsls	r5, r5, #12
 8002a74:	0b2d      	lsrs	r5, r5, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	0010      	movs	r0, r2
 8002a7a:	032d      	lsls	r5, r5, #12
 8002a7c:	0d0a      	lsrs	r2, r1, #20
 8002a7e:	0b2d      	lsrs	r5, r5, #12
 8002a80:	0512      	lsls	r2, r2, #20
 8002a82:	432a      	orrs	r2, r5
 8002a84:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__aeabi_i2d+0x70>)
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	402a      	ands	r2, r5
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	07e4      	lsls	r4, r4, #31
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0019      	movs	r1, r3
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	0002      	movs	r2, r0
 8002a9a:	0029      	movs	r1, r5
 8002a9c:	3215      	adds	r2, #21
 8002a9e:	4091      	lsls	r1, r2
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	210b      	movs	r1, #11
 8002aa4:	1a08      	subs	r0, r1, r0
 8002aa6:	40c5      	lsrs	r5, r0
 8002aa8:	032d      	lsls	r5, r5, #12
 8002aaa:	0b2d      	lsrs	r5, r5, #12
 8002aac:	e7e3      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002aae:	2400      	movs	r4, #0
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	e7de      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002ab8:	0000041e 	.word	0x0000041e
 8002abc:	800fffff 	.word	0x800fffff

08002ac0 <__aeabi_ui2d>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e04      	subs	r4, r0, #0
 8002ac4:	d025      	beq.n	8002b12 <__aeabi_ui2d+0x52>
 8002ac6:	f000 f903 	bl	8002cd0 <__clzsi2>
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <__aeabi_ui2d+0x5c>)
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dd12      	ble.n	8002afc <__aeabi_ui2d+0x3c>
 8002ad6:	380b      	subs	r0, #11
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	0324      	lsls	r4, r4, #12
 8002ade:	0b24      	lsrs	r4, r4, #12
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0324      	lsls	r4, r4, #12
 8002ae6:	0d0a      	lsrs	r2, r1, #20
 8002ae8:	0b24      	lsrs	r4, r4, #12
 8002aea:	0512      	lsls	r2, r2, #20
 8002aec:	4322      	orrs	r2, r4
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__aeabi_ui2d+0x60>)
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	4022      	ands	r2, r4
 8002af4:	4313      	orrs	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	0859      	lsrs	r1, r3, #1
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	0002      	movs	r2, r0
 8002afe:	0021      	movs	r1, r4
 8002b00:	3215      	adds	r2, #21
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	210b      	movs	r1, #11
 8002b08:	1a08      	subs	r0, r1, r0
 8002b0a:	40c4      	lsrs	r4, r0
 8002b0c:	0324      	lsls	r4, r4, #12
 8002b0e:	0b24      	lsrs	r4, r4, #12
 8002b10:	e7e6      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e7e2      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	0000041e 	.word	0x0000041e
 8002b20:	800fffff 	.word	0x800fffff

08002b24 <__aeabi_f2d>:
 8002b24:	0041      	lsls	r1, r0, #1
 8002b26:	0e09      	lsrs	r1, r1, #24
 8002b28:	1c4b      	adds	r3, r1, #1
 8002b2a:	b570      	push	{r4, r5, r6, lr}
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	0246      	lsls	r6, r0, #9
 8002b30:	0a75      	lsrs	r5, r6, #9
 8002b32:	0fc4      	lsrs	r4, r0, #31
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	dd14      	ble.n	8002b62 <__aeabi_f2d+0x3e>
 8002b38:	23e0      	movs	r3, #224	; 0xe0
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	076d      	lsls	r5, r5, #29
 8002b3e:	0b36      	lsrs	r6, r6, #12
 8002b40:	18cb      	adds	r3, r1, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	0d0a      	lsrs	r2, r1, #20
 8002b46:	0028      	movs	r0, r5
 8002b48:	0512      	lsls	r2, r2, #20
 8002b4a:	4d1c      	ldr	r5, [pc, #112]	; (8002bbc <__aeabi_f2d+0x98>)
 8002b4c:	4332      	orrs	r2, r6
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	402a      	ands	r2, r5
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	07e4      	lsls	r4, r4, #31
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d114      	bne.n	8002b90 <__aeabi_f2d+0x6c>
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d01e      	beq.n	8002ba8 <__aeabi_f2d+0x84>
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f8b0 	bl	8002cd0 <__clzsi2>
 8002b70:	280a      	cmp	r0, #10
 8002b72:	dc1c      	bgt.n	8002bae <__aeabi_f2d+0x8a>
 8002b74:	230b      	movs	r3, #11
 8002b76:	002a      	movs	r2, r5
 8002b78:	1a1b      	subs	r3, r3, r0
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3315      	adds	r3, #21
 8002b80:	409d      	lsls	r5, r3
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_f2d+0x9c>)
 8002b84:	0312      	lsls	r2, r2, #12
 8002b86:	1a1b      	subs	r3, r3, r0
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	0b16      	lsrs	r6, r2, #12
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	e7d8      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002b90:	2d00      	cmp	r5, #0
 8002b92:	d006      	beq.n	8002ba2 <__aeabi_f2d+0x7e>
 8002b94:	0b32      	lsrs	r2, r6, #12
 8002b96:	2680      	movs	r6, #128	; 0x80
 8002b98:	0336      	lsls	r6, r6, #12
 8002b9a:	076d      	lsls	r5, r5, #29
 8002b9c:	4316      	orrs	r6, r2
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba0:	e7cf      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	e7cc      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7c9      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	002a      	movs	r2, r5
 8002bb2:	3b0b      	subs	r3, #11
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	e7e3      	b.n	8002b82 <__aeabi_f2d+0x5e>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	800fffff 	.word	0x800fffff
 8002bc0:	00000389 	.word	0x00000389
 8002bc4:	000007ff 	.word	0x000007ff

08002bc8 <__aeabi_d2f>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	004c      	lsls	r4, r1, #1
 8002bcc:	0d64      	lsrs	r4, r4, #21
 8002bce:	030b      	lsls	r3, r1, #12
 8002bd0:	1c62      	adds	r2, r4, #1
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	0f46      	lsrs	r6, r0, #29
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	0fc9      	lsrs	r1, r1, #31
 8002bda:	431e      	orrs	r6, r3
 8002bdc:	00c5      	lsls	r5, r0, #3
 8002bde:	0d52      	lsrs	r2, r2, #21
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	dd29      	ble.n	8002c38 <__aeabi_d2f+0x70>
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <__aeabi_d2f+0xfc>)
 8002be6:	18e7      	adds	r7, r4, r3
 8002be8:	2ffe      	cmp	r7, #254	; 0xfe
 8002bea:	dc1c      	bgt.n	8002c26 <__aeabi_d2f+0x5e>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	dd3b      	ble.n	8002c68 <__aeabi_d2f+0xa0>
 8002bf0:	0180      	lsls	r0, r0, #6
 8002bf2:	1e43      	subs	r3, r0, #1
 8002bf4:	4198      	sbcs	r0, r3
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	00f3      	lsls	r3, r6, #3
 8002bfa:	0f6d      	lsrs	r5, r5, #29
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	432b      	orrs	r3, r5
 8002c00:	401a      	ands	r2, r3
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d004      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	2a04      	cmp	r2, #4
 8002c0c:	d000      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	04d2      	lsls	r2, r2, #19
 8002c14:	401a      	ands	r2, r3
 8002c16:	d024      	beq.n	8002c62 <__aeabi_d2f+0x9a>
 8002c18:	3701      	adds	r7, #1
 8002c1a:	b2fa      	uxtb	r2, r7
 8002c1c:	2fff      	cmp	r7, #255	; 0xff
 8002c1e:	d002      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	0a58      	lsrs	r0, r3, #9
 8002c24:	e001      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	2000      	movs	r0, #0
 8002c2a:	0240      	lsls	r0, r0, #9
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	0a40      	lsrs	r0, r0, #9
 8002c30:	07c9      	lsls	r1, r1, #31
 8002c32:	4310      	orrs	r0, r2
 8002c34:	4308      	orrs	r0, r1
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	4335      	orrs	r5, r6
 8002c3a:	2c00      	cmp	r4, #0
 8002c3c:	d104      	bne.n	8002c48 <__aeabi_d2f+0x80>
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d10a      	bne.n	8002c58 <__aeabi_d2f+0x90>
 8002c42:	2200      	movs	r2, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	e7f0      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	d0ec      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c4c:	2080      	movs	r0, #128	; 0x80
 8002c4e:	03c0      	lsls	r0, r0, #15
 8002c50:	4330      	orrs	r0, r6
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	e7e9      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c56:	2400      	movs	r4, #0
 8002c58:	2300      	movs	r3, #0
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	0a58      	lsrs	r0, r3, #9
 8002c5e:	b2e2      	uxtb	r2, r4
 8002c60:	e7e3      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	003c      	movs	r4, r7
 8002c66:	e7f8      	b.n	8002c5a <__aeabi_d2f+0x92>
 8002c68:	003b      	movs	r3, r7
 8002c6a:	3317      	adds	r3, #23
 8002c6c:	dbf3      	blt.n	8002c56 <__aeabi_d2f+0x8e>
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4333      	orrs	r3, r6
 8002c74:	261e      	movs	r6, #30
 8002c76:	1bf6      	subs	r6, r6, r7
 8002c78:	2e1f      	cmp	r6, #31
 8002c7a:	dd14      	ble.n	8002ca6 <__aeabi_d2f+0xde>
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4252      	negs	r2, r2
 8002c80:	1bd7      	subs	r7, r2, r7
 8002c82:	001a      	movs	r2, r3
 8002c84:	40fa      	lsrs	r2, r7
 8002c86:	0017      	movs	r7, r2
 8002c88:	2e20      	cmp	r6, #32
 8002c8a:	d004      	beq.n	8002c96 <__aeabi_d2f+0xce>
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <__aeabi_d2f+0x100>)
 8002c8e:	4694      	mov	ip, r2
 8002c90:	4464      	add	r4, ip
 8002c92:	40a3      	lsls	r3, r4
 8002c94:	431d      	orrs	r5, r3
 8002c96:	002b      	movs	r3, r5
 8002c98:	1e5d      	subs	r5, r3, #1
 8002c9a:	41ab      	sbcs	r3, r5
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	433b      	orrs	r3, r7
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	2700      	movs	r7, #0
 8002ca4:	e7ad      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <__aeabi_d2f+0x104>)
 8002ca8:	0028      	movs	r0, r5
 8002caa:	18a2      	adds	r2, r4, r2
 8002cac:	4095      	lsls	r5, r2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	1e6c      	subs	r4, r5, #1
 8002cb2:	41a5      	sbcs	r5, r4
 8002cb4:	40f0      	lsrs	r0, r6
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	4303      	orrs	r3, r0
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	2700      	movs	r7, #0
 8002cc0:	e79f      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	fffffc80 	.word	0xfffffc80
 8002cc8:	fffffca2 	.word	0xfffffca2
 8002ccc:	fffffc82 	.word	0xfffffc82

08002cd0 <__clzsi2>:
 8002cd0:	211c      	movs	r1, #28
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d301      	bcc.n	8002cde <__clzsi2+0xe>
 8002cda:	0c00      	lsrs	r0, r0, #16
 8002cdc:	3910      	subs	r1, #16
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d301      	bcc.n	8002ce8 <__clzsi2+0x18>
 8002ce4:	0a00      	lsrs	r0, r0, #8
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0x22>
 8002cee:	0900      	lsrs	r0, r0, #4
 8002cf0:	3904      	subs	r1, #4
 8002cf2:	a202      	add	r2, pc, #8	; (adr r2, 8002cfc <__clzsi2+0x2c>)
 8002cf4:	5c10      	ldrb	r0, [r2, r0]
 8002cf6:	1840      	adds	r0, r0, r1
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	02020304 	.word	0x02020304
 8002d00:	01010101 	.word	0x01010101
	...

08002d0c <__clzdi2>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d103      	bne.n	8002d1a <__clzdi2+0xe>
 8002d12:	f7ff ffdd 	bl	8002cd0 <__clzsi2>
 8002d16:	3020      	adds	r0, #32
 8002d18:	e002      	b.n	8002d20 <__clzdi2+0x14>
 8002d1a:	1c08      	adds	r0, r1, #0
 8002d1c:	f7ff ffd8 	bl	8002cd0 <__clzsi2>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)

08002d24 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <LoadROtopology+0x94>)
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002d2e:	4a23      	ldr	r2, [pc, #140]	; (8002dbc <LoadROtopology+0x98>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d033      	beq.n	8002d9c <LoadROtopology+0x78>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002d34:	0a1a      	lsrs	r2, r3, #8
		if(N == 0)
 8002d36:	d039      	beq.n	8002dac <LoadROtopology+0x88>
		N =(uint8_t )(temp >> 8);
 8002d38:	4921      	ldr	r1, [pc, #132]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d3a:	700a      	strb	r2, [r1, #0]
			N =1;
		myID =(uint8_t )temp;
 8002d3c:	4a21      	ldr	r2, [pc, #132]	; (8002dc4 <LoadROtopology+0xa0>)
 8002d3e:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d42:	781e      	ldrb	r6, [r3, #0]
 8002d44:	2e00      	cmp	r6, #0
 8002d46:	d035      	beq.n	8002db4 <LoadROtopology+0x90>
 8002d48:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 8002d4a:	2202      	movs	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d4c:	466b      	mov	r3, sp
 8002d4e:	1dd9      	adds	r1, r3, #7
 8002d50:	2300      	movs	r3, #0
 8002d52:	469c      	mov	ip, r3
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d54:	4d1c      	ldr	r5, [pc, #112]	; (8002dc8 <LoadROtopology+0xa4>)
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d56:	4663      	mov	r3, ip
 8002d58:	700b      	strb	r3, [r1, #0]
 8002d5a:	780b      	ldrb	r3, [r1, #0]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b0a      	cmp	r3, #10
 8002d60:	d815      	bhi.n	8002d8e <LoadROtopology+0x6a>
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d62:	1e63      	subs	r3, r4, #1
 8002d64:	0098      	lsls	r0, r3, #2
 8002d66:	18c0      	adds	r0, r0, r3
 8002d68:	0040      	lsls	r0, r0, #1
 8002d6a:	18c0      	adds	r0, r0, r3
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <LoadROtopology+0x94>)
 8002d6e:	18d7      	adds	r7, r2, r3
 8002d70:	780b      	ldrb	r3, [r1, #0]
 8002d72:	883f      	ldrh	r7, [r7, #0]
 8002d74:	181b      	adds	r3, r3, r0
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	52ef      	strh	r7, [r5, r3]
				add +=2;
 8002d7a:	3202      	adds	r2, #2
 8002d7c:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d7e:	780b      	ldrb	r3, [r1, #0]
 8002d80:	3301      	adds	r3, #1
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	700b      	strb	r3, [r1, #0]
 8002d86:	780b      	ldrb	r3, [r1, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b0a      	cmp	r3, #10
 8002d8c:	d9ee      	bls.n	8002d6c <LoadROtopology+0x48>
		for(uint8_t i =1; i <= N; i++){
 8002d8e:	3401      	adds	r4, #1
 8002d90:	b2e4      	uxtb	r4, r4
 8002d92:	42b4      	cmp	r4, r6
 8002d94:	d9df      	bls.n	8002d56 <LoadROtopology+0x32>
			}
		}
	}
	
	return result;
 8002d96:	2000      	movs	r0, #0
}
 8002d98:	b003      	add	sp, #12
 8002d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N =1;
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <LoadROtopology+0xa0>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002da8:	20fa      	movs	r0, #250	; 0xfa
 8002daa:	e7f5      	b.n	8002d98 <LoadROtopology+0x74>
			N =1;
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <LoadROtopology+0x9c>)
 8002dae:	2101      	movs	r1, #1
 8002db0:	7011      	strb	r1, [r2, #0]
 8002db2:	e7c3      	b.n	8002d3c <LoadROtopology+0x18>
	return result;
 8002db4:	2000      	movs	r0, #0
 8002db6:	e7ef      	b.n	8002d98 <LoadROtopology+0x74>
 8002db8:	0801d800 	.word	0x0801d800
 8002dbc:	0000ffff 	.word	0x0000ffff
 8002dc0:	2000001c 	.word	0x2000001c
 8002dc4:	20001076 	.word	0x20001076
 8002dc8:	20000a78 	.word	0x20000a78

08002dcc <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <LoadEEportsDir+0x40>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8002dd2:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d017      	beq.n	8002e08 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002dd8:	490d      	ldr	r1, [pc, #52]	; (8002e10 <LoadEEportsDir+0x44>)
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f004 fcd0 	bl	8007780 <EE_ReadVariable>
	for(uint8_t i =1; i <= N; i++){
 8002de0:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002de2:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002de4:	4f09      	ldr	r7, [pc, #36]	; (8002e0c <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002de6:	4e0a      	ldr	r6, [pc, #40]	; (8002e10 <LoadEEportsDir+0x44>)
	for(uint8_t i =1; i <= N; i++){
 8002de8:	3401      	adds	r4, #1
 8002dea:	b2e4      	uxtb	r4, r4
 8002dec:	783b      	ldrb	r3, [r7, #0]
 8002dee:	42a3      	cmp	r3, r4
 8002df0:	d30a      	bcc.n	8002e08 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002df2:	1e61      	subs	r1, r4, #1
 8002df4:	0049      	lsls	r1, r1, #1
 8002df6:	1989      	adds	r1, r1, r6
 8002df8:	1c60      	adds	r0, r4, #1
 8002dfa:	f004 fcc1 	bl	8007780 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002dfe:	1ca3      	adds	r3, r4, #2
 8002e00:	2b1b      	cmp	r3, #27
 8002e02:	ddf1      	ble.n	8002de8 <LoadEEportsDir+0x1c>
			result =BOS_ERR_EEPROM;
 8002e04:	250a      	movs	r5, #10
 8002e06:	e7ef      	b.n	8002de8 <LoadEEportsDir+0x1c>
	}
	
	return result;
}
 8002e08:	0028      	movs	r0, r5
 8002e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e0c:	2000001c 	.word	0x2000001c
 8002e10:	20006e40 	.word	0x20006e40

08002e14 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e16:	46de      	mov	lr, fp
 8002e18:	4657      	mov	r7, sl
 8002e1a:	464e      	mov	r6, r9
 8002e1c:	4645      	mov	r5, r8
 8002e1e:	b5e0      	push	{r5, r6, r7, lr}
 8002e20:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e22:	466b      	mov	r3, sp
 8002e24:	2200      	movs	r2, #0
 8002e26:	80da      	strh	r2, [r3, #6]
 8002e28:	241c      	movs	r4, #28
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e2a:	2700      	movs	r7, #0
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <LoadEEalias+0x7c>)
 8002e2e:	469a      	mov	sl, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
			moduleAlias[i][j] =(uint8_t )temp;
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002e30:	469b      	mov	fp, r3
 8002e32:	e00c      	b.n	8002e4e <LoadEEalias+0x3a>
 8002e34:	464b      	mov	r3, r9
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	444b      	add	r3, r9
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	445b      	add	r3, fp
 8002e3e:	2200      	movs	r2, #0
 8002e40:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e42:	3701      	adds	r7, #1
 8002e44:	b2ff      	uxtb	r7, r7
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <LoadEEalias+0x80>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	42bb      	cmp	r3, r7
 8002e4c:	d317      	bcc.n	8002e7e <LoadEEalias+0x6a>
 8002e4e:	00bd      	lsls	r5, r7, #2
 8002e50:	19ed      	adds	r5, r5, r7
 8002e52:	006d      	lsls	r5, r5, #1
 8002e54:	4455      	add	r5, sl
 8002e56:	1d63      	adds	r3, r4, #5
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e5c:	466b      	mov	r3, sp
 8002e5e:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] =(uint8_t )temp;
 8002e60:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e62:	0031      	movs	r1, r6
 8002e64:	0020      	movs	r0, r4
 8002e66:	f004 fc8b 	bl	8007780 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002e6a:	8833      	ldrh	r3, [r6, #0]
 8002e6c:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	702b      	strb	r3, [r5, #0]
 8002e72:	3401      	adds	r4, #1
 8002e74:	b2a4      	uxth	r4, r4
 8002e76:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002e78:	45a0      	cmp	r8, r4
 8002e7a:	d1f2      	bne.n	8002e62 <LoadEEalias+0x4e>
 8002e7c:	e7da      	b.n	8002e34 <LoadEEalias+0x20>
	}
	
	return result;
}
 8002e7e:	2000      	movs	r0, #0
 8002e80:	b003      	add	sp, #12
 8002e82:	bc3c      	pop	{r2, r3, r4, r5}
 8002e84:	4690      	mov	r8, r2
 8002e86:	4699      	mov	r9, r3
 8002e88:	46a2      	mov	sl, r4
 8002e8a:	46ab      	mov	fp, r5
 8002e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	20000f68 	.word	0x20000f68
 8002e94:	2000001c 	.word	0x2000001c

08002e98 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9a:	46d6      	mov	lr, sl
 8002e9c:	464f      	mov	r7, r9
 8002e9e:	4646      	mov	r6, r8
 8002ea0:	b5c0      	push	{r6, r7, lr}
 8002ea2:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002ea4:	466b      	mov	r3, sp
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <LoadEEgroup+0x9c>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01d      	beq.n	8002eee <LoadEEgroup+0x56>
	uint16_t add =0, temp =0;
 8002eb2:	2500      	movs	r5, #0
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb4:	4e20      	ldr	r6, [pc, #128]	; (8002f38 <LoadEEgroup+0xa0>)
	for(i =0; i < N; i++)			// N modules
 8002eb6:	4c1f      	ldr	r4, [pc, #124]	; (8002f34 <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb8:	b2e9      	uxtb	r1, r5
 8002eba:	0049      	lsls	r1, r1, #1
 8002ebc:	1871      	adds	r1, r6, r1
 8002ebe:	0028      	movs	r0, r5
 8002ec0:	30cb      	adds	r0, #203	; 0xcb
 8002ec2:	b280      	uxth	r0, r0
 8002ec4:	f004 fc5c 	bl	8007780 <EE_ReadVariable>
		add++;
 8002ec8:	3501      	adds	r5, #1
 8002eca:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002ecc:	7822      	ldrb	r2, [r4, #0]
 8002ece:	b2eb      	uxtb	r3, r5
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d8f1      	bhi.n	8002eb8 <LoadEEgroup+0x20>
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <LoadEEgroup+0xa4>)
 8002ed6:	4699      	mov	r9, r3
 8002ed8:	002c      	movs	r4, r5
 8002eda:	3499      	adds	r4, #153	; 0x99
 8002edc:	b2a4      	uxth	r4, r4
 8002ede:	35cb      	adds	r5, #203	; 0xcb
 8002ee0:	b2ab      	uxth	r3, r5
 8002ee2:	4698      	mov	r8, r3
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002ee4:	466b      	mov	r3, sp
 8002ee6:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002ee8:	2300      	movs	r3, #0
 8002eea:	469a      	mov	sl, r3
 8002eec:	e009      	b.n	8002f02 <LoadEEgroup+0x6a>
	uint16_t add =0, temp =0;
 8002eee:	2500      	movs	r5, #0
 8002ef0:	e7f0      	b.n	8002ed4 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002ef2:	464b      	mov	r3, r9
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	725a      	strb	r2, [r3, #9]
 8002ef8:	230a      	movs	r3, #10
 8002efa:	469c      	mov	ip, r3
 8002efc:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002efe:	4544      	cmp	r4, r8
 8002f00:	d010      	beq.n	8002f24 <LoadEEgroup+0x8c>
 8002f02:	1d67      	adds	r7, r4, #5
 8002f04:	b2bf      	uxth	r7, r7
	uint16_t add =0, temp =0;
 8002f06:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002f08:	0031      	movs	r1, r6
 8002f0a:	0020      	movs	r0, r4
 8002f0c:	f004 fc38 	bl	8007780 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002f10:	8833      	ldrh	r3, [r6, #0]
 8002f12:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	702b      	strb	r3, [r5, #0]
 8002f18:	3401      	adds	r4, #1
 8002f1a:	b2a4      	uxth	r4, r4
 8002f1c:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f1e:	42bc      	cmp	r4, r7
 8002f20:	d1f2      	bne.n	8002f08 <LoadEEgroup+0x70>
 8002f22:	e7e6      	b.n	8002ef2 <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8002f24:	2000      	movs	r0, #0
 8002f26:	b002      	add	sp, #8
 8002f28:	bc1c      	pop	{r2, r3, r4}
 8002f2a:	4690      	mov	r8, r2
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	46a2      	mov	sl, r4
 8002f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	2000001c 	.word	0x2000001c
 8002f38:	20000ec0 	.word	0x20000ec0
 8002f3c:	20000e5c 	.word	0x20000e5c

08002f40 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f44:	210e      	movs	r1, #14
 8002f46:	4469      	add	r1, sp
 8002f48:	2300      	movs	r3, #0
 8002f4a:	800b      	strh	r3, [r1, #0]
 8002f4c:	aa03      	add	r2, sp, #12
 8002f4e:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002f50:	20e4      	movs	r0, #228	; 0xe4
 8002f52:	f004 fc15 	bl	8007780 <EE_ReadVariable>
	uint8_t direction =0;
 8002f56:	2600      	movs	r6, #0
	if(!status1){
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d102      	bne.n	8002f62 <LoadEEstreams+0x22>
		direction =(uint8_t )temp1;
 8002f5c:	230e      	movs	r3, #14
 8002f5e:	446b      	add	r3, sp
 8002f60:	781e      	ldrb	r6, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002f62:	210e      	movs	r1, #14
 8002f64:	4469      	add	r1, sp
 8002f66:	20e5      	movs	r0, #229	; 0xe5
 8002f68:	f004 fc0a 	bl	8007780 <EE_ReadVariable>
 8002f6c:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002f6e:	a903      	add	r1, sp, #12
 8002f70:	20e6      	movs	r0, #230	; 0xe6
 8002f72:	f004 fc05 	bl	8007780 <EE_ReadVariable>
	if(!status1 && !status2){
 8002f76:	4304      	orrs	r4, r0
 8002f78:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 8002f7a:	2500      	movs	r5, #0
	if(!status1 && !status2){
 8002f7c:	2c00      	cmp	r4, #0
 8002f7e:	d106      	bne.n	8002f8e <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002f80:	230e      	movs	r3, #14
 8002f82:	446b      	add	r3, sp
 8002f84:	881d      	ldrh	r5, [r3, #0]
 8002f86:	042d      	lsls	r5, r5, #16
 8002f88:	ab03      	add	r3, sp, #12
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002f8e:	210e      	movs	r1, #14
 8002f90:	4469      	add	r1, sp
 8002f92:	20e7      	movs	r0, #231	; 0xe7
 8002f94:	f004 fbf4 	bl	8007780 <EE_ReadVariable>
 8002f98:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002f9a:	a903      	add	r1, sp, #12
 8002f9c:	20e8      	movs	r0, #232	; 0xe8
 8002f9e:	f004 fbef 	bl	8007780 <EE_ReadVariable>
	if(!status1 && !status2){
 8002fa2:	4320      	orrs	r0, r4
 8002fa4:	b280      	uxth	r0, r0
	uint32_t count =0, timeout =0;
 8002fa6:	2400      	movs	r4, #0
	if(!status1 && !status2){
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d106      	bne.n	8002fba <LoadEEstreams+0x7a>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8002fac:	230e      	movs	r3, #14
 8002fae:	446b      	add	r3, sp
 8002fb0:	881c      	ldrh	r4, [r3, #0]
 8002fb2:	0424      	lsls	r4, r4, #16
 8002fb4:	ab03      	add	r3, sp, #12
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8002fba:	210e      	movs	r1, #14
 8002fbc:	4469      	add	r1, sp
 8002fbe:	20e9      	movs	r0, #233	; 0xe9
 8002fc0:	f004 fbde 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d107      	bne.n	8002fd8 <LoadEEstreams+0x98>
		src1 =(uint8_t )(temp1 >> 8);
 8002fc8:	230e      	movs	r3, #14
 8002fca:	446b      	add	r3, sp
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	0a19      	lsrs	r1, r3, #8
 8002fd0:	4a28      	ldr	r2, [pc, #160]	; (8003074 <LoadEEstreams+0x134>)
 8002fd2:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t )temp1;
 8002fd4:	4a28      	ldr	r2, [pc, #160]	; (8003078 <LoadEEstreams+0x138>)
 8002fd6:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8002fd8:	210e      	movs	r1, #14
 8002fda:	4469      	add	r1, sp
 8002fdc:	20ea      	movs	r0, #234	; 0xea
 8002fde:	f004 fbcf 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d107      	bne.n	8002ff6 <LoadEEstreams+0xb6>
		src2 =(uint8_t )(temp1 >> 8);
 8002fe6:	230e      	movs	r3, #14
 8002fe8:	446b      	add	r3, sp
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	0a19      	lsrs	r1, r3, #8
 8002fee:	4a23      	ldr	r2, [pc, #140]	; (800307c <LoadEEstreams+0x13c>)
 8002ff0:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t )temp1;
 8002ff2:	4a23      	ldr	r2, [pc, #140]	; (8003080 <LoadEEstreams+0x140>)
 8002ff4:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8002ff6:	210e      	movs	r1, #14
 8002ff8:	4469      	add	r1, sp
 8002ffa:	20eb      	movs	r0, #235	; 0xeb
 8002ffc:	f004 fbc0 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 8003000:	2800      	cmp	r0, #0
 8003002:	d107      	bne.n	8003014 <LoadEEstreams+0xd4>
		src3 =(uint8_t )(temp1 >> 8);
 8003004:	230e      	movs	r3, #14
 8003006:	446b      	add	r3, sp
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	0a19      	lsrs	r1, r3, #8
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <LoadEEstreams+0x144>)
 800300e:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t )temp1;
 8003010:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <LoadEEstreams+0x148>)
 8003012:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003014:	4b17      	ldr	r3, [pc, #92]	; (8003074 <LoadEEstreams+0x134>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <LoadEEstreams+0xe4>
 800301c:	4a16      	ldr	r2, [pc, #88]	; (8003078 <LoadEEstreams+0x138>)
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	2a00      	cmp	r2, #0
 8003022:	d112      	bne.n	800304a <LoadEEstreams+0x10a>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8003024:	4b15      	ldr	r3, [pc, #84]	; (800307c <LoadEEstreams+0x13c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <LoadEEstreams+0xf4>
 800302c:	4a14      	ldr	r2, [pc, #80]	; (8003080 <LoadEEstreams+0x140>)
 800302e:	7812      	ldrb	r2, [r2, #0]
 8003030:	2a00      	cmp	r2, #0
 8003032:	d111      	bne.n	8003058 <LoadEEstreams+0x118>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <LoadEEstreams+0x144>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <LoadEEstreams+0x104>
 800303c:	4a12      	ldr	r2, [pc, #72]	; (8003088 <LoadEEstreams+0x148>)
 800303e:	7812      	ldrb	r2, [r2, #0]
 8003040:	2a00      	cmp	r2, #0
 8003042:	d110      	bne.n	8003066 <LoadEEstreams+0x126>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003044:	2000      	movs	r0, #0
 8003046:	b004      	add	sp, #16
 8003048:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 800304a:	9200      	str	r2, [sp, #0]
 800304c:	0022      	movs	r2, r4
 800304e:	0029      	movs	r1, r5
 8003050:	0030      	movs	r0, r6
 8003052:	f005 ffed 	bl	8009030 <SetupDMAStreams>
 8003056:	e7e5      	b.n	8003024 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8003058:	9200      	str	r2, [sp, #0]
 800305a:	0022      	movs	r2, r4
 800305c:	0029      	movs	r1, r5
 800305e:	0030      	movs	r0, r6
 8003060:	f005 ffe6 	bl	8009030 <SetupDMAStreams>
 8003064:	e7e6      	b.n	8003034 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003066:	9200      	str	r2, [sp, #0]
 8003068:	0022      	movs	r2, r4
 800306a:	0029      	movs	r1, r5
 800306c:	0030      	movs	r0, r6
 800306e:	f005 ffdf 	bl	8009030 <SetupDMAStreams>
 8003072:	e7e7      	b.n	8003044 <LoadEEstreams+0x104>
 8003074:	2000114a 	.word	0x2000114a
 8003078:	20000e59 	.word	0x20000e59
 800307c:	2000114b 	.word	0x2000114b
 8003080:	20000e5a 	.word	0x20000e5a
 8003084:	2000114c 	.word	0x2000114c
 8003088:	20000e5b 	.word	0x20000e5b

0800308c <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 800308c:	b510      	push	{r4, lr}
 800308e:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003090:	208a      	movs	r0, #138	; 0x8a
 8003092:	466b      	mov	r3, sp
 8003094:	1d99      	adds	r1, r3, #6
 8003096:	0040      	lsls	r0, r0, #1
 8003098:	f004 fb72 	bl	8007780 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800309c:	2800      	cmp	r0, #0
 800309e:	d000      	beq.n	80030a2 <LoadEEparams+0x16>
 80030a0:	e064      	b.n	800316c <LoadEEparams+0xe0>
		BOS.response =(uint8_t )temp1;
 80030a2:	466b      	mov	r3, sp
 80030a4:	3306      	adds	r3, #6
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	4a49      	ldr	r2, [pc, #292]	; (80031d0 <LoadEEparams+0x144>)
 80030aa:	7193      	strb	r3, [r2, #6]
		BOS.trace =(traceOptions_t )(temp1 >> 8);
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	71d3      	strb	r3, [r2, #7]
		BOS.response =BOS_default.response;
		BOS.trace =BOS_default.trace;
	}
	
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030b0:	2016      	movs	r0, #22
 80030b2:	466b      	mov	r3, sp
 80030b4:	1d99      	adds	r1, r3, #6
 80030b6:	30ff      	adds	r0, #255	; 0xff
 80030b8:	f004 fb62 	bl	8007780 <EE_ReadVariable>
	if(!status1)
 80030bc:	2800      	cmp	r0, #0
 80030be:	d15c      	bne.n	800317a <LoadEEparams+0xee>
		BOS.buttons.debounce =temp1;
 80030c0:	466b      	mov	r3, sp
 80030c2:	88da      	ldrh	r2, [r3, #6]
 80030c4:	4b42      	ldr	r3, [pc, #264]	; (80031d0 <LoadEEparams+0x144>)
 80030c6:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80030c8:	208b      	movs	r0, #139	; 0x8b
 80030ca:	466b      	mov	r3, sp
 80030cc:	1d99      	adds	r1, r3, #6
 80030ce:	0040      	lsls	r0, r0, #1
 80030d0:	f004 fb56 	bl	8007780 <EE_ReadVariable>
	if(!status1)
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d155      	bne.n	8003184 <LoadEEparams+0xf8>
		BOS.buttons.singleClickTime =temp1;
 80030d8:	466b      	mov	r3, sp
 80030da:	88da      	ldrh	r2, [r3, #6]
 80030dc:	4b3c      	ldr	r3, [pc, #240]	; (80031d0 <LoadEEparams+0x144>)
 80030de:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80030e0:	2018      	movs	r0, #24
 80030e2:	466b      	mov	r3, sp
 80030e4:	1d99      	adds	r1, r3, #6
 80030e6:	30ff      	adds	r0, #255	; 0xff
 80030e8:	f004 fb4a 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 80030ec:	2800      	cmp	r0, #0
 80030ee:	d14e      	bne.n	800318e <LoadEEparams+0x102>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 80030f0:	466b      	mov	r3, sp
 80030f2:	3306      	adds	r3, #6
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	4a36      	ldr	r2, [pc, #216]	; (80031d0 <LoadEEparams+0x144>)
 80030f8:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 80030fa:	0a1b      	lsrs	r3, r3, #8
 80030fc:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80030fe:	208c      	movs	r0, #140	; 0x8c
 8003100:	466b      	mov	r3, sp
 8003102:	1d99      	adds	r1, r3, #6
 8003104:	0040      	lsls	r0, r0, #1
 8003106:	f004 fb3b 	bl	8007780 <EE_ReadVariable>
 800310a:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 800310c:	201a      	movs	r0, #26
 800310e:	a901      	add	r1, sp, #4
 8003110:	30ff      	adds	r0, #255	; 0xff
 8003112:	f004 fb35 	bl	8007780 <EE_ReadVariable>
	if(!status1 && !status2){
 8003116:	4304      	orrs	r4, r0
 8003118:	b2a4      	uxth	r4, r4
 800311a:	2c00      	cmp	r4, #0
 800311c:	d13e      	bne.n	800319c <LoadEEparams+0x110>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 800311e:	ab01      	add	r3, sp, #4
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	466a      	mov	r2, sp
 8003126:	3206      	adds	r2, #6
 8003128:	8812      	ldrh	r2, [r2, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	4a28      	ldr	r2, [pc, #160]	; (80031d0 <LoadEEparams+0x144>)
 800312e:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003130:	208d      	movs	r0, #141	; 0x8d
 8003132:	466b      	mov	r3, sp
 8003134:	1d99      	adds	r1, r3, #6
 8003136:	0040      	lsls	r0, r0, #1
 8003138:	f004 fb22 	bl	8007780 <EE_ReadVariable>
	if(!status1){
 800313c:	2800      	cmp	r0, #0
 800313e:	d13b      	bne.n	80031b8 <LoadEEparams+0x12c>
		BOS.daylightsaving =(int8_t )temp1;
 8003140:	466b      	mov	r3, sp
 8003142:	3306      	adds	r3, #6
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	4a22      	ldr	r2, [pc, #136]	; (80031d0 <LoadEEparams+0x144>)
 8003148:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800314e:	201c      	movs	r0, #28
 8003150:	466b      	mov	r3, sp
 8003152:	1d99      	adds	r1, r3, #6
 8003154:	30ff      	adds	r0, #255	; 0xff
 8003156:	f004 fb13 	bl	8007780 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800315a:	2800      	cmp	r0, #0
 800315c:	d032      	beq.n	80031c4 <LoadEEparams+0x138>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 800315e:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <LoadEEparams+0x148>)
 8003160:	7eda      	ldrb	r2, [r3, #27]
 8003162:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <LoadEEparams+0x144>)
 8003164:	76da      	strb	r2, [r3, #27]
	}
	
	return result;
}
 8003166:	2000      	movs	r0, #0
 8003168:	b002      	add	sp, #8
 800316a:	bd10      	pop	{r4, pc}
		BOS.response =BOS_default.response;
 800316c:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <LoadEEparams+0x144>)
 800316e:	4a19      	ldr	r2, [pc, #100]	; (80031d4 <LoadEEparams+0x148>)
 8003170:	7991      	ldrb	r1, [r2, #6]
 8003172:	7199      	strb	r1, [r3, #6]
		BOS.trace =BOS_default.trace;
 8003174:	79d2      	ldrb	r2, [r2, #7]
 8003176:	71da      	strb	r2, [r3, #7]
 8003178:	e79a      	b.n	80030b0 <LoadEEparams+0x24>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800317a:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <LoadEEparams+0x148>)
 800317c:	881a      	ldrh	r2, [r3, #0]
 800317e:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <LoadEEparams+0x144>)
 8003180:	801a      	strh	r2, [r3, #0]
 8003182:	e7a1      	b.n	80030c8 <LoadEEparams+0x3c>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <LoadEEparams+0x148>)
 8003186:	885a      	ldrh	r2, [r3, #2]
 8003188:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <LoadEEparams+0x144>)
 800318a:	805a      	strh	r2, [r3, #2]
 800318c:	e7a8      	b.n	80030e0 <LoadEEparams+0x54>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 800318e:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <LoadEEparams+0x144>)
 8003190:	4a10      	ldr	r2, [pc, #64]	; (80031d4 <LoadEEparams+0x148>)
 8003192:	7911      	ldrb	r1, [r2, #4]
 8003194:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 8003196:	7952      	ldrb	r2, [r2, #5]
 8003198:	715a      	strb	r2, [r3, #5]
 800319a:	e7b0      	b.n	80030fe <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 800319c:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <LoadEEparams+0x14c>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d004      	beq.n	80031ae <LoadEEparams+0x122>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80031a4:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <LoadEEparams+0x144>)
 80031a6:	22e1      	movs	r2, #225	; 0xe1
 80031a8:	0252      	lsls	r2, r2, #9
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	e7c0      	b.n	8003130 <LoadEEparams+0xa4>
		BOS.clibaudrate =BOS_default.clibaudrate;
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <LoadEEparams+0x148>)
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <LoadEEparams+0x144>)
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	e7bb      	b.n	8003130 <LoadEEparams+0xa4>
		BOS.hourformat =24;
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <LoadEEparams+0x144>)
 80031ba:	2218      	movs	r2, #24
 80031bc:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 80031be:	2200      	movs	r2, #0
 80031c0:	731a      	strb	r2, [r3, #12]
 80031c2:	e7c4      	b.n	800314e <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t )temp1;
 80031c4:	466b      	mov	r3, sp
 80031c6:	88da      	ldrh	r2, [r3, #6]
 80031c8:	4b01      	ldr	r3, [pc, #4]	; (80031d0 <LoadEEparams+0x144>)
 80031ca:	76da      	strb	r2, [r3, #27]
 80031cc:	e7cb      	b.n	8003166 <LoadEEparams+0xda>
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	200069c4 	.word	0x200069c4
 80031d4:	20000000 	.word	0x20000000
 80031d8:	20000a76 	.word	0x20000a76

080031dc <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 80031dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031de:	46ce      	mov	lr, r9
 80031e0:	4647      	mov	r7, r8
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 80031e6:	231e      	movs	r3, #30
 80031e8:	446b      	add	r3, sp
 80031ea:	2200      	movs	r2, #0
 80031ec:	801a      	strh	r2, [r3, #0]
 80031ee:	2501      	movs	r5, #1
 80031f0:	24ec      	movs	r4, #236	; 0xec
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 80031f2:	001e      	movs	r6, r3
 80031f4:	230f      	movs	r3, #15
 80031f6:	4698      	mov	r8, r3
 80031f8:	e004      	b.n	8003204 <LoadEEbuttons+0x28>
 80031fa:	3404      	adds	r4, #4
 80031fc:	b2a4      	uxth	r4, r4
 80031fe:	3501      	adds	r5, #1
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003200:	2d08      	cmp	r5, #8
 8003202:	d058      	beq.n	80032b6 <LoadEEbuttons+0xda>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003204:	0031      	movs	r1, r6
 8003206:	0020      	movs	r0, r4
 8003208:	f004 faba 	bl	8007780 <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 800320c:	2800      	cmp	r0, #0
 800320e:	d1f4      	bne.n	80031fa <LoadEEbuttons+0x1e>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 8003210:	8831      	ldrh	r1, [r6, #0]
 8003212:	0a0b      	lsrs	r3, r1, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 8003214:	091a      	lsrs	r2, r3, #4
 8003216:	42aa      	cmp	r2, r5
 8003218:	d1ef      	bne.n	80031fa <LoadEEbuttons+0x1e>
 800321a:	4640      	mov	r0, r8
 800321c:	4003      	ands	r3, r0
 800321e:	d0ec      	beq.n	80031fa <LoadEEbuttons+0x1e>
			{
				button[i + 1].type =temp8 & 0x0F;
 8003220:	00d0      	lsls	r0, r2, #3
 8003222:	1882      	adds	r2, r0, r2
 8003224:	4827      	ldr	r0, [pc, #156]	; (80032c4 <LoadEEbuttons+0xe8>)
 8003226:	4681      	mov	r9, r0
 8003228:	4491      	add	r9, r2
 800322a:	464a      	mov	r2, r9
 800322c:	7053      	strb	r3, [r2, #1]
				button[i + 1].events =(uint8_t )temp16;
 800322e:	7211      	strb	r1, [r2, #8]
 8003230:	00af      	lsls	r7, r5, #2
 8003232:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003234:	0038      	movs	r0, r7
 8003236:	30e9      	adds	r0, #233	; 0xe9
 8003238:	b280      	uxth	r0, r0
 800323a:	0031      	movs	r1, r6
 800323c:	f004 faa0 	bl	8007780 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 8003240:	8833      	ldrh	r3, [r6, #0]
 8003242:	0a1a      	lsrs	r2, r3, #8
 8003244:	4649      	mov	r1, r9
 8003246:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003248:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 800324a:	0038      	movs	r0, r7
 800324c:	30ea      	adds	r0, #234	; 0xea
 800324e:	b280      	uxth	r0, r0
 8003250:	0031      	movs	r1, r6
 8003252:	f004 fa95 	bl	8007780 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003256:	8833      	ldrh	r3, [r6, #0]
 8003258:	0a1a      	lsrs	r2, r3, #8
 800325a:	4649      	mov	r1, r9
 800325c:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 800325e:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003260:	37eb      	adds	r7, #235	; 0xeb
 8003262:	b2b8      	uxth	r0, r7
 8003264:	0031      	movs	r1, r6
 8003266:	f004 fa8b 	bl	8007780 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 800326a:	8833      	ldrh	r3, [r6, #0]
 800326c:	0a1a      	lsrs	r2, r3, #8
 800326e:	4649      	mov	r1, r9
 8003270:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 8003272:	71cb      	strb	r3, [r1, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 8003274:	b2ef      	uxtb	r7, r5
 8003276:	7848      	ldrb	r0, [r1, #1]
 8003278:	0039      	movs	r1, r7
 800327a:	f004 ff97 	bl	80081ac <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 800327e:	464b      	mov	r3, r9
 8003280:	7a19      	ldrb	r1, [r3, #8]
 8003282:	789b      	ldrb	r3, [r3, #2]
 8003284:	104a      	asrs	r2, r1, #1
 8003286:	2001      	movs	r0, #1
 8003288:	4002      	ands	r2, r0
 800328a:	4001      	ands	r1, r0
 800328c:	2000      	movs	r0, #0
 800328e:	9005      	str	r0, [sp, #20]
 8003290:	4648      	mov	r0, r9
 8003292:	79c0      	ldrb	r0, [r0, #7]
 8003294:	9004      	str	r0, [sp, #16]
 8003296:	4648      	mov	r0, r9
 8003298:	7980      	ldrb	r0, [r0, #6]
 800329a:	9003      	str	r0, [sp, #12]
 800329c:	4648      	mov	r0, r9
 800329e:	7940      	ldrb	r0, [r0, #5]
 80032a0:	9002      	str	r0, [sp, #8]
 80032a2:	4648      	mov	r0, r9
 80032a4:	7900      	ldrb	r0, [r0, #4]
 80032a6:	9001      	str	r0, [sp, #4]
 80032a8:	4648      	mov	r0, r9
 80032aa:	78c0      	ldrb	r0, [r0, #3]
 80032ac:	9000      	str	r0, [sp, #0]
 80032ae:	0038      	movs	r0, r7
 80032b0:	f005 f896 	bl	80083e0 <SetButtonEvents>
 80032b4:	e7a1      	b.n	80031fa <LoadEEbuttons+0x1e>
			}
		}
	}
	
	return result;
}
 80032b6:	2000      	movs	r0, #0
 80032b8:	b009      	add	sp, #36	; 0x24
 80032ba:	bc0c      	pop	{r2, r3}
 80032bc:	4690      	mov	r8, r2
 80032be:	4699      	mov	r9, r3
 80032c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	2000151c 	.word	0x2000151c

080032c8 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 80032c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ca:	46de      	mov	lr, fp
 80032cc:	4657      	mov	r7, sl
 80032ce:	464e      	mov	r6, r9
 80032d0:	b5c0      	push	{r6, r7, lr}
 80032d2:	b082      	sub	sp, #8
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 80032d4:	2032      	movs	r0, #50	; 0x32
 80032d6:	f00f fc15 	bl	8012b04 <malloc>
 80032da:	1e07      	subs	r7, r0, #0
	if(snipBuffer == NULL)
 80032dc:	d100      	bne.n	80032e0 <LoadROsnippets+0x18>
 80032de:	e071      	b.n	80033c4 <LoadROsnippets+0xfc>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 80032e0:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <LoadROsnippets+0x100>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
		return BOS_ERROR;
 80032e4:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 80032e6:	2bfe      	cmp	r3, #254	; 0xfe
 80032e8:	d166      	bne.n	80033b8 <LoadROsnippets+0xf0>
 80032ea:	4e38      	ldr	r6, [pc, #224]	; (80033cc <LoadROsnippets+0x104>)
 80032ec:	3b9a      	subs	r3, #154	; 0x9a
 80032ee:	469b      	mov	fp, r3
 80032f0:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 80032f2:	4d35      	ldr	r5, [pc, #212]	; (80033c8 <LoadROsnippets+0x100>)
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 80032f4:	1c7b      	adds	r3, r7, #1
 80032f6:	9301      	str	r3, [sp, #4]
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 80032f8:	4b35      	ldr	r3, [pc, #212]	; (80033d0 <LoadROsnippets+0x108>)
 80032fa:	4699      	mov	r9, r3
 80032fc:	e023      	b.n	8003346 <LoadROsnippets+0x7e>
		i =0;
 80032fe:	2400      	movs	r4, #0
		if(snipBuffer[i - 1] != 0)
 8003300:	193b      	adds	r3, r7, r4
 8003302:	3b01      	subs	r3, #1
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <LoadROsnippets+0x46>
			++i;	// String termination char was not recorded, then add one
 800330a:	3401      	adds	r4, #1
 800330c:	b2e4      	uxtb	r4, r4
		snippets[s].cmd =(char* )malloc(i);
 800330e:	0020      	movs	r0, r4
 8003310:	f00f fbf8 	bl	8012b04 <malloc>
 8003314:	4653      	mov	r3, sl
 8003316:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 8003318:	2800      	cmp	r0, #0
 800331a:	d03f      	beq.n	800339c <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd,snipBuffer,i);
 800331c:	0022      	movs	r2, r4
 800331e:	0039      	movs	r1, r7
 8003320:	f00f fe3d 	bl	8012f9e <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003324:	464b      	mov	r3, r9
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	464a      	mov	r2, r9
 800332c:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 800332e:	0022      	movs	r2, r4
 8003330:	2100      	movs	r1, #0
 8003332:	0038      	movs	r0, r7
 8003334:	f00f fe3c 	bl	8012fb0 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 8003338:	9b00      	ldr	r3, [sp, #0]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2bfe      	cmp	r3, #254	; 0xfe
 800333e:	d137      	bne.n	80033b0 <LoadROsnippets+0xe8>
 8003340:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003342:	455e      	cmp	r6, fp
 8003344:	d034      	beq.n	80033b0 <LoadROsnippets+0xe8>
 8003346:	0028      	movs	r0, r5
 8003348:	3014      	adds	r0, #20
BOS_Status LoadROsnippets(void){
 800334a:	002b      	movs	r3, r5
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 800334c:	1b79      	subs	r1, r7, r5
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	54ca      	strb	r2, [r1, r3]
 8003352:	3301      	adds	r3, #1
		for(i =0; i < sizeof(snippet_t); i++)
 8003354:	4283      	cmp	r3, r0
 8003356:	d1fa      	bne.n	800334e <LoadROsnippets+0x86>
 8003358:	3514      	adds	r5, #20
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 800335a:	46b2      	mov	sl, r6
 800335c:	2214      	movs	r2, #20
 800335e:	9901      	ldr	r1, [sp, #4]
 8003360:	0030      	movs	r0, r6
 8003362:	f00f fe1c 	bl	8012f9e <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8003366:	2214      	movs	r2, #20
 8003368:	2100      	movs	r1, #0
 800336a:	0038      	movs	r0, r7
 800336c:	f00f fe20 	bl	8012fb0 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003370:	9500      	str	r5, [sp, #0]
 8003372:	782a      	ldrb	r2, [r5, #0]
 8003374:	1c93      	adds	r3, r2, #2
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d9c0      	bls.n	80032fe <LoadROsnippets+0x36>
 800337c:	0039      	movs	r1, r7
		i =0;
 800337e:	2400      	movs	r4, #0
			snipBuffer[i] =*(uint8_t* )currentAdd;
 8003380:	700a      	strb	r2, [r1, #0]
			++currentAdd;
 8003382:	3501      	adds	r5, #1
			++i;
 8003384:	3401      	adds	r4, #1
 8003386:	b2e4      	uxtb	r4, r4
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003388:	9500      	str	r5, [sp, #0]
 800338a:	782a      	ldrb	r2, [r5, #0]
 800338c:	1c93      	adds	r3, r2, #2
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d9b5      	bls.n	8003300 <LoadROsnippets+0x38>
 8003394:	3101      	adds	r1, #1
 8003396:	2c32      	cmp	r4, #50	; 0x32
 8003398:	d1f2      	bne.n	8003380 <LoadROsnippets+0xb8>
 800339a:	e7b1      	b.n	8003300 <LoadROsnippets+0x38>
			memset(&snippets[s],0,sizeof(snippet_t));
 800339c:	2214      	movs	r2, #20
 800339e:	2100      	movs	r1, #0
 80033a0:	4650      	mov	r0, sl
 80033a2:	f00f fe05 	bl	8012fb0 <memset>
			free(snipBuffer);
 80033a6:	0038      	movs	r0, r7
 80033a8:	f00f fbb6 	bl	8012b18 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80033ac:	200e      	movs	r0, #14
 80033ae:	e003      	b.n	80033b8 <LoadROsnippets+0xf0>
			break;
	}
	
	free(snipBuffer);
 80033b0:	0038      	movs	r0, r7
 80033b2:	f00f fbb1 	bl	8012b18 <free>
	return BOS_OK;
 80033b6:	2000      	movs	r0, #0
}
 80033b8:	b002      	add	sp, #8
 80033ba:	bc1c      	pop	{r2, r3, r4}
 80033bc:	4691      	mov	r9, r2
 80033be:	469a      	mov	sl, r3
 80033c0:	46a3      	mov	fp, r4
 80033c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 80033c4:	20fb      	movs	r0, #251	; 0xfb
 80033c6:	e7f7      	b.n	80033b8 <LoadROsnippets+0xf0>
 80033c8:	0801dc00 	.word	0x0801dc00
 80033cc:	200069e0 	.word	0x200069e0
 80033d0:	2000121f 	.word	0x2000121f

080033d4 <LoadEEvars>:
void LoadEEvars(void){
 80033d4:	b510      	push	{r4, lr}
	LoadROtopology();
 80033d6:	f7ff fca5 	bl	8002d24 <LoadROtopology>
	LoadEEportsDir();
 80033da:	f7ff fcf7 	bl	8002dcc <LoadEEportsDir>
	LoadEEalias();
 80033de:	f7ff fd19 	bl	8002e14 <LoadEEalias>
	LoadEEgroup();
 80033e2:	f7ff fd59 	bl	8002e98 <LoadEEgroup>
	LoadEEstreams();
 80033e6:	f7ff fdab 	bl	8002f40 <LoadEEstreams>
	LoadEEparams();
 80033ea:	f7ff fe4f 	bl	800308c <LoadEEparams>
	LoadEEbuttons();
 80033ee:	f7ff fef5 	bl	80031dc <LoadEEbuttons>
	LoadROsnippets();
 80033f2:	f7ff ff69 	bl	80032c8 <LoadROsnippets>
}
 80033f6:	bd10      	pop	{r4, pc}

080033f8 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 80033f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fa:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <SaveEEportsDir+0x4c>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01a      	beq.n	800343a <SaveEEportsDir+0x42>
 8003404:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 800340a:	4e0f      	ldr	r6, [pc, #60]	; (8003448 <SaveEEportsDir+0x50>)
	for(uint8_t i =1; i <= N; i++){
 800340c:	4f0d      	ldr	r7, [pc, #52]	; (8003444 <SaveEEportsDir+0x4c>)
 800340e:	e008      	b.n	8003422 <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003410:	1c60      	adds	r0, r4, #1
 8003412:	f004 f9e5 	bl	80077e0 <EE_WriteVariable>
 8003416:	e00a      	b.n	800342e <SaveEEportsDir+0x36>
	for(uint8_t i =1; i <= N; i++){
 8003418:	3401      	adds	r4, #1
 800341a:	b2e4      	uxtb	r4, r4
 800341c:	783b      	ldrb	r3, [r7, #0]
 800341e:	42a3      	cmp	r3, r4
 8003420:	d30d      	bcc.n	800343e <SaveEEportsDir+0x46>
		if(arrayPortsDir[i - 1])
 8003422:	0025      	movs	r5, r4
 8003424:	1e63      	subs	r3, r4, #1
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	5b99      	ldrh	r1, [r3, r6]
 800342a:	2900      	cmp	r1, #0
 800342c:	d1f0      	bne.n	8003410 <SaveEEportsDir+0x18>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800342e:	3502      	adds	r5, #2
 8003430:	2d1b      	cmp	r5, #27
 8003432:	ddf1      	ble.n	8003418 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 8003434:	230a      	movs	r3, #10
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	e7ee      	b.n	8003418 <SaveEEportsDir+0x20>
	BOS_Status result =BOS_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 800343e:	9801      	ldr	r0, [sp, #4]
 8003440:	b003      	add	sp, #12
 8003442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003444:	2000001c 	.word	0x2000001c
 8003448:	20006e40 	.word	0x20006e40

0800344c <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 800344c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344e:	46d6      	mov	lr, sl
 8003450:	464f      	mov	r7, r9
 8003452:	4646      	mov	r6, r8
 8003454:	b5c0      	push	{r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003456:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 8003458:	2300      	movs	r3, #0
 800345a:	4698      	mov	r8, r3
	    {
		if(moduleAlias[i][0]){
 800345c:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <SaveEEalias+0x7c>)
 800345e:	469a      	mov	sl, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003460:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <SaveEEalias+0x80>)
 8003462:	4699      	mov	r9, r3
 8003464:	e005      	b.n	8003472 <SaveEEalias+0x26>
 8003466:	3601      	adds	r6, #1
 8003468:	b2f6      	uxtb	r6, r6
 800346a:	464b      	mov	r3, r9
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	42b3      	cmp	r3, r6
 8003470:	d324      	bcc.n	80034bc <SaveEEalias+0x70>
		if(moduleAlias[i][0]){
 8003472:	00b3      	lsls	r3, r6, #2
 8003474:	199b      	adds	r3, r3, r6
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4652      	mov	r2, sl
 800347a:	5c9b      	ldrb	r3, [r3, r2]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f2      	beq.n	8003466 <SaveEEalias+0x1a>
 8003480:	00b5      	lsls	r5, r6, #2
 8003482:	19ad      	adds	r5, r5, r6
 8003484:	006d      	lsls	r5, r5, #1
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <SaveEEalias+0x7c>)
 8003488:	469c      	mov	ip, r3
 800348a:	4465      	add	r5, ip
 800348c:	4644      	mov	r4, r8
 800348e:	341c      	adds	r4, #28
 8003490:	b2a4      	uxth	r4, r4
 8003492:	4647      	mov	r7, r8
 8003494:	3721      	adds	r7, #33	; 0x21
 8003496:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 8003498:	782b      	ldrb	r3, [r5, #0]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	7869      	ldrb	r1, [r5, #1]
 800349e:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80034a0:	b289      	uxth	r1, r1
 80034a2:	0020      	movs	r0, r4
 80034a4:	f004 f99c 	bl	80077e0 <EE_WriteVariable>
 80034a8:	3502      	adds	r5, #2
 80034aa:	3401      	adds	r4, #1
 80034ac:	b2a4      	uxth	r4, r4
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034ae:	42bc      	cmp	r4, r7
 80034b0:	d1f2      	bne.n	8003498 <SaveEEalias+0x4c>
 80034b2:	4643      	mov	r3, r8
 80034b4:	3305      	adds	r3, #5
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	4698      	mov	r8, r3
 80034ba:	e7d4      	b.n	8003466 <SaveEEalias+0x1a>
			}
		}
	}
	
	return result;
}
 80034bc:	2000      	movs	r0, #0
 80034be:	bc1c      	pop	{r2, r3, r4}
 80034c0:	4690      	mov	r8, r2
 80034c2:	4699      	mov	r9, r3
 80034c4:	46a2      	mov	sl, r4
 80034c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034c8:	20000f68 	.word	0x20000f68
 80034cc:	2000001c 	.word	0x2000001c

080034d0 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 80034d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d2:	46de      	mov	lr, fp
 80034d4:	4657      	mov	r7, sl
 80034d6:	464e      	mov	r6, r9
 80034d8:	4645      	mov	r5, r8
 80034da:	b5e0      	push	{r5, r6, r7, lr}
 80034dc:	000f      	movs	r7, r1
 80034de:	0016      	movs	r6, r2
 80034e0:	4699      	mov	r9, r3
 80034e2:	ab0a      	add	r3, sp, #40	; 0x28
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	469b      	mov	fp, r3
 80034e8:	ab0b      	add	r3, sp, #44	; 0x2c
 80034ea:	781d      	ldrb	r5, [r3, #0]
 80034ec:	ab0c      	add	r3, sp, #48	; 0x30
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	469a      	mov	sl, r3
 80034f2:	ab0d      	add	r3, sp, #52	; 0x34
 80034f4:	781c      	ldrb	r4, [r3, #0]
 80034f6:	ab0e      	add	r3, sp, #56	; 0x38
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 80034fc:	b281      	uxth	r1, r0
 80034fe:	20e4      	movs	r0, #228	; 0xe4
 8003500:	f004 f96e 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003504:	0a39      	lsrs	r1, r7, #8
 8003506:	b289      	uxth	r1, r1
 8003508:	20e5      	movs	r0, #229	; 0xe5
 800350a:	f004 f969 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 800350e:	b2b9      	uxth	r1, r7
 8003510:	20e6      	movs	r0, #230	; 0xe6
 8003512:	f004 f965 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003516:	0a31      	lsrs	r1, r6, #8
 8003518:	b289      	uxth	r1, r1
 800351a:	20e7      	movs	r0, #231	; 0xe7
 800351c:	f004 f960 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003520:	b2b1      	uxth	r1, r6
 8003522:	20e8      	movs	r0, #232	; 0xe8
 8003524:	f004 f95c 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003528:	464b      	mov	r3, r9
 800352a:	0219      	lsls	r1, r3, #8
 800352c:	4459      	add	r1, fp
 800352e:	b289      	uxth	r1, r1
 8003530:	20e9      	movs	r0, #233	; 0xe9
 8003532:	f004 f955 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003536:	022d      	lsls	r5, r5, #8
 8003538:	4455      	add	r5, sl
 800353a:	b2a9      	uxth	r1, r5
 800353c:	20ea      	movs	r0, #234	; 0xea
 800353e:	f004 f94f 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 8003542:	0224      	lsls	r4, r4, #8
 8003544:	4444      	add	r4, r8
 8003546:	b2a1      	uxth	r1, r4
 8003548:	20eb      	movs	r0, #235	; 0xeb
 800354a:	f004 f949 	bl	80077e0 <EE_WriteVariable>
	
	return result;
}
 800354e:	2000      	movs	r0, #0
 8003550:	bc3c      	pop	{r2, r3, r4, r5}
 8003552:	4690      	mov	r8, r2
 8003554:	4699      	mov	r9, r3
 8003556:	46a2      	mov	sl, r4
 8003558:	46ab      	mov	fp, r5
 800355a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800355c <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 800355c:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 5) | (uint16_t )BOS.response);
 800355e:	4c1a      	ldr	r4, [pc, #104]	; (80035c8 <SaveEEparams+0x6c>)
 8003560:	79e3      	ldrb	r3, [r4, #7]
 8003562:	015b      	lsls	r3, r3, #5
 8003564:	79a1      	ldrb	r1, [r4, #6]
 8003566:	4319      	orrs	r1, r3
 8003568:	208a      	movs	r0, #138	; 0x8a
 800356a:	0040      	lsls	r0, r0, #1
 800356c:	f004 f938 	bl	80077e0 <EE_WriteVariable>
	
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003570:	8821      	ldrh	r1, [r4, #0]
 8003572:	2016      	movs	r0, #22
 8003574:	30ff      	adds	r0, #255	; 0xff
 8003576:	f004 f933 	bl	80077e0 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 800357a:	8861      	ldrh	r1, [r4, #2]
 800357c:	208b      	movs	r0, #139	; 0x8b
 800357e:	0040      	lsls	r0, r0, #1
 8003580:	f004 f92e 	bl	80077e0 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003584:	7963      	ldrb	r3, [r4, #5]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	7b21      	ldrb	r1, [r4, #12]
 800358a:	4319      	orrs	r1, r3
 800358c:	2018      	movs	r0, #24
 800358e:	30ff      	adds	r0, #255	; 0xff
 8003590:	f004 f926 	bl	80077e0 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003594:	8921      	ldrh	r1, [r4, #8]
 8003596:	208c      	movs	r0, #140	; 0x8c
 8003598:	0040      	lsls	r0, r0, #1
 800359a:	f004 f921 	bl	80077e0 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800359e:	8961      	ldrh	r1, [r4, #10]
 80035a0:	201a      	movs	r0, #26
 80035a2:	30ff      	adds	r0, #255	; 0xff
 80035a4:	f004 f91c 	bl	80077e0 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80035a8:	7b63      	ldrb	r3, [r4, #13]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	7921      	ldrb	r1, [r4, #4]
 80035ae:	4319      	orrs	r1, r3
 80035b0:	208d      	movs	r0, #141	; 0x8d
 80035b2:	0040      	lsls	r0, r0, #1
 80035b4:	f004 f914 	bl	80077e0 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 80035b8:	7ee1      	ldrb	r1, [r4, #27]
 80035ba:	201c      	movs	r0, #28
 80035bc:	30ff      	adds	r0, #255	; 0xff
 80035be:	f004 f90f 	bl	80077e0 <EE_WriteVariable>
	
	return result;
}
 80035c2:	2000      	movs	r0, #0
 80035c4:	bd10      	pop	{r4, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	200069c4 	.word	0x200069c4

080035cc <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 80035cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ce:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 80035d0:	2234      	movs	r2, #52	; 0x34
 80035d2:	2100      	movs	r1, #0
 80035d4:	4813      	ldr	r0, [pc, #76]	; (8003624 <ClearEEportsDir+0x58>)
 80035d6:	f00f fceb 	bl	8012fb0 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 80035da:	4b13      	ldr	r3, [pc, #76]	; (8003628 <ClearEEportsDir+0x5c>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01a      	beq.n	8003618 <ClearEEportsDir+0x4c>
 80035e2:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 80035e8:	4e0e      	ldr	r6, [pc, #56]	; (8003624 <ClearEEportsDir+0x58>)
	for(uint8_t i =1; i <= N; i++){
 80035ea:	4f0f      	ldr	r7, [pc, #60]	; (8003628 <ClearEEportsDir+0x5c>)
 80035ec:	e008      	b.n	8003600 <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80035ee:	1c60      	adds	r0, r4, #1
 80035f0:	f004 f8f6 	bl	80077e0 <EE_WriteVariable>
 80035f4:	e00a      	b.n	800360c <ClearEEportsDir+0x40>
	for(uint8_t i =1; i <= N; i++){
 80035f6:	3401      	adds	r4, #1
 80035f8:	b2e4      	uxtb	r4, r4
 80035fa:	783b      	ldrb	r3, [r7, #0]
 80035fc:	42a3      	cmp	r3, r4
 80035fe:	d30d      	bcc.n	800361c <ClearEEportsDir+0x50>
		if(arrayPortsDir[i - 1])
 8003600:	0025      	movs	r5, r4
 8003602:	1e63      	subs	r3, r4, #1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	5b99      	ldrh	r1, [r3, r6]
 8003608:	2900      	cmp	r1, #0
 800360a:	d1f0      	bne.n	80035ee <ClearEEportsDir+0x22>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800360c:	3502      	adds	r5, #2
 800360e:	2d1b      	cmp	r5, #27
 8003610:	ddf1      	ble.n	80035f6 <ClearEEportsDir+0x2a>
			result =BOS_ERR_EEPROM;
 8003612:	230a      	movs	r3, #10
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	e7ee      	b.n	80035f6 <ClearEEportsDir+0x2a>
	BOS_Status result =BOS_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 800361c:	9801      	ldr	r0, [sp, #4]
 800361e:	b003      	add	sp, #12
 8003620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	20006e40 	.word	0x20006e40
 8003628:	2000001c 	.word	0x2000001c

0800362c <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/

// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 800362c:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <EE_FormatForFactoryReset+0x1c>)
 8003630:	4a06      	ldr	r2, [pc, #24]	; (800364c <EE_FormatForFactoryReset+0x20>)
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d006      	beq.n	8003646 <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	}
	else{
		if(EE_Format() == HAL_OK){
 8003638:	f004 f97a 	bl	8007930 <EE_Format>
 800363c:	2800      	cmp	r0, #0
 800363e:	d102      	bne.n	8003646 <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003640:	4b02      	ldr	r3, [pc, #8]	; (800364c <EE_FormatForFactoryReset+0x20>)
 8003642:	4a01      	ldr	r2, [pc, #4]	; (8003648 <EE_FormatForFactoryReset+0x1c>)
 8003644:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 8003646:	bd10      	pop	{r4, pc}
 8003648:	beefdead 	.word	0xbeefdead
 800364c:	20007ff0 	.word	0x20007ff0

08003650 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 8003650:	b570      	push	{r4, r5, r6, lr}
 8003652:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003654:	2512      	movs	r5, #18
 8003656:	446d      	add	r5, sp
 8003658:	ab04      	add	r3, sp, #16
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	ab07      	add	r3, sp, #28
 800365e:	002a      	movs	r2, r5
 8003660:	a908      	add	r1, sp, #32
 8003662:	2001      	movs	r0, #1
 8003664:	f009 f914 	bl	800c890 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003668:	ac03      	add	r4, sp, #12
 800366a:	9400      	str	r4, [sp, #0]
 800366c:	ab05      	add	r3, sp, #20
 800366e:	220e      	movs	r2, #14
 8003670:	446a      	add	r2, sp
 8003672:	a906      	add	r1, sp, #24
 8003674:	2002      	movs	r0, #2
 8003676:	f009 f90b 	bl	800c890 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367a:	2301      	movs	r3, #1
 800367c:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2600      	movs	r6, #0
 8003680:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003682:	882b      	ldrh	r3, [r5, #0]
 8003684:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003686:	a909      	add	r1, sp, #36	; 0x24
 8003688:	9808      	ldr	r0, [sp, #32]
 800368a:	f00d faef 	bl	8010c6c <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800368e:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003690:	2302      	movs	r3, #2
 8003692:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003694:	8823      	ldrh	r3, [r4, #0]
 8003696:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003698:	a909      	add	r1, sp, #36	; 0x24
 800369a:	9805      	ldr	r0, [sp, #20]
 800369c:	f00d fae6 	bl	8010c6c <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80036a0:	8829      	ldrh	r1, [r5, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	9808      	ldr	r0, [sp, #32]
 80036a6:	f00d fc55 	bl	8010f54 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80036aa:	2005      	movs	r0, #5
 80036ac:	f009 fc94 	bl	800cfd8 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036b0:	8821      	ldrh	r1, [r4, #0]
 80036b2:	9805      	ldr	r0, [sp, #20]
 80036b4:	f00d fc48 	bl	8010f48 <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 80036b8:	2300      	movs	r3, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d002      	beq.n	80036c4 <IsLowerCLIbaud+0x74>
}
 80036be:	0018      	movs	r0, r3
 80036c0:	b00e      	add	sp, #56	; 0x38
 80036c2:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 80036c4:	3312      	adds	r3, #18
 80036c6:	446b      	add	r3, sp
 80036c8:	8819      	ldrh	r1, [r3, #0]
 80036ca:	2201      	movs	r2, #1
 80036cc:	9808      	ldr	r0, [sp, #32]
 80036ce:	f00d fc41 	bl	8010f54 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 80036d2:	2005      	movs	r0, #5
 80036d4:	f009 fc80 	bl	800cfd8 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 80036d8:	ab03      	add	r3, sp, #12
 80036da:	8819      	ldrh	r1, [r3, #0]
 80036dc:	9805      	ldr	r0, [sp, #20]
 80036de:	f00d fc33 	bl	8010f48 <HAL_GPIO_ReadPin>
 80036e2:	3801      	subs	r0, #1
 80036e4:	4243      	negs	r3, r0
 80036e6:	4143      	adcs	r3, r0
			return 1;
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e7e8      	b.n	80036be <IsLowerCLIbaud+0x6e>

080036ec <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 80036ec:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 80036ee:	f009 fe4d 	bl	800d38c <GetUart>
 80036f2:	0004      	movs	r4, r0
	
	huart->Init.BaudRate =57600;
 80036f4:	23e1      	movs	r3, #225	; 0xe1
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 80036fa:	2380      	movs	r3, #128	; 0x80
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	015b      	lsls	r3, r3, #5
 8003704:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 8003706:	f00f f85b 	bl	80127c0 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	6813      	ldr	r3, [r2, #0]
 800370e:	2120      	movs	r1, #32
 8003710:	430b      	orrs	r3, r1
 8003712:	6013      	str	r3, [r2, #0]
}
 8003714:	bd10      	pop	{r4, pc}
	...

08003718 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 8003718:	b510      	push	{r4, lr}
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <IsModuleParameter+0x14>)
 800371c:	6899      	ldr	r1, [r3, #8]
 800371e:	f7fc fcf1 	bl	8000104 <strcmp>
 8003722:	4243      	negs	r3, r0
 8003724:	4158      	adcs	r0, r3
 8003726:	b2c0      	uxtb	r0, r0
			return i + 1;
	}
	return 0;
}
 8003728:	bd10      	pop	{r4, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	20000084 	.word	0x20000084

08003730 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 8003734:	491b      	ldr	r1, [pc, #108]	; (80037a4 <IsMathOperator+0x74>)
 8003736:	f7fc fce5 	bl	8000104 <strcmp>
 800373a:	0006      	movs	r6, r0
 800373c:	2506      	movs	r5, #6
 800373e:	2e00      	cmp	r6, #0
 8003740:	d023      	beq.n	800378a <IsMathOperator+0x5a>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 8003742:	4919      	ldr	r1, [pc, #100]	; (80037a8 <IsMathOperator+0x78>)
 8003744:	0020      	movs	r0, r4
 8003746:	f7fc fcdd 	bl	8000104 <strcmp>
 800374a:	2800      	cmp	r0, #0
 800374c:	d01f      	beq.n	800378e <IsMathOperator+0x5e>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 800374e:	4917      	ldr	r1, [pc, #92]	; (80037ac <IsMathOperator+0x7c>)
 8003750:	0020      	movs	r0, r4
 8003752:	f7fc fcd7 	bl	8000104 <strcmp>
 8003756:	2800      	cmp	r0, #0
 8003758:	d01b      	beq.n	8003792 <IsMathOperator+0x62>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 800375a:	4915      	ldr	r1, [pc, #84]	; (80037b0 <IsMathOperator+0x80>)
 800375c:	0020      	movs	r0, r4
 800375e:	f7fc fcd1 	bl	8000104 <strcmp>
 8003762:	2800      	cmp	r0, #0
 8003764:	d017      	beq.n	8003796 <IsMathOperator+0x66>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003766:	4913      	ldr	r1, [pc, #76]	; (80037b4 <IsMathOperator+0x84>)
 8003768:	0020      	movs	r0, r4
 800376a:	f7fc fccb 	bl	8000104 <strcmp>
 800376e:	2800      	cmp	r0, #0
 8003770:	d013      	beq.n	800379a <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 8003772:	4911      	ldr	r1, [pc, #68]	; (80037b8 <IsMathOperator+0x88>)
 8003774:	0020      	movs	r0, r4
 8003776:	f7fc fcc5 	bl	8000104 <strcmp>
 800377a:	2800      	cmp	r0, #0
 800377c:	d00f      	beq.n	800379e <IsMathOperator+0x6e>
 800377e:	3d01      	subs	r5, #1
 8003780:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003782:	2d00      	cmp	r5, #0
 8003784:	d1db      	bne.n	800373e <IsMathOperator+0xe>
			return MATH_NOT_EQUAL;
	}
	return 0;
 8003786:	2000      	movs	r0, #0
}
 8003788:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 800378a:	2001      	movs	r0, #1
 800378c:	e7fc      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_GREATER;
 800378e:	2002      	movs	r0, #2
 8003790:	e7fa      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_SMALLER;
 8003792:	2003      	movs	r0, #3
 8003794:	e7f8      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 8003796:	2004      	movs	r0, #4
 8003798:	e7f6      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 800379a:	2005      	movs	r0, #5
 800379c:	e7f4      	b.n	8003788 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 800379e:	2006      	movs	r0, #6
 80037a0:	e7f2      	b.n	8003788 <IsMathOperator+0x58>
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	08017b00 	.word	0x08017b00
 80037a8:	08017b04 	.word	0x08017b04
 80037ac:	08017b08 	.word	0x08017b08
 80037b0:	08017b0c 	.word	0x08017b0c
 80037b4:	08017b10 	.word	0x08017b10
 80037b8:	08017b14 	.word	0x08017b14

080037bc <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 80037bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037be:	46c6      	mov	lr, r8
 80037c0:	b500      	push	{lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	0006      	movs	r6, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 80037c6:	2401      	movs	r4, #1
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037c8:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <ExploreNeighbors+0x4c>)
 80037ca:	4698      	mov	r8, r3
 80037cc:	4d0f      	ldr	r5, [pc, #60]	; (800380c <ExploreNeighbors+0x50>)
			messageParams[1] =(uint8_t )myPN;
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 80037ce:	2703      	movs	r7, #3
		if(port != ignore){
 80037d0:	42a6      	cmp	r6, r4
 80037d2:	d00f      	beq.n	80037f4 <ExploreNeighbors+0x38>
			messageParams[0] =(uint8_t )(myPN >> 8);
 80037d4:	4643      	mov	r3, r8
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	0a1a      	lsrs	r2, r3, #8
 80037da:	702a      	strb	r2, [r5, #0]
			messageParams[1] =(uint8_t )myPN;
 80037dc:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
 80037de:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 80037e0:	9700      	str	r7, [sp, #0]
 80037e2:	230a      	movs	r3, #10
 80037e4:	2200      	movs	r2, #0
 80037e6:	2100      	movs	r1, #0
 80037e8:	0020      	movs	r0, r4
 80037ea:	f005 fd43 	bl	8009274 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 80037ee:	200a      	movs	r0, #10
 80037f0:	f009 ff1b 	bl	800d62a <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 80037f4:	3401      	adds	r4, #1
 80037f6:	b2e4      	uxtb	r4, r4
 80037f8:	2c07      	cmp	r4, #7
 80037fa:	d1e9      	bne.n	80037d0 <ExploreNeighbors+0x14>
		}
	}
	
	return result;
}
 80037fc:	2000      	movs	r0, #0
 80037fe:	b002      	add	sp, #8
 8003800:	bc04      	pop	{r2}
 8003802:	4690      	mov	r8, r2
 8003804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	20000050 	.word	0x20000050
 800380c:	20000f38 	.word	0x20000f38

08003810 <FindBroadcastRoutes>:
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module 
 (Takes about 50 usec)
 */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003812:	46de      	mov	lr, fp
 8003814:	4657      	mov	r7, sl
 8003816:	464e      	mov	r6, r9
 8003818:	4645      	mov	r5, r8
 800381a:	b5e0      	push	{r5, r6, r7, lr}
 800381c:	b085      	sub	sp, #20
 800381e:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003820:	4b47      	ldr	r3, [pc, #284]	; (8003940 <FindBroadcastRoutes+0x130>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	469c      	mov	ip, r3
 8003826:	3307      	adds	r3, #7
 8003828:	08db      	lsrs	r3, r3, #3
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	466a      	mov	r2, sp
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	469d      	mov	sp, r3
 8003832:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003834:	4663      	mov	r3, ip
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00d      	beq.n	8003856 <FindBroadcastRoutes+0x46>
 800383a:	0023      	movs	r3, r4
 800383c:	4a41      	ldr	r2, [pc, #260]	; (8003944 <FindBroadcastRoutes+0x134>)
 800383e:	4661      	mov	r1, ip
 8003840:	1e4d      	subs	r5, r1, #1
 8003842:	b2ed      	uxtb	r5, r5
 8003844:	3501      	adds	r5, #1
 8003846:	192d      	adds	r5, r5, r4
		modules[m] =0;
 8003848:	2100      	movs	r1, #0
 800384a:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] =0;
 800384c:	8011      	strh	r1, [r2, #0]
 800384e:	3301      	adds	r3, #1
 8003850:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 8003852:	42ab      	cmp	r3, r5
 8003854:	d1f9      	bne.n	800384a <FindBroadcastRoutes+0x3a>
	}
	modules[src - 1] =++level;					// Tag the source
 8003856:	3801      	subs	r0, #1
 8003858:	2301      	movs	r3, #1
 800385a:	5423      	strb	r3, [r4, r0]
 800385c:	2216      	movs	r2, #22
 800385e:	4342      	muls	r2, r0
 8003860:	3202      	adds	r2, #2
 8003862:	4b39      	ldr	r3, [pc, #228]	; (8003948 <FindBroadcastRoutes+0x138>)
 8003864:	18d2      	adds	r2, r2, r3
 8003866:	2100      	movs	r1, #0

	++level;												// Move one level
	
	for(p =1; p <= NumOfPorts; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003868:	4d36      	ldr	r5, [pc, #216]	; (8003944 <FindBroadcastRoutes+0x134>)
 800386a:	0040      	lsls	r0, r0, #1
 800386c:	2301      	movs	r3, #1
 800386e:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003870:	46a3      	mov	fp, r4
 8003872:	e003      	b.n	800387c <FindBroadcastRoutes+0x6c>
 8003874:	3101      	adds	r1, #1
 8003876:	3202      	adds	r2, #2
	for(p =1; p <= NumOfPorts; p++){
 8003878:	2906      	cmp	r1, #6
 800387a:	d011      	beq.n	80038a0 <FindBroadcastRoutes+0x90>
		if(array[src - 1][p]){
 800387c:	8813      	ldrh	r3, [r2, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f8      	beq.n	8003874 <FindBroadcastRoutes+0x64>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003882:	5b46      	ldrh	r6, [r0, r5]
 8003884:	46b1      	mov	r9, r6
 8003886:	4646      	mov	r6, r8
 8003888:	408e      	lsls	r6, r1
 800388a:	46b2      	mov	sl, r6
 800388c:	464e      	mov	r6, r9
 800388e:	4654      	mov	r4, sl
 8003890:	4326      	orrs	r6, r4
 8003892:	5346      	strh	r6, [r0, r5]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003894:	08db      	lsrs	r3, r3, #3
 8003896:	445b      	add	r3, fp
 8003898:	3b01      	subs	r3, #1
 800389a:	2402      	movs	r4, #2
 800389c:	701c      	strb	r4, [r3, #0]
 800389e:	e7e9      	b.n	8003874 <FindBroadcastRoutes+0x64>
 80038a0:	465c      	mov	r4, fp
	++level;												// Move one level
 80038a2:	2602      	movs	r6, #2
 80038a4:	4b28      	ldr	r3, [pc, #160]	; (8003948 <FindBroadcastRoutes+0x138>)
 80038a6:	3302      	adds	r3, #2
 80038a8:	607b      	str	r3, [r7, #4]
			{
				for(p =1; p <= NumOfPorts; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038aa:	2301      	movs	r3, #1
 80038ac:	469b      	mov	fp, r3
 80038ae:	46b0      	mov	r8, r6
 80038b0:	0026      	movs	r6, r4
		++level;											// Move one level
 80038b2:	4643      	mov	r3, r8
 80038b4:	3301      	adds	r3, #1
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	4698      	mov	r8, r3
		for(m =0; m < N; m++)					// Scan all modules in the list
 80038ba:	4663      	mov	r3, ip
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d035      	beq.n	800392c <FindBroadcastRoutes+0x11c>
 80038c0:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 80038c6:	3b01      	subs	r3, #1
 80038c8:	4443      	add	r3, r8
 80038ca:	4699      	mov	r9, r3
 80038cc:	e01e      	b.n	800390c <FindBroadcastRoutes+0xfc>
 80038ce:	3001      	adds	r0, #1
 80038d0:	3102      	adds	r1, #2
				for(p =1; p <= NumOfPorts; p++)					// Check all neighbors if they're not already broadcasted-to
 80038d2:	2806      	cmp	r0, #6
 80038d4:	d015      	beq.n	8003902 <FindBroadcastRoutes+0xf2>
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 80038d6:	880b      	ldrh	r3, [r1, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f8      	beq.n	80038ce <FindBroadcastRoutes+0xbe>
 80038dc:	08db      	lsrs	r3, r3, #3
 80038de:	3b01      	subs	r3, #1
 80038e0:	5cf5      	ldrb	r5, [r6, r3]
 80038e2:	2d00      	cmp	r5, #0
 80038e4:	d1f3      	bne.n	80038ce <FindBroadcastRoutes+0xbe>
						bcastRoutes[m] |=(0x01 << (p - 1));
 80038e6:	4a17      	ldr	r2, [pc, #92]	; (8003944 <FindBroadcastRoutes+0x134>)
 80038e8:	5aa5      	ldrh	r5, [r4, r2]
 80038ea:	465a      	mov	r2, fp
 80038ec:	4082      	lsls	r2, r0
 80038ee:	4315      	orrs	r5, r2
 80038f0:	4a14      	ldr	r2, [pc, #80]	; (8003944 <FindBroadcastRoutes+0x134>)
 80038f2:	52a5      	strh	r5, [r4, r2]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 80038f4:	4642      	mov	r2, r8
 80038f6:	54f2      	strb	r2, [r6, r3]
						++untaged;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3301      	adds	r3, #1
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	e7e5      	b.n	80038ce <FindBroadcastRoutes+0xbe>
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003906:	b2d3      	uxtb	r3, r2
 8003908:	4563      	cmp	r3, ip
 800390a:	d20c      	bcs.n	8003926 <FindBroadcastRoutes+0x116>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 800390c:	5cb3      	ldrb	r3, [r6, r2]
 800390e:	454b      	cmp	r3, r9
 8003910:	d1f8      	bne.n	8003904 <FindBroadcastRoutes+0xf4>
 8003912:	2116      	movs	r1, #22
 8003914:	4351      	muls	r1, r2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	469a      	mov	sl, r3
 800391a:	4451      	add	r1, sl
 800391c:	0053      	lsls	r3, r2, #1
 800391e:	2000      	movs	r0, #0
 8003920:	60ba      	str	r2, [r7, #8]
 8003922:	001c      	movs	r4, r3
 8003924:	e7d7      	b.n	80038d6 <FindBroadcastRoutes+0xc6>
					}
				}
			}
		}
	} while(untaged);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1c2      	bne.n	80038b2 <FindBroadcastRoutes+0xa2>
	
	return result;
}
 800392c:	2000      	movs	r0, #0
 800392e:	46bd      	mov	sp, r7
 8003930:	b005      	add	sp, #20
 8003932:	bc3c      	pop	{r2, r3, r4, r5}
 8003934:	4690      	mov	r8, r2
 8003936:	4699      	mov	r9, r3
 8003938:	46a2      	mov	sl, r4
 800393a:	46ab      	mov	fp, r5
 800393c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	2000001c 	.word	0x2000001c
 8003944:	20000cb8 	.word	0x20000cb8
 8003948:	20000a78 	.word	0x20000a78

0800394c <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 800394c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 800394e:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest =0xFF;
 8003950:	24ff      	movs	r4, #255	; 0xff
	if(!Q[0])						// Not visited yet
 8003952:	2b00      	cmp	r3, #0
 8003954:	d100      	bne.n	8003958 <minArr+0xc>
		smallest =arr[0];
 8003956:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++){
 8003958:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <minArr+0x38>)
 800395a:	781d      	ldrb	r5, [r3, #0]
 800395c:	2d00      	cmp	r5, #0
 800395e:	dd0e      	ble.n	800397e <minArr+0x32>
 8003960:	2300      	movs	r3, #0
 8003962:	2700      	movs	r7, #0
 8003964:	e002      	b.n	800396c <minArr+0x20>
 8003966:	3301      	adds	r3, #1
 8003968:	42ab      	cmp	r3, r5
 800396a:	da09      	bge.n	8003980 <minArr+0x34>
		if((arr[i] < smallest) && !Q[i]){
 800396c:	5cc2      	ldrb	r2, [r0, r3]
 800396e:	42a2      	cmp	r2, r4
 8003970:	d2f9      	bcs.n	8003966 <minArr+0x1a>
 8003972:	5cce      	ldrb	r6, [r1, r3]
 8003974:	2e00      	cmp	r6, #0
 8003976:	d1f6      	bne.n	8003966 <minArr+0x1a>
			smallest =arr[i];
			index =i;
 8003978:	b2df      	uxtb	r7, r3
			smallest =arr[i];
 800397a:	0014      	movs	r4, r2
 800397c:	e7f3      	b.n	8003966 <minArr+0x1a>
	for(int i =0; i < N; i++){
 800397e:	2700      	movs	r7, #0
		}
	}
	
	return index;
}
 8003980:	0038      	movs	r0, r7
 8003982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003984:	2000001c 	.word	0x2000001c

08003988 <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <QnotEmpty+0x20>)
 800398a:	7819      	ldrb	r1, [r3, #0]
 800398c:	2900      	cmp	r1, #0
 800398e:	d008      	beq.n	80039a2 <QnotEmpty+0x1a>
 8003990:	0003      	movs	r3, r0
 8003992:	1841      	adds	r1, r0, r1
	char temp =1;
 8003994:	2001      	movs	r0, #1
		temp &=Q[i];
 8003996:	781a      	ldrb	r2, [r3, #0]
 8003998:	4010      	ands	r0, r2
 800399a:	3301      	adds	r3, #1
	for(int i =0; i < N; i++){
 800399c:	428b      	cmp	r3, r1
 800399e:	d1fa      	bne.n	8003996 <QnotEmpty+0xe>
	}
	
	return temp;
}
 80039a0:	4770      	bx	lr
	char temp =1;
 80039a2:	2001      	movs	r0, #1
 80039a4:	e7fc      	b.n	80039a0 <QnotEmpty+0x18>
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	2000001c 	.word	0x2000001c

080039ac <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 80039ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ae:	46de      	mov	lr, fp
 80039b0:	4657      	mov	r7, sl
 80039b2:	464e      	mov	r6, r9
 80039b4:	4645      	mov	r5, r8
 80039b6:	b5e0      	push	{r5, r6, r7, lr}
 80039b8:	b08f      	sub	sp, #60	; 0x3c
 80039ba:	0005      	movs	r5, r0
 80039bc:	468a      	mov	sl, r1
	uint8_t Q[50] ={0};		// All nodes initially in Q (unvisited nodes)
 80039be:	2232      	movs	r2, #50	; 0x32
 80039c0:	2100      	movs	r1, #0
 80039c2:	a801      	add	r0, sp, #4
 80039c4:	f00f faf4 	bl	8012fb0 <memset>
	memset(route,0,sizeof(route));
 80039c8:	221a      	movs	r2, #26
 80039ca:	2100      	movs	r1, #0
 80039cc:	485a      	ldr	r0, [pc, #360]	; (8003b38 <FindRoute+0x18c>)
 80039ce:	f00f faef 	bl	8012fb0 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 80039d2:	0029      	movs	r1, r5
 80039d4:	1e68      	subs	r0, r5, #1
 80039d6:	2300      	movs	r3, #0
 80039d8:	4a58      	ldr	r2, [pc, #352]	; (8003b3c <FindRoute+0x190>)
 80039da:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 80039dc:	4a58      	ldr	r2, [pc, #352]	; (8003b40 <FindRoute+0x194>)
 80039de:	5413      	strb	r3, [r2, r0]
 80039e0:	2516      	movs	r5, #22
 80039e2:	4345      	muls	r5, r0
 80039e4:	3502      	adds	r5, #2
 80039e6:	4b57      	ldr	r3, [pc, #348]	; (8003b44 <FindRoute+0x198>)
 80039e8:	18ed      	adds	r5, r5, r3
 80039ea:	002a      	movs	r2, r5
	for(int col =1; col <= 6; col++){
 80039ec:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 80039ee:	4653      	mov	r3, sl
 80039f0:	b29c      	uxth	r4, r3
 80039f2:	e003      	b.n	80039fc <FindRoute+0x50>
	for(int col =1; col <= 6; col++){
 80039f4:	3001      	adds	r0, #1
 80039f6:	3202      	adds	r2, #2
 80039f8:	2807      	cmp	r0, #7
 80039fa:	d00f      	beq.n	8003a1c <FindRoute+0x70>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 80039fc:	8813      	ldrh	r3, [r2, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f8      	beq.n	80039f4 <FindRoute+0x48>
 8003a02:	08db      	lsrs	r3, r3, #3
 8003a04:	42a3      	cmp	r3, r4
 8003a06:	d1f5      	bne.n	80039f4 <FindRoute+0x48>
			routeDist[desID - 1] =1;
 8003a08:	4b4c      	ldr	r3, [pc, #304]	; (8003b3c <FindRoute+0x190>)
 8003a0a:	4453      	add	r3, sl
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	2201      	movs	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
			route[0] =desID;
 8003a12:	4b49      	ldr	r3, [pc, #292]	; (8003b38 <FindRoute+0x18c>)
 8003a14:	4652      	mov	r2, sl
 8003a16:	701a      	strb	r2, [r3, #0]
			return col;
 8003a18:	b2c0      	uxtb	r0, r0
 8003a1a:	e085      	b.n	8003b28 <FindRoute+0x17c>
	for(int i =1; i <= N; i++){
 8003a1c:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <FindRoute+0x19c>)
 8003a1e:	781e      	ldrb	r6, [r3, #0]
 8003a20:	2e00      	cmp	r6, #0
 8003a22:	dd11      	ble.n	8003a48 <FindRoute+0x9c>
 8003a24:	2301      	movs	r3, #1
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003a26:	24ff      	movs	r4, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003a28:	4f45      	ldr	r7, [pc, #276]	; (8003b40 <FindRoute+0x194>)
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	46ac      	mov	ip, r5
 8003a2e:	e002      	b.n	8003a36 <FindRoute+0x8a>
	for(int i =1; i <= N; i++){
 8003a30:	3301      	adds	r3, #1
 8003a32:	42b3      	cmp	r3, r6
 8003a34:	dc07      	bgt.n	8003a46 <FindRoute+0x9a>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003a36:	4299      	cmp	r1, r3
 8003a38:	d0fa      	beq.n	8003a30 <FindRoute+0x84>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003a3a:	1e5a      	subs	r2, r3, #1
 8003a3c:	4d3f      	ldr	r5, [pc, #252]	; (8003b3c <FindRoute+0x190>)
 8003a3e:	54ac      	strb	r4, [r5, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003a40:	18ba      	adds	r2, r7, r2
 8003a42:	7010      	strb	r0, [r2, #0]
 8003a44:	e7f4      	b.n	8003a30 <FindRoute+0x84>
 8003a46:	4665      	mov	r5, ip
	uint8_t u =0;
 8003a48:	2400      	movs	r4, #0
 8003a4a:	4b3e      	ldr	r3, [pc, #248]	; (8003b44 <FindRoute+0x198>)
 8003a4c:	4698      	mov	r8, r3
 8003a4e:	230e      	movs	r3, #14
 8003a50:	4443      	add	r3, r8
 8003a52:	4656      	mov	r6, sl
 8003a54:	469b      	mov	fp, r3
 8003a56:	46a9      	mov	r9, r5
 8003a58:	e01d      	b.n	8003a96 <FindRoute+0xea>
 8003a5a:	464d      	mov	r5, r9
 8003a5c:	46b2      	mov	sl, r6
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003a5e:	0034      	movs	r4, r6
 8003a60:	e034      	b.n	8003acc <FindRoute+0x120>
 8003a62:	3102      	adds	r1, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003a64:	4281      	cmp	r1, r0
 8003a66:	d015      	beq.n	8003a94 <FindRoute+0xe8>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003a68:	880b      	ldrh	r3, [r1, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f9      	beq.n	8003a62 <FindRoute+0xb6>
				v =(array[u - 1][n] >> 3);
 8003a6e:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	5cd7      	ldrb	r7, [r2, r3]
 8003a76:	2f00      	cmp	r7, #0
 8003a78:	d1f3      	bne.n	8003a62 <FindRoute+0xb6>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003a7a:	4f30      	ldr	r7, [pc, #192]	; (8003b3c <FindRoute+0x190>)
 8003a7c:	5d7f      	ldrb	r7, [r7, r5]
 8003a7e:	3701      	adds	r7, #1
 8003a80:	b2ff      	uxtb	r7, r7
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003a82:	4e2e      	ldr	r6, [pc, #184]	; (8003b3c <FindRoute+0x190>)
 8003a84:	5cf6      	ldrb	r6, [r6, r3]
 8003a86:	42be      	cmp	r6, r7
 8003a88:	d9eb      	bls.n	8003a62 <FindRoute+0xb6>
						routeDist[v - 1] =alt;
 8003a8a:	4e2c      	ldr	r6, [pc, #176]	; (8003b3c <FindRoute+0x190>)
 8003a8c:	54f7      	strb	r7, [r6, r3]
						routePrev[v - 1] =u;
 8003a8e:	4e2c      	ldr	r6, [pc, #176]	; (8003b40 <FindRoute+0x194>)
 8003a90:	54f4      	strb	r4, [r6, r3]
 8003a92:	e7e6      	b.n	8003a62 <FindRoute+0xb6>
 8003a94:	4656      	mov	r6, sl
	while(!QnotEmpty(Q)){
 8003a96:	a801      	add	r0, sp, #4
 8003a98:	f7ff ff76 	bl	8003988 <QnotEmpty>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d113      	bne.n	8003ac8 <FindRoute+0x11c>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003aa0:	a901      	add	r1, sp, #4
 8003aa2:	4826      	ldr	r0, [pc, #152]	; (8003b3c <FindRoute+0x190>)
 8003aa4:	f7ff ff52 	bl	800394c <minArr>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003aac:	42b4      	cmp	r4, r6
 8003aae:	d0d4      	beq.n	8003a5a <FindRoute+0xae>
			Q[u - 1] =1;									// Remove u from Q
 8003ab0:	1e65      	subs	r5, r4, #1
 8003ab2:	ab01      	add	r3, sp, #4
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	555a      	strb	r2, [r3, r5]
 8003ab8:	2016      	movs	r0, #22
 8003aba:	4368      	muls	r0, r5
 8003abc:	1c81      	adds	r1, r0, #2
 8003abe:	4441      	add	r1, r8
 8003ac0:	4458      	add	r0, fp
				if(!Q[v - 1])								// v is still in Q
 8003ac2:	001a      	movs	r2, r3
 8003ac4:	46b2      	mov	sl, r6
 8003ac6:	e7cf      	b.n	8003a68 <FindRoute+0xbc>
 8003ac8:	464d      	mov	r5, r9
 8003aca:	46b2      	mov	sl, r6
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003acc:	4b1c      	ldr	r3, [pc, #112]	; (8003b40 <FindRoute+0x194>)
 8003ace:	191b      	adds	r3, r3, r4
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	2a00      	cmp	r2, #0
 8003ad8:	d00e      	beq.n	8003af8 <FindRoute+0x14c>
		route[j++] =u;          			// Push the vertex onto the stack
 8003ada:	4917      	ldr	r1, [pc, #92]	; (8003b38 <FindRoute+0x18c>)
 8003adc:	468c      	mov	ip, r1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ade:	4e18      	ldr	r6, [pc, #96]	; (8003b40 <FindRoute+0x194>)
 8003ae0:	e000      	b.n	8003ae4 <FindRoute+0x138>
 8003ae2:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003ae4:	1c58      	adds	r0, r3, #1
 8003ae6:	4661      	mov	r1, ip
 8003ae8:	54cc      	strb	r4, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003aea:	18b3      	adds	r3, r6, r2
 8003aec:	3b01      	subs	r3, #1
 8003aee:	7819      	ldrb	r1, [r3, #0]
 8003af0:	0014      	movs	r4, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003af2:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003af4:	2900      	cmp	r1, #0
 8003af6:	d1f4      	bne.n	8003ae2 <FindRoute+0x136>
	for(int col =1; col <= 6; col++){
 8003af8:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003afa:	490f      	ldr	r1, [pc, #60]	; (8003b38 <FindRoute+0x18c>)
 8003afc:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <FindRoute+0x190>)
 8003afe:	4453      	add	r3, sl
 8003b00:	001f      	movs	r7, r3
 8003b02:	3f01      	subs	r7, #1
 8003b04:	e003      	b.n	8003b0e <FindRoute+0x162>
	for(int col =1; col <= 6; col++){
 8003b06:	3001      	adds	r0, #1
 8003b08:	3502      	adds	r5, #2
 8003b0a:	2807      	cmp	r0, #7
 8003b0c:	d00b      	beq.n	8003b26 <FindRoute+0x17a>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003b0e:	882b      	ldrh	r3, [r5, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f8      	beq.n	8003b06 <FindRoute+0x15a>
 8003b14:	783a      	ldrb	r2, [r7, #0]
 8003b16:	188a      	adds	r2, r1, r2
 8003b18:	3a01      	subs	r2, #1
 8003b1a:	7812      	ldrb	r2, [r2, #0]
 8003b1c:	08db      	lsrs	r3, r3, #3
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d1f1      	bne.n	8003b06 <FindRoute+0x15a>
			return col;
 8003b22:	b2c0      	uxtb	r0, r0
 8003b24:	e000      	b.n	8003b28 <FindRoute+0x17c>
	return 0;
 8003b26:	2000      	movs	r0, #0
}
 8003b28:	b00f      	add	sp, #60	; 0x3c
 8003b2a:	bc3c      	pop	{r2, r3, r4, r5}
 8003b2c:	4690      	mov	r8, r2
 8003b2e:	4699      	mov	r9, r3
 8003b30:	46a2      	mov	sl, r4
 8003b32:	46ab      	mov	fp, r5
 8003b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	20006ac8 	.word	0x20006ac8
 8003b3c:	20001114 	.word	0x20001114
 8003b40:	20001130 	.word	0x20001130
 8003b44:	20000a78 	.word	0x20000a78
 8003b48:	2000001c 	.word	0x2000001c

08003b4c <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	0007      	movs	r7, r0
 8003b52:	000e      	movs	r6, r1
 8003b54:	9205      	str	r2, [sp, #20]
 8003b56:	001d      	movs	r5, r3
	myOutport =FindRoute(myID,dst);
 8003b58:	4b37      	ldr	r3, [pc, #220]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003b5a:	7818      	ldrb	r0, [r3, #0]
 8003b5c:	f7ff ff26 	bl	80039ac <FindRoute>
 8003b60:	9004      	str	r0, [sp, #16]
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003b62:	2d00      	cmp	r5, #0
 8003b64:	d020      	beq.n	8003ba8 <remoteBootloaderUpdate+0x5c>
 8003b66:	4b34      	ldr	r3, [pc, #208]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003b68:	781c      	ldrb	r4, [r3, #0]
 8003b6a:	42b4      	cmp	r4, r6
 8003b6c:	d05f      	beq.n	8003c2e <remoteBootloaderUpdate+0xe2>
	if(src == myID){
 8003b6e:	42bc      	cmp	r4, r7
 8003b70:	d034      	beq.n	8003bdc <remoteBootloaderUpdate+0x90>
	uint8_t myOutport =0, lastModule =0;
 8003b72:	2400      	movs	r4, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8003b74:	9805      	ldr	r0, [sp, #20]
 8003b76:	f7ff fdb9 	bl	80036ec <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003b7a:	9804      	ldr	r0, [sp, #16]
 8003b7c:	f7ff fdb6 	bl	80036ec <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID){
 8003b80:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	42a3      	cmp	r3, r4
 8003b86:	d046      	beq.n	8003c16 <remoteBootloaderUpdate+0xca>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8003b88:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003b8a:	7819      	ldrb	r1, [r3, #0]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	9303      	str	r3, [sp, #12]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	9302      	str	r3, [sp, #8]
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	3303      	adds	r3, #3
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	000b      	movs	r3, r1
 8003b9c:	9a04      	ldr	r2, [sp, #16]
 8003b9e:	9805      	ldr	r0, [sp, #20]
 8003ba0:	f005 fdb6 	bl	8009710 <StartScastDMAStream>
}
 8003ba4:	b007      	add	sp, #28
 8003ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(NumberOfHops(dst)== 1)
 8003ba8:	4b24      	ldr	r3, [pc, #144]	; (8003c3c <remoteBootloaderUpdate+0xf0>)
 8003baa:	199b      	adds	r3, r3, r6
 8003bac:	3b01      	subs	r3, #1
 8003bae:	781a      	ldrb	r2, [r3, #0]
 8003bb0:	2a01      	cmp	r2, #1
 8003bb2:	d010      	beq.n	8003bd6 <remoteBootloaderUpdate+0x8a>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8003bb4:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <remoteBootloaderUpdate+0xf4>)
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	781c      	ldrb	r4, [r3, #0]
	if(src == myID){
 8003bbc:	4b1e      	ldr	r3, [pc, #120]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	42bb      	cmp	r3, r7
 8003bc2:	d1d7      	bne.n	8003b74 <remoteBootloaderUpdate+0x28>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003bc4:	f009 fe46 	bl	800d854 <FreeRTOS_CLIGetOutputBuffer>
 8003bc8:	0007      	movs	r7, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8003bca:	4b1e      	ldr	r3, [pc, #120]	; (8003c44 <remoteBootloaderUpdate+0xf8>)
 8003bcc:	6819      	ldr	r1, [r3, #0]
 8003bce:	0032      	movs	r2, r6
 8003bd0:	f00f fbe8 	bl	80133a4 <sprintf>
 8003bd4:	e00d      	b.n	8003bf2 <remoteBootloaderUpdate+0xa6>
		lastModule = myID;
 8003bd6:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <remoteBootloaderUpdate+0xec>)
 8003bd8:	781c      	ldrb	r4, [r3, #0]
 8003bda:	e7ef      	b.n	8003bbc <remoteBootloaderUpdate+0x70>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003bdc:	f009 fe3a 	bl	800d854 <FreeRTOS_CLIGetOutputBuffer>
 8003be0:	0007      	movs	r7, r0
	uint8_t myOutport =0, lastModule =0;
 8003be2:	2400      	movs	r4, #0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8003be4:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <remoteBootloaderUpdate+0xfc>)
 8003be6:	6819      	ldr	r1, [r3, #0]
 8003be8:	002b      	movs	r3, r5
 8003bea:	0032      	movs	r2, r6
 8003bec:	0038      	movs	r0, r7
 8003bee:	f00f fbd9 	bl	80133a4 <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <remoteBootloaderUpdate+0x100>)
 8003bf4:	6819      	ldr	r1, [r3, #0]
 8003bf6:	0038      	movs	r0, r7
 8003bf8:	f00f fbf4 	bl	80133e4 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8003bfc:	0038      	movs	r0, r7
 8003bfe:	f7fc fa8b 	bl	8000118 <strlen>
 8003c02:	b282      	uxth	r2, r0
 8003c04:	2332      	movs	r3, #50	; 0x32
 8003c06:	0039      	movs	r1, r7
 8003c08:	9805      	ldr	r0, [sp, #20]
 8003c0a:	f009 fc09 	bl	800d420 <writePxITMutex>
		Delay_ms(100);
 8003c0e:	2064      	movs	r0, #100	; 0x64
 8003c10:	f00b fd36 	bl	800f680 <HAL_Delay>
 8003c14:	e7ae      	b.n	8003b74 <remoteBootloaderUpdate+0x28>
		SwapUartPins(GetUart(myOutport),REVERSED);
 8003c16:	9804      	ldr	r0, [sp, #16]
 8003c18:	f009 fbb8 	bl	800d38c <GetUart>
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	f009 fc4f 	bl	800d4c0 <SwapUartPins>
 8003c22:	e7b1      	b.n	8003b88 <remoteBootloaderUpdate+0x3c>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c24:	f009 fe16 	bl	800d854 <FreeRTOS_CLIGetOutputBuffer>
 8003c28:	0007      	movs	r7, r0
		myOutport =outport;
 8003c2a:	9504      	str	r5, [sp, #16]
 8003c2c:	e7da      	b.n	8003be4 <remoteBootloaderUpdate+0x98>
	if(src == myID){
 8003c2e:	42bc      	cmp	r4, r7
 8003c30:	d0f8      	beq.n	8003c24 <remoteBootloaderUpdate+0xd8>
		myOutport =outport;
 8003c32:	9504      	str	r5, [sp, #16]
 8003c34:	e79e      	b.n	8003b74 <remoteBootloaderUpdate+0x28>
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	20001076 	.word	0x20001076
 8003c3c:	20001114 	.word	0x20001114
 8003c40:	20006ac8 	.word	0x20006ac8
 8003c44:	20000078 	.word	0x20000078
 8003c48:	2000007c 	.word	0x2000007c
 8003c4c:	20000080 	.word	0x20000080

08003c50 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c52:	46d6      	mov	lr, sl
 8003c54:	464f      	mov	r7, r9
 8003c56:	4646      	mov	r6, r8
 8003c58:	b5c0      	push	{r6, r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	0005      	movs	r5, r0
 8003c5e:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003c60:	4c56      	ldr	r4, [pc, #344]	; (8003dbc <DisplayTopology+0x16c>)
 8003c62:	4b57      	ldr	r3, [pc, #348]	; (8003dc0 <DisplayTopology+0x170>)
 8003c64:	0022      	movs	r2, r4
 8003c66:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003c68:	c243      	stmia	r2!, {r0, r1, r6}
 8003c6a:	6819      	ldr	r1, [r3, #0]
 8003c6c:	6011      	str	r1, [r2, #0]
 8003c6e:	889b      	ldrh	r3, [r3, #4]
 8003c70:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c72:	0020      	movs	r0, r4
 8003c74:	f7fc fa50 	bl	8000118 <strlen>
 8003c78:	b282      	uxth	r2, r0
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	425b      	negs	r3, r3
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	3333      	adds	r3, #51	; 0x33
 8003c82:	0021      	movs	r1, r4
 8003c84:	0028      	movs	r0, r5
 8003c86:	f009 fba3 	bl	800d3d0 <writePxMutex>
 8003c8a:	2401      	movs	r4, #1
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003c8c:	4f4d      	ldr	r7, [pc, #308]	; (8003dc4 <DisplayTopology+0x174>)
 8003c8e:	4d4b      	ldr	r5, [pc, #300]	; (8003dbc <DisplayTopology+0x16c>)
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c90:	2601      	movs	r6, #1
 8003c92:	4276      	negs	r6, r6
		sprintf(pcUserMessage,"P%d\t",i);
 8003c94:	0022      	movs	r2, r4
 8003c96:	0039      	movs	r1, r7
 8003c98:	0028      	movs	r0, r5
 8003c9a:	f00f fb83 	bl	80133a4 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c9e:	0028      	movs	r0, r5
 8003ca0:	f7fc fa3a 	bl	8000118 <strlen>
 8003ca4:	b282      	uxth	r2, r0
 8003ca6:	9600      	str	r6, [sp, #0]
 8003ca8:	2332      	movs	r3, #50	; 0x32
 8003caa:	0029      	movs	r1, r5
 8003cac:	9803      	ldr	r0, [sp, #12]
 8003cae:	f009 fb8f 	bl	800d3d0 <writePxMutex>
 8003cb2:	3401      	adds	r4, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003cb4:	2c07      	cmp	r4, #7
 8003cb6:	d1ed      	bne.n	8003c94 <DisplayTopology+0x44>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003cb8:	2301      	movs	r3, #1
 8003cba:	425b      	negs	r3, r3
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	3333      	adds	r3, #51	; 0x33
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	4941      	ldr	r1, [pc, #260]	; (8003dc8 <DisplayTopology+0x178>)
 8003cc4:	9803      	ldr	r0, [sp, #12]
 8003cc6:	f009 fb83 	bl	800d3d0 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003cca:	4b40      	ldr	r3, [pc, #256]	; (8003dcc <DisplayTopology+0x17c>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d065      	beq.n	8003d9e <DisplayTopology+0x14e>
 8003cd2:	2600      	movs	r6, #0
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cd4:	2701      	movs	r7, #1
 8003cd6:	427f      	negs	r7, r7
		HAL_MAX_DELAY);
		/* Module PN */
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003cd8:	4b3d      	ldr	r3, [pc, #244]	; (8003dd0 <DisplayTopology+0x180>)
 8003cda:	4699      	mov	r9, r3
 8003cdc:	230e      	movs	r3, #14
 8003cde:	444b      	add	r3, r9
 8003ce0:	469a      	mov	sl, r3
 8003ce2:	e02a      	b.n	8003d3a <DisplayTopology+0xea>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003ce4:	2307      	movs	r3, #7
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	08d2      	lsrs	r2, r2, #3
 8003cea:	493a      	ldr	r1, [pc, #232]	; (8003dd4 <DisplayTopology+0x184>)
 8003cec:	4833      	ldr	r0, [pc, #204]	; (8003dbc <DisplayTopology+0x16c>)
 8003cee:	f00f fb59 	bl	80133a4 <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cf2:	4d32      	ldr	r5, [pc, #200]	; (8003dbc <DisplayTopology+0x16c>)
 8003cf4:	0028      	movs	r0, r5
 8003cf6:	f7fc fa0f 	bl	8000118 <strlen>
 8003cfa:	b282      	uxth	r2, r0
 8003cfc:	9700      	str	r7, [sp, #0]
 8003cfe:	2332      	movs	r3, #50	; 0x32
 8003d00:	0029      	movs	r1, r5
 8003d02:	9803      	ldr	r0, [sp, #12]
 8003d04:	f009 fb64 	bl	800d3d0 <writePxMutex>
 8003d08:	3402      	adds	r4, #2
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003d0a:	42b4      	cmp	r4, r6
 8003d0c:	d007      	beq.n	8003d1e <DisplayTopology+0xce>
			if(!array[row][col])
 8003d0e:	8822      	ldrh	r2, [r4, #0]
 8003d10:	2a00      	cmp	r2, #0
 8003d12:	d1e7      	bne.n	8003ce4 <DisplayTopology+0x94>
				sprintf(pcUserMessage,"%d\t",0);
 8003d14:	4930      	ldr	r1, [pc, #192]	; (8003dd8 <DisplayTopology+0x188>)
 8003d16:	4829      	ldr	r0, [pc, #164]	; (8003dbc <DisplayTopology+0x16c>)
 8003d18:	f00f fb44 	bl	80133a4 <sprintf>
 8003d1c:	e7e9      	b.n	8003cf2 <DisplayTopology+0xa2>
 8003d1e:	4646      	mov	r6, r8
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003d20:	9700      	str	r7, [sp, #0]
 8003d22:	2332      	movs	r3, #50	; 0x32
 8003d24:	2202      	movs	r2, #2
 8003d26:	492d      	ldr	r1, [pc, #180]	; (8003ddc <DisplayTopology+0x18c>)
 8003d28:	9803      	ldr	r0, [sp, #12]
 8003d2a:	f009 fb51 	bl	800d3d0 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003d2e:	3601      	adds	r6, #1
 8003d30:	b2f6      	uxtb	r6, r6
 8003d32:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <DisplayTopology+0x17c>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	42b3      	cmp	r3, r6
 8003d38:	d931      	bls.n	8003d9e <DisplayTopology+0x14e>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003d3a:	1c72      	adds	r2, r6, #1
 8003d3c:	4c1f      	ldr	r4, [pc, #124]	; (8003dbc <DisplayTopology+0x16c>)
 8003d3e:	4928      	ldr	r1, [pc, #160]	; (8003de0 <DisplayTopology+0x190>)
 8003d40:	0020      	movs	r0, r4
 8003d42:	f00f fb2f 	bl	80133a4 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d46:	0020      	movs	r0, r4
 8003d48:	f7fc f9e6 	bl	8000118 <strlen>
 8003d4c:	b282      	uxth	r2, r0
 8003d4e:	9700      	str	r7, [sp, #0]
 8003d50:	2332      	movs	r3, #50	; 0x32
 8003d52:	0021      	movs	r1, r4
 8003d54:	9803      	ldr	r0, [sp, #12]
 8003d56:	f009 fb3b 	bl	800d3d0 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003d5a:	2516      	movs	r5, #22
 8003d5c:	4375      	muls	r5, r6
 8003d5e:	464b      	mov	r3, r9
 8003d60:	5aeb      	ldrh	r3, [r5, r3]
 8003d62:	0059      	lsls	r1, r3, #1
 8003d64:	18c9      	adds	r1, r1, r3
 8003d66:	0049      	lsls	r1, r1, #1
 8003d68:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <DisplayTopology+0x194>)
 8003d6a:	18c9      	adds	r1, r1, r3
 8003d6c:	2205      	movs	r2, #5
 8003d6e:	0020      	movs	r0, r4
 8003d70:	f00f fb6d 	bl	801344e <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003d74:	9700      	str	r7, [sp, #0]
 8003d76:	2332      	movs	r3, #50	; 0x32
 8003d78:	2205      	movs	r2, #5
 8003d7a:	0021      	movs	r1, r4
 8003d7c:	9c03      	ldr	r4, [sp, #12]
 8003d7e:	0020      	movs	r0, r4
 8003d80:	f009 fb26 	bl	800d3d0 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003d84:	9700      	str	r7, [sp, #0]
 8003d86:	2332      	movs	r3, #50	; 0x32
 8003d88:	2201      	movs	r2, #1
 8003d8a:	4917      	ldr	r1, [pc, #92]	; (8003de8 <DisplayTopology+0x198>)
 8003d8c:	0020      	movs	r0, r4
 8003d8e:	f009 fb1f 	bl	800d3d0 <writePxMutex>
 8003d92:	1cac      	adds	r4, r5, #2
 8003d94:	444c      	add	r4, r9
 8003d96:	4455      	add	r5, sl
				sprintf(pcUserMessage,"%d\t",0);
 8003d98:	46b0      	mov	r8, r6
 8003d9a:	002e      	movs	r6, r5
 8003d9c:	e7b7      	b.n	8003d0e <DisplayTopology+0xbe>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003d9e:	2301      	movs	r3, #1
 8003da0:	425b      	negs	r3, r3
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	3333      	adds	r3, #51	; 0x33
 8003da6:	2201      	movs	r2, #1
 8003da8:	4910      	ldr	r1, [pc, #64]	; (8003dec <DisplayTopology+0x19c>)
 8003daa:	9803      	ldr	r0, [sp, #12]
 8003dac:	f009 fb10 	bl	800d3d0 <writePxMutex>
}
 8003db0:	b004      	add	sp, #16
 8003db2:	bc1c      	pop	{r2, r3, r4}
 8003db4:	4690      	mov	r8, r2
 8003db6:	4699      	mov	r9, r3
 8003db8:	46a2      	mov	sl, r4
 8003dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dbc:	200010a8 	.word	0x200010a8
 8003dc0:	08017ac4 	.word	0x08017ac4
 8003dc4:	08017ad8 	.word	0x08017ad8
 8003dc8:	08018f5c 	.word	0x08018f5c
 8003dcc:	2000001c 	.word	0x2000001c
 8003dd0:	20000a78 	.word	0x20000a78
 8003dd4:	08017af0 	.word	0x08017af0
 8003dd8:	08017aec 	.word	0x08017aec
 8003ddc:	0801796c 	.word	0x0801796c
 8003de0:	08017ae0 	.word	0x08017ae0
 8003de4:	08017b2c 	.word	0x08017b2c
 8003de8:	08017ad4 	.word	0x08017ad4
 8003dec:	08019120 	.word	0x08019120

08003df0 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003df2:	46c6      	mov	lr, r8
 8003df4:	b500      	push	{lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	0005      	movs	r5, r0
 8003dfa:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003dfc:	4c30      	ldr	r4, [pc, #192]	; (8003ec0 <DisplayPortsDir+0xd0>)
 8003dfe:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <DisplayPortsDir+0xd4>)
 8003e00:	0022      	movs	r2, r4
 8003e02:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e04:	c243      	stmia	r2!, {r0, r1, r6}
 8003e06:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e08:	c243      	stmia	r2!, {r0, r1, r6}
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e0e:	0020      	movs	r0, r4
 8003e10:	f7fc f982 	bl	8000118 <strlen>
 8003e14:	b282      	uxth	r2, r0
 8003e16:	2301      	movs	r3, #1
 8003e18:	425b      	negs	r3, r3
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	3333      	adds	r3, #51	; 0x33
 8003e1e:	0021      	movs	r1, r4
 8003e20:	0028      	movs	r0, r5
 8003e22:	f009 fad5 	bl	800d3d0 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003e26:	4b28      	ldr	r3, [pc, #160]	; (8003ec8 <DisplayPortsDir+0xd8>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	4690      	mov	r8, r2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d02c      	beq.n	8003e8c <DisplayPortsDir+0x9c>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e32:	4e26      	ldr	r6, [pc, #152]	; (8003ecc <DisplayPortsDir+0xdc>)
 8003e34:	e025      	b.n	8003e82 <DisplayPortsDir+0x92>
 8003e36:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003e38:	2c0a      	cmp	r4, #10
 8003e3a:	d01a      	beq.n	8003e72 <DisplayPortsDir+0x82>
 8003e3c:	1c5c      	adds	r4, r3, #1
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e3e:	5ba9      	ldrh	r1, [r5, r6]
 8003e40:	2280      	movs	r2, #128	; 0x80
 8003e42:	0212      	lsls	r2, r2, #8
 8003e44:	411a      	asrs	r2, r3
 8003e46:	420a      	tst	r2, r1
 8003e48:	d0f5      	beq.n	8003e36 <DisplayPortsDir+0x46>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003e4a:	4f1d      	ldr	r7, [pc, #116]	; (8003ec0 <DisplayPortsDir+0xd0>)
 8003e4c:	0023      	movs	r3, r4
 8003e4e:	4642      	mov	r2, r8
 8003e50:	491f      	ldr	r1, [pc, #124]	; (8003ed0 <DisplayPortsDir+0xe0>)
 8003e52:	0038      	movs	r0, r7
 8003e54:	f00f faa6 	bl	80133a4 <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003e58:	0038      	movs	r0, r7
 8003e5a:	f7fc f95d 	bl	8000118 <strlen>
 8003e5e:	b282      	uxth	r2, r0
 8003e60:	2301      	movs	r3, #1
 8003e62:	425b      	negs	r3, r3
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	3333      	adds	r3, #51	; 0x33
 8003e68:	0039      	movs	r1, r7
 8003e6a:	9803      	ldr	r0, [sp, #12]
 8003e6c:	f009 fab0 	bl	800d3d0 <writePxMutex>
 8003e70:	e7e1      	b.n	8003e36 <DisplayPortsDir+0x46>
	for(uint8_t i =1; i <= N; i++){
 8003e72:	4643      	mov	r3, r8
 8003e74:	3301      	adds	r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	4698      	mov	r8, r3
 8003e7a:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <DisplayPortsDir+0xd8>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	4543      	cmp	r3, r8
 8003e80:	d304      	bcc.n	8003e8c <DisplayPortsDir+0x9c>
void DisplayPortsDir(uint8_t port){
 8003e82:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e84:	4642      	mov	r2, r8
 8003e86:	1e55      	subs	r5, r2, #1
 8003e88:	006d      	lsls	r5, r5, #1
 8003e8a:	e7d7      	b.n	8003e3c <DisplayPortsDir+0x4c>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003e8c:	4c0c      	ldr	r4, [pc, #48]	; (8003ec0 <DisplayPortsDir+0xd0>)
 8003e8e:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <DisplayPortsDir+0xe4>)
 8003e90:	0022      	movs	r2, r4
 8003e92:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003e94:	c223      	stmia	r2!, {r0, r1, r5}
 8003e96:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003e98:	c223      	stmia	r2!, {r0, r1, r5}
 8003e9a:	cb03      	ldmia	r3!, {r0, r1}
 8003e9c:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e9e:	0020      	movs	r0, r4
 8003ea0:	f7fc f93a 	bl	8000118 <strlen>
 8003ea4:	b282      	uxth	r2, r0
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	425b      	negs	r3, r3
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	3333      	adds	r3, #51	; 0x33
 8003eae:	0021      	movs	r1, r4
 8003eb0:	9803      	ldr	r0, [sp, #12]
 8003eb2:	f009 fa8d 	bl	800d3d0 <writePxMutex>
	HAL_MAX_DELAY);
}
 8003eb6:	b004      	add	sp, #16
 8003eb8:	bc04      	pop	{r2}
 8003eba:	4690      	mov	r8, r2
 8003ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	200010a8 	.word	0x200010a8
 8003ec4:	08017a74 	.word	0x08017a74
 8003ec8:	2000001c 	.word	0x2000001c
 8003ecc:	20006e40 	.word	0x20006e40
 8003ed0:	08017a90 	.word	0x08017a90
 8003ed4:	08017aa4 	.word	0x08017aa4

08003ed8 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eda:	46d6      	mov	lr, sl
 8003edc:	b500      	push	{lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003ee2:	f009 fcb7 	bl	800d854 <FreeRTOS_CLIGetOutputBuffer>
 8003ee6:	0004      	movs	r4, r0
	
	strcpy((char* )pcOutputString,"");
 8003ee8:	2300      	movs	r3, #0
 8003eea:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003eec:	4b8d      	ldr	r3, [pc, #564]	; (8004124 <DisplayModuleStatus+0x24c>)
 8003eee:	781a      	ldrb	r2, [r3, #0]
 8003ef0:	4d8d      	ldr	r5, [pc, #564]	; (8004128 <DisplayModuleStatus+0x250>)
 8003ef2:	498e      	ldr	r1, [pc, #568]	; (800412c <DisplayModuleStatus+0x254>)
 8003ef4:	0028      	movs	r0, r5
 8003ef6:	f00f fa55 	bl	80133a4 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003efa:	0029      	movs	r1, r5
 8003efc:	0020      	movs	r0, r4
 8003efe:	f00f fa71 	bl	80133e4 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003f02:	4b8b      	ldr	r3, [pc, #556]	; (8004130 <DisplayModuleStatus+0x258>)
 8003f04:	781a      	ldrb	r2, [r3, #0]
 8003f06:	498b      	ldr	r1, [pc, #556]	; (8004134 <DisplayModuleStatus+0x25c>)
 8003f08:	0028      	movs	r0, r5
 8003f0a:	f00f fa4b 	bl	80133a4 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f0e:	0029      	movs	r1, r5
 8003f10:	0020      	movs	r0, r4
 8003f12:	f00f fa67 	bl	80133e4 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003f16:	2305      	movs	r3, #5
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	3b03      	subs	r3, #3
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	4986      	ldr	r1, [pc, #536]	; (8004138 <DisplayModuleStatus+0x260>)
 8003f20:	0028      	movs	r0, r5
 8003f22:	f00f fa3f 	bl	80133a4 <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003f26:	0029      	movs	r1, r5
 8003f28:	0020      	movs	r0, r4
 8003f2a:	f00f fa5b 	bl	80133e4 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003f2e:	4a83      	ldr	r2, [pc, #524]	; (800413c <DisplayModuleStatus+0x264>)
 8003f30:	4983      	ldr	r1, [pc, #524]	; (8004140 <DisplayModuleStatus+0x268>)
 8003f32:	0028      	movs	r0, r5
 8003f34:	f00f fa36 	bl	80133a4 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f38:	0029      	movs	r1, r5
 8003f3a:	0020      	movs	r0, r4
 8003f3c:	f00f fa52 	bl	80133e4 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003f40:	4a80      	ldr	r2, [pc, #512]	; (8004144 <DisplayModuleStatus+0x26c>)
 8003f42:	4981      	ldr	r1, [pc, #516]	; (8004148 <DisplayModuleStatus+0x270>)
 8003f44:	0028      	movs	r0, r5
 8003f46:	f00f fa2d 	bl	80133a4 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f4a:	0029      	movs	r1, r5
 8003f4c:	0020      	movs	r0, r4
 8003f4e:	f00f fa49 	bl	80133e4 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003f52:	4b7e      	ldr	r3, [pc, #504]	; (800414c <DisplayModuleStatus+0x274>)
 8003f54:	002a      	movs	r2, r5
 8003f56:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003f58:	c243      	stmia	r2!, {r0, r1, r6}
 8003f5a:	6819      	ldr	r1, [r3, #0]
 8003f5c:	6011      	str	r1, [r2, #0]
 8003f5e:	8899      	ldrh	r1, [r3, #4]
 8003f60:	8091      	strh	r1, [r2, #4]
 8003f62:	799b      	ldrb	r3, [r3, #6]
 8003f64:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003f66:	0029      	movs	r1, r5
 8003f68:	0020      	movs	r0, r4
 8003f6a:	f00f fa3b 	bl	80133e4 <strcat>
 8003f6e:	2701      	movs	r7, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
 8003f70:	4d6d      	ldr	r5, [pc, #436]	; (8004128 <DisplayModuleStatus+0x250>)
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8003f72:	4b77      	ldr	r3, [pc, #476]	; (8004150 <DisplayModuleStatus+0x278>)
 8003f74:	469a      	mov	sl, r3
 8003f76:	e00e      	b.n	8003f96 <DisplayModuleStatus+0xbe>
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 8003f78:	4b6b      	ldr	r3, [pc, #428]	; (8004128 <DisplayModuleStatus+0x250>)
 8003f7a:	4a76      	ldr	r2, [pc, #472]	; (8004154 <DisplayModuleStatus+0x27c>)
 8003f7c:	6811      	ldr	r1, [r2, #0]
 8003f7e:	6019      	str	r1, [r3, #0]
 8003f80:	8891      	ldrh	r1, [r2, #4]
 8003f82:	8099      	strh	r1, [r3, #4]
 8003f84:	7992      	ldrb	r2, [r2, #6]
 8003f86:	719a      	strb	r2, [r3, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8003f88:	4967      	ldr	r1, [pc, #412]	; (8004128 <DisplayModuleStatus+0x250>)
 8003f8a:	0020      	movs	r0, r4
 8003f8c:	f00f fa2a 	bl	80133e4 <strcat>
 8003f90:	3701      	adds	r7, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003f92:	2f07      	cmp	r7, #7
 8003f94:	d039      	beq.n	800400a <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage,"P%d: ",i);
 8003f96:	003a      	movs	r2, r7
 8003f98:	496f      	ldr	r1, [pc, #444]	; (8004158 <DisplayModuleStatus+0x280>)
 8003f9a:	0028      	movs	r0, r5
 8003f9c:	f00f fa02 	bl	80133a4 <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8003fa0:	0029      	movs	r1, r5
 8003fa2:	0020      	movs	r0, r4
 8003fa4:	f00f fa1e 	bl	80133e4 <strcat>
		switch(portStatus[i]){
 8003fa8:	4653      	mov	r3, sl
 8003faa:	5cfb      	ldrb	r3, [r7, r3]
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d8eb      	bhi.n	8003f88 <DisplayModuleStatus+0xb0>
 8003fb0:	4653      	mov	r3, sl
 8003fb2:	5cfb      	ldrb	r3, [r7, r3]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4a69      	ldr	r2, [pc, #420]	; (800415c <DisplayModuleStatus+0x284>)
 8003fb8:	58d3      	ldr	r3, [r2, r3]
 8003fba:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8003fbc:	495a      	ldr	r1, [pc, #360]	; (8004128 <DisplayModuleStatus+0x250>)
 8003fbe:	4b68      	ldr	r3, [pc, #416]	; (8004160 <DisplayModuleStatus+0x288>)
 8003fc0:	000a      	movs	r2, r1
 8003fc2:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fc4:	c243      	stmia	r2!, {r0, r1, r6}
 8003fc6:	cb03      	ldmia	r3!, {r0, r1}
 8003fc8:	c203      	stmia	r2!, {r0, r1}
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	7013      	strb	r3, [r2, #0]
				break;
 8003fce:	e7db      	b.n	8003f88 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Streaming\n\r");
 8003fd0:	4a55      	ldr	r2, [pc, #340]	; (8004128 <DisplayModuleStatus+0x250>)
 8003fd2:	4b64      	ldr	r3, [pc, #400]	; (8004164 <DisplayModuleStatus+0x28c>)
 8003fd4:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fd6:	c243      	stmia	r2!, {r0, r1, r6}
				break;
 8003fd8:	e7d6      	b.n	8003f88 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8003fda:	4953      	ldr	r1, [pc, #332]	; (8004128 <DisplayModuleStatus+0x250>)
 8003fdc:	4b62      	ldr	r3, [pc, #392]	; (8004168 <DisplayModuleStatus+0x290>)
 8003fde:	000a      	movs	r2, r1
 8003fe0:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fe2:	c243      	stmia	r2!, {r0, r1, r6}
 8003fe4:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fe6:	c243      	stmia	r2!, {r0, r1, r6}
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	8013      	strh	r3, [r2, #0]
				break;
 8003fec:	e7cc      	b.n	8003f88 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8003fee:	494e      	ldr	r1, [pc, #312]	; (8004128 <DisplayModuleStatus+0x250>)
 8003ff0:	4b5e      	ldr	r3, [pc, #376]	; (800416c <DisplayModuleStatus+0x294>)
 8003ff2:	000a      	movs	r2, r1
 8003ff4:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ff6:	c243      	stmia	r2!, {r0, r1, r6}
 8003ff8:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ffa:	c243      	stmia	r2!, {r0, r1, r6}
 8003ffc:	6819      	ldr	r1, [r3, #0]
 8003ffe:	6011      	str	r1, [r2, #0]
 8004000:	8899      	ldrh	r1, [r3, #4]
 8004002:	8091      	strh	r1, [r2, #4]
 8004004:	799b      	ldrb	r3, [r3, #6]
 8004006:	7193      	strb	r3, [r2, #6]
				break;
 8004008:	e7be      	b.n	8003f88 <DisplayModuleStatus+0xb0>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 800400a:	4947      	ldr	r1, [pc, #284]	; (8004128 <DisplayModuleStatus+0x250>)
 800400c:	4b58      	ldr	r3, [pc, #352]	; (8004170 <DisplayModuleStatus+0x298>)
 800400e:	000a      	movs	r2, r1
 8004010:	cb61      	ldmia	r3!, {r0, r5, r6}
 8004012:	c261      	stmia	r2!, {r0, r5, r6}
 8004014:	cb61      	ldmia	r3!, {r0, r5, r6}
 8004016:	c261      	stmia	r2!, {r0, r5, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 8004018:	0020      	movs	r0, r4
 800401a:	f00f f9e3 	bl	80133e4 <strcat>
 800401e:	4f55      	ldr	r7, [pc, #340]	; (8004174 <DisplayModuleStatus+0x29c>)
 8004020:	2601      	movs	r6, #1
 8004022:	e00d      	b.n	8004040 <DisplayModuleStatus+0x168>
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004024:	4d40      	ldr	r5, [pc, #256]	; (8004128 <DisplayModuleStatus+0x250>)
 8004026:	0032      	movs	r2, r6
 8004028:	4953      	ldr	r1, [pc, #332]	; (8004178 <DisplayModuleStatus+0x2a0>)
 800402a:	0028      	movs	r0, r5
 800402c:	f00f f9ba 	bl	80133a4 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004030:	0029      	movs	r1, r5
 8004032:	0020      	movs	r0, r4
 8004034:	f00f f9d6 	bl	80133e4 <strcat>
 8004038:	3601      	adds	r6, #1
 800403a:	3738      	adds	r7, #56	; 0x38
	for(char i =1; i <= 6; i++){
 800403c:	2e07      	cmp	r6, #7
 800403e:	d018      	beq.n	8004072 <DisplayModuleStatus+0x19a>
		if(streamDMA[i - 1].Instance == 0){
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0ee      	beq.n	8004024 <DisplayModuleStatus+0x14c>
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004046:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004048:	f007 fb1c 	bl	800b684 <GetPort>
 800404c:	0005      	movs	r5, r0
 800404e:	00b3      	lsls	r3, r6, #2
 8004050:	3b04      	subs	r3, #4
 8004052:	4a4a      	ldr	r2, [pc, #296]	; (800417c <DisplayModuleStatus+0x2a4>)
 8004054:	58d0      	ldr	r0, [r2, r3]
 8004056:	f007 fb15 	bl	800b684 <GetPort>
 800405a:	9000      	str	r0, [sp, #0]
 800405c:	002b      	movs	r3, r5
 800405e:	0032      	movs	r2, r6
 8004060:	4947      	ldr	r1, [pc, #284]	; (8004180 <DisplayModuleStatus+0x2a8>)
 8004062:	4831      	ldr	r0, [pc, #196]	; (8004128 <DisplayModuleStatus+0x250>)
 8004064:	f00f f99e 	bl	80133a4 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004068:	492f      	ldr	r1, [pc, #188]	; (8004128 <DisplayModuleStatus+0x250>)
 800406a:	0020      	movs	r0, r4
 800406c:	f00f f9ba 	bl	80133e4 <strcat>
 8004070:	e7e2      	b.n	8004038 <DisplayModuleStatus+0x160>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8004072:	0020      	movs	r0, r4
 8004074:	f7fc f850 	bl	8000118 <strlen>
 8004078:	1820      	adds	r0, r4, r0
 800407a:	2203      	movs	r2, #3
 800407c:	4941      	ldr	r1, [pc, #260]	; (8004184 <DisplayModuleStatus+0x2ac>)
 800407e:	f00e ff8e 	bl	8012f9e <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8004082:	0020      	movs	r0, r4
 8004084:	f7fc f848 	bl	8000118 <strlen>
 8004088:	1820      	adds	r0, r4, r0
 800408a:	221d      	movs	r2, #29
 800408c:	493e      	ldr	r1, [pc, #248]	; (8004188 <DisplayModuleStatus+0x2b0>)
 800408e:	f00e ff86 	bl	8012f9e <memcpy>
	temp =strlen((char* )pcOutputString);
 8004092:	0020      	movs	r0, r4
 8004094:	f7fc f840 	bl	8000118 <strlen>
 8004098:	4682      	mov	sl, r0
 800409a:	2200      	movs	r2, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800409c:	4f3b      	ldr	r7, [pc, #236]	; (800418c <DisplayModuleStatus+0x2b4>)
 800409e:	4e21      	ldr	r6, [pc, #132]	; (8004124 <DisplayModuleStatus+0x24c>)
 80040a0:	e002      	b.n	80040a8 <DisplayModuleStatus+0x1d0>
 80040a2:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80040a4:	2d06      	cmp	r5, #6
 80040a6:	d013      	beq.n	80040d0 <DisplayModuleStatus+0x1f8>
 80040a8:	1c55      	adds	r5, r2, #1
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040aa:	7833      	ldrb	r3, [r6, #0]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	5bd9      	ldrh	r1, [r3, r7]
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	4113      	asrs	r3, r2
 80040b8:	420b      	tst	r3, r1
 80040ba:	d0f2      	beq.n	80040a2 <DisplayModuleStatus+0x1ca>
		{
			sprintf(pcUserMessage,"P%d ",p);
 80040bc:	002a      	movs	r2, r5
 80040be:	4934      	ldr	r1, [pc, #208]	; (8004190 <DisplayModuleStatus+0x2b8>)
 80040c0:	4819      	ldr	r0, [pc, #100]	; (8004128 <DisplayModuleStatus+0x250>)
 80040c2:	f00f f96f 	bl	80133a4 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80040c6:	4918      	ldr	r1, [pc, #96]	; (8004128 <DisplayModuleStatus+0x250>)
 80040c8:	0020      	movs	r0, r4
 80040ca:	f00f f98b 	bl	80133e4 <strcat>
 80040ce:	e7e8      	b.n	80040a2 <DisplayModuleStatus+0x1ca>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 80040d0:	0020      	movs	r0, r4
 80040d2:	f7fc f821 	bl	8000118 <strlen>
 80040d6:	4653      	mov	r3, sl
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	0c1b      	lsrs	r3, r3, #16
 80040dc:	4298      	cmp	r0, r3
 80040de:	d00e      	beq.n	80040fe <DisplayModuleStatus+0x226>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 80040e0:	0020      	movs	r0, r4
 80040e2:	f7fc f819 	bl	8000118 <strlen>
 80040e6:	1820      	adds	r0, r4, r0
 80040e8:	2203      	movs	r2, #3
 80040ea:	4926      	ldr	r1, [pc, #152]	; (8004184 <DisplayModuleStatus+0x2ac>)
 80040ec:	f00e ff57 	bl	8012f9e <memcpy>
	
	/* Display output */
	if(port)
 80040f0:	9b03      	ldr	r3, [sp, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <DisplayModuleStatus+0x232>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 80040f6:	b004      	add	sp, #16
 80040f8:	bc04      	pop	{r2}
 80040fa:	4692      	mov	sl, r2
 80040fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 80040fe:	1820      	adds	r0, r4, r0
 8004100:	2205      	movs	r2, #5
 8004102:	4924      	ldr	r1, [pc, #144]	; (8004194 <DisplayModuleStatus+0x2bc>)
 8004104:	f00e ff4b 	bl	8012f9e <memcpy>
 8004108:	e7ea      	b.n	80040e0 <DisplayModuleStatus+0x208>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800410a:	0020      	movs	r0, r4
 800410c:	f7fc f804 	bl	8000118 <strlen>
 8004110:	b282      	uxth	r2, r0
 8004112:	2301      	movs	r3, #1
 8004114:	425b      	negs	r3, r3
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	3333      	adds	r3, #51	; 0x33
 800411a:	0021      	movs	r1, r4
 800411c:	9803      	ldr	r0, [sp, #12]
 800411e:	f009 f957 	bl	800d3d0 <writePxMutex>
}
 8004122:	e7e8      	b.n	80040f6 <DisplayModuleStatus+0x21e>
 8004124:	20001076 	.word	0x20001076
 8004128:	200010a8 	.word	0x200010a8
 800412c:	080178b8 	.word	0x080178b8
 8004130:	20000a77 	.word	0x20000a77
 8004134:	080178d4 	.word	0x080178d4
 8004138:	080178f0 	.word	0x080178f0
 800413c:	08017910 	.word	0x08017910
 8004140:	0801791c 	.word	0x0801791c
 8004144:	08017934 	.word	0x08017934
 8004148:	08017940 	.word	0x08017940
 800414c:	0801795c 	.word	0x0801795c
 8004150:	200010f8 	.word	0x200010f8
 8004154:	08017978 	.word	0x08017978
 8004158:	08017970 	.word	0x08017970
 800415c:	08017894 	.word	0x08017894
 8004160:	08017980 	.word	0x08017980
 8004164:	08017998 	.word	0x08017998
 8004168:	080179a4 	.word	0x080179a4
 800416c:	080179c0 	.word	0x080179c0
 8004170:	080179e0 	.word	0x080179e0
 8004174:	20001994 	.word	0x20001994
 8004178:	080179f8 	.word	0x080179f8
 800417c:	200014a8 	.word	0x200014a8
 8004180:	08017a14 	.word	0x08017a14
 8004184:	0801796c 	.word	0x0801796c
 8004188:	08017a44 	.word	0x08017a44
 800418c:	20006e40 	.word	0x20006e40
 8004190:	08017a64 	.word	0x08017a64
 8004194:	08017a6c 	.word	0x08017a6c

08004198 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419a:	46c6      	mov	lr, r8
 800419c:	b500      	push	{lr}
 800419e:	0005      	movs	r5, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 80041a0:	4929      	ldr	r1, [pc, #164]	; (8004248 <GetID+0xb0>)
 80041a2:	f7fb ffaf 	bl	8000104 <strcmp>
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d010      	beq.n	80041cc <GetID+0x34>
		return myID;
	else if(!strcmp(string,"all"))
 80041aa:	4928      	ldr	r1, [pc, #160]	; (800424c <GetID+0xb4>)
 80041ac:	0028      	movs	r0, r5
 80041ae:	f7fb ffa9 	bl	8000104 <strcmp>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	d045      	beq.n	8004242 <GetID+0xaa>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 80041b6:	782b      	ldrb	r3, [r5, #0]
 80041b8:	4698      	mov	r8, r3
 80041ba:	2b23      	cmp	r3, #35	; 0x23
 80041bc:	d00b      	beq.n	80041d6 <GetID+0x3e>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 80041be:	4b24      	ldr	r3, [pc, #144]	; (8004250 <GetID+0xb8>)
 80041c0:	781f      	ldrb	r7, [r3, #0]
 80041c2:	2f00      	cmp	r7, #0
 80041c4:	d02a      	beq.n	800421c <GetID+0x84>
 80041c6:	4e23      	ldr	r6, [pc, #140]	; (8004254 <GetID+0xbc>)
 80041c8:	2400      	movs	r4, #0
 80041ca:	e01c      	b.n	8004206 <GetID+0x6e>
		return myID;
 80041cc:	4b22      	ldr	r3, [pc, #136]	; (8004258 <GetID+0xc0>)
 80041ce:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 80041d0:	bc04      	pop	{r2}
 80041d2:	4690      	mov	r8, r2
 80041d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id =atol(string + 1);
 80041d6:	1c68      	adds	r0, r5, #1
 80041d8:	f00e fc57 	bl	8012a8a <atol>
 80041dc:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <GetID+0x52>
 80041e2:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <GetID+0xb8>)
 80041e4:	7812      	ldrb	r2, [r2, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d206      	bcs.n	80041f8 <GetID+0x60>
		else if(id == myID)
 80041ea:	4a1b      	ldr	r2, [pc, #108]	; (8004258 <GetID+0xc0>)
 80041ec:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;
 80041ee:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d1ed      	bne.n	80041d0 <GetID+0x38>
			return myID;
 80041f4:	b210      	sxth	r0, r2
 80041f6:	e7eb      	b.n	80041d0 <GetID+0x38>
			return id;
 80041f8:	b218      	sxth	r0, r3
 80041fa:	e7e9      	b.n	80041d0 <GetID+0x38>
		for(i =0; i < N; i++){
 80041fc:	3401      	adds	r4, #1
 80041fe:	b2e4      	uxtb	r4, r4
 8004200:	360a      	adds	r6, #10
 8004202:	42bc      	cmp	r4, r7
 8004204:	d00a      	beq.n	800421c <GetID+0x84>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 8004206:	0031      	movs	r1, r6
 8004208:	0028      	movs	r0, r5
 800420a:	f7fb ff7b 	bl	8000104 <strcmp>
 800420e:	2800      	cmp	r0, #0
 8004210:	d1f4      	bne.n	80041fc <GetID+0x64>
 8004212:	4643      	mov	r3, r8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f1      	beq.n	80041fc <GetID+0x64>
				return (i);
 8004218:	b220      	sxth	r0, r4
 800421a:	e7d9      	b.n	80041d0 <GetID+0x38>
 800421c:	4f0f      	ldr	r7, [pc, #60]	; (800425c <GetID+0xc4>)
		for(i =0; i < N; i++){
 800421e:	2600      	movs	r6, #0
			if(!strcmp(string,groupAlias[i]))
 8004220:	0039      	movs	r1, r7
 8004222:	0028      	movs	r0, r5
 8004224:	f7fb ff6e 	bl	8000104 <strcmp>
 8004228:	2800      	cmp	r0, #0
 800422a:	d005      	beq.n	8004238 <GetID+0xa0>
 800422c:	3601      	adds	r6, #1
 800422e:	370a      	adds	r7, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8004230:	2e0a      	cmp	r6, #10
 8004232:	d1f5      	bne.n	8004220 <GetID+0x88>
		return BOS_ERR_WrongName;
 8004234:	2064      	movs	r0, #100	; 0x64
 8004236:	e7cb      	b.n	80041d0 <GetID+0x38>
				return (BOS_MULTICAST | (i << 8));
 8004238:	0234      	lsls	r4, r6, #8
 800423a:	20fe      	movs	r0, #254	; 0xfe
 800423c:	4320      	orrs	r0, r4
 800423e:	b200      	sxth	r0, r0
 8004240:	e7c6      	b.n	80041d0 <GetID+0x38>
		return BOS_BROADCAST;
 8004242:	20ff      	movs	r0, #255	; 0xff
 8004244:	e7c4      	b.n	80041d0 <GetID+0x38>
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	08017af8 	.word	0x08017af8
 800424c:	08017afc 	.word	0x08017afc
 8004250:	2000001c 	.word	0x2000001c
 8004254:	20000f68 	.word	0x20000f68
 8004258:	20001076 	.word	0x20001076
 800425c:	20000e5c 	.word	0x20000e5c

08004260 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 8004260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004262:	b083      	sub	sp, #12
 8004264:	9001      	str	r0, [sp, #4]
 8004266:	000d      	movs	r5, r1
 8004268:	4c2a      	ldr	r4, [pc, #168]	; (8004314 <NameModule+0xb4>)
 800426a:	0027      	movs	r7, r4
 800426c:	3710      	adds	r7, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 800426e:	0021      	movs	r1, r4
 8004270:	0028      	movs	r0, r5
 8004272:	f7fb ff47 	bl	8000104 <strcmp>
 8004276:	2800      	cmp	r0, #0
 8004278:	d043      	beq.n	8004302 <NameModule+0xa2>
 800427a:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 800427c:	42bc      	cmp	r4, r7
 800427e:	d1f6      	bne.n	800426e <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 8004280:	4b25      	ldr	r3, [pc, #148]	; (8004318 <NameModule+0xb8>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d90f      	bls.n	80042a8 <NameModule+0x48>
 8004288:	4c24      	ldr	r4, [pc, #144]	; (800431c <NameModule+0xbc>)
 800428a:	009f      	lsls	r7, r3, #2
 800428c:	18ff      	adds	r7, r7, r3
 800428e:	007f      	lsls	r7, r7, #1
 8004290:	0023      	movs	r3, r4
 8004292:	3b0a      	subs	r3, #10
 8004294:	18ff      	adds	r7, r7, r3
		if(!strcmp(alias,moduleAlias[i]))
 8004296:	0021      	movs	r1, r4
 8004298:	0028      	movs	r0, r5
 800429a:	f7fb ff33 	bl	8000104 <strcmp>
 800429e:	2800      	cmp	r0, #0
 80042a0:	d031      	beq.n	8004306 <NameModule+0xa6>
 80042a2:	340a      	adds	r4, #10
	for(i =1; i < N; i++){
 80042a4:	42bc      	cmp	r4, r7
 80042a6:	d1f6      	bne.n	8004296 <NameModule+0x36>
 80042a8:	4c1d      	ldr	r4, [pc, #116]	; (8004320 <NameModule+0xc0>)
 80042aa:	0027      	movs	r7, r4
 80042ac:	3764      	adds	r7, #100	; 0x64
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!strcmp(alias,groupAlias[i]))
 80042ae:	0021      	movs	r1, r4
 80042b0:	0028      	movs	r0, r5
 80042b2:	f7fb ff27 	bl	8000104 <strcmp>
 80042b6:	2800      	cmp	r0, #0
 80042b8:	d028      	beq.n	800430c <NameModule+0xac>
 80042ba:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 80042bc:	42bc      	cmp	r4, r7
 80042be:	d1f6      	bne.n	80042ae <NameModule+0x4e>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80042c0:	4c18      	ldr	r4, [pc, #96]	; (8004324 <NameModule+0xc4>)
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <NameModule+0xc8>)
 80042c4:	601c      	str	r4, [r3, #0]
 80042c6:	001e      	movs	r6, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80042cc:	0038      	movs	r0, r7
 80042ce:	f7fb ff23 	bl	8000118 <strlen>
 80042d2:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80042d4:	0039      	movs	r1, r7
 80042d6:	0028      	movs	r0, r5
 80042d8:	f00f f8a8 	bl	801342c <strncmp>
 80042dc:	2800      	cmp	r0, #0
 80042de:	d017      	beq.n	8004310 <NameModule+0xb0>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80042e0:	6864      	ldr	r4, [r4, #4]
 80042e2:	6034      	str	r4, [r6, #0]
 80042e4:	2c00      	cmp	r4, #0
 80042e6:	d1ef      	bne.n	80042c8 <NameModule+0x68>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 80042e8:	9b01      	ldr	r3, [sp, #4]
 80042ea:	0098      	lsls	r0, r3, #2
 80042ec:	469c      	mov	ip, r3
 80042ee:	4460      	add	r0, ip
 80042f0:	0040      	lsls	r0, r0, #1
 80042f2:	4e0e      	ldr	r6, [pc, #56]	; (800432c <NameModule+0xcc>)
 80042f4:	1980      	adds	r0, r0, r6
 80042f6:	0029      	movs	r1, r5
 80042f8:	f00f f890 	bl	801341c <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 80042fc:	f7ff f8a6 	bl	800344c <SaveEEalias>
	
	return result;
 8004300:	e002      	b.n	8004308 <NameModule+0xa8>
			return BOS_ERR_Keyword;
 8004302:	2006      	movs	r0, #6
 8004304:	e000      	b.n	8004308 <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 8004306:	2007      	movs	r0, #7
}
 8004308:	b003      	add	sp, #12
 800430a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 800430c:	2007      	movs	r0, #7
 800430e:	e7fb      	b.n	8004308 <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 8004310:	2008      	movs	r0, #8
 8004312:	e7f9      	b.n	8004308 <NameModule+0xa8>
 8004314:	080178a8 	.word	0x080178a8
 8004318:	2000001c 	.word	0x2000001c
 800431c:	20000f72 	.word	0x20000f72
 8004320:	20000e5c 	.word	0x20000e5c
 8004324:	20000098 	.word	0x20000098
 8004328:	20001100 	.word	0x20001100
 800432c:	20000f68 	.word	0x20000f68

08004330 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004332:	46c6      	mov	lr, r8
 8004334:	b500      	push	{lr}
 8004336:	0007      	movs	r7, r0
 8004338:	000e      	movs	r6, r1
 800433a:	4d3a      	ldr	r5, [pc, #232]	; (8004424 <AddModuleToGroup+0xf4>)
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 800433c:	2400      	movs	r4, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 800433e:	0029      	movs	r1, r5
 8004340:	0030      	movs	r0, r6
 8004342:	f7fb fedf 	bl	8000104 <strcmp>
 8004346:	2800      	cmp	r0, #0
 8004348:	d050      	beq.n	80043ec <AddModuleToGroup+0xbc>
	for(i =0; i < MaxNumOfGroups; i++){
 800434a:	3401      	adds	r4, #1
 800434c:	350a      	adds	r5, #10
 800434e:	2c0a      	cmp	r4, #10
 8004350:	d1f5      	bne.n	800433e <AddModuleToGroup+0xe>
 8004352:	4c35      	ldr	r4, [pc, #212]	; (8004428 <AddModuleToGroup+0xf8>)
 8004354:	0025      	movs	r5, r4
 8004356:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 8004358:	0021      	movs	r1, r4
 800435a:	0030      	movs	r0, r6
 800435c:	f7fb fed2 	bl	8000104 <strcmp>
 8004360:	2800      	cmp	r0, #0
 8004362:	d058      	beq.n	8004416 <AddModuleToGroup+0xe6>
 8004364:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 8004366:	42ac      	cmp	r4, r5
 8004368:	d1f6      	bne.n	8004358 <AddModuleToGroup+0x28>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 800436a:	4b30      	ldr	r3, [pc, #192]	; (800442c <AddModuleToGroup+0xfc>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d90f      	bls.n	8004392 <AddModuleToGroup+0x62>
 8004372:	4c2f      	ldr	r4, [pc, #188]	; (8004430 <AddModuleToGroup+0x100>)
 8004374:	009d      	lsls	r5, r3, #2
 8004376:	18ed      	adds	r5, r5, r3
 8004378:	006d      	lsls	r5, r5, #1
 800437a:	0023      	movs	r3, r4
 800437c:	3b0a      	subs	r3, #10
 800437e:	18ed      	adds	r5, r5, r3
		if(!strcmp(group,moduleAlias[j]))
 8004380:	0021      	movs	r1, r4
 8004382:	0030      	movs	r0, r6
 8004384:	f7fb febe 	bl	8000104 <strcmp>
 8004388:	2800      	cmp	r0, #0
 800438a:	d046      	beq.n	800441a <AddModuleToGroup+0xea>
 800438c:	340a      	adds	r4, #10
	for(j =1; j < N; j++){
 800438e:	42ac      	cmp	r4, r5
 8004390:	d1f6      	bne.n	8004380 <AddModuleToGroup+0x50>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check group alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004392:	4c28      	ldr	r4, [pc, #160]	; (8004434 <AddModuleToGroup+0x104>)
 8004394:	4b28      	ldr	r3, [pc, #160]	; (8004438 <AddModuleToGroup+0x108>)
 8004396:	601c      	str	r4, [r3, #0]
 8004398:	4698      	mov	r8, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800439e:	0028      	movs	r0, r5
 80043a0:	f7fb feba 	bl	8000118 <strlen>
 80043a4:	0002      	movs	r2, r0
		
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80043a6:	0029      	movs	r1, r5
 80043a8:	0030      	movs	r0, r6
 80043aa:	f00f f83f 	bl	801342c <strncmp>
 80043ae:	2800      	cmp	r0, #0
 80043b0:	d035      	beq.n	800441e <AddModuleToGroup+0xee>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80043b2:	6864      	ldr	r4, [r4, #4]
 80043b4:	4643      	mov	r3, r8
 80043b6:	601c      	str	r4, [r3, #0]
 80043b8:	2c00      	cmp	r4, #0
 80043ba:	d1ee      	bne.n	800439a <AddModuleToGroup+0x6a>
		}
	}
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!groupAlias[i][0]){
 80043bc:	4b19      	ldr	r3, [pc, #100]	; (8004424 <AddModuleToGroup+0xf4>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d01e      	beq.n	8004402 <AddModuleToGroup+0xd2>
 80043c4:	4b17      	ldr	r3, [pc, #92]	; (8004424 <AddModuleToGroup+0xf4>)
 80043c6:	330a      	adds	r3, #10
	for(i =0; i < MaxNumOfGroups; i++){
 80043c8:	3401      	adds	r4, #1
		if(!groupAlias[i][0]){
 80043ca:	781a      	ldrb	r2, [r3, #0]
 80043cc:	2a00      	cmp	r2, #0
 80043ce:	d019      	beq.n	8004404 <AddModuleToGroup+0xd4>
	for(i =0; i < MaxNumOfGroups; i++){
 80043d0:	3401      	adds	r4, #1
 80043d2:	330a      	adds	r3, #10
 80043d4:	2c0a      	cmp	r4, #10
 80043d6:	d1f8      	bne.n	80043ca <AddModuleToGroup+0x9a>
			break;
		}
	}
	
	/* 5. Add this module to the new group */
	groupModules[module - 1] |=(0x0001 << i);
 80043d8:	3f01      	subs	r7, #1
 80043da:	4918      	ldr	r1, [pc, #96]	; (800443c <AddModuleToGroup+0x10c>)
 80043dc:	007f      	lsls	r7, r7, #1
 80043de:	2201      	movs	r2, #1
 80043e0:	40a2      	lsls	r2, r4
 80043e2:	5a7b      	ldrh	r3, [r7, r1]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	527b      	strh	r3, [r7, r1]
	
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
 80043e8:	2000      	movs	r0, #0
 80043ea:	e007      	b.n	80043fc <AddModuleToGroup+0xcc>
			groupModules[module - 1] |=(0x0001 << i);
 80043ec:	3f01      	subs	r7, #1
 80043ee:	4913      	ldr	r1, [pc, #76]	; (800443c <AddModuleToGroup+0x10c>)
 80043f0:	007f      	lsls	r7, r7, #1
 80043f2:	2201      	movs	r2, #1
 80043f4:	40a2      	lsls	r2, r4
 80043f6:	5a7b      	ldrh	r3, [r7, r1]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	527b      	strh	r3, [r7, r1]
}
 80043fc:	bc04      	pop	{r2}
 80043fe:	4690      	mov	r8, r2
 8004400:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i =0; i < MaxNumOfGroups; i++){
 8004402:	2400      	movs	r4, #0
			strcpy(groupAlias[i],group);
 8004404:	00a0      	lsls	r0, r4, #2
 8004406:	1900      	adds	r0, r0, r4
 8004408:	0040      	lsls	r0, r0, #1
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <AddModuleToGroup+0xf4>)
 800440c:	1818      	adds	r0, r3, r0
 800440e:	0031      	movs	r1, r6
 8004410:	f00f f804 	bl	801341c <strcpy>
			break;
 8004414:	e7e0      	b.n	80043d8 <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 8004416:	2006      	movs	r0, #6
 8004418:	e7f0      	b.n	80043fc <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 800441a:	2007      	movs	r0, #7
 800441c:	e7ee      	b.n	80043fc <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 800441e:	2008      	movs	r0, #8
 8004420:	e7ec      	b.n	80043fc <AddModuleToGroup+0xcc>
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	20000e5c 	.word	0x20000e5c
 8004428:	080178a8 	.word	0x080178a8
 800442c:	2000001c 	.word	0x2000001c
 8004430:	20000f72 	.word	0x20000f72
 8004434:	20000098 	.word	0x20000098
 8004438:	20001104 	.word	0x20001104
 800443c:	20000ec0 	.word	0x20000ec0

08004440 <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 8004440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004442:	46ce      	mov	lr, r9
 8004444:	4647      	mov	r7, r8
 8004446:	b580      	push	{r7, lr}
 8004448:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++){
 800444a:	4b24      	ldr	r3, [pc, #144]	; (80044dc <ReadPortsDir+0x9c>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d03c      	beq.n	80044cc <ReadPortsDir+0x8c>
 8004452:	2501      	movs	r5, #1
	BOS_Status result =BOS_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	9301      	str	r3, [sp, #4]
		if(i != myID){
 8004458:	4b21      	ldr	r3, [pc, #132]	; (80044e0 <ReadPortsDir+0xa0>)
 800445a:	4699      	mov	r9, r3
		}
		else{
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++){
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 800445c:	4b21      	ldr	r3, [pc, #132]	; (80044e4 <ReadPortsDir+0xa4>)
 800445e:	4698      	mov	r8, r3
 8004460:	e021      	b.n	80044a6 <ReadPortsDir+0x66>
 8004462:	2600      	movs	r6, #0
			for(uint8_t p =1; p <= NumOfPorts; p++){
 8004464:	2401      	movs	r4, #1
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 8004466:	2780      	movs	r7, #128	; 0x80
 8004468:	023f      	lsls	r7, r7, #8
 800446a:	e004      	b.n	8004476 <ReadPortsDir+0x36>
			for(uint8_t p =1; p <= NumOfPorts; p++){
 800446c:	3401      	adds	r4, #1
 800446e:	b2e4      	uxtb	r4, r4
 8004470:	3601      	adds	r6, #1
 8004472:	2c07      	cmp	r4, #7
 8004474:	d011      	beq.n	800449a <ReadPortsDir+0x5a>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 8004476:	0020      	movs	r0, r4
 8004478:	f008 ff88 	bl	800d38c <GetUart>
 800447c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800447e:	42bb      	cmp	r3, r7
 8004480:	d1f4      	bne.n	800446c <ReadPortsDir+0x2c>
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 8004482:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <ReadPortsDir+0xa0>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	3b01      	subs	r3, #1
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4642      	mov	r2, r8
 800448c:	5a9a      	ldrh	r2, [r3, r2]
 800448e:	0039      	movs	r1, r7
 8004490:	4131      	asrs	r1, r6
 8004492:	430a      	orrs	r2, r1
 8004494:	4641      	mov	r1, r8
 8004496:	525a      	strh	r2, [r3, r1]
 8004498:	e7e8      	b.n	800446c <ReadPortsDir+0x2c>
	for(uint8_t i =1; i <= N; i++){
 800449a:	3501      	adds	r5, #1
 800449c:	b2ed      	uxtb	r5, r5
 800449e:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <ReadPortsDir+0x9c>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	42ab      	cmp	r3, r5
 80044a4:	d314      	bcc.n	80044d0 <ReadPortsDir+0x90>
		if(i != myID){
 80044a6:	464b      	mov	r3, r9
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	42ab      	cmp	r3, r5
 80044ac:	d0d9      	beq.n	8004462 <ReadPortsDir+0x22>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 80044ae:	2200      	movs	r2, #0
 80044b0:	2113      	movs	r1, #19
 80044b2:	0028      	movs	r0, r5
 80044b4:	f005 f906 	bl	80096c4 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 80044b8:	2032      	movs	r0, #50	; 0x32
 80044ba:	f008 fd8d 	bl	800cfd8 <StartMilliDelay>
			if(responseStatus != BOS_OK){
 80044be:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <ReadPortsDir+0xa8>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0e9      	beq.n	800449a <ReadPortsDir+0x5a>
				result =BOS_ERR_NoResponse;
 80044c6:	2302      	movs	r3, #2
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	e7e6      	b.n	800449a <ReadPortsDir+0x5a>
	BOS_Status result =BOS_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	9301      	str	r3, [sp, #4]
			}
		}
	}
	
	return result;
}
 80044d0:	9801      	ldr	r0, [sp, #4]
 80044d2:	b003      	add	sp, #12
 80044d4:	bc0c      	pop	{r2, r3}
 80044d6:	4690      	mov	r8, r2
 80044d8:	4699      	mov	r9, r3
 80044da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044dc:	2000001c 	.word	0x2000001c
 80044e0:	20001076 	.word	0x20001076
 80044e4:	20006e40 	.word	0x20006e40
 80044e8:	20001110 	.word	0x20001110

080044ec <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void){
 80044ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ee:	46c6      	mov	lr, r8
 80044f0:	b500      	push	{lr}
 80044f2:	2500      	movs	r5, #0
	BOS_Status result =BOS_OK;
	
	/* Check port direction */
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80044f4:	2401      	movs	r4, #1
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 80044f6:	4b12      	ldr	r3, [pc, #72]	; (8004540 <UpdateMyPortsDir+0x54>)
 80044f8:	4698      	mov	r8, r3
 80044fa:	4f12      	ldr	r7, [pc, #72]	; (8004544 <UpdateMyPortsDir+0x58>)
 80044fc:	2680      	movs	r6, #128	; 0x80
 80044fe:	0236      	lsls	r6, r6, #8
 8004500:	e00a      	b.n	8004518 <UpdateMyPortsDir+0x2c>
			/* Port is normal */
			SwapUartPins(GetUart(p),NORMAL);
		}
		else{
			/* Port is reversed */
			SwapUartPins(GetUart(p),REVERSED);
 8004502:	0020      	movs	r0, r4
 8004504:	f008 ff42 	bl	800d38c <GetUart>
 8004508:	2101      	movs	r1, #1
 800450a:	f008 ffd9 	bl	800d4c0 <SwapUartPins>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800450e:	3401      	adds	r4, #1
 8004510:	b2e4      	uxtb	r4, r4
 8004512:	3501      	adds	r5, #1
 8004514:	2c07      	cmp	r4, #7
 8004516:	d00f      	beq.n	8004538 <UpdateMyPortsDir+0x4c>
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 8004518:	783b      	ldrb	r3, [r7, #0]
 800451a:	3b01      	subs	r3, #1
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4642      	mov	r2, r8
 8004520:	5a9b      	ldrh	r3, [r3, r2]
 8004522:	0032      	movs	r2, r6
 8004524:	412a      	asrs	r2, r5
 8004526:	421a      	tst	r2, r3
 8004528:	d1eb      	bne.n	8004502 <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p),NORMAL);
 800452a:	0020      	movs	r0, r4
 800452c:	f008 ff2e 	bl	800d38c <GetUart>
 8004530:	2100      	movs	r1, #0
 8004532:	f008 ffc5 	bl	800d4c0 <SwapUartPins>
 8004536:	e7ea      	b.n	800450e <UpdateMyPortsDir+0x22>
		}
	}
	
	return result;
}
 8004538:	2000      	movs	r0, #0
 800453a:	bc04      	pop	{r2}
 800453c:	4690      	mov	r8, r2
 800453e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004540:	20006e40 	.word	0x20006e40
 8004544:	20001076 	.word	0x20001076

08004548 <BOS_Init>:
void BOS_Init(void){
 8004548:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 800454a:	f008 fbfd 	bl	800cd48 <RTC_Init>
	GetTimeDate();
 800454e:	f008 fc9b 	bl	800ce88 <GetTimeDate>
	EE_Init();
 8004552:	f003 fa51 	bl	80079f8 <EE_Init>
	GPIO_Init();
 8004556:	f008 f965 	bl	800c824 <GPIO_Init>
	DMA_Init();
 800455a:	f007 f8e5 	bl	800b728 <DMA_Init>
	TIM_USEC_Init();
 800455e:	f008 fcc7 	bl	800cef0 <TIM_USEC_Init>
	CRC_Init();
 8004562:	f008 f90b 	bl	800c77c <CRC_Init>
	TIM_MSEC_Init();
 8004566:	f008 fcf5 	bl	800cf54 <TIM_MSEC_Init>
	if(IsFactoryReset()){
 800456a:	f008 f9fd 	bl	800c968 <IsFactoryReset>
 800456e:	2800      	cmp	r0, #0
 8004570:	d11a      	bne.n	80045a8 <BOS_Init+0x60>
	if(IsLowerCLIbaud()){
 8004572:	f7ff f86d 	bl	8003650 <IsLowerCLIbaud>
 8004576:	2800      	cmp	r0, #0
 8004578:	d021      	beq.n	80045be <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag =1;
 800457a:	4b36      	ldr	r3, [pc, #216]	; (8004654 <BOS_Init+0x10c>)
 800457c:	2201      	movs	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004580:	2032      	movs	r0, #50	; 0x32
 8004582:	f008 fd29 	bl	800cfd8 <StartMilliDelay>
		Module_Peripheral_Init();
 8004586:	f007 f867 	bl	800b658 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800458a:	4b33      	ldr	r3, [pc, #204]	; (8004658 <BOS_Init+0x110>)
 800458c:	22e1      	movs	r2, #225	; 0xe1
 800458e:	0252      	lsls	r2, r2, #9
 8004590:	609a      	str	r2, [r3, #8]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004592:	2401      	movs	r4, #1
			UpdateBaudrate(port,BOS.clibaudrate);
 8004594:	001d      	movs	r5, r3
 8004596:	68a9      	ldr	r1, [r5, #8]
 8004598:	0020      	movs	r0, r4
 800459a:	f008 ff87 	bl	800d4ac <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800459e:	3401      	adds	r4, #1
 80045a0:	b2e4      	uxtb	r4, r4
 80045a2:	2c07      	cmp	r4, #7
 80045a4:	d1f7      	bne.n	8004596 <BOS_Init+0x4e>
 80045a6:	e00f      	b.n	80045c8 <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 80045a8:	f7ff f840 	bl	800362c <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80045ac:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045b0:	4b2a      	ldr	r3, [pc, #168]	; (800465c <BOS_Init+0x114>)
 80045b2:	4a2b      	ldr	r2, [pc, #172]	; (8004660 <BOS_Init+0x118>)
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	e7fd      	b.n	80045ba <BOS_Init+0x72>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80045be:	2032      	movs	r0, #50	; 0x32
 80045c0:	f008 fd0a 	bl	800cfd8 <StartMilliDelay>
		Module_Peripheral_Init();
 80045c4:	f007 f848 	bl	800b658 <Module_Peripheral_Init>
	LoadEEvars();
 80045c8:	f7fe ff04 	bl	80033d4 <LoadEEvars>
	UpdateMyPortsDir();
 80045cc:	f7ff ff8e 	bl	80044ec <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 80045d0:	f007 fd12 	bl	800bff8 <SetupMessagingRxDMAs>
	if(myID == 0) /* Native module */
 80045d4:	4b23      	ldr	r3, [pc, #140]	; (8004664 <BOS_Init+0x11c>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d027      	beq.n	800462c <BOS_Init+0xe4>
		IND_ON();
 80045dc:	2580      	movs	r5, #128	; 0x80
 80045de:	012d      	lsls	r5, r5, #4
 80045e0:	2490      	movs	r4, #144	; 0x90
 80045e2:	05e4      	lsls	r4, r4, #23
 80045e4:	2201      	movs	r2, #1
 80045e6:	0029      	movs	r1, r5
 80045e8:	0020      	movs	r0, r4
 80045ea:	f00c fcb3 	bl	8010f54 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 80045ee:	20fa      	movs	r0, #250	; 0xfa
 80045f0:	0040      	lsls	r0, r0, #1
 80045f2:	f008 fcf1 	bl	800cfd8 <StartMilliDelay>
		IND_OFF();
 80045f6:	2200      	movs	r2, #0
 80045f8:	0029      	movs	r1, r5
 80045fa:	0020      	movs	r0, r4
 80045fc:	f00c fcaa 	bl	8010f54 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004600:	2064      	movs	r0, #100	; 0x64
 8004602:	f008 fce9 	bl	800cfd8 <StartMilliDelay>
		IND_ON();
 8004606:	2201      	movs	r2, #1
 8004608:	0029      	movs	r1, r5
 800460a:	0020      	movs	r0, r4
 800460c:	f00c fca2 	bl	8010f54 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004610:	2064      	movs	r0, #100	; 0x64
 8004612:	f008 fce1 	bl	800cfd8 <StartMilliDelay>
		IND_OFF();
 8004616:	2200      	movs	r2, #0
 8004618:	0029      	movs	r1, r5
 800461a:	0020      	movs	r0, r4
 800461c:	f00c fc9a 	bl	8010f54 <HAL_GPIO_WritePin>
	ResetUartORE();
 8004620:	f003 f826 	bl	8007670 <ResetUartORE>
	BOS_initialized =1;
 8004624:	4b10      	ldr	r3, [pc, #64]	; (8004668 <BOS_Init+0x120>)
 8004626:	2201      	movs	r2, #1
 8004628:	701a      	strb	r2, [r3, #0]
}
 800462a:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();
 800462c:	2580      	movs	r5, #128	; 0x80
 800462e:	012d      	lsls	r5, r5, #4
 8004630:	2490      	movs	r4, #144	; 0x90
 8004632:	05e4      	lsls	r4, r4, #23
 8004634:	2201      	movs	r2, #1
 8004636:	0029      	movs	r1, r5
 8004638:	0020      	movs	r0, r4
 800463a:	f00c fc8b 	bl	8010f54 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 800463e:	20fa      	movs	r0, #250	; 0xfa
 8004640:	0040      	lsls	r0, r0, #1
 8004642:	f008 fcc9 	bl	800cfd8 <StartMilliDelay>
 8004646:	2200      	movs	r2, #0
 8004648:	0029      	movs	r1, r5
 800464a:	0020      	movs	r0, r4
 800464c:	f00c fc82 	bl	8010f54 <HAL_GPIO_WritePin>
 8004650:	e7e6      	b.n	8004620 <BOS_Init+0xd8>
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	20000a76 	.word	0x20000a76
 8004658:	200069c4 	.word	0x200069c4
 800465c:	e000ed00 	.word	0xe000ed00
 8004660:	05fa0004 	.word	0x05fa0004
 8004664:	20001076 	.word	0x20001076
 8004668:	20000a75 	.word	0x20000a75

0800466c <Module_Init>:
void Module_Init(void){
 800466c:	b510      	push	{r4, lr}
	HAL_Init();
 800466e:	f00a ffe9 	bl	800f644 <HAL_Init>
	SystemClock_Config();
 8004672:	f006 fe7b 	bl	800b36c <SystemClock_Config>
	BOS_Init();
 8004676:	f7ff ff67 	bl	8004548 <BOS_Init>
	MX_FREERTOS_Init();
 800467a:	f003 fbe7 	bl	8007e4c <MX_FREERTOS_Init>
	osKernelStart();
 800467e:	f008 ffcf 	bl	800d620 <osKernelStart>
}
 8004682:	bd10      	pop	{r4, pc}

08004684 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 8004684:	b510      	push	{r4, lr}
 8004686:	b082      	sub	sp, #8
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004688:	201e      	movs	r0, #30
 800468a:	f00e fa3b 	bl	8012b04 <malloc>
 800468e:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 8004690:	221e      	movs	r2, #30
 8004692:	2100      	movs	r1, #0
 8004694:	f00e fc8c 	bl	8012fb0 <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004698:	4908      	ldr	r1, [pc, #32]	; (80046bc <GetDateString+0x38>)
 800469a:	7d8b      	ldrb	r3, [r1, #22]
 800469c:	7d0a      	ldrb	r2, [r1, #20]
 800469e:	3a01      	subs	r2, #1
 80046a0:	0092      	lsls	r2, r2, #2
 80046a2:	4807      	ldr	r0, [pc, #28]	; (80046c0 <GetDateString+0x3c>)
 80046a4:	5812      	ldr	r2, [r2, r0]
 80046a6:	8b08      	ldrh	r0, [r1, #24]
 80046a8:	9001      	str	r0, [sp, #4]
 80046aa:	7d49      	ldrb	r1, [r1, #21]
 80046ac:	9100      	str	r1, [sp, #0]
 80046ae:	4905      	ldr	r1, [pc, #20]	; (80046c4 <GetDateString+0x40>)
 80046b0:	0020      	movs	r0, r4
 80046b2:	f00e fe77 	bl	80133a4 <sprintf>
	return buffer;
}
 80046b6:	0020      	movs	r0, r4
 80046b8:	b002      	add	sp, #8
 80046ba:	bd10      	pop	{r4, pc}
 80046bc:	200069c4 	.word	0x200069c4
 80046c0:	08017e0c 	.word	0x08017e0c
 80046c4:	08017b18 	.word	0x08017b18

080046c8 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 80046c8:	b500      	push	{lr}
 80046ca:	b085      	sub	sp, #20
 80046cc:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 80046ce:	4b07      	ldr	r3, [pc, #28]	; (80046ec <Bridge+0x24>)
 80046d0:	7819      	ldrb	r1, [r3, #0]
 80046d2:	2301      	movs	r3, #1
 80046d4:	9303      	str	r3, [sp, #12]
 80046d6:	3b02      	subs	r3, #2
 80046d8:	9302      	str	r3, [sp, #8]
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	3303      	adds	r3, #3
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	000b      	movs	r3, r1
 80046e2:	f005 f815 	bl	8009710 <StartScastDMAStream>
}
 80046e6:	b005      	add	sp, #20
 80046e8:	bd00      	pop	{pc}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	20001076 	.word	0x20001076

080046f0 <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 80046f0:	b530      	push	{r4, r5, lr}
 80046f2:	b087      	sub	sp, #28
 80046f4:	0004      	movs	r4, r0
 80046f6:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 80046f8:	2300      	movs	r3, #0
 80046fa:	9304      	str	r3, [sp, #16]
 80046fc:	9303      	str	r3, [sp, #12]
 80046fe:	9302      	str	r3, [sp, #8]
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	2200      	movs	r2, #0
 8004706:	2100      	movs	r1, #0
 8004708:	2000      	movs	r0, #0
 800470a:	f7fe fee1 	bl	80034d0 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 800470e:	1e62      	subs	r2, r4, #1
 8004710:	00d3      	lsls	r3, r2, #3
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	4a14      	ldr	r2, [pc, #80]	; (8004768 <Unbridge+0x78>)
 8004718:	589b      	ldr	r3, [r3, r2]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d015      	beq.n	800474a <Unbridge+0x5a>
 800471e:	1e6a      	subs	r2, r5, #1
 8004720:	00d3      	lsls	r3, r2, #3
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4a10      	ldr	r2, [pc, #64]	; (8004768 <Unbridge+0x78>)
 8004728:	589b      	ldr	r3, [r3, r2]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <Unbridge+0x48>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
 800472e:	0020      	movs	r0, r4
 8004730:	f002 ff12 	bl	8007558 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004734:	2000      	movs	r0, #0
 8004736:	e006      	b.n	8004746 <Unbridge+0x56>
		SwitchStreamDMAToMsg(port1);
 8004738:	0020      	movs	r0, r4
 800473a:	f002 ff0d 	bl	8007558 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 800473e:	0028      	movs	r0, r5
 8004740:	f002 ff0a 	bl	8007558 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004744:	2000      	movs	r0, #0
		return BOS_OK;
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 8004746:	b007      	add	sp, #28
 8004748:	bd30      	pop	{r4, r5, pc}
	else if(streamDMA[port2 - 1].Instance != 0){
 800474a:	1e6a      	subs	r2, r5, #1
 800474c:	00d3      	lsls	r3, r2, #3
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	4a05      	ldr	r2, [pc, #20]	; (8004768 <Unbridge+0x78>)
 8004754:	589b      	ldr	r3, [r3, r2]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d004      	beq.n	8004764 <Unbridge+0x74>
		SwitchStreamDMAToMsg(port2);
 800475a:	0028      	movs	r0, r5
 800475c:	f002 fefc 	bl	8007558 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004760:	2000      	movs	r0, #0
 8004762:	e7f0      	b.n	8004746 <Unbridge+0x56>
		return BOS_ERR_WrongValue;
 8004764:	2068      	movs	r0, #104	; 0x68
 8004766:	e7ee      	b.n	8004746 <Unbridge+0x56>
 8004768:	20001994 	.word	0x20001994

0800476c <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 8004770:	7804      	ldrb	r4, [r0, #0]
 8004772:	2c00      	cmp	r4, #0
 8004774:	d010      	beq.n	8004798 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 8004776:	2603      	movs	r6, #3
 8004778:	e004      	b.n	8004784 <StringToLowerCase+0x18>
 800477a:	702a      	strb	r2, [r5, #0]
 800477c:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 800477e:	782c      	ldrb	r4, [r5, #0]
 8004780:	2c00      	cmp	r4, #0
 8004782:	d009      	beq.n	8004798 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 8004784:	f00e f9b0 	bl	8012ae8 <__locale_ctype_ptr>
 8004788:	1900      	adds	r0, r0, r4
 800478a:	7843      	ldrb	r3, [r0, #1]
 800478c:	4033      	ands	r3, r6
 800478e:	0022      	movs	r2, r4
 8004790:	2b01      	cmp	r3, #1
 8004792:	d1f2      	bne.n	800477a <StringToLowerCase+0xe>
 8004794:	3220      	adds	r2, #32
 8004796:	e7f0      	b.n	800477a <StringToLowerCase+0xe>
	}
}
 8004798:	bd70      	pop	{r4, r5, r6, pc}
	...

0800479c <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 800479c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800479e:	46c6      	mov	lr, r8
 80047a0:	b500      	push	{lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80047a6:	4bdc      	ldr	r3, [pc, #880]	; (8004b18 <ParseSnippetCondition+0x37c>)
 80047a8:	781c      	ldrb	r4, [r3, #0]
 80047aa:	2c05      	cmp	r4, #5
 80047ac:	d100      	bne.n	80047b0 <ParseSnippetCondition+0x14>
 80047ae:	e210      	b.n	8004bd2 <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 80047b0:	49da      	ldr	r1, [pc, #872]	; (8004b1c <ParseSnippetCondition+0x380>)
 80047b2:	00a3      	lsls	r3, r4, #2
 80047b4:	191a      	adds	r2, r3, r4
 80047b6:	0092      	lsls	r2, r2, #2
 80047b8:	2000      	movs	r0, #0
 80047ba:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 80047bc:	191a      	adds	r2, r3, r4
 80047be:	0092      	lsls	r2, r2, #2
 80047c0:	188a      	adds	r2, r1, r2
 80047c2:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 80047c4:	1918      	adds	r0, r3, r4
 80047c6:	0080      	lsls	r0, r0, #2
 80047c8:	3002      	adds	r0, #2
 80047ca:	1840      	adds	r0, r0, r1
 80047cc:	2204      	movs	r2, #4
 80047ce:	2100      	movs	r1, #0
 80047d0:	f00e fbee 	bl	8012fb0 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 80047d4:	782b      	ldrb	r3, [r5, #0]
 80047d6:	2b62      	cmp	r3, #98	; 0x62
 80047d8:	d102      	bne.n	80047e0 <ParseSnippetCondition+0x44>
 80047da:	78ab      	ldrb	r3, [r5, #2]
 80047dc:	2b2e      	cmp	r3, #46	; 0x2e
 80047de:	d032      	beq.n	8004846 <ParseSnippetCondition+0xaa>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 80047e0:	4ecf      	ldr	r6, [pc, #828]	; (8004b20 <ParseSnippetCondition+0x384>)
 80047e2:	0029      	movs	r1, r5
 80047e4:	0030      	movs	r0, r6
 80047e6:	f00e fe19 	bl	801341c <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 80047ea:	4cce      	ldr	r4, [pc, #824]	; (8004b24 <ParseSnippetCondition+0x388>)
 80047ec:	0021      	movs	r1, r4
 80047ee:	0030      	movs	r0, r6
 80047f0:	f00f fc94 	bl	801411c <strtok>
 80047f4:	0005      	movs	r5, r0
		secondPart =strtok( NULL," ");
 80047f6:	0021      	movs	r1, r4
 80047f8:	2000      	movs	r0, #0
 80047fa:	f00f fc8f 	bl	801411c <strtok>
 80047fe:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 8004800:	0021      	movs	r1, r4
 8004802:	2000      	movs	r0, #0
 8004804:	f00f fc8a 	bl	801411c <strtok>
 8004808:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 800480a:	2d00      	cmp	r5, #0
 800480c:	d100      	bne.n	8004810 <ParseSnippetCondition+0x74>
 800480e:	e1e5      	b.n	8004bdc <ParseSnippetCondition+0x440>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004810:	0028      	movs	r0, r5
 8004812:	f7fe ff81 	bl	8003718 <IsModuleParameter>
 8004816:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004818:	d100      	bne.n	800481c <ParseSnippetCondition+0x80>
 800481a:	e18f      	b.n	8004b3c <ParseSnippetCondition+0x3a0>
 800481c:	2e00      	cmp	r6, #0
 800481e:	d000      	beq.n	8004822 <ParseSnippetCondition+0x86>
 8004820:	e18e      	b.n	8004b40 <ParseSnippetCondition+0x3a4>
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
			}
			else{
				return BOS_ERR_WrongParam;
 8004822:	2067      	movs	r0, #103	; 0x67
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004824:	2c00      	cmp	r4, #0
 8004826:	d000      	beq.n	800482a <ParseSnippetCondition+0x8e>
 8004828:	e1d4      	b.n	8004bd4 <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 800482a:	4cbb      	ldr	r4, [pc, #748]	; (8004b18 <ParseSnippetCondition+0x37c>)
 800482c:	7823      	ldrb	r3, [r4, #0]
 800482e:	49bb      	ldr	r1, [pc, #748]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004830:	009a      	lsls	r2, r3, #2
 8004832:	18d0      	adds	r0, r2, r3
 8004834:	0080      	lsls	r0, r0, #2
 8004836:	3602      	adds	r6, #2
 8004838:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 800483a:	180a      	adds	r2, r1, r0
 800483c:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 800483e:	3301      	adds	r3, #1
 8004840:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 8004842:	2000      	movs	r0, #0
 8004844:	e1c6      	b.n	8004bd4 <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004846:	786e      	ldrb	r6, [r5, #1]
 8004848:	3e30      	subs	r6, #48	; 0x30
 800484a:	b2f6      	uxtb	r6, r6
	BOS_Status status =BOS_OK;
 800484c:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 800484e:	2e06      	cmp	r6, #6
 8004850:	d900      	bls.n	8004854 <ParseSnippetCondition+0xb8>
 8004852:	e1bf      	b.n	8004bd4 <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004854:	4ab1      	ldr	r2, [pc, #708]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004856:	00a3      	lsls	r3, r4, #2
 8004858:	1919      	adds	r1, r3, r4
 800485a:	0089      	lsls	r1, r1, #2
 800485c:	3001      	adds	r0, #1
 800485e:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 8004860:	1853      	adds	r3, r2, r1
 8004862:	2200      	movs	r2, #0
 8004864:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004866:	709e      	strb	r6, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004868:	1cef      	adds	r7, r5, #3
 800486a:	3207      	adds	r2, #7
 800486c:	49ae      	ldr	r1, [pc, #696]	; (8004b28 <ParseSnippetCondition+0x38c>)
 800486e:	0038      	movs	r0, r7
 8004870:	f00e fddc 	bl	801342c <strncmp>
 8004874:	2800      	cmp	r0, #0
 8004876:	d121      	bne.n	80048bc <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004878:	00a3      	lsls	r3, r4, #2
 800487a:	191c      	adds	r4, r3, r4
 800487c:	00a4      	lsls	r4, r4, #2
 800487e:	4ba7      	ldr	r3, [pc, #668]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004880:	191c      	adds	r4, r3, r4
 8004882:	2305      	movs	r3, #5
 8004884:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004886:	00f2      	lsls	r2, r6, #3
 8004888:	1992      	adds	r2, r2, r6
 800488a:	4ba8      	ldr	r3, [pc, #672]	; (8004b2c <ParseSnippetCondition+0x390>)
 800488c:	189b      	adds	r3, r3, r2
 800488e:	7a1b      	ldrb	r3, [r3, #8]
 8004890:	07db      	lsls	r3, r3, #31
 8004892:	d504      	bpl.n	800489e <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004894:	4aa0      	ldr	r2, [pc, #640]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004896:	7813      	ldrb	r3, [r2, #0]
 8004898:	3301      	adds	r3, #1
 800489a:	7013      	strb	r3, [r2, #0]
 800489c:	e19a      	b.n	8004bd4 <ParseSnippetCondition+0x438>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 800489e:	2301      	movs	r3, #1
 80048a0:	9305      	str	r3, [sp, #20]
 80048a2:	2300      	movs	r3, #0
 80048a4:	9304      	str	r3, [sp, #16]
 80048a6:	9303      	str	r3, [sp, #12]
 80048a8:	9302      	str	r3, [sp, #8]
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	2101      	movs	r1, #1
 80048b2:	0030      	movs	r0, r6
 80048b4:	f003 fd94 	bl	80083e0 <SetButtonEvents>
				status =BOS_OK;
 80048b8:	2000      	movs	r0, #0
 80048ba:	e7eb      	b.n	8004894 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 80048bc:	220e      	movs	r2, #14
 80048be:	499c      	ldr	r1, [pc, #624]	; (8004b30 <ParseSnippetCondition+0x394>)
 80048c0:	0038      	movs	r0, r7
 80048c2:	f00e fdb3 	bl	801342c <strncmp>
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d11c      	bne.n	8004904 <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 80048ca:	00a3      	lsls	r3, r4, #2
 80048cc:	191c      	adds	r4, r3, r4
 80048ce:	00a4      	lsls	r4, r4, #2
 80048d0:	4b92      	ldr	r3, [pc, #584]	; (8004b1c <ParseSnippetCondition+0x380>)
 80048d2:	191c      	adds	r4, r3, r4
 80048d4:	2306      	movs	r3, #6
 80048d6:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 80048d8:	00f2      	lsls	r2, r6, #3
 80048da:	1992      	adds	r2, r2, r6
 80048dc:	4b93      	ldr	r3, [pc, #588]	; (8004b2c <ParseSnippetCondition+0x390>)
 80048de:	189b      	adds	r3, r3, r2
 80048e0:	7a1b      	ldrb	r3, [r3, #8]
 80048e2:	079b      	lsls	r3, r3, #30
 80048e4:	d4d6      	bmi.n	8004894 <ParseSnippetCondition+0xf8>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80048e6:	2301      	movs	r3, #1
 80048e8:	9305      	str	r3, [sp, #20]
 80048ea:	2300      	movs	r3, #0
 80048ec:	9304      	str	r3, [sp, #16]
 80048ee:	9303      	str	r3, [sp, #12]
 80048f0:	9302      	str	r3, [sp, #8]
 80048f2:	9301      	str	r3, [sp, #4]
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	2201      	movs	r2, #1
 80048f8:	2100      	movs	r1, #0
 80048fa:	0030      	movs	r0, r6
 80048fc:	f003 fd70 	bl	80083e0 <SetButtonEvents>
				status =BOS_OK;
 8004900:	2000      	movs	r0, #0
 8004902:	e7c7      	b.n	8004894 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004904:	220c      	movs	r2, #12
 8004906:	498b      	ldr	r1, [pc, #556]	; (8004b34 <ParseSnippetCondition+0x398>)
 8004908:	0038      	movs	r0, r7
 800490a:	f00e fd8f 	bl	801342c <strncmp>
 800490e:	2800      	cmp	r0, #0
 8004910:	d17a      	bne.n	8004a08 <ParseSnippetCondition+0x26c>
				if(!button[port].pressedX1Sec){
 8004912:	00f2      	lsls	r2, r6, #3
 8004914:	1992      	adds	r2, r2, r6
 8004916:	4b85      	ldr	r3, [pc, #532]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004918:	189b      	adds	r3, r3, r2
 800491a:	789b      	ldrb	r3, [r3, #2]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d030      	beq.n	8004982 <ParseSnippetCondition+0x1e6>
				else if(!button[port].pressedX2Sec){
 8004920:	00f2      	lsls	r2, r6, #3
 8004922:	1992      	adds	r2, r2, r6
 8004924:	4b81      	ldr	r3, [pc, #516]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004926:	189b      	adds	r3, r3, r2
 8004928:	78db      	ldrb	r3, [r3, #3]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d04a      	beq.n	80049c4 <ParseSnippetCondition+0x228>
				else if(!button[port].pressedX3Sec){
 800492e:	00f2      	lsls	r2, r6, #3
 8004930:	1992      	adds	r2, r2, r6
 8004932:	4b7e      	ldr	r3, [pc, #504]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004934:	189b      	adds	r3, r3, r2
 8004936:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004938:	200c      	movs	r0, #12
				else if(!button[port].pressedX3Sec){
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1aa      	bne.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 800493e:	4f77      	ldr	r7, [pc, #476]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004940:	00a3      	lsls	r3, r4, #2
 8004942:	191b      	adds	r3, r3, r4
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	220b      	movs	r2, #11
 800494a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 800494c:	0028      	movs	r0, r5
 800494e:	300f      	adds	r0, #15
 8004950:	f00e f895 	bl	8012a7e <atoi>
 8004954:	b2c0      	uxtb	r0, r0
 8004956:	4b70      	ldr	r3, [pc, #448]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004958:	781a      	ldrb	r2, [r3, #0]
 800495a:	0093      	lsls	r3, r2, #2
 800495c:	189b      	adds	r3, r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	18ff      	adds	r7, r7, r3
 8004962:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004964:	2301      	movs	r3, #1
 8004966:	9305      	str	r3, [sp, #20]
 8004968:	2300      	movs	r3, #0
 800496a:	9304      	str	r3, [sp, #16]
 800496c:	9303      	str	r3, [sp, #12]
 800496e:	9302      	str	r3, [sp, #8]
 8004970:	9001      	str	r0, [sp, #4]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	2200      	movs	r2, #0
 8004976:	2100      	movs	r1, #0
 8004978:	0030      	movs	r0, r6
 800497a:	f003 fd31 	bl	80083e0 <SetButtonEvents>
					status =BOS_OK;
 800497e:	2000      	movs	r0, #0
 8004980:	e788      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004982:	4f66      	ldr	r7, [pc, #408]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004984:	00a3      	lsls	r3, r4, #2
 8004986:	191b      	adds	r3, r3, r4
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	18fb      	adds	r3, r7, r3
 800498c:	2209      	movs	r2, #9
 800498e:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004990:	0028      	movs	r0, r5
 8004992:	300f      	adds	r0, #15
 8004994:	f00e f873 	bl	8012a7e <atoi>
 8004998:	b2c3      	uxtb	r3, r0
 800499a:	4a5f      	ldr	r2, [pc, #380]	; (8004b18 <ParseSnippetCondition+0x37c>)
 800499c:	7811      	ldrb	r1, [r2, #0]
 800499e:	008a      	lsls	r2, r1, #2
 80049a0:	1852      	adds	r2, r2, r1
 80049a2:	0092      	lsls	r2, r2, #2
 80049a4:	18bf      	adds	r7, r7, r2
 80049a6:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80049a8:	2201      	movs	r2, #1
 80049aa:	9205      	str	r2, [sp, #20]
 80049ac:	2200      	movs	r2, #0
 80049ae:	9204      	str	r2, [sp, #16]
 80049b0:	9203      	str	r2, [sp, #12]
 80049b2:	9202      	str	r2, [sp, #8]
 80049b4:	9201      	str	r2, [sp, #4]
 80049b6:	9200      	str	r2, [sp, #0]
 80049b8:	2100      	movs	r1, #0
 80049ba:	0030      	movs	r0, r6
 80049bc:	f003 fd10 	bl	80083e0 <SetButtonEvents>
					status =BOS_OK;
 80049c0:	2000      	movs	r0, #0
 80049c2:	e767      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 80049c4:	4f55      	ldr	r7, [pc, #340]	; (8004b1c <ParseSnippetCondition+0x380>)
 80049c6:	00a3      	lsls	r3, r4, #2
 80049c8:	191b      	adds	r3, r3, r4
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	18fb      	adds	r3, r7, r3
 80049ce:	220a      	movs	r2, #10
 80049d0:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80049d2:	0028      	movs	r0, r5
 80049d4:	300f      	adds	r0, #15
 80049d6:	f00e f852 	bl	8012a7e <atoi>
 80049da:	b2c0      	uxtb	r0, r0
 80049dc:	4b4e      	ldr	r3, [pc, #312]	; (8004b18 <ParseSnippetCondition+0x37c>)
 80049de:	781a      	ldrb	r2, [r3, #0]
 80049e0:	0093      	lsls	r3, r2, #2
 80049e2:	189b      	adds	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	18ff      	adds	r7, r7, r3
 80049e8:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 80049ea:	2301      	movs	r3, #1
 80049ec:	9305      	str	r3, [sp, #20]
 80049ee:	2300      	movs	r3, #0
 80049f0:	9304      	str	r3, [sp, #16]
 80049f2:	9303      	str	r3, [sp, #12]
 80049f4:	9302      	str	r3, [sp, #8]
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	9000      	str	r0, [sp, #0]
 80049fa:	2200      	movs	r2, #0
 80049fc:	2100      	movs	r1, #0
 80049fe:	0030      	movs	r0, r6
 8004a00:	f003 fcee 	bl	80083e0 <SetButtonEvents>
					status =BOS_OK;
 8004a04:	2000      	movs	r0, #0
 8004a06:	e745      	b.n	8004894 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004a08:	220d      	movs	r2, #13
 8004a0a:	494b      	ldr	r1, [pc, #300]	; (8004b38 <ParseSnippetCondition+0x39c>)
 8004a0c:	0038      	movs	r0, r7
 8004a0e:	f00e fd0d 	bl	801342c <strncmp>
 8004a12:	0003      	movs	r3, r0
	BOS_Status status =BOS_OK;
 8004a14:	2000      	movs	r0, #0
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d000      	beq.n	8004a1c <ParseSnippetCondition+0x280>
 8004a1a:	e73b      	b.n	8004894 <ParseSnippetCondition+0xf8>
				if(!button[port].releasedY1Sec){
 8004a1c:	00f2      	lsls	r2, r6, #3
 8004a1e:	1992      	adds	r2, r2, r6
 8004a20:	4b42      	ldr	r3, [pc, #264]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	795b      	ldrb	r3, [r3, #5]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d031      	beq.n	8004a8e <ParseSnippetCondition+0x2f2>
				else if(!button[port].releasedY2Sec){
 8004a2a:	00f2      	lsls	r2, r6, #3
 8004a2c:	1992      	adds	r2, r2, r6
 8004a2e:	4b3f      	ldr	r3, [pc, #252]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004a30:	189b      	adds	r3, r3, r2
 8004a32:	799b      	ldrb	r3, [r3, #6]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d04c      	beq.n	8004ad2 <ParseSnippetCondition+0x336>
				else if(!button[port].releasedY3Sec){
 8004a38:	00f2      	lsls	r2, r6, #3
 8004a3a:	1992      	adds	r2, r2, r6
 8004a3c:	4b3b      	ldr	r3, [pc, #236]	; (8004b2c <ParseSnippetCondition+0x390>)
 8004a3e:	189b      	adds	r3, r3, r2
 8004a40:	79db      	ldrb	r3, [r3, #7]
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004a42:	200d      	movs	r0, #13
				else if(!button[port].releasedY3Sec){
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d000      	beq.n	8004a4a <ParseSnippetCondition+0x2ae>
 8004a48:	e724      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004a4a:	4f34      	ldr	r7, [pc, #208]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004a4c:	3314      	adds	r3, #20
 8004a4e:	4698      	mov	r8, r3
 8004a50:	435c      	muls	r4, r3
 8004a52:	193c      	adds	r4, r7, r4
 8004a54:	3b06      	subs	r3, #6
 8004a56:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004a58:	0028      	movs	r0, r5
 8004a5a:	3010      	adds	r0, #16
 8004a5c:	f00e f80f 	bl	8012a7e <atoi>
 8004a60:	b2c0      	uxtb	r0, r0
 8004a62:	4b2d      	ldr	r3, [pc, #180]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	4642      	mov	r2, r8
 8004a68:	4353      	muls	r3, r2
 8004a6a:	18ff      	adds	r7, r7, r3
 8004a6c:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004a6e:	2301      	movs	r3, #1
 8004a70:	9305      	str	r3, [sp, #20]
 8004a72:	9004      	str	r0, [sp, #16]
 8004a74:	2400      	movs	r4, #0
 8004a76:	9403      	str	r4, [sp, #12]
 8004a78:	9402      	str	r4, [sp, #8]
 8004a7a:	9401      	str	r4, [sp, #4]
 8004a7c:	9400      	str	r4, [sp, #0]
 8004a7e:	0023      	movs	r3, r4
 8004a80:	0022      	movs	r2, r4
 8004a82:	0021      	movs	r1, r4
 8004a84:	0030      	movs	r0, r6
 8004a86:	f003 fcab 	bl	80083e0 <SetButtonEvents>
					status =BOS_OK;
 8004a8a:	0020      	movs	r0, r4
 8004a8c:	e702      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004a8e:	4f23      	ldr	r7, [pc, #140]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004a90:	00a3      	lsls	r3, r4, #2
 8004a92:	191b      	adds	r3, r3, r4
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	220c      	movs	r2, #12
 8004a9a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004a9c:	0028      	movs	r0, r5
 8004a9e:	3010      	adds	r0, #16
 8004aa0:	f00d ffed 	bl	8012a7e <atoi>
 8004aa4:	b2c0      	uxtb	r0, r0
 8004aa6:	4b1c      	ldr	r3, [pc, #112]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	0093      	lsls	r3, r2, #2
 8004aac:	189b      	adds	r3, r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	18ff      	adds	r7, r7, r3
 8004ab2:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	9305      	str	r3, [sp, #20]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9304      	str	r3, [sp, #16]
 8004abc:	9303      	str	r3, [sp, #12]
 8004abe:	9002      	str	r0, [sp, #8]
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	0030      	movs	r0, r6
 8004aca:	f003 fc89 	bl	80083e0 <SetButtonEvents>
					status =BOS_OK;
 8004ace:	2000      	movs	r0, #0
 8004ad0:	e6e0      	b.n	8004894 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004ad2:	4f12      	ldr	r7, [pc, #72]	; (8004b1c <ParseSnippetCondition+0x380>)
 8004ad4:	00a3      	lsls	r3, r4, #2
 8004ad6:	191b      	adds	r3, r3, r4
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	18fb      	adds	r3, r7, r3
 8004adc:	220d      	movs	r2, #13
 8004ade:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004ae0:	0028      	movs	r0, r5
 8004ae2:	3010      	adds	r0, #16
 8004ae4:	f00d ffcb 	bl	8012a7e <atoi>
 8004ae8:	b2c0      	uxtb	r0, r0
 8004aea:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <ParseSnippetCondition+0x37c>)
 8004aec:	781a      	ldrb	r2, [r3, #0]
 8004aee:	0093      	lsls	r3, r2, #2
 8004af0:	189b      	adds	r3, r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	18ff      	adds	r7, r7, r3
 8004af6:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004af8:	2301      	movs	r3, #1
 8004afa:	9305      	str	r3, [sp, #20]
 8004afc:	2300      	movs	r3, #0
 8004afe:	9304      	str	r3, [sp, #16]
 8004b00:	9003      	str	r0, [sp, #12]
 8004b02:	9302      	str	r3, [sp, #8]
 8004b04:	9301      	str	r3, [sp, #4]
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	0030      	movs	r0, r6
 8004b0e:	f003 fc67 	bl	80083e0 <SetButtonEvents>
					status =BOS_OK;
 8004b12:	2000      	movs	r0, #0
 8004b14:	e6be      	b.n	8004894 <ParseSnippetCondition+0xf8>
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	2000121f 	.word	0x2000121f
 8004b1c:	200069e0 	.word	0x200069e0
 8004b20:	20001184 	.word	0x20001184
 8004b24:	08017974 	.word	0x08017974
 8004b28:	08018f90 	.word	0x08018f90
 8004b2c:	2000151c 	.word	0x2000151c
 8004b30:	08018010 	.word	0x08018010
 8004b34:	08018020 	.word	0x08018020
 8004b38:	08018030 	.word	0x08018030
			else if(secondPart != NULL && thirdPart != NULL){
 8004b3c:	2e00      	cmp	r6, #0
 8004b3e:	d04f      	beq.n	8004be0 <ParseSnippetCondition+0x444>
 8004b40:	2c00      	cmp	r4, #0
 8004b42:	d04f      	beq.n	8004be4 <ParseSnippetCondition+0x448>
				modPar2 =IsModuleParameter(thirdPart);
 8004b44:	0020      	movs	r0, r4
 8004b46:	f7fe fde7 	bl	8003718 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d024      	beq.n	8004b98 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004b4e:	4b27      	ldr	r3, [pc, #156]	; (8004bec <ParseSnippetCondition+0x450>)
 8004b50:	781c      	ldrb	r4, [r3, #0]
 8004b52:	4a27      	ldr	r2, [pc, #156]	; (8004bf0 <ParseSnippetCondition+0x454>)
 8004b54:	00a3      	lsls	r3, r4, #2
 8004b56:	1919      	adds	r1, r3, r4
 8004b58:	0089      	lsls	r1, r1, #2
 8004b5a:	2704      	movs	r7, #4
 8004b5c:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004b5e:	1919      	adds	r1, r3, r4
 8004b60:	0089      	lsls	r1, r1, #2
 8004b62:	1851      	adds	r1, r2, r1
 8004b64:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004b66:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004b68:	4d20      	ldr	r5, [pc, #128]	; (8004bec <ParseSnippetCondition+0x450>)
 8004b6a:	782c      	ldrb	r4, [r5, #0]
 8004b6c:	0030      	movs	r0, r6
 8004b6e:	f7fe fddf 	bl	8003730 <IsMathOperator>
 8004b72:	491f      	ldr	r1, [pc, #124]	; (8004bf0 <ParseSnippetCondition+0x454>)
 8004b74:	00a3      	lsls	r3, r4, #2
 8004b76:	191b      	adds	r3, r3, r4
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	18cb      	adds	r3, r1, r3
 8004b7c:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004b7e:	782a      	ldrb	r2, [r5, #0]
 8004b80:	0093      	lsls	r3, r2, #2
 8004b82:	189b      	adds	r3, r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	18cb      	adds	r3, r1, r3
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d02c      	beq.n	8004be8 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004b8e:	3201      	adds	r2, #1
 8004b90:	4b16      	ldr	r3, [pc, #88]	; (8004bec <ParseSnippetCondition+0x450>)
 8004b92:	701a      	strb	r2, [r3, #0]
				return BOS_OK;
 8004b94:	2000      	movs	r0, #0
 8004b96:	e01d      	b.n	8004bd4 <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004b98:	4b14      	ldr	r3, [pc, #80]	; (8004bec <ParseSnippetCondition+0x450>)
 8004b9a:	4698      	mov	r8, r3
 8004b9c:	781a      	ldrb	r2, [r3, #0]
 8004b9e:	4f14      	ldr	r7, [pc, #80]	; (8004bf0 <ParseSnippetCondition+0x454>)
 8004ba0:	0093      	lsls	r3, r2, #2
 8004ba2:	1899      	adds	r1, r3, r2
 8004ba4:	0089      	lsls	r1, r1, #2
 8004ba6:	2003      	movs	r0, #3
 8004ba8:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004baa:	187b      	adds	r3, r7, r1
 8004bac:	70dd      	strb	r5, [r3, #3]
					float constant =atof(thirdPart);
 8004bae:	0020      	movs	r0, r4
 8004bb0:	f00d ff60 	bl	8012a74 <atof>
 8004bb4:	f7fe f808 	bl	8002bc8 <__aeabi_d2f>
 8004bb8:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004bba:	4643      	mov	r3, r8
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	0098      	lsls	r0, r3, #2
 8004bc0:	18c0      	adds	r0, r0, r3
 8004bc2:	0080      	lsls	r0, r0, #2
 8004bc4:	3006      	adds	r0, #6
 8004bc6:	19c0      	adds	r0, r0, r7
 8004bc8:	2204      	movs	r2, #4
 8004bca:	a907      	add	r1, sp, #28
 8004bcc:	f00e f9e7 	bl	8012f9e <memcpy>
 8004bd0:	e7ca      	b.n	8004b68 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 8004bd2:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004bd4:	b008      	add	sp, #32
 8004bd6:	bc04      	pop	{r2}
 8004bd8:	4690      	mov	r8, r2
 8004bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8004bdc:	2067      	movs	r0, #103	; 0x67
 8004bde:	e7f9      	b.n	8004bd4 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 8004be0:	2067      	movs	r0, #103	; 0x67
 8004be2:	e7f7      	b.n	8004bd4 <ParseSnippetCondition+0x438>
 8004be4:	2067      	movs	r0, #103	; 0x67
 8004be6:	e7f5      	b.n	8004bd4 <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 8004be8:	2067      	movs	r0, #103	; 0x67
 8004bea:	e7f3      	b.n	8004bd4 <ParseSnippetCondition+0x438>
 8004bec:	2000121f 	.word	0x2000121f
 8004bf0:	200069e0 	.word	0x200069e0

08004bf4 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	000c      	movs	r4, r1
	switch(code){
 8004bf8:	2802      	cmp	r0, #2
 8004bfa:	d017      	beq.n	8004c2c <AddSnippet+0x38>
 8004bfc:	2803      	cmp	r0, #3
 8004bfe:	d003      	beq.n	8004c08 <AddSnippet+0x14>
 8004c00:	2801      	cmp	r0, #1
 8004c02:	d00f      	beq.n	8004c24 <AddSnippet+0x30>
	return BOS_OK;
 8004c04:	2000      	movs	r0, #0
 8004c06:	e00c      	b.n	8004c22 <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets - 1].state = true;
 8004c08:	4b35      	ldr	r3, [pc, #212]	; (8004ce0 <AddSnippet+0xec>)
 8004c0a:	781a      	ldrb	r2, [r3, #0]
 8004c0c:	3a01      	subs	r2, #1
 8004c0e:	0093      	lsls	r3, r2, #2
 8004c10:	189b      	adds	r3, r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4a33      	ldr	r2, [pc, #204]	; (8004ce4 <AddSnippet+0xf0>)
 8004c16:	18d3      	adds	r3, r2, r3
 8004c18:	2201      	movs	r2, #1
 8004c1a:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004c1c:	f006 fbfe 	bl	800b41c <SaveToRO>
	return BOS_OK;
 8004c20:	2000      	movs	r0, #0
}
 8004c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8004c24:	0008      	movs	r0, r1
 8004c26:	f7ff fdb9 	bl	800479c <ParseSnippetCondition>
 8004c2a:	e7fa      	b.n	8004c22 <AddSnippet+0x2e>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004c2c:	4b2c      	ldr	r3, [pc, #176]	; (8004ce0 <AddSnippet+0xec>)
 8004c2e:	781d      	ldrb	r5, [r3, #0]
 8004c30:	3d01      	subs	r5, #1
 8004c32:	00ab      	lsls	r3, r5, #2
 8004c34:	195b      	adds	r3, r3, r5
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4a2a      	ldr	r2, [pc, #168]	; (8004ce4 <AddSnippet+0xf0>)
 8004c3a:	18d3      	adds	r3, r2, r3
 8004c3c:	68de      	ldr	r6, [r3, #12]
 8004c3e:	2e00      	cmp	r6, #0
 8004c40:	d03d      	beq.n	8004cbe <AddSnippet+0xca>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004c42:	0030      	movs	r0, r6
 8004c44:	f7fb fa68 	bl	8000118 <strlen>
 8004c48:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004c4a:	0020      	movs	r0, r4
 8004c4c:	f7fb fa64 	bl	8000118 <strlen>
 8004c50:	1839      	adds	r1, r7, r0
 8004c52:	3102      	adds	r1, #2
 8004c54:	0030      	movs	r0, r6
 8004c56:	f00e f9dd 	bl	8013014 <realloc>
 8004c5a:	4e22      	ldr	r6, [pc, #136]	; (8004ce4 <AddSnippet+0xf0>)
 8004c5c:	00ab      	lsls	r3, r5, #2
 8004c5e:	195d      	adds	r5, r3, r5
 8004c60:	00ad      	lsls	r5, r5, #2
 8004c62:	1975      	adds	r5, r6, r5
 8004c64:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004c66:	4d1e      	ldr	r5, [pc, #120]	; (8004ce0 <AddSnippet+0xec>)
 8004c68:	782a      	ldrb	r2, [r5, #0]
 8004c6a:	3a01      	subs	r2, #1
 8004c6c:	0093      	lsls	r3, r2, #2
 8004c6e:	189b      	adds	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	18f3      	adds	r3, r6, r3
 8004c74:	1c7a      	adds	r2, r7, #1
 8004c76:	68d8      	ldr	r0, [r3, #12]
 8004c78:	1880      	adds	r0, r0, r2
 8004c7a:	0021      	movs	r1, r4
 8004c7c:	f00e fbce 	bl	801341c <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004c80:	782a      	ldrb	r2, [r5, #0]
 8004c82:	3a01      	subs	r2, #1
 8004c84:	0093      	lsls	r3, r2, #2
 8004c86:	189b      	adds	r3, r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	18f6      	adds	r6, r6, r3
 8004c8c:	68f3      	ldr	r3, [r6, #12]
 8004c8e:	2213      	movs	r2, #19
 8004c90:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004c92:	4b13      	ldr	r3, [pc, #76]	; (8004ce0 <AddSnippet+0xec>)
 8004c94:	781a      	ldrb	r2, [r3, #0]
 8004c96:	3a01      	subs	r2, #1
 8004c98:	0093      	lsls	r3, r2, #2
 8004c9a:	189b      	adds	r3, r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4911      	ldr	r1, [pc, #68]	; (8004ce4 <AddSnippet+0xf0>)
 8004ca0:	18cb      	adds	r3, r1, r3
 8004ca2:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 8004ca4:	2000      	movs	r0, #0
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1bb      	bne.n	8004c22 <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004caa:	0090      	lsls	r0, r2, #2
 8004cac:	1880      	adds	r0, r0, r2
 8004cae:	0080      	lsls	r0, r0, #2
 8004cb0:	1840      	adds	r0, r0, r1
 8004cb2:	2214      	movs	r2, #20
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	f00e f97b 	bl	8012fb0 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004cba:	200e      	movs	r0, #14
 8004cbc:	e7b1      	b.n	8004c22 <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004cbe:	0008      	movs	r0, r1
 8004cc0:	f7fb fa2a 	bl	8000118 <strlen>
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	f00d ff1d 	bl	8012b04 <malloc>
 8004cca:	00ab      	lsls	r3, r5, #2
 8004ccc:	195d      	adds	r5, r3, r5
 8004cce:	00ad      	lsls	r5, r5, #2
 8004cd0:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <AddSnippet+0xf0>)
 8004cd2:	195d      	adds	r5, r3, r5
 8004cd4:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004cd6:	0021      	movs	r1, r4
 8004cd8:	f00e fba0 	bl	801341c <strcpy>
 8004cdc:	e7d9      	b.n	8004c92 <AddSnippet+0x9e>
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	2000121f 	.word	0x2000121f
 8004ce4:	200069e0 	.word	0x200069e0

08004ce8 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cea:	46de      	mov	lr, fp
 8004cec:	4657      	mov	r7, sl
 8004cee:	464e      	mov	r6, r9
 8004cf0:	4645      	mov	r5, r8
 8004cf2:	b5e0      	push	{r5, r6, r7, lr}
 8004cf4:	b08b      	sub	sp, #44	; 0x2c
 8004cf6:	9004      	str	r0, [sp, #16]
 8004cf8:	4688      	mov	r8, r1
 8004cfa:	9203      	str	r2, [sp, #12]
 8004cfc:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004cfe:	2209      	movs	r2, #9
 8004d00:	2100      	movs	r1, #0
 8004d02:	a807      	add	r0, sp, #28
 8004d04:	f00e f954 	bl	8012fb0 <memset>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004d08:	4fd5      	ldr	r7, [pc, #852]	; (8005060 <CLI_CommandParser+0x378>)
				if(id == myID){
 8004d0a:	002e      	movs	r6, r5
 8004d0c:	e034      	b.n	8004d78 <CLI_CommandParser+0x90>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004d0e:	2252      	movs	r2, #82	; 0x52
 8004d10:	49d4      	ldr	r1, [pc, #848]	; (8005064 <CLI_CommandParser+0x37c>)
 8004d12:	0020      	movs	r0, r4
 8004d14:	f00e f943 	bl	8012f9e <memcpy>
				recordSnippet =0;
 8004d18:	4bd1      	ldr	r3, [pc, #836]	; (8005060 <CLI_CommandParser+0x378>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	e044      	b.n	8004daa <CLI_CommandParser+0xc2>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004d20:	2206      	movs	r2, #6
 8004d22:	49d1      	ldr	r1, [pc, #836]	; (8005068 <CLI_CommandParser+0x380>)
 8004d24:	9803      	ldr	r0, [sp, #12]
 8004d26:	f00e fb81 	bl	801342c <strncmp>
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d053      	beq.n	8004dd6 <CLI_CommandParser+0xee>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004d2e:	2d02      	cmp	r5, #2
 8004d30:	d05e      	beq.n	8004df0 <CLI_CommandParser+0x108>
			loc =strchr((char* )cInputString,'.');
 8004d32:	212e      	movs	r1, #46	; 0x2e
 8004d34:	9803      	ldr	r0, [sp, #12]
 8004d36:	f00e fb63 	bl	8013400 <strchr>
 8004d3a:	1e05      	subs	r5, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004d3c:	d006      	beq.n	8004d4c <CLI_CommandParser+0x64>
 8004d3e:	3803      	subs	r0, #3
 8004d40:	2203      	movs	r2, #3
 8004d42:	49ca      	ldr	r1, [pc, #808]	; (800506c <CLI_CommandParser+0x384>)
 8004d44:	f00e fb72 	bl	801342c <strncmp>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d160      	bne.n	8004e0e <CLI_CommandParser+0x126>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004d4c:	2299      	movs	r2, #153	; 0x99
 8004d4e:	0092      	lsls	r2, r2, #2
 8004d50:	0021      	movs	r1, r4
 8004d52:	9803      	ldr	r0, [sp, #12]
 8004d54:	f008 fd00 	bl	800d758 <FreeRTOS_CLIProcessCommand>
 8004d58:	0006      	movs	r6, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004d5a:	7823      	ldrb	r3, [r4, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d000      	beq.n	8004d62 <CLI_CommandParser+0x7a>
 8004d60:	e16f      	b.n	8005042 <CLI_CommandParser+0x35a>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004d62:	0020      	movs	r0, r4
 8004d64:	f7fb f9d8 	bl	8000118 <strlen>
 8004d68:	0002      	movs	r2, r0
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	0020      	movs	r0, r4
 8004d6e:	f00e f91f 	bl	8012fb0 <memset>
	} while(xReturned != pdFALSE);
 8004d72:	2e00      	cmp	r6, #0
 8004d74:	d100      	bne.n	8004d78 <CLI_CommandParser+0x90>
 8004d76:	e1ab      	b.n	80050d0 <CLI_CommandParser+0x3e8>
		StringToLowerCase((char* )cInputString);
 8004d78:	9803      	ldr	r0, [sp, #12]
 8004d7a:	f7ff fcf7 	bl	800476c <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004d7e:	783d      	ldrb	r5, [r7, #0]
 8004d80:	2d00      	cmp	r5, #0
 8004d82:	d1cd      	bne.n	8004d20 <CLI_CommandParser+0x38>
 8004d84:	2203      	movs	r2, #3
 8004d86:	49ba      	ldr	r1, [pc, #744]	; (8005070 <CLI_CommandParser+0x388>)
 8004d88:	9803      	ldr	r0, [sp, #12]
 8004d8a:	f00e fb4f 	bl	801342c <strncmp>
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d1cf      	bne.n	8004d32 <CLI_CommandParser+0x4a>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004d92:	9b03      	ldr	r3, [sp, #12]
 8004d94:	1cd9      	adds	r1, r3, #3
 8004d96:	3001      	adds	r0, #1
 8004d98:	f7ff ff2c 	bl	8004bf4 <AddSnippet>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	d1b6      	bne.n	8004d0e <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 8004da0:	4baf      	ldr	r3, [pc, #700]	; (8005060 <CLI_CommandParser+0x378>)
 8004da2:	2202      	movs	r2, #2
 8004da4:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 8004da6:	230d      	movs	r3, #13
 8004da8:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004daa:	7823      	ldrb	r3, [r4, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d100      	bne.n	8004db2 <CLI_CommandParser+0xca>
 8004db0:	e186      	b.n	80050c0 <CLI_CommandParser+0x3d8>
 8004db2:	4643      	mov	r3, r8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d100      	bne.n	8004dba <CLI_CommandParser+0xd2>
 8004db8:	e19d      	b.n	80050f6 <CLI_CommandParser+0x40e>
 8004dba:	2600      	movs	r6, #0
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004dbc:	0020      	movs	r0, r4
 8004dbe:	f7fb f9ab 	bl	8000118 <strlen>
 8004dc2:	b282      	uxth	r2, r0
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	425b      	negs	r3, r3
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	3333      	adds	r3, #51	; 0x33
 8004dcc:	0021      	movs	r1, r4
 8004dce:	9804      	ldr	r0, [sp, #16]
 8004dd0:	f008 fafe 	bl	800d3d0 <writePxMutex>
 8004dd4:	e7c5      	b.n	8004d62 <CLI_CommandParser+0x7a>
			recordSnippet =0;
 8004dd6:	4ba2      	ldr	r3, [pc, #648]	; (8005060 <CLI_CommandParser+0x378>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 8004ddc:	49a5      	ldr	r1, [pc, #660]	; (8005074 <CLI_CommandParser+0x38c>)
 8004dde:	3003      	adds	r0, #3
 8004de0:	f7ff ff08 	bl	8004bf4 <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004de4:	2241      	movs	r2, #65	; 0x41
 8004de6:	49a4      	ldr	r1, [pc, #656]	; (8005078 <CLI_CommandParser+0x390>)
 8004de8:	0020      	movs	r0, r4
 8004dea:	f00e f8d8 	bl	8012f9e <memcpy>
			xReturned = pdFALSE;
 8004dee:	e7dc      	b.n	8004daa <CLI_CommandParser+0xc2>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004df0:	9903      	ldr	r1, [sp, #12]
 8004df2:	2002      	movs	r0, #2
 8004df4:	f7ff fefe 	bl	8004bf4 <AddSnippet>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d102      	bne.n	8004e02 <CLI_CommandParser+0x11a>
				pcOutputString[0] ='\r';
 8004dfc:	230d      	movs	r3, #13
 8004dfe:	7023      	strb	r3, [r4, #0]
 8004e00:	e7d3      	b.n	8004daa <CLI_CommandParser+0xc2>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004e02:	2252      	movs	r2, #82	; 0x52
 8004e04:	4997      	ldr	r1, [pc, #604]	; (8005064 <CLI_CommandParser+0x37c>)
 8004e06:	0020      	movs	r0, r4
 8004e08:	f00e f8c9 	bl	8012f9e <memcpy>
 8004e0c:	e7cd      	b.n	8004daa <CLI_CommandParser+0xc2>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004e0e:	f00d fe6b 	bl	8012ae8 <__locale_ctype_ptr>
 8004e12:	786b      	ldrb	r3, [r5, #1]
 8004e14:	18c0      	adds	r0, r0, r3
 8004e16:	7843      	ldrb	r3, [r0, #1]
 8004e18:	075b      	lsls	r3, r3, #29
 8004e1a:	d497      	bmi.n	8004d4c <CLI_CommandParser+0x64>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004e1c:	9903      	ldr	r1, [sp, #12]
 8004e1e:	1a6a      	subs	r2, r5, r1
 8004e20:	a807      	add	r0, sp, #28
 8004e22:	f00e fb14 	bl	801344e <strncpy>
				id =GetID(idString);
 8004e26:	a807      	add	r0, sp, #28
 8004e28:	f7ff f9b6 	bl	8004198 <GetID>
 8004e2c:	9005      	str	r0, [sp, #20]
				if(id == myID){
 8004e2e:	4a93      	ldr	r2, [pc, #588]	; (800507c <CLI_CommandParser+0x394>)
 8004e30:	7812      	ldrb	r2, [r2, #0]
 8004e32:	4693      	mov	fp, r2
 8004e34:	4290      	cmp	r0, r2
 8004e36:	d03d      	beq.n	8004eb4 <CLI_CommandParser+0x1cc>
				else if(id == BOS_ERR_WrongName){
 8004e38:	2864      	cmp	r0, #100	; 0x64
 8004e3a:	d043      	beq.n	8004ec4 <CLI_CommandParser+0x1dc>
				else if(id == BOS_ERR_WrongID){
 8004e3c:	2866      	cmp	r0, #102	; 0x66
 8004e3e:	d047      	beq.n	8004ed0 <CLI_CommandParser+0x1e8>
				else if(id == BOS_BROADCAST){
 8004e40:	28ff      	cmp	r0, #255	; 0xff
 8004e42:	d04b      	beq.n	8004edc <CLI_CommandParser+0x1f4>
				else if((uint8_t )id == BOS_MULTICAST){
 8004e44:	466b      	mov	r3, sp
 8004e46:	7d1b      	ldrb	r3, [r3, #20]
 8004e48:	469a      	mov	sl, r3
 8004e4a:	2bfe      	cmp	r3, #254	; 0xfe
 8004e4c:	d078      	beq.n	8004f40 <CLI_CommandParser+0x258>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004e4e:	3501      	adds	r5, #1
 8004e50:	2206      	movs	r2, #6
 8004e52:	498b      	ldr	r1, [pc, #556]	; (8005080 <CLI_CommandParser+0x398>)
 8004e54:	0028      	movs	r0, r5
 8004e56:	f00e fae9 	bl	801342c <strncmp>
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d000      	beq.n	8004e60 <CLI_CommandParser+0x178>
 8004e5e:	e0b4      	b.n	8004fca <CLI_CommandParser+0x2e2>
						BOS.response = BOS_RESPONSE_NONE;
 8004e60:	4b88      	ldr	r3, [pc, #544]	; (8005084 <CLI_CommandParser+0x39c>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	719a      	strb	r2, [r3, #6]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004e66:	2119      	movs	r1, #25
 8004e68:	4650      	mov	r0, sl
 8004e6a:	f004 fc2b 	bl	80096c4 <SendMessageToModule>
						osDelay(100);
 8004e6e:	2064      	movs	r0, #100	; 0x64
 8004e70:	f008 fbdb 	bl	800d62a <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004e74:	4b84      	ldr	r3, [pc, #528]	; (8005088 <CLI_CommandParser+0x3a0>)
 8004e76:	781a      	ldrb	r2, [r3, #0]
 8004e78:	4b80      	ldr	r3, [pc, #512]	; (800507c <CLI_CommandParser+0x394>)
 8004e7a:	7818      	ldrb	r0, [r3, #0]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4651      	mov	r1, sl
 8004e80:	f7fe fe64 	bl	8003b4c <remoteBootloaderUpdate>
					if(BOS.response == BOS_RESPONSE_ALL){
 8004e84:	4b7f      	ldr	r3, [pc, #508]	; (8005084 <CLI_CommandParser+0x39c>)
 8004e86:	799b      	ldrb	r3, [r3, #6]
 8004e88:	2b60      	cmp	r3, #96	; 0x60
 8004e8a:	d18e      	bne.n	8004daa <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8004e8c:	21fa      	movs	r1, #250	; 0xfa
 8004e8e:	0089      	lsls	r1, r1, #2
 8004e90:	2001      	movs	r0, #1
 8004e92:	f009 ff9d 	bl	800edd0 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8004e96:	4b7d      	ldr	r3, [pc, #500]	; (800508c <CLI_CommandParser+0x3a4>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d085      	beq.n	8004daa <CLI_CommandParser+0xc2>
							++timedoutMsg;
 8004e9e:	4a7c      	ldr	r2, [pc, #496]	; (8005090 <CLI_CommandParser+0x3a8>)
 8004ea0:	8813      	ldrh	r3, [r2, #0]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004ea6:	9b05      	ldr	r3, [sp, #20]
 8004ea8:	0022      	movs	r2, r4
 8004eaa:	497a      	ldr	r1, [pc, #488]	; (8005094 <CLI_CommandParser+0x3ac>)
 8004eac:	0020      	movs	r0, r4
 8004eae:	f00e fa79 	bl	80133a4 <sprintf>
 8004eb2:	e77a      	b.n	8004daa <CLI_CommandParser+0xc2>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004eb4:	2299      	movs	r2, #153	; 0x99
 8004eb6:	1c68      	adds	r0, r5, #1
 8004eb8:	0092      	lsls	r2, r2, #2
 8004eba:	0021      	movs	r1, r4
 8004ebc:	f008 fc4c 	bl	800d758 <FreeRTOS_CLIProcessCommand>
 8004ec0:	0006      	movs	r6, r0
 8004ec2:	e74a      	b.n	8004d5a <CLI_CommandParser+0x72>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004ec4:	2227      	movs	r2, #39	; 0x27
 8004ec6:	4974      	ldr	r1, [pc, #464]	; (8005098 <CLI_CommandParser+0x3b0>)
 8004ec8:	0020      	movs	r0, r4
 8004eca:	f00e f868 	bl	8012f9e <memcpy>
 8004ece:	e76c      	b.n	8004daa <CLI_CommandParser+0xc2>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004ed0:	2225      	movs	r2, #37	; 0x25
 8004ed2:	4972      	ldr	r1, [pc, #456]	; (800509c <CLI_CommandParser+0x3b4>)
 8004ed4:	0020      	movs	r0, r4
 8004ed6:	f00e f862 	bl	8012f9e <memcpy>
 8004eda:	e766      	b.n	8004daa <CLI_CommandParser+0xc2>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004edc:	221a      	movs	r2, #26
 8004ede:	2100      	movs	r1, #0
 8004ee0:	486f      	ldr	r0, [pc, #444]	; (80050a0 <CLI_CommandParser+0x3b8>)
 8004ee2:	f00e f865 	bl	8012fb0 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004ee6:	3501      	adds	r5, #1
 8004ee8:	9803      	ldr	r0, [sp, #12]
 8004eea:	f7fb f915 	bl	8000118 <strlen>
 8004eee:	0006      	movs	r6, r0
 8004ef0:	ab07      	add	r3, sp, #28
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f7fb f910 	bl	8000118 <strlen>
 8004ef8:	1e72      	subs	r2, r6, #1
 8004efa:	1a12      	subs	r2, r2, r0
 8004efc:	0029      	movs	r1, r5
 8004efe:	4869      	ldr	r0, [pc, #420]	; (80050a4 <CLI_CommandParser+0x3bc>)
 8004f00:	f00e faa5 	bl	801344e <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004f04:	9803      	ldr	r0, [sp, #12]
 8004f06:	f7fb f907 	bl	8000118 <strlen>
 8004f0a:	0006      	movs	r6, r0
 8004f0c:	a807      	add	r0, sp, #28
 8004f0e:	f7fb f903 	bl	8000118 <strlen>
 8004f12:	1a33      	subs	r3, r6, r0
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2217      	movs	r2, #23
 8004f18:	21ff      	movs	r1, #255	; 0xff
 8004f1a:	4658      	mov	r0, fp
 8004f1c:	f004 fbaa 	bl	8009674 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f20:	2299      	movs	r2, #153	; 0x99
 8004f22:	0092      	lsls	r2, r2, #2
 8004f24:	0021      	movs	r1, r4
 8004f26:	0028      	movs	r0, r5
 8004f28:	f008 fc16 	bl	800d758 <FreeRTOS_CLIProcessCommand>
 8004f2c:	0006      	movs	r6, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004f2e:	0020      	movs	r0, r4
 8004f30:	f7fb f8f2 	bl	8000118 <strlen>
 8004f34:	1820      	adds	r0, r4, r0
 8004f36:	221d      	movs	r2, #29
 8004f38:	495b      	ldr	r1, [pc, #364]	; (80050a8 <CLI_CommandParser+0x3c0>)
 8004f3a:	f00e f830 	bl	8012f9e <memcpy>
 8004f3e:	e70c      	b.n	8004d5a <CLI_CommandParser+0x72>
					group =id >> 8;
 8004f40:	9b05      	ldr	r3, [sp, #20]
 8004f42:	121b      	asrs	r3, r3, #8
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	469a      	mov	sl, r3
 8004f48:	4b58      	ldr	r3, [pc, #352]	; (80050ac <CLI_CommandParser+0x3c4>)
 8004f4a:	4699      	mov	r9, r3
 8004f4c:	4652      	mov	r2, sl
 8004f4e:	701a      	strb	r2, [r3, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004f50:	221a      	movs	r2, #26
 8004f52:	2100      	movs	r1, #0
 8004f54:	4852      	ldr	r0, [pc, #328]	; (80050a0 <CLI_CommandParser+0x3b8>)
 8004f56:	f00e f82b 	bl	8012fb0 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004f5a:	1c6b      	adds	r3, r5, #1
 8004f5c:	9305      	str	r3, [sp, #20]
 8004f5e:	9803      	ldr	r0, [sp, #12]
 8004f60:	f7fb f8da 	bl	8000118 <strlen>
 8004f64:	0005      	movs	r5, r0
 8004f66:	aa07      	add	r2, sp, #28
 8004f68:	0010      	movs	r0, r2
 8004f6a:	f7fb f8d5 	bl	8000118 <strlen>
 8004f6e:	3d01      	subs	r5, #1
 8004f70:	1a2a      	subs	r2, r5, r0
 8004f72:	9905      	ldr	r1, [sp, #20]
 8004f74:	484b      	ldr	r0, [pc, #300]	; (80050a4 <CLI_CommandParser+0x3bc>)
 8004f76:	f00e fa6a 	bl	801344e <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004f7a:	9803      	ldr	r0, [sp, #12]
 8004f7c:	f7fb f8cc 	bl	8000118 <strlen>
 8004f80:	0005      	movs	r5, r0
 8004f82:	a807      	add	r0, sp, #28
 8004f84:	f7fb f8c8 	bl	8000118 <strlen>
 8004f88:	1a2b      	subs	r3, r5, r0
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2217      	movs	r2, #23
 8004f8e:	4651      	mov	r1, sl
 8004f90:	4658      	mov	r0, fp
 8004f92:	f004 fb6f 	bl	8009674 <BroadcastMessage>
					if(InGroup(myID,group))
 8004f96:	4b39      	ldr	r3, [pc, #228]	; (800507c <CLI_CommandParser+0x394>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	4a44      	ldr	r2, [pc, #272]	; (80050b0 <CLI_CommandParser+0x3c8>)
 8004fa0:	5a9b      	ldrh	r3, [r3, r2]
 8004fa2:	464a      	mov	r2, r9
 8004fa4:	7812      	ldrb	r2, [r2, #0]
 8004fa6:	4113      	asrs	r3, r2
 8004fa8:	07db      	lsls	r3, r3, #31
 8004faa:	d406      	bmi.n	8004fba <CLI_CommandParser+0x2d2>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 8004fac:	ab07      	add	r3, sp, #28
 8004fae:	0022      	movs	r2, r4
 8004fb0:	4940      	ldr	r1, [pc, #256]	; (80050b4 <CLI_CommandParser+0x3cc>)
 8004fb2:	0020      	movs	r0, r4
 8004fb4:	f00e f9f6 	bl	80133a4 <sprintf>
 8004fb8:	e6cf      	b.n	8004d5a <CLI_CommandParser+0x72>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004fba:	2299      	movs	r2, #153	; 0x99
 8004fbc:	0092      	lsls	r2, r2, #2
 8004fbe:	0021      	movs	r1, r4
 8004fc0:	9805      	ldr	r0, [sp, #20]
 8004fc2:	f008 fbc9 	bl	800d758 <FreeRTOS_CLIProcessCommand>
 8004fc6:	0006      	movs	r6, r0
 8004fc8:	e7f0      	b.n	8004fac <CLI_CommandParser+0x2c4>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004fca:	9803      	ldr	r0, [sp, #12]
 8004fcc:	f7fb f8a4 	bl	8000118 <strlen>
 8004fd0:	0006      	movs	r6, r0
 8004fd2:	ab07      	add	r3, sp, #28
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f7fb f89f 	bl	8000118 <strlen>
 8004fda:	1e72      	subs	r2, r6, #1
 8004fdc:	1a12      	subs	r2, r2, r0
 8004fde:	0029      	movs	r1, r5
 8004fe0:	4830      	ldr	r0, [pc, #192]	; (80050a4 <CLI_CommandParser+0x3bc>)
 8004fe2:	f00e fa34 	bl	801344e <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8004fe6:	9803      	ldr	r0, [sp, #12]
 8004fe8:	f7fb f896 	bl	8000118 <strlen>
 8004fec:	0005      	movs	r5, r0
 8004fee:	a807      	add	r0, sp, #28
 8004ff0:	f7fb f892 	bl	8000118 <strlen>
 8004ff4:	3d01      	subs	r5, #1
 8004ff6:	1a2a      	subs	r2, r5, r0
 8004ff8:	b292      	uxth	r2, r2
 8004ffa:	2117      	movs	r1, #23
 8004ffc:	4650      	mov	r0, sl
 8004ffe:	f004 fb61 	bl	80096c4 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8005002:	9a05      	ldr	r2, [sp, #20]
 8005004:	492c      	ldr	r1, [pc, #176]	; (80050b8 <CLI_CommandParser+0x3d0>)
 8005006:	0020      	movs	r0, r4
 8005008:	f00e f9cc 	bl	80133a4 <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 800500c:	7823      	ldrb	r3, [r4, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <CLI_CommandParser+0x330>
 8005012:	4643      	mov	r3, r8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d108      	bne.n	800502a <CLI_CommandParser+0x342>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005018:	0020      	movs	r0, r4
 800501a:	f7fb f87d 	bl	8000118 <strlen>
 800501e:	0002      	movs	r2, r0
 8005020:	2100      	movs	r1, #0
 8005022:	0020      	movs	r0, r4
 8005024:	f00d ffc4 	bl	8012fb0 <memset>
 8005028:	e72c      	b.n	8004e84 <CLI_CommandParser+0x19c>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 800502a:	0020      	movs	r0, r4
 800502c:	f7fb f874 	bl	8000118 <strlen>
 8005030:	b282      	uxth	r2, r0
 8005032:	2301      	movs	r3, #1
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	3331      	adds	r3, #49	; 0x31
 8005038:	0021      	movs	r1, r4
 800503a:	9804      	ldr	r0, [sp, #16]
 800503c:	f008 f9c8 	bl	800d3d0 <writePxMutex>
 8005040:	e7ea      	b.n	8005018 <CLI_CommandParser+0x330>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8005042:	4643      	mov	r3, r8
 8005044:	2b00      	cmp	r3, #0
 8005046:	d100      	bne.n	800504a <CLI_CommandParser+0x362>
 8005048:	e68b      	b.n	8004d62 <CLI_CommandParser+0x7a>
 800504a:	e6b7      	b.n	8004dbc <CLI_CommandParser+0xd4>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 800504c:	2301      	movs	r3, #1
 800504e:	425b      	negs	r3, r3
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	3333      	adds	r3, #51	; 0x33
 8005054:	2238      	movs	r2, #56	; 0x38
 8005056:	4919      	ldr	r1, [pc, #100]	; (80050bc <CLI_CommandParser+0x3d4>)
 8005058:	9804      	ldr	r0, [sp, #16]
 800505a:	f008 f9b9 	bl	800d3d0 <writePxMutex>
}
 800505e:	e043      	b.n	80050e8 <CLI_CommandParser+0x400>
 8005060:	2000124c 	.word	0x2000124c
 8005064:	08017e48 	.word	0x08017e48
 8005068:	08017e9c 	.word	0x08017e9c
 800506c:	08017ee8 	.word	0x08017ee8
 8005070:	08017e44 	.word	0x08017e44
 8005074:	08017adc 	.word	0x08017adc
 8005078:	08017ea4 	.word	0x08017ea4
 800507c:	20001076 	.word	0x20001076
 8005080:	08017f88 	.word	0x08017f88
 8005084:	200069c4 	.word	0x200069c4
 8005088:	20000a77 	.word	0x20000a77
 800508c:	20001110 	.word	0x20001110
 8005090:	2000179a 	.word	0x2000179a
 8005094:	08017fb4 	.word	0x08017fb4
 8005098:	08017eec 	.word	0x08017eec
 800509c:	08017f14 	.word	0x08017f14
 80050a0:	20000cec 	.word	0x20000cec
 80050a4:	20000f38 	.word	0x20000f38
 80050a8:	08017f3c 	.word	0x08017f3c
 80050ac:	2000121e 	.word	0x2000121e
 80050b0:	20000ec0 	.word	0x20000ec0
 80050b4:	08017f5c 	.word	0x08017f5c
 80050b8:	08017f90 	.word	0x08017f90
 80050bc:	08017fd4 	.word	0x08017fd4
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80050c0:	0020      	movs	r0, r4
 80050c2:	f7fb f829 	bl	8000118 <strlen>
 80050c6:	0002      	movs	r2, r0
 80050c8:	2100      	movs	r1, #0
 80050ca:	0020      	movs	r0, r4
 80050cc:	f00d ff70 	bl	8012fb0 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 80050d0:	2209      	movs	r2, #9
 80050d2:	2100      	movs	r1, #0
 80050d4:	a807      	add	r0, sp, #28
 80050d6:	f00d ff6b 	bl	8012fb0 <memset>
	if(!recordSnippet && enableOutput)
 80050da:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <CLI_CommandParser+0x420>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <CLI_CommandParser+0x400>
 80050e2:	4643      	mov	r3, r8
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1b1      	bne.n	800504c <CLI_CommandParser+0x364>
}
 80050e8:	b00b      	add	sp, #44	; 0x2c
 80050ea:	bc3c      	pop	{r2, r3, r4, r5}
 80050ec:	4690      	mov	r8, r2
 80050ee:	4699      	mov	r9, r3
 80050f0:	46a2      	mov	sl, r4
 80050f2:	46ab      	mov	fp, r5
 80050f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80050f6:	0020      	movs	r0, r4
 80050f8:	f7fb f80e 	bl	8000118 <strlen>
 80050fc:	0002      	movs	r2, r0
 80050fe:	2100      	movs	r1, #0
 8005100:	0020      	movs	r0, r4
 8005102:	f00d ff55 	bl	8012fb0 <memset>
 8005106:	e7e3      	b.n	80050d0 <CLI_CommandParser+0x3e8>
 8005108:	2000124c 	.word	0x2000124c

0800510c <prvCLITask>:
void prvCLITask(void *pvParameters){
 800510c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800510e:	46de      	mov	lr, fp
 8005110:	4657      	mov	r7, sl
 8005112:	464e      	mov	r6, r9
 8005114:	b5c0      	push	{r6, r7, lr}
 8005116:	b086      	sub	sp, #24
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005118:	2101      	movs	r1, #1
 800511a:	4249      	negs	r1, r1
 800511c:	2001      	movs	r0, #1
 800511e:	f009 fe57 	bl	800edd0 <ulTaskNotifyTake>
	cRxedChar ='\0';
 8005122:	230f      	movs	r3, #15
 8005124:	aa02      	add	r2, sp, #8
 8005126:	4694      	mov	ip, r2
 8005128:	4463      	add	r3, ip
 800512a:	2200      	movs	r2, #0
 800512c:	701a      	strb	r2, [r3, #0]
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800512e:	f008 fb91 	bl	800d854 <FreeRTOS_CLIGetOutputBuffer>
 8005132:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005134:	23e1      	movs	r3, #225	; 0xe1
 8005136:	031b      	lsls	r3, r3, #12
 8005138:	4a5f      	ldr	r2, [pc, #380]	; (80052b8 <prvCLITask+0x1ac>)
 800513a:	6892      	ldr	r2, [r2, #8]
 800513c:	429a      	cmp	r2, r3
 800513e:	d009      	beq.n	8005154 <prvCLITask+0x48>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005140:	2401      	movs	r4, #1
			if(port != PcPort)
 8005142:	4e5e      	ldr	r6, [pc, #376]	; (80052bc <prvCLITask+0x1b0>)
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005144:	001d      	movs	r5, r3
			if(port != PcPort)
 8005146:	7833      	ldrb	r3, [r6, #0]
 8005148:	42a3      	cmp	r3, r4
 800514a:	d12d      	bne.n	80051a8 <prvCLITask+0x9c>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800514c:	3401      	adds	r4, #1
 800514e:	b2e4      	uxtb	r4, r4
 8005150:	2c07      	cmp	r4, #7
 8005152:	d1f8      	bne.n	8005146 <prvCLITask+0x3a>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 8005154:	4b5a      	ldr	r3, [pc, #360]	; (80052c0 <prvCLITask+0x1b4>)
 8005156:	881a      	ldrh	r2, [r3, #0]
 8005158:	0053      	lsls	r3, r2, #1
 800515a:	189b      	adds	r3, r3, r2
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	4a59      	ldr	r2, [pc, #356]	; (80052c4 <prvCLITask+0x1b8>)
 8005160:	189b      	adds	r3, r3, r2
 8005162:	4a59      	ldr	r2, [pc, #356]	; (80052c8 <prvCLITask+0x1bc>)
 8005164:	7812      	ldrb	r2, [r2, #0]
 8005166:	4c59      	ldr	r4, [pc, #356]	; (80052cc <prvCLITask+0x1c0>)
 8005168:	4d54      	ldr	r5, [pc, #336]	; (80052bc <prvCLITask+0x1b0>)
 800516a:	7829      	ldrb	r1, [r5, #0]
 800516c:	9100      	str	r1, [sp, #0]
 800516e:	4958      	ldr	r1, [pc, #352]	; (80052d0 <prvCLITask+0x1c4>)
 8005170:	0020      	movs	r0, r4
 8005172:	f00e f917 	bl	80133a4 <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 8005176:	22a4      	movs	r2, #164	; 0xa4
 8005178:	7828      	ldrb	r0, [r5, #0]
 800517a:	230a      	movs	r3, #10
 800517c:	0092      	lsls	r2, r2, #2
 800517e:	4955      	ldr	r1, [pc, #340]	; (80052d4 <prvCLITask+0x1c8>)
 8005180:	f008 f94e 	bl	800d420 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 8005184:	0020      	movs	r0, r4
 8005186:	f7fa ffc7 	bl	8000118 <strlen>
 800518a:	b282      	uxth	r2, r0
 800518c:	7828      	ldrb	r0, [r5, #0]
 800518e:	230a      	movs	r3, #10
 8005190:	0021      	movs	r1, r4
 8005192:	f008 f945 	bl	800d420 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 8005196:	2300      	movs	r3, #0
 8005198:	469b      	mov	fp, r3
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800519a:	4b48      	ldr	r3, [pc, #288]	; (80052bc <prvCLITask+0x1b0>)
 800519c:	469a      	mov	sl, r3
 800519e:	4b4e      	ldr	r3, [pc, #312]	; (80052d8 <prvCLITask+0x1cc>)
 80051a0:	4699      	mov	r9, r3
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80051a2:	001f      	movs	r7, r3
			if(UARTRxBuf[PcPort - 1][chr]){
 80051a4:	4656      	mov	r6, sl
 80051a6:	e066      	b.n	8005276 <prvCLITask+0x16a>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 80051a8:	0029      	movs	r1, r5
 80051aa:	0020      	movs	r0, r4
 80051ac:	f008 f97e 	bl	800d4ac <UpdateBaudrate>
 80051b0:	e7cc      	b.n	800514c <prvCLITask+0x40>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 80051b2:	200f      	movs	r0, #15
 80051b4:	ad02      	add	r5, sp, #8
 80051b6:	46ac      	mov	ip, r5
 80051b8:	4460      	add	r0, ip
 80051ba:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort - 1][chr] =0;
 80051bc:	0198      	lsls	r0, r3, #6
 80051be:	4a47      	ldr	r2, [pc, #284]	; (80052dc <prvCLITask+0x1d0>)
 80051c0:	1812      	adds	r2, r2, r0
 80051c2:	2000      	movs	r0, #0
 80051c4:	5450      	strb	r0, [r2, r1]
				UARTRxBufIndex[PcPort - 1] =chr;
 80051c6:	4a44      	ldr	r2, [pc, #272]	; (80052d8 <prvCLITask+0x1cc>)
 80051c8:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 80051ca:	240f      	movs	r4, #15
 80051cc:	ab02      	add	r3, sp, #8
 80051ce:	469c      	mov	ip, r3
 80051d0:	4464      	add	r4, ip
 80051d2:	4b3a      	ldr	r3, [pc, #232]	; (80052bc <prvCLITask+0x1b0>)
 80051d4:	7818      	ldrb	r0, [r3, #0]
 80051d6:	230a      	movs	r3, #10
 80051d8:	2201      	movs	r2, #1
 80051da:	0021      	movs	r1, r4
 80051dc:	f008 f920 	bl	800d420 <writePxITMutex>
		if(cRxedChar == '\r'){
 80051e0:	7823      	ldrb	r3, [r4, #0]
 80051e2:	2b0d      	cmp	r3, #13
 80051e4:	d028      	beq.n	8005238 <prvCLITask+0x12c>
			if(cRxedChar == '\n'){
 80051e6:	2b0a      	cmp	r3, #10
 80051e8:	d043      	beq.n	8005272 <prvCLITask+0x166>
			else if(cRxedChar == '\b'){
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d059      	beq.n	80052a2 <prvCLITask+0x196>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 80051ee:	001a      	movs	r2, r3
 80051f0:	3a20      	subs	r2, #32
 80051f2:	2a5e      	cmp	r2, #94	; 0x5e
 80051f4:	d83d      	bhi.n	8005272 <prvCLITask+0x166>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 80051f6:	465a      	mov	r2, fp
 80051f8:	2a31      	cmp	r2, #49	; 0x31
 80051fa:	dc3a      	bgt.n	8005272 <prvCLITask+0x166>
						cInputString[cInputIndex] =cRxedChar;
 80051fc:	4a38      	ldr	r2, [pc, #224]	; (80052e0 <prvCLITask+0x1d4>)
 80051fe:	4659      	mov	r1, fp
 8005200:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 8005202:	465b      	mov	r3, fp
 8005204:	3301      	adds	r3, #1
 8005206:	b25b      	sxtb	r3, r3
 8005208:	469b      	mov	fp, r3
 800520a:	e032      	b.n	8005272 <prvCLITask+0x166>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 800520c:	2200      	movs	r2, #0
 800520e:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 8005210:	f00a f8b8 	bl	800f384 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005214:	3c3e      	subs	r4, #62	; 0x3e
			if(UARTRxBuf[PcPort - 1][chr]){
 8005216:	7833      	ldrb	r3, [r6, #0]
 8005218:	3b01      	subs	r3, #1
 800521a:	0021      	movs	r1, r4
 800521c:	019a      	lsls	r2, r3, #6
 800521e:	18aa      	adds	r2, r5, r2
 8005220:	5d12      	ldrb	r2, [r2, r4]
 8005222:	2a00      	cmp	r2, #0
 8005224:	d1c5      	bne.n	80051b2 <prvCLITask+0xa6>
			if(chr == MSG_RX_BUF_SIZE - 1){
 8005226:	2c3f      	cmp	r4, #63	; 0x3f
 8005228:	d0f0      	beq.n	800520c <prvCLITask+0x100>
			taskYIELD();
 800522a:	f00a f8ab 	bl	800f384 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800522e:	3401      	adds	r4, #1
 8005230:	b2a4      	uxth	r4, r4
 8005232:	2c3f      	cmp	r4, #63	; 0x3f
 8005234:	d9ef      	bls.n	8005216 <prvCLITask+0x10a>
 8005236:	e7c8      	b.n	80051ca <prvCLITask+0xbe>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8005238:	4b20      	ldr	r3, [pc, #128]	; (80052bc <prvCLITask+0x1b0>)
 800523a:	7818      	ldrb	r0, [r3, #0]
 800523c:	230a      	movs	r3, #10
 800523e:	2202      	movs	r2, #2
 8005240:	4928      	ldr	r1, [pc, #160]	; (80052e4 <prvCLITask+0x1d8>)
 8005242:	f008 f8ed 	bl	800d420 <writePxITMutex>
			if(cInputIndex == 0){
 8005246:	465b      	mov	r3, fp
 8005248:	2b00      	cmp	r3, #0
 800524a:	d025      	beq.n	8005298 <prvCLITask+0x18c>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800524c:	4c24      	ldr	r4, [pc, #144]	; (80052e0 <prvCLITask+0x1d4>)
 800524e:	4b1b      	ldr	r3, [pc, #108]	; (80052bc <prvCLITask+0x1b0>)
 8005250:	7818      	ldrb	r0, [r3, #0]
 8005252:	9b03      	ldr	r3, [sp, #12]
 8005254:	0022      	movs	r2, r4
 8005256:	2101      	movs	r1, #1
 8005258:	f7ff fd46 	bl	8004ce8 <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 800525c:	0021      	movs	r1, r4
 800525e:	4822      	ldr	r0, [pc, #136]	; (80052e8 <prvCLITask+0x1dc>)
 8005260:	f00e f8dc 	bl	801341c <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 8005264:	2232      	movs	r2, #50	; 0x32
 8005266:	2100      	movs	r1, #0
 8005268:	0020      	movs	r0, r4
 800526a:	f00d fea1 	bl	8012fb0 <memset>
			cInputIndex =0;
 800526e:	2300      	movs	r3, #0
 8005270:	469b      	mov	fp, r3
		taskYIELD();
 8005272:	f00a f887 	bl	800f384 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005276:	4653      	mov	r3, sl
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	3b01      	subs	r3, #1
 800527c:	464a      	mov	r2, r9
 800527e:	5cd2      	ldrb	r2, [r2, r3]
 8005280:	b294      	uxth	r4, r2
 8005282:	2c3f      	cmp	r4, #63	; 0x3f
 8005284:	d8a1      	bhi.n	80051ca <prvCLITask+0xbe>
			if(UARTRxBuf[PcPort - 1][chr]){
 8005286:	0011      	movs	r1, r2
 8005288:	019d      	lsls	r5, r3, #6
 800528a:	4814      	ldr	r0, [pc, #80]	; (80052dc <prvCLITask+0x1d0>)
 800528c:	1940      	adds	r0, r0, r5
 800528e:	5c82      	ldrb	r2, [r0, r2]
 8005290:	2a00      	cmp	r2, #0
 8005292:	d18e      	bne.n	80051b2 <prvCLITask+0xa6>
 8005294:	4d11      	ldr	r5, [pc, #68]	; (80052dc <prvCLITask+0x1d0>)
 8005296:	e7c6      	b.n	8005226 <prvCLITask+0x11a>
				strcpy((char* )cInputString,(char* )cLastInputString);
 8005298:	4913      	ldr	r1, [pc, #76]	; (80052e8 <prvCLITask+0x1dc>)
 800529a:	4811      	ldr	r0, [pc, #68]	; (80052e0 <prvCLITask+0x1d4>)
 800529c:	f00e f8be 	bl	801341c <strcpy>
 80052a0:	e7d4      	b.n	800524c <prvCLITask+0x140>
				if(cInputIndex > 0){
 80052a2:	465b      	mov	r3, fp
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	dde4      	ble.n	8005272 <prvCLITask+0x166>
					cInputIndex--;
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b25b      	sxtb	r3, r3
 80052ac:	469b      	mov	fp, r3
					cInputString[cInputIndex] ='\0';
 80052ae:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <prvCLITask+0x1d4>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	4659      	mov	r1, fp
 80052b4:	545a      	strb	r2, [r3, r1]
 80052b6:	e7dc      	b.n	8005272 <prvCLITask+0x166>
 80052b8:	200069c4 	.word	0x200069c4
 80052bc:	20000a77 	.word	0x20000a77
 80052c0:	20000050 	.word	0x20000050
 80052c4:	08017b2c 	.word	0x08017b2c
 80052c8:	20001076 	.word	0x20001076
 80052cc:	20001220 	.word	0x20001220
 80052d0:	08018040 	.word	0x08018040
 80052d4:	0801806c 	.word	0x0801806c
 80052d8:	20001450 	.word	0x20001450
 80052dc:	200012d0 	.word	0x200012d0
 80052e0:	20001150 	.word	0x20001150
 80052e4:	0801992c 	.word	0x0801992c
 80052e8:	200011ec 	.word	0x200011ec

080052ec <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80052f0:	4b1c      	ldr	r3, [pc, #112]	; (8005364 <ParseSnippetCommand+0x78>)
 80052f2:	781a      	ldrb	r2, [r3, #0]
 80052f4:	3a01      	subs	r2, #1
 80052f6:	0093      	lsls	r3, r2, #2
 80052f8:	189b      	adds	r3, r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4a1a      	ldr	r2, [pc, #104]	; (8005368 <ParseSnippetCommand+0x7c>)
 80052fe:	18d3      	adds	r3, r2, r3
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d02c      	beq.n	8005360 <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8005306:	4b19      	ldr	r3, [pc, #100]	; (800536c <ParseSnippetCommand+0x80>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d014      	beq.n	8005338 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 800530e:	4b17      	ldr	r3, [pc, #92]	; (800536c <ParseSnippetCommand+0x80>)
 8005310:	681d      	ldr	r5, [r3, #0]
 8005312:	782b      	ldrb	r3, [r5, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d012      	beq.n	800533e <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8005318:	2113      	movs	r1, #19
 800531a:	0028      	movs	r0, r5
 800531c:	f00e f870 	bl	8013400 <strchr>
 8005320:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 8005322:	d011      	beq.n	8005348 <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 8005324:	1b42      	subs	r2, r0, r5
 8005326:	0029      	movs	r1, r5
 8005328:	0020      	movs	r0, r4
 800532a:	f00e f890 	bl	801344e <strncpy>
		ptrStart =ptrEnd + 1;
 800532e:	3601      	adds	r6, #1
 8005330:	4b0e      	ldr	r3, [pc, #56]	; (800536c <ParseSnippetCommand+0x80>)
 8005332:	601e      	str	r6, [r3, #0]
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 8005334:	2001      	movs	r0, #1
 8005336:	e006      	b.n	8005346 <ParseSnippetCommand+0x5a>
		ptrStart =snippetBuffer;
 8005338:	4b0c      	ldr	r3, [pc, #48]	; (800536c <ParseSnippetCommand+0x80>)
 800533a:	6018      	str	r0, [r3, #0]
 800533c:	e7e7      	b.n	800530e <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 800533e:	4b0b      	ldr	r3, [pc, #44]	; (800536c <ParseSnippetCommand+0x80>)
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
		return false;
 8005344:	2000      	movs	r0, #0
}
 8005346:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )cliBuffer,ptrStart);
 8005348:	0029      	movs	r1, r5
 800534a:	0020      	movs	r0, r4
 800534c:	f00e f866 	bl	801341c <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 8005350:	0020      	movs	r0, r4
 8005352:	f7fa fee1 	bl	8000118 <strlen>
 8005356:	182d      	adds	r5, r5, r0
 8005358:	4b04      	ldr	r3, [pc, #16]	; (800536c <ParseSnippetCommand+0x80>)
 800535a:	601d      	str	r5, [r3, #0]
	return true;
 800535c:	2001      	movs	r0, #1
 800535e:	e7f2      	b.n	8005346 <ParseSnippetCommand+0x5a>
		return false;
 8005360:	2000      	movs	r0, #0
 8005362:	e7f0      	b.n	8005346 <ParseSnippetCommand+0x5a>
 8005364:	2000121f 	.word	0x2000121f
 8005368:	200069e0 	.word	0x200069e0
 800536c:	20001248 	.word	0x20001248

08005370 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 8005370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005372:	b083      	sub	sp, #12
 8005374:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8005376:	0083      	lsls	r3, r0, #2
 8005378:	181b      	adds	r3, r3, r0
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4a3f      	ldr	r2, [pc, #252]	; (800547c <CheckSnippetCondition+0x10c>)
 800537e:	5c9b      	ldrb	r3, [r3, r2]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d003      	beq.n	800538c <CheckSnippetCondition+0x1c>
 8005384:	2b03      	cmp	r3, #3
 8005386:	d015      	beq.n	80053b4 <CheckSnippetCondition+0x44>
			
		default:
			break;
	}
	
	return false;
 8005388:	2000      	movs	r0, #0
 800538a:	e011      	b.n	80053b0 <CheckSnippetCondition+0x40>
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 800538c:	493b      	ldr	r1, [pc, #236]	; (800547c <CheckSnippetCondition+0x10c>)
 800538e:	0083      	lsls	r3, r0, #2
 8005390:	181a      	adds	r2, r3, r0
 8005392:	0092      	lsls	r2, r2, #2
 8005394:	188a      	adds	r2, r1, r2
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 8005396:	7890      	ldrb	r0, [r2, #2]
 8005398:	00c2      	lsls	r2, r0, #3
 800539a:	1812      	adds	r2, r2, r0
 800539c:	191b      	adds	r3, r3, r4
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	18cb      	adds	r3, r1, r3
 80053a2:	4937      	ldr	r1, [pc, #220]	; (8005480 <CheckSnippetCondition+0x110>)
 80053a4:	5c50      	ldrb	r0, [r2, r1]
 80053a6:	78db      	ldrb	r3, [r3, #3]
 80053a8:	1ac0      	subs	r0, r0, r3
 80053aa:	4243      	negs	r3, r0
 80053ac:	4158      	adcs	r0, r3
 80053ae:	b2c0      	uxtb	r0, r0
}
 80053b0:	b003      	add	sp, #12
 80053b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 80053b4:	4e31      	ldr	r6, [pc, #196]	; (800547c <CheckSnippetCondition+0x10c>)
 80053b6:	0085      	lsls	r5, r0, #2
 80053b8:	182b      	adds	r3, r5, r0
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	18f3      	adds	r3, r6, r3
 80053be:	78da      	ldrb	r2, [r3, #3]
 80053c0:	3a01      	subs	r2, #1
 80053c2:	0053      	lsls	r3, r2, #1
 80053c4:	189b      	adds	r3, r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4a2e      	ldr	r2, [pc, #184]	; (8005484 <CheckSnippetCondition+0x114>)
 80053ca:	589b      	ldr	r3, [r3, r2]
 80053cc:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80053ce:	1829      	adds	r1, r5, r0
 80053d0:	0089      	lsls	r1, r1, #2
 80053d2:	3106      	adds	r1, #6
 80053d4:	1989      	adds	r1, r1, r6
 80053d6:	2204      	movs	r2, #4
 80053d8:	a801      	add	r0, sp, #4
 80053da:	f00d fde0 	bl	8012f9e <memcpy>
			switch(snippets[index].cond.mathOperator){
 80053de:	192d      	adds	r5, r5, r4
 80053e0:	00ad      	lsls	r5, r5, #2
 80053e2:	1975      	adds	r5, r6, r5
 80053e4:	786b      	ldrb	r3, [r5, #1]
 80053e6:	2b06      	cmp	r3, #6
 80053e8:	d83f      	bhi.n	800546a <CheckSnippetCondition+0xfa>
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4a26      	ldr	r2, [pc, #152]	; (8005488 <CheckSnippetCondition+0x118>)
 80053ee:	58d3      	ldr	r3, [r2, r3]
 80053f0:	469f      	mov	pc, r3
					if(flt1 == flt2)
 80053f2:	1c39      	adds	r1, r7, #0
 80053f4:	9801      	ldr	r0, [sp, #4]
 80053f6:	f7fb f86b 	bl	80004d0 <__aeabi_fcmpeq>
 80053fa:	1e43      	subs	r3, r0, #1
 80053fc:	4198      	sbcs	r0, r3
 80053fe:	e7d7      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 > flt2)
 8005400:	1c39      	adds	r1, r7, #0
 8005402:	9801      	ldr	r0, [sp, #4]
 8005404:	f7fb f86a 	bl	80004dc <__aeabi_fcmplt>
 8005408:	1e43      	subs	r3, r0, #1
 800540a:	4198      	sbcs	r0, r3
 800540c:	e7d0      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 < flt2 && flt1 != 0.0f)
 800540e:	1c39      	adds	r1, r7, #0
 8005410:	9801      	ldr	r0, [sp, #4]
 8005412:	f7fb f877 	bl	8000504 <__aeabi_fcmpgt>
 8005416:	2800      	cmp	r0, #0
 8005418:	d029      	beq.n	800546e <CheckSnippetCondition+0xfe>
 800541a:	2100      	movs	r1, #0
 800541c:	1c38      	adds	r0, r7, #0
 800541e:	f7fb f857 	bl	80004d0 <__aeabi_fcmpeq>
 8005422:	4243      	negs	r3, r0
 8005424:	4158      	adcs	r0, r3
 8005426:	e7c3      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 >= flt2)
 8005428:	1c39      	adds	r1, r7, #0
 800542a:	9801      	ldr	r0, [sp, #4]
 800542c:	f7fb f860 	bl	80004f0 <__aeabi_fcmple>
 8005430:	1e43      	subs	r3, r0, #1
 8005432:	4198      	sbcs	r0, r3
 8005434:	e7bc      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 <= flt2 && flt1 != 0.0f)
 8005436:	1c39      	adds	r1, r7, #0
 8005438:	9801      	ldr	r0, [sp, #4]
 800543a:	f7fb f86d 	bl	8000518 <__aeabi_fcmpge>
 800543e:	2800      	cmp	r0, #0
 8005440:	d017      	beq.n	8005472 <CheckSnippetCondition+0x102>
 8005442:	2100      	movs	r1, #0
 8005444:	1c38      	adds	r0, r7, #0
 8005446:	f7fb f843 	bl	80004d0 <__aeabi_fcmpeq>
 800544a:	4243      	negs	r3, r0
 800544c:	4158      	adcs	r0, r3
 800544e:	e7af      	b.n	80053b0 <CheckSnippetCondition+0x40>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005450:	1c39      	adds	r1, r7, #0
 8005452:	9801      	ldr	r0, [sp, #4]
 8005454:	f7fb f83c 	bl	80004d0 <__aeabi_fcmpeq>
 8005458:	2800      	cmp	r0, #0
 800545a:	d10c      	bne.n	8005476 <CheckSnippetCondition+0x106>
 800545c:	2100      	movs	r1, #0
 800545e:	1c38      	adds	r0, r7, #0
 8005460:	f7fb f836 	bl	80004d0 <__aeabi_fcmpeq>
 8005464:	4243      	negs	r3, r0
 8005466:	4158      	adcs	r0, r3
 8005468:	e7a2      	b.n	80053b0 <CheckSnippetCondition+0x40>
	return false;
 800546a:	2000      	movs	r0, #0
 800546c:	e7a0      	b.n	80053b0 <CheckSnippetCondition+0x40>
 800546e:	2000      	movs	r0, #0
 8005470:	e79e      	b.n	80053b0 <CheckSnippetCondition+0x40>
 8005472:	2000      	movs	r0, #0
 8005474:	e79c      	b.n	80053b0 <CheckSnippetCondition+0x40>
 8005476:	2000      	movs	r0, #0
 8005478:	e79a      	b.n	80053b0 <CheckSnippetCondition+0x40>
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	200069e0 	.word	0x200069e0
 8005480:	2000151c 	.word	0x2000151c
 8005484:	20000084 	.word	0x20000084
 8005488:	08017e28 	.word	0x08017e28

0800548c <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800548e:	f008 f9e1 	bl	800d854 <FreeRTOS_CLIGetOutputBuffer>
 8005492:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 8005494:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <ExecuteSnippet+0x7c>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d032      	beq.n	8005502 <ExecuteSnippet+0x76>
 800549c:	2400      	movs	r4, #0
		if(snippets[s].state)								// Check for activated Snippets
 800549e:	4f1b      	ldr	r7, [pc, #108]	; (800550c <ExecuteSnippet+0x80>)
 80054a0:	e01a      	b.n	80054d8 <ExecuteSnippet+0x4c>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80054a2:	4b1b      	ldr	r3, [pc, #108]	; (8005510 <ExecuteSnippet+0x84>)
 80054a4:	7818      	ldrb	r0, [r3, #0]
 80054a6:	002b      	movs	r3, r5
 80054a8:	4a1a      	ldr	r2, [pc, #104]	; (8005514 <ExecuteSnippet+0x88>)
 80054aa:	2100      	movs	r1, #0
 80054ac:	f7ff fc1c 	bl	8004ce8 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80054b0:	0028      	movs	r0, r5
 80054b2:	f7fa fe31 	bl	8000118 <strlen>
 80054b6:	0002      	movs	r2, r0
 80054b8:	2100      	movs	r1, #0
 80054ba:	0028      	movs	r0, r5
 80054bc:	f00d fd78 	bl	8012fb0 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80054c0:	4914      	ldr	r1, [pc, #80]	; (8005514 <ExecuteSnippet+0x88>)
 80054c2:	68f0      	ldr	r0, [r6, #12]
 80054c4:	f7ff ff12 	bl	80052ec <ParseSnippetCommand>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	d1ea      	bne.n	80054a2 <ExecuteSnippet+0x16>
	for(s =0; s < numOfRecordedSnippets; s++){
 80054cc:	3401      	adds	r4, #1
 80054ce:	b2a4      	uxth	r4, r4
 80054d0:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <ExecuteSnippet+0x7c>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	42a3      	cmp	r3, r4
 80054d6:	d914      	bls.n	8005502 <ExecuteSnippet+0x76>
		if(snippets[s].state)								// Check for activated Snippets
 80054d8:	00a3      	lsls	r3, r4, #2
 80054da:	191b      	adds	r3, r3, r4
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	7c1b      	ldrb	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0f2      	beq.n	80054cc <ExecuteSnippet+0x40>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 80054e6:	b2e0      	uxtb	r0, r4
 80054e8:	f7ff ff42 	bl	8005370 <CheckSnippetCondition>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d0ed      	beq.n	80054cc <ExecuteSnippet+0x40>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 80054f0:	4b09      	ldr	r3, [pc, #36]	; (8005518 <ExecuteSnippet+0x8c>)
 80054f2:	2220      	movs	r2, #32
 80054f4:	719a      	strb	r2, [r3, #6]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80054f6:	00a3      	lsls	r3, r4, #2
 80054f8:	191e      	adds	r6, r3, r4
 80054fa:	00b6      	lsls	r6, r6, #2
 80054fc:	4b03      	ldr	r3, [pc, #12]	; (800550c <ExecuteSnippet+0x80>)
 80054fe:	199e      	adds	r6, r3, r6
 8005500:	e7de      	b.n	80054c0 <ExecuteSnippet+0x34>
			}
		}
	}
	
	return result;
}
 8005502:	2000      	movs	r0, #0
 8005504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	2000121f 	.word	0x2000121f
 800550c:	200069e0 	.word	0x200069e0
 8005510:	20000a77 	.word	0x20000a77
 8005514:	200011b8 	.word	0x200011b8
 8005518:	200069c4 	.word	0x200069c4

0800551c <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 800551c:	2000      	movs	r0, #0
 800551e:	4770      	bx	lr

08005520 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005520:	b570      	push	{r4, r5, r6, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	0004      	movs	r4, r0
 8005526:	0015      	movs	r5, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 8005528:	2300      	movs	r3, #0
 800552a:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 800552c:	9300      	str	r3, [sp, #0]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800552e:	2800      	cmp	r0, #0
 8005530:	d101      	bne.n	8005536 <setBaudrateCommand+0x16>
 8005532:	b672      	cpsid	i
 8005534:	e7fe      	b.n	8005534 <setBaudrateCommand+0x14>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005536:	aa01      	add	r2, sp, #4
 8005538:	2101      	movs	r1, #1
 800553a:	0028      	movs	r0, r5
 800553c:	f008 f98e 	bl	800d85c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005540:	2300      	movs	r3, #0
 8005542:	56c3      	ldrsb	r3, [r0, r3]
 8005544:	2b70      	cmp	r3, #112	; 0x70
 8005546:	d00c      	beq.n	8005562 <setBaudrateCommand+0x42>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005548:	466a      	mov	r2, sp
 800554a:	2102      	movs	r1, #2
 800554c:	0028      	movs	r0, r5
 800554e:	f008 f985 	bl	800d85c <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005552:	f00d fa9a 	bl	8012a8a <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005556:	2213      	movs	r2, #19
 8005558:	490f      	ldr	r1, [pc, #60]	; (8005598 <setBaudrateCommand+0x78>)
 800555a:	0020      	movs	r0, r4
 800555c:	f00d fd1f 	bl	8012f9e <memcpy>
		UpdateBaudrate(port,baudrate);
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 8005560:	e016      	b.n	8005590 <setBaudrateCommand+0x70>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005562:	3001      	adds	r0, #1
 8005564:	f00d fa91 	bl	8012a8a <atol>
 8005568:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800556a:	466a      	mov	r2, sp
 800556c:	2102      	movs	r1, #2
 800556e:	0028      	movs	r0, r5
 8005570:	f008 f974 	bl	800d85c <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005574:	f00d fa89 	bl	8012a8a <atol>
 8005578:	0005      	movs	r5, r0
		UpdateBaudrate(port,baudrate);
 800557a:	b2f0      	uxtb	r0, r6
 800557c:	0029      	movs	r1, r5
 800557e:	f007 ff95 	bl	800d4ac <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 8005582:	23ff      	movs	r3, #255	; 0xff
 8005584:	4033      	ands	r3, r6
 8005586:	002a      	movs	r2, r5
 8005588:	4904      	ldr	r1, [pc, #16]	; (800559c <setBaudrateCommand+0x7c>)
 800558a:	0020      	movs	r0, r4
 800558c:	f00d ff0a 	bl	80133a4 <sprintf>
}
 8005590:	2000      	movs	r0, #0
 8005592:	b002      	add	sp, #8
 8005594:	bd70      	pop	{r4, r5, r6, pc}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	08018cf8 	.word	0x08018cf8
 800559c:	08018cd0 	.word	0x08018cd0

080055a0 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055a0:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80055a2:	2800      	cmp	r0, #0
 80055a4:	d101      	bne.n	80055aa <flashsizeCommand+0xa>
 80055a6:	b672      	cpsid	i
 80055a8:	e7fe      	b.n	80055a8 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 80055aa:	4b03      	ldr	r3, [pc, #12]	; (80055b8 <flashsizeCommand+0x18>)
 80055ac:	881a      	ldrh	r2, [r3, #0]
 80055ae:	4903      	ldr	r1, [pc, #12]	; (80055bc <flashsizeCommand+0x1c>)
 80055b0:	f00d fef8 	bl	80133a4 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80055b4:	2000      	movs	r0, #0
 80055b6:	bd10      	pop	{r4, pc}
 80055b8:	1ffff7cc 	.word	0x1ffff7cc
 80055bc:	080186c4 	.word	0x080186c4

080055c0 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055c0:	b510      	push	{r4, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	0004      	movs	r4, r0
 80055c6:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	9300      	str	r3, [sp, #0]
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80055d0:	2c00      	cmp	r4, #0
 80055d2:	d101      	bne.n	80055d8 <GetReadPrecentageCommand+0x18>
 80055d4:	b672      	cpsid	i
 80055d6:	e7fe      	b.n	80055d6 <GetReadPrecentageCommand+0x16>
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055d8:	aa01      	add	r2, sp, #4
 80055da:	2101      	movs	r1, #1
 80055dc:	f008 f93e 	bl	800d85c <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80055e0:	7803      	ldrb	r3, [r0, #0]
 80055e2:	3b32      	subs	r3, #50	; 0x32
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d907      	bls.n	80055f8 <GetReadPrecentageCommand+0x38>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80055e8:	2215      	movs	r2, #21
 80055ea:	490b      	ldr	r1, [pc, #44]	; (8005618 <GetReadPrecentageCommand+0x58>)
 80055ec:	0020      	movs	r0, r4
 80055ee:	f00d fcd6 	bl	8012f9e <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 80055f2:	2000      	movs	r0, #0
 80055f4:	b002      	add	sp, #8
 80055f6:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80055f8:	f00d fa47 	bl	8012a8a <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 80055fc:	b2c0      	uxtb	r0, r0
 80055fe:	4669      	mov	r1, sp
 8005600:	f003 f98a 	bl	8008918 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 8005604:	9800      	ldr	r0, [sp, #0]
 8005606:	f7fd fa8d 	bl	8002b24 <__aeabi_f2d>
 800560a:	0002      	movs	r2, r0
 800560c:	000b      	movs	r3, r1
 800560e:	4903      	ldr	r1, [pc, #12]	; (800561c <GetReadPrecentageCommand+0x5c>)
 8005610:	0020      	movs	r0, r4
 8005612:	f00d fec7 	bl	80133a4 <sprintf>
 8005616:	e7ec      	b.n	80055f2 <GetReadPrecentageCommand+0x32>
 8005618:	080183c0 	.word	0x080183c0
 800561c:	0801839c 	.word	0x0801839c

08005620 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005620:	b510      	push	{r4, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005626:	2300      	movs	r3, #0
 8005628:	9301      	str	r3, [sp, #4]
 800562a:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800562c:	2800      	cmp	r0, #0
 800562e:	d101      	bne.n	8005634 <ReadVrefCommand+0x14>
 8005630:	b672      	cpsid	i
 8005632:	e7fe      	b.n	8005632 <ReadVrefCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005634:	4669      	mov	r1, sp
 8005636:	a801      	add	r0, sp, #4
 8005638:	f003 f8b0 	bl	800879c <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 800563c:	a901      	add	r1, sp, #4
 800563e:	0020      	movs	r0, r4
 8005640:	f00d feec 	bl	801341c <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 8005644:	9800      	ldr	r0, [sp, #0]
 8005646:	f7fd fa6d 	bl	8002b24 <__aeabi_f2d>
 800564a:	0002      	movs	r2, r0
 800564c:	000b      	movs	r3, r1
 800564e:	4903      	ldr	r1, [pc, #12]	; (800565c <ReadVrefCommand+0x3c>)
 8005650:	0020      	movs	r0, r4
 8005652:	f00d fea7 	bl	80133a4 <sprintf>
}
 8005656:	2000      	movs	r0, #0
 8005658:	b002      	add	sp, #8
 800565a:	bd10      	pop	{r4, pc}
 800565c:	0801840c 	.word	0x0801840c

08005660 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005660:	b510      	push	{r4, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005666:	2300      	movs	r3, #0
 8005668:	9301      	str	r3, [sp, #4]
 800566a:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800566c:	2800      	cmp	r0, #0
 800566e:	d101      	bne.n	8005674 <ReadTempCommand+0x14>
 8005670:	b672      	cpsid	i
 8005672:	e7fe      	b.n	8005672 <ReadTempCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005674:	4669      	mov	r1, sp
 8005676:	a801      	add	r0, sp, #4
 8005678:	f003 f890 	bl	800879c <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 800567c:	a901      	add	r1, sp, #4
 800567e:	0020      	movs	r0, r4
 8005680:	f00d fecc 	bl	801341c <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005684:	9801      	ldr	r0, [sp, #4]
 8005686:	f7fd fa4d 	bl	8002b24 <__aeabi_f2d>
 800568a:	0002      	movs	r2, r0
 800568c:	000b      	movs	r3, r1
 800568e:	4903      	ldr	r1, [pc, #12]	; (800569c <ReadTempCommand+0x3c>)
 8005690:	0020      	movs	r0, r4
 8005692:	f00d fe87 	bl	80133a4 <sprintf>
}
 8005696:	2000      	movs	r0, #0
 8005698:	b002      	add	sp, #8
 800569a:	bd10      	pop	{r4, pc}
 800569c:	080183d8 	.word	0x080183d8

080056a0 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	0004      	movs	r4, r0
 80056a6:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 80056ac:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d101      	bne.n	80056ba <ADCReadCommand+0x1a>
 80056b6:	b672      	cpsid	i
 80056b8:	e7fe      	b.n	80056b8 <ADCReadCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80056ba:	aa03      	add	r2, sp, #12
 80056bc:	2101      	movs	r1, #1
 80056be:	0030      	movs	r0, r6
 80056c0:	f008 f8cc 	bl	800d85c <FreeRTOS_CLIGetParameter>
 80056c4:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80056c6:	aa02      	add	r2, sp, #8
 80056c8:	2102      	movs	r1, #2
 80056ca:	0030      	movs	r0, r6
 80056cc:	f008 f8c6 	bl	800d85c <FreeRTOS_CLIGetParameter>
 80056d0:	0006      	movs	r6, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80056d2:	782b      	ldrb	r3, [r5, #0]
 80056d4:	3b32      	subs	r3, #50	; 0x32
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d907      	bls.n	80056ea <ADCReadCommand+0x4a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80056da:	2215      	movs	r2, #21
 80056dc:	4919      	ldr	r1, [pc, #100]	; (8005744 <ADCReadCommand+0xa4>)
 80056de:	0020      	movs	r0, r4
 80056e0:	f00d fc5d 	bl	8012f9e <memcpy>
}
 80056e4:	2000      	movs	r0, #0
 80056e6:	b004      	add	sp, #16
 80056e8:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80056ea:	0028      	movs	r0, r5
 80056ec:	f00d f9cd 	bl	8012a8a <atol>
 80056f0:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 80056f2:	4915      	ldr	r1, [pc, #84]	; (8005748 <ADCReadCommand+0xa8>)
 80056f4:	0030      	movs	r0, r6
 80056f6:	f7fa fd05 	bl	8000104 <strcmp>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d005      	beq.n	800570a <ADCReadCommand+0x6a>
 80056fe:	4913      	ldr	r1, [pc, #76]	; (800574c <ADCReadCommand+0xac>)
 8005700:	0030      	movs	r0, r6
 8005702:	f7fa fcff 	bl	8000104 <strcmp>
 8005706:	2800      	cmp	r0, #0
 8005708:	d116      	bne.n	8005738 <ADCReadCommand+0x98>
			ADCSelectChannel(ADCports,ADC_Side);
 800570a:	4e0f      	ldr	r6, [pc, #60]	; (8005748 <ADCReadCommand+0xa8>)
 800570c:	0031      	movs	r1, r6
 800570e:	0028      	movs	r0, r5
 8005710:	f003 f9cc 	bl	8008aac <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005714:	aa01      	add	r2, sp, #4
 8005716:	0031      	movs	r1, r6
 8005718:	0028      	movs	r0, r5
 800571a:	f003 f9f5 	bl	8008b08 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 800571e:	a901      	add	r1, sp, #4
 8005720:	0020      	movs	r0, r4
 8005722:	f00d fe7b 	bl	801341c <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 8005726:	9801      	ldr	r0, [sp, #4]
 8005728:	f7fa ff4a 	bl	80005c0 <__aeabi_f2uiz>
 800572c:	b282      	uxth	r2, r0
 800572e:	4908      	ldr	r1, [pc, #32]	; (8005750 <ADCReadCommand+0xb0>)
 8005730:	0020      	movs	r0, r4
 8005732:	f00d fe37 	bl	80133a4 <sprintf>
 8005736:	e7d5      	b.n	80056e4 <ADCReadCommand+0x44>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005738:	2212      	movs	r2, #18
 800573a:	4906      	ldr	r1, [pc, #24]	; (8005754 <ADCReadCommand+0xb4>)
 800573c:	0020      	movs	r0, r4
 800573e:	f00d fc2e 	bl	8012f9e <memcpy>
 8005742:	e7cf      	b.n	80056e4 <ADCReadCommand+0x44>
 8005744:	080183c0 	.word	0x080183c0
 8005748:	0801834c 	.word	0x0801834c
 800574c:	08018350 	.word	0x08018350
 8005750:	08018358 	.word	0x08018358
 8005754:	08018368 	.word	0x08018368

08005758 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800575a:	46d6      	mov	lr, sl
 800575c:	4647      	mov	r7, r8
 800575e:	b580      	push	{r7, lr}
 8005760:	b085      	sub	sp, #20
 8005762:	0004      	movs	r4, r0
 8005764:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005766:	2300      	movs	r3, #0
 8005768:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 800576a:	4b62      	ldr	r3, [pc, #392]	; (80058f4 <testportCommand+0x19c>)
 800576c:	781a      	ldrb	r2, [r3, #0]
 800576e:	ab02      	add	r3, sp, #8
 8005770:	701a      	strb	r2, [r3, #0]
	configASSERT(pcWriteBuffer);
 8005772:	2c00      	cmp	r4, #0
 8005774:	d101      	bne.n	800577a <testportCommand+0x22>
 8005776:	b672      	cpsid	i
 8005778:	e7fe      	b.n	8005778 <testportCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800577a:	aa03      	add	r2, sp, #12
 800577c:	2101      	movs	r1, #1
 800577e:	f008 f86d 	bl	800d85c <FreeRTOS_CLIGetParameter>
 8005782:	0005      	movs	r5, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005784:	495c      	ldr	r1, [pc, #368]	; (80058f8 <testportCommand+0x1a0>)
 8005786:	f7fa fcbd 	bl	8000104 <strcmp>
 800578a:	2800      	cmp	r0, #0
 800578c:	d173      	bne.n	8005876 <testportCommand+0x11e>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 800578e:	4b5b      	ldr	r3, [pc, #364]	; (80058fc <testportCommand+0x1a4>)
 8005790:	781a      	ldrb	r2, [r3, #0]
 8005792:	4b5b      	ldr	r3, [pc, #364]	; (8005900 <testportCommand+0x1a8>)
 8005794:	189b      	adds	r3, r3, r2
 8005796:	3b01      	subs	r3, #1
 8005798:	781e      	ldrb	r6, [r3, #0]
 800579a:	2501      	movs	r5, #1
			if(PcPort != ports){
 800579c:	4b57      	ldr	r3, [pc, #348]	; (80058fc <testportCommand+0x1a4>)
 800579e:	4698      	mov	r8, r3
 80057a0:	e015      	b.n	80057ce <testportCommand+0x76>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 80057a2:	002a      	movs	r2, r5
 80057a4:	4957      	ldr	r1, [pc, #348]	; (8005904 <testportCommand+0x1ac>)
 80057a6:	0020      	movs	r0, r4
 80057a8:	f00d fdfc 	bl	80133a4 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80057ac:	0020      	movs	r0, r4
 80057ae:	f7fa fcb3 	bl	8000118 <strlen>
 80057b2:	b282      	uxth	r2, r0
 80057b4:	4b51      	ldr	r3, [pc, #324]	; (80058fc <testportCommand+0x1a4>)
 80057b6:	7818      	ldrb	r0, [r3, #0]
 80057b8:	2364      	movs	r3, #100	; 0x64
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	3b5a      	subs	r3, #90	; 0x5a
 80057be:	0021      	movs	r1, r4
 80057c0:	f007 fe06 	bl	800d3d0 <writePxMutex>
 80057c4:	e02f      	b.n	8005826 <testportCommand+0xce>
 80057c6:	3501      	adds	r5, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 80057c8:	2d07      	cmp	r5, #7
 80057ca:	d100      	bne.n	80057ce <testportCommand+0x76>
 80057cc:	e07f      	b.n	80058ce <testportCommand+0x176>
 80057ce:	b2eb      	uxtb	r3, r5
 80057d0:	469a      	mov	sl, r3
			if(PcPort != ports){
 80057d2:	4643      	mov	r3, r8
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	4553      	cmp	r3, sl
 80057d8:	d0f5      	beq.n	80057c6 <testportCommand+0x6e>
				WriteVaule[0] =rand();
 80057da:	f00d fc01 	bl	8012fe0 <rand>
 80057de:	af02      	add	r7, sp, #8
 80057e0:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 80057e2:	2364      	movs	r3, #100	; 0x64
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	3b5a      	subs	r3, #90	; 0x5a
 80057e8:	2201      	movs	r2, #1
 80057ea:	0039      	movs	r1, r7
 80057ec:	4650      	mov	r0, sl
 80057ee:	f007 fdef 	bl	800d3d0 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 80057f2:	4650      	mov	r0, sl
 80057f4:	f007 fdca 	bl	800d38c <GetUart>
 80057f8:	6803      	ldr	r3, [r0, #0]
 80057fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 80057fc:	783a      	ldrb	r2, [r7, #0]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	429a      	cmp	r2, r3
 8005802:	d0ce      	beq.n	80057a2 <testportCommand+0x4a>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005804:	002a      	movs	r2, r5
 8005806:	4940      	ldr	r1, [pc, #256]	; (8005908 <testportCommand+0x1b0>)
 8005808:	0020      	movs	r0, r4
 800580a:	f00d fdcb 	bl	80133a4 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 800580e:	0020      	movs	r0, r4
 8005810:	f7fa fc82 	bl	8000118 <strlen>
 8005814:	b282      	uxth	r2, r0
 8005816:	4b39      	ldr	r3, [pc, #228]	; (80058fc <testportCommand+0x1a4>)
 8005818:	7818      	ldrb	r0, [r3, #0]
 800581a:	2364      	movs	r3, #100	; 0x64
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	3b5a      	subs	r3, #90	; 0x5a
 8005820:	0021      	movs	r1, r4
 8005822:	f007 fdd5 	bl	800d3d0 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005826:	2254      	movs	r2, #84	; 0x54
 8005828:	4938      	ldr	r1, [pc, #224]	; (800590c <testportCommand+0x1b4>)
 800582a:	0020      	movs	r0, r4
 800582c:	f00d fbb7 	bl	8012f9e <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005830:	0020      	movs	r0, r4
 8005832:	f7fa fc71 	bl	8000118 <strlen>
 8005836:	b282      	uxth	r2, r0
 8005838:	4b30      	ldr	r3, [pc, #192]	; (80058fc <testportCommand+0x1a4>)
 800583a:	7818      	ldrb	r0, [r3, #0]
 800583c:	2364      	movs	r3, #100	; 0x64
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	3b5a      	subs	r3, #90	; 0x5a
 8005842:	0021      	movs	r1, r4
 8005844:	f007 fdc4 	bl	800d3d0 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005848:	3601      	adds	r6, #1
 800584a:	4b2c      	ldr	r3, [pc, #176]	; (80058fc <testportCommand+0x1a4>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	3b01      	subs	r3, #1
 8005850:	019b      	lsls	r3, r3, #6
 8005852:	4a2f      	ldr	r2, [pc, #188]	; (8005910 <testportCommand+0x1b8>)
 8005854:	18d3      	adds	r3, r2, r3
 8005856:	5d9b      	ldrb	r3, [r3, r6]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1b4      	bne.n	80057c6 <testportCommand+0x6e>
 800585c:	4692      	mov	sl, r2
 800585e:	4f27      	ldr	r7, [pc, #156]	; (80058fc <testportCommand+0x1a4>)
					Delay_ms(1);
 8005860:	2001      	movs	r0, #1
 8005862:	f009 ff0d 	bl	800f680 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005866:	783b      	ldrb	r3, [r7, #0]
 8005868:	3b01      	subs	r3, #1
 800586a:	019b      	lsls	r3, r3, #6
 800586c:	4453      	add	r3, sl
 800586e:	5d9b      	ldrb	r3, [r3, r6]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0f5      	beq.n	8005860 <testportCommand+0x108>
 8005874:	e7a7      	b.n	80057c6 <testportCommand+0x6e>
	else if(pcParameterString1[0] == 'p'){
 8005876:	2300      	movs	r3, #0
 8005878:	56eb      	ldrsb	r3, [r5, r3]
 800587a:	2b70      	cmp	r3, #112	; 0x70
 800587c:	d005      	beq.n	800588a <testportCommand+0x132>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800587e:	220f      	movs	r2, #15
 8005880:	4924      	ldr	r1, [pc, #144]	; (8005914 <testportCommand+0x1bc>)
 8005882:	0020      	movs	r0, r4
 8005884:	f00d fb8b 	bl	8012f9e <memcpy>
 8005888:	e021      	b.n	80058ce <testportCommand+0x176>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 800588a:	1c68      	adds	r0, r5, #1
 800588c:	f00d f8fd 	bl	8012a8a <atol>
 8005890:	0005      	movs	r5, r0
 8005892:	b2c7      	uxtb	r7, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005894:	1e7b      	subs	r3, r7, #1
 8005896:	2b05      	cmp	r3, #5
 8005898:	d825      	bhi.n	80058e6 <testportCommand+0x18e>
				WriteVaule[0] =rand();
 800589a:	f00d fba1 	bl	8012fe0 <rand>
 800589e:	ae02      	add	r6, sp, #8
 80058a0:	7030      	strb	r0, [r6, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80058a2:	2364      	movs	r3, #100	; 0x64
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	3b32      	subs	r3, #50	; 0x32
 80058a8:	2201      	movs	r2, #1
 80058aa:	0031      	movs	r1, r6
 80058ac:	0038      	movs	r0, r7
 80058ae:	f007 fd8f 	bl	800d3d0 <writePxMutex>
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 80058b2:	0038      	movs	r0, r7
 80058b4:	f007 fd6a 	bl	800d38c <GetUart>
 80058b8:	6803      	ldr	r3, [r0, #0]
 80058ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if(WriteVaule[0] == ReadValue[0])
 80058bc:	7832      	ldrb	r2, [r6, #0]
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d10a      	bne.n	80058da <testportCommand+0x182>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 80058c4:	b2ea      	uxtb	r2, r5
 80058c6:	490f      	ldr	r1, [pc, #60]	; (8005904 <testportCommand+0x1ac>)
 80058c8:	0020      	movs	r0, r4
 80058ca:	f00d fd6b 	bl	80133a4 <sprintf>
}
 80058ce:	2000      	movs	r0, #0
 80058d0:	b005      	add	sp, #20
 80058d2:	bc0c      	pop	{r2, r3}
 80058d4:	4690      	mov	r8, r2
 80058d6:	469a      	mov	sl, r3
 80058d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 80058da:	b2ea      	uxtb	r2, r5
 80058dc:	490a      	ldr	r1, [pc, #40]	; (8005908 <testportCommand+0x1b0>)
 80058de:	0020      	movs	r0, r4
 80058e0:	f00d fd60 	bl	80133a4 <sprintf>
 80058e4:	e7f3      	b.n	80058ce <testportCommand+0x176>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80058e6:	221b      	movs	r2, #27
 80058e8:	490b      	ldr	r1, [pc, #44]	; (8005918 <testportCommand+0x1c0>)
 80058ea:	0020      	movs	r0, r4
 80058ec:	f00d fb57 	bl	8012f9e <memcpy>
	return pdFALSE;
 80058f0:	e7ed      	b.n	80058ce <testportCommand+0x176>
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	080177a0 	.word	0x080177a0
 80058f8:	08017afc 	.word	0x08017afc
 80058fc:	20000a77 	.word	0x20000a77
 8005900:	20001450 	.word	0x20001450
 8005904:	08019fbc 	.word	0x08019fbc
 8005908:	08019fd8 	.word	0x08019fd8
 800590c:	08019fec 	.word	0x08019fec
 8005910:	200012d0 	.word	0x200012d0
 8005914:	0801a040 	.word	0x0801a040
 8005918:	0801a050 	.word	0x0801a050

0800591c <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800591c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591e:	b083      	sub	sp, #12
 8005920:	0004      	movs	r4, r0
 8005922:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005924:	2300      	movs	r3, #0
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800592a:	2800      	cmp	r0, #0
 800592c:	d101      	bne.n	8005932 <unbridgeCommand+0x16>
 800592e:	b672      	cpsid	i
 8005930:	e7fe      	b.n	8005930 <unbridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005932:	aa01      	add	r2, sp, #4
 8005934:	2101      	movs	r1, #1
 8005936:	0028      	movs	r0, r5
 8005938:	f007 ff90 	bl	800d85c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 800593c:	2300      	movs	r3, #0
 800593e:	56c3      	ldrsb	r3, [r0, r3]
 8005940:	2b70      	cmp	r3, #112	; 0x70
 8005942:	d00e      	beq.n	8005962 <unbridgeCommand+0x46>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005944:	466a      	mov	r2, sp
 8005946:	2102      	movs	r1, #2
 8005948:	0028      	movs	r0, r5
 800594a:	f007 ff87 	bl	800d85c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 800594e:	2300      	movs	r3, #0
 8005950:	56c3      	ldrsb	r3, [r0, r3]
 8005952:	2b70      	cmp	r3, #112	; 0x70
 8005954:	d01e      	beq.n	8005994 <unbridgeCommand+0x78>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005956:	220f      	movs	r2, #15
 8005958:	491a      	ldr	r1, [pc, #104]	; (80059c4 <unbridgeCommand+0xa8>)
 800595a:	0020      	movs	r0, r4
 800595c:	f00d fb1f 	bl	8012f9e <memcpy>
 8005960:	e015      	b.n	800598e <unbridgeCommand+0x72>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005962:	3001      	adds	r0, #1
 8005964:	f00d f891 	bl	8012a8a <atol>
 8005968:	0006      	movs	r6, r0
 800596a:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800596c:	466a      	mov	r2, sp
 800596e:	2102      	movs	r1, #2
 8005970:	0028      	movs	r0, r5
 8005972:	f007 ff73 	bl	800d85c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005976:	2300      	movs	r3, #0
 8005978:	56c3      	ldrsb	r3, [r0, r3]
 800597a:	2b70      	cmp	r3, #112	; 0x70
 800597c:	d00e      	beq.n	800599c <unbridgeCommand+0x80>
		result =BOS_ERR_WrongParam;
 800597e:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005980:	2867      	cmp	r0, #103	; 0x67
 8005982:	d0e8      	beq.n	8005956 <unbridgeCommand+0x3a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005984:	2219      	movs	r2, #25
 8005986:	4910      	ldr	r1, [pc, #64]	; (80059c8 <unbridgeCommand+0xac>)
 8005988:	0020      	movs	r0, r4
 800598a:	f00d fb08 	bl	8012f9e <memcpy>
}
 800598e:	2000      	movs	r0, #0
 8005990:	b003      	add	sp, #12
 8005992:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005994:	3001      	adds	r0, #1
 8005996:	f00d f878 	bl	8012a8a <atol>
 800599a:	e7dc      	b.n	8005956 <unbridgeCommand+0x3a>
 800599c:	3001      	adds	r0, #1
 800599e:	f00d f874 	bl	8012a8a <atol>
 80059a2:	0005      	movs	r5, r0
		result =Unbridge(port1,port2);
 80059a4:	b2c1      	uxtb	r1, r0
 80059a6:	0038      	movs	r0, r7
 80059a8:	f7fe fea2 	bl	80046f0 <Unbridge>
	if(result == BOS_OK)
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d1e7      	bne.n	8005980 <unbridgeCommand+0x64>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 80059b0:	22ff      	movs	r2, #255	; 0xff
 80059b2:	002b      	movs	r3, r5
 80059b4:	4013      	ands	r3, r2
 80059b6:	4032      	ands	r2, r6
 80059b8:	4904      	ldr	r1, [pc, #16]	; (80059cc <unbridgeCommand+0xb0>)
 80059ba:	0020      	movs	r0, r4
 80059bc:	f00d fcf2 	bl	80133a4 <sprintf>
 80059c0:	e7e5      	b.n	800598e <unbridgeCommand+0x72>
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	0801a040 	.word	0x0801a040
 80059c8:	0801a108 	.word	0x0801a108
 80059cc:	0801a0e8 	.word	0x0801a0e8

080059d0 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059d2:	b083      	sub	sp, #12
 80059d4:	0004      	movs	r4, r0
 80059d6:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80059d8:	2300      	movs	r3, #0
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 80059de:	2800      	cmp	r0, #0
 80059e0:	d101      	bne.n	80059e6 <bridgeCommand+0x16>
 80059e2:	b672      	cpsid	i
 80059e4:	e7fe      	b.n	80059e4 <bridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059e6:	aa01      	add	r2, sp, #4
 80059e8:	2101      	movs	r1, #1
 80059ea:	0028      	movs	r0, r5
 80059ec:	f007 ff36 	bl	800d85c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80059f0:	2300      	movs	r3, #0
 80059f2:	56c3      	ldrsb	r3, [r0, r3]
 80059f4:	2b70      	cmp	r3, #112	; 0x70
 80059f6:	d00e      	beq.n	8005a16 <bridgeCommand+0x46>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80059f8:	466a      	mov	r2, sp
 80059fa:	2102      	movs	r1, #2
 80059fc:	0028      	movs	r0, r5
 80059fe:	f007 ff2d 	bl	800d85c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a02:	2300      	movs	r3, #0
 8005a04:	56c3      	ldrsb	r3, [r0, r3]
 8005a06:	2b70      	cmp	r3, #112	; 0x70
 8005a08:	d01e      	beq.n	8005a48 <bridgeCommand+0x78>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a0a:	220f      	movs	r2, #15
 8005a0c:	491a      	ldr	r1, [pc, #104]	; (8005a78 <bridgeCommand+0xa8>)
 8005a0e:	0020      	movs	r0, r4
 8005a10:	f00d fac5 	bl	8012f9e <memcpy>
 8005a14:	e015      	b.n	8005a42 <bridgeCommand+0x72>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a16:	3001      	adds	r0, #1
 8005a18:	f00d f837 	bl	8012a8a <atol>
 8005a1c:	0006      	movs	r6, r0
 8005a1e:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a20:	466a      	mov	r2, sp
 8005a22:	2102      	movs	r1, #2
 8005a24:	0028      	movs	r0, r5
 8005a26:	f007 ff19 	bl	800d85c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	56c3      	ldrsb	r3, [r0, r3]
 8005a2e:	2b70      	cmp	r3, #112	; 0x70
 8005a30:	d00e      	beq.n	8005a50 <bridgeCommand+0x80>
		result =BOS_ERR_WrongParam;
 8005a32:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005a34:	2867      	cmp	r0, #103	; 0x67
 8005a36:	d0e8      	beq.n	8005a0a <bridgeCommand+0x3a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005a38:	2217      	movs	r2, #23
 8005a3a:	4910      	ldr	r1, [pc, #64]	; (8005a7c <bridgeCommand+0xac>)
 8005a3c:	0020      	movs	r0, r4
 8005a3e:	f00d faae 	bl	8012f9e <memcpy>
}
 8005a42:	2000      	movs	r0, #0
 8005a44:	b003      	add	sp, #12
 8005a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005a48:	3001      	adds	r0, #1
 8005a4a:	f00d f81e 	bl	8012a8a <atol>
 8005a4e:	e7dc      	b.n	8005a0a <bridgeCommand+0x3a>
 8005a50:	3001      	adds	r0, #1
 8005a52:	f00d f81a 	bl	8012a8a <atol>
 8005a56:	0005      	movs	r5, r0
		result =Bridge(port1,port2);
 8005a58:	b2c1      	uxtb	r1, r0
 8005a5a:	0038      	movs	r0, r7
 8005a5c:	f7fe fe34 	bl	80046c8 <Bridge>
	if(result == BOS_OK)
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d1e7      	bne.n	8005a34 <bridgeCommand+0x64>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005a64:	22ff      	movs	r2, #255	; 0xff
 8005a66:	002b      	movs	r3, r5
 8005a68:	4013      	ands	r3, r2
 8005a6a:	4032      	ands	r2, r6
 8005a6c:	4904      	ldr	r1, [pc, #16]	; (8005a80 <bridgeCommand+0xb0>)
 8005a6e:	0020      	movs	r0, r4
 8005a70:	f00d fc98 	bl	80133a4 <sprintf>
 8005a74:	e7e5      	b.n	8005a42 <bridgeCommand+0x72>
 8005a76:	46c0      	nop			; (mov r8, r8)
 8005a78:	0801a040 	.word	0x0801a040
 8005a7c:	08018560 	.word	0x08018560
 8005a80:	0801853c 	.word	0x0801853c

08005a84 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a86:	b085      	sub	sp, #20
 8005a88:	0005      	movs	r5, r0
 8005a8a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8005a90:	2d00      	cmp	r5, #0
 8005a92:	d101      	bne.n	8005a98 <delSnipCommand+0x14>
 8005a94:	b672      	cpsid	i
 8005a96:	e7fe      	b.n	8005a96 <delSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a98:	aa03      	add	r2, sp, #12
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	f007 fede 	bl	800d85c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005aa0:	f00c ffed 	bl	8012a7e <atoi>
 8005aa4:	9001      	str	r0, [sp, #4]
 8005aa6:	b2c6      	uxtb	r6, r0
	if(!index || index > numOfRecordedSnippets)
 8005aa8:	2e00      	cmp	r6, #0
 8005aaa:	d003      	beq.n	8005ab4 <delSnipCommand+0x30>
 8005aac:	4b27      	ldr	r3, [pc, #156]	; (8005b4c <delSnipCommand+0xc8>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	42b3      	cmp	r3, r6
 8005ab2:	d207      	bcs.n	8005ac4 <delSnipCommand+0x40>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005ab4:	2223      	movs	r2, #35	; 0x23
 8005ab6:	4926      	ldr	r1, [pc, #152]	; (8005b50 <delSnipCommand+0xcc>)
 8005ab8:	0028      	movs	r0, r5
 8005aba:	f00d fa70 	bl	8012f9e <memcpy>
}
 8005abe:	2000      	movs	r0, #0
 8005ac0:	b005      	add	sp, #20
 8005ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 8005ac4:	466b      	mov	r3, sp
 8005ac6:	791a      	ldrb	r2, [r3, #4]
 8005ac8:	3a01      	subs	r2, #1
 8005aca:	4822      	ldr	r0, [pc, #136]	; (8005b54 <delSnipCommand+0xd0>)
 8005acc:	2314      	movs	r3, #20
 8005ace:	4353      	muls	r3, r2
 8005ad0:	2700      	movs	r7, #0
 8005ad2:	541f      	strb	r7, [r3, r0]
		snippets[index - 1].cond.mathOperator =0;
 8005ad4:	18c4      	adds	r4, r0, r3
 8005ad6:	7067      	strb	r7, [r4, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005ad8:	3302      	adds	r3, #2
 8005ada:	1818      	adds	r0, r3, r0
 8005adc:	2204      	movs	r2, #4
 8005ade:	0039      	movs	r1, r7
 8005ae0:	f00d fa66 	bl	8012fb0 <memset>
		snippets[index - 1].state = false;
 8005ae4:	7427      	strb	r7, [r4, #16]
		free(snippets[index - 1].cmd);
 8005ae6:	68e0      	ldr	r0, [r4, #12]
 8005ae8:	f00d f816 	bl	8012b18 <free>
		snippets[index - 1].cmd = NULL;
 8005aec:	60e7      	str	r7, [r4, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005aee:	4b17      	ldr	r3, [pc, #92]	; (8005b4c <delSnipCommand+0xc8>)
 8005af0:	781f      	ldrb	r7, [r3, #0]
 8005af2:	42be      	cmp	r6, r7
 8005af4:	d213      	bcs.n	8005b1e <delSnipCommand+0x9a>
 8005af6:	466b      	mov	r3, sp
 8005af8:	7919      	ldrb	r1, [r3, #4]
 8005afa:	2214      	movs	r2, #20
 8005afc:	0014      	movs	r4, r2
 8005afe:	434c      	muls	r4, r1
 8005b00:	4814      	ldr	r0, [pc, #80]	; (8005b54 <delSnipCommand+0xd0>)
 8005b02:	1824      	adds	r4, r4, r0
 8005b04:	1e7b      	subs	r3, r7, #1
 8005b06:	1b9b      	subs	r3, r3, r6
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	185b      	adds	r3, r3, r1
 8005b0c:	4353      	muls	r3, r2
 8005b0e:	1880      	adds	r0, r0, r2
 8005b10:	181e      	adds	r6, r3, r0
			if(snippets[s].cond.conditionType){
 8005b12:	7823      	ldrb	r3, [r4, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10d      	bne.n	8005b34 <delSnipCommand+0xb0>
 8005b18:	3414      	adds	r4, #20
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005b1a:	42b4      	cmp	r4, r6
 8005b1c:	d1f9      	bne.n	8005b12 <delSnipCommand+0x8e>
		--numOfRecordedSnippets;
 8005b1e:	1e7b      	subs	r3, r7, #1
 8005b20:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <delSnipCommand+0xc8>)
 8005b22:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005b24:	f005 fc7a 	bl	800b41c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005b28:	2236      	movs	r2, #54	; 0x36
 8005b2a:	490b      	ldr	r1, [pc, #44]	; (8005b58 <delSnipCommand+0xd4>)
 8005b2c:	0028      	movs	r0, r5
 8005b2e:	f00d fa36 	bl	8012f9e <memcpy>
 8005b32:	e7c4      	b.n	8005abe <delSnipCommand+0x3a>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005b34:	2214      	movs	r2, #20
 8005b36:	0021      	movs	r1, r4
 8005b38:	0020      	movs	r0, r4
 8005b3a:	3814      	subs	r0, #20
 8005b3c:	f00d fa2f 	bl	8012f9e <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005b40:	2214      	movs	r2, #20
 8005b42:	2100      	movs	r1, #0
 8005b44:	0020      	movs	r0, r4
 8005b46:	f00d fa33 	bl	8012fb0 <memset>
 8005b4a:	e7e5      	b.n	8005b18 <delSnipCommand+0x94>
 8005b4c:	2000121f 	.word	0x2000121f
 8005b50:	08018680 	.word	0x08018680
 8005b54:	200069e0 	.word	0x200069e0
 8005b58:	08018648 	.word	0x08018648

08005b5c <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b5c:	b510      	push	{r4, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	0004      	movs	r4, r0
 8005b62:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005b68:	2c00      	cmp	r4, #0
 8005b6a:	d101      	bne.n	8005b70 <pauseSnipCommand+0x14>
 8005b6c:	b672      	cpsid	i
 8005b6e:	e7fe      	b.n	8005b6e <pauseSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005b70:	aa01      	add	r2, sp, #4
 8005b72:	2101      	movs	r1, #1
 8005b74:	f007 fe72 	bl	800d85c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005b78:	f00c ff81 	bl	8012a7e <atoi>
 8005b7c:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <pauseSnipCommand+0x2e>
 8005b82:	4a0e      	ldr	r2, [pc, #56]	; (8005bbc <pauseSnipCommand+0x60>)
 8005b84:	7812      	ldrb	r2, [r2, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d207      	bcs.n	8005b9a <pauseSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005b8a:	2223      	movs	r2, #35	; 0x23
 8005b8c:	490c      	ldr	r1, [pc, #48]	; (8005bc0 <pauseSnipCommand+0x64>)
 8005b8e:	0020      	movs	r0, r4
 8005b90:	f00d fa05 	bl	8012f9e <memcpy>
}
 8005b94:	2000      	movs	r0, #0
 8005b96:	b002      	add	sp, #8
 8005b98:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 8005b9a:	b2c0      	uxtb	r0, r0
 8005b9c:	3801      	subs	r0, #1
 8005b9e:	2314      	movs	r3, #20
 8005ba0:	4343      	muls	r3, r0
 8005ba2:	4808      	ldr	r0, [pc, #32]	; (8005bc4 <pauseSnipCommand+0x68>)
 8005ba4:	18c0      	adds	r0, r0, r3
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005baa:	f005 fc37 	bl	800b41c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005bae:	2235      	movs	r2, #53	; 0x35
 8005bb0:	4905      	ldr	r1, [pc, #20]	; (8005bc8 <pauseSnipCommand+0x6c>)
 8005bb2:	0020      	movs	r0, r4
 8005bb4:	f00d f9f3 	bl	8012f9e <memcpy>
 8005bb8:	e7ec      	b.n	8005b94 <pauseSnipCommand+0x38>
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	2000121f 	.word	0x2000121f
 8005bc0:	08018680 	.word	0x08018680
 8005bc4:	200069e0 	.word	0x200069e0
 8005bc8:	08018a90 	.word	0x08018a90

08005bcc <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bcc:	b510      	push	{r4, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	0004      	movs	r4, r0
 8005bd2:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005bd8:	2c00      	cmp	r4, #0
 8005bda:	d101      	bne.n	8005be0 <actSnipCommand+0x14>
 8005bdc:	b672      	cpsid	i
 8005bde:	e7fe      	b.n	8005bde <actSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005be0:	aa01      	add	r2, sp, #4
 8005be2:	2101      	movs	r1, #1
 8005be4:	f007 fe3a 	bl	800d85c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005be8:	f00c ff49 	bl	8012a7e <atoi>
 8005bec:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <actSnipCommand+0x2e>
 8005bf2:	4a0e      	ldr	r2, [pc, #56]	; (8005c2c <actSnipCommand+0x60>)
 8005bf4:	7812      	ldrb	r2, [r2, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d207      	bcs.n	8005c0a <actSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005bfa:	2223      	movs	r2, #35	; 0x23
 8005bfc:	490c      	ldr	r1, [pc, #48]	; (8005c30 <actSnipCommand+0x64>)
 8005bfe:	0020      	movs	r0, r4
 8005c00:	f00d f9cd 	bl	8012f9e <memcpy>
}
 8005c04:	2000      	movs	r0, #0
 8005c06:	b002      	add	sp, #8
 8005c08:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005c0a:	b2c0      	uxtb	r0, r0
 8005c0c:	3801      	subs	r0, #1
 8005c0e:	2314      	movs	r3, #20
 8005c10:	4343      	muls	r3, r0
 8005c12:	4808      	ldr	r0, [pc, #32]	; (8005c34 <actSnipCommand+0x68>)
 8005c14:	18c0      	adds	r0, r0, r3
 8005c16:	2301      	movs	r3, #1
 8005c18:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005c1a:	f005 fbff 	bl	800b41c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005c1e:	2238      	movs	r2, #56	; 0x38
 8005c20:	4905      	ldr	r1, [pc, #20]	; (8005c38 <actSnipCommand+0x6c>)
 8005c22:	0020      	movs	r0, r4
 8005c24:	f00d f9bb 	bl	8012f9e <memcpy>
 8005c28:	e7ec      	b.n	8005c04 <actSnipCommand+0x38>
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	2000121f 	.word	0x2000121f
 8005c30:	08018680 	.word	0x08018680
 8005c34:	200069e0 	.word	0x200069e0
 8005c38:	08018444 	.word	0x08018444

08005c3c <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3e:	46d6      	mov	lr, sl
 8005c40:	464f      	mov	r7, r9
 8005c42:	4646      	mov	r6, r8
 8005c44:	b5c0      	push	{r6, r7, lr}
 8005c46:	b08a      	sub	sp, #40	; 0x28
 8005c48:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8005c4a:	aa06      	add	r2, sp, #24
 8005c4c:	4b7a      	ldr	r3, [pc, #488]	; (8005e38 <snipCommand+0x1fc>)
 8005c4e:	3304      	adds	r3, #4
 8005c50:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005c52:	c223      	stmia	r2!, {r0, r1, r5}
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 8005c58:	2c00      	cmp	r4, #0
 8005c5a:	d101      	bne.n	8005c60 <snipCommand+0x24>
 8005c5c:	b672      	cpsid	i
 8005c5e:	e7fe      	b.n	8005c5e <snipCommand+0x22>
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005c60:	4b76      	ldr	r3, [pc, #472]	; (8005e3c <snipCommand+0x200>)
 8005c62:	7818      	ldrb	r0, [r3, #0]
 8005c64:	2301      	movs	r3, #1
 8005c66:	425b      	negs	r3, r3
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	3333      	adds	r3, #51	; 0x33
 8005c6c:	2237      	movs	r2, #55	; 0x37
 8005c6e:	4974      	ldr	r1, [pc, #464]	; (8005e40 <snipCommand+0x204>)
 8005c70:	f007 fbae 	bl	800d3d0 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005c74:	4b73      	ldr	r3, [pc, #460]	; (8005e44 <snipCommand+0x208>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d100      	bne.n	8005c7e <snipCommand+0x42>
 8005c7c:	e0d0      	b.n	8005e20 <snipCommand+0x1e4>
 8005c7e:	2500      	movs	r5, #0
		if(snippets[s].cond.conditionType)
 8005c80:	4b71      	ldr	r3, [pc, #452]	; (8005e48 <snipCommand+0x20c>)
 8005c82:	4698      	mov	r8, r3
 8005c84:	e0ba      	b.n	8005dfc <snipCommand+0x1c0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005c86:	4b70      	ldr	r3, [pc, #448]	; (8005e48 <snipCommand+0x20c>)
 8005c88:	4699      	mov	r9, r3
 8005c8a:	00ab      	lsls	r3, r5, #2
 8005c8c:	469a      	mov	sl, r3
 8005c8e:	195b      	adds	r3, r3, r5
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	444b      	add	r3, r9
 8005c94:	7c1a      	ldrb	r2, [r3, #16]
 8005c96:	00d3      	lsls	r3, r2, #3
 8005c98:	1a9b      	subs	r3, r3, r2
 8005c9a:	aa06      	add	r2, sp, #24
 8005c9c:	4694      	mov	ip, r2
 8005c9e:	4463      	add	r3, ip
 8005ca0:	003a      	movs	r2, r7
 8005ca2:	496a      	ldr	r1, [pc, #424]	; (8005e4c <snipCommand+0x210>)
 8005ca4:	0020      	movs	r0, r4
 8005ca6:	f00d fb7d 	bl	80133a4 <sprintf>
		switch(snippets[s].cond.conditionType){
 8005caa:	4653      	mov	r3, sl
 8005cac:	195b      	adds	r3, r3, r5
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	464a      	mov	r2, r9
 8005cb2:	5c9b      	ldrb	r3, [r3, r2]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d02d      	beq.n	8005d14 <snipCommand+0xd8>
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d000      	beq.n	8005cbe <snipCommand+0x82>
 8005cbc:	e0a9      	b.n	8005e12 <snipCommand+0x1d6>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005cbe:	00a9      	lsls	r1, r5, #2
 8005cc0:	1949      	adds	r1, r1, r5
 8005cc2:	0089      	lsls	r1, r1, #2
 8005cc4:	3106      	adds	r1, #6
 8005cc6:	4b60      	ldr	r3, [pc, #384]	; (8005e48 <snipCommand+0x20c>)
 8005cc8:	4699      	mov	r9, r3
 8005cca:	4449      	add	r1, r9
 8005ccc:	2204      	movs	r2, #4
 8005cce:	a805      	add	r0, sp, #20
 8005cd0:	f00d f965 	bl	8012f9e <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005cd4:	00ad      	lsls	r5, r5, #2
 8005cd6:	19ad      	adds	r5, r5, r6
 8005cd8:	00ad      	lsls	r5, r5, #2
 8005cda:	444d      	add	r5, r9
 8005cdc:	78ea      	ldrb	r2, [r5, #3]
 8005cde:	3a01      	subs	r2, #1
 8005ce0:	0053      	lsls	r3, r2, #1
 8005ce2:	189b      	adds	r3, r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4a5a      	ldr	r2, [pc, #360]	; (8005e50 <snipCommand+0x214>)
 8005ce8:	18d3      	adds	r3, r2, r3
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4699      	mov	r9, r3
 8005cee:	9805      	ldr	r0, [sp, #20]
 8005cf0:	f7fc ff18 	bl	8002b24 <__aeabi_f2d>
 8005cf4:	9002      	str	r0, [sp, #8]
 8005cf6:	9103      	str	r1, [sp, #12]
 8005cf8:	786b      	ldrb	r3, [r5, #1]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	005a      	lsls	r2, r3, #1
 8005cfe:	18d2      	adds	r2, r2, r3
 8005d00:	4b54      	ldr	r3, [pc, #336]	; (8005e54 <snipCommand+0x218>)
 8005d02:	189b      	adds	r3, r3, r2
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	464b      	mov	r3, r9
 8005d08:	0022      	movs	r2, r4
 8005d0a:	4953      	ldr	r1, [pc, #332]	; (8005e58 <snipCommand+0x21c>)
 8005d0c:	0020      	movs	r0, r4
 8005d0e:	f00d fb49 	bl	80133a4 <sprintf>
				break;
 8005d12:	e07e      	b.n	8005e12 <snipCommand+0x1d6>
				switch(snippets[s].cond.buffer1[1]){
 8005d14:	00ab      	lsls	r3, r5, #2
 8005d16:	195b      	adds	r3, r3, r5
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4a4b      	ldr	r2, [pc, #300]	; (8005e48 <snipCommand+0x20c>)
 8005d1c:	18d3      	adds	r3, r2, r3
 8005d1e:	78db      	ldrb	r3, [r3, #3]
 8005d20:	3b05      	subs	r3, #5
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	2a09      	cmp	r2, #9
 8005d26:	d874      	bhi.n	8005e12 <snipCommand+0x1d6>
 8005d28:	0093      	lsls	r3, r2, #2
 8005d2a:	4a4c      	ldr	r2, [pc, #304]	; (8005e5c <snipCommand+0x220>)
 8005d2c:	58d3      	ldr	r3, [r2, r3]
 8005d2e:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005d30:	2314      	movs	r3, #20
 8005d32:	436b      	muls	r3, r5
 8005d34:	4a44      	ldr	r2, [pc, #272]	; (8005e48 <snipCommand+0x20c>)
 8005d36:	18d2      	adds	r2, r2, r3
 8005d38:	7893      	ldrb	r3, [r2, #2]
 8005d3a:	68d2      	ldr	r2, [r2, #12]
 8005d3c:	9200      	str	r2, [sp, #0]
 8005d3e:	0022      	movs	r2, r4
 8005d40:	4947      	ldr	r1, [pc, #284]	; (8005e60 <snipCommand+0x224>)
 8005d42:	0020      	movs	r0, r4
 8005d44:	f00d fb2e 	bl	80133a4 <sprintf>
						break;
 8005d48:	e063      	b.n	8005e12 <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005d4a:	2314      	movs	r3, #20
 8005d4c:	436b      	muls	r3, r5
 8005d4e:	4a3e      	ldr	r2, [pc, #248]	; (8005e48 <snipCommand+0x20c>)
 8005d50:	18d2      	adds	r2, r2, r3
 8005d52:	7893      	ldrb	r3, [r2, #2]
 8005d54:	68d2      	ldr	r2, [r2, #12]
 8005d56:	9200      	str	r2, [sp, #0]
 8005d58:	0022      	movs	r2, r4
 8005d5a:	4942      	ldr	r1, [pc, #264]	; (8005e64 <snipCommand+0x228>)
 8005d5c:	0020      	movs	r0, r4
 8005d5e:	f00d fb21 	bl	80133a4 <sprintf>
						break;
 8005d62:	e056      	b.n	8005e12 <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005d64:	2314      	movs	r3, #20
 8005d66:	436b      	muls	r3, r5
 8005d68:	4a37      	ldr	r2, [pc, #220]	; (8005e48 <snipCommand+0x20c>)
 8005d6a:	18d2      	adds	r2, r2, r3
 8005d6c:	7893      	ldrb	r3, [r2, #2]
 8005d6e:	68d1      	ldr	r1, [r2, #12]
 8005d70:	9101      	str	r1, [sp, #4]
 8005d72:	7912      	ldrb	r2, [r2, #4]
 8005d74:	9200      	str	r2, [sp, #0]
 8005d76:	0022      	movs	r2, r4
 8005d78:	493b      	ldr	r1, [pc, #236]	; (8005e68 <snipCommand+0x22c>)
 8005d7a:	0020      	movs	r0, r4
 8005d7c:	f00d fb12 	bl	80133a4 <sprintf>
						break;
 8005d80:	e047      	b.n	8005e12 <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005d82:	2314      	movs	r3, #20
 8005d84:	436b      	muls	r3, r5
 8005d86:	4a30      	ldr	r2, [pc, #192]	; (8005e48 <snipCommand+0x20c>)
 8005d88:	18d2      	adds	r2, r2, r3
 8005d8a:	7893      	ldrb	r3, [r2, #2]
 8005d8c:	68d1      	ldr	r1, [r2, #12]
 8005d8e:	9101      	str	r1, [sp, #4]
 8005d90:	7912      	ldrb	r2, [r2, #4]
 8005d92:	9200      	str	r2, [sp, #0]
 8005d94:	0022      	movs	r2, r4
 8005d96:	4935      	ldr	r1, [pc, #212]	; (8005e6c <snipCommand+0x230>)
 8005d98:	0020      	movs	r0, r4
 8005d9a:	f00d fb03 	bl	80133a4 <sprintf>
						break;
 8005d9e:	e038      	b.n	8005e12 <snipCommand+0x1d6>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005da0:	4b33      	ldr	r3, [pc, #204]	; (8005e70 <snipCommand+0x234>)
 8005da2:	0022      	movs	r2, r4
 8005da4:	4933      	ldr	r1, [pc, #204]	; (8005e74 <snipCommand+0x238>)
 8005da6:	0020      	movs	r0, r4
 8005da8:	f00d fafc 	bl	80133a4 <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005dac:	4830      	ldr	r0, [pc, #192]	; (8005e70 <snipCommand+0x234>)
 8005dae:	f7fa f9b3 	bl	8000118 <strlen>
 8005db2:	0002      	movs	r2, r0
 8005db4:	2100      	movs	r1, #0
 8005db6:	482e      	ldr	r0, [pc, #184]	; (8005e70 <snipCommand+0x234>)
 8005db8:	f00d f8fa 	bl	8012fb0 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005dbc:	0029      	movs	r1, r5
 8005dbe:	68f0      	ldr	r0, [r6, #12]
 8005dc0:	f7ff fa94 	bl	80052ec <ParseSnippetCommand>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d1eb      	bne.n	8005da0 <snipCommand+0x164>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005dc8:	0020      	movs	r0, r4
 8005dca:	f7fa f9a5 	bl	8000118 <strlen>
 8005dce:	1820      	adds	r0, r4, r0
 8005dd0:	220c      	movs	r2, #12
 8005dd2:	4929      	ldr	r1, [pc, #164]	; (8005e78 <snipCommand+0x23c>)
 8005dd4:	f00d f8e3 	bl	8012f9e <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005dd8:	0020      	movs	r0, r4
 8005dda:	f7fa f99d 	bl	8000118 <strlen>
 8005dde:	b282      	uxth	r2, r0
 8005de0:	4b16      	ldr	r3, [pc, #88]	; (8005e3c <snipCommand+0x200>)
 8005de2:	7818      	ldrb	r0, [r3, #0]
 8005de4:	2301      	movs	r3, #1
 8005de6:	425b      	negs	r3, r3
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	3333      	adds	r3, #51	; 0x33
 8005dec:	0021      	movs	r1, r4
 8005dee:	f007 faef 	bl	800d3d0 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005df2:	003d      	movs	r5, r7
 8005df4:	4b13      	ldr	r3, [pc, #76]	; (8005e44 <snipCommand+0x208>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	42bb      	cmp	r3, r7
 8005dfa:	d911      	bls.n	8005e20 <snipCommand+0x1e4>
 8005dfc:	1c6f      	adds	r7, r5, #1
 8005dfe:	b2ff      	uxtb	r7, r7
		if(snippets[s].cond.conditionType)
 8005e00:	002e      	movs	r6, r5
 8005e02:	00ab      	lsls	r3, r5, #2
 8005e04:	195b      	adds	r3, r3, r5
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4642      	mov	r2, r8
 8005e0a:	5c9b      	ldrb	r3, [r3, r2]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d000      	beq.n	8005e12 <snipCommand+0x1d6>
 8005e10:	e739      	b.n	8005c86 <snipCommand+0x4a>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005e12:	4d17      	ldr	r5, [pc, #92]	; (8005e70 <snipCommand+0x234>)
 8005e14:	00b3      	lsls	r3, r6, #2
 8005e16:	199b      	adds	r3, r3, r6
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4e0b      	ldr	r6, [pc, #44]	; (8005e48 <snipCommand+0x20c>)
 8005e1c:	18f6      	adds	r6, r6, r3
 8005e1e:	e7cd      	b.n	8005dbc <snipCommand+0x180>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005e20:	22b5      	movs	r2, #181	; 0xb5
 8005e22:	4916      	ldr	r1, [pc, #88]	; (8005e7c <snipCommand+0x240>)
 8005e24:	0020      	movs	r0, r4
 8005e26:	f00d f8ba 	bl	8012f9e <memcpy>
}
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	b00a      	add	sp, #40	; 0x28
 8005e2e:	bc1c      	pop	{r2, r3, r4}
 8005e30:	4690      	mov	r8, r2
 8005e32:	4699      	mov	r9, r3
 8005e34:	46a2      	mov	sl, r4
 8005e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e38:	080177a0 	.word	0x080177a0
 8005e3c:	20000a77 	.word	0x20000a77
 8005e40:	08018f28 	.word	0x08018f28
 8005e44:	2000121f 	.word	0x2000121f
 8005e48:	200069e0 	.word	0x200069e0
 8005e4c:	08018f60 	.word	0x08018f60
 8005e50:	20000084 	.word	0x20000084
 8005e54:	08018a54 	.word	0x08018a54
 8005e58:	08018fcc 	.word	0x08018fcc
 8005e5c:	08018300 	.word	0x08018300
 8005e60:	08018f6c 	.word	0x08018f6c
 8005e64:	08018f80 	.word	0x08018f80
 8005e68:	08018f98 	.word	0x08018f98
 8005e6c:	08018fb0 	.word	0x08018fb0
 8005e70:	20001250 	.word	0x20001250
 8005e74:	08018fdc 	.word	0x08018fdc
 8005e78:	08018fe4 	.word	0x08018fe4
 8005e7c:	08018ff0 	.word	0x08018ff0

08005e80 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e80:	b510      	push	{r4, lr}
 8005e82:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005e84:	d101      	bne.n	8005e8a <idcodeCommand+0xa>
 8005e86:	b672      	cpsid	i
 8005e88:	e7fe      	b.n	8005e88 <idcodeCommand+0x8>
	dev =HAL_GetDEVID();
 8005e8a:	f009 fc0d 	bl	800f6a8 <HAL_GetDEVID>
	switch(dev){
 8005e8e:	0403      	lsls	r3, r0, #16
 8005e90:	0c1b      	lsrs	r3, r3, #16
 8005e92:	4a1b      	ldr	r2, [pc, #108]	; (8005f00 <idcodeCommand+0x80>)
 8005e94:	4694      	mov	ip, r2
 8005e96:	4463      	add	r3, ip
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d82a      	bhi.n	8005ef2 <idcodeCommand+0x72>
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4a19      	ldr	r2, [pc, #100]	; (8005f04 <idcodeCommand+0x84>)
 8005ea0:	58d3      	ldr	r3, [r2, r3]
 8005ea2:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005ea4:	4a18      	ldr	r2, [pc, #96]	; (8005f08 <idcodeCommand+0x88>)
 8005ea6:	4919      	ldr	r1, [pc, #100]	; (8005f0c <idcodeCommand+0x8c>)
 8005ea8:	0020      	movs	r0, r4
 8005eaa:	f00d fa7b 	bl	80133a4 <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005eae:	f009 fbf5 	bl	800f69c <HAL_GetREVID>
 8005eb2:	0b03      	lsrs	r3, r0, #12
 8005eb4:	0022      	movs	r2, r4
 8005eb6:	4916      	ldr	r1, [pc, #88]	; (8005f10 <idcodeCommand+0x90>)
 8005eb8:	0020      	movs	r0, r4
 8005eba:	f00d fa73 	bl	80133a4 <sprintf>
}
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005ec2:	4a14      	ldr	r2, [pc, #80]	; (8005f14 <idcodeCommand+0x94>)
 8005ec4:	4911      	ldr	r1, [pc, #68]	; (8005f0c <idcodeCommand+0x8c>)
 8005ec6:	0020      	movs	r0, r4
 8005ec8:	f00d fa6c 	bl	80133a4 <sprintf>
			break;
 8005ecc:	e7ef      	b.n	8005eae <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005ece:	4a12      	ldr	r2, [pc, #72]	; (8005f18 <idcodeCommand+0x98>)
 8005ed0:	490e      	ldr	r1, [pc, #56]	; (8005f0c <idcodeCommand+0x8c>)
 8005ed2:	0020      	movs	r0, r4
 8005ed4:	f00d fa66 	bl	80133a4 <sprintf>
			break;
 8005ed8:	e7e9      	b.n	8005eae <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005eda:	4a10      	ldr	r2, [pc, #64]	; (8005f1c <idcodeCommand+0x9c>)
 8005edc:	490b      	ldr	r1, [pc, #44]	; (8005f0c <idcodeCommand+0x8c>)
 8005ede:	0020      	movs	r0, r4
 8005ee0:	f00d fa60 	bl	80133a4 <sprintf>
			break;
 8005ee4:	e7e3      	b.n	8005eae <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005ee6:	4a0e      	ldr	r2, [pc, #56]	; (8005f20 <idcodeCommand+0xa0>)
 8005ee8:	4908      	ldr	r1, [pc, #32]	; (8005f0c <idcodeCommand+0x8c>)
 8005eea:	0020      	movs	r0, r4
 8005eec:	f00d fa5a 	bl	80133a4 <sprintf>
			break;
 8005ef0:	e7dd      	b.n	8005eae <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005ef2:	4a0c      	ldr	r2, [pc, #48]	; (8005f24 <idcodeCommand+0xa4>)
 8005ef4:	4905      	ldr	r1, [pc, #20]	; (8005f0c <idcodeCommand+0x8c>)
 8005ef6:	0020      	movs	r0, r4
 8005ef8:	f00d fa54 	bl	80133a4 <sprintf>
			break;
 8005efc:	e7d7      	b.n	8005eae <idcodeCommand+0x2e>
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	fffffbc0 	.word	0xfffffbc0
 8005f04:	08018328 	.word	0x08018328
 8005f08:	08018950 	.word	0x08018950
 8005f0c:	0801895c 	.word	0x0801895c
 8005f10:	080189a8 	.word	0x080189a8
 8005f14:	08018970 	.word	0x08018970
 8005f18:	0801897c 	.word	0x0801897c
 8005f1c:	08018988 	.word	0x08018988
 8005f20:	08018994 	.word	0x08018994
 8005f24:	080189a0 	.word	0x080189a0

08005f28 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005f2c:	d101      	bne.n	8005f32 <uuidCommand+0xa>
 8005f2e:	b672      	cpsid	i
 8005f30:	e7fe      	b.n	8005f30 <uuidCommand+0x8>
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005f32:	220e      	movs	r2, #14
 8005f34:	4911      	ldr	r1, [pc, #68]	; (8005f7c <uuidCommand+0x54>)
 8005f36:	f00d f832 	bl	8012f9e <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005f3a:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <uuidCommand+0x58>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4d11      	ldr	r5, [pc, #68]	; (8005f84 <uuidCommand+0x5c>)
 8005f40:	0022      	movs	r2, r4
 8005f42:	0029      	movs	r1, r5
 8005f44:	0020      	movs	r0, r4
 8005f46:	f00d fa2d 	bl	80133a4 <sprintf>
 8005f4a:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <uuidCommand+0x60>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	0022      	movs	r2, r4
 8005f50:	0029      	movs	r1, r5
 8005f52:	0020      	movs	r0, r4
 8005f54:	f00d fa26 	bl	80133a4 <sprintf>
 8005f58:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <uuidCommand+0x64>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	0022      	movs	r2, r4
 8005f5e:	0029      	movs	r1, r5
 8005f60:	0020      	movs	r0, r4
 8005f62:	f00d fa1f 	bl	80133a4 <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005f66:	0020      	movs	r0, r4
 8005f68:	f7fa f8d6 	bl	8000118 <strlen>
 8005f6c:	1820      	adds	r0, r4, r0
 8005f6e:	2203      	movs	r2, #3
 8005f70:	4907      	ldr	r1, [pc, #28]	; (8005f90 <uuidCommand+0x68>)
 8005f72:	f00d f814 	bl	8012f9e <memcpy>
}
 8005f76:	2000      	movs	r0, #0
 8005f78:	bd70      	pop	{r4, r5, r6, pc}
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	0801a134 	.word	0x0801a134
 8005f80:	1ffff7ac 	.word	0x1ffff7ac
 8005f84:	0801a144 	.word	0x0801a144
 8005f88:	1ffff7b0 	.word	0x1ffff7b0
 8005f8c:	1ffff7b4 	.word	0x1ffff7b4
 8005f90:	0801992c 	.word	0x0801992c

08005f94 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f94:	b510      	push	{r4, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005f9a:	d101      	bne.n	8005fa0 <timeCommand+0xc>
 8005f9c:	b672      	cpsid	i
 8005f9e:	e7fe      	b.n	8005f9e <timeCommand+0xa>
	GetTimeDate();
 8005fa0:	f006 ff72 	bl	800ce88 <GetTimeDate>
	if(BOS.hourformat == 24)
 8005fa4:	4b1b      	ldr	r3, [pc, #108]	; (8006014 <timeCommand+0x80>)
 8005fa6:	7b5b      	ldrb	r3, [r3, #13]
 8005fa8:	2b18      	cmp	r3, #24
 8005faa:	d004      	beq.n	8005fb6 <timeCommand+0x22>
	else if(BOS.hourformat == 12){
 8005fac:	2b0c      	cmp	r3, #12
 8005fae:	d00e      	beq.n	8005fce <timeCommand+0x3a>
}
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	b004      	add	sp, #16
 8005fb4:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8005fb6:	4917      	ldr	r1, [pc, #92]	; (8006014 <timeCommand+0x80>)
 8005fb8:	7c4b      	ldrb	r3, [r1, #17]
 8005fba:	7c8a      	ldrb	r2, [r1, #18]
 8005fbc:	89c8      	ldrh	r0, [r1, #14]
 8005fbe:	9001      	str	r0, [sp, #4]
 8005fc0:	7c09      	ldrb	r1, [r1, #16]
 8005fc2:	9100      	str	r1, [sp, #0]
 8005fc4:	4914      	ldr	r1, [pc, #80]	; (8006018 <timeCommand+0x84>)
 8005fc6:	0020      	movs	r0, r4
 8005fc8:	f00d f9ec 	bl	80133a4 <sprintf>
 8005fcc:	e7f0      	b.n	8005fb0 <timeCommand+0x1c>
		if(BOS.time.ampm == RTC_AM)
 8005fce:	4b11      	ldr	r3, [pc, #68]	; (8006014 <timeCommand+0x80>)
 8005fd0:	7cdb      	ldrb	r3, [r3, #19]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d10d      	bne.n	8005ff2 <timeCommand+0x5e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8005fd6:	490f      	ldr	r1, [pc, #60]	; (8006014 <timeCommand+0x80>)
 8005fd8:	7c4b      	ldrb	r3, [r1, #17]
 8005fda:	7c8a      	ldrb	r2, [r1, #18]
 8005fdc:	480f      	ldr	r0, [pc, #60]	; (800601c <timeCommand+0x88>)
 8005fde:	9002      	str	r0, [sp, #8]
 8005fe0:	89c8      	ldrh	r0, [r1, #14]
 8005fe2:	9001      	str	r0, [sp, #4]
 8005fe4:	7c09      	ldrb	r1, [r1, #16]
 8005fe6:	9100      	str	r1, [sp, #0]
 8005fe8:	490d      	ldr	r1, [pc, #52]	; (8006020 <timeCommand+0x8c>)
 8005fea:	0020      	movs	r0, r4
 8005fec:	f00d f9da 	bl	80133a4 <sprintf>
 8005ff0:	e7de      	b.n	8005fb0 <timeCommand+0x1c>
		else if(BOS.time.ampm == RTC_PM)
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d1dc      	bne.n	8005fb0 <timeCommand+0x1c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8005ff6:	4907      	ldr	r1, [pc, #28]	; (8006014 <timeCommand+0x80>)
 8005ff8:	7c4b      	ldrb	r3, [r1, #17]
 8005ffa:	7c8a      	ldrb	r2, [r1, #18]
 8005ffc:	4809      	ldr	r0, [pc, #36]	; (8006024 <timeCommand+0x90>)
 8005ffe:	9002      	str	r0, [sp, #8]
 8006000:	89c8      	ldrh	r0, [r1, #14]
 8006002:	9001      	str	r0, [sp, #4]
 8006004:	7c09      	ldrb	r1, [r1, #16]
 8006006:	9100      	str	r1, [sp, #0]
 8006008:	4905      	ldr	r1, [pc, #20]	; (8006020 <timeCommand+0x8c>)
 800600a:	0020      	movs	r0, r4
 800600c:	f00d f9ca 	bl	80133a4 <sprintf>
 8006010:	e7ce      	b.n	8005fb0 <timeCommand+0x1c>
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	200069c4 	.word	0x200069c4
 8006018:	0801a07c 	.word	0x0801a07c
 800601c:	0801a0d0 	.word	0x0801a0d0
 8006020:	0801a0a4 	.word	0x0801a0a4
 8006024:	0801a0d4 	.word	0x0801a0d4

08006028 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006028:	b510      	push	{r4, lr}
 800602a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800602c:	d101      	bne.n	8006032 <dateCommand+0xa>
 800602e:	b672      	cpsid	i
 8006030:	e7fe      	b.n	8006030 <dateCommand+0x8>
	GetTimeDate();
 8006032:	f006 ff29 	bl	800ce88 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8006036:	f7fe fb25 	bl	8004684 <GetDateString>
 800603a:	0002      	movs	r2, r0
 800603c:	4902      	ldr	r1, [pc, #8]	; (8006048 <dateCommand+0x20>)
 800603e:	0020      	movs	r0, r4
 8006040:	f00d f9b0 	bl	80133a4 <sprintf>
}
 8006044:	2000      	movs	r0, #0
 8006046:	bd10      	pop	{r4, pc}
 8006048:	08018588 	.word	0x08018588

0800604c <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800604c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800604e:	46c6      	mov	lr, r8
 8006050:	b500      	push	{lr}
 8006052:	b082      	sub	sp, #8
 8006054:	0004      	movs	r4, r0
 8006056:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006058:	2300      	movs	r3, #0
 800605a:	9301      	str	r3, [sp, #4]
 800605c:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800605e:	2800      	cmp	r0, #0
 8006060:	d101      	bne.n	8006066 <getCommand+0x1a>
 8006062:	b672      	cpsid	i
 8006064:	e7fe      	b.n	8006064 <getCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006066:	aa01      	add	r2, sp, #4
 8006068:	2101      	movs	r1, #1
 800606a:	0030      	movs	r0, r6
 800606c:	f007 fbf6 	bl	800d85c <FreeRTOS_CLIGetParameter>
 8006070:	0005      	movs	r5, r0
 8006072:	4b74      	ldr	r3, [pc, #464]	; (8006244 <getCommand+0x1f8>)
 8006074:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006076:	2204      	movs	r2, #4
 8006078:	4973      	ldr	r1, [pc, #460]	; (8006248 <getCommand+0x1fc>)
 800607a:	f00d f9d7 	bl	801342c <strncmp>
 800607e:	2800      	cmp	r0, #0
 8006080:	d000      	beq.n	8006084 <getCommand+0x38>
 8006082:	e090      	b.n	80061a6 <getCommand+0x15a>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006084:	1d2f      	adds	r7, r5, #4
 8006086:	9b01      	ldr	r3, [sp, #4]
 8006088:	1f1e      	subs	r6, r3, #4
 800608a:	0032      	movs	r2, r6
 800608c:	496f      	ldr	r1, [pc, #444]	; (800624c <getCommand+0x200>)
 800608e:	0038      	movs	r0, r7
 8006090:	f00d f9cc 	bl	801342c <strncmp>
 8006094:	2800      	cmp	r0, #0
 8006096:	d11e      	bne.n	80060d6 <getCommand+0x8a>
			if(BOS.response == BOS_RESPONSE_ALL)
 8006098:	4b6d      	ldr	r3, [pc, #436]	; (8006250 <getCommand+0x204>)
 800609a:	799b      	ldrb	r3, [r3, #6]
 800609c:	2b60      	cmp	r3, #96	; 0x60
 800609e:	d109      	bne.n	80060b4 <getCommand+0x68>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 80060a0:	4a6c      	ldr	r2, [pc, #432]	; (8006254 <getCommand+0x208>)
 80060a2:	496d      	ldr	r1, [pc, #436]	; (8006258 <getCommand+0x20c>)
 80060a4:	0020      	movs	r0, r4
 80060a6:	f00d f97d 	bl	80133a4 <sprintf>
}
 80060aa:	2000      	movs	r0, #0
 80060ac:	b002      	add	sp, #8
 80060ae:	bc04      	pop	{r2}
 80060b0:	4690      	mov	r8, r2
 80060b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if(BOS.response == BOS_RESPONSE_MSG)
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	d105      	bne.n	80060c4 <getCommand+0x78>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 80060b8:	4a68      	ldr	r2, [pc, #416]	; (800625c <getCommand+0x210>)
 80060ba:	4967      	ldr	r1, [pc, #412]	; (8006258 <getCommand+0x20c>)
 80060bc:	0020      	movs	r0, r4
 80060be:	f00d f971 	bl	80133a4 <sprintf>
 80060c2:	e7f2      	b.n	80060aa <getCommand+0x5e>
			else if(BOS.response == BOS_RESPONSE_NONE)
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d000      	beq.n	80060ca <getCommand+0x7e>
 80060c8:	e0b6      	b.n	8006238 <getCommand+0x1ec>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 80060ca:	4a65      	ldr	r2, [pc, #404]	; (8006260 <getCommand+0x214>)
 80060cc:	4962      	ldr	r1, [pc, #392]	; (8006258 <getCommand+0x20c>)
 80060ce:	0020      	movs	r0, r4
 80060d0:	f00d f968 	bl	80133a4 <sprintf>
 80060d4:	e7e9      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 80060d6:	0032      	movs	r2, r6
 80060d8:	4962      	ldr	r1, [pc, #392]	; (8006264 <getCommand+0x218>)
 80060da:	0038      	movs	r0, r7
 80060dc:	f00d f9a6 	bl	801342c <strncmp>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d11a      	bne.n	800611a <getCommand+0xce>
			if(BOS.trace == TRACE_BOTH)
 80060e4:	4b5a      	ldr	r3, [pc, #360]	; (8006250 <getCommand+0x204>)
 80060e6:	79db      	ldrb	r3, [r3, #7]
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d105      	bne.n	80060f8 <getCommand+0xac>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 80060ec:	4a59      	ldr	r2, [pc, #356]	; (8006254 <getCommand+0x208>)
 80060ee:	495a      	ldr	r1, [pc, #360]	; (8006258 <getCommand+0x20c>)
 80060f0:	0020      	movs	r0, r4
 80060f2:	f00d f957 	bl	80133a4 <sprintf>
 80060f6:	e7d8      	b.n	80060aa <getCommand+0x5e>
			else if(BOS.trace == TRACE_MESSAGE)
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d105      	bne.n	8006108 <getCommand+0xbc>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 80060fc:	4a57      	ldr	r2, [pc, #348]	; (800625c <getCommand+0x210>)
 80060fe:	4956      	ldr	r1, [pc, #344]	; (8006258 <getCommand+0x20c>)
 8006100:	0020      	movs	r0, r4
 8006102:	f00d f94f 	bl	80133a4 <sprintf>
 8006106:	e7d0      	b.n	80060aa <getCommand+0x5e>
			else if(BOS.trace == TRACE_NONE)
 8006108:	2b00      	cmp	r3, #0
 800610a:	d000      	beq.n	800610e <getCommand+0xc2>
 800610c:	e094      	b.n	8006238 <getCommand+0x1ec>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 800610e:	4a54      	ldr	r2, [pc, #336]	; (8006260 <getCommand+0x214>)
 8006110:	4951      	ldr	r1, [pc, #324]	; (8006258 <getCommand+0x20c>)
 8006112:	0020      	movs	r0, r4
 8006114:	f00d f946 	bl	80133a4 <sprintf>
 8006118:	e7c7      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800611a:	0032      	movs	r2, r6
 800611c:	4952      	ldr	r1, [pc, #328]	; (8006268 <getCommand+0x21c>)
 800611e:	0038      	movs	r0, r7
 8006120:	f00d f984 	bl	801342c <strncmp>
 8006124:	2800      	cmp	r0, #0
 8006126:	d106      	bne.n	8006136 <getCommand+0xea>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8006128:	4b49      	ldr	r3, [pc, #292]	; (8006250 <getCommand+0x204>)
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	494f      	ldr	r1, [pc, #316]	; (800626c <getCommand+0x220>)
 800612e:	0020      	movs	r0, r4
 8006130:	f00d f938 	bl	80133a4 <sprintf>
 8006134:	e7b9      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006136:	0032      	movs	r2, r6
 8006138:	494d      	ldr	r1, [pc, #308]	; (8006270 <getCommand+0x224>)
 800613a:	0038      	movs	r0, r7
 800613c:	f00d f976 	bl	801342c <strncmp>
 8006140:	2800      	cmp	r0, #0
 8006142:	d106      	bne.n	8006152 <getCommand+0x106>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8006144:	4b42      	ldr	r3, [pc, #264]	; (8006250 <getCommand+0x204>)
 8006146:	881a      	ldrh	r2, [r3, #0]
 8006148:	4948      	ldr	r1, [pc, #288]	; (800626c <getCommand+0x220>)
 800614a:	0020      	movs	r0, r4
 800614c:	f00d f92a 	bl	80133a4 <sprintf>
 8006150:	e7ab      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006152:	0032      	movs	r2, r6
 8006154:	4947      	ldr	r1, [pc, #284]	; (8006274 <getCommand+0x228>)
 8006156:	0038      	movs	r0, r7
 8006158:	f00d f968 	bl	801342c <strncmp>
 800615c:	2800      	cmp	r0, #0
 800615e:	d106      	bne.n	800616e <getCommand+0x122>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8006160:	4b3b      	ldr	r3, [pc, #236]	; (8006250 <getCommand+0x204>)
 8006162:	885a      	ldrh	r2, [r3, #2]
 8006164:	4941      	ldr	r1, [pc, #260]	; (800626c <getCommand+0x220>)
 8006166:	0020      	movs	r0, r4
 8006168:	f00d f91c 	bl	80133a4 <sprintf>
 800616c:	e79d      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 800616e:	0032      	movs	r2, r6
 8006170:	4941      	ldr	r1, [pc, #260]	; (8006278 <getCommand+0x22c>)
 8006172:	0038      	movs	r0, r7
 8006174:	f00d f95a 	bl	801342c <strncmp>
 8006178:	2800      	cmp	r0, #0
 800617a:	d106      	bne.n	800618a <getCommand+0x13e>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 800617c:	4b34      	ldr	r3, [pc, #208]	; (8006250 <getCommand+0x204>)
 800617e:	791a      	ldrb	r2, [r3, #4]
 8006180:	493a      	ldr	r1, [pc, #232]	; (800626c <getCommand+0x220>)
 8006182:	0020      	movs	r0, r4
 8006184:	f00d f90e 	bl	80133a4 <sprintf>
 8006188:	e78f      	b.n	80060aa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 800618a:	0032      	movs	r2, r6
 800618c:	493b      	ldr	r1, [pc, #236]	; (800627c <getCommand+0x230>)
 800618e:	0038      	movs	r0, r7
 8006190:	f00d f94c 	bl	801342c <strncmp>
 8006194:	2800      	cmp	r0, #0
 8006196:	d10d      	bne.n	80061b4 <getCommand+0x168>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8006198:	4b2d      	ldr	r3, [pc, #180]	; (8006250 <getCommand+0x204>)
 800619a:	795a      	ldrb	r2, [r3, #5]
 800619c:	4933      	ldr	r1, [pc, #204]	; (800626c <getCommand+0x220>)
 800619e:	0020      	movs	r0, r4
 80061a0:	f00d f900 	bl	80133a4 <sprintf>
 80061a4:	e781      	b.n	80060aa <getCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 80061a6:	2205      	movs	r2, #5
 80061a8:	4935      	ldr	r1, [pc, #212]	; (8006280 <getCommand+0x234>)
 80061aa:	0028      	movs	r0, r5
 80061ac:	f00d f93e 	bl	801342c <strncmp>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d005      	beq.n	80061c0 <getCommand+0x174>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80061b4:	2213      	movs	r2, #19
 80061b6:	4933      	ldr	r1, [pc, #204]	; (8006284 <getCommand+0x238>)
 80061b8:	0020      	movs	r0, r4
 80061ba:	f00c fef0 	bl	8012f9e <memcpy>
 80061be:	e774      	b.n	80060aa <getCommand+0x5e>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80061c0:	466a      	mov	r2, sp
 80061c2:	2102      	movs	r1, #2
 80061c4:	0030      	movs	r0, r6
 80061c6:	f007 fb49 	bl	800d85c <FreeRTOS_CLIGetParameter>
 80061ca:	0005      	movs	r5, r0
 80061cc:	4f2e      	ldr	r7, [pc, #184]	; (8006288 <getCommand+0x23c>)
		for(i =0; i < MaxNumOfGroups; i++){
 80061ce:	2600      	movs	r6, #0
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 80061d0:	0039      	movs	r1, r7
 80061d2:	0028      	movs	r0, r5
 80061d4:	f7f9 ff96 	bl	8000104 <strcmp>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d011      	beq.n	8006200 <getCommand+0x1b4>
		for(i =0; i < MaxNumOfGroups; i++){
 80061dc:	3601      	adds	r6, #1
 80061de:	b2f6      	uxtb	r6, r6
 80061e0:	370a      	adds	r7, #10
 80061e2:	2e0a      	cmp	r6, #10
 80061e4:	d1f4      	bne.n	80061d0 <getCommand+0x184>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 80061e6:	002a      	movs	r2, r5
 80061e8:	4928      	ldr	r1, [pc, #160]	; (800628c <getCommand+0x240>)
 80061ea:	0020      	movs	r0, r4
 80061ec:	f00d f8da 	bl	80133a4 <sprintf>
			return pdFALSE;
 80061f0:	e75b      	b.n	80060aa <getCommand+0x5e>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 80061f2:	002b      	movs	r3, r5
 80061f4:	0022      	movs	r2, r4
 80061f6:	4926      	ldr	r1, [pc, #152]	; (8006290 <getCommand+0x244>)
 80061f8:	0020      	movs	r0, r4
 80061fa:	f00d f8d3 	bl	80133a4 <sprintf>
 80061fe:	e015      	b.n	800622c <getCommand+0x1e0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8006200:	002a      	movs	r2, r5
 8006202:	4924      	ldr	r1, [pc, #144]	; (8006294 <getCommand+0x248>)
 8006204:	0020      	movs	r0, r4
 8006206:	f00d f8cd 	bl	80133a4 <sprintf>
			for(j =1; j <= N; j++)						// N modules
 800620a:	4b23      	ldr	r3, [pc, #140]	; (8006298 <getCommand+0x24c>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d100      	bne.n	8006214 <getCommand+0x1c8>
 8006212:	e74a      	b.n	80060aa <getCommand+0x5e>
 8006214:	2501      	movs	r5, #1
 8006216:	002b      	movs	r3, r5
 8006218:	40b3      	lsls	r3, r6
 800621a:	4698      	mov	r8, r3
				if(InGroup(j,i)){
 800621c:	4f1f      	ldr	r7, [pc, #124]	; (800629c <getCommand+0x250>)
			for(j =1; j <= N; j++)						// N modules
 800621e:	4e1e      	ldr	r6, [pc, #120]	; (8006298 <getCommand+0x24c>)
				if(InGroup(j,i)){
 8006220:	1e6b      	subs	r3, r5, #1
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	5bdb      	ldrh	r3, [r3, r7]
 8006226:	4642      	mov	r2, r8
 8006228:	421a      	tst	r2, r3
 800622a:	d1e2      	bne.n	80061f2 <getCommand+0x1a6>
			for(j =1; j <= N; j++)						// N modules
 800622c:	3501      	adds	r5, #1
 800622e:	b2ed      	uxtb	r5, r5
 8006230:	7833      	ldrb	r3, [r6, #0]
 8006232:	42ab      	cmp	r3, r5
 8006234:	d2f4      	bcs.n	8006220 <getCommand+0x1d4>
 8006236:	e738      	b.n	80060aa <getCommand+0x5e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8006238:	002a      	movs	r2, r5
 800623a:	4919      	ldr	r1, [pc, #100]	; (80062a0 <getCommand+0x254>)
 800623c:	0020      	movs	r0, r4
 800623e:	f00d f8b1 	bl	80133a4 <sprintf>
 8006242:	e732      	b.n	80060aa <getCommand+0x5e>
 8006244:	20001294 	.word	0x20001294
 8006248:	080186f4 	.word	0x080186f4
 800624c:	080186fc 	.word	0x080186fc
 8006250:	200069c4 	.word	0x200069c4
 8006254:	08017afc 	.word	0x08017afc
 8006258:	08017954 	.word	0x08017954
 800625c:	08018708 	.word	0x08018708
 8006260:	0801870c 	.word	0x0801870c
 8006264:	08018714 	.word	0x08018714
 8006268:	0801871c 	.word	0x0801871c
 800626c:	08017fac 	.word	0x08017fac
 8006270:	08018728 	.word	0x08018728
 8006274:	08018734 	.word	0x08018734
 8006278:	08018744 	.word	0x08018744
 800627c:	08018758 	.word	0x08018758
 8006280:	0801876c 	.word	0x0801876c
 8006284:	0801877c 	.word	0x0801877c
 8006288:	20000e5c 	.word	0x20000e5c
 800628c:	08018790 	.word	0x08018790
 8006290:	08018774 	.word	0x08018774
 8006294:	080187ac 	.word	0x080187ac
 8006298:	2000001c 	.word	0x2000001c
 800629c:	20000ec0 	.word	0x20000ec0
 80062a0:	080187c0 	.word	0x080187c0

080062a4 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062a4:	b570      	push	{r4, r5, r6, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	0004      	movs	r4, r0
 80062aa:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80062b0:	2c00      	cmp	r4, #0
 80062b2:	d101      	bne.n	80062b8 <defaultCommand+0x14>
 80062b4:	b672      	cpsid	i
 80062b6:	e7fe      	b.n	80062b6 <defaultCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80062b8:	aa01      	add	r2, sp, #4
 80062ba:	2101      	movs	r1, #1
 80062bc:	f007 face 	bl	800d85c <FreeRTOS_CLIGetParameter>
 80062c0:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 80062c2:	9e01      	ldr	r6, [sp, #4]
 80062c4:	0032      	movs	r2, r6
 80062c6:	491e      	ldr	r1, [pc, #120]	; (8006340 <defaultCommand+0x9c>)
 80062c8:	f00d f8b0 	bl	801342c <strncmp>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d01e      	beq.n	800630e <defaultCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 80062d0:	0032      	movs	r2, r6
 80062d2:	491c      	ldr	r1, [pc, #112]	; (8006344 <defaultCommand+0xa0>)
 80062d4:	0028      	movs	r0, r5
 80062d6:	f00d f8a9 	bl	801342c <strncmp>
 80062da:	2800      	cmp	r0, #0
 80062dc:	d12a      	bne.n	8006334 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 80062de:	2200      	movs	r2, #0
 80062e0:	2116      	movs	r1, #22
 80062e2:	20ff      	movs	r0, #255	; 0xff
 80062e4:	f003 f9ee 	bl	80096c4 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 80062e8:	4b17      	ldr	r3, [pc, #92]	; (8006348 <defaultCommand+0xa4>)
 80062ea:	2202      	movs	r2, #2
 80062ec:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 80062ee:	2064      	movs	r0, #100	; 0x64
 80062f0:	f007 f99b 	bl	800d62a <osDelay>
		ClearEEportsDir();
 80062f4:	f7fd f96a 	bl	80035cc <ClearEEportsDir>
		ClearROtopology();
 80062f8:	f005 f998 	bl	800b62c <ClearROtopology>
		osDelay(100);
 80062fc:	2064      	movs	r0, #100	; 0x64
 80062fe:	f007 f994 	bl	800d62a <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 8006302:	2240      	movs	r2, #64	; 0x40
 8006304:	4911      	ldr	r1, [pc, #68]	; (800634c <defaultCommand+0xa8>)
 8006306:	0020      	movs	r0, r4
 8006308:	f00c fe49 	bl	8012f9e <memcpy>
 800630c:	e00f      	b.n	800632e <defaultCommand+0x8a>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 800630e:	4910      	ldr	r1, [pc, #64]	; (8006350 <defaultCommand+0xac>)
 8006310:	4b10      	ldr	r3, [pc, #64]	; (8006354 <defaultCommand+0xb0>)
 8006312:	000a      	movs	r2, r1
 8006314:	cb23      	ldmia	r3!, {r0, r1, r5}
 8006316:	c223      	stmia	r2!, {r0, r1, r5}
 8006318:	cb23      	ldmia	r3!, {r0, r1, r5}
 800631a:	c223      	stmia	r2!, {r0, r1, r5}
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006320:	f7fd f91c 	bl	800355c <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006324:	2227      	movs	r2, #39	; 0x27
 8006326:	490c      	ldr	r1, [pc, #48]	; (8006358 <defaultCommand+0xb4>)
 8006328:	0020      	movs	r0, r4
 800632a:	f00c fe38 	bl	8012f9e <memcpy>
}
 800632e:	2000      	movs	r0, #0
 8006330:	b002      	add	sp, #8
 8006332:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006334:	220f      	movs	r2, #15
 8006336:	4909      	ldr	r1, [pc, #36]	; (800635c <defaultCommand+0xb8>)
 8006338:	0020      	movs	r0, r4
 800633a:	f00c fe30 	bl	8012f9e <memcpy>
 800633e:	e7f6      	b.n	800632e <defaultCommand+0x8a>
 8006340:	080185b0 	.word	0x080185b0
 8006344:	080185e0 	.word	0x080185e0
 8006348:	20000ef4 	.word	0x20000ef4
 800634c:	080185f8 	.word	0x080185f8
 8006350:	200069c4 	.word	0x200069c4
 8006354:	20000000 	.word	0x20000000
 8006358:	080185b8 	.word	0x080185b8
 800635c:	080185e8 	.word	0x080185e8

08006360 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006362:	46ce      	mov	lr, r9
 8006364:	4647      	mov	r7, r8
 8006366:	b580      	push	{r7, lr}
 8006368:	b08d      	sub	sp, #52	; 0x34
 800636a:	0005      	movs	r5, r0
 800636c:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 800636e:	2300      	movs	r3, #0
 8006370:	930b      	str	r3, [sp, #44]	; 0x2c
 8006372:	930a      	str	r3, [sp, #40]	; 0x28
 8006374:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 8006376:	9308      	str	r3, [sp, #32]
 8006378:	9307      	str	r3, [sp, #28]
	configASSERT(pcWriteBuffer);
 800637a:	2800      	cmp	r0, #0
 800637c:	d101      	bne.n	8006382 <setCommand+0x22>
 800637e:	b672      	cpsid	i
 8006380:	e7fe      	b.n	8006380 <setCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006382:	aa0b      	add	r2, sp, #44	; 0x2c
 8006384:	2101      	movs	r1, #1
 8006386:	0020      	movs	r0, r4
 8006388:	f007 fa68 	bl	800d85c <FreeRTOS_CLIGetParameter>
 800638c:	0006      	movs	r6, r0
 800638e:	4bb3      	ldr	r3, [pc, #716]	; (800665c <setCommand+0x2fc>)
 8006390:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006392:	2204      	movs	r2, #4
 8006394:	49b2      	ldr	r1, [pc, #712]	; (8006660 <setCommand+0x300>)
 8006396:	f00d f849 	bl	801342c <strncmp>
 800639a:	2800      	cmp	r0, #0
 800639c:	d015      	beq.n	80063ca <setCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 800639e:	2204      	movs	r2, #4
 80063a0:	49b0      	ldr	r1, [pc, #704]	; (8006664 <setCommand+0x304>)
 80063a2:	0030      	movs	r0, r6
 80063a4:	f00d f842 	bl	801342c <strncmp>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d100      	bne.n	80063ae <setCommand+0x4e>
 80063ac:	e180      	b.n	80066b0 <setCommand+0x350>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 80063ae:	2204      	movs	r2, #4
 80063b0:	49ad      	ldr	r1, [pc, #692]	; (8006668 <setCommand+0x308>)
 80063b2:	0030      	movs	r0, r6
 80063b4:	f00d f83a 	bl	801342c <strncmp>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d100      	bne.n	80063be <setCommand+0x5e>
 80063bc:	e1e6      	b.n	800678c <setCommand+0x42c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80063be:	2213      	movs	r2, #19
 80063c0:	49aa      	ldr	r1, [pc, #680]	; (800666c <setCommand+0x30c>)
 80063c2:	0028      	movs	r0, r5
 80063c4:	f00c fdeb 	bl	8012f9e <memcpy>
 80063c8:	e1d7      	b.n	800677a <setCommand+0x41a>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80063ca:	aa0a      	add	r2, sp, #40	; 0x28
 80063cc:	2102      	movs	r1, #2
 80063ce:	0020      	movs	r0, r4
 80063d0:	f007 fa44 	bl	800d85c <FreeRTOS_CLIGetParameter>
 80063d4:	0004      	movs	r4, r0
 80063d6:	4ba6      	ldr	r3, [pc, #664]	; (8006670 <setCommand+0x310>)
 80063d8:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80063da:	4ba0      	ldr	r3, [pc, #640]	; (800665c <setCommand+0x2fc>)
 80063dc:	681e      	ldr	r6, [r3, #0]
 80063de:	3604      	adds	r6, #4
 80063e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063e2:	1f1f      	subs	r7, r3, #4
 80063e4:	003a      	movs	r2, r7
 80063e6:	49a3      	ldr	r1, [pc, #652]	; (8006674 <setCommand+0x314>)
 80063e8:	0030      	movs	r0, r6
 80063ea:	f00d f81f 	bl	801342c <strncmp>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d153      	bne.n	800649a <setCommand+0x13a>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80063f2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80063f4:	0032      	movs	r2, r6
 80063f6:	49a0      	ldr	r1, [pc, #640]	; (8006678 <setCommand+0x318>)
 80063f8:	0020      	movs	r0, r4
 80063fa:	f00d f817 	bl	801342c <strncmp>
 80063fe:	2800      	cmp	r0, #0
 8006400:	d115      	bne.n	800642e <setCommand+0xce>
				BOS.response = BOS_RESPONSE_ALL;
 8006402:	4b9e      	ldr	r3, [pc, #632]	; (800667c <setCommand+0x31c>)
 8006404:	2160      	movs	r1, #96	; 0x60
 8006406:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006408:	79db      	ldrb	r3, [r3, #7]
 800640a:	021b      	lsls	r3, r3, #8
 800640c:	4319      	orrs	r1, r3
 800640e:	308a      	adds	r0, #138	; 0x8a
 8006410:	0040      	lsls	r0, r0, #1
 8006412:	f001 f9e5 	bl	80077e0 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006416:	4b91      	ldr	r3, [pc, #580]	; (800665c <setCommand+0x2fc>)
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	2300      	movs	r3, #0
 800641c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800641e:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006420:	4b93      	ldr	r3, [pc, #588]	; (8006670 <setCommand+0x310>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4996      	ldr	r1, [pc, #600]	; (8006680 <setCommand+0x320>)
 8006426:	0028      	movs	r0, r5
 8006428:	f00c ffbc 	bl	80133a4 <sprintf>
	return pdFALSE;
 800642c:	e1a5      	b.n	800677a <setCommand+0x41a>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 800642e:	0032      	movs	r2, r6
 8006430:	4994      	ldr	r1, [pc, #592]	; (8006684 <setCommand+0x324>)
 8006432:	0020      	movs	r0, r4
 8006434:	f00c fffa 	bl	801342c <strncmp>
 8006438:	2800      	cmp	r0, #0
 800643a:	d10a      	bne.n	8006452 <setCommand+0xf2>
				BOS.response = BOS_RESPONSE_MSG;
 800643c:	4b8f      	ldr	r3, [pc, #572]	; (800667c <setCommand+0x31c>)
 800643e:	2120      	movs	r1, #32
 8006440:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006442:	79db      	ldrb	r3, [r3, #7]
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	4319      	orrs	r1, r3
 8006448:	308a      	adds	r0, #138	; 0x8a
 800644a:	0040      	lsls	r0, r0, #1
 800644c:	f001 f9c8 	bl	80077e0 <EE_WriteVariable>
 8006450:	e7e1      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006452:	0032      	movs	r2, r6
 8006454:	498c      	ldr	r1, [pc, #560]	; (8006688 <setCommand+0x328>)
 8006456:	0020      	movs	r0, r4
 8006458:	f00c ffe8 	bl	801342c <strncmp>
 800645c:	2800      	cmp	r0, #0
 800645e:	d10a      	bne.n	8006476 <setCommand+0x116>
				BOS.response = BOS_RESPONSE_CLI;
 8006460:	4b86      	ldr	r3, [pc, #536]	; (800667c <setCommand+0x31c>)
 8006462:	2140      	movs	r1, #64	; 0x40
 8006464:	7199      	strb	r1, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006466:	79db      	ldrb	r3, [r3, #7]
 8006468:	021b      	lsls	r3, r3, #8
 800646a:	4319      	orrs	r1, r3
 800646c:	308a      	adds	r0, #138	; 0x8a
 800646e:	0040      	lsls	r0, r0, #1
 8006470:	f001 f9b6 	bl	80077e0 <EE_WriteVariable>
 8006474:	e7cf      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006476:	0032      	movs	r2, r6
 8006478:	4984      	ldr	r1, [pc, #528]	; (800668c <setCommand+0x32c>)
 800647a:	0020      	movs	r0, r4
 800647c:	f00c ffd6 	bl	801342c <strncmp>
 8006480:	2800      	cmp	r0, #0
 8006482:	d000      	beq.n	8006486 <setCommand+0x126>
 8006484:	e2a7      	b.n	80069d6 <setCommand+0x676>
				BOS.response = BOS_RESPONSE_NONE;
 8006486:	4b7d      	ldr	r3, [pc, #500]	; (800667c <setCommand+0x31c>)
 8006488:	2200      	movs	r2, #0
 800648a:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 800648c:	79d9      	ldrb	r1, [r3, #7]
 800648e:	0209      	lsls	r1, r1, #8
 8006490:	308a      	adds	r0, #138	; 0x8a
 8006492:	0040      	lsls	r0, r0, #1
 8006494:	f001 f9a4 	bl	80077e0 <EE_WriteVariable>
 8006498:	e7bd      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800649a:	003a      	movs	r2, r7
 800649c:	497c      	ldr	r1, [pc, #496]	; (8006690 <setCommand+0x330>)
 800649e:	0030      	movs	r0, r6
 80064a0:	f00c ffc4 	bl	801342c <strncmp>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d14a      	bne.n	800653e <setCommand+0x1de>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80064a8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80064aa:	0032      	movs	r2, r6
 80064ac:	4972      	ldr	r1, [pc, #456]	; (8006678 <setCommand+0x318>)
 80064ae:	0020      	movs	r0, r4
 80064b0:	f00c ffbc 	bl	801342c <strncmp>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d10b      	bne.n	80064d0 <setCommand+0x170>
				BOS.trace =TRACE_BOTH;
 80064b8:	4b70      	ldr	r3, [pc, #448]	; (800667c <setCommand+0x31c>)
 80064ba:	2203      	movs	r2, #3
 80064bc:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 80064be:	799b      	ldrb	r3, [r3, #6]
 80064c0:	21c0      	movs	r1, #192	; 0xc0
 80064c2:	0089      	lsls	r1, r1, #2
 80064c4:	4319      	orrs	r1, r3
 80064c6:	308a      	adds	r0, #138	; 0x8a
 80064c8:	0040      	lsls	r0, r0, #1
 80064ca:	f001 f989 	bl	80077e0 <EE_WriteVariable>
 80064ce:	e7a2      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 80064d0:	0032      	movs	r2, r6
 80064d2:	496c      	ldr	r1, [pc, #432]	; (8006684 <setCommand+0x324>)
 80064d4:	0020      	movs	r0, r4
 80064d6:	f00c ffa9 	bl	801342c <strncmp>
 80064da:	2800      	cmp	r0, #0
 80064dc:	d10b      	bne.n	80064f6 <setCommand+0x196>
				BOS.trace =TRACE_MESSAGE;
 80064de:	4b67      	ldr	r3, [pc, #412]	; (800667c <setCommand+0x31c>)
 80064e0:	2201      	movs	r2, #1
 80064e2:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 80064e4:	799b      	ldrb	r3, [r3, #6]
 80064e6:	2180      	movs	r1, #128	; 0x80
 80064e8:	0049      	lsls	r1, r1, #1
 80064ea:	4319      	orrs	r1, r3
 80064ec:	308a      	adds	r0, #138	; 0x8a
 80064ee:	4090      	lsls	r0, r2
 80064f0:	f001 f976 	bl	80077e0 <EE_WriteVariable>
 80064f4:	e78f      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 80064f6:	0032      	movs	r2, r6
 80064f8:	495e      	ldr	r1, [pc, #376]	; (8006674 <setCommand+0x314>)
 80064fa:	0020      	movs	r0, r4
 80064fc:	f00c ff96 	bl	801342c <strncmp>
 8006500:	2800      	cmp	r0, #0
 8006502:	d10b      	bne.n	800651c <setCommand+0x1bc>
				BOS.trace =TRACE_RESPONSE;
 8006504:	4b5d      	ldr	r3, [pc, #372]	; (800667c <setCommand+0x31c>)
 8006506:	2202      	movs	r2, #2
 8006508:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 800650a:	799b      	ldrb	r3, [r3, #6]
 800650c:	2180      	movs	r1, #128	; 0x80
 800650e:	0089      	lsls	r1, r1, #2
 8006510:	4319      	orrs	r1, r3
 8006512:	308a      	adds	r0, #138	; 0x8a
 8006514:	0040      	lsls	r0, r0, #1
 8006516:	f001 f963 	bl	80077e0 <EE_WriteVariable>
 800651a:	e77c      	b.n	8006416 <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 800651c:	0032      	movs	r2, r6
 800651e:	495b      	ldr	r1, [pc, #364]	; (800668c <setCommand+0x32c>)
 8006520:	0020      	movs	r0, r4
 8006522:	f00c ff83 	bl	801342c <strncmp>
 8006526:	2800      	cmp	r0, #0
 8006528:	d000      	beq.n	800652c <setCommand+0x1cc>
 800652a:	e254      	b.n	80069d6 <setCommand+0x676>
				BOS.trace =TRACE_NONE;
 800652c:	4b53      	ldr	r3, [pc, #332]	; (800667c <setCommand+0x31c>)
 800652e:	2200      	movs	r2, #0
 8006530:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOS.trace << 8) | (uint16_t )BOS.response);
 8006532:	7999      	ldrb	r1, [r3, #6]
 8006534:	308a      	adds	r0, #138	; 0x8a
 8006536:	0040      	lsls	r0, r0, #1
 8006538:	f001 f952 	bl	80077e0 <EE_WriteVariable>
 800653c:	e76b      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800653e:	003a      	movs	r2, r7
 8006540:	4954      	ldr	r1, [pc, #336]	; (8006694 <setCommand+0x334>)
 8006542:	0030      	movs	r0, r6
 8006544:	f00c ff72 	bl	801342c <strncmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	d128      	bne.n	800659e <setCommand+0x23e>
			temp2 =atoi((const char* )pcParameterString2);
 800654c:	0020      	movs	r0, r4
 800654e:	f00c fa96 	bl	8012a7e <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006552:	23e1      	movs	r3, #225	; 0xe1
 8006554:	031b      	lsls	r3, r3, #12
 8006556:	4298      	cmp	r0, r3
 8006558:	d900      	bls.n	800655c <setCommand+0x1fc>
 800655a:	e23c      	b.n	80069d6 <setCommand+0x676>
				BOS.clibaudrate =temp2;
 800655c:	4c47      	ldr	r4, [pc, #284]	; (800667c <setCommand+0x31c>)
 800655e:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8006560:	b281      	uxth	r1, r0
 8006562:	208c      	movs	r0, #140	; 0x8c
 8006564:	0040      	lsls	r0, r0, #1
 8006566:	f001 f93b 	bl	80077e0 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800656a:	68a1      	ldr	r1, [r4, #8]
 800656c:	0c09      	lsrs	r1, r1, #16
 800656e:	201a      	movs	r0, #26
 8006570:	30ff      	adds	r0, #255	; 0xff
 8006572:	f001 f935 	bl	80077e0 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006576:	4b39      	ldr	r3, [pc, #228]	; (800665c <setCommand+0x2fc>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	2300      	movs	r3, #0
 800657c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800657e:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006580:	4b3b      	ldr	r3, [pc, #236]	; (8006670 <setCommand+0x310>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	493e      	ldr	r1, [pc, #248]	; (8006680 <setCommand+0x320>)
 8006586:	0028      	movs	r0, r5
 8006588:	f00c ff0c 	bl	80133a4 <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 800658c:	4942      	ldr	r1, [pc, #264]	; (8006698 <setCommand+0x338>)
 800658e:	0028      	movs	r0, r5
 8006590:	f00c ff28 	bl	80133e4 <strcat>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006594:	4941      	ldr	r1, [pc, #260]	; (800669c <setCommand+0x33c>)
 8006596:	0028      	movs	r0, r5
 8006598:	f00c ff24 	bl	80133e4 <strcat>
 800659c:	e0ed      	b.n	800677a <setCommand+0x41a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 800659e:	003a      	movs	r2, r7
 80065a0:	493f      	ldr	r1, [pc, #252]	; (80066a0 <setCommand+0x340>)
 80065a2:	0030      	movs	r0, r6
 80065a4:	f00c ff42 	bl	801342c <strncmp>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d10d      	bne.n	80065c8 <setCommand+0x268>
			temp16 =atoi((const char* )pcParameterString2);
 80065ac:	0020      	movs	r0, r4
 80065ae:	f00c fa66 	bl	8012a7e <atoi>
 80065b2:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80065b4:	2900      	cmp	r1, #0
 80065b6:	d100      	bne.n	80065ba <setCommand+0x25a>
 80065b8:	e20d      	b.n	80069d6 <setCommand+0x676>
				BOS.buttons.debounce =temp16;
 80065ba:	4b30      	ldr	r3, [pc, #192]	; (800667c <setCommand+0x31c>)
 80065bc:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80065be:	2016      	movs	r0, #22
 80065c0:	30ff      	adds	r0, #255	; 0xff
 80065c2:	f001 f90d 	bl	80077e0 <EE_WriteVariable>
 80065c6:	e726      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80065c8:	003a      	movs	r2, r7
 80065ca:	4936      	ldr	r1, [pc, #216]	; (80066a4 <setCommand+0x344>)
 80065cc:	0030      	movs	r0, r6
 80065ce:	f00c ff2d 	bl	801342c <strncmp>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d10d      	bne.n	80065f2 <setCommand+0x292>
			temp16 =atoi((const char* )pcParameterString2);
 80065d6:	0020      	movs	r0, r4
 80065d8:	f00c fa51 	bl	8012a7e <atoi>
 80065dc:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80065de:	2900      	cmp	r1, #0
 80065e0:	d100      	bne.n	80065e4 <setCommand+0x284>
 80065e2:	e1f8      	b.n	80069d6 <setCommand+0x676>
				BOS.buttons.singleClickTime =temp16;
 80065e4:	4b25      	ldr	r3, [pc, #148]	; (800667c <setCommand+0x31c>)
 80065e6:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80065e8:	208b      	movs	r0, #139	; 0x8b
 80065ea:	0040      	lsls	r0, r0, #1
 80065ec:	f001 f8f8 	bl	80077e0 <EE_WriteVariable>
 80065f0:	e711      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80065f2:	003a      	movs	r2, r7
 80065f4:	492c      	ldr	r1, [pc, #176]	; (80066a8 <setCommand+0x348>)
 80065f6:	0030      	movs	r0, r6
 80065f8:	f00c ff18 	bl	801342c <strncmp>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d112      	bne.n	8006626 <setCommand+0x2c6>
			temp16 =atoi((const char* )pcParameterString2);
 8006600:	0020      	movs	r0, r4
 8006602:	f00c fa3c 	bl	8012a7e <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006606:	1e43      	subs	r3, r0, #1
 8006608:	b29b      	uxth	r3, r3
 800660a:	2bfe      	cmp	r3, #254	; 0xfe
 800660c:	d900      	bls.n	8006610 <setCommand+0x2b0>
 800660e:	e1e2      	b.n	80069d6 <setCommand+0x676>
				BOS.buttons.minInterClickTime =temp16;
 8006610:	b2c0      	uxtb	r0, r0
 8006612:	4b1a      	ldr	r3, [pc, #104]	; (800667c <setCommand+0x31c>)
 8006614:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006616:	7959      	ldrb	r1, [r3, #5]
 8006618:	0209      	lsls	r1, r1, #8
 800661a:	4301      	orrs	r1, r0
 800661c:	2018      	movs	r0, #24
 800661e:	30ff      	adds	r0, #255	; 0xff
 8006620:	f001 f8de 	bl	80077e0 <EE_WriteVariable>
 8006624:	e6f7      	b.n	8006416 <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006626:	003a      	movs	r2, r7
 8006628:	4920      	ldr	r1, [pc, #128]	; (80066ac <setCommand+0x34c>)
 800662a:	0030      	movs	r0, r6
 800662c:	f00c fefe 	bl	801342c <strncmp>
 8006630:	2800      	cmp	r0, #0
 8006632:	d000      	beq.n	8006636 <setCommand+0x2d6>
 8006634:	e6c3      	b.n	80063be <setCommand+0x5e>
			temp16 =atoi((const char* )pcParameterString2);
 8006636:	0020      	movs	r0, r4
 8006638:	f00c fa21 	bl	8012a7e <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 800663c:	1e43      	subs	r3, r0, #1
 800663e:	b29b      	uxth	r3, r3
 8006640:	2bfe      	cmp	r3, #254	; 0xfe
 8006642:	d900      	bls.n	8006646 <setCommand+0x2e6>
 8006644:	e1c7      	b.n	80069d6 <setCommand+0x676>
				BOS.buttons.maxInterClickTime =temp16;
 8006646:	4b0d      	ldr	r3, [pc, #52]	; (800667c <setCommand+0x31c>)
 8006648:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 800664a:	0200      	lsls	r0, r0, #8
 800664c:	7919      	ldrb	r1, [r3, #4]
 800664e:	4301      	orrs	r1, r0
 8006650:	b289      	uxth	r1, r1
 8006652:	2018      	movs	r0, #24
 8006654:	30ff      	adds	r0, #255	; 0xff
 8006656:	f001 f8c3 	bl	80077e0 <EE_WriteVariable>
 800665a:	e6dc      	b.n	8006416 <setCommand+0xb6>
 800665c:	20001290 	.word	0x20001290
 8006660:	080186f4 	.word	0x080186f4
 8006664:	08018e20 	.word	0x08018e20
 8006668:	08018e30 	.word	0x08018e30
 800666c:	0801877c 	.word	0x0801877c
 8006670:	2000129c 	.word	0x2000129c
 8006674:	080186fc 	.word	0x080186fc
 8006678:	08017afc 	.word	0x08017afc
 800667c:	200069c4 	.word	0x200069c4
 8006680:	08018d28 	.word	0x08018d28
 8006684:	08018d1c 	.word	0x08018d1c
 8006688:	08018d24 	.word	0x08018d24
 800668c:	0801870c 	.word	0x0801870c
 8006690:	08018714 	.word	0x08018714
 8006694:	0801871c 	.word	0x0801871c
 8006698:	08018d3c 	.word	0x08018d3c
 800669c:	08018d6c 	.word	0x08018d6c
 80066a0:	08018728 	.word	0x08018728
 80066a4:	08018734 	.word	0x08018734
 80066a8:	08018744 	.word	0x08018744
 80066ac:	08018758 	.word	0x08018758
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80066b0:	aa0a      	add	r2, sp, #40	; 0x28
 80066b2:	2102      	movs	r1, #2
 80066b4:	0020      	movs	r0, r4
 80066b6:	f007 f8d1 	bl	800d85c <FreeRTOS_CLIGetParameter>
 80066ba:	4bca      	ldr	r3, [pc, #808]	; (80069e4 <setCommand+0x684>)
 80066bc:	4699      	mov	r9, r3
 80066be:	6018      	str	r0, [r3, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80066c0:	aa09      	add	r2, sp, #36	; 0x24
 80066c2:	2103      	movs	r1, #3
 80066c4:	0020      	movs	r0, r4
 80066c6:	f007 f8c9 	bl	800d85c <FreeRTOS_CLIGetParameter>
 80066ca:	4fc7      	ldr	r7, [pc, #796]	; (80069e8 <setCommand+0x688>)
 80066cc:	6038      	str	r0, [r7, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80066ce:	aa08      	add	r2, sp, #32
 80066d0:	2104      	movs	r1, #4
 80066d2:	0020      	movs	r0, r4
 80066d4:	f007 f8c2 	bl	800d85c <FreeRTOS_CLIGetParameter>
 80066d8:	4ec4      	ldr	r6, [pc, #784]	; (80069ec <setCommand+0x68c>)
 80066da:	6030      	str	r0, [r6, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80066dc:	aa07      	add	r2, sp, #28
 80066de:	2105      	movs	r1, #5
 80066e0:	0020      	movs	r0, r4
 80066e2:	f007 f8bb 	bl	800d85c <FreeRTOS_CLIGetParameter>
 80066e6:	4cc2      	ldr	r4, [pc, #776]	; (80069f0 <setCommand+0x690>)
 80066e8:	6020      	str	r0, [r4, #0]
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 80066ea:	464b      	mov	r3, r9
 80066ec:	6818      	ldr	r0, [r3, #0]
 80066ee:	f00c f9c6 	bl	8012a7e <atoi>
 80066f2:	b2c3      	uxtb	r3, r0
 80066f4:	4699      	mov	r9, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 80066f6:	6838      	ldr	r0, [r7, #0]
 80066f8:	f00c f9c1 	bl	8012a7e <atoi>
 80066fc:	b2c7      	uxtb	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 80066fe:	6830      	ldr	r0, [r6, #0]
 8006700:	f00c f9bd 	bl	8012a7e <atoi>
 8006704:	b2c6      	uxtb	r6, r0
		if(pcParameterString5 != NULL){
 8006706:	6824      	ldr	r4, [r4, #0]
 8006708:	2c00      	cmp	r4, #0
 800670a:	d010      	beq.n	800672e <setCommand+0x3ce>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 800670c:	2202      	movs	r2, #2
 800670e:	49b9      	ldr	r1, [pc, #740]	; (80069f4 <setCommand+0x694>)
 8006710:	0020      	movs	r0, r4
 8006712:	f00c fe8b 	bl	801342c <strncmp>
 8006716:	2800      	cmp	r0, #0
 8006718:	d035      	beq.n	8006786 <setCommand+0x426>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 800671a:	2202      	movs	r2, #2
 800671c:	49b6      	ldr	r1, [pc, #728]	; (80069f8 <setCommand+0x698>)
 800671e:	0020      	movs	r0, r4
 8006720:	f00c fe84 	bl	801342c <strncmp>
 8006724:	2800      	cmp	r0, #0
 8006726:	d000      	beq.n	800672a <setCommand+0x3ca>
 8006728:	e155      	b.n	80069d6 <setCommand+0x676>
				temp84 =RTC_PM;
 800672a:	2302      	movs	r3, #2
 800672c:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 800672e:	464b      	mov	r3, r9
 8006730:	2b17      	cmp	r3, #23
 8006732:	d900      	bls.n	8006736 <setCommand+0x3d6>
 8006734:	e14f      	b.n	80069d6 <setCommand+0x676>
 8006736:	2f3b      	cmp	r7, #59	; 0x3b
 8006738:	d900      	bls.n	800673c <setCommand+0x3dc>
 800673a:	e14c      	b.n	80069d6 <setCommand+0x676>
 800673c:	2e3b      	cmp	r6, #59	; 0x3b
 800673e:	d900      	bls.n	8006742 <setCommand+0x3e2>
 8006740:	e149      	b.n	80069d6 <setCommand+0x676>
				GetTimeDate();
 8006742:	f006 fba1 	bl	800ce88 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006746:	4cad      	ldr	r4, [pc, #692]	; (80069fc <setCommand+0x69c>)
 8006748:	7d23      	ldrb	r3, [r4, #20]
 800674a:	8b22      	ldrh	r2, [r4, #24]
 800674c:	7d61      	ldrb	r1, [r4, #21]
 800674e:	7da0      	ldrb	r0, [r4, #22]
 8006750:	7b24      	ldrb	r4, [r4, #12]
 8006752:	b264      	sxtb	r4, r4
 8006754:	9404      	str	r4, [sp, #16]
 8006756:	4644      	mov	r4, r8
 8006758:	9403      	str	r4, [sp, #12]
 800675a:	464c      	mov	r4, r9
 800675c:	9402      	str	r4, [sp, #8]
 800675e:	9701      	str	r7, [sp, #4]
 8006760:	9600      	str	r6, [sp, #0]
 8006762:	f006 fb37 	bl	800cdd4 <BOS_CalendarConfig>
 8006766:	0006      	movs	r6, r0
	if(result == BOS_OK){
 8006768:	2e00      	cmp	r6, #0
 800676a:	d100      	bne.n	800676e <setCommand+0x40e>
 800676c:	e653      	b.n	8006416 <setCommand+0xb6>
	else if(result == BOS_ERR_WrongParam)
 800676e:	2e67      	cmp	r6, #103	; 0x67
 8006770:	d100      	bne.n	8006774 <setCommand+0x414>
 8006772:	e624      	b.n	80063be <setCommand+0x5e>
	else if(result == BOS_ERR_WrongValue)
 8006774:	2e68      	cmp	r6, #104	; 0x68
 8006776:	d100      	bne.n	800677a <setCommand+0x41a>
 8006778:	e12d      	b.n	80069d6 <setCommand+0x676>
}
 800677a:	2000      	movs	r0, #0
 800677c:	b00d      	add	sp, #52	; 0x34
 800677e:	bc0c      	pop	{r2, r3}
 8006780:	4690      	mov	r8, r2
 8006782:	4699      	mov	r9, r3
 8006784:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp84 =RTC_AM;
 8006786:	2301      	movs	r3, #1
 8006788:	4698      	mov	r8, r3
 800678a:	e7d0      	b.n	800672e <setCommand+0x3ce>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800678c:	aa0a      	add	r2, sp, #40	; 0x28
 800678e:	2102      	movs	r1, #2
 8006790:	0020      	movs	r0, r4
 8006792:	f007 f863 	bl	800d85c <FreeRTOS_CLIGetParameter>
 8006796:	4e93      	ldr	r6, [pc, #588]	; (80069e4 <setCommand+0x684>)
 8006798:	6030      	str	r0, [r6, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800679a:	aa09      	add	r2, sp, #36	; 0x24
 800679c:	2103      	movs	r1, #3
 800679e:	0020      	movs	r0, r4
 80067a0:	f007 f85c 	bl	800d85c <FreeRTOS_CLIGetParameter>
 80067a4:	4b90      	ldr	r3, [pc, #576]	; (80069e8 <setCommand+0x688>)
 80067a6:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80067a8:	aa08      	add	r2, sp, #32
 80067aa:	2104      	movs	r1, #4
 80067ac:	0020      	movs	r0, r4
 80067ae:	f007 f855 	bl	800d85c <FreeRTOS_CLIGetParameter>
 80067b2:	4b8e      	ldr	r3, [pc, #568]	; (80069ec <setCommand+0x68c>)
 80067b4:	4698      	mov	r8, r3
 80067b6:	6018      	str	r0, [r3, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80067b8:	aa07      	add	r2, sp, #28
 80067ba:	2105      	movs	r1, #5
 80067bc:	0020      	movs	r0, r4
 80067be:	f007 f84d 	bl	800d85c <FreeRTOS_CLIGetParameter>
 80067c2:	4c8b      	ldr	r4, [pc, #556]	; (80069f0 <setCommand+0x690>)
 80067c4:	6020      	str	r0, [r4, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 80067c6:	4643      	mov	r3, r8
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	f00c f958 	bl	8012a7e <atoi>
 80067ce:	b2c3      	uxtb	r3, r0
 80067d0:	4698      	mov	r8, r3
		temp16 =atoi((const char* )pcParameterString5);		// year
 80067d2:	6820      	ldr	r0, [r4, #0]
 80067d4:	f00c f953 	bl	8012a7e <atoi>
 80067d8:	b283      	uxth	r3, r0
 80067da:	4699      	mov	r9, r3
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 80067dc:	6834      	ldr	r4, [r6, #0]
 80067de:	2206      	movs	r2, #6
 80067e0:	4987      	ldr	r1, [pc, #540]	; (8006a00 <setCommand+0x6a0>)
 80067e2:	0020      	movs	r0, r4
 80067e4:	f00c fe22 	bl	801342c <strncmp>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d100      	bne.n	80067ee <setCommand+0x48e>
 80067ec:	e195      	b.n	8006b1a <setCommand+0x7ba>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 80067ee:	2207      	movs	r2, #7
 80067f0:	4984      	ldr	r1, [pc, #528]	; (8006a04 <setCommand+0x6a4>)
 80067f2:	0020      	movs	r0, r4
 80067f4:	f00c fe1a 	bl	801342c <strncmp>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d100      	bne.n	80067fe <setCommand+0x49e>
 80067fc:	e19b      	b.n	8006b36 <setCommand+0x7d6>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 80067fe:	2209      	movs	r2, #9
 8006800:	4981      	ldr	r1, [pc, #516]	; (8006a08 <setCommand+0x6a8>)
 8006802:	0020      	movs	r0, r4
 8006804:	f00c fe12 	bl	801342c <strncmp>
 8006808:	2800      	cmp	r0, #0
 800680a:	d100      	bne.n	800680e <setCommand+0x4ae>
 800680c:	e195      	b.n	8006b3a <setCommand+0x7da>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 800680e:	2208      	movs	r2, #8
 8006810:	497e      	ldr	r1, [pc, #504]	; (8006a0c <setCommand+0x6ac>)
 8006812:	0020      	movs	r0, r4
 8006814:	f00c fe0a 	bl	801342c <strncmp>
 8006818:	2800      	cmp	r0, #0
 800681a:	d100      	bne.n	800681e <setCommand+0x4be>
 800681c:	e18f      	b.n	8006b3e <setCommand+0x7de>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 800681e:	2206      	movs	r2, #6
 8006820:	497b      	ldr	r1, [pc, #492]	; (8006a10 <setCommand+0x6b0>)
 8006822:	0020      	movs	r0, r4
 8006824:	f00c fe02 	bl	801342c <strncmp>
 8006828:	2800      	cmp	r0, #0
 800682a:	d100      	bne.n	800682e <setCommand+0x4ce>
 800682c:	e189      	b.n	8006b42 <setCommand+0x7e2>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 800682e:	2208      	movs	r2, #8
 8006830:	4978      	ldr	r1, [pc, #480]	; (8006a14 <setCommand+0x6b4>)
 8006832:	0020      	movs	r0, r4
 8006834:	f00c fdfa 	bl	801342c <strncmp>
 8006838:	2800      	cmp	r0, #0
 800683a:	d100      	bne.n	800683e <setCommand+0x4de>
 800683c:	e183      	b.n	8006b46 <setCommand+0x7e6>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 800683e:	2206      	movs	r2, #6
 8006840:	4975      	ldr	r1, [pc, #468]	; (8006a18 <setCommand+0x6b8>)
 8006842:	0020      	movs	r0, r4
 8006844:	f00c fdf2 	bl	801342c <strncmp>
 8006848:	2800      	cmp	r0, #0
 800684a:	d100      	bne.n	800684e <setCommand+0x4ee>
 800684c:	e17d      	b.n	8006b4a <setCommand+0x7ea>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 800684e:	4b66      	ldr	r3, [pc, #408]	; (80069e8 <setCommand+0x688>)
 8006850:	681c      	ldr	r4, [r3, #0]
 8006852:	2207      	movs	r2, #7
 8006854:	4971      	ldr	r1, [pc, #452]	; (8006a1c <setCommand+0x6bc>)
 8006856:	0020      	movs	r0, r4
 8006858:	f00c fde8 	bl	801342c <strncmp>
			result =BOS_ERR_WrongValue;
 800685c:	2668      	movs	r6, #104	; 0x68
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 800685e:	2800      	cmp	r0, #0
 8006860:	d101      	bne.n	8006866 <setCommand+0x506>
			result =BOS_ERR_WrongValue;
 8006862:	2668      	movs	r6, #104	; 0x68
 8006864:	e783      	b.n	800676e <setCommand+0x40e>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006866:	2202      	movs	r2, #2
 8006868:	496d      	ldr	r1, [pc, #436]	; (8006a20 <setCommand+0x6c0>)
 800686a:	0020      	movs	r0, r4
 800686c:	f00c fdde 	bl	801342c <strncmp>
 8006870:	2800      	cmp	r0, #0
 8006872:	d100      	bne.n	8006876 <setCommand+0x516>
 8006874:	e104      	b.n	8006a80 <setCommand+0x720>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006876:	2208      	movs	r2, #8
 8006878:	496a      	ldr	r1, [pc, #424]	; (8006a24 <setCommand+0x6c4>)
 800687a:	0020      	movs	r0, r4
 800687c:	f00c fdd6 	bl	801342c <strncmp>
 8006880:	2800      	cmp	r0, #0
 8006882:	d100      	bne.n	8006886 <setCommand+0x526>
 8006884:	e11f      	b.n	8006ac6 <setCommand+0x766>
 8006886:	2202      	movs	r2, #2
 8006888:	4967      	ldr	r1, [pc, #412]	; (8006a28 <setCommand+0x6c8>)
 800688a:	0020      	movs	r0, r4
 800688c:	f00c fdce 	bl	801342c <strncmp>
 8006890:	2800      	cmp	r0, #0
 8006892:	d100      	bne.n	8006896 <setCommand+0x536>
 8006894:	e119      	b.n	8006aca <setCommand+0x76a>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006896:	2205      	movs	r2, #5
 8006898:	4964      	ldr	r1, [pc, #400]	; (8006a2c <setCommand+0x6cc>)
 800689a:	0020      	movs	r0, r4
 800689c:	f00c fdc6 	bl	801342c <strncmp>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d100      	bne.n	80068a6 <setCommand+0x546>
 80068a4:	e113      	b.n	8006ace <setCommand+0x76e>
 80068a6:	2202      	movs	r2, #2
 80068a8:	4961      	ldr	r1, [pc, #388]	; (8006a30 <setCommand+0x6d0>)
 80068aa:	0020      	movs	r0, r4
 80068ac:	f00c fdbe 	bl	801342c <strncmp>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d100      	bne.n	80068b6 <setCommand+0x556>
 80068b4:	e10d      	b.n	8006ad2 <setCommand+0x772>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 80068b6:	2205      	movs	r2, #5
 80068b8:	495e      	ldr	r1, [pc, #376]	; (8006a34 <setCommand+0x6d4>)
 80068ba:	0020      	movs	r0, r4
 80068bc:	f00c fdb6 	bl	801342c <strncmp>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d100      	bne.n	80068c6 <setCommand+0x566>
 80068c4:	e107      	b.n	8006ad6 <setCommand+0x776>
 80068c6:	2202      	movs	r2, #2
 80068c8:	495b      	ldr	r1, [pc, #364]	; (8006a38 <setCommand+0x6d8>)
 80068ca:	0020      	movs	r0, r4
 80068cc:	f00c fdae 	bl	801342c <strncmp>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d100      	bne.n	80068d6 <setCommand+0x576>
 80068d4:	e101      	b.n	8006ada <setCommand+0x77a>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 80068d6:	2203      	movs	r2, #3
 80068d8:	4958      	ldr	r1, [pc, #352]	; (8006a3c <setCommand+0x6dc>)
 80068da:	0020      	movs	r0, r4
 80068dc:	f00c fda6 	bl	801342c <strncmp>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d100      	bne.n	80068e6 <setCommand+0x586>
 80068e4:	e0fb      	b.n	8006ade <setCommand+0x77e>
 80068e6:	2202      	movs	r2, #2
 80068e8:	4955      	ldr	r1, [pc, #340]	; (8006a40 <setCommand+0x6e0>)
 80068ea:	0020      	movs	r0, r4
 80068ec:	f00c fd9e 	bl	801342c <strncmp>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d100      	bne.n	80068f6 <setCommand+0x596>
 80068f4:	e0f5      	b.n	8006ae2 <setCommand+0x782>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 80068f6:	2204      	movs	r2, #4
 80068f8:	4952      	ldr	r1, [pc, #328]	; (8006a44 <setCommand+0x6e4>)
 80068fa:	0020      	movs	r0, r4
 80068fc:	f00c fd96 	bl	801342c <strncmp>
 8006900:	2800      	cmp	r0, #0
 8006902:	d100      	bne.n	8006906 <setCommand+0x5a6>
 8006904:	e0ef      	b.n	8006ae6 <setCommand+0x786>
 8006906:	2202      	movs	r2, #2
 8006908:	494f      	ldr	r1, [pc, #316]	; (8006a48 <setCommand+0x6e8>)
 800690a:	0020      	movs	r0, r4
 800690c:	f00c fd8e 	bl	801342c <strncmp>
 8006910:	2800      	cmp	r0, #0
 8006912:	d100      	bne.n	8006916 <setCommand+0x5b6>
 8006914:	e0e9      	b.n	8006aea <setCommand+0x78a>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006916:	2204      	movs	r2, #4
 8006918:	494c      	ldr	r1, [pc, #304]	; (8006a4c <setCommand+0x6ec>)
 800691a:	0020      	movs	r0, r4
 800691c:	f00c fd86 	bl	801342c <strncmp>
 8006920:	2800      	cmp	r0, #0
 8006922:	d100      	bne.n	8006926 <setCommand+0x5c6>
 8006924:	e0e3      	b.n	8006aee <setCommand+0x78e>
 8006926:	2202      	movs	r2, #2
 8006928:	4949      	ldr	r1, [pc, #292]	; (8006a50 <setCommand+0x6f0>)
 800692a:	0020      	movs	r0, r4
 800692c:	f00c fd7e 	bl	801342c <strncmp>
 8006930:	2800      	cmp	r0, #0
 8006932:	d100      	bne.n	8006936 <setCommand+0x5d6>
 8006934:	e0dd      	b.n	8006af2 <setCommand+0x792>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 8006936:	2205      	movs	r2, #5
 8006938:	4946      	ldr	r1, [pc, #280]	; (8006a54 <setCommand+0x6f4>)
 800693a:	0020      	movs	r0, r4
 800693c:	f00c fd76 	bl	801342c <strncmp>
 8006940:	2800      	cmp	r0, #0
 8006942:	d100      	bne.n	8006946 <setCommand+0x5e6>
 8006944:	e0d7      	b.n	8006af6 <setCommand+0x796>
 8006946:	2202      	movs	r2, #2
 8006948:	4943      	ldr	r1, [pc, #268]	; (8006a58 <setCommand+0x6f8>)
 800694a:	0020      	movs	r0, r4
 800694c:	f00c fd6e 	bl	801342c <strncmp>
 8006950:	2800      	cmp	r0, #0
 8006952:	d100      	bne.n	8006956 <setCommand+0x5f6>
 8006954:	e0d1      	b.n	8006afa <setCommand+0x79a>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006956:	2209      	movs	r2, #9
 8006958:	4940      	ldr	r1, [pc, #256]	; (8006a5c <setCommand+0x6fc>)
 800695a:	0020      	movs	r0, r4
 800695c:	f00c fd66 	bl	801342c <strncmp>
 8006960:	2800      	cmp	r0, #0
 8006962:	d100      	bne.n	8006966 <setCommand+0x606>
 8006964:	e0cb      	b.n	8006afe <setCommand+0x79e>
 8006966:	2202      	movs	r2, #2
 8006968:	493d      	ldr	r1, [pc, #244]	; (8006a60 <setCommand+0x700>)
 800696a:	0020      	movs	r0, r4
 800696c:	f00c fd5e 	bl	801342c <strncmp>
 8006970:	2800      	cmp	r0, #0
 8006972:	d100      	bne.n	8006976 <setCommand+0x616>
 8006974:	e0c5      	b.n	8006b02 <setCommand+0x7a2>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006976:	2207      	movs	r2, #7
 8006978:	493a      	ldr	r1, [pc, #232]	; (8006a64 <setCommand+0x704>)
 800697a:	0020      	movs	r0, r4
 800697c:	f00c fd56 	bl	801342c <strncmp>
 8006980:	2800      	cmp	r0, #0
 8006982:	d100      	bne.n	8006986 <setCommand+0x626>
 8006984:	e0bf      	b.n	8006b06 <setCommand+0x7a6>
 8006986:	2202      	movs	r2, #2
 8006988:	4937      	ldr	r1, [pc, #220]	; (8006a68 <setCommand+0x708>)
 800698a:	0020      	movs	r0, r4
 800698c:	f00c fd4e 	bl	801342c <strncmp>
 8006990:	2800      	cmp	r0, #0
 8006992:	d100      	bne.n	8006996 <setCommand+0x636>
 8006994:	e0b9      	b.n	8006b0a <setCommand+0x7aa>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006996:	2208      	movs	r2, #8
 8006998:	4934      	ldr	r1, [pc, #208]	; (8006a6c <setCommand+0x70c>)
 800699a:	0020      	movs	r0, r4
 800699c:	f00c fd46 	bl	801342c <strncmp>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d100      	bne.n	80069a6 <setCommand+0x646>
 80069a4:	e0b3      	b.n	8006b0e <setCommand+0x7ae>
 80069a6:	2202      	movs	r2, #2
 80069a8:	4931      	ldr	r1, [pc, #196]	; (8006a70 <setCommand+0x710>)
 80069aa:	0020      	movs	r0, r4
 80069ac:	f00c fd3e 	bl	801342c <strncmp>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d100      	bne.n	80069b6 <setCommand+0x656>
 80069b4:	e0ad      	b.n	8006b12 <setCommand+0x7b2>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 80069b6:	2208      	movs	r2, #8
 80069b8:	492e      	ldr	r1, [pc, #184]	; (8006a74 <setCommand+0x714>)
 80069ba:	0020      	movs	r0, r4
 80069bc:	f00c fd36 	bl	801342c <strncmp>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d100      	bne.n	80069c6 <setCommand+0x666>
 80069c4:	e0a7      	b.n	8006b16 <setCommand+0x7b6>
 80069c6:	2202      	movs	r2, #2
 80069c8:	492b      	ldr	r1, [pc, #172]	; (8006a78 <setCommand+0x718>)
 80069ca:	0020      	movs	r0, r4
 80069cc:	f00c fd2e 	bl	801342c <strncmp>
			temp82 =DECEMBER;
 80069d0:	240c      	movs	r4, #12
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d055      	beq.n	8006a82 <setCommand+0x722>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80069d6:	220f      	movs	r2, #15
 80069d8:	4928      	ldr	r1, [pc, #160]	; (8006a7c <setCommand+0x71c>)
 80069da:	0028      	movs	r0, r5
 80069dc:	f00c fadf 	bl	8012f9e <memcpy>
 80069e0:	e6cb      	b.n	800677a <setCommand+0x41a>
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	2000129c 	.word	0x2000129c
 80069e8:	200012a4 	.word	0x200012a4
 80069ec:	200012a8 	.word	0x200012a8
 80069f0:	200012ac 	.word	0x200012ac
 80069f4:	08018e28 	.word	0x08018e28
 80069f8:	08018e2c 	.word	0x08018e2c
 80069fc:	200069c4 	.word	0x200069c4
 8006a00:	08018e38 	.word	0x08018e38
 8006a04:	08018e40 	.word	0x08018e40
 8006a08:	08018e48 	.word	0x08018e48
 8006a0c:	08018e54 	.word	0x08018e54
 8006a10:	08018e60 	.word	0x08018e60
 8006a14:	08018e68 	.word	0x08018e68
 8006a18:	08018e74 	.word	0x08018e74
 8006a1c:	08018f10 	.word	0x08018f10
 8006a20:	08018e7c 	.word	0x08018e7c
 8006a24:	08018e80 	.word	0x08018e80
 8006a28:	08018e8c 	.word	0x08018e8c
 8006a2c:	08018e90 	.word	0x08018e90
 8006a30:	08018e98 	.word	0x08018e98
 8006a34:	08018e9c 	.word	0x08018e9c
 8006a38:	08018ea4 	.word	0x08018ea4
 8006a3c:	08018ea8 	.word	0x08018ea8
 8006a40:	08018eac 	.word	0x08018eac
 8006a44:	08018eb0 	.word	0x08018eb0
 8006a48:	08018eb8 	.word	0x08018eb8
 8006a4c:	08018ebc 	.word	0x08018ebc
 8006a50:	08018ec4 	.word	0x08018ec4
 8006a54:	08018ec8 	.word	0x08018ec8
 8006a58:	08018ed0 	.word	0x08018ed0
 8006a5c:	08018ed4 	.word	0x08018ed4
 8006a60:	08018ee0 	.word	0x08018ee0
 8006a64:	08018ee4 	.word	0x08018ee4
 8006a68:	08018eec 	.word	0x08018eec
 8006a6c:	08018ef0 	.word	0x08018ef0
 8006a70:	08018efc 	.word	0x08018efc
 8006a74:	08018f00 	.word	0x08018f00
 8006a78:	08018f0c 	.word	0x08018f0c
 8006a7c:	080185e8 	.word	0x080185e8
			temp82 =JANUARY;
 8006a80:	2401      	movs	r4, #1
		if(result == BOS_OK){
 8006a82:	2e00      	cmp	r6, #0
 8006a84:	d000      	beq.n	8006a88 <setCommand+0x728>
 8006a86:	e672      	b.n	800676e <setCommand+0x40e>
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006a88:	4643      	mov	r3, r8
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	2b1e      	cmp	r3, #30
 8006a8e:	d8a2      	bhi.n	80069d6 <setCommand+0x676>
 8006a90:	4b2f      	ldr	r3, [pc, #188]	; (8006b50 <setCommand+0x7f0>)
 8006a92:	444b      	add	r3, r9
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b64      	cmp	r3, #100	; 0x64
 8006a98:	d89d      	bhi.n	80069d6 <setCommand+0x676>
				GetTimeDate();
 8006a9a:	f006 f9f5 	bl	800ce88 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 8006a9e:	4b2d      	ldr	r3, [pc, #180]	; (8006b54 <setCommand+0x7f4>)
 8006aa0:	220c      	movs	r2, #12
 8006aa2:	569a      	ldrsb	r2, [r3, r2]
 8006aa4:	9204      	str	r2, [sp, #16]
 8006aa6:	7cda      	ldrb	r2, [r3, #19]
 8006aa8:	9203      	str	r2, [sp, #12]
 8006aaa:	7c9a      	ldrb	r2, [r3, #18]
 8006aac:	9202      	str	r2, [sp, #8]
 8006aae:	7c5a      	ldrb	r2, [r3, #17]
 8006ab0:	9201      	str	r2, [sp, #4]
 8006ab2:	7c1b      	ldrb	r3, [r3, #16]
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	003b      	movs	r3, r7
 8006ab8:	464a      	mov	r2, r9
 8006aba:	4641      	mov	r1, r8
 8006abc:	0020      	movs	r0, r4
 8006abe:	f006 f989 	bl	800cdd4 <BOS_CalendarConfig>
 8006ac2:	0006      	movs	r6, r0
 8006ac4:	e650      	b.n	8006768 <setCommand+0x408>
			temp82 =FEBRUARY;
 8006ac6:	2402      	movs	r4, #2
 8006ac8:	e7db      	b.n	8006a82 <setCommand+0x722>
 8006aca:	2402      	movs	r4, #2
 8006acc:	e7d9      	b.n	8006a82 <setCommand+0x722>
			temp82 =MARCH;
 8006ace:	2403      	movs	r4, #3
 8006ad0:	e7d7      	b.n	8006a82 <setCommand+0x722>
 8006ad2:	2403      	movs	r4, #3
 8006ad4:	e7d5      	b.n	8006a82 <setCommand+0x722>
			temp82 =APRIL;
 8006ad6:	2404      	movs	r4, #4
 8006ad8:	e7d3      	b.n	8006a82 <setCommand+0x722>
 8006ada:	2404      	movs	r4, #4
 8006adc:	e7d1      	b.n	8006a82 <setCommand+0x722>
			temp82 =MAY;
 8006ade:	2405      	movs	r4, #5
 8006ae0:	e7cf      	b.n	8006a82 <setCommand+0x722>
 8006ae2:	2405      	movs	r4, #5
 8006ae4:	e7cd      	b.n	8006a82 <setCommand+0x722>
			temp82 =JUNE;
 8006ae6:	2406      	movs	r4, #6
 8006ae8:	e7cb      	b.n	8006a82 <setCommand+0x722>
 8006aea:	2406      	movs	r4, #6
 8006aec:	e7c9      	b.n	8006a82 <setCommand+0x722>
			temp82 =JULY;
 8006aee:	2407      	movs	r4, #7
 8006af0:	e7c7      	b.n	8006a82 <setCommand+0x722>
 8006af2:	2407      	movs	r4, #7
 8006af4:	e7c5      	b.n	8006a82 <setCommand+0x722>
			temp82 =AUGUST;
 8006af6:	2408      	movs	r4, #8
 8006af8:	e7c3      	b.n	8006a82 <setCommand+0x722>
 8006afa:	2408      	movs	r4, #8
 8006afc:	e7c1      	b.n	8006a82 <setCommand+0x722>
			temp82 =SEPTEMBER;
 8006afe:	2409      	movs	r4, #9
 8006b00:	e7bf      	b.n	8006a82 <setCommand+0x722>
 8006b02:	2409      	movs	r4, #9
 8006b04:	e7bd      	b.n	8006a82 <setCommand+0x722>
			temp82 =OCTOBER;
 8006b06:	240a      	movs	r4, #10
 8006b08:	e7bb      	b.n	8006a82 <setCommand+0x722>
 8006b0a:	240a      	movs	r4, #10
 8006b0c:	e7b9      	b.n	8006a82 <setCommand+0x722>
			temp82 =NOVEMBER;
 8006b0e:	240b      	movs	r4, #11
 8006b10:	e7b7      	b.n	8006a82 <setCommand+0x722>
 8006b12:	240b      	movs	r4, #11
 8006b14:	e7b5      	b.n	8006a82 <setCommand+0x722>
			temp82 =DECEMBER;
 8006b16:	240c      	movs	r4, #12
 8006b18:	e7b3      	b.n	8006a82 <setCommand+0x722>
			temp81 =MONDAY;
 8006b1a:	2701      	movs	r7, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006b1c:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <setCommand+0x7f8>)
 8006b1e:	681c      	ldr	r4, [r3, #0]
 8006b20:	2207      	movs	r2, #7
 8006b22:	490e      	ldr	r1, [pc, #56]	; (8006b5c <setCommand+0x7fc>)
 8006b24:	0020      	movs	r0, r4
 8006b26:	f00c fc81 	bl	801342c <strncmp>
 8006b2a:	2600      	movs	r6, #0
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d000      	beq.n	8006b32 <setCommand+0x7d2>
 8006b30:	e699      	b.n	8006866 <setCommand+0x506>
			temp82 =JANUARY;
 8006b32:	2401      	movs	r4, #1
 8006b34:	e7a8      	b.n	8006a88 <setCommand+0x728>
			temp81 =TUESDAY;
 8006b36:	2702      	movs	r7, #2
 8006b38:	e7f0      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =WEDNESDAY;
 8006b3a:	2703      	movs	r7, #3
 8006b3c:	e7ee      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =THURSDAY;
 8006b3e:	2704      	movs	r7, #4
 8006b40:	e7ec      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =FRIDAY;
 8006b42:	2705      	movs	r7, #5
 8006b44:	e7ea      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =SATURDAY;
 8006b46:	2706      	movs	r7, #6
 8006b48:	e7e8      	b.n	8006b1c <setCommand+0x7bc>
			temp81 =SUNDAY;
 8006b4a:	2707      	movs	r7, #7
 8006b4c:	e7e6      	b.n	8006b1c <setCommand+0x7bc>
 8006b4e:	46c0      	nop			; (mov r8, r8)
 8006b50:	fffff830 	.word	0xfffff830
 8006b54:	200069c4 	.word	0x200069c4
 8006b58:	200012a4 	.word	0x200012a4
 8006b5c:	08018f10 	.word	0x08018f10

08006b60 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b60:	b530      	push	{r4, r5, lr}
 8006b62:	b083      	sub	sp, #12
 8006b64:	0005      	movs	r5, r0
 8006b66:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006b6c:	2d00      	cmp	r5, #0
 8006b6e:	d101      	bne.n	8006b74 <removebuttonCommand+0x14>
 8006b70:	b672      	cpsid	i
 8006b72:	e7fe      	b.n	8006b72 <removebuttonCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b74:	aa01      	add	r2, sp, #4
 8006b76:	2101      	movs	r1, #1
 8006b78:	f006 fe70 	bl	800d85c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006b80:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006b82:	2b70      	cmp	r3, #112	; 0x70
 8006b84:	d007      	beq.n	8006b96 <removebuttonCommand+0x36>
	result =RemovePortButton(port);
 8006b86:	0020      	movs	r0, r4
 8006b88:	f001 fba2 	bl	80082d0 <RemovePortButton>
	if(result == BOS_OK){
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d007      	beq.n	8006ba0 <removebuttonCommand+0x40>
}
 8006b90:	2000      	movs	r0, #0
 8006b92:	b003      	add	sp, #12
 8006b94:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006b96:	3001      	adds	r0, #1
 8006b98:	f00b ff77 	bl	8012a8a <atol>
 8006b9c:	b2c4      	uxtb	r4, r0
 8006b9e:	e7f2      	b.n	8006b86 <removebuttonCommand+0x26>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006ba0:	0023      	movs	r3, r4
 8006ba2:	0022      	movs	r2, r4
 8006ba4:	4902      	ldr	r1, [pc, #8]	; (8006bb0 <removebuttonCommand+0x50>)
 8006ba6:	0028      	movs	r0, r5
 8006ba8:	f00c fbfc 	bl	80133a4 <sprintf>
 8006bac:	e7f0      	b.n	8006b90 <removebuttonCommand+0x30>
 8006bae:	46c0      	nop			; (mov r8, r8)
 8006bb0:	08018bcc 	.word	0x08018bcc

08006bb4 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	0006      	movs	r6, r0
 8006bba:	9203      	str	r2, [sp, #12]
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	9305      	str	r3, [sp, #20]
 8006bc0:	9304      	str	r3, [sp, #16]
	configASSERT(pcWriteBuffer);
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	d101      	bne.n	8006bca <addbuttonCommand+0x16>
 8006bc6:	b672      	cpsid	i
 8006bc8:	e7fe      	b.n	8006bc8 <addbuttonCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006bca:	aa05      	add	r2, sp, #20
 8006bcc:	2101      	movs	r1, #1
 8006bce:	9803      	ldr	r0, [sp, #12]
 8006bd0:	f006 fe44 	bl	800d85c <FreeRTOS_CLIGetParameter>
 8006bd4:	0004      	movs	r4, r0
 8006bd6:	4b23      	ldr	r3, [pc, #140]	; (8006c64 <addbuttonCommand+0xb0>)
 8006bd8:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006bda:	9d05      	ldr	r5, [sp, #20]
 8006bdc:	002a      	movs	r2, r5
 8006bde:	4922      	ldr	r1, [pc, #136]	; (8006c68 <addbuttonCommand+0xb4>)
 8006be0:	f00c fc24 	bl	801342c <strncmp>
		type =MOMENTARY_NO;
 8006be4:	2701      	movs	r7, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d017      	beq.n	8006c1a <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006bea:	002a      	movs	r2, r5
 8006bec:	491f      	ldr	r1, [pc, #124]	; (8006c6c <addbuttonCommand+0xb8>)
 8006bee:	0020      	movs	r0, r4
 8006bf0:	f00c fc1c 	bl	801342c <strncmp>
		type =MOMENTARY_NC;
 8006bf4:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d00f      	beq.n	8006c1a <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006bfa:	002a      	movs	r2, r5
 8006bfc:	491c      	ldr	r1, [pc, #112]	; (8006c70 <addbuttonCommand+0xbc>)
 8006bfe:	0020      	movs	r0, r4
 8006c00:	f00c fc14 	bl	801342c <strncmp>
		type =ONOFF_NO;
 8006c04:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d007      	beq.n	8006c1a <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006c0a:	002a      	movs	r2, r5
 8006c0c:	4919      	ldr	r1, [pc, #100]	; (8006c74 <addbuttonCommand+0xc0>)
 8006c0e:	0020      	movs	r0, r4
 8006c10:	f00c fc0c 	bl	801342c <strncmp>
		type =ONOFF_NC;
 8006c14:	4243      	negs	r3, r0
 8006c16:	4158      	adcs	r0, r3
 8006c18:	0087      	lsls	r7, r0, #2
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006c1a:	aa04      	add	r2, sp, #16
 8006c1c:	2102      	movs	r1, #2
 8006c1e:	9803      	ldr	r0, [sp, #12]
 8006c20:	f006 fe1c 	bl	800d85c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006c24:	2300      	movs	r3, #0
 8006c26:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006c28:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006c2a:	2b70      	cmp	r3, #112	; 0x70
 8006c2c:	d008      	beq.n	8006c40 <addbuttonCommand+0x8c>
	result =AddPortButton(type,port);
 8006c2e:	0021      	movs	r1, r4
 8006c30:	0038      	movs	r0, r7
 8006c32:	f001 fabb 	bl	80081ac <AddPortButton>
	if(result == BOS_OK){
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d007      	beq.n	8006c4a <addbuttonCommand+0x96>
}
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	b007      	add	sp, #28
 8006c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006c40:	3001      	adds	r0, #1
 8006c42:	f00b ff22 	bl	8012a8a <atol>
 8006c46:	b2c4      	uxtb	r4, r0
 8006c48:	e7f1      	b.n	8006c2e <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006c4a:	4b06      	ldr	r3, [pc, #24]	; (8006c64 <addbuttonCommand+0xb0>)
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	9905      	ldr	r1, [sp, #20]
 8006c52:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006c54:	9400      	str	r4, [sp, #0]
 8006c56:	0023      	movs	r3, r4
 8006c58:	4907      	ldr	r1, [pc, #28]	; (8006c78 <addbuttonCommand+0xc4>)
 8006c5a:	0030      	movs	r0, r6
 8006c5c:	f00c fba2 	bl	80133a4 <sprintf>
 8006c60:	e7eb      	b.n	8006c3a <addbuttonCommand+0x86>
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	2000128c 	.word	0x2000128c
 8006c68:	0801848c 	.word	0x0801848c
 8006c6c:	0801849c 	.word	0x0801849c
 8006c70:	080184ac 	.word	0x080184ac
 8006c74:	080184b8 	.word	0x080184b8
 8006c78:	080184c4 	.word	0x080184c4

08006c7c <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c7e:	46de      	mov	lr, fp
 8006c80:	4657      	mov	r7, sl
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b09b      	sub	sp, #108	; 0x6c
 8006c86:	0005      	movs	r5, r0
 8006c88:	9009      	str	r0, [sp, #36]	; 0x24
 8006c8a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	9319      	str	r3, [sp, #100]	; 0x64
 8006c90:	9318      	str	r3, [sp, #96]	; 0x60
 8006c92:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006c94:	9316      	str	r3, [sp, #88]	; 0x58
 8006c96:	9315      	str	r3, [sp, #84]	; 0x54
 8006c98:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 =0;
 8006c9a:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006c9c:	220a      	movs	r2, #10
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	a810      	add	r0, sp, #64	; 0x40
 8006ca2:	f00c f985 	bl	8012fb0 <memset>
 8006ca6:	220a      	movs	r2, #10
 8006ca8:	2100      	movs	r1, #0
 8006caa:	a80d      	add	r0, sp, #52	; 0x34
 8006cac:	f00c f980 	bl	8012fb0 <memset>
 8006cb0:	220a      	movs	r2, #10
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	a80a      	add	r0, sp, #40	; 0x28
 8006cb6:	f00c f97b 	bl	8012fb0 <memset>
	configASSERT(pcWriteBuffer);
 8006cba:	2d00      	cmp	r5, #0
 8006cbc:	d101      	bne.n	8006cc2 <scastCommand+0x46>
 8006cbe:	b672      	cpsid	i
 8006cc0:	e7fe      	b.n	8006cc0 <scastCommand+0x44>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006cc2:	aa19      	add	r2, sp, #100	; 0x64
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	0020      	movs	r0, r4
 8006cc8:	f006 fdc8 	bl	800d85c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006ccc:	2300      	movs	r3, #0
 8006cce:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	9208      	str	r2, [sp, #32]
	if(pcParameterString1[0] == 'P'){
 8006cd4:	2b50      	cmp	r3, #80	; 0x50
 8006cd6:	d100      	bne.n	8006cda <scastCommand+0x5e>
 8006cd8:	e06d      	b.n	8006db6 <scastCommand+0x13a>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006cda:	aa18      	add	r2, sp, #96	; 0x60
 8006cdc:	2102      	movs	r1, #2
 8006cde:	0020      	movs	r0, r4
 8006ce0:	f006 fdbc 	bl	800d85c <FreeRTOS_CLIGetParameter>
 8006ce4:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006ce6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006ce8:	a810      	add	r0, sp, #64	; 0x40
 8006cea:	f00c fbb0 	bl	801344e <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006cee:	a810      	add	r0, sp, #64	; 0x40
 8006cf0:	f7fd fa52 	bl	8004198 <GetID>
 8006cf4:	b2c3      	uxtb	r3, r0
 8006cf6:	469a      	mov	sl, r3
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006cf8:	aa17      	add	r2, sp, #92	; 0x5c
 8006cfa:	2103      	movs	r1, #3
 8006cfc:	0020      	movs	r0, r4
 8006cfe:	f006 fdad 	bl	800d85c <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006d02:	2300      	movs	r3, #0
 8006d04:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d06:	2700      	movs	r7, #0
	if(pcParameterString3[0] == 'p'){
 8006d08:	2b70      	cmp	r3, #112	; 0x70
 8006d0a:	d05a      	beq.n	8006dc2 <scastCommand+0x146>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006d0c:	aa16      	add	r2, sp, #88	; 0x58
 8006d0e:	2104      	movs	r1, #4
 8006d10:	0020      	movs	r0, r4
 8006d12:	f006 fda3 	bl	800d85c <FreeRTOS_CLIGetParameter>
 8006d16:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006d18:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d1a:	a80d      	add	r0, sp, #52	; 0x34
 8006d1c:	f00c fb97 	bl	801344e <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006d20:	a80d      	add	r0, sp, #52	; 0x34
 8006d22:	f7fd fa39 	bl	8004198 <GetID>
 8006d26:	b2c3      	uxtb	r3, r0
 8006d28:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d2a:	aa15      	add	r2, sp, #84	; 0x54
 8006d2c:	2105      	movs	r1, #5
 8006d2e:	0020      	movs	r0, r4
 8006d30:	f006 fd94 	bl	800d85c <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d34:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006d36:	0032      	movs	r2, r6
 8006d38:	492b      	ldr	r1, [pc, #172]	; (8006de8 <scastCommand+0x16c>)
 8006d3a:	9007      	str	r0, [sp, #28]
 8006d3c:	f00c fb76 	bl	801342c <strncmp>
		direction =FORWARD;
 8006d40:	2500      	movs	r5, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d00f      	beq.n	8006d66 <scastCommand+0xea>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006d46:	0032      	movs	r2, r6
 8006d48:	4928      	ldr	r1, [pc, #160]	; (8006dec <scastCommand+0x170>)
 8006d4a:	9807      	ldr	r0, [sp, #28]
 8006d4c:	f00c fb6e 	bl	801342c <strncmp>
		direction =BACKWARD;
 8006d50:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d007      	beq.n	8006d66 <scastCommand+0xea>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006d56:	0032      	movs	r2, r6
 8006d58:	4925      	ldr	r1, [pc, #148]	; (8006df0 <scastCommand+0x174>)
 8006d5a:	9807      	ldr	r0, [sp, #28]
 8006d5c:	f00c fb66 	bl	801342c <strncmp>
		direction =BIDIRECTIONAL;
 8006d60:	4243      	negs	r3, r0
 8006d62:	4158      	adcs	r0, r3
 8006d64:	0045      	lsls	r5, r0, #1
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006d66:	0032      	movs	r2, r6
 8006d68:	9907      	ldr	r1, [sp, #28]
 8006d6a:	a80a      	add	r0, sp, #40	; 0x28
 8006d6c:	f00c fb6f 	bl	801344e <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006d70:	aa14      	add	r2, sp, #80	; 0x50
 8006d72:	2106      	movs	r1, #6
 8006d74:	0020      	movs	r0, r4
 8006d76:	f006 fd71 	bl	800d85c <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006d7a:	f00b fe86 	bl	8012a8a <atol>
 8006d7e:	0006      	movs	r6, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006d80:	aa13      	add	r2, sp, #76	; 0x4c
 8006d82:	2107      	movs	r1, #7
 8006d84:	0020      	movs	r0, r4
 8006d86:	f006 fd69 	bl	800d85c <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006d8a:	f00b fe7e 	bl	8012a8a <atol>
 8006d8e:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006d90:	2300      	movs	r3, #0
 8006d92:	9303      	str	r3, [sp, #12]
 8006d94:	9002      	str	r0, [sp, #8]
 8006d96:	9601      	str	r6, [sp, #4]
 8006d98:	9500      	str	r5, [sp, #0]
 8006d9a:	465b      	mov	r3, fp
 8006d9c:	003a      	movs	r2, r7
 8006d9e:	4651      	mov	r1, sl
 8006da0:	9808      	ldr	r0, [sp, #32]
 8006da2:	f002 fcb5 	bl	8009710 <StartScastDMAStream>
	if(result == BOS_OK){
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d010      	beq.n	8006dcc <scastCommand+0x150>
}
 8006daa:	2000      	movs	r0, #0
 8006dac:	b01b      	add	sp, #108	; 0x6c
 8006dae:	bc0c      	pop	{r2, r3}
 8006db0:	4692      	mov	sl, r2
 8006db2:	469b      	mov	fp, r3
 8006db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006db6:	3001      	adds	r0, #1
 8006db8:	f00b fe67 	bl	8012a8a <atol>
 8006dbc:	b2c3      	uxtb	r3, r0
 8006dbe:	9308      	str	r3, [sp, #32]
 8006dc0:	e78b      	b.n	8006cda <scastCommand+0x5e>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	f00b fe61 	bl	8012a8a <atol>
 8006dc8:	b2c7      	uxtb	r7, r0
 8006dca:	e79f      	b.n	8006d0c <scastCommand+0x90>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006dcc:	9404      	str	r4, [sp, #16]
 8006dce:	9603      	str	r6, [sp, #12]
 8006dd0:	ab0d      	add	r3, sp, #52	; 0x34
 8006dd2:	9302      	str	r3, [sp, #8]
 8006dd4:	9701      	str	r7, [sp, #4]
 8006dd6:	ab10      	add	r3, sp, #64	; 0x40
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	9b08      	ldr	r3, [sp, #32]
 8006ddc:	aa0a      	add	r2, sp, #40	; 0x28
 8006dde:	4905      	ldr	r1, [pc, #20]	; (8006df4 <scastCommand+0x178>)
 8006de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006de2:	f00c fadf 	bl	80133a4 <sprintf>
 8006de6:	e7e0      	b.n	8006daa <scastCommand+0x12e>
 8006de8:	08018c14 	.word	0x08018c14
 8006dec:	08018c1c 	.word	0x08018c1c
 8006df0:	08018c28 	.word	0x08018c28
 8006df4:	08018c38 	.word	0x08018c38

08006df8 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006dfe:	d039      	beq.n	8006e74 <infoCommand+0x7c>
	if(N > 1)
 8006e00:	4b26      	ldr	r3, [pc, #152]	; (8006e9c <infoCommand+0xa4>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8006e04:	2500      	movs	r5, #0
	if(N > 1)
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d902      	bls.n	8006e10 <infoCommand+0x18>
		result =ReadPortsDir();
 8006e0a:	f7fd fb19 	bl	8004440 <ReadPortsDir>
 8006e0e:	0005      	movs	r5, r0
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006e10:	4b22      	ldr	r3, [pc, #136]	; (8006e9c <infoCommand+0xa4>)
 8006e12:	781a      	ldrb	r2, [r3, #0]
 8006e14:	4922      	ldr	r1, [pc, #136]	; (8006ea0 <infoCommand+0xa8>)
 8006e16:	0020      	movs	r0, r4
 8006e18:	f00c fac4 	bl	80133a4 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e1c:	0020      	movs	r0, r4
 8006e1e:	f7f9 f97b 	bl	8000118 <strlen>
 8006e22:	b282      	uxth	r2, r0
 8006e24:	4e1f      	ldr	r6, [pc, #124]	; (8006ea4 <infoCommand+0xac>)
 8006e26:	7830      	ldrb	r0, [r6, #0]
 8006e28:	2701      	movs	r7, #1
 8006e2a:	427f      	negs	r7, r7
 8006e2c:	9700      	str	r7, [sp, #0]
 8006e2e:	2332      	movs	r3, #50	; 0x32
 8006e30:	0021      	movs	r1, r4
 8006e32:	f006 facd 	bl	800d3d0 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006e36:	2213      	movs	r2, #19
 8006e38:	491b      	ldr	r1, [pc, #108]	; (8006ea8 <infoCommand+0xb0>)
 8006e3a:	0020      	movs	r0, r4
 8006e3c:	f00c f8af 	bl	8012f9e <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e40:	0020      	movs	r0, r4
 8006e42:	f7f9 f969 	bl	8000118 <strlen>
 8006e46:	b282      	uxth	r2, r0
 8006e48:	7830      	ldrb	r0, [r6, #0]
 8006e4a:	9700      	str	r7, [sp, #0]
 8006e4c:	2332      	movs	r3, #50	; 0x32
 8006e4e:	0021      	movs	r1, r4
 8006e50:	f006 fabe 	bl	800d3d0 <writePxMutex>
	DisplayTopology(PcPort);
 8006e54:	7830      	ldrb	r0, [r6, #0]
 8006e56:	f7fc fefb 	bl	8003c50 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006e5a:	7830      	ldrb	r0, [r6, #0]
 8006e5c:	f7fc ffc8 	bl	8003df0 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006e60:	2d02      	cmp	r5, #2
 8006e62:	d009      	beq.n	8006e78 <infoCommand+0x80>
	sprintf((char* )pcWriteBuffer," ");
 8006e64:	2202      	movs	r2, #2
 8006e66:	4911      	ldr	r1, [pc, #68]	; (8006eac <infoCommand+0xb4>)
 8006e68:	0020      	movs	r0, r4
 8006e6a:	f00c f898 	bl	8012f9e <memcpy>
}
 8006e6e:	2000      	movs	r0, #0
 8006e70:	b003      	add	sp, #12
 8006e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006e74:	b672      	cpsid	i
 8006e76:	e7fe      	b.n	8006e76 <infoCommand+0x7e>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006e78:	2244      	movs	r2, #68	; 0x44
 8006e7a:	490d      	ldr	r1, [pc, #52]	; (8006eb0 <infoCommand+0xb8>)
 8006e7c:	0020      	movs	r0, r4
 8006e7e:	f00c f88e 	bl	8012f9e <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006e82:	0020      	movs	r0, r4
 8006e84:	f7f9 f948 	bl	8000118 <strlen>
 8006e88:	b282      	uxth	r2, r0
 8006e8a:	4b06      	ldr	r3, [pc, #24]	; (8006ea4 <infoCommand+0xac>)
 8006e8c:	7818      	ldrb	r0, [r3, #0]
 8006e8e:	003b      	movs	r3, r7
 8006e90:	9700      	str	r7, [sp, #0]
 8006e92:	3333      	adds	r3, #51	; 0x33
 8006e94:	0021      	movs	r1, r4
 8006e96:	f006 fa9b 	bl	800d3d0 <writePxMutex>
 8006e9a:	e7e3      	b.n	8006e64 <infoCommand+0x6c>
 8006e9c:	2000001c 	.word	0x2000001c
 8006ea0:	080189d0 	.word	0x080189d0
 8006ea4:	20000a77 	.word	0x20000a77
 8006ea8:	080189ec 	.word	0x080189ec
 8006eac:	08017974 	.word	0x08017974
 8006eb0:	08018a00 	.word	0x08018a00

08006eb4 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006eb4:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d101      	bne.n	8006ebe <statusCommand+0xa>
 8006eba:	b672      	cpsid	i
 8006ebc:	e7fe      	b.n	8006ebc <statusCommand+0x8>
	DisplayModuleStatus(0);
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	f7fd f80a 	bl	8003ed8 <DisplayModuleStatus>
}
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	bd10      	pop	{r4, pc}

08006ec8 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eca:	46ce      	mov	lr, r9
 8006ecc:	b500      	push	{lr}
 8006ece:	b090      	sub	sp, #64	; 0x40
 8006ed0:	0004      	movs	r4, r0
 8006ed2:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] ={0};
 8006ed4:	2227      	movs	r2, #39	; 0x27
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	a806      	add	r0, sp, #24
 8006eda:	f00c f869 	bl	8012fb0 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006ede:	220a      	movs	r2, #10
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	a803      	add	r0, sp, #12
 8006ee4:	f00c f864 	bl	8012fb0 <memset>
	configASSERT(pcWriteBuffer);
 8006ee8:	2c00      	cmp	r4, #0
 8006eea:	d101      	bne.n	8006ef0 <groupCommand+0x28>
 8006eec:	b672      	cpsid	i
 8006eee:	e7fe      	b.n	8006eee <groupCommand+0x26>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006ef0:	4d54      	ldr	r5, [pc, #336]	; (8007044 <groupCommand+0x17c>)
 8006ef2:	002a      	movs	r2, r5
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	9801      	ldr	r0, [sp, #4]
 8006ef8:	f006 fcb0 	bl	800d85c <FreeRTOS_CLIGetParameter>
 8006efc:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006efe:	682a      	ldr	r2, [r5, #0]
 8006f00:	a803      	add	r0, sp, #12
 8006f02:	f00c faa4 	bl	801344e <strncpy>
 8006f06:	4d50      	ldr	r5, [pc, #320]	; (8007048 <groupCommand+0x180>)
 8006f08:	002f      	movs	r7, r5
 8006f0a:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006f0c:	0029      	movs	r1, r5
 8006f0e:	a803      	add	r0, sp, #12
 8006f10:	f7f9 f8f8 	bl	8000104 <strcmp>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d016      	beq.n	8006f46 <groupCommand+0x7e>
 8006f18:	350a      	adds	r5, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006f1a:	42bd      	cmp	r5, r7
 8006f1c:	d1f6      	bne.n	8006f0c <groupCommand+0x44>
	type =1;
 8006f1e:	2701      	movs	r7, #1
	count =2;
 8006f20:	4b4a      	ldr	r3, [pc, #296]	; (800704c <groupCommand+0x184>)
 8006f22:	2202      	movs	r2, #2
 8006f24:	701a      	strb	r2, [r3, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006f26:	3208      	adds	r2, #8
 8006f28:	4949      	ldr	r1, [pc, #292]	; (8007050 <groupCommand+0x188>)
 8006f2a:	0020      	movs	r0, r4
 8006f2c:	f00c f837 	bl	8012f9e <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006f30:	4a48      	ldr	r2, [pc, #288]	; (8007054 <groupCommand+0x18c>)
 8006f32:	2102      	movs	r1, #2
 8006f34:	9801      	ldr	r0, [sp, #4]
 8006f36:	f006 fc91 	bl	800d85c <FreeRTOS_CLIGetParameter>
 8006f3a:	4b47      	ldr	r3, [pc, #284]	; (8007058 <groupCommand+0x190>)
 8006f3c:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d061      	beq.n	8007006 <groupCommand+0x13e>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006f42:	4e44      	ldr	r6, [pc, #272]	; (8007054 <groupCommand+0x18c>)
 8006f44:	e011      	b.n	8006f6a <groupCommand+0xa2>
			type =0;
 8006f46:	2700      	movs	r7, #0
 8006f48:	e7ea      	b.n	8006f20 <groupCommand+0x58>
		strcat((char* )pcWriteBuffer,module);
 8006f4a:	a906      	add	r1, sp, #24
 8006f4c:	0020      	movs	r0, r4
 8006f4e:	f00c fa49 	bl	80133e4 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006f52:	1c69      	adds	r1, r5, #1
 8006f54:	b249      	sxtb	r1, r1
 8006f56:	4b3d      	ldr	r3, [pc, #244]	; (800704c <groupCommand+0x184>)
 8006f58:	7019      	strb	r1, [r3, #0]
 8006f5a:	4a3e      	ldr	r2, [pc, #248]	; (8007054 <groupCommand+0x18c>)
 8006f5c:	9801      	ldr	r0, [sp, #4]
 8006f5e:	f006 fc7d 	bl	800d85c <FreeRTOS_CLIGetParameter>
 8006f62:	4b3d      	ldr	r3, [pc, #244]	; (8007058 <groupCommand+0x190>)
 8006f64:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d04d      	beq.n	8007006 <groupCommand+0x13e>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006f6a:	6833      	ldr	r3, [r6, #0]
 8006f6c:	4699      	mov	r9, r3
 8006f6e:	ad06      	add	r5, sp, #24
 8006f70:	001a      	movs	r2, r3
 8006f72:	0001      	movs	r1, r0
 8006f74:	0028      	movs	r0, r5
 8006f76:	f00c fa6a 	bl	801344e <strncpy>
		module[xParameterStringLength] ='\0';
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	464a      	mov	r2, r9
 8006f7e:	54ab      	strb	r3, [r5, r2]
		modID =GetID(module);
 8006f80:	0028      	movs	r0, r5
 8006f82:	f7fd f909 	bl	8004198 <GetID>
		if(modID < 0)
 8006f86:	2800      	cmp	r0, #0
 8006f88:	db37      	blt.n	8006ffa <groupCommand+0x132>
		result =AddModuleToGroup(modID,alias);
 8006f8a:	b2c0      	uxtb	r0, r0
 8006f8c:	a903      	add	r1, sp, #12
 8006f8e:	f7fd f9cf 	bl	8004330 <AddModuleToGroup>
		if(result != BOS_OK)
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d146      	bne.n	8007024 <groupCommand+0x15c>
		if(count > 2)
 8006f96:	4b2d      	ldr	r3, [pc, #180]	; (800704c <groupCommand+0x184>)
 8006f98:	2500      	movs	r5, #0
 8006f9a:	575d      	ldrsb	r5, [r3, r5]
 8006f9c:	2d02      	cmp	r5, #2
 8006f9e:	ddd4      	ble.n	8006f4a <groupCommand+0x82>
			strcat((char* )pcWriteBuffer,", ");
 8006fa0:	0020      	movs	r0, r4
 8006fa2:	f7f9 f8b9 	bl	8000118 <strlen>
 8006fa6:	1820      	adds	r0, r4, r0
 8006fa8:	2203      	movs	r2, #3
 8006faa:	492c      	ldr	r1, [pc, #176]	; (800705c <groupCommand+0x194>)
 8006fac:	f00b fff7 	bl	8012f9e <memcpy>
 8006fb0:	e7cb      	b.n	8006f4a <groupCommand+0x82>
	else if(result == BOS_OK && type){
 8006fb2:	2f00      	cmp	r7, #0
 8006fb4:	d009      	beq.n	8006fca <groupCommand+0x102>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006fb6:	aa03      	add	r2, sp, #12
 8006fb8:	4929      	ldr	r1, [pc, #164]	; (8007060 <groupCommand+0x198>)
 8006fba:	a806      	add	r0, sp, #24
 8006fbc:	f00c f9f2 	bl	80133a4 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006fc0:	a906      	add	r1, sp, #24
 8006fc2:	0020      	movs	r0, r4
 8006fc4:	f00c fa0e 	bl	80133e4 <strcat>
 8006fc8:	e027      	b.n	800701a <groupCommand+0x152>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8006fca:	aa03      	add	r2, sp, #12
 8006fcc:	4925      	ldr	r1, [pc, #148]	; (8007064 <groupCommand+0x19c>)
 8006fce:	a806      	add	r0, sp, #24
 8006fd0:	f00c f9e8 	bl	80133a4 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006fd4:	a906      	add	r1, sp, #24
 8006fd6:	0020      	movs	r0, r4
 8006fd8:	f00c fa04 	bl	80133e4 <strcat>
 8006fdc:	e01d      	b.n	800701a <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8006fde:	aa03      	add	r2, sp, #12
 8006fe0:	4921      	ldr	r1, [pc, #132]	; (8007068 <groupCommand+0x1a0>)
 8006fe2:	0020      	movs	r0, r4
 8006fe4:	f00c f9de 	bl	80133a4 <sprintf>
 8006fe8:	e017      	b.n	800701a <groupCommand+0x152>
	else if(result == BOS_ERR_ExistingCmd)
 8006fea:	2808      	cmp	r0, #8
 8006fec:	d115      	bne.n	800701a <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8006fee:	aa03      	add	r2, sp, #12
 8006ff0:	491e      	ldr	r1, [pc, #120]	; (800706c <groupCommand+0x1a4>)
 8006ff2:	0020      	movs	r0, r4
 8006ff4:	f00c f9d6 	bl	80133a4 <sprintf>
 8006ff8:	e00f      	b.n	800701a <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8006ffa:	aa06      	add	r2, sp, #24
 8006ffc:	491c      	ldr	r1, [pc, #112]	; (8007070 <groupCommand+0x1a8>)
 8006ffe:	0020      	movs	r0, r4
 8007000:	f00c f9d0 	bl	80133a4 <sprintf>
	return pdFALSE;
 8007004:	e009      	b.n	800701a <groupCommand+0x152>
	else if(count == 2)
 8007006:	4b11      	ldr	r3, [pc, #68]	; (800704c <groupCommand+0x184>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	b25b      	sxtb	r3, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d1d0      	bne.n	8006fb2 <groupCommand+0xea>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8007010:	aa03      	add	r2, sp, #12
 8007012:	4918      	ldr	r1, [pc, #96]	; (8007074 <groupCommand+0x1ac>)
 8007014:	0020      	movs	r0, r4
 8007016:	f00c f9c5 	bl	80133a4 <sprintf>
}
 800701a:	2000      	movs	r0, #0
 800701c:	b010      	add	sp, #64	; 0x40
 800701e:	bc04      	pop	{r2}
 8007020:	4691      	mov	r9, r2
 8007022:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8007024:	4b09      	ldr	r3, [pc, #36]	; (800704c <groupCommand+0x184>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	b25b      	sxtb	r3, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d0f0      	beq.n	8007010 <groupCommand+0x148>
	else if(result == BOS_ERR_Keyword)
 800702e:	2806      	cmp	r0, #6
 8007030:	d0d5      	beq.n	8006fde <groupCommand+0x116>
	else if(result == BOS_ERR_ExistingAlias)
 8007032:	2807      	cmp	r0, #7
 8007034:	d1d9      	bne.n	8006fea <groupCommand+0x122>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8007036:	aa03      	add	r2, sp, #12
 8007038:	490f      	ldr	r1, [pc, #60]	; (8007078 <groupCommand+0x1b0>)
 800703a:	0020      	movs	r0, r4
 800703c:	f00c f9b2 	bl	80133a4 <sprintf>
 8007040:	e7eb      	b.n	800701a <groupCommand+0x152>
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	200012bc 	.word	0x200012bc
 8007048:	20000e5c 	.word	0x20000e5c
 800704c:	20001282 	.word	0x20001282
 8007050:	080187f0 	.word	0x080187f0
 8007054:	200012b0 	.word	0x200012b0
 8007058:	20001284 	.word	0x20001284
 800705c:	080187fc 	.word	0x080187fc
 8007060:	0801882c 	.word	0x0801882c
 8007064:	08018848 	.word	0x08018848
 8007068:	08018868 	.word	0x08018868
 800706c:	080188dc 	.word	0x080188dc
 8007070:	0801891c 	.word	0x0801891c
 8007074:	08018800 	.word	0x08018800
 8007078:	080188a8 	.word	0x080188a8

0800707c <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	0004      	movs	r4, r0
 8007080:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8007082:	2c00      	cmp	r4, #0
 8007084:	d101      	bne.n	800708a <nameCommand+0xe>
 8007086:	b672      	cpsid	i
 8007088:	e7fe      	b.n	8007088 <nameCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800708a:	4d1c      	ldr	r5, [pc, #112]	; (80070fc <nameCommand+0x80>)
 800708c:	002a      	movs	r2, r5
 800708e:	2101      	movs	r1, #1
 8007090:	f006 fbe4 	bl	800d85c <FreeRTOS_CLIGetParameter>
 8007094:	0001      	movs	r1, r0
 8007096:	4b1a      	ldr	r3, [pc, #104]	; (8007100 <nameCommand+0x84>)
 8007098:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 800709a:	682b      	ldr	r3, [r5, #0]
 800709c:	2b09      	cmp	r3, #9
 800709e:	dd01      	ble.n	80070a4 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 80070a0:	2300      	movs	r3, #0
 80070a2:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 80070a4:	4b17      	ldr	r3, [pc, #92]	; (8007104 <nameCommand+0x88>)
 80070a6:	7818      	ldrb	r0, [r3, #0]
 80070a8:	f7fd f8da 	bl	8004260 <NameModule>
	if(result == BOS_OK)
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d007      	beq.n	80070c0 <nameCommand+0x44>
	else if(result == BOS_ERR_Keyword)
 80070b0:	2806      	cmp	r0, #6
 80070b2:	d00e      	beq.n	80070d2 <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 80070b4:	2807      	cmp	r0, #7
 80070b6:	d013      	beq.n	80070e0 <nameCommand+0x64>
	else if(result == BOS_ERR_ExistingCmd)
 80070b8:	2808      	cmp	r0, #8
 80070ba:	d018      	beq.n	80070ee <nameCommand+0x72>
}
 80070bc:	2000      	movs	r0, #0
 80070be:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 80070c0:	4b10      	ldr	r3, [pc, #64]	; (8007104 <nameCommand+0x88>)
 80070c2:	781a      	ldrb	r2, [r3, #0]
 80070c4:	4b0e      	ldr	r3, [pc, #56]	; (8007100 <nameCommand+0x84>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	490f      	ldr	r1, [pc, #60]	; (8007108 <nameCommand+0x8c>)
 80070ca:	0020      	movs	r0, r4
 80070cc:	f00c f96a 	bl	80133a4 <sprintf>
 80070d0:	e7f4      	b.n	80070bc <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 80070d2:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <nameCommand+0x84>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	490d      	ldr	r1, [pc, #52]	; (800710c <nameCommand+0x90>)
 80070d8:	0020      	movs	r0, r4
 80070da:	f00c f963 	bl	80133a4 <sprintf>
 80070de:	e7ed      	b.n	80070bc <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 80070e0:	4b07      	ldr	r3, [pc, #28]	; (8007100 <nameCommand+0x84>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	490a      	ldr	r1, [pc, #40]	; (8007110 <nameCommand+0x94>)
 80070e6:	0020      	movs	r0, r4
 80070e8:	f00c f95c 	bl	80133a4 <sprintf>
 80070ec:	e7e6      	b.n	80070bc <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 80070ee:	4b04      	ldr	r3, [pc, #16]	; (8007100 <nameCommand+0x84>)
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	4908      	ldr	r1, [pc, #32]	; (8007114 <nameCommand+0x98>)
 80070f4:	0020      	movs	r0, r4
 80070f6:	f00c f955 	bl	80133a4 <sprintf>
 80070fa:	e7df      	b.n	80070bc <nameCommand+0x40>
 80070fc:	200012b8 	.word	0x200012b8
 8007100:	20001288 	.word	0x20001288
 8007104:	20001076 	.word	0x20001076
 8007108:	08018a68 	.word	0x08018a68
 800710c:	08018868 	.word	0x08018868
 8007110:	080188a8 	.word	0x080188a8
 8007114:	080188dc 	.word	0x080188dc

08007118 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800711a:	b085      	sub	sp, #20
 800711c:	1e04      	subs	r4, r0, #0
 800711e:	9203      	str	r2, [sp, #12]
	configASSERT(pcWriteBuffer);
 8007120:	d101      	bne.n	8007126 <bootloaderUpdateCommand+0xe>
 8007122:	b672      	cpsid	i
 8007124:	e7fe      	b.n	8007124 <bootloaderUpdateCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007126:	4a4b      	ldr	r2, [pc, #300]	; (8007254 <bootloaderUpdateCommand+0x13c>)
 8007128:	2101      	movs	r1, #1
 800712a:	9803      	ldr	r0, [sp, #12]
 800712c:	f006 fb96 	bl	800d85c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8007130:	2800      	cmp	r0, #0
 8007132:	d040      	beq.n	80071b6 <bootloaderUpdateCommand+0x9e>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8007134:	4b47      	ldr	r3, [pc, #284]	; (8007254 <bootloaderUpdateCommand+0x13c>)
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	4947      	ldr	r1, [pc, #284]	; (8007258 <bootloaderUpdateCommand+0x140>)
 800713a:	f00c f977 	bl	801342c <strncmp>
 800713e:	2800      	cmp	r0, #0
 8007140:	d000      	beq.n	8007144 <bootloaderUpdateCommand+0x2c>
 8007142:	e080      	b.n	8007246 <bootloaderUpdateCommand+0x12e>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007144:	4a45      	ldr	r2, [pc, #276]	; (800725c <bootloaderUpdateCommand+0x144>)
 8007146:	2102      	movs	r1, #2
 8007148:	9803      	ldr	r0, [sp, #12]
 800714a:	f006 fb87 	bl	800d85c <FreeRTOS_CLIGetParameter>
 800714e:	4f44      	ldr	r7, [pc, #272]	; (8007260 <bootloaderUpdateCommand+0x148>)
 8007150:	6038      	str	r0, [r7, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007152:	4a44      	ldr	r2, [pc, #272]	; (8007264 <bootloaderUpdateCommand+0x14c>)
 8007154:	2103      	movs	r1, #3
 8007156:	9803      	ldr	r0, [sp, #12]
 8007158:	f006 fb80 	bl	800d85c <FreeRTOS_CLIGetParameter>
 800715c:	4b42      	ldr	r3, [pc, #264]	; (8007268 <bootloaderUpdateCommand+0x150>)
 800715e:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#'){
 8007160:	6838      	ldr	r0, [r7, #0]
 8007162:	2300      	movs	r3, #0
 8007164:	56c3      	ldrsb	r3, [r0, r3]
				result =BOS_ERR_WrongValue;
 8007166:	2768      	movs	r7, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 8007168:	2b23      	cmp	r3, #35	; 0x23
 800716a:	d04e      	beq.n	800720a <bootloaderUpdateCommand+0xf2>
			if(pcParameterString3[0] == 'p'){
 800716c:	4b3e      	ldr	r3, [pc, #248]	; (8007268 <bootloaderUpdateCommand+0x150>)
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	2300      	movs	r3, #0
 8007172:	56c3      	ldrsb	r3, [r0, r3]
 8007174:	2b70      	cmp	r3, #112	; 0x70
 8007176:	d04e      	beq.n	8007216 <bootloaderUpdateCommand+0xfe>
				result =BOS_ERR_WrongValue;
 8007178:	2768      	movs	r7, #104	; 0x68
			if(module != myID){
 800717a:	4b3c      	ldr	r3, [pc, #240]	; (800726c <bootloaderUpdateCommand+0x154>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	42b3      	cmp	r3, r6
 8007180:	d04e      	beq.n	8007220 <bootloaderUpdateCommand+0x108>
				BOS.response = BOS_RESPONSE_NONE;
 8007182:	4b3b      	ldr	r3, [pc, #236]	; (8007270 <bootloaderUpdateCommand+0x158>)
 8007184:	2200      	movs	r2, #0
 8007186:	719a      	strb	r2, [r3, #6]
				messageParams[0] =port;
 8007188:	4b3a      	ldr	r3, [pc, #232]	; (8007274 <bootloaderUpdateCommand+0x15c>)
 800718a:	701d      	strb	r5, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 800718c:	3201      	adds	r2, #1
 800718e:	211a      	movs	r1, #26
 8007190:	0030      	movs	r0, r6
 8007192:	f002 fa97 	bl	80096c4 <SendMessageToModule>
				osDelay(100);
 8007196:	2064      	movs	r0, #100	; 0x64
 8007198:	f006 fa47 	bl	800d62a <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 800719c:	4b36      	ldr	r3, [pc, #216]	; (8007278 <bootloaderUpdateCommand+0x160>)
 800719e:	781a      	ldrb	r2, [r3, #0]
 80071a0:	4b32      	ldr	r3, [pc, #200]	; (800726c <bootloaderUpdateCommand+0x154>)
 80071a2:	7818      	ldrb	r0, [r3, #0]
 80071a4:	002b      	movs	r3, r5
 80071a6:	0031      	movs	r1, r6
 80071a8:	f7fc fcd0 	bl	8003b4c <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 80071ac:	2f68      	cmp	r7, #104	; 0x68
 80071ae:	d04a      	beq.n	8007246 <bootloaderUpdateCommand+0x12e>
}
 80071b0:	2000      	movs	r0, #0
 80071b2:	b005      	add	sp, #20
 80071b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 80071b6:	4b2d      	ldr	r3, [pc, #180]	; (800726c <bootloaderUpdateCommand+0x154>)
 80071b8:	781a      	ldrb	r2, [r3, #0]
 80071ba:	4930      	ldr	r1, [pc, #192]	; (800727c <bootloaderUpdateCommand+0x164>)
 80071bc:	0020      	movs	r0, r4
 80071be:	f00c f8f1 	bl	80133a4 <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 80071c2:	4b2f      	ldr	r3, [pc, #188]	; (8007280 <bootloaderUpdateCommand+0x168>)
 80071c4:	6819      	ldr	r1, [r3, #0]
 80071c6:	0020      	movs	r0, r4
 80071c8:	f00c f90c 	bl	80133e4 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 80071cc:	0020      	movs	r0, r4
 80071ce:	f7f8 ffa3 	bl	8000118 <strlen>
 80071d2:	b282      	uxth	r2, r0
 80071d4:	4b28      	ldr	r3, [pc, #160]	; (8007278 <bootloaderUpdateCommand+0x160>)
 80071d6:	7818      	ldrb	r0, [r3, #0]
 80071d8:	2301      	movs	r3, #1
 80071da:	425b      	negs	r3, r3
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	3333      	adds	r3, #51	; 0x33
 80071e0:	0021      	movs	r1, r4
 80071e2:	f006 f8f5 	bl	800d3d0 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80071e6:	4b27      	ldr	r3, [pc, #156]	; (8007284 <bootloaderUpdateCommand+0x16c>)
 80071e8:	4a27      	ldr	r2, [pc, #156]	; (8007288 <bootloaderUpdateCommand+0x170>)
 80071ea:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 80071ec:	4b27      	ldr	r3, [pc, #156]	; (800728c <bootloaderUpdateCommand+0x174>)
 80071ee:	2201      	movs	r2, #1
 80071f0:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 80071f2:	200a      	movs	r0, #10
 80071f4:	f006 fa19 	bl	800d62a <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	4b24      	ldr	r3, [pc, #144]	; (8007290 <bootloaderUpdateCommand+0x178>)
 80071fe:	4a25      	ldr	r2, [pc, #148]	; (8007294 <bootloaderUpdateCommand+0x17c>)
 8007200:	60da      	str	r2, [r3, #12]
 8007202:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	e7fd      	b.n	8007206 <bootloaderUpdateCommand+0xee>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 800720a:	3001      	adds	r0, #1
 800720c:	f00b fc3d 	bl	8012a8a <atol>
 8007210:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 8007212:	2700      	movs	r7, #0
 8007214:	e7aa      	b.n	800716c <bootloaderUpdateCommand+0x54>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8007216:	3001      	adds	r0, #1
 8007218:	f00b fc37 	bl	8012a8a <atol>
 800721c:	b2c5      	uxtb	r5, r0
 800721e:	e7ac      	b.n	800717a <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8007220:	2100      	movs	r1, #0
 8007222:	9100      	str	r1, [sp, #0]
 8007224:	2319      	movs	r3, #25
 8007226:	000a      	movs	r2, r1
 8007228:	0028      	movs	r0, r5
 800722a:	f002 f823 	bl	8009274 <SendMessageFromPort>
				osDelay(100);
 800722e:	2064      	movs	r0, #100	; 0x64
 8007230:	f006 f9fb 	bl	800d62a <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8007234:	4b0d      	ldr	r3, [pc, #52]	; (800726c <bootloaderUpdateCommand+0x154>)
 8007236:	7818      	ldrb	r0, [r3, #0]
 8007238:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <bootloaderUpdateCommand+0x160>)
 800723a:	781a      	ldrb	r2, [r3, #0]
 800723c:	002b      	movs	r3, r5
 800723e:	0001      	movs	r1, r0
 8007240:	f7fc fc84 	bl	8003b4c <remoteBootloaderUpdate>
 8007244:	e7b2      	b.n	80071ac <bootloaderUpdateCommand+0x94>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8007246:	220f      	movs	r2, #15
 8007248:	4913      	ldr	r1, [pc, #76]	; (8007298 <bootloaderUpdateCommand+0x180>)
 800724a:	0020      	movs	r0, r4
 800724c:	f00b fea7 	bl	8012f9e <memcpy>
 8007250:	e7ae      	b.n	80071b0 <bootloaderUpdateCommand+0x98>
 8007252:	46c0      	nop			; (mov r8, r8)
 8007254:	200012b4 	.word	0x200012b4
 8007258:	08018528 	.word	0x08018528
 800725c:	200012c0 	.word	0x200012c0
 8007260:	20001298 	.word	0x20001298
 8007264:	200012c4 	.word	0x200012c4
 8007268:	200012a0 	.word	0x200012a0
 800726c:	20001076 	.word	0x20001076
 8007270:	200069c4 	.word	0x200069c4
 8007274:	20000f38 	.word	0x20000f38
 8007278:	20000a77 	.word	0x20000a77
 800727c:	08018508 	.word	0x08018508
 8007280:	20000074 	.word	0x20000074
 8007284:	20007ff0 	.word	0x20007ff0
 8007288:	deadbeef 	.word	0xdeadbeef
 800728c:	20000ef4 	.word	0x20000ef4
 8007290:	e000ed00 	.word	0xe000ed00
 8007294:	05fa0004 	.word	0x05fa0004
 8007298:	080185e8 	.word	0x080185e8

0800729c <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800729c:	b570      	push	{r4, r5, r6, lr}
	configASSERT(pcWriteBuffer);
 800729e:	2800      	cmp	r0, #0
 80072a0:	d01e      	beq.n	80072e0 <pingCommand+0x44>
	if(!moduleAlias[myID][0])
 80072a2:	4b15      	ldr	r3, [pc, #84]	; (80072f8 <pingCommand+0x5c>)
 80072a4:	781a      	ldrb	r2, [r3, #0]
 80072a6:	0093      	lsls	r3, r2, #2
 80072a8:	189b      	adds	r3, r3, r2
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	4913      	ldr	r1, [pc, #76]	; (80072fc <pingCommand+0x60>)
 80072ae:	5c5b      	ldrb	r3, [r3, r1]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d117      	bne.n	80072e4 <pingCommand+0x48>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 80072b4:	4912      	ldr	r1, [pc, #72]	; (8007300 <pingCommand+0x64>)
 80072b6:	f00c f875 	bl	80133a4 <sprintf>
	RTOS_IND_blink(200);
 80072ba:	2580      	movs	r5, #128	; 0x80
 80072bc:	012d      	lsls	r5, r5, #4
 80072be:	2490      	movs	r4, #144	; 0x90
 80072c0:	05e4      	lsls	r4, r4, #23
 80072c2:	2201      	movs	r2, #1
 80072c4:	0029      	movs	r1, r5
 80072c6:	0020      	movs	r0, r4
 80072c8:	f009 fe44 	bl	8010f54 <HAL_GPIO_WritePin>
 80072cc:	20c8      	movs	r0, #200	; 0xc8
 80072ce:	f006 f9ac 	bl	800d62a <osDelay>
 80072d2:	2200      	movs	r2, #0
 80072d4:	0029      	movs	r1, r5
 80072d6:	0020      	movs	r0, r4
 80072d8:	f009 fe3c 	bl	8010f54 <HAL_GPIO_WritePin>
}
 80072dc:	2000      	movs	r0, #0
 80072de:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 80072e0:	b672      	cpsid	i
 80072e2:	e7fe      	b.n	80072e2 <pingCommand+0x46>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 80072e4:	0093      	lsls	r3, r2, #2
 80072e6:	189b      	adds	r3, r3, r2
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	4904      	ldr	r1, [pc, #16]	; (80072fc <pingCommand+0x60>)
 80072ec:	185b      	adds	r3, r3, r1
 80072ee:	4905      	ldr	r1, [pc, #20]	; (8007304 <pingCommand+0x68>)
 80072f0:	f00c f858 	bl	80133a4 <sprintf>
 80072f4:	e7e1      	b.n	80072ba <pingCommand+0x1e>
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	20001076 	.word	0x20001076
 80072fc:	20000f68 	.word	0x20000f68
 8007300:	08018ad8 	.word	0x08018ad8
 8007304:	08018aec 	.word	0x08018aec

08007308 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007308:	b510      	push	{r4, lr}
 800730a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800730c:	d101      	bne.n	8007312 <prvRunTimeStatsCommand+0xa>
 800730e:	b672      	cpsid	i
 8007310:	e7fe      	b.n	8007310 <prvRunTimeStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007312:	2241      	movs	r2, #65	; 0x41
 8007314:	4904      	ldr	r1, [pc, #16]	; (8007328 <prvRunTimeStatsCommand+0x20>)
 8007316:	f00b fe42 	bl	8012f9e <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 800731a:	0020      	movs	r0, r4
 800731c:	3040      	adds	r0, #64	; 0x40
 800731e:	f007 fcf1 	bl	800ed04 <vTaskGetRunTimeStats>
}
 8007322:	2000      	movs	r0, #0
 8007324:	bd10      	pop	{r4, pc}
 8007326:	46c0      	nop			; (mov r8, r8)
 8007328:	08018b18 	.word	0x08018b18

0800732c <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800732c:	b510      	push	{r4, lr}
 800732e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007330:	d101      	bne.n	8007336 <prvTaskStatsCommand+0xa>
 8007332:	b672      	cpsid	i
 8007334:	e7fe      	b.n	8007334 <prvTaskStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007336:	2250      	movs	r2, #80	; 0x50
 8007338:	4904      	ldr	r1, [pc, #16]	; (800734c <prvTaskStatsCommand+0x20>)
 800733a:	f00b fe30 	bl	8012f9e <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 800733e:	0020      	movs	r0, r4
 8007340:	304f      	adds	r0, #79	; 0x4f
 8007342:	f007 fc7f 	bl	800ec44 <vTaskList>
}
 8007346:	2000      	movs	r0, #0
 8007348:	bd10      	pop	{r4, pc}
 800734a:	46c0      	nop			; (mov r8, r8)
 800734c:	08018b6c 	.word	0x08018b6c

08007350 <resetCommand>:
	configASSERT(pcWriteBuffer);
 8007350:	2800      	cmp	r0, #0
 8007352:	d101      	bne.n	8007358 <resetCommand+0x8>
 8007354:	b672      	cpsid	i
 8007356:	e7fe      	b.n	8007356 <resetCommand+0x6>
  __ASM volatile ("dsb 0xF":::"memory");
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	4b03      	ldr	r3, [pc, #12]	; (800736c <resetCommand+0x1c>)
 800735e:	4a04      	ldr	r2, [pc, #16]	; (8007370 <resetCommand+0x20>)
 8007360:	60da      	str	r2, [r3, #12]
 8007362:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007366:	46c0      	nop			; (mov r8, r8)
 8007368:	e7fd      	b.n	8007366 <resetCommand+0x16>
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	e000ed00 	.word	0xe000ed00
 8007370:	05fa0004 	.word	0x05fa0004

08007374 <RegisterUserCLICommands>:
}
 8007374:	4770      	bx	lr
	...

08007378 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 8007378:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 800737a:	4835      	ldr	r0, [pc, #212]	; (8007450 <vRegisterCLICommands+0xd8>)
 800737c:	f006 f9d0 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8007380:	4834      	ldr	r0, [pc, #208]	; (8007454 <vRegisterCLICommands+0xdc>)
 8007382:	f006 f9cd 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 8007386:	4834      	ldr	r0, [pc, #208]	; (8007458 <vRegisterCLICommands+0xe0>)
 8007388:	f006 f9ca 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 800738c:	4833      	ldr	r0, [pc, #204]	; (800745c <vRegisterCLICommands+0xe4>)
 800738e:	f006 f9c7 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8007392:	4833      	ldr	r0, [pc, #204]	; (8007460 <vRegisterCLICommands+0xe8>)
 8007394:	f006 f9c4 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 8007398:	4832      	ldr	r0, [pc, #200]	; (8007464 <vRegisterCLICommands+0xec>)
 800739a:	f006 f9c1 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 800739e:	4832      	ldr	r0, [pc, #200]	; (8007468 <vRegisterCLICommands+0xf0>)
 80073a0:	f006 f9be 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 80073a4:	4831      	ldr	r0, [pc, #196]	; (800746c <vRegisterCLICommands+0xf4>)
 80073a6:	f006 f9bb 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 80073aa:	4831      	ldr	r0, [pc, #196]	; (8007470 <vRegisterCLICommands+0xf8>)
 80073ac:	f006 f9b8 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 80073b0:	4830      	ldr	r0, [pc, #192]	; (8007474 <vRegisterCLICommands+0xfc>)
 80073b2:	f006 f9b5 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 80073b6:	4830      	ldr	r0, [pc, #192]	; (8007478 <vRegisterCLICommands+0x100>)
 80073b8:	f006 f9b2 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 80073bc:	482f      	ldr	r0, [pc, #188]	; (800747c <vRegisterCLICommands+0x104>)
 80073be:	f006 f9af 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 80073c2:	482f      	ldr	r0, [pc, #188]	; (8007480 <vRegisterCLICommands+0x108>)
 80073c4:	f006 f9ac 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 80073c8:	482e      	ldr	r0, [pc, #184]	; (8007484 <vRegisterCLICommands+0x10c>)
 80073ca:	f006 f9a9 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 80073ce:	482e      	ldr	r0, [pc, #184]	; (8007488 <vRegisterCLICommands+0x110>)
 80073d0:	f006 f9a6 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 80073d4:	482d      	ldr	r0, [pc, #180]	; (800748c <vRegisterCLICommands+0x114>)
 80073d6:	f006 f9a3 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 80073da:	482d      	ldr	r0, [pc, #180]	; (8007490 <vRegisterCLICommands+0x118>)
 80073dc:	f006 f9a0 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 80073e0:	482c      	ldr	r0, [pc, #176]	; (8007494 <vRegisterCLICommands+0x11c>)
 80073e2:	f006 f99d 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 80073e6:	482c      	ldr	r0, [pc, #176]	; (8007498 <vRegisterCLICommands+0x120>)
 80073e8:	f006 f99a 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 80073ec:	482b      	ldr	r0, [pc, #172]	; (800749c <vRegisterCLICommands+0x124>)
 80073ee:	f006 f997 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 80073f2:	482b      	ldr	r0, [pc, #172]	; (80074a0 <vRegisterCLICommands+0x128>)
 80073f4:	f006 f994 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 80073f8:	482a      	ldr	r0, [pc, #168]	; (80074a4 <vRegisterCLICommands+0x12c>)
 80073fa:	f006 f991 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 80073fe:	482a      	ldr	r0, [pc, #168]	; (80074a8 <vRegisterCLICommands+0x130>)
 8007400:	f006 f98e 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8007404:	4829      	ldr	r0, [pc, #164]	; (80074ac <vRegisterCLICommands+0x134>)
 8007406:	f006 f98b 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 800740a:	4829      	ldr	r0, [pc, #164]	; (80074b0 <vRegisterCLICommands+0x138>)
 800740c:	f006 f988 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007410:	4828      	ldr	r0, [pc, #160]	; (80074b4 <vRegisterCLICommands+0x13c>)
 8007412:	f006 f985 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 8007416:	4828      	ldr	r0, [pc, #160]	; (80074b8 <vRegisterCLICommands+0x140>)
 8007418:	f006 f982 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 800741c:	4827      	ldr	r0, [pc, #156]	; (80074bc <vRegisterCLICommands+0x144>)
 800741e:	f006 f97f 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007422:	4827      	ldr	r0, [pc, #156]	; (80074c0 <vRegisterCLICommands+0x148>)
 8007424:	f006 f97c 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 8007428:	4826      	ldr	r0, [pc, #152]	; (80074c4 <vRegisterCLICommands+0x14c>)
 800742a:	f006 f979 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 800742e:	4826      	ldr	r0, [pc, #152]	; (80074c8 <vRegisterCLICommands+0x150>)
 8007430:	f006 f976 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8007434:	4825      	ldr	r0, [pc, #148]	; (80074cc <vRegisterCLICommands+0x154>)
 8007436:	f006 f973 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 800743a:	4825      	ldr	r0, [pc, #148]	; (80074d0 <vRegisterCLICommands+0x158>)
 800743c:	f006 f970 	bl	800d720 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 8007440:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <vRegisterCLICommands+0x15c>)
 8007442:	2223      	movs	r2, #35	; 0x23
 8007444:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8007446:	f004 f91c 	bl	800b682 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800744a:	f7ff ff93 	bl	8007374 <RegisterUserCLICommands>
}
 800744e:	bd10      	pop	{r4, pc}
 8007450:	08018bbc 	.word	0x08018bbc
 8007454:	08018b5c 	.word	0x08018b5c
 8007458:	08018b08 	.word	0x08018b08
 800745c:	0801852c 	.word	0x0801852c
 8007460:	080186b4 	.word	0x080186b4
 8007464:	08018c04 	.word	0x08018c04
 8007468:	08018a80 	.word	0x08018a80
 800746c:	08018940 	.word	0x08018940
 8007470:	080190b8 	.word	0x080190b8
 8007474:	08018a44 	.word	0x08018a44
 8007478:	08018cc0 	.word	0x08018cc0
 800747c:	080184f8 	.word	0x080184f8
 8007480:	08018bf4 	.word	0x08018bf4
 8007484:	08018f18 	.word	0x08018f18
 8007488:	080187e0 	.word	0x080187e0
 800748c:	08018638 	.word	0x08018638
 8007490:	0801a0d8 	.word	0x0801a0d8
 8007494:	080185a0 	.word	0x080185a0
 8007498:	08018d0c 	.word	0x08018d0c
 800749c:	0801a14c 	.word	0x0801a14c
 80074a0:	080189c0 	.word	0x080189c0
 80074a4:	080186e4 	.word	0x080186e4
 80074a8:	080190a8 	.word	0x080190a8
 80074ac:	0801847c 	.word	0x0801847c
 80074b0:	08018ac8 	.word	0x08018ac8
 80074b4:	080186a4 	.word	0x080186a4
 80074b8:	08018578 	.word	0x08018578
 80074bc:	0801a124 	.word	0x0801a124
 80074c0:	0801a06c 	.word	0x0801a06c
 80074c4:	0801837c 	.word	0x0801837c
 80074c8:	080183fc 	.word	0x080183fc
 80074cc:	08018434 	.word	0x08018434
 80074d0:	0801838c 	.word	0x0801838c
 80074d4:	20006948 	.word	0x20006948

080074d8 <StopMsgDMA>:
/* External functions --------------------------------------------------------*/
extern void DMA_STREAM_Setup(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num);

/* --- Stop a messaging DMA --- 
 */
void StopMsgDMA(uint8_t port){
 80074d8:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 80074da:	1e45      	subs	r5, r0, #1
 80074dc:	00ec      	lsls	r4, r5, #3
 80074de:	1b60      	subs	r0, r4, r5
 80074e0:	00c0      	lsls	r0, r0, #3
 80074e2:	4e05      	ldr	r6, [pc, #20]	; (80074f8 <StopMsgDMA+0x20>)
 80074e4:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 80074e6:	f008 fdf4 	bl	80100d2 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 80074ea:	1b64      	subs	r4, r4, r5
 80074ec:	00e4      	lsls	r4, r4, #3
 80074ee:	59a3      	ldr	r3, [r4, r6]
 80074f0:	2200      	movs	r2, #0
 80074f2:	605a      	str	r2, [r3, #4]
}
 80074f4:	bd70      	pop	{r4, r5, r6, pc}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	2000179c 	.word	0x2000179c

080074fc <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 80074fc:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 80074fe:	1e44      	subs	r4, r0, #1
 8007500:	00e5      	lsls	r5, r4, #3
 8007502:	1b28      	subs	r0, r5, r4
 8007504:	00c0      	lsls	r0, r0, #3
 8007506:	4e07      	ldr	r6, [pc, #28]	; (8007524 <StopStreamDMA+0x28>)
 8007508:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800750a:	f008 fde2 	bl	80100d2 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800750e:	1b2d      	subs	r5, r5, r4
 8007510:	00ed      	lsls	r5, r5, #3
 8007512:	59aa      	ldr	r2, [r5, r6]
 8007514:	2300      	movs	r3, #0
 8007516:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 8007518:	00a4      	lsls	r4, r4, #2
 800751a:	4a03      	ldr	r2, [pc, #12]	; (8007528 <StopStreamDMA+0x2c>)
 800751c:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] =0;
 800751e:	4a03      	ldr	r2, [pc, #12]	; (800752c <StopStreamDMA+0x30>)
 8007520:	50a3      	str	r3, [r4, r2]
	
}
 8007522:	bd70      	pop	{r4, r5, r6, pc}
 8007524:	20001994 	.word	0x20001994
 8007528:	20001490 	.word	0x20001490
 800752c:	200014c0 	.word	0x200014c0

08007530 <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 8007530:	b510      	push	{r4, lr}
 8007532:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 8007534:	f7ff ffd0 	bl	80074d8 <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 8007538:	3c01      	subs	r4, #1
 800753a:	00e0      	lsls	r0, r4, #3
 800753c:	1b02      	subs	r2, r0, r4
 800753e:	00d2      	lsls	r2, r2, #3
 8007540:	4903      	ldr	r1, [pc, #12]	; (8007550 <SwitchMsgDMAToStream+0x20>)
 8007542:	5851      	ldr	r1, [r2, r1]
 8007544:	4b03      	ldr	r3, [pc, #12]	; (8007554 <SwitchMsgDMAToStream+0x24>)
 8007546:	18d0      	adds	r0, r2, r3
 8007548:	f004 f94a 	bl	800b7e0 <DMA_STREAM_CH_Init>
}
 800754c:	bd10      	pop	{r4, pc}
 800754e:	46c0      	nop			; (mov r8, r8)
 8007550:	2000179c 	.word	0x2000179c
 8007554:	20001994 	.word	0x20001994

08007558 <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 8007558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800755a:	b083      	sub	sp, #12
 800755c:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 800755e:	f7ff ffcd 	bl	80074fc <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8007562:	9401      	str	r4, [sp, #4]
 8007564:	3c01      	subs	r4, #1
 8007566:	00e7      	lsls	r7, r4, #3
 8007568:	1b3d      	subs	r5, r7, r4
 800756a:	00ed      	lsls	r5, r5, #3
 800756c:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <SwitchStreamDMAToMsg+0x54>)
 800756e:	18ed      	adds	r5, r5, r3
 8007570:	4e0f      	ldr	r6, [pc, #60]	; (80075b0 <SwitchStreamDMAToMsg+0x58>)
 8007572:	1b3b      	subs	r3, r7, r4
 8007574:	00db      	lsls	r3, r3, #3
 8007576:	5999      	ldr	r1, [r3, r6]
 8007578:	0028      	movs	r0, r5
 800757a:	f004 f8b3 	bl	800b6e4 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 800757e:	1b3b      	subs	r3, r7, r4
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	18f3      	adds	r3, r6, r3
 8007584:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007586:	f004 f87d 	bl	800b684 <GetPort>
 800758a:	2300      	movs	r3, #0
 800758c:	4a09      	ldr	r2, [pc, #36]	; (80075b4 <SwitchStreamDMAToMsg+0x5c>)
 800758e:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance =0;
 8007590:	1b3f      	subs	r7, r7, r4
 8007592:	00ff      	lsls	r7, r7, #3
 8007594:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port - 1] =0;
 8007596:	00a4      	lsls	r4, r4, #2
 8007598:	4a07      	ldr	r2, [pc, #28]	; (80075b8 <SwitchStreamDMAToMsg+0x60>)
 800759a:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 800759c:	9801      	ldr	r0, [sp, #4]
 800759e:	f005 fef5 	bl	800d38c <GetUart>
 80075a2:	0029      	movs	r1, r5
 80075a4:	f004 fd10 	bl	800bfc8 <DMA_MSG_RX_Setup>
	
}
 80075a8:	b003      	add	sp, #12
 80075aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ac:	2000179c 	.word	0x2000179c
 80075b0:	20001994 	.word	0x20001994
 80075b4:	200010f8 	.word	0x200010f8
 80075b8:	200014a8 	.word	0x200014a8

080075bc <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 80075bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075be:	0005      	movs	r5, r0
 80075c0:	000e      	movs	r6, r1
 80075c2:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 80075c4:	f004 f85e 	bl	800b684 <GetPort>
 80075c8:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80075ca:	4b0d      	ldr	r3, [pc, #52]	; (8007600 <StartDMAstream+0x44>)
 80075cc:	5c1b      	ldrb	r3, [r3, r0]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d902      	bls.n	80075d8 <StartDMAstream+0x1c>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 80075d2:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d112      	bne.n	80075fe <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 80075d8:	0020      	movs	r0, r4
 80075da:	f7ff ffa9 	bl	8007530 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 80075de:	1e63      	subs	r3, r4, #1
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4a08      	ldr	r2, [pc, #32]	; (8007604 <StartDMAstream+0x48>)
 80075e4:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 80075e6:	4a06      	ldr	r2, [pc, #24]	; (8007600 <StartDMAstream+0x44>)
 80075e8:	2102      	movs	r1, #2
 80075ea:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 80075ec:	4a06      	ldr	r2, [pc, #24]	; (8007608 <StartDMAstream+0x4c>)
 80075ee:	2100      	movs	r1, #0
 80075f0:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80075f2:	003a      	movs	r2, r7
 80075f4:	0031      	movs	r1, r6
 80075f6:	0028      	movs	r0, r5
 80075f8:	f004 fd50 	bl	800c09c <DMA_STREAM_Setup>
	
	return BOS_OK;
 80075fc:	2000      	movs	r0, #0
}
 80075fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007600:	200010f8 	.word	0x200010f8
 8007604:	200014a8 	.word	0x200014a8
 8007608:	20001490 	.word	0x20001490

0800760c <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 8007610:	4b12      	ldr	r3, [pc, #72]	; (800765c <DMA_IRQHandler+0x50>)
 8007612:	5c1b      	ldrb	r3, [r3, r0]
 8007614:	2b02      	cmp	r3, #2
 8007616:	d008      	beq.n	800762a <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 8007618:	3c01      	subs	r4, #1
 800761a:	00e0      	lsls	r0, r4, #3
 800761c:	1b00      	subs	r0, r0, r4
 800761e:	00c0      	lsls	r0, r0, #3
 8007620:	4c0f      	ldr	r4, [pc, #60]	; (8007660 <DMA_IRQHandler+0x54>)
 8007622:	1900      	adds	r0, r0, r4
 8007624:	f008 fd7e 	bl	8010124 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 8007628:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 800762a:	1e45      	subs	r5, r0, #1
 800762c:	00e8      	lsls	r0, r5, #3
 800762e:	1b40      	subs	r0, r0, r5
 8007630:	00c0      	lsls	r0, r0, #3
 8007632:	4b0c      	ldr	r3, [pc, #48]	; (8007664 <DMA_IRQHandler+0x58>)
 8007634:	18c0      	adds	r0, r0, r3
 8007636:	f008 fd75 	bl	8010124 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 800763a:	00aa      	lsls	r2, r5, #2
 800763c:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <DMA_IRQHandler+0x5c>)
 800763e:	58d2      	ldr	r2, [r2, r3]
 8007640:	2a00      	cmp	r2, #0
 8007642:	d006      	beq.n	8007652 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port - 1];
 8007644:	4909      	ldr	r1, [pc, #36]	; (800766c <DMA_IRQHandler+0x60>)
 8007646:	00ad      	lsls	r5, r5, #2
 8007648:	586b      	ldr	r3, [r5, r1]
 800764a:	3301      	adds	r3, #1
 800764c:	506b      	str	r3, [r5, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 800764e:	429a      	cmp	r2, r3
 8007650:	d8ea      	bhi.n	8007628 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007652:	0020      	movs	r0, r4
 8007654:	f7ff ff52 	bl	80074fc <StopStreamDMA>
}
 8007658:	e7e6      	b.n	8007628 <DMA_IRQHandler+0x1c>
 800765a:	46c0      	nop			; (mov r8, r8)
 800765c:	200010f8 	.word	0x200010f8
 8007660:	2000179c 	.word	0x2000179c
 8007664:	20001994 	.word	0x20001994
 8007668:	200014c0 	.word	0x200014c0
 800766c:	20001490 	.word	0x20001490

08007670 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007670:	4b08      	ldr	r3, [pc, #32]	; (8007694 <ResetUartORE+0x24>)
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	2308      	movs	r3, #8
 8007676:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007678:	4a07      	ldr	r2, [pc, #28]	; (8007698 <ResetUartORE+0x28>)
 800767a:	6812      	ldr	r2, [r2, #0]
 800767c:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800767e:	4a07      	ldr	r2, [pc, #28]	; (800769c <ResetUartORE+0x2c>)
 8007680:	6812      	ldr	r2, [r2, #0]
 8007682:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	//__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007684:	4a06      	ldr	r2, [pc, #24]	; (80076a0 <ResetUartORE+0x30>)
 8007686:	6812      	ldr	r2, [r2, #0]
 8007688:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800768a:	4a06      	ldr	r2, [pc, #24]	; (80076a4 <ResetUartORE+0x34>)
 800768c:	6812      	ldr	r2, [r2, #0]
 800768e:	6213      	str	r3, [r2, #32]
#endif
}
 8007690:	4770      	bx	lr
 8007692:	46c0      	nop			; (mov r8, r8)
 8007694:	20006bc4 	.word	0x20006bc4
 8007698:	20006d14 	.word	0x20006d14
 800769c:	20006ae4 	.word	0x20006ae4
 80076a0:	20006b54 	.word	0x20006b54
 80076a4:	20006c34 	.word	0x20006c34

080076a8 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	0006      	movs	r6, r0
 80076ac:	000d      	movs	r5, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 80076ae:	f009 f9a9 	bl	8010a04 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80076b2:	4b2b      	ldr	r3, [pc, #172]	; (8007760 <EE_VerifyPageFullWriteVariable+0xb8>)
 80076b4:	881a      	ldrh	r2, [r3, #0]
 80076b6:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80076b8:	4b2a      	ldr	r3, [pc, #168]	; (8007764 <EE_VerifyPageFullWriteVariable+0xbc>)
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d104      	bne.n	80076cc <EE_VerifyPageFullWriteVariable+0x24>
				if(PageStatusA == RECEIVE_DATA){
 80076c2:	4929      	ldr	r1, [pc, #164]	; (8007768 <EE_VerifyPageFullWriteVariable+0xc0>)
 80076c4:	428a      	cmp	r2, r1
 80076c6:	d007      	beq.n	80076d8 <EE_VerifyPageFullWriteVariable+0x30>
					return PAGEB; /* PageB valid */
 80076c8:	3302      	adds	r3, #2
 80076ca:	e005      	b.n	80076d8 <EE_VerifyPageFullWriteVariable+0x30>
			else if(PageStatusA == VALID_PAGE){
 80076cc:	2a00      	cmp	r2, #0
 80076ce:	d143      	bne.n	8007758 <EE_VerifyPageFullWriteVariable+0xb0>
				if(PageStatusB == RECEIVE_DATA){
 80076d0:	4925      	ldr	r1, [pc, #148]	; (8007768 <EE_VerifyPageFullWriteVariable+0xc0>)
 80076d2:	428b      	cmp	r3, r1
 80076d4:	d042      	beq.n	800775c <EE_VerifyPageFullWriteVariable+0xb4>
					return PAGEA; /* PageA valid */
 80076d6:	0013      	movs	r3, r2
	if(ValidPage == NO_VALID_PAGE){
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 80076d8:	4a24      	ldr	r2, [pc, #144]	; (800776c <EE_VerifyPageFullWriteVariable+0xc4>)
 80076da:	189c      	adds	r4, r3, r2
 80076dc:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 80076de:	02db      	lsls	r3, r3, #11
 80076e0:	4a23      	ldr	r2, [pc, #140]	; (8007770 <EE_VerifyPageFullWriteVariable+0xc8>)
 80076e2:	4694      	mov	ip, r2
 80076e4:	4463      	add	r3, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 80076e6:	6822      	ldr	r2, [r4, #0]
 80076e8:	3201      	adds	r2, #1
 80076ea:	d005      	beq.n	80076f8 <EE_VerifyPageFullWriteVariable+0x50>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 80076ec:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 80076ee:	429c      	cmp	r4, r3
 80076f0:	d22e      	bcs.n	8007750 <EE_VerifyPageFullWriteVariable+0xa8>
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 80076f2:	6822      	ldr	r2, [r4, #0]
 80076f4:	3201      	adds	r2, #1
 80076f6:	d1f9      	bne.n	80076ec <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 80076f8:	002a      	movs	r2, r5
 80076fa:	2300      	movs	r3, #0
 80076fc:	0021      	movs	r1, r4
 80076fe:	2001      	movs	r0, #1
 8007700:	f009 f9ca 	bl	8010a98 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007704:	481b      	ldr	r0, [pc, #108]	; (8007774 <EE_VerifyPageFullWriteVariable+0xcc>)
 8007706:	f009 f999 	bl	8010a3c <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800770a:	2800      	cmp	r0, #0
 800770c:	d003      	beq.n	8007716 <EE_VerifyPageFullWriteVariable+0x6e>
				return pFlash.ErrorCode;
 800770e:	4b1a      	ldr	r3, [pc, #104]	; (8007778 <EE_VerifyPageFullWriteVariable+0xd0>)
 8007710:	69d8      	ldr	r0, [r3, #28]
 8007712:	b280      	uxth	r0, r0
 8007714:	e01f      	b.n	8007756 <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007716:	4a19      	ldr	r2, [pc, #100]	; (800777c <EE_VerifyPageFullWriteVariable+0xd4>)
 8007718:	6913      	ldr	r3, [r2, #16]
 800771a:	2101      	movs	r1, #1
 800771c:	438b      	bics	r3, r1
 800771e:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007720:	1ca1      	adds	r1, r4, #2
 8007722:	0032      	movs	r2, r6
 8007724:	2300      	movs	r3, #0
 8007726:	2001      	movs	r0, #1
 8007728:	f009 f9b6 	bl	8010a98 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800772c:	4811      	ldr	r0, [pc, #68]	; (8007774 <EE_VerifyPageFullWriteVariable+0xcc>)
 800772e:	f009 f985 	bl	8010a3c <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007732:	2800      	cmp	r0, #0
 8007734:	d003      	beq.n	800773e <EE_VerifyPageFullWriteVariable+0x96>
				return pFlash.ErrorCode;
 8007736:	4b10      	ldr	r3, [pc, #64]	; (8007778 <EE_VerifyPageFullWriteVariable+0xd0>)
 8007738:	69d8      	ldr	r0, [r3, #28]
 800773a:	b280      	uxth	r0, r0
 800773c:	e00b      	b.n	8007756 <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800773e:	4a0f      	ldr	r2, [pc, #60]	; (800777c <EE_VerifyPageFullWriteVariable+0xd4>)
 8007740:	6913      	ldr	r3, [r2, #16]
 8007742:	2101      	movs	r1, #1
 8007744:	438b      	bics	r3, r1
 8007746:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 8007748:	4b0b      	ldr	r3, [pc, #44]	; (8007778 <EE_VerifyPageFullWriteVariable+0xd0>)
 800774a:	69d8      	ldr	r0, [r3, #28]
 800774c:	b280      	uxth	r0, r0
 800774e:	e002      	b.n	8007756 <EE_VerifyPageFullWriteVariable+0xae>
		}
	}
	
	HAL_FLASH_Lock();
 8007750:	f009 f96a 	bl	8010a28 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 8007754:	2080      	movs	r0, #128	; 0x80
}
 8007756:	bd70      	pop	{r4, r5, r6, pc}
		return NO_VALID_PAGE;
 8007758:	20ab      	movs	r0, #171	; 0xab
 800775a:	e7fc      	b.n	8007756 <EE_VerifyPageFullWriteVariable+0xae>
					return PAGEB; /* PageB valid */
 800775c:	2302      	movs	r3, #2
 800775e:	e7bb      	b.n	80076d8 <EE_VerifyPageFullWriteVariable+0x30>
 8007760:	0801e000 	.word	0x0801e000
 8007764:	0801f000 	.word	0x0801f000
 8007768:	0000eeee 	.word	0x0000eeee
 800776c:	0001003c 	.word	0x0001003c
 8007770:	0801effe 	.word	0x0801effe
 8007774:	0000c350 	.word	0x0000c350
 8007778:	20006eb8 	.word	0x20006eb8
 800777c:	40022000 	.word	0x40022000

08007780 <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 8007780:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007782:	4b13      	ldr	r3, [pc, #76]	; (80077d0 <EE_ReadVariable+0x50>)
 8007784:	881c      	ldrh	r4, [r3, #0]
 8007786:	b2a4      	uxth	r4, r4
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007788:	4b12      	ldr	r3, [pc, #72]	; (80077d4 <EE_ReadVariable+0x54>)
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800778e:	2c00      	cmp	r4, #0
 8007790:	d006      	beq.n	80077a0 <EE_ReadVariable+0x20>
			else if(PageStatusB == VALID_PAGE){
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <EE_ReadVariable+0x1e>
		return NO_VALID_PAGE;
 8007796:	20ab      	movs	r0, #171	; 0xab
 8007798:	e019      	b.n	80077ce <EE_ReadVariable+0x4e>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800779a:	2001      	movs	r0, #1
 800779c:	e017      	b.n	80077ce <EE_ReadVariable+0x4e>
				return PAGEB; /* PageB valid */
 800779e:	2402      	movs	r4, #2
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 80077a0:	02e3      	lsls	r3, r4, #11
 80077a2:	4a0d      	ldr	r2, [pc, #52]	; (80077d8 <EE_ReadVariable+0x58>)
 80077a4:	4694      	mov	ip, r2
 80077a6:	4463      	add	r3, ip
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 80077a8:	02e4      	lsls	r4, r4, #11
	while(Address > (PageStartAddress + 2)){
 80077aa:	4a0c      	ldr	r2, [pc, #48]	; (80077dc <EE_ReadVariable+0x5c>)
 80077ac:	4694      	mov	ip, r2
 80077ae:	4464      	add	r4, ip
		AddressValue =(*(__IO uint16_t* )Address);
 80077b0:	881a      	ldrh	r2, [r3, #0]
 80077b2:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 80077b4:	4290      	cmp	r0, r2
 80077b6:	d006      	beq.n	80077c6 <EE_ReadVariable+0x46>
			Address =Address - 4;
 80077b8:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 80077ba:	42a3      	cmp	r3, r4
 80077bc:	d9ed      	bls.n	800779a <EE_ReadVariable+0x1a>
		AddressValue =(*(__IO uint16_t* )Address);
 80077be:	881a      	ldrh	r2, [r3, #0]
 80077c0:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 80077c2:	4282      	cmp	r2, r0
 80077c4:	d1f8      	bne.n	80077b8 <EE_ReadVariable+0x38>
			*Data =(*(__IO uint16_t* )(Address - 2));
 80077c6:	3b02      	subs	r3, #2
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	800b      	strh	r3, [r1, #0]
			ReadStatus =0;
 80077cc:	2000      	movs	r0, #0
}
 80077ce:	bd10      	pop	{r4, pc}
 80077d0:	0801e000 	.word	0x0801e000
 80077d4:	0801f000 	.word	0x0801f000
 80077d8:	0801effe 	.word	0x0801effe
 80077dc:	0801e002 	.word	0x0801e002

080077e0 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 80077e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077e2:	46de      	mov	lr, fp
 80077e4:	4647      	mov	r7, r8
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b083      	sub	sp, #12
 80077ea:	0005      	movs	r5, r0
 80077ec:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 80077ee:	f009 f909 	bl	8010a04 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 80077f2:	0031      	movs	r1, r6
 80077f4:	0028      	movs	r0, r5
 80077f6:	f7ff ff57 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 80077fa:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 80077fc:	2880      	cmp	r0, #128	; 0x80
 80077fe:	d007      	beq.n	8007810 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 8007800:	f009 f912 	bl	8010a28 <HAL_FLASH_Lock>
}
 8007804:	0020      	movs	r0, r4
 8007806:	b003      	add	sp, #12
 8007808:	bc0c      	pop	{r2, r3}
 800780a:	4690      	mov	r8, r2
 800780c:	469b      	mov	fp, r3
 800780e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 8007810:	f009 f8f8 	bl	8010a04 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007814:	4b3e      	ldr	r3, [pc, #248]	; (8007910 <EE_WriteVariable+0x130>)
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800781a:	4a3e      	ldr	r2, [pc, #248]	; (8007914 <EE_WriteVariable+0x134>)
 800781c:	8812      	ldrh	r2, [r2, #0]
 800781e:	b292      	uxth	r2, r2
			if(PageStatusA == VALID_PAGE){
 8007820:	2b00      	cmp	r3, #0
 8007822:	d007      	beq.n	8007834 <EE_WriteVariable+0x54>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 8007824:	342b      	adds	r4, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 8007826:	2a00      	cmp	r2, #0
 8007828:	d1ea      	bne.n	8007800 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800782a:	4b3a      	ldr	r3, [pc, #232]	; (8007914 <EE_WriteVariable+0x134>)
 800782c:	469b      	mov	fp, r3
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800782e:	4b38      	ldr	r3, [pc, #224]	; (8007910 <EE_WriteVariable+0x130>)
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	e003      	b.n	800783c <EE_WriteVariable+0x5c>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007834:	4b36      	ldr	r3, [pc, #216]	; (8007910 <EE_WriteVariable+0x130>)
 8007836:	469b      	mov	fp, r3
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007838:	4b36      	ldr	r3, [pc, #216]	; (8007914 <EE_WriteVariable+0x134>)
 800783a:	9301      	str	r3, [sp, #4]
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800783c:	4a36      	ldr	r2, [pc, #216]	; (8007918 <EE_WriteVariable+0x138>)
 800783e:	2300      	movs	r3, #0
 8007840:	9901      	ldr	r1, [sp, #4]
 8007842:	2001      	movs	r0, #1
 8007844:	f009 f928 	bl	8010a98 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007848:	4834      	ldr	r0, [pc, #208]	; (800791c <EE_WriteVariable+0x13c>)
 800784a:	f009 f8f7 	bl	8010a3c <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800784e:	2800      	cmp	r0, #0
 8007850:	d003      	beq.n	800785a <EE_WriteVariable+0x7a>
		return pFlash.ErrorCode;
 8007852:	4b33      	ldr	r3, [pc, #204]	; (8007920 <EE_WriteVariable+0x140>)
 8007854:	69dc      	ldr	r4, [r3, #28]
 8007856:	b2a4      	uxth	r4, r4
 8007858:	e7d2      	b.n	8007800 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800785a:	4a32      	ldr	r2, [pc, #200]	; (8007924 <EE_WriteVariable+0x144>)
 800785c:	6913      	ldr	r3, [r2, #16]
 800785e:	2101      	movs	r1, #1
 8007860:	438b      	bics	r3, r1
 8007862:	6113      	str	r3, [r2, #16]
	}
	
	/* Write the variable passed as parameter in the new active page */
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007864:	0031      	movs	r1, r6
 8007866:	0028      	movs	r0, r5
 8007868:	f7ff ff1e 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 800786c:	1e04      	subs	r4, r0, #0
	/* If program operation was failed, a Flash error code is returned */
	if(EepromStatus != HAL_OK){
 800786e:	d1c7      	bne.n	8007800 <EE_WriteVariable+0x20>
		return EepromStatus;
	}
	
	/* Transfer process: transfer variables from old to the new active page */
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007870:	2701      	movs	r7, #1
			/* Read the other last variable updates */
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
			/* In case variable corresponding to the virtual address was found */
			if(ReadStatus != 0x1){
				/* Transfer the variable to the new active page */
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007872:	4b2d      	ldr	r3, [pc, #180]	; (8007928 <EE_WriteVariable+0x148>)
 8007874:	4698      	mov	r8, r3
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007876:	4e2d      	ldr	r6, [pc, #180]	; (800792c <EE_WriteVariable+0x14c>)
 8007878:	e003      	b.n	8007882 <EE_WriteVariable+0xa2>
 800787a:	3701      	adds	r7, #1
 800787c:	b2bf      	uxth	r7, r7
 800787e:	42b7      	cmp	r7, r6
 8007880:	d00f      	beq.n	80078a2 <EE_WriteVariable+0xc2>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 8007882:	42bd      	cmp	r5, r7
 8007884:	d0f9      	beq.n	800787a <EE_WriteVariable+0x9a>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007886:	4928      	ldr	r1, [pc, #160]	; (8007928 <EE_WriteVariable+0x148>)
 8007888:	0038      	movs	r0, r7
 800788a:	f7ff ff79 	bl	8007780 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800788e:	2801      	cmp	r0, #1
 8007890:	d0f3      	beq.n	800787a <EE_WriteVariable+0x9a>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007892:	4643      	mov	r3, r8
 8007894:	8819      	ldrh	r1, [r3, #0]
 8007896:	0038      	movs	r0, r7
 8007898:	f7ff ff06 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 800789c:	1e04      	subs	r4, r0, #0
				/* If program operation was failed, a Flash error code is returned */
				if(EepromStatus != HAL_OK){
 800789e:	d0ec      	beq.n	800787a <EE_WriteVariable+0x9a>
 80078a0:	e7ae      	b.n	8007800 <EE_WriteVariable+0x20>
			}
		}
	}
	
	/* Erase the old Page: Set old Page status to ERASED status */
	FLASH_PageErase(OldPageAddress);
 80078a2:	4658      	mov	r0, fp
 80078a4:	f009 f970 	bl	8010b88 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078a8:	481c      	ldr	r0, [pc, #112]	; (800791c <EE_WriteVariable+0x13c>)
 80078aa:	f009 f8c7 	bl	8010a3c <FLASH_WaitForLastOperation>
	/* If erase operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d003      	beq.n	80078ba <EE_WriteVariable+0xda>
		return pFlash.ErrorCode;
 80078b2:	4b1b      	ldr	r3, [pc, #108]	; (8007920 <EE_WriteVariable+0x140>)
 80078b4:	69dc      	ldr	r4, [r3, #28]
 80078b6:	b2a4      	uxth	r4, r4
 80078b8:	e7a2      	b.n	8007800 <EE_WriteVariable+0x20>
	}
	else{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 80078ba:	2080      	movs	r0, #128	; 0x80
 80078bc:	0100      	lsls	r0, r0, #4
 80078be:	4458      	add	r0, fp
 80078c0:	f009 f962 	bl	8010b88 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078c4:	4815      	ldr	r0, [pc, #84]	; (800791c <EE_WriteVariable+0x13c>)
 80078c6:	f009 f8b9 	bl	8010a3c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d003      	beq.n	80078d6 <EE_WriteVariable+0xf6>
			return pFlash.ErrorCode;
 80078ce:	4b14      	ldr	r3, [pc, #80]	; (8007920 <EE_WriteVariable+0x140>)
 80078d0:	69dc      	ldr	r4, [r3, #28]
 80078d2:	b2a4      	uxth	r4, r4
 80078d4:	e794      	b.n	8007800 <EE_WriteVariable+0x20>
		}
		else{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80078d6:	4a13      	ldr	r2, [pc, #76]	; (8007924 <EE_WriteVariable+0x144>)
 80078d8:	6913      	ldr	r3, [r2, #16]
 80078da:	2102      	movs	r1, #2
 80078dc:	438b      	bics	r3, r1
 80078de:	6113      	str	r3, [r2, #16]
		}
	}
	
	/* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 80078e0:	2200      	movs	r2, #0
 80078e2:	2300      	movs	r3, #0
 80078e4:	9901      	ldr	r1, [sp, #4]
 80078e6:	2001      	movs	r0, #1
 80078e8:	f009 f8d6 	bl	8010a98 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078ec:	480b      	ldr	r0, [pc, #44]	; (800791c <EE_WriteVariable+0x13c>)
 80078ee:	f009 f8a5 	bl	8010a3c <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d003      	beq.n	80078fe <EE_WriteVariable+0x11e>
		return pFlash.ErrorCode;
 80078f6:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <EE_WriteVariable+0x140>)
 80078f8:	69dc      	ldr	r4, [r3, #28]
 80078fa:	b2a4      	uxth	r4, r4
 80078fc:	e780      	b.n	8007800 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80078fe:	4a09      	ldr	r2, [pc, #36]	; (8007924 <EE_WriteVariable+0x144>)
 8007900:	6913      	ldr	r3, [r2, #16]
 8007902:	2101      	movs	r1, #1
 8007904:	438b      	bics	r3, r1
 8007906:	6113      	str	r3, [r2, #16]
	}
	
	HAL_FLASH_Lock();
 8007908:	f009 f88e 	bl	8010a28 <HAL_FLASH_Lock>
	
	/* Return last operation flash status */
	return FlashStatus;
 800790c:	2400      	movs	r4, #0
 800790e:	e777      	b.n	8007800 <EE_WriteVariable+0x20>
 8007910:	0801e000 	.word	0x0801e000
 8007914:	0801f000 	.word	0x0801f000
 8007918:	0000eeee 	.word	0x0000eeee
 800791c:	0000c350 	.word	0x0000c350
 8007920:	20006eb8 	.word	0x20006eb8
 8007924:	40022000 	.word	0x40022000
 8007928:	200014d8 	.word	0x200014d8
 800792c:	00000401 	.word	0x00000401

08007930 <EE_Format>:
uint16_t EE_Format(void){
 8007930:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8007932:	f009 f867 	bl	8010a04 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007936:	4829      	ldr	r0, [pc, #164]	; (80079dc <EE_Format+0xac>)
 8007938:	f009 f926 	bl	8010b88 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800793c:	4828      	ldr	r0, [pc, #160]	; (80079e0 <EE_Format+0xb0>)
 800793e:	f009 f87d 	bl	8010a3c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007942:	2800      	cmp	r0, #0
 8007944:	d003      	beq.n	800794e <EE_Format+0x1e>
		return pFlash.ErrorCode;
 8007946:	4b27      	ldr	r3, [pc, #156]	; (80079e4 <EE_Format+0xb4>)
 8007948:	69d8      	ldr	r0, [r3, #28]
 800794a:	b280      	uxth	r0, r0
}
 800794c:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800794e:	4826      	ldr	r0, [pc, #152]	; (80079e8 <EE_Format+0xb8>)
 8007950:	f009 f91a 	bl	8010b88 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007954:	4822      	ldr	r0, [pc, #136]	; (80079e0 <EE_Format+0xb0>)
 8007956:	f009 f871 	bl	8010a3c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800795a:	2800      	cmp	r0, #0
 800795c:	d003      	beq.n	8007966 <EE_Format+0x36>
			return pFlash.ErrorCode;
 800795e:	4b21      	ldr	r3, [pc, #132]	; (80079e4 <EE_Format+0xb4>)
 8007960:	69d8      	ldr	r0, [r3, #28]
 8007962:	b280      	uxth	r0, r0
 8007964:	e7f2      	b.n	800794c <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007966:	4a21      	ldr	r2, [pc, #132]	; (80079ec <EE_Format+0xbc>)
 8007968:	6913      	ldr	r3, [r2, #16]
 800796a:	2102      	movs	r1, #2
 800796c:	438b      	bics	r3, r1
 800796e:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007970:	2200      	movs	r2, #0
 8007972:	2300      	movs	r3, #0
 8007974:	4919      	ldr	r1, [pc, #100]	; (80079dc <EE_Format+0xac>)
 8007976:	2001      	movs	r0, #1
 8007978:	f009 f88e 	bl	8010a98 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800797c:	4818      	ldr	r0, [pc, #96]	; (80079e0 <EE_Format+0xb0>)
 800797e:	f009 f85d 	bl	8010a3c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007982:	2800      	cmp	r0, #0
 8007984:	d003      	beq.n	800798e <EE_Format+0x5e>
		return pFlash.ErrorCode;
 8007986:	4b17      	ldr	r3, [pc, #92]	; (80079e4 <EE_Format+0xb4>)
 8007988:	69d8      	ldr	r0, [r3, #28]
 800798a:	b280      	uxth	r0, r0
 800798c:	e7de      	b.n	800794c <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800798e:	4a17      	ldr	r2, [pc, #92]	; (80079ec <EE_Format+0xbc>)
 8007990:	6913      	ldr	r3, [r2, #16]
 8007992:	2101      	movs	r1, #1
 8007994:	438b      	bics	r3, r1
 8007996:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007998:	4815      	ldr	r0, [pc, #84]	; (80079f0 <EE_Format+0xc0>)
 800799a:	f009 f8f5 	bl	8010b88 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800799e:	4810      	ldr	r0, [pc, #64]	; (80079e0 <EE_Format+0xb0>)
 80079a0:	f009 f84c 	bl	8010a3c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d003      	beq.n	80079b0 <EE_Format+0x80>
		return pFlash.ErrorCode;
 80079a8:	4b0e      	ldr	r3, [pc, #56]	; (80079e4 <EE_Format+0xb4>)
 80079aa:	69d8      	ldr	r0, [r3, #28]
 80079ac:	b280      	uxth	r0, r0
 80079ae:	e7cd      	b.n	800794c <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80079b0:	4810      	ldr	r0, [pc, #64]	; (80079f4 <EE_Format+0xc4>)
 80079b2:	f009 f8e9 	bl	8010b88 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079b6:	480a      	ldr	r0, [pc, #40]	; (80079e0 <EE_Format+0xb0>)
 80079b8:	f009 f840 	bl	8010a3c <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 80079bc:	2800      	cmp	r0, #0
 80079be:	d003      	beq.n	80079c8 <EE_Format+0x98>
			return pFlash.ErrorCode;
 80079c0:	4b08      	ldr	r3, [pc, #32]	; (80079e4 <EE_Format+0xb4>)
 80079c2:	69d8      	ldr	r0, [r3, #28]
 80079c4:	b280      	uxth	r0, r0
 80079c6:	e7c1      	b.n	800794c <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80079c8:	4a08      	ldr	r2, [pc, #32]	; (80079ec <EE_Format+0xbc>)
 80079ca:	6913      	ldr	r3, [r2, #16]
 80079cc:	2101      	movs	r1, #1
 80079ce:	438b      	bics	r3, r1
 80079d0:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 80079d2:	f009 f829 	bl	8010a28 <HAL_FLASH_Lock>
	return FlashStatus;
 80079d6:	2000      	movs	r0, #0
 80079d8:	e7b8      	b.n	800794c <EE_Format+0x1c>
 80079da:	46c0      	nop			; (mov r8, r8)
 80079dc:	0801e000 	.word	0x0801e000
 80079e0:	0000c350 	.word	0x0000c350
 80079e4:	20006eb8 	.word	0x20006eb8
 80079e8:	0801e800 	.word	0x0801e800
 80079ec:	40022000 	.word	0x40022000
 80079f0:	0801f000 	.word	0x0801f000
 80079f4:	0801f800 	.word	0x0801f800

080079f8 <EE_Init>:
uint16_t EE_Init(void){
 80079f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079fa:	46c6      	mov	lr, r8
 80079fc:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 80079fe:	f009 f801 	bl	8010a04 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a02:	4bbe      	ldr	r3, [pc, #760]	; (8007cfc <EE_Init+0x304>)
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a08:	4abd      	ldr	r2, [pc, #756]	; (8007d00 <EE_Init+0x308>)
 8007a0a:	8812      	ldrh	r2, [r2, #0]
 8007a0c:	b292      	uxth	r2, r2
	switch(PageStatusA){
 8007a0e:	49bd      	ldr	r1, [pc, #756]	; (8007d04 <EE_Init+0x30c>)
 8007a10:	428b      	cmp	r3, r1
 8007a12:	d100      	bne.n	8007a16 <EE_Init+0x1e>
 8007a14:	e074      	b.n	8007b00 <EE_Init+0x108>
 8007a16:	49bc      	ldr	r1, [pc, #752]	; (8007d08 <EE_Init+0x310>)
 8007a18:	428b      	cmp	r3, r1
 8007a1a:	d011      	beq.n	8007a40 <EE_Init+0x48>
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d100      	bne.n	8007a22 <EE_Init+0x2a>
 8007a20:	e109      	b.n	8007c36 <EE_Init+0x23e>
			FlashStatus =EE_Format();
 8007a22:	f7ff ff85 	bl	8007930 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a26:	48b9      	ldr	r0, [pc, #740]	; (8007d0c <EE_Init+0x314>)
 8007a28:	f009 f808 	bl	8010a3c <FLASH_WaitForLastOperation>
 8007a2c:	b286      	uxth	r6, r0
			if(FlashStatus != HAL_OK){
 8007a2e:	2e00      	cmp	r6, #0
 8007a30:	d102      	bne.n	8007a38 <EE_Init+0x40>
	HAL_FLASH_Lock();
 8007a32:	f008 fff9 	bl	8010a28 <HAL_FLASH_Lock>
	return HAL_OK;
 8007a36:	2600      	movs	r6, #0
}
 8007a38:	0030      	movs	r0, r6
 8007a3a:	bc04      	pop	{r2}
 8007a3c:	4690      	mov	r8, r2
 8007a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007a40:	2a00      	cmp	r2, #0
 8007a42:	d00d      	beq.n	8007a60 <EE_Init+0x68>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007a44:	4baf      	ldr	r3, [pc, #700]	; (8007d04 <EE_Init+0x30c>)
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d028      	beq.n	8007a9c <EE_Init+0xa4>
				FlashStatus =EE_Format();
 8007a4a:	f7ff ff71 	bl	8007930 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a4e:	48af      	ldr	r0, [pc, #700]	; (8007d0c <EE_Init+0x314>)
 8007a50:	f008 fff4 	bl	8010a3c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d0ec      	beq.n	8007a32 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007a58:	4bad      	ldr	r3, [pc, #692]	; (8007d10 <EE_Init+0x318>)
 8007a5a:	69de      	ldr	r6, [r3, #28]
 8007a5c:	b2b6      	uxth	r6, r6
 8007a5e:	e7eb      	b.n	8007a38 <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007a60:	48a6      	ldr	r0, [pc, #664]	; (8007cfc <EE_Init+0x304>)
 8007a62:	f009 f891 	bl	8010b88 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a66:	48a9      	ldr	r0, [pc, #676]	; (8007d0c <EE_Init+0x314>)
 8007a68:	f008 ffe8 	bl	8010a3c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d003      	beq.n	8007a78 <EE_Init+0x80>
					return pFlash.ErrorCode;
 8007a70:	4ba7      	ldr	r3, [pc, #668]	; (8007d10 <EE_Init+0x318>)
 8007a72:	69de      	ldr	r6, [r3, #28]
 8007a74:	b2b6      	uxth	r6, r6
 8007a76:	e7df      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007a78:	48a6      	ldr	r0, [pc, #664]	; (8007d14 <EE_Init+0x31c>)
 8007a7a:	f009 f885 	bl	8010b88 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a7e:	48a3      	ldr	r0, [pc, #652]	; (8007d0c <EE_Init+0x314>)
 8007a80:	f008 ffdc 	bl	8010a3c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d105      	bne.n	8007a94 <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007a88:	4aa3      	ldr	r2, [pc, #652]	; (8007d18 <EE_Init+0x320>)
 8007a8a:	6913      	ldr	r3, [r2, #16]
 8007a8c:	2102      	movs	r1, #2
 8007a8e:	438b      	bics	r3, r1
 8007a90:	6113      	str	r3, [r2, #16]
 8007a92:	e7ce      	b.n	8007a32 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007a94:	4b9e      	ldr	r3, [pc, #632]	; (8007d10 <EE_Init+0x318>)
 8007a96:	69de      	ldr	r6, [r3, #28]
 8007a98:	b2b6      	uxth	r6, r6
 8007a9a:	e7cd      	b.n	8007a38 <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007a9c:	4897      	ldr	r0, [pc, #604]	; (8007cfc <EE_Init+0x304>)
 8007a9e:	f009 f873 	bl	8010b88 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007aa2:	489a      	ldr	r0, [pc, #616]	; (8007d0c <EE_Init+0x314>)
 8007aa4:	f008 ffca 	bl	8010a3c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d003      	beq.n	8007ab4 <EE_Init+0xbc>
					return pFlash.ErrorCode;
 8007aac:	4b98      	ldr	r3, [pc, #608]	; (8007d10 <EE_Init+0x318>)
 8007aae:	69de      	ldr	r6, [r3, #28]
 8007ab0:	b2b6      	uxth	r6, r6
 8007ab2:	e7c1      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007ab4:	4897      	ldr	r0, [pc, #604]	; (8007d14 <EE_Init+0x31c>)
 8007ab6:	f009 f867 	bl	8010b88 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007aba:	4894      	ldr	r0, [pc, #592]	; (8007d0c <EE_Init+0x314>)
 8007abc:	f008 ffbe 	bl	8010a3c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d003      	beq.n	8007acc <EE_Init+0xd4>
						return pFlash.ErrorCode;
 8007ac4:	4b92      	ldr	r3, [pc, #584]	; (8007d10 <EE_Init+0x318>)
 8007ac6:	69de      	ldr	r6, [r3, #28]
 8007ac8:	b2b6      	uxth	r6, r6
 8007aca:	e7b5      	b.n	8007a38 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007acc:	4a92      	ldr	r2, [pc, #584]	; (8007d18 <EE_Init+0x320>)
 8007ace:	6913      	ldr	r3, [r2, #16]
 8007ad0:	2102      	movs	r1, #2
 8007ad2:	438b      	bics	r3, r1
 8007ad4:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2300      	movs	r3, #0
 8007ada:	4989      	ldr	r1, [pc, #548]	; (8007d00 <EE_Init+0x308>)
 8007adc:	2001      	movs	r0, #1
 8007ade:	f008 ffdb 	bl	8010a98 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ae2:	488a      	ldr	r0, [pc, #552]	; (8007d0c <EE_Init+0x314>)
 8007ae4:	f008 ffaa 	bl	8010a3c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d105      	bne.n	8007af8 <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007aec:	4a8a      	ldr	r2, [pc, #552]	; (8007d18 <EE_Init+0x320>)
 8007aee:	6913      	ldr	r3, [r2, #16]
 8007af0:	2101      	movs	r1, #1
 8007af2:	438b      	bics	r3, r1
 8007af4:	6113      	str	r3, [r2, #16]
 8007af6:	e79c      	b.n	8007a32 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007af8:	4b85      	ldr	r3, [pc, #532]	; (8007d10 <EE_Init+0x318>)
 8007afa:	69de      	ldr	r6, [r3, #28]
 8007afc:	b2b6      	uxth	r6, r6
 8007afe:	e79b      	b.n	8007a38 <EE_Init+0x40>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007b00:	2a00      	cmp	r2, #0
 8007b02:	d157      	bne.n	8007bb4 <EE_Init+0x1bc>
 8007b04:	2401      	movs	r4, #1
	int16_t x =-1;
 8007b06:	2701      	movs	r7, #1
 8007b08:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b0a:	4d84      	ldr	r5, [pc, #528]	; (8007d1c <EE_Init+0x324>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007b0c:	4b84      	ldr	r3, [pc, #528]	; (8007d20 <EE_Init+0x328>)
 8007b0e:	4698      	mov	r8, r3
 8007b10:	e005      	b.n	8007b1e <EE_Init+0x126>
						x =VarIdx;
 8007b12:	b227      	sxth	r7, r4
 8007b14:	e008      	b.n	8007b28 <EE_Init+0x130>
 8007b16:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007b18:	4b82      	ldr	r3, [pc, #520]	; (8007d24 <EE_Init+0x32c>)
 8007b1a:	429c      	cmp	r4, r3
 8007b1c:	d018      	beq.n	8007b50 <EE_Init+0x158>
 8007b1e:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b20:	882b      	ldrh	r3, [r5, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	42b3      	cmp	r3, r6
 8007b26:	d0f4      	beq.n	8007b12 <EE_Init+0x11a>
					if(VarIdx != x){
 8007b28:	42bc      	cmp	r4, r7
 8007b2a:	d0f4      	beq.n	8007b16 <EE_Init+0x11e>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b2c:	497c      	ldr	r1, [pc, #496]	; (8007d20 <EE_Init+0x328>)
 8007b2e:	0030      	movs	r0, r6
 8007b30:	f7ff fe26 	bl	8007780 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007b34:	2801      	cmp	r0, #1
 8007b36:	d0ee      	beq.n	8007b16 <EE_Init+0x11e>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007b38:	4643      	mov	r3, r8
 8007b3a:	8819      	ldrh	r1, [r3, #0]
 8007b3c:	0030      	movs	r0, r6
 8007b3e:	f7ff fdb3 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 8007b42:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b44:	4871      	ldr	r0, [pc, #452]	; (8007d0c <EE_Init+0x314>)
 8007b46:	f008 ff79 	bl	8010a3c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d0e3      	beq.n	8007b16 <EE_Init+0x11e>
 8007b4e:	e773      	b.n	8007a38 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007b50:	2200      	movs	r2, #0
 8007b52:	2300      	movs	r3, #0
 8007b54:	4969      	ldr	r1, [pc, #420]	; (8007cfc <EE_Init+0x304>)
 8007b56:	2001      	movs	r0, #1
 8007b58:	f008 ff9e 	bl	8010a98 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b5c:	486b      	ldr	r0, [pc, #428]	; (8007d0c <EE_Init+0x314>)
 8007b5e:	f008 ff6d 	bl	8010a3c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d003      	beq.n	8007b6e <EE_Init+0x176>
					return pFlash.ErrorCode;
 8007b66:	4b6a      	ldr	r3, [pc, #424]	; (8007d10 <EE_Init+0x318>)
 8007b68:	69de      	ldr	r6, [r3, #28]
 8007b6a:	b2b6      	uxth	r6, r6
 8007b6c:	e764      	b.n	8007a38 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b6e:	4a6a      	ldr	r2, [pc, #424]	; (8007d18 <EE_Init+0x320>)
 8007b70:	6913      	ldr	r3, [r2, #16]
 8007b72:	2101      	movs	r1, #1
 8007b74:	438b      	bics	r3, r1
 8007b76:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007b78:	4861      	ldr	r0, [pc, #388]	; (8007d00 <EE_Init+0x308>)
 8007b7a:	f009 f805 	bl	8010b88 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b7e:	4863      	ldr	r0, [pc, #396]	; (8007d0c <EE_Init+0x314>)
 8007b80:	f008 ff5c 	bl	8010a3c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d003      	beq.n	8007b90 <EE_Init+0x198>
					return pFlash.ErrorCode;
 8007b88:	4b61      	ldr	r3, [pc, #388]	; (8007d10 <EE_Init+0x318>)
 8007b8a:	69de      	ldr	r6, [r3, #28]
 8007b8c:	b2b6      	uxth	r6, r6
 8007b8e:	e753      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007b90:	4865      	ldr	r0, [pc, #404]	; (8007d28 <EE_Init+0x330>)
 8007b92:	f008 fff9 	bl	8010b88 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b96:	485d      	ldr	r0, [pc, #372]	; (8007d0c <EE_Init+0x314>)
 8007b98:	f008 ff50 	bl	8010a3c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d105      	bne.n	8007bac <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007ba0:	4a5d      	ldr	r2, [pc, #372]	; (8007d18 <EE_Init+0x320>)
 8007ba2:	6913      	ldr	r3, [r2, #16]
 8007ba4:	2102      	movs	r1, #2
 8007ba6:	438b      	bics	r3, r1
 8007ba8:	6113      	str	r3, [r2, #16]
 8007baa:	e742      	b.n	8007a32 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007bac:	4b58      	ldr	r3, [pc, #352]	; (8007d10 <EE_Init+0x318>)
 8007bae:	69de      	ldr	r6, [r3, #28]
 8007bb0:	b2b6      	uxth	r6, r6
 8007bb2:	e741      	b.n	8007a38 <EE_Init+0x40>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007bb4:	4b54      	ldr	r3, [pc, #336]	; (8007d08 <EE_Init+0x310>)
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d00b      	beq.n	8007bd2 <EE_Init+0x1da>
				FlashStatus =EE_Format();
 8007bba:	f7ff feb9 	bl	8007930 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bbe:	4853      	ldr	r0, [pc, #332]	; (8007d0c <EE_Init+0x314>)
 8007bc0:	f008 ff3c 	bl	8010a3c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d100      	bne.n	8007bca <EE_Init+0x1d2>
 8007bc8:	e733      	b.n	8007a32 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007bca:	4b51      	ldr	r3, [pc, #324]	; (8007d10 <EE_Init+0x318>)
 8007bcc:	69de      	ldr	r6, [r3, #28]
 8007bce:	b2b6      	uxth	r6, r6
 8007bd0:	e732      	b.n	8007a38 <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007bd2:	484b      	ldr	r0, [pc, #300]	; (8007d00 <EE_Init+0x308>)
 8007bd4:	f008 ffd8 	bl	8010b88 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bd8:	484c      	ldr	r0, [pc, #304]	; (8007d0c <EE_Init+0x314>)
 8007bda:	f008 ff2f 	bl	8010a3c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d003      	beq.n	8007bea <EE_Init+0x1f2>
					return pFlash.ErrorCode;
 8007be2:	4b4b      	ldr	r3, [pc, #300]	; (8007d10 <EE_Init+0x318>)
 8007be4:	69de      	ldr	r6, [r3, #28]
 8007be6:	b2b6      	uxth	r6, r6
 8007be8:	e726      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007bea:	484f      	ldr	r0, [pc, #316]	; (8007d28 <EE_Init+0x330>)
 8007bec:	f008 ffcc 	bl	8010b88 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bf0:	4846      	ldr	r0, [pc, #280]	; (8007d0c <EE_Init+0x314>)
 8007bf2:	f008 ff23 	bl	8010a3c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d003      	beq.n	8007c02 <EE_Init+0x20a>
						return pFlash.ErrorCode;
 8007bfa:	4b45      	ldr	r3, [pc, #276]	; (8007d10 <EE_Init+0x318>)
 8007bfc:	69de      	ldr	r6, [r3, #28]
 8007bfe:	b2b6      	uxth	r6, r6
 8007c00:	e71a      	b.n	8007a38 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c02:	4a45      	ldr	r2, [pc, #276]	; (8007d18 <EE_Init+0x320>)
 8007c04:	6913      	ldr	r3, [r2, #16]
 8007c06:	2102      	movs	r1, #2
 8007c08:	438b      	bics	r3, r1
 8007c0a:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2300      	movs	r3, #0
 8007c10:	493a      	ldr	r1, [pc, #232]	; (8007cfc <EE_Init+0x304>)
 8007c12:	2001      	movs	r0, #1
 8007c14:	f008 ff40 	bl	8010a98 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c18:	483c      	ldr	r0, [pc, #240]	; (8007d0c <EE_Init+0x314>)
 8007c1a:	f008 ff0f 	bl	8010a3c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d003      	beq.n	8007c2a <EE_Init+0x232>
					return pFlash.ErrorCode;
 8007c22:	4b3b      	ldr	r3, [pc, #236]	; (8007d10 <EE_Init+0x318>)
 8007c24:	69de      	ldr	r6, [r3, #28]
 8007c26:	b2b6      	uxth	r6, r6
 8007c28:	e706      	b.n	8007a38 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c2a:	4a3b      	ldr	r2, [pc, #236]	; (8007d18 <EE_Init+0x320>)
 8007c2c:	6913      	ldr	r3, [r2, #16]
 8007c2e:	2101      	movs	r1, #1
 8007c30:	438b      	bics	r3, r1
 8007c32:	6113      	str	r3, [r2, #16]
 8007c34:	e6fd      	b.n	8007a32 <EE_Init+0x3a>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007c36:	2a00      	cmp	r2, #0
 8007c38:	d009      	beq.n	8007c4e <EE_Init+0x256>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007c3a:	4b33      	ldr	r3, [pc, #204]	; (8007d08 <EE_Init+0x310>)
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d010      	beq.n	8007c62 <EE_Init+0x26a>
 8007c40:	2401      	movs	r4, #1
	int16_t x =-1;
 8007c42:	2701      	movs	r7, #1
 8007c44:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007c46:	4d39      	ldr	r5, [pc, #228]	; (8007d2c <EE_Init+0x334>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007c48:	4b35      	ldr	r3, [pc, #212]	; (8007d20 <EE_Init+0x328>)
 8007c4a:	4698      	mov	r8, r3
 8007c4c:	e02d      	b.n	8007caa <EE_Init+0x2b2>
				FlashStatus =EE_Format();
 8007c4e:	f7ff fe6f 	bl	8007930 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c52:	482e      	ldr	r0, [pc, #184]	; (8007d0c <EE_Init+0x314>)
 8007c54:	f008 fef2 	bl	8010a3c <FLASH_WaitForLastOperation>
 8007c58:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK){
 8007c5a:	2e00      	cmp	r6, #0
 8007c5c:	d100      	bne.n	8007c60 <EE_Init+0x268>
 8007c5e:	e6e8      	b.n	8007a32 <EE_Init+0x3a>
 8007c60:	e6ea      	b.n	8007a38 <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007c62:	4827      	ldr	r0, [pc, #156]	; (8007d00 <EE_Init+0x308>)
 8007c64:	f008 ff90 	bl	8010b88 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c68:	4828      	ldr	r0, [pc, #160]	; (8007d0c <EE_Init+0x314>)
 8007c6a:	f008 fee7 	bl	8010a3c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d003      	beq.n	8007c7a <EE_Init+0x282>
					return pFlash.ErrorCode;
 8007c72:	4b27      	ldr	r3, [pc, #156]	; (8007d10 <EE_Init+0x318>)
 8007c74:	69de      	ldr	r6, [r3, #28]
 8007c76:	b2b6      	uxth	r6, r6
 8007c78:	e6de      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007c7a:	482b      	ldr	r0, [pc, #172]	; (8007d28 <EE_Init+0x330>)
 8007c7c:	f008 ff84 	bl	8010b88 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c80:	4822      	ldr	r0, [pc, #136]	; (8007d0c <EE_Init+0x314>)
 8007c82:	f008 fedb 	bl	8010a3c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d105      	bne.n	8007c96 <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c8a:	4a23      	ldr	r2, [pc, #140]	; (8007d18 <EE_Init+0x320>)
 8007c8c:	6913      	ldr	r3, [r2, #16]
 8007c8e:	2102      	movs	r1, #2
 8007c90:	438b      	bics	r3, r1
 8007c92:	6113      	str	r3, [r2, #16]
 8007c94:	e6cd      	b.n	8007a32 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007c96:	4b1e      	ldr	r3, [pc, #120]	; (8007d10 <EE_Init+0x318>)
 8007c98:	69de      	ldr	r6, [r3, #28]
 8007c9a:	b2b6      	uxth	r6, r6
 8007c9c:	e6cc      	b.n	8007a38 <EE_Init+0x40>
						x =VarIdx;
 8007c9e:	b227      	sxth	r7, r4
 8007ca0:	e008      	b.n	8007cb4 <EE_Init+0x2bc>
 8007ca2:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007ca4:	4b1f      	ldr	r3, [pc, #124]	; (8007d24 <EE_Init+0x32c>)
 8007ca6:	429c      	cmp	r4, r3
 8007ca8:	d018      	beq.n	8007cdc <EE_Init+0x2e4>
 8007caa:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007cac:	882b      	ldrh	r3, [r5, #0]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	42b3      	cmp	r3, r6
 8007cb2:	d0f4      	beq.n	8007c9e <EE_Init+0x2a6>
					if(VarIdx != x){
 8007cb4:	42bc      	cmp	r4, r7
 8007cb6:	d0f4      	beq.n	8007ca2 <EE_Init+0x2aa>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007cb8:	4919      	ldr	r1, [pc, #100]	; (8007d20 <EE_Init+0x328>)
 8007cba:	0030      	movs	r0, r6
 8007cbc:	f7ff fd60 	bl	8007780 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007cc0:	2801      	cmp	r0, #1
 8007cc2:	d0ee      	beq.n	8007ca2 <EE_Init+0x2aa>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007cc4:	4643      	mov	r3, r8
 8007cc6:	8819      	ldrh	r1, [r3, #0]
 8007cc8:	0030      	movs	r0, r6
 8007cca:	f7ff fced 	bl	80076a8 <EE_VerifyPageFullWriteVariable>
 8007cce:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cd0:	480e      	ldr	r0, [pc, #56]	; (8007d0c <EE_Init+0x314>)
 8007cd2:	f008 feb3 	bl	8010a3c <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d0e3      	beq.n	8007ca2 <EE_Init+0x2aa>
 8007cda:	e6ad      	b.n	8007a38 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2300      	movs	r3, #0
 8007ce0:	4907      	ldr	r1, [pc, #28]	; (8007d00 <EE_Init+0x308>)
 8007ce2:	2001      	movs	r0, #1
 8007ce4:	f008 fed8 	bl	8010a98 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ce8:	4808      	ldr	r0, [pc, #32]	; (8007d0c <EE_Init+0x314>)
 8007cea:	f008 fea7 	bl	8010a3c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d01e      	beq.n	8007d30 <EE_Init+0x338>
					return pFlash.ErrorCode;
 8007cf2:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <EE_Init+0x318>)
 8007cf4:	69de      	ldr	r6, [r3, #28]
 8007cf6:	b2b6      	uxth	r6, r6
 8007cf8:	e69e      	b.n	8007a38 <EE_Init+0x40>
 8007cfa:	46c0      	nop			; (mov r8, r8)
 8007cfc:	0801e000 	.word	0x0801e000
 8007d00:	0801f000 	.word	0x0801f000
 8007d04:	0000eeee 	.word	0x0000eeee
 8007d08:	0000ffff 	.word	0x0000ffff
 8007d0c:	0000c350 	.word	0x0000c350
 8007d10:	20006eb8 	.word	0x20006eb8
 8007d14:	0801e800 	.word	0x0801e800
 8007d18:	40022000 	.word	0x40022000
 8007d1c:	0801e006 	.word	0x0801e006
 8007d20:	200014d8 	.word	0x200014d8
 8007d24:	00000401 	.word	0x00000401
 8007d28:	0801f800 	.word	0x0801f800
 8007d2c:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007d30:	4a11      	ldr	r2, [pc, #68]	; (8007d78 <EE_Init+0x380>)
 8007d32:	6913      	ldr	r3, [r2, #16]
 8007d34:	2101      	movs	r1, #1
 8007d36:	438b      	bics	r3, r1
 8007d38:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007d3a:	4810      	ldr	r0, [pc, #64]	; (8007d7c <EE_Init+0x384>)
 8007d3c:	f008 ff24 	bl	8010b88 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d40:	480f      	ldr	r0, [pc, #60]	; (8007d80 <EE_Init+0x388>)
 8007d42:	f008 fe7b 	bl	8010a3c <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d003      	beq.n	8007d52 <EE_Init+0x35a>
					return pFlash.ErrorCode;
 8007d4a:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <EE_Init+0x38c>)
 8007d4c:	69de      	ldr	r6, [r3, #28]
 8007d4e:	b2b6      	uxth	r6, r6
 8007d50:	e672      	b.n	8007a38 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007d52:	480d      	ldr	r0, [pc, #52]	; (8007d88 <EE_Init+0x390>)
 8007d54:	f008 ff18 	bl	8010b88 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d58:	4809      	ldr	r0, [pc, #36]	; (8007d80 <EE_Init+0x388>)
 8007d5a:	f008 fe6f 	bl	8010a3c <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d105      	bne.n	8007d6e <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007d62:	4a05      	ldr	r2, [pc, #20]	; (8007d78 <EE_Init+0x380>)
 8007d64:	6913      	ldr	r3, [r2, #16]
 8007d66:	2102      	movs	r1, #2
 8007d68:	438b      	bics	r3, r1
 8007d6a:	6113      	str	r3, [r2, #16]
 8007d6c:	e661      	b.n	8007a32 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007d6e:	4b05      	ldr	r3, [pc, #20]	; (8007d84 <EE_Init+0x38c>)
 8007d70:	69de      	ldr	r6, [r3, #28]
 8007d72:	b2b6      	uxth	r6, r6
 8007d74:	e660      	b.n	8007a38 <EE_Init+0x40>
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	40022000 	.word	0x40022000
 8007d7c:	0801e000 	.word	0x0801e000
 8007d80:	0000c350 	.word	0x0000c350
 8007d84:	20006eb8 	.word	0x20006eb8
 8007d88:	0801e800 	.word	0x0801e800

08007d8c <StartDefaultTask>:
}

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void *argument){
 8007d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d8e:	46c6      	mov	lr, r8
 8007d90:	b500      	push	{lr}
	
	/* Infinite loop */
	for(;;){
		/* Switch indicator LED according to mode */
		switch(indMode){
 8007d92:	4c2b      	ldr	r4, [pc, #172]	; (8007e40 <StartDefaultTask+0xb4>)
				indMode =IND_OFF;
				break;
				
			case IND_TOPOLOGY:
				RTOS_IND_blink(100);
				indMode =IND_OFF;
 8007d94:	46a0      	mov	r8, r4
				break;
				
			case IND_SHORT_BLINK:
				RTOS_IND_blink(30);
				indMode =IND_OFF;
 8007d96:	0027      	movs	r7, r4
 8007d98:	e020      	b.n	8007ddc <StartDefaultTask+0x50>
				RTOS_IND_blink(200);
 8007d9a:	2680      	movs	r6, #128	; 0x80
 8007d9c:	0136      	lsls	r6, r6, #4
 8007d9e:	2590      	movs	r5, #144	; 0x90
 8007da0:	05ed      	lsls	r5, r5, #23
 8007da2:	2201      	movs	r2, #1
 8007da4:	0031      	movs	r1, r6
 8007da6:	0028      	movs	r0, r5
 8007da8:	f009 f8d4 	bl	8010f54 <HAL_GPIO_WritePin>
 8007dac:	20c8      	movs	r0, #200	; 0xc8
 8007dae:	f005 fc3c 	bl	800d62a <osDelay>
 8007db2:	2200      	movs	r2, #0
 8007db4:	0031      	movs	r1, r6
 8007db6:	0028      	movs	r0, r5
 8007db8:	f009 f8cc 	bl	8010f54 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007dbc:	4b20      	ldr	r3, [pc, #128]	; (8007e40 <StartDefaultTask+0xb4>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	701a      	strb	r2, [r3, #0]
				break;
				
		}
		
		/* Read button state */
		CheckAttachedButtons();
 8007dc2:	f000 ff07 	bl	8008bd4 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8007dc6:	f7fd fb61 	bl	800548c <ExecuteSnippet>

		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)
 8007dca:	4b1e      	ldr	r3, [pc, #120]	; (8007e44 <StartDefaultTask+0xb8>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d102      	bne.n	8007dd8 <StartDefaultTask+0x4c>
			delayButtonStateReset = false;
 8007dd2:	4b1d      	ldr	r3, [pc, #116]	; (8007e48 <StartDefaultTask+0xbc>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	701a      	strb	r2, [r3, #0]
		
		taskYIELD();
 8007dd8:	f007 fad4 	bl	800f384 <vPortYield>
		switch(indMode){
 8007ddc:	7823      	ldrb	r3, [r4, #0]
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d004      	beq.n	8007dec <StartDefaultTask+0x60>
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d017      	beq.n	8007e16 <StartDefaultTask+0x8a>
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d1eb      	bne.n	8007dc2 <StartDefaultTask+0x36>
 8007dea:	e7d6      	b.n	8007d9a <StartDefaultTask+0xe>
				RTOS_IND_blink(100);
 8007dec:	2680      	movs	r6, #128	; 0x80
 8007dee:	0136      	lsls	r6, r6, #4
 8007df0:	2590      	movs	r5, #144	; 0x90
 8007df2:	05ed      	lsls	r5, r5, #23
 8007df4:	2201      	movs	r2, #1
 8007df6:	0031      	movs	r1, r6
 8007df8:	0028      	movs	r0, r5
 8007dfa:	f009 f8ab 	bl	8010f54 <HAL_GPIO_WritePin>
 8007dfe:	2064      	movs	r0, #100	; 0x64
 8007e00:	f005 fc13 	bl	800d62a <osDelay>
 8007e04:	2200      	movs	r2, #0
 8007e06:	0031      	movs	r1, r6
 8007e08:	0028      	movs	r0, r5
 8007e0a:	f009 f8a3 	bl	8010f54 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	4642      	mov	r2, r8
 8007e12:	7013      	strb	r3, [r2, #0]
				break;
 8007e14:	e7d5      	b.n	8007dc2 <StartDefaultTask+0x36>
				RTOS_IND_blink(30);
 8007e16:	2680      	movs	r6, #128	; 0x80
 8007e18:	0136      	lsls	r6, r6, #4
 8007e1a:	2590      	movs	r5, #144	; 0x90
 8007e1c:	05ed      	lsls	r5, r5, #23
 8007e1e:	2201      	movs	r2, #1
 8007e20:	0031      	movs	r1, r6
 8007e22:	0028      	movs	r0, r5
 8007e24:	f009 f896 	bl	8010f54 <HAL_GPIO_WritePin>
 8007e28:	201e      	movs	r0, #30
 8007e2a:	f005 fbfe 	bl	800d62a <osDelay>
 8007e2e:	2200      	movs	r2, #0
 8007e30:	0031      	movs	r1, r6
 8007e32:	0028      	movs	r0, r5
 8007e34:	f009 f88e 	bl	8010f54 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	703b      	strb	r3, [r7, #0]
				break;
 8007e3c:	e7c1      	b.n	8007dc2 <StartDefaultTask+0x36>
 8007e3e:	46c0      	nop			; (mov r8, r8)
 8007e40:	20000ef4 	.word	0x20000ef4
 8007e44:	20001568 	.word	0x20001568
 8007e48:	20001567 	.word	0x20001567

08007e4c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void){
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	b090      	sub	sp, #64	; 0x40
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007e50:	25a0      	movs	r5, #160	; 0xa0
 8007e52:	006d      	lsls	r5, r5, #1
 8007e54:	2400      	movs	r4, #0
 8007e56:	9403      	str	r4, [sp, #12]
 8007e58:	9402      	str	r4, [sp, #8]
 8007e5a:	4b5e      	ldr	r3, [pc, #376]	; (8007fd4 <MX_FREERTOS_Init+0x188>)
 8007e5c:	9301      	str	r3, [sp, #4]
 8007e5e:	2603      	movs	r6, #3
 8007e60:	9600      	str	r6, [sp, #0]
 8007e62:	2300      	movs	r3, #0
 8007e64:	002a      	movs	r2, r5
 8007e66:	495c      	ldr	r1, [pc, #368]	; (8007fd8 <MX_FREERTOS_Init+0x18c>)
 8007e68:	485c      	ldr	r0, [pc, #368]	; (8007fdc <MX_FREERTOS_Init+0x190>)
 8007e6a:	f006 f9d9 	bl	800e220 <xTaskGenericCreate>
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8007e6e:	9403      	str	r4, [sp, #12]
 8007e70:	9402      	str	r4, [sp, #8]
 8007e72:	4b5b      	ldr	r3, [pc, #364]	; (8007fe0 <MX_FREERTOS_Init+0x194>)
 8007e74:	9301      	str	r3, [sp, #4]
 8007e76:	9600      	str	r6, [sp, #0]
 8007e78:	2300      	movs	r3, #0
 8007e7a:	002a      	movs	r2, r5
 8007e7c:	4959      	ldr	r1, [pc, #356]	; (8007fe4 <MX_FREERTOS_Init+0x198>)
 8007e7e:	485a      	ldr	r0, [pc, #360]	; (8007fe8 <MX_FREERTOS_Init+0x19c>)
 8007e80:	f006 f9ce 	bl	800e220 <xTaskGenericCreate>
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007e84:	9403      	str	r4, [sp, #12]
 8007e86:	9402      	str	r4, [sp, #8]
 8007e88:	4b58      	ldr	r3, [pc, #352]	; (8007fec <MX_FREERTOS_Init+0x1a0>)
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	9600      	str	r6, [sp, #0]
 8007e8e:	2300      	movs	r3, #0
 8007e90:	002a      	movs	r2, r5
 8007e92:	4957      	ldr	r1, [pc, #348]	; (8007ff0 <MX_FREERTOS_Init+0x1a4>)
 8007e94:	4857      	ldr	r0, [pc, #348]	; (8007ff4 <MX_FREERTOS_Init+0x1a8>)
 8007e96:	f006 f9c3 	bl	800e220 <xTaskGenericCreate>
	vRegisterCLICommands();
 8007e9a:	f7ff fa6d 	bl	8007378 <vRegisterCLICommands>
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007e9e:	9403      	str	r4, [sp, #12]
 8007ea0:	9402      	str	r4, [sp, #8]
 8007ea2:	4b55      	ldr	r3, [pc, #340]	; (8007ff8 <MX_FREERTOS_Init+0x1ac>)
 8007ea4:	9301      	str	r3, [sp, #4]
 8007ea6:	9600      	str	r6, [sp, #0]
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	002a      	movs	r2, r5
 8007eac:	4953      	ldr	r1, [pc, #332]	; (8007ffc <MX_FREERTOS_Init+0x1b0>)
 8007eae:	4854      	ldr	r0, [pc, #336]	; (8008000 <MX_FREERTOS_Init+0x1b4>)
 8007eb0:	f006 f9b6 	bl	800e220 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",configMINIMAL_STACK_SIZE,(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007eb4:	4d53      	ldr	r5, [pc, #332]	; (8008004 <MX_FREERTOS_Init+0x1b8>)
 8007eb6:	9403      	str	r4, [sp, #12]
 8007eb8:	9402      	str	r4, [sp, #8]
 8007eba:	4b53      	ldr	r3, [pc, #332]	; (8008008 <MX_FREERTOS_Init+0x1bc>)
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	3601      	adds	r6, #1
 8007ec0:	9600      	str	r6, [sp, #0]
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	22a0      	movs	r2, #160	; 0xa0
 8007ec6:	4951      	ldr	r1, [pc, #324]	; (800800c <MX_FREERTOS_Init+0x1c0>)
 8007ec8:	0028      	movs	r0, r5
 8007eca:	f006 f9a9 	bl	800e220 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",configMINIMAL_STACK_SIZE,(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8007ece:	9403      	str	r4, [sp, #12]
 8007ed0:	9402      	str	r4, [sp, #8]
 8007ed2:	4b4f      	ldr	r3, [pc, #316]	; (8008010 <MX_FREERTOS_Init+0x1c4>)
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	9600      	str	r6, [sp, #0]
 8007ed8:	2302      	movs	r3, #2
 8007eda:	22a0      	movs	r2, #160	; 0xa0
 8007edc:	494d      	ldr	r1, [pc, #308]	; (8008014 <MX_FREERTOS_Init+0x1c8>)
 8007ede:	0028      	movs	r0, r5
 8007ee0:	f006 f99e 	bl	800e220 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",configMINIMAL_STACK_SIZE,(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007ee4:	9403      	str	r4, [sp, #12]
 8007ee6:	9402      	str	r4, [sp, #8]
 8007ee8:	4b4b      	ldr	r3, [pc, #300]	; (8008018 <MX_FREERTOS_Init+0x1cc>)
 8007eea:	9301      	str	r3, [sp, #4]
 8007eec:	9600      	str	r6, [sp, #0]
 8007eee:	2303      	movs	r3, #3
 8007ef0:	22a0      	movs	r2, #160	; 0xa0
 8007ef2:	494a      	ldr	r1, [pc, #296]	; (800801c <MX_FREERTOS_Init+0x1d0>)
 8007ef4:	0028      	movs	r0, r5
 8007ef6:	f006 f993 	bl	800e220 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",configMINIMAL_STACK_SIZE,(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 8007efa:	9403      	str	r4, [sp, #12]
 8007efc:	9402      	str	r4, [sp, #8]
 8007efe:	4b48      	ldr	r3, [pc, #288]	; (8008020 <MX_FREERTOS_Init+0x1d4>)
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	9600      	str	r6, [sp, #0]
 8007f04:	2304      	movs	r3, #4
 8007f06:	22a0      	movs	r2, #160	; 0xa0
 8007f08:	4946      	ldr	r1, [pc, #280]	; (8008024 <MX_FREERTOS_Init+0x1d8>)
 8007f0a:	0028      	movs	r0, r5
 8007f0c:	f006 f988 	bl	800e220 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",configMINIMAL_STACK_SIZE,(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 8007f10:	9403      	str	r4, [sp, #12]
 8007f12:	9402      	str	r4, [sp, #8]
 8007f14:	4b44      	ldr	r3, [pc, #272]	; (8008028 <MX_FREERTOS_Init+0x1dc>)
 8007f16:	9301      	str	r3, [sp, #4]
 8007f18:	9600      	str	r6, [sp, #0]
 8007f1a:	2305      	movs	r3, #5
 8007f1c:	22a0      	movs	r2, #160	; 0xa0
 8007f1e:	4943      	ldr	r1, [pc, #268]	; (800802c <MX_FREERTOS_Init+0x1e0>)
 8007f20:	0028      	movs	r0, r5
 8007f22:	f006 f97d 	bl	800e220 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",configMINIMAL_STACK_SIZE,(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
 8007f26:	9403      	str	r4, [sp, #12]
 8007f28:	9402      	str	r4, [sp, #8]
 8007f2a:	4b41      	ldr	r3, [pc, #260]	; (8008030 <MX_FREERTOS_Init+0x1e4>)
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	9600      	str	r6, [sp, #0]
 8007f30:	2306      	movs	r3, #6
 8007f32:	22a0      	movs	r2, #160	; 0xa0
 8007f34:	493f      	ldr	r1, [pc, #252]	; (8008034 <MX_FREERTOS_Init+0x1e8>)
 8007f36:	0028      	movs	r0, r5
 8007f38:	f006 f972 	bl	800e220 <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1);
 8007f3c:	940f      	str	r4, [sp, #60]	; 0x3c
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007f3e:	2101      	movs	r1, #1
 8007f40:	a80f      	add	r0, sp, #60	; 0x3c
 8007f42:	f005 fb7a 	bl	800d63a <osSemaphoreCreate>
 8007f46:	4e3c      	ldr	r6, [pc, #240]	; (8008038 <MX_FREERTOS_Init+0x1ec>)
 8007f48:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 8007f4a:	940e      	str	r4, [sp, #56]	; 0x38
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	a80e      	add	r0, sp, #56	; 0x38
 8007f50:	f005 fb73 	bl	800d63a <osSemaphoreCreate>
 8007f54:	4d39      	ldr	r5, [pc, #228]	; (800803c <MX_FREERTOS_Init+0x1f0>)
 8007f56:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3);
 8007f58:	940d      	str	r4, [sp, #52]	; 0x34
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	a80d      	add	r0, sp, #52	; 0x34
 8007f5e:	f005 fb6c 	bl	800d63a <osSemaphoreCreate>
 8007f62:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 8007f64:	940c      	str	r4, [sp, #48]	; 0x30
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007f66:	2101      	movs	r1, #1
 8007f68:	a80c      	add	r0, sp, #48	; 0x30
 8007f6a:	f005 fb66 	bl	800d63a <osSemaphoreCreate>
 8007f6e:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5);
 8007f70:	940b      	str	r4, [sp, #44]	; 0x2c
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007f72:	2101      	movs	r1, #1
 8007f74:	a80b      	add	r0, sp, #44	; 0x2c
 8007f76:	f005 fb60 	bl	800d63a <osSemaphoreCreate>
 8007f7a:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 8007f7c:	940a      	str	r4, [sp, #40]	; 0x28
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007f7e:	2101      	movs	r1, #1
 8007f80:	a80a      	add	r0, sp, #40	; 0x28
 8007f82:	f005 fb5a 	bl	800d63a <osSemaphoreCreate>
 8007f86:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7);
 8007f88:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	a809      	add	r0, sp, #36	; 0x24
 8007f8e:	f005 fb54 	bl	800d63a <osSemaphoreCreate>
 8007f92:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8);
 8007f94:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007f96:	2101      	movs	r1, #1
 8007f98:	a808      	add	r0, sp, #32
 8007f9a:	f005 fb4e 	bl	800d63a <osSemaphoreCreate>
 8007f9e:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9);
 8007fa0:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	a807      	add	r0, sp, #28
 8007fa6:	f005 fb48 	bl	800d63a <osSemaphoreCreate>
 8007faa:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10);
 8007fac:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007fae:	2101      	movs	r1, #1
 8007fb0:	a806      	add	r0, sp, #24
 8007fb2:	f005 fb42 	bl	800d63a <osSemaphoreCreate>
 8007fb6:	6168      	str	r0, [r5, #20]
	osSemaphoreDef(SemaphoreP11);
 8007fb8:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007fba:	2101      	movs	r1, #1
 8007fbc:	a805      	add	r0, sp, #20
 8007fbe:	f005 fb3c 	bl	800d63a <osSemaphoreCreate>
 8007fc2:	61b0      	str	r0, [r6, #24]
	osSemaphoreDef(SemaphoreP12);
 8007fc4:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	a804      	add	r0, sp, #16
 8007fca:	f005 fb36 	bl	800d63a <osSemaphoreCreate>
 8007fce:	61a8      	str	r0, [r5, #24]
}
 8007fd0:	b010      	add	sp, #64	; 0x40
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}
 8007fd4:	200014fc 	.word	0x200014fc
 8007fd8:	0801a15c 	.word	0x0801a15c
 8007fdc:	08007d8d 	.word	0x08007d8d
 8007fe0:	200014dc 	.word	0x200014dc
 8007fe4:	0801a168 	.word	0x0801a168
 8007fe8:	080098ad 	.word	0x080098ad
 8007fec:	200014f8 	.word	0x200014f8
 8007ff0:	0801a174 	.word	0x0801a174
 8007ff4:	08012a73 	.word	0x08012a73
 8007ff8:	20001504 	.word	0x20001504
 8007ffc:	0801a180 	.word	0x0801a180
 8008000:	0800510d 	.word	0x0800510d
 8008004:	08009c4d 	.word	0x08009c4d
 8008008:	200014e0 	.word	0x200014e0
 800800c:	0801a188 	.word	0x0801a188
 8008010:	200014e4 	.word	0x200014e4
 8008014:	0801a194 	.word	0x0801a194
 8008018:	200014e8 	.word	0x200014e8
 800801c:	0801a1a0 	.word	0x0801a1a0
 8008020:	200014ec 	.word	0x200014ec
 8008024:	0801a1ac 	.word	0x0801a1ac
 8008028:	200014f0 	.word	0x200014f0
 800802c:	0801a1b8 	.word	0x0801a1b8
 8008030:	200014f4 	.word	0x200014f4
 8008034:	0801a1c4 	.word	0x0801a1c4
 8008038:	20006a60 	.word	0x20006a60
 800803c:	20006a44 	.word	0x20006a44

08008040 <vMainConfigureTimerForRunTimeStats>:
	
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats(void){
 8008040:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8008042:	4b04      	ldr	r3, [pc, #16]	; (8008054 <vMainConfigureTimerForRunTimeStats+0x14>)
 8008044:	6818      	ldr	r0, [r3, #0]
 8008046:	4904      	ldr	r1, [pc, #16]	; (8008058 <vMainConfigureTimerForRunTimeStats+0x18>)
 8008048:	f7f8 f882 	bl	8000150 <__udivsi3>
 800804c:	4b03      	ldr	r3, [pc, #12]	; (800805c <vMainConfigureTimerForRunTimeStats+0x1c>)
 800804e:	6018      	str	r0, [r3, #0]
}
 8008050:	bd10      	pop	{r4, pc}
 8008052:	46c0      	nop			; (mov r8, r8)
 8008054:	20000090 	.word	0x20000090
 8008058:	00002710 	.word	0x00002710
 800805c:	20001500 	.word	0x20001500

08008060 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 8008060:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8008062:	4b0f      	ldr	r3, [pc, #60]	; (80080a0 <ulMainGetRunTimeCounterValue+0x40>)
 8008064:	6818      	ldr	r0, [r3, #0]
 8008066:	21fa      	movs	r1, #250	; 0xfa
 8008068:	0089      	lsls	r1, r1, #2
 800806a:	f7f8 f871 	bl	8000150 <__udivsi3>
 800806e:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008070:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <ulMainGetRunTimeCounterValue+0x44>)
 8008072:	681c      	ldr	r4, [r3, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8008074:	f006 fa66 	bl	800e544 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8008078:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <ulMainGetRunTimeCounterValue+0x48>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	015b      	lsls	r3, r3, #5
 800807e:	d50d      	bpl.n	800809c <ulMainGetRunTimeCounterValue+0x3c>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 8008080:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008082:	4b08      	ldr	r3, [pc, #32]	; (80080a4 <ulMainGetRunTimeCounterValue+0x44>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	1aed      	subs	r5, r5, r3
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 8008088:	0084      	lsls	r4, r0, #2
 800808a:	1824      	adds	r4, r4, r0
 800808c:	0064      	lsls	r4, r4, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 800808e:	4b07      	ldr	r3, [pc, #28]	; (80080ac <ulMainGetRunTimeCounterValue+0x4c>)
 8008090:	6819      	ldr	r1, [r3, #0]
 8008092:	0028      	movs	r0, r5
 8008094:	f7f8 f85c 	bl	8000150 <__udivsi3>
 8008098:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 800809a:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 800809c:	1b2d      	subs	r5, r5, r4
 800809e:	e7f3      	b.n	8008088 <ulMainGetRunTimeCounterValue+0x28>
 80080a0:	20000090 	.word	0x20000090
 80080a4:	e000e018 	.word	0xe000e018
 80080a8:	e000ed04 	.word	0xe000ed04
 80080ac:	20001500 	.word	0x20001500

080080b0 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port){
}
 80080b0:	4770      	bx	lr
	...

080080b4 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port){
 80080b4:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 80080b6:	00c2      	lsls	r2, r0, #3
 80080b8:	1812      	adds	r2, r2, r0
 80080ba:	4b1b      	ldr	r3, [pc, #108]	; (8008128 <CheckForTimedButtonPress+0x74>)
 80080bc:	189b      	adds	r3, r3, r2
 80080be:	789c      	ldrb	r4, [r3, #2]
	/* Convert to ms */
	t1 *=1000;
	t2 *=1000;
	t3 *=1000;
	
	if(pressCounter[port] == t1){
 80080c0:	0082      	lsls	r2, r0, #2
 80080c2:	4b1a      	ldr	r3, [pc, #104]	; (800812c <CheckForTimedButtonPress+0x78>)
 80080c4:	58d1      	ldr	r1, [r2, r3]
	t1 *=1000;
 80080c6:	0163      	lsls	r3, r4, #5
 80080c8:	1b1b      	subs	r3, r3, r4
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	191b      	adds	r3, r3, r4
 80080ce:	00db      	lsls	r3, r3, #3
	if(pressCounter[port] == t1){
 80080d0:	4299      	cmp	r1, r3
 80080d2:	d01c      	beq.n	800810e <CheckForTimedButtonPress+0x5a>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 80080d4:	00c2      	lsls	r2, r0, #3
 80080d6:	1812      	adds	r2, r2, r0
 80080d8:	4b13      	ldr	r3, [pc, #76]	; (8008128 <CheckForTimedButtonPress+0x74>)
 80080da:	189b      	adds	r3, r3, r2
 80080dc:	78dc      	ldrb	r4, [r3, #3]
	t2 *=1000;
 80080de:	0163      	lsls	r3, r4, #5
 80080e0:	1b1b      	subs	r3, r3, r4
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	191b      	adds	r3, r3, r4
 80080e6:	00db      	lsls	r3, r3, #3
		button[port].state =PRESSED_FOR_X1_SEC;
	}
	else if(pressCounter[port] == t2){
 80080e8:	4299      	cmp	r1, r3
 80080ea:	d017      	beq.n	800811c <CheckForTimedButtonPress+0x68>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec, t3 =button[port].pressedX3Sec;
 80080ec:	00c2      	lsls	r2, r0, #3
 80080ee:	1812      	adds	r2, r2, r0
 80080f0:	4b0d      	ldr	r3, [pc, #52]	; (8008128 <CheckForTimedButtonPress+0x74>)
 80080f2:	189b      	adds	r3, r3, r2
 80080f4:	791c      	ldrb	r4, [r3, #4]
	t3 *=1000;
 80080f6:	0163      	lsls	r3, r4, #5
 80080f8:	1b1b      	subs	r3, r3, r4
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	191b      	adds	r3, r3, r4
 80080fe:	00db      	lsls	r3, r3, #3
		button[port].state =PRESSED_FOR_X2_SEC;
	}
	else if(pressCounter[port] == t3){
 8008100:	4299      	cmp	r1, r3
 8008102:	d109      	bne.n	8008118 <CheckForTimedButtonPress+0x64>
		button[port].state =PRESSED_FOR_X2_SEC;
 8008104:	0010      	movs	r0, r2
 8008106:	4b08      	ldr	r3, [pc, #32]	; (8008128 <CheckForTimedButtonPress+0x74>)
 8008108:	220a      	movs	r2, #10
 800810a:	54c2      	strb	r2, [r0, r3]
 800810c:	e004      	b.n	8008118 <CheckForTimedButtonPress+0x64>
		button[port].state =PRESSED_FOR_X1_SEC;
 800810e:	00c3      	lsls	r3, r0, #3
 8008110:	1818      	adds	r0, r3, r0
 8008112:	4b05      	ldr	r3, [pc, #20]	; (8008128 <CheckForTimedButtonPress+0x74>)
 8008114:	2209      	movs	r2, #9
 8008116:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 8008118:	2000      	movs	r0, #0
 800811a:	bd10      	pop	{r4, pc}
		button[port].state =PRESSED_FOR_X2_SEC;
 800811c:	0010      	movs	r0, r2
 800811e:	4b02      	ldr	r3, [pc, #8]	; (8008128 <CheckForTimedButtonPress+0x74>)
 8008120:	220a      	movs	r2, #10
 8008122:	54c2      	strb	r2, [r0, r3]
 8008124:	e7f8      	b.n	8008118 <CheckForTimedButtonPress+0x64>
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	2000151c 	.word	0x2000151c
 800812c:	20001570 	.word	0x20001570

08008130 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port){
 8008130:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 8008132:	00c2      	lsls	r2, r0, #3
 8008134:	1812      	adds	r2, r2, r0
 8008136:	4b1b      	ldr	r3, [pc, #108]	; (80081a4 <CheckForTimedButtonRelease+0x74>)
 8008138:	189b      	adds	r3, r3, r2
 800813a:	795c      	ldrb	r4, [r3, #5]
	/* Convert to ms */
	t1 *=1000;
	t2 *=1000;
	t3 *=1000;
	
	if(releaseCounter[port] == t1){
 800813c:	0082      	lsls	r2, r0, #2
 800813e:	4b1a      	ldr	r3, [pc, #104]	; (80081a8 <CheckForTimedButtonRelease+0x78>)
 8008140:	58d1      	ldr	r1, [r2, r3]
	t1 *=1000;
 8008142:	0163      	lsls	r3, r4, #5
 8008144:	1b1b      	subs	r3, r3, r4
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	191b      	adds	r3, r3, r4
 800814a:	00db      	lsls	r3, r3, #3
	if(releaseCounter[port] == t1){
 800814c:	4299      	cmp	r1, r3
 800814e:	d01c      	beq.n	800818a <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 8008150:	00c2      	lsls	r2, r0, #3
 8008152:	1812      	adds	r2, r2, r0
 8008154:	4b13      	ldr	r3, [pc, #76]	; (80081a4 <CheckForTimedButtonRelease+0x74>)
 8008156:	189b      	adds	r3, r3, r2
 8008158:	799c      	ldrb	r4, [r3, #6]
	t2 *=1000;
 800815a:	0163      	lsls	r3, r4, #5
 800815c:	1b1b      	subs	r3, r3, r4
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	191b      	adds	r3, r3, r4
 8008162:	00db      	lsls	r3, r3, #3
		button[port].state =RELEASED_FOR_Y1_SEC;
	}
	else if(releaseCounter[port] == t2){
 8008164:	4299      	cmp	r1, r3
 8008166:	d017      	beq.n	8008198 <CheckForTimedButtonRelease+0x68>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec, t3 =button[port].releasedY3Sec;
 8008168:	00c2      	lsls	r2, r0, #3
 800816a:	1812      	adds	r2, r2, r0
 800816c:	4b0d      	ldr	r3, [pc, #52]	; (80081a4 <CheckForTimedButtonRelease+0x74>)
 800816e:	189b      	adds	r3, r3, r2
 8008170:	79dc      	ldrb	r4, [r3, #7]
	t3 *=1000;
 8008172:	0163      	lsls	r3, r4, #5
 8008174:	1b1b      	subs	r3, r3, r4
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	191b      	adds	r3, r3, r4
 800817a:	00db      	lsls	r3, r3, #3
		button[port].state =RELEASED_FOR_Y2_SEC;
	}
	else if(releaseCounter[port] == t3){
 800817c:	4299      	cmp	r1, r3
 800817e:	d109      	bne.n	8008194 <CheckForTimedButtonRelease+0x64>
		button[port].state =RELEASED_FOR_Y2_SEC;
 8008180:	0010      	movs	r0, r2
 8008182:	4b08      	ldr	r3, [pc, #32]	; (80081a4 <CheckForTimedButtonRelease+0x74>)
 8008184:	220d      	movs	r2, #13
 8008186:	54c2      	strb	r2, [r0, r3]
 8008188:	e004      	b.n	8008194 <CheckForTimedButtonRelease+0x64>
		button[port].state =RELEASED_FOR_Y1_SEC;
 800818a:	00c3      	lsls	r3, r0, #3
 800818c:	1818      	adds	r0, r3, r0
 800818e:	4b05      	ldr	r3, [pc, #20]	; (80081a4 <CheckForTimedButtonRelease+0x74>)
 8008190:	220c      	movs	r2, #12
 8008192:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 8008194:	2000      	movs	r0, #0
 8008196:	bd10      	pop	{r4, pc}
		button[port].state =RELEASED_FOR_Y2_SEC;
 8008198:	0010      	movs	r0, r2
 800819a:	4b02      	ldr	r3, [pc, #8]	; (80081a4 <CheckForTimedButtonRelease+0x74>)
 800819c:	220d      	movs	r2, #13
 800819e:	54c2      	strb	r2, [r0, r3]
 80081a0:	e7f8      	b.n	8008194 <CheckForTimedButtonRelease+0x64>
 80081a2:	46c0      	nop			; (mov r8, r8)
 80081a4:	2000151c 	.word	0x2000151c
 80081a8:	2000158c 	.word	0x2000158c

080081ac <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType,uint8_t port){
 80081ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ae:	b08d      	sub	sp, #52	; 0x34
 80081b0:	0006      	movs	r6, r0
 80081b2:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 =0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if(BOS_initialized){
 80081b4:	4b41      	ldr	r3, [pc, #260]	; (80082bc <AddPortButton+0x110>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d157      	bne.n	800826c <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] =PORTBUTTON;
 80081bc:	4b40      	ldr	r3, [pc, #256]	; (80082c0 <AddPortButton+0x114>)
 80081be:	2204      	movs	r2, #4
 80081c0:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if(BOS_initialized){
 80081c2:	4b3e      	ldr	r3, [pc, #248]	; (80082bc <AddPortButton+0x110>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d15a      	bne.n	8008280 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 80081ca:	2512      	movs	r5, #18
 80081cc:	446d      	add	r5, sp
 80081ce:	af04      	add	r7, sp, #16
 80081d0:	9700      	str	r7, [sp, #0]
 80081d2:	ab05      	add	r3, sp, #20
 80081d4:	002a      	movs	r2, r5
 80081d6:	a906      	add	r1, sp, #24
 80081d8:	0020      	movs	r0, r4
 80081da:	f004 fb59 	bl	800c890 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin =TX_Pin;
 80081de:	882b      	ldrh	r3, [r5, #0]
 80081e0:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081e2:	2301      	movs	r3, #1
 80081e4:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081e6:	2500      	movs	r5, #0
 80081e8:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80081ea:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )TX_Port,&GPIO_InitStruct);
 80081ec:	a907      	add	r1, sp, #28
 80081ee:	9806      	ldr	r0, [sp, #24]
 80081f0:	f008 fd3c 	bl	8010c6c <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin =RX_Pin;
 80081f4:	883b      	ldrh	r3, [r7, #0]
 80081f6:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081f8:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80081fa:	2302      	movs	r3, #2
 80081fc:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )RX_Port,&GPIO_InitStruct);
 80081fe:	a907      	add	r1, sp, #28
 8008200:	9805      	ldr	r0, [sp, #20]
 8008202:	f008 fd33 	bl	8010c6c <HAL_GPIO_Init>
	
	/* 4. Update button struct */
	button[port].type =buttonType;
 8008206:	00e2      	lsls	r2, r4, #3
 8008208:	1912      	adds	r2, r2, r4
 800820a:	4b2e      	ldr	r3, [pc, #184]	; (80082c4 <AddPortButton+0x118>)
 800820c:	189b      	adds	r3, r3, r2
 800820e:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 8008210:	0025      	movs	r5, r4
 8008212:	353a      	adds	r5, #58	; 0x3a
 8008214:	00ad      	lsls	r5, r5, #2
 8008216:	210e      	movs	r1, #14
 8008218:	4469      	add	r1, sp
 800821a:	0028      	movs	r0, r5
 800821c:	f7ff fab0 	bl	8007780 <EE_ReadVariable>
	if(!res)											// This variable exists
 8008220:	2800      	cmp	r0, #0
 8008222:	d133      	bne.n	800828c <AddPortButton+0xe0>
	{
		temp8 =(uint8_t )(temp16 >> 8);
 8008224:	230e      	movs	r3, #14
 8008226:	446b      	add	r3, sp
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	0a1b      	lsrs	r3, r3, #8
		if(((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))											// This is same port and same type, do not update
 800822c:	091a      	lsrs	r2, r3, #4
 800822e:	42a2      	cmp	r2, r4
 8008230:	d103      	bne.n	800823a <AddPortButton+0x8e>
 8008232:	220f      	movs	r2, #15
 8008234:	4013      	ands	r3, r2
 8008236:	42b3      	cmp	r3, r6
 8008238:	d015      	beq.n	8008266 <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 800823a:	0324      	lsls	r4, r4, #12
 800823c:	0231      	lsls	r1, r6, #8
 800823e:	4321      	orrs	r1, r4
 8008240:	b289      	uxth	r1, r1
 8008242:	230e      	movs	r3, #14
 8008244:	446b      	add	r3, sp
 8008246:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8008248:	0028      	movs	r0, r5
 800824a:	f7ff fac9 	bl	80077e0 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 800824e:	1c68      	adds	r0, r5, #1
 8008250:	2100      	movs	r1, #0
 8008252:	f7ff fac5 	bl	80077e0 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 8008256:	1ca8      	adds	r0, r5, #2
 8008258:	2100      	movs	r1, #0
 800825a:	f7ff fac1 	bl	80077e0 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 800825e:	1ce8      	adds	r0, r5, #3
 8008260:	2100      	movs	r1, #0
 8008262:	f7ff fabd 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	return result;
}
 8008266:	2000      	movs	r0, #0
 8008268:	b00d      	add	sp, #52	; 0x34
 800826a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800826c:	008d      	lsls	r5, r1, #2
 800826e:	4b16      	ldr	r3, [pc, #88]	; (80082c8 <AddPortButton+0x11c>)
 8008270:	58e8      	ldr	r0, [r5, r3]
 8008272:	f005 fa25 	bl	800d6c0 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 8008276:	4b15      	ldr	r3, [pc, #84]	; (80082cc <AddPortButton+0x120>)
 8008278:	58e8      	ldr	r0, [r5, r3]
 800827a:	f005 fa21 	bl	800d6c0 <osSemaphoreRelease>
 800827e:	e79d      	b.n	80081bc <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8008280:	0020      	movs	r0, r4
 8008282:	f005 f883 	bl	800d38c <GetUart>
 8008286:	f009 fe42 	bl	8011f0e <HAL_UART_DeInit>
 800828a:	e79e      	b.n	80081ca <AddPortButton+0x1e>
		temp16 =((uint16_t )port << 12) | ((uint16_t )buttonType << 8);
 800828c:	0324      	lsls	r4, r4, #12
 800828e:	0231      	lsls	r1, r6, #8
 8008290:	4321      	orrs	r1, r4
 8008292:	b289      	uxth	r1, r1
 8008294:	230e      	movs	r3, #14
 8008296:	446b      	add	r3, sp
 8008298:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 800829a:	0028      	movs	r0, r5
 800829c:	f7ff faa0 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 80082a0:	1c68      	adds	r0, r5, #1
 80082a2:	2100      	movs	r1, #0
 80082a4:	f7ff fa9c 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 80082a8:	1ca8      	adds	r0, r5, #2
 80082aa:	2100      	movs	r1, #0
 80082ac:	f7ff fa98 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 80082b0:	1ce8      	adds	r0, r5, #3
 80082b2:	2100      	movs	r1, #0
 80082b4:	f7ff fa94 	bl	80077e0 <EE_WriteVariable>
 80082b8:	e7d5      	b.n	8008266 <AddPortButton+0xba>
 80082ba:	46c0      	nop			; (mov r8, r8)
 80082bc:	20000a75 	.word	0x20000a75
 80082c0:	200010f8 	.word	0x200010f8
 80082c4:	2000151c 	.word	0x2000151c
 80082c8:	20006a60 	.word	0x20006a60
 80082cc:	20006a44 	.word	0x20006a44

080082d0 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port){
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	0005      	movs	r5, r0
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type =NONE;
 80082d6:	4837      	ldr	r0, [pc, #220]	; (80083b4 <RemovePortButton+0xe4>)
 80082d8:	00e9      	lsls	r1, r5, #3
 80082da:	1949      	adds	r1, r1, r5
 80082dc:	1842      	adds	r2, r0, r1
 80082de:	2300      	movs	r3, #0
 80082e0:	7053      	strb	r3, [r2, #1]
	button[port].state =NONE;
 80082e2:	540b      	strb	r3, [r1, r0]
	button[port].events =0;
 80082e4:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec =0;
 80082e6:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec =0;
 80082e8:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec =0;
 80082ea:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec =0;
 80082ec:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec =0;
 80082ee:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec =0;
 80082f0:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 80082f2:	002c      	movs	r4, r5
 80082f4:	343a      	adds	r4, #58	; 0x3a
 80082f6:	00a4      	lsls	r4, r4, #2
 80082f8:	466b      	mov	r3, sp
 80082fa:	1d99      	adds	r1, r3, #6
 80082fc:	0020      	movs	r0, r4
 80082fe:	f7ff fa3f 	bl	8007780 <EE_ReadVariable>
	if(!res)						// This variable exists, reset all to zeros
 8008302:	2800      	cmp	r0, #0
 8008304:	d02b      	beq.n	800835e <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart =GetUart(port);
 8008306:	0028      	movs	r0, r5
 8008308:	f005 f840 	bl	800d38c <GetUart>
 800830c:	0006      	movs	r6, r0
	
	if(huart->Instance == USART1){
 800830e:	6803      	ldr	r3, [r0, #0]
 8008310:	4a29      	ldr	r2, [pc, #164]	; (80083b8 <RemovePortButton+0xe8>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d034      	beq.n	8008380 <RemovePortButton+0xb0>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	}
	else if(huart->Instance == USART2){
 8008316:	4a29      	ldr	r2, [pc, #164]	; (80083bc <RemovePortButton+0xec>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d035      	beq.n	8008388 <RemovePortButton+0xb8>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	}
	else if(huart->Instance == USART3){
 800831c:	4a28      	ldr	r2, [pc, #160]	; (80083c0 <RemovePortButton+0xf0>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d036      	beq.n	8008390 <RemovePortButton+0xc0>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	}
	else if(huart->Instance == USART4){
 8008322:	4a28      	ldr	r2, [pc, #160]	; (80083c4 <RemovePortButton+0xf4>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d037      	beq.n	8008398 <RemovePortButton+0xc8>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	}
	else if(huart->Instance == USART5){
 8008328:	4a27      	ldr	r2, [pc, #156]	; (80083c8 <RemovePortButton+0xf8>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d038      	beq.n	80083a0 <RemovePortButton+0xd0>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	}
	else if(huart->Instance == USART6){
 800832e:	4a27      	ldr	r2, [pc, #156]	; (80083cc <RemovePortButton+0xfc>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d039      	beq.n	80083a8 <RemovePortButton+0xd8>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	}
	else if(huart->Instance == USART7){
 8008334:	4a26      	ldr	r2, [pc, #152]	; (80083d0 <RemovePortButton+0x100>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d03a      	beq.n	80083b0 <RemovePortButton+0xe0>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	}
	else if(huart->Instance == USART8){
 800833a:	4a26      	ldr	r2, [pc, #152]	; (80083d4 <RemovePortButton+0x104>)
 800833c:	4694      	mov	ip, r2
 800833e:	4463      	add	r3, ip
 8008340:	1e5c      	subs	r4, r3, #1
 8008342:	41a3      	sbcs	r3, r4
 8008344:	425c      	negs	r4, r3
 8008346:	b2e4      	uxtb	r4, r4
	}
	else
		result =BOS_ERROR;
	
	/* 4. Start scanning this port */
	portStatus[port] =FREE;
 8008348:	4b23      	ldr	r3, [pc, #140]	; (80083d8 <RemovePortButton+0x108>)
 800834a:	2200      	movs	r2, #0
 800834c:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart,(uint8_t* )&cRxedChar,1);
 800834e:	3201      	adds	r2, #1
 8008350:	4922      	ldr	r1, [pc, #136]	; (80083dc <RemovePortButton+0x10c>)
 8008352:	0030      	movs	r0, r6
 8008354:	f009 fe34 	bl	8011fc0 <HAL_UART_Receive_IT>
	
	return result;
}
 8008358:	0020      	movs	r0, r4
 800835a:	b002      	add	sp, #8
 800835c:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),0);
 800835e:	2100      	movs	r1, #0
 8008360:	0020      	movs	r0, r4
 8008362:	f7ff fa3d 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 8008366:	1c60      	adds	r0, r4, #1
 8008368:	2100      	movs	r1, #0
 800836a:	f7ff fa39 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 800836e:	1ca0      	adds	r0, r4, #2
 8008370:	2100      	movs	r1, #0
 8008372:	f7ff fa35 	bl	80077e0 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 8008376:	1ce0      	adds	r0, r4, #3
 8008378:	2100      	movs	r1, #0
 800837a:	f7ff fa31 	bl	80077e0 <EE_WriteVariable>
 800837e:	e7c2      	b.n	8008306 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8008380:	f004 fe3c 	bl	800cffc <MX_USART1_UART_Init>
	BOS_Status result =BOS_OK;
 8008384:	2400      	movs	r4, #0
 8008386:	e7df      	b.n	8008348 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 8008388:	f004 fe50 	bl	800d02c <MX_USART2_UART_Init>
	BOS_Status result =BOS_OK;
 800838c:	2400      	movs	r4, #0
 800838e:	e7db      	b.n	8008348 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 8008390:	f004 fe64 	bl	800d05c <MX_USART3_UART_Init>
	BOS_Status result =BOS_OK;
 8008394:	2400      	movs	r4, #0
 8008396:	e7d7      	b.n	8008348 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 8008398:	f004 fe78 	bl	800d08c <MX_USART4_UART_Init>
	BOS_Status result =BOS_OK;
 800839c:	2400      	movs	r4, #0
 800839e:	e7d3      	b.n	8008348 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 80083a0:	f004 fe8c 	bl	800d0bc <MX_USART5_UART_Init>
	BOS_Status result =BOS_OK;
 80083a4:	2400      	movs	r4, #0
 80083a6:	e7cf      	b.n	8008348 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 80083a8:	f004 fea0 	bl	800d0ec <MX_USART6_UART_Init>
	BOS_Status result =BOS_OK;
 80083ac:	2400      	movs	r4, #0
 80083ae:	e7cb      	b.n	8008348 <RemovePortButton+0x78>
 80083b0:	2400      	movs	r4, #0
 80083b2:	e7c9      	b.n	8008348 <RemovePortButton+0x78>
 80083b4:	2000151c 	.word	0x2000151c
 80083b8:	40013800 	.word	0x40013800
 80083bc:	40004400 	.word	0x40004400
 80083c0:	40004800 	.word	0x40004800
 80083c4:	40004c00 	.word	0x40004c00
 80083c8:	40005000 	.word	0x40005000
 80083cc:	40011400 	.word	0x40011400
 80083d0:	40011800 	.word	0x40011800
 80083d4:	bffee400 	.word	0xbffee400
 80083d8:	200010f8 	.word	0x200010f8
 80083dc:	20000e58 	.word	0x20000e58

080083e0 <SetButtonEvents>:
 dbl_clicked: Double click event (1: Enable, 0: Disable)
 pressed_x1sec, pressed_x1sec, pressed_x1sec: Press time for events X1, X2 and X3 in seconds. Use 0 to disable the event.
 released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event.
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port,uint8_t clicked,uint8_t dbl_clicked,uint8_t pressed_x1sec,uint8_t pressed_x2sec,uint8_t pressed_x3sec,uint8_t released_y1sec,uint8_t released_y2sec,uint8_t released_y3sec,uint8_t mode){
 80083e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083e2:	46de      	mov	lr, fp
 80083e4:	4657      	mov	r7, sl
 80083e6:	464e      	mov	r6, r9
 80083e8:	4645      	mov	r5, r8
 80083ea:	b5e0      	push	{r5, r6, r7, lr}
 80083ec:	b085      	sub	sp, #20
 80083ee:	0007      	movs	r7, r0
 80083f0:	001e      	movs	r6, r3
 80083f2:	ab0e      	add	r3, sp, #56	; 0x38
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	4698      	mov	r8, r3
 80083f8:	ab0f      	add	r3, sp, #60	; 0x3c
 80083fa:	781d      	ldrb	r5, [r3, #0]
 80083fc:	ab10      	add	r3, sp, #64	; 0x40
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	469b      	mov	fp, r3
 8008402:	ab11      	add	r3, sp, #68	; 0x44
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	469a      	mov	sl, r3
 8008408:	ab12      	add	r3, sp, #72	; 0x48
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	4699      	mov	r9, r3
 800840e:	ab13      	add	r3, sp, #76	; 0x4c
 8008410:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;
	
	if(button[port].type == NONE)
 8008412:	00fc      	lsls	r4, r7, #3
 8008414:	19e4      	adds	r4, r4, r7
 8008416:	4b9e      	ldr	r3, [pc, #632]	; (8008690 <SetButtonEvents+0x2b0>)
 8008418:	191b      	adds	r3, r3, r4
 800841a:	785b      	ldrb	r3, [r3, #1]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d04c      	beq.n	80084ba <SetButtonEvents+0xda>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec =pressed_x1sec;
 8008420:	00fc      	lsls	r4, r7, #3
 8008422:	19e4      	adds	r4, r4, r7
 8008424:	4b9a      	ldr	r3, [pc, #616]	; (8008690 <SetButtonEvents+0x2b0>)
 8008426:	191b      	adds	r3, r3, r4
 8008428:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec =pressed_x2sec;
 800842a:	4644      	mov	r4, r8
 800842c:	70dc      	strb	r4, [r3, #3]
	button[port].pressedX3Sec =pressed_x3sec;
 800842e:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec =released_y1sec;
 8008430:	465c      	mov	r4, fp
 8008432:	715c      	strb	r4, [r3, #5]
	button[port].releasedY2Sec =released_y2sec;
 8008434:	4654      	mov	r4, sl
 8008436:	719c      	strb	r4, [r3, #6]
	button[port].releasedY3Sec =released_y3sec;
 8008438:	464c      	mov	r4, r9
 800843a:	71dc      	strb	r4, [r3, #7]
	
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)){
 800843c:	2801      	cmp	r0, #1
 800843e:	d003      	beq.n	8008448 <SetButtonEvents+0x68>
 8008440:	2800      	cmp	r0, #0
 8008442:	d113      	bne.n	800846c <SetButtonEvents+0x8c>
 8008444:	2900      	cmp	r1, #0
 8008446:	d042      	beq.n	80084ce <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008448:	00f9      	lsls	r1, r7, #3
 800844a:	19c9      	adds	r1, r1, r7
 800844c:	4b90      	ldr	r3, [pc, #576]	; (8008690 <SetButtonEvents+0x2b0>)
 800844e:	185b      	adds	r3, r3, r1
 8008450:	7a19      	ldrb	r1, [r3, #8]
 8008452:	2401      	movs	r4, #1
 8008454:	4321      	orrs	r1, r4
 8008456:	7219      	strb	r1, [r3, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !clicked){
		button[port].events &=~BUTTON_EVENT_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 8008458:	2801      	cmp	r0, #1
 800845a:	d10c      	bne.n	8008476 <SetButtonEvents+0x96>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800845c:	00fa      	lsls	r2, r7, #3
 800845e:	19d2      	adds	r2, r2, r7
 8008460:	4b8b      	ldr	r3, [pc, #556]	; (8008690 <SetButtonEvents+0x2b0>)
 8008462:	189b      	adds	r3, r3, r2
 8008464:	7a1a      	ldrb	r2, [r3, #8]
 8008466:	2102      	movs	r1, #2
 8008468:	430a      	orrs	r2, r1
 800846a:	721a      	strb	r2, [r3, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked){
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 800846c:	2801      	cmp	r0, #1
 800846e:	d042      	beq.n	80084f6 <SetButtonEvents+0x116>
 8008470:	2800      	cmp	r0, #0
 8008472:	d152      	bne.n	800851a <SetButtonEvents+0x13a>
 8008474:	e03d      	b.n	80084f2 <SetButtonEvents+0x112>
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 8008476:	2800      	cmp	r0, #0
 8008478:	d031      	beq.n	80084de <SetButtonEvents+0xfe>
 800847a:	e044      	b.n	8008506 <SetButtonEvents+0x126>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 800847c:	2800      	cmp	r0, #0
 800847e:	d059      	beq.n	8008534 <SetButtonEvents+0x154>
 8008480:	e06d      	b.n	800855e <SetButtonEvents+0x17e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec){
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 8008482:	2800      	cmp	r0, #0
 8008484:	d100      	bne.n	8008488 <SetButtonEvents+0xa8>
 8008486:	e082      	b.n	800858e <SetButtonEvents+0x1ae>
 8008488:	e097      	b.n	80085ba <SetButtonEvents+0x1da>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec){
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 800848a:	2800      	cmp	r0, #0
 800848c:	d100      	bne.n	8008490 <SetButtonEvents+0xb0>
 800848e:	e0f2      	b.n	8008676 <SetButtonEvents+0x296>
 8008490:	e09f      	b.n	80085d2 <SetButtonEvents+0x1f2>
	if(!res)											// This variable exists
	{
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
			temp16 =((uint16_t )temp8 << 8) | (uint16_t )button[port].events;
 8008492:	0a19      	lsrs	r1, r3, #8
 8008494:	0209      	lsls	r1, r1, #8
 8008496:	4311      	orrs	r1, r2
 8008498:	ab02      	add	r3, sp, #8
 800849a:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 800849c:	0020      	movs	r0, r4
 800849e:	f7ff f99f 	bl	80077e0 <EE_WriteVariable>
 80084a2:	e0ad      	b.n	8008600 <SetButtonEvents+0x220>
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
		if(temp16 != (((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec);
 80084a4:	0019      	movs	r1, r3
 80084a6:	9801      	ldr	r0, [sp, #4]
 80084a8:	f7ff f99a 	bl	80077e0 <EE_WriteVariable>
 80084ac:	e0b7      	b.n	800861e <SetButtonEvents+0x23e>
		
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
		if(temp16 != (((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec);
 80084ae:	4653      	mov	r3, sl
 80084b0:	4319      	orrs	r1, r3
 80084b2:	0030      	movs	r0, r6
 80084b4:	f7ff f994 	bl	80077e0 <EE_WriteVariable>
 80084b8:	e0c0      	b.n	800863c <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 80084ba:	200b      	movs	r0, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	return result;
}
 80084bc:	b005      	add	sp, #20
 80084be:	bc3c      	pop	{r2, r3, r4, r5}
 80084c0:	4690      	mov	r8, r2
 80084c2:	4699      	mov	r9, r3
 80084c4:	46a2      	mov	sl, r4
 80084c6:	46ab      	mov	fp, r5
 80084c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;
 80084ca:	200b      	movs	r0, #11
 80084cc:	e7f6      	b.n	80084bc <SetButtonEvents+0xdc>
		button[port].events &=~BUTTON_EVENT_CLICKED;
 80084ce:	00f9      	lsls	r1, r7, #3
 80084d0:	19c9      	adds	r1, r1, r7
 80084d2:	4b6f      	ldr	r3, [pc, #444]	; (8008690 <SetButtonEvents+0x2b0>)
 80084d4:	185b      	adds	r3, r3, r1
 80084d6:	7a19      	ldrb	r1, [r3, #8]
 80084d8:	2401      	movs	r4, #1
 80084da:	43a1      	bics	r1, r4
 80084dc:	7219      	strb	r1, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)){
 80084de:	2a00      	cmp	r2, #0
 80084e0:	d1bc      	bne.n	800845c <SetButtonEvents+0x7c>
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
 80084e2:	00fa      	lsls	r2, r7, #3
 80084e4:	19d2      	adds	r2, r2, r7
 80084e6:	4b6a      	ldr	r3, [pc, #424]	; (8008690 <SetButtonEvents+0x2b0>)
 80084e8:	189b      	adds	r3, r3, r2
 80084ea:	7a1a      	ldrb	r2, [r3, #8]
 80084ec:	2102      	movs	r1, #2
 80084ee:	438a      	bics	r2, r1
 80084f0:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)){
 80084f2:	2e00      	cmp	r6, #0
 80084f4:	d016      	beq.n	8008524 <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 80084f6:	00fa      	lsls	r2, r7, #3
 80084f8:	19d2      	adds	r2, r2, r7
 80084fa:	4b65      	ldr	r3, [pc, #404]	; (8008690 <SetButtonEvents+0x2b0>)
 80084fc:	189b      	adds	r3, r3, r2
 80084fe:	7a1a      	ldrb	r2, [r3, #8]
 8008500:	2104      	movs	r1, #4
 8008502:	430a      	orrs	r2, r1
 8008504:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 8008506:	2801      	cmp	r0, #1
 8008508:	d1b8      	bne.n	800847c <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800850a:	00fa      	lsls	r2, r7, #3
 800850c:	19d2      	adds	r2, r2, r7
 800850e:	4b60      	ldr	r3, [pc, #384]	; (8008690 <SetButtonEvents+0x2b0>)
 8008510:	189b      	adds	r3, r3, r2
 8008512:	7a1a      	ldrb	r2, [r3, #8]
 8008514:	2108      	movs	r1, #8
 8008516:	430a      	orrs	r2, r1
 8008518:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 800851a:	2801      	cmp	r0, #1
 800851c:	d017      	beq.n	800854e <SetButtonEvents+0x16e>
 800851e:	2800      	cmp	r0, #0
 8008520:	d128      	bne.n	8008574 <SetButtonEvents+0x194>
 8008522:	e012      	b.n	800854a <SetButtonEvents+0x16a>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008524:	00fa      	lsls	r2, r7, #3
 8008526:	19d2      	adds	r2, r2, r7
 8008528:	4b59      	ldr	r3, [pc, #356]	; (8008690 <SetButtonEvents+0x2b0>)
 800852a:	189b      	adds	r3, r3, r2
 800852c:	7a1a      	ldrb	r2, [r3, #8]
 800852e:	2104      	movs	r1, #4
 8008530:	438a      	bics	r2, r1
 8008532:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)){
 8008534:	4643      	mov	r3, r8
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1e7      	bne.n	800850a <SetButtonEvents+0x12a>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800853a:	00fa      	lsls	r2, r7, #3
 800853c:	19d2      	adds	r2, r2, r7
 800853e:	4b54      	ldr	r3, [pc, #336]	; (8008690 <SetButtonEvents+0x2b0>)
 8008540:	189b      	adds	r3, r3, r2
 8008542:	7a1a      	ldrb	r2, [r3, #8]
 8008544:	2108      	movs	r1, #8
 8008546:	438a      	bics	r2, r1
 8008548:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)){
 800854a:	2d00      	cmp	r5, #0
 800854c:	d017      	beq.n	800857e <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800854e:	00fa      	lsls	r2, r7, #3
 8008550:	19d2      	adds	r2, r2, r7
 8008552:	4b4f      	ldr	r3, [pc, #316]	; (8008690 <SetButtonEvents+0x2b0>)
 8008554:	189b      	adds	r3, r3, r2
 8008556:	7a1a      	ldrb	r2, [r3, #8]
 8008558:	2110      	movs	r1, #16
 800855a:	430a      	orrs	r2, r1
 800855c:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 800855e:	2801      	cmp	r0, #1
 8008560:	d000      	beq.n	8008564 <SetButtonEvents+0x184>
 8008562:	e78e      	b.n	8008482 <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008564:	00fa      	lsls	r2, r7, #3
 8008566:	19d2      	adds	r2, r2, r7
 8008568:	4b49      	ldr	r3, [pc, #292]	; (8008690 <SetButtonEvents+0x2b0>)
 800856a:	189b      	adds	r3, r3, r2
 800856c:	7a1a      	ldrb	r2, [r3, #8]
 800856e:	2120      	movs	r1, #32
 8008570:	430a      	orrs	r2, r1
 8008572:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 8008574:	2801      	cmp	r0, #1
 8008576:	d018      	beq.n	80085aa <SetButtonEvents+0x1ca>
 8008578:	2800      	cmp	r0, #0
 800857a:	d12a      	bne.n	80085d2 <SetButtonEvents+0x1f2>
 800857c:	e012      	b.n	80085a4 <SetButtonEvents+0x1c4>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800857e:	00fa      	lsls	r2, r7, #3
 8008580:	19d2      	adds	r2, r2, r7
 8008582:	4b43      	ldr	r3, [pc, #268]	; (8008690 <SetButtonEvents+0x2b0>)
 8008584:	189b      	adds	r3, r3, r2
 8008586:	7a1a      	ldrb	r2, [r3, #8]
 8008588:	2110      	movs	r1, #16
 800858a:	438a      	bics	r2, r1
 800858c:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)){
 800858e:	465b      	mov	r3, fp
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1e7      	bne.n	8008564 <SetButtonEvents+0x184>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008594:	00fa      	lsls	r2, r7, #3
 8008596:	19d2      	adds	r2, r2, r7
 8008598:	4b3d      	ldr	r3, [pc, #244]	; (8008690 <SetButtonEvents+0x2b0>)
 800859a:	189b      	adds	r3, r3, r2
 800859c:	7a1a      	ldrb	r2, [r3, #8]
 800859e:	2120      	movs	r1, #32
 80085a0:	438a      	bics	r2, r1
 80085a2:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)){
 80085a4:	4653      	mov	r3, sl
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d05d      	beq.n	8008666 <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80085aa:	00fa      	lsls	r2, r7, #3
 80085ac:	19d2      	adds	r2, r2, r7
 80085ae:	4b38      	ldr	r3, [pc, #224]	; (8008690 <SetButtonEvents+0x2b0>)
 80085b0:	189b      	adds	r3, r3, r2
 80085b2:	7a1a      	ldrb	r2, [r3, #8]
 80085b4:	2140      	movs	r1, #64	; 0x40
 80085b6:	430a      	orrs	r2, r1
 80085b8:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 80085ba:	2801      	cmp	r0, #1
 80085bc:	d000      	beq.n	80085c0 <SetButtonEvents+0x1e0>
 80085be:	e764      	b.n	800848a <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 80085c0:	00fa      	lsls	r2, r7, #3
 80085c2:	19d2      	adds	r2, r2, r7
 80085c4:	4b32      	ldr	r3, [pc, #200]	; (8008690 <SetButtonEvents+0x2b0>)
 80085c6:	189b      	adds	r3, r3, r2
 80085c8:	7a19      	ldrb	r1, [r3, #8]
 80085ca:	2280      	movs	r2, #128	; 0x80
 80085cc:	4252      	negs	r2, r2
 80085ce:	430a      	orrs	r2, r1
 80085d0:	721a      	strb	r2, [r3, #8]
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 80085d2:	003c      	movs	r4, r7
 80085d4:	343a      	adds	r4, #58	; 0x3a
 80085d6:	00a4      	lsls	r4, r4, #2
 80085d8:	ab02      	add	r3, sp, #8
 80085da:	1d99      	adds	r1, r3, #6
 80085dc:	0020      	movs	r0, r4
 80085de:	f7ff f8cf 	bl	8007780 <EE_ReadVariable>
	if(!res)											// This variable exists
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d000      	beq.n	80085e8 <SetButtonEvents+0x208>
 80085e6:	e770      	b.n	80084ca <SetButtonEvents+0xea>
		temp8 =(uint8_t )(temp16 >> 8);					// Keep upper byte
 80085e8:	ab02      	add	r3, sp, #8
 80085ea:	3306      	adds	r3, #6
 80085ec:	881b      	ldrh	r3, [r3, #0]
		if((uint8_t )(temp16) != button[port].events){					// Update only if different
 80085ee:	00fa      	lsls	r2, r7, #3
 80085f0:	19d2      	adds	r2, r2, r7
 80085f2:	4f27      	ldr	r7, [pc, #156]	; (8008690 <SetButtonEvents+0x2b0>)
 80085f4:	18bf      	adds	r7, r7, r2
 80085f6:	7a3a      	ldrb	r2, [r7, #8]
 80085f8:	b2d9      	uxtb	r1, r3
 80085fa:	4291      	cmp	r1, r2
 80085fc:	d000      	beq.n	8008600 <SetButtonEvents+0x220>
 80085fe:	e748      	b.n	8008492 <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
 8008600:	1c63      	adds	r3, r4, #1
 8008602:	aa02      	add	r2, sp, #8
 8008604:	1d97      	adds	r7, r2, #6
 8008606:	0039      	movs	r1, r7
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	0018      	movs	r0, r3
 800860c:	f7ff f8b8 	bl	8007780 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x1sec << 8) | (uint16_t )released_y1sec))
 8008610:	0236      	lsls	r6, r6, #8
 8008612:	883a      	ldrh	r2, [r7, #0]
 8008614:	465b      	mov	r3, fp
 8008616:	4333      	orrs	r3, r6
 8008618:	429a      	cmp	r2, r3
 800861a:	d000      	beq.n	800861e <SetButtonEvents+0x23e>
 800861c:	e742      	b.n	80084a4 <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
 800861e:	1ca6      	adds	r6, r4, #2
 8008620:	ab02      	add	r3, sp, #8
 8008622:	1d9f      	adds	r7, r3, #6
 8008624:	0039      	movs	r1, r7
 8008626:	0030      	movs	r0, r6
 8008628:	f7ff f8aa 	bl	8007780 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x2sec << 8) | (uint16_t )released_y2sec))
 800862c:	4643      	mov	r3, r8
 800862e:	0219      	lsls	r1, r3, #8
 8008630:	883a      	ldrh	r2, [r7, #0]
 8008632:	4653      	mov	r3, sl
 8008634:	430b      	orrs	r3, r1
 8008636:	429a      	cmp	r2, r3
 8008638:	d000      	beq.n	800863c <SetButtonEvents+0x25c>
 800863a:	e738      	b.n	80084ae <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,&temp16);
 800863c:	3403      	adds	r4, #3
 800863e:	ab02      	add	r3, sp, #8
 8008640:	1d9e      	adds	r6, r3, #6
 8008642:	0031      	movs	r1, r6
 8008644:	0020      	movs	r0, r4
 8008646:	f7ff f89b 	bl	8007780 <EE_ReadVariable>
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 800864a:	022d      	lsls	r5, r5, #8
 800864c:	8832      	ldrh	r2, [r6, #0]
 800864e:	464b      	mov	r3, r9
 8008650:	432b      	orrs	r3, r5
	return result;
 8008652:	2000      	movs	r0, #0
		if(temp16 != (((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec))
 8008654:	429a      	cmp	r2, r3
 8008656:	d100      	bne.n	800865a <SetButtonEvents+0x27a>
 8008658:	e730      	b.n	80084bc <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,((uint16_t )pressed_x3sec << 8) | (uint16_t )released_y3sec);
 800865a:	0019      	movs	r1, r3
 800865c:	0020      	movs	r0, r4
 800865e:	f7ff f8bf 	bl	80077e0 <EE_WriteVariable>
	return result;
 8008662:	2000      	movs	r0, #0
 8008664:	e72a      	b.n	80084bc <SetButtonEvents+0xdc>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008666:	00fa      	lsls	r2, r7, #3
 8008668:	19d2      	adds	r2, r2, r7
 800866a:	4b09      	ldr	r3, [pc, #36]	; (8008690 <SetButtonEvents+0x2b0>)
 800866c:	189b      	adds	r3, r3, r2
 800866e:	7a1a      	ldrb	r2, [r3, #8]
 8008670:	2140      	movs	r1, #64	; 0x40
 8008672:	438a      	bics	r2, r1
 8008674:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)){
 8008676:	464b      	mov	r3, r9
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1a1      	bne.n	80085c0 <SetButtonEvents+0x1e0>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800867c:	00fa      	lsls	r2, r7, #3
 800867e:	19d2      	adds	r2, r2, r7
 8008680:	4b03      	ldr	r3, [pc, #12]	; (8008690 <SetButtonEvents+0x2b0>)
 8008682:	189b      	adds	r3, r3, r2
 8008684:	7a19      	ldrb	r1, [r3, #8]
 8008686:	227f      	movs	r2, #127	; 0x7f
 8008688:	400a      	ands	r2, r1
 800868a:	721a      	strb	r2, [r3, #8]
 800868c:	e7a1      	b.n	80085d2 <SetButtonEvents+0x1f2>
 800868e:	46c0      	nop			; (mov r8, r8)
 8008690:	2000151c 	.word	0x2000151c

08008694 <HAL_ADC_MspInit>:
		Error_Handler();
	}
	ADC_flag =1;
}

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle){
 8008694:	b510      	push	{r4, lr}
 8008696:	b088      	sub	sp, #32
 8008698:	0004      	movs	r4, r0
	
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 800869a:	2214      	movs	r2, #20
 800869c:	2100      	movs	r1, #0
 800869e:	a803      	add	r0, sp, #12
 80086a0:	f00a fc86 	bl	8012fb0 <memset>
	if(adcHandle->Instance == ADC1){
 80086a4:	4b11      	ldr	r3, [pc, #68]	; (80086ec <HAL_ADC_MspInit+0x58>)
 80086a6:	6822      	ldr	r2, [r4, #0]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d001      	beq.n	80086b0 <HAL_ADC_MspInit+0x1c>
		
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 80086ac:	b008      	add	sp, #32
 80086ae:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 80086b0:	4b0f      	ldr	r3, [pc, #60]	; (80086f0 <HAL_ADC_MspInit+0x5c>)
 80086b2:	6999      	ldr	r1, [r3, #24]
 80086b4:	2080      	movs	r0, #128	; 0x80
 80086b6:	0080      	lsls	r0, r0, #2
 80086b8:	4301      	orrs	r1, r0
 80086ba:	6199      	str	r1, [r3, #24]
 80086bc:	699a      	ldr	r2, [r3, #24]
 80086be:	4002      	ands	r2, r0
 80086c0:	9201      	str	r2, [sp, #4]
 80086c2:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80086c4:	695a      	ldr	r2, [r3, #20]
 80086c6:	2180      	movs	r1, #128	; 0x80
 80086c8:	0289      	lsls	r1, r1, #10
 80086ca:	430a      	orrs	r2, r1
 80086cc:	615a      	str	r2, [r3, #20]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	400b      	ands	r3, r1
 80086d2:	9302      	str	r3, [sp, #8]
 80086d4:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80086d6:	233c      	movs	r3, #60	; 0x3c
 80086d8:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80086da:	3b39      	subs	r3, #57	; 0x39
 80086dc:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 80086de:	3871      	subs	r0, #113	; 0x71
 80086e0:	38ff      	subs	r0, #255	; 0xff
 80086e2:	a903      	add	r1, sp, #12
 80086e4:	05c0      	lsls	r0, r0, #23
 80086e6:	f008 fac1 	bl	8010c6c <HAL_GPIO_Init>
}
 80086ea:	e7df      	b.n	80086ac <HAL_ADC_MspInit+0x18>
 80086ec:	40012400 	.word	0x40012400
 80086f0:	40021000 	.word	0x40021000

080086f4 <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart,char *side){
	
	if(huart->Instance == USART2 && side == "top")
 80086f4:	6803      	ldr	r3, [r0, #0]
 80086f6:	4a0d      	ldr	r2, [pc, #52]	; (800872c <Get_channel+0x38>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d003      	beq.n	8008704 <Get_channel+0x10>
		return ADC_CHANNEL_2;
	else if(huart->Instance == USART2 && side == "bottom")
		return ADC_CHANNEL_3;
	else if(huart->Instance == USART6 && side == "top")
 80086fc:	4a0c      	ldr	r2, [pc, #48]	; (8008730 <Get_channel+0x3c>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d008      	beq.n	8008714 <Get_channel+0x20>
		return ADC_CHANNEL_4;
	else if(huart->Instance == USART6 && side == "bottom")
		return ADC_CHANNEL_5;
}
 8008702:	4770      	bx	lr
	if(huart->Instance == USART2 && side == "top")
 8008704:	4b0b      	ldr	r3, [pc, #44]	; (8008734 <Get_channel+0x40>)
 8008706:	4299      	cmp	r1, r3
 8008708:	d00c      	beq.n	8008724 <Get_channel+0x30>
	else if(huart->Instance == USART2 && side == "bottom")
 800870a:	4b0b      	ldr	r3, [pc, #44]	; (8008738 <Get_channel+0x44>)
 800870c:	4299      	cmp	r1, r3
 800870e:	d1f8      	bne.n	8008702 <Get_channel+0xe>
		return ADC_CHANNEL_3;
 8008710:	2003      	movs	r0, #3
 8008712:	e7f6      	b.n	8008702 <Get_channel+0xe>
	else if(huart->Instance == USART6 && side == "top")
 8008714:	4b07      	ldr	r3, [pc, #28]	; (8008734 <Get_channel+0x40>)
 8008716:	4299      	cmp	r1, r3
 8008718:	d006      	beq.n	8008728 <Get_channel+0x34>
	else if(huart->Instance == USART6 && side == "bottom")
 800871a:	4b07      	ldr	r3, [pc, #28]	; (8008738 <Get_channel+0x44>)
 800871c:	4299      	cmp	r1, r3
 800871e:	d1f0      	bne.n	8008702 <Get_channel+0xe>
		return ADC_CHANNEL_5;
 8008720:	2005      	movs	r0, #5
 8008722:	e7ee      	b.n	8008702 <Get_channel+0xe>
		return ADC_CHANNEL_2;
 8008724:	2002      	movs	r0, #2
 8008726:	e7ec      	b.n	8008702 <Get_channel+0xe>
		return ADC_CHANNEL_4;
 8008728:	2004      	movs	r0, #4
 800872a:	e7ea      	b.n	8008702 <Get_channel+0xe>
 800872c:	40004400 	.word	0x40004400
 8008730:	40011400 	.word	0x40011400
 8008734:	0801834c 	.word	0x0801834c
 8008738:	08018350 	.word	0x08018350

0800873c <Error_Handler>:

void Error_Handler(void){
 800873c:	b510      	push	{r4, lr}
	
	HAL_Delay(100);
 800873e:	2064      	movs	r0, #100	; 0x64
 8008740:	f006 ff9e 	bl	800f680 <HAL_Delay>
	
}
 8008744:	bd10      	pop	{r4, pc}
	...

08008748 <MX_ADC_Init>:
void MX_ADC_Init(void){
 8008748:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 800874a:	4811      	ldr	r0, [pc, #68]	; (8008790 <MX_ADC_Init+0x48>)
 800874c:	4b11      	ldr	r3, [pc, #68]	; (8008794 <MX_ADC_Init+0x4c>)
 800874e:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008750:	2380      	movs	r3, #128	; 0x80
 8008752:	061b      	lsls	r3, r3, #24
 8008754:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008756:	2300      	movs	r3, #0
 8008758:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800875a:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800875c:	2201      	movs	r2, #1
 800875e:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008760:	2104      	movs	r1, #4
 8008762:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait =DISABLE;
 8008764:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff =DISABLE;
 8008766:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode =ENABLE;
 8008768:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode =DISABLE;
 800876a:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800876c:	21c2      	movs	r1, #194	; 0xc2
 800876e:	31ff      	adds	r1, #255	; 0xff
 8008770:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008772:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests =DISABLE;
 8008774:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008776:	6342      	str	r2, [r0, #52]	; 0x34
	if(HAL_ADC_Init(&hadc) != HAL_OK){
 8008778:	f007 f85c 	bl	800f834 <HAL_ADC_Init>
 800877c:	2800      	cmp	r0, #0
 800877e:	d103      	bne.n	8008788 <MX_ADC_Init+0x40>
	ADC_flag =1;
 8008780:	4b05      	ldr	r3, [pc, #20]	; (8008798 <MX_ADC_Init+0x50>)
 8008782:	2201      	movs	r2, #1
 8008784:	701a      	strb	r2, [r3, #0]
}
 8008786:	bd10      	pop	{r4, pc}
		Error_Handler();
 8008788:	f7ff ffd8 	bl	800873c <Error_Handler>
 800878c:	e7f8      	b.n	8008780 <MX_ADC_Init+0x38>
 800878e:	46c0      	nop			; (mov r8, r8)
 8008790:	20006a7c 	.word	0x20006a7c
 8008794:	40012400 	.word	0x40012400
 8008798:	20001508 	.word	0x20001508

0800879c <ReadTempAndVref>:
void ReadTempAndVref(float *temp,float *Vref){
 800879c:	b570      	push	{r4, r5, r6, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	0005      	movs	r5, r0
 80087a2:	000e      	movs	r6, r1
	if(0 == ADC_flag)
 80087a4:	4b4d      	ldr	r3, [pc, #308]	; (80088dc <ReadTempAndVref+0x140>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d100      	bne.n	80087ae <ReadTempAndVref+0x12>
 80087ac:	e087      	b.n	80088be <ReadTempAndVref+0x122>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80087ae:	494c      	ldr	r1, [pc, #304]	; (80088e0 <ReadTempAndVref+0x144>)
 80087b0:	2310      	movs	r3, #16
 80087b2:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80087b4:	2380      	movs	r3, #128	; 0x80
 80087b6:	015b      	lsls	r3, r3, #5
 80087b8:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80087ba:	2301      	movs	r3, #1
 80087bc:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80087be:	4849      	ldr	r0, [pc, #292]	; (80088e4 <ReadTempAndVref+0x148>)
 80087c0:	f007 f998 	bl	800faf4 <HAL_ADC_ConfigChannel>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	d000      	beq.n	80087ca <ReadTempAndVref+0x2e>
 80087c8:	e07c      	b.n	80088c4 <ReadTempAndVref+0x128>
	HAL_ADC_Start(&hadc);
 80087ca:	4c46      	ldr	r4, [pc, #280]	; (80088e4 <ReadTempAndVref+0x148>)
 80087cc:	0020      	movs	r0, r4
 80087ce:	f007 f8d9 	bl	800f984 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 80087d2:	2164      	movs	r1, #100	; 0x64
 80087d4:	0020      	movs	r0, r4
 80087d6:	f007 f927 	bl	800fa28 <HAL_ADC_PollForConversion>
	ADC_value_temp =HAL_ADC_GetValue(&hadc);
 80087da:	0020      	movs	r0, r4
 80087dc:	f007 f984 	bl	800fae8 <HAL_ADC_GetValue>
 80087e0:	4b41      	ldr	r3, [pc, #260]	; (80088e8 <ReadTempAndVref+0x14c>)
 80087e2:	8018      	strh	r0, [r3, #0]
	*temp =((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 80087e4:	0400      	lsls	r0, r0, #16
 80087e6:	0c00      	lsrs	r0, r0, #16
 80087e8:	f7fa f930 	bl	8002a4c <__aeabi_i2d>
 80087ec:	4a3f      	ldr	r2, [pc, #252]	; (80088ec <ReadTempAndVref+0x150>)
 80087ee:	4b40      	ldr	r3, [pc, #256]	; (80088f0 <ReadTempAndVref+0x154>)
 80087f0:	f7f9 fb20 	bl	8001e34 <__aeabi_dmul>
 80087f4:	2200      	movs	r2, #0
 80087f6:	4b3f      	ldr	r3, [pc, #252]	; (80088f4 <ReadTempAndVref+0x158>)
 80087f8:	f7f8 ff12 	bl	8001620 <__aeabi_ddiv>
 80087fc:	4a3e      	ldr	r2, [pc, #248]	; (80088f8 <ReadTempAndVref+0x15c>)
 80087fe:	4b3f      	ldr	r3, [pc, #252]	; (80088fc <ReadTempAndVref+0x160>)
 8008800:	f7f9 fd8a 	bl	8002318 <__aeabi_dsub>
 8008804:	4a3e      	ldr	r2, [pc, #248]	; (8008900 <ReadTempAndVref+0x164>)
 8008806:	4b3f      	ldr	r3, [pc, #252]	; (8008904 <ReadTempAndVref+0x168>)
 8008808:	f7f8 ff0a 	bl	8001620 <__aeabi_ddiv>
 800880c:	2200      	movs	r2, #0
 800880e:	4b3e      	ldr	r3, [pc, #248]	; (8008908 <ReadTempAndVref+0x16c>)
 8008810:	f7f8 fbea 	bl	8000fe8 <__aeabi_dadd>
 8008814:	f7fa f9d8 	bl	8002bc8 <__aeabi_d2f>
 8008818:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 800881a:	0020      	movs	r0, r4
 800881c:	f007 f8e2 	bl	800f9e4 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008820:	492f      	ldr	r1, [pc, #188]	; (80088e0 <ReadTempAndVref+0x144>)
 8008822:	2310      	movs	r3, #16
 8008824:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008826:	4b39      	ldr	r3, [pc, #228]	; (800890c <ReadTempAndVref+0x170>)
 8008828:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800882a:	2301      	movs	r3, #1
 800882c:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 800882e:	0020      	movs	r0, r4
 8008830:	f007 f960 	bl	800faf4 <HAL_ADC_ConfigChannel>
 8008834:	2800      	cmp	r0, #0
 8008836:	d148      	bne.n	80088ca <ReadTempAndVref+0x12e>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008838:	4929      	ldr	r1, [pc, #164]	; (80088e0 <ReadTempAndVref+0x144>)
 800883a:	2311      	movs	r3, #17
 800883c:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800883e:	2380      	movs	r3, #128	; 0x80
 8008840:	015b      	lsls	r3, r3, #5
 8008842:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8008844:	2305      	movs	r3, #5
 8008846:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008848:	4826      	ldr	r0, [pc, #152]	; (80088e4 <ReadTempAndVref+0x148>)
 800884a:	f007 f953 	bl	800faf4 <HAL_ADC_ConfigChannel>
 800884e:	2800      	cmp	r0, #0
 8008850:	d13e      	bne.n	80088d0 <ReadTempAndVref+0x134>
	HAL_ADC_Start(&hadc);
 8008852:	4d24      	ldr	r5, [pc, #144]	; (80088e4 <ReadTempAndVref+0x148>)
 8008854:	0028      	movs	r0, r5
 8008856:	f007 f895 	bl	800f984 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc,100);
 800885a:	2164      	movs	r1, #100	; 0x64
 800885c:	0028      	movs	r0, r5
 800885e:	f007 f8e3 	bl	800fa28 <HAL_ADC_PollForConversion>
	ADC_value_Vref =HAL_ADC_GetValue(&hadc);
 8008862:	0028      	movs	r0, r5
 8008864:	f007 f940 	bl	800fae8 <HAL_ADC_GetValue>
 8008868:	0004      	movs	r4, r0
 800886a:	4b29      	ldr	r3, [pc, #164]	; (8008910 <ReadTempAndVref+0x174>)
 800886c:	8018      	strh	r0, [r3, #0]
	*Vref =3.3 * (*Vref_Cal) / ADC_value_Vref;
 800886e:	4b29      	ldr	r3, [pc, #164]	; (8008914 <ReadTempAndVref+0x178>)
 8008870:	8818      	ldrh	r0, [r3, #0]
 8008872:	f7fa f8eb 	bl	8002a4c <__aeabi_i2d>
 8008876:	4a1d      	ldr	r2, [pc, #116]	; (80088ec <ReadTempAndVref+0x150>)
 8008878:	4b1d      	ldr	r3, [pc, #116]	; (80088f0 <ReadTempAndVref+0x154>)
 800887a:	f7f9 fadb 	bl	8001e34 <__aeabi_dmul>
 800887e:	9000      	str	r0, [sp, #0]
 8008880:	9101      	str	r1, [sp, #4]
 8008882:	0420      	lsls	r0, r4, #16
 8008884:	0c00      	lsrs	r0, r0, #16
 8008886:	f7fa f8e1 	bl	8002a4c <__aeabi_i2d>
 800888a:	0002      	movs	r2, r0
 800888c:	000b      	movs	r3, r1
 800888e:	9800      	ldr	r0, [sp, #0]
 8008890:	9901      	ldr	r1, [sp, #4]
 8008892:	f7f8 fec5 	bl	8001620 <__aeabi_ddiv>
 8008896:	f7fa f997 	bl	8002bc8 <__aeabi_d2f>
 800889a:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 800889c:	0028      	movs	r0, r5
 800889e:	f007 f8a1 	bl	800f9e4 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80088a2:	490f      	ldr	r1, [pc, #60]	; (80088e0 <ReadTempAndVref+0x144>)
 80088a4:	2311      	movs	r3, #17
 80088a6:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 80088a8:	4b18      	ldr	r3, [pc, #96]	; (800890c <ReadTempAndVref+0x170>)
 80088aa:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80088ac:	2301      	movs	r3, #1
 80088ae:	608b      	str	r3, [r1, #8]
	if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80088b0:	0028      	movs	r0, r5
 80088b2:	f007 f91f 	bl	800faf4 <HAL_ADC_ConfigChannel>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d10d      	bne.n	80088d6 <ReadTempAndVref+0x13a>
}
 80088ba:	b002      	add	sp, #8
 80088bc:	bd70      	pop	{r4, r5, r6, pc}
		MX_ADC_Init();
 80088be:	f7ff ff43 	bl	8008748 <MX_ADC_Init>
 80088c2:	e774      	b.n	80087ae <ReadTempAndVref+0x12>
		Error_Handler();
 80088c4:	f7ff ff3a 	bl	800873c <Error_Handler>
 80088c8:	e77f      	b.n	80087ca <ReadTempAndVref+0x2e>
		Error_Handler();
 80088ca:	f7ff ff37 	bl	800873c <Error_Handler>
 80088ce:	e7b3      	b.n	8008838 <ReadTempAndVref+0x9c>
		Error_Handler();
 80088d0:	f7ff ff34 	bl	800873c <Error_Handler>
 80088d4:	e7bd      	b.n	8008852 <ReadTempAndVref+0xb6>
		Error_Handler();
 80088d6:	f7ff ff31 	bl	800873c <Error_Handler>
}
 80088da:	e7ee      	b.n	80088ba <ReadTempAndVref+0x11e>
 80088dc:	20001508 	.word	0x20001508
 80088e0:	200015a8 	.word	0x200015a8
 80088e4:	20006a7c 	.word	0x20006a7c
 80088e8:	2000150c 	.word	0x2000150c
 80088ec:	66666666 	.word	0x66666666
 80088f0:	400a6666 	.word	0x400a6666
 80088f4:	40affe00 	.word	0x40affe00
 80088f8:	28f5c28f 	.word	0x28f5c28f
 80088fc:	3ff68f5c 	.word	0x3ff68f5c
 8008900:	33333333 	.word	0x33333333
 8008904:	40113333 	.word	0x40113333
 8008908:	40390000 	.word	0x40390000
 800890c:	00001001 	.word	0x00001001
 8008910:	2000150a 	.word	0x2000150a
 8008914:	1ffff7ba 	.word	0x1ffff7ba

08008918 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port,float *precentageValue){
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	0004      	movs	r4, r0
 800891e:	000d      	movs	r5, r1
	if(port == 2 || port == 3){
 8008920:	1e83      	subs	r3, r0, #2
 8008922:	2b01      	cmp	r3, #1
 8008924:	d901      	bls.n	800892a <GetReadPrecentage+0x12>
}
 8008926:	b006      	add	sp, #24
 8008928:	bd70      	pop	{r4, r5, r6, pc}
		if(0 == ADC_flag){
 800892a:	4b3e      	ldr	r3, [pc, #248]	; (8008a24 <GetReadPrecentage+0x10c>)
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d055      	beq.n	80089de <GetReadPrecentage+0xc6>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8008932:	2090      	movs	r0, #144	; 0x90
 8008934:	2201      	movs	r2, #1
 8008936:	2110      	movs	r1, #16
 8008938:	05c0      	lsls	r0, r0, #23
 800893a:	f008 fb0b 	bl	8010f54 <HAL_GPIO_WritePin>
		Channel =Get_channel(GetUart(port),"bottom");
 800893e:	0020      	movs	r0, r4
 8008940:	f004 fd24 	bl	800d38c <GetUart>
 8008944:	4938      	ldr	r1, [pc, #224]	; (8008a28 <GetReadPrecentage+0x110>)
 8008946:	f7ff fed5 	bl	80086f4 <Get_channel>
 800894a:	4b38      	ldr	r3, [pc, #224]	; (8008a2c <GetReadPrecentage+0x114>)
 800894c:	7018      	strb	r0, [r3, #0]
		sConfig.Channel =Channel;
 800894e:	4938      	ldr	r1, [pc, #224]	; (8008a30 <GetReadPrecentage+0x118>)
 8008950:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008952:	2380      	movs	r3, #128	; 0x80
 8008954:	015b      	lsls	r3, r3, #5
 8008956:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008958:	2301      	movs	r3, #1
 800895a:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 800895c:	4835      	ldr	r0, [pc, #212]	; (8008a34 <GetReadPrecentage+0x11c>)
 800895e:	f007 f8c9 	bl	800faf4 <HAL_ADC_ConfigChannel>
 8008962:	2800      	cmp	r0, #0
 8008964:	d15b      	bne.n	8008a1e <GetReadPrecentage+0x106>
		HAL_ADC_Start(&hadc);
 8008966:	4c33      	ldr	r4, [pc, #204]	; (8008a34 <GetReadPrecentage+0x11c>)
 8008968:	0020      	movs	r0, r4
 800896a:	f007 f80b 	bl	800f984 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 800896e:	2164      	movs	r1, #100	; 0x64
 8008970:	0020      	movs	r0, r4
 8008972:	f007 f859 	bl	800fa28 <HAL_ADC_PollForConversion>
		percentage =HAL_ADC_GetValue(&hadc);
 8008976:	0020      	movs	r0, r4
 8008978:	f007 f8b6 	bl	800fae8 <HAL_ADC_GetValue>
 800897c:	f7f8 faf4 	bl	8000f68 <__aeabi_ui2f>
		percentage =3.3 * percentage / 4095;
 8008980:	f7fa f8d0 	bl	8002b24 <__aeabi_f2d>
 8008984:	4a2c      	ldr	r2, [pc, #176]	; (8008a38 <GetReadPrecentage+0x120>)
 8008986:	4b2d      	ldr	r3, [pc, #180]	; (8008a3c <GetReadPrecentage+0x124>)
 8008988:	f7f9 fa54 	bl	8001e34 <__aeabi_dmul>
 800898c:	2200      	movs	r2, #0
 800898e:	4b2c      	ldr	r3, [pc, #176]	; (8008a40 <GetReadPrecentage+0x128>)
 8008990:	f7f8 fe46 	bl	8001620 <__aeabi_ddiv>
 8008994:	f7fa f918 	bl	8002bc8 <__aeabi_d2f>
 8008998:	4b2a      	ldr	r3, [pc, #168]	; (8008a44 <GetReadPrecentage+0x12c>)
 800899a:	6018      	str	r0, [r3, #0]
		current =(100 * percentage) / 3.3;
 800899c:	492a      	ldr	r1, [pc, #168]	; (8008a48 <GetReadPrecentage+0x130>)
 800899e:	f7f7 ffcd 	bl	800093c <__aeabi_fmul>
 80089a2:	f7fa f8bf 	bl	8002b24 <__aeabi_f2d>
 80089a6:	4a24      	ldr	r2, [pc, #144]	; (8008a38 <GetReadPrecentage+0x120>)
 80089a8:	4b24      	ldr	r3, [pc, #144]	; (8008a3c <GetReadPrecentage+0x124>)
 80089aa:	f7f8 fe39 	bl	8001620 <__aeabi_ddiv>
 80089ae:	f7fa f90b 	bl	8002bc8 <__aeabi_d2f>
 80089b2:	4b26      	ldr	r3, [pc, #152]	; (8008a4c <GetReadPrecentage+0x134>)
 80089b4:	6018      	str	r0, [r3, #0]
		*precentageValue =current;
 80089b6:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 80089b8:	0020      	movs	r0, r4
 80089ba:	f007 f813 	bl	800f9e4 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 80089be:	491c      	ldr	r1, [pc, #112]	; (8008a30 <GetReadPrecentage+0x118>)
 80089c0:	4b1a      	ldr	r3, [pc, #104]	; (8008a2c <GetReadPrecentage+0x114>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 80089c6:	4b22      	ldr	r3, [pc, #136]	; (8008a50 <GetReadPrecentage+0x138>)
 80089c8:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80089ca:	2301      	movs	r3, #1
 80089cc:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 80089ce:	0020      	movs	r0, r4
 80089d0:	f007 f890 	bl	800faf4 <HAL_ADC_ConfigChannel>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d0a6      	beq.n	8008926 <GetReadPrecentage+0xe>
			Error_Handler();
 80089d8:	f7ff feb0 	bl	800873c <Error_Handler>
 80089dc:	e7a3      	b.n	8008926 <GetReadPrecentage+0xe>
			MX_ADC_Init();
 80089de:	f7ff feb3 	bl	8008748 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 80089e2:	0020      	movs	r0, r4
 80089e4:	f004 fcd2 	bl	800d38c <GetUart>
 80089e8:	f009 fa91 	bl	8011f0e <HAL_UART_DeInit>
			HAL_GPIO_DeInit(GPIOA,GPIO_PIN_4);
 80089ec:	2690      	movs	r6, #144	; 0x90
 80089ee:	05f6      	lsls	r6, r6, #23
 80089f0:	2110      	movs	r1, #16
 80089f2:	0030      	movs	r0, r6
 80089f4:	f008 fa1a 	bl	8010e2c <HAL_GPIO_DeInit>
			HAL_ADCEx_Calibration_Start(&hadc);
 80089f8:	480e      	ldr	r0, [pc, #56]	; (8008a34 <GetReadPrecentage+0x11c>)
 80089fa:	f007 f91f 	bl	800fc3c <HAL_ADCEx_Calibration_Start>
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 80089fe:	2310      	movs	r3, #16
 8008a00:	9301      	str	r3, [sp, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a02:	3b0f      	subs	r3, #15
 8008a04:	9302      	str	r3, [sp, #8]
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008a06:	3302      	adds	r3, #2
 8008a08:	9304      	str	r3, [sp, #16]
			HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8008a0a:	a901      	add	r1, sp, #4
 8008a0c:	0030      	movs	r0, r6
 8008a0e:	f008 f92d 	bl	8010c6c <HAL_GPIO_Init>
			portStatus[port - 1] =CUSTOM;
 8008a12:	4b10      	ldr	r3, [pc, #64]	; (8008a54 <GetReadPrecentage+0x13c>)
 8008a14:	191b      	adds	r3, r3, r4
 8008a16:	3b01      	subs	r3, #1
 8008a18:	2206      	movs	r2, #6
 8008a1a:	701a      	strb	r2, [r3, #0]
 8008a1c:	e789      	b.n	8008932 <GetReadPrecentage+0x1a>
			Error_Handler();
 8008a1e:	f7ff fe8d 	bl	800873c <Error_Handler>
 8008a22:	e7a0      	b.n	8008966 <GetReadPrecentage+0x4e>
 8008a24:	20001508 	.word	0x20001508
 8008a28:	08018350 	.word	0x08018350
 8008a2c:	20001518 	.word	0x20001518
 8008a30:	200015a8 	.word	0x200015a8
 8008a34:	20006a7c 	.word	0x20006a7c
 8008a38:	66666666 	.word	0x66666666
 8008a3c:	400a6666 	.word	0x400a6666
 8008a40:	40affe00 	.word	0x40affe00
 8008a44:	2000156c 	.word	0x2000156c
 8008a48:	42c80000 	.word	0x42c80000
 8008a4c:	2000155c 	.word	0x2000155c
 8008a50:	00001001 	.word	0x00001001
 8008a54:	200010f8 	.word	0x200010f8

08008a58 <Get_Rank>:

uint8_t Get_Rank(uint8_t Port,char *side){
	
	if(Port == 2 && side == "top")
 8008a58:	2802      	cmp	r0, #2
 8008a5a:	d004      	beq.n	8008a66 <Get_Rank+0xe>
		Rank_t =0;
	else if(Port == 2 && side == "bottom")
		Rank_t =1;
	else if(Port == 3 && side == "top")
 8008a5c:	2803      	cmp	r0, #3
 8008a5e:	d010      	beq.n	8008a82 <Get_Rank+0x2a>
		Rank_t =2;
	else if(Port == 3 && side == "bottom")
		Rank_t =3;
	return Rank_t;
 8008a60:	4b0f      	ldr	r3, [pc, #60]	; (8008aa0 <Get_Rank+0x48>)
 8008a62:	7818      	ldrb	r0, [r3, #0]
}
 8008a64:	4770      	bx	lr
	if(Port == 2 && side == "top")
 8008a66:	4b0f      	ldr	r3, [pc, #60]	; (8008aa4 <Get_Rank+0x4c>)
 8008a68:	4299      	cmp	r1, r3
 8008a6a:	d006      	beq.n	8008a7a <Get_Rank+0x22>
	else if(Port == 2 && side == "bottom")
 8008a6c:	4b0e      	ldr	r3, [pc, #56]	; (8008aa8 <Get_Rank+0x50>)
 8008a6e:	4299      	cmp	r1, r3
 8008a70:	d1f6      	bne.n	8008a60 <Get_Rank+0x8>
		Rank_t =1;
 8008a72:	4b0b      	ldr	r3, [pc, #44]	; (8008aa0 <Get_Rank+0x48>)
 8008a74:	2201      	movs	r2, #1
 8008a76:	701a      	strb	r2, [r3, #0]
 8008a78:	e7f2      	b.n	8008a60 <Get_Rank+0x8>
		Rank_t =0;
 8008a7a:	4b09      	ldr	r3, [pc, #36]	; (8008aa0 <Get_Rank+0x48>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	701a      	strb	r2, [r3, #0]
 8008a80:	e7ee      	b.n	8008a60 <Get_Rank+0x8>
	else if(Port == 3 && side == "top")
 8008a82:	4b08      	ldr	r3, [pc, #32]	; (8008aa4 <Get_Rank+0x4c>)
 8008a84:	4299      	cmp	r1, r3
 8008a86:	d006      	beq.n	8008a96 <Get_Rank+0x3e>
	else if(Port == 3 && side == "bottom")
 8008a88:	4b07      	ldr	r3, [pc, #28]	; (8008aa8 <Get_Rank+0x50>)
 8008a8a:	4299      	cmp	r1, r3
 8008a8c:	d1e8      	bne.n	8008a60 <Get_Rank+0x8>
		Rank_t =3;
 8008a8e:	4b04      	ldr	r3, [pc, #16]	; (8008aa0 <Get_Rank+0x48>)
 8008a90:	2203      	movs	r2, #3
 8008a92:	701a      	strb	r2, [r3, #0]
 8008a94:	e7e4      	b.n	8008a60 <Get_Rank+0x8>
		Rank_t =2;
 8008a96:	4b02      	ldr	r3, [pc, #8]	; (8008aa0 <Get_Rank+0x48>)
 8008a98:	2202      	movs	r2, #2
 8008a9a:	701a      	strb	r2, [r3, #0]
 8008a9c:	e7e0      	b.n	8008a60 <Get_Rank+0x8>
 8008a9e:	46c0      	nop			; (mov r8, r8)
 8008aa0:	20001519 	.word	0x20001519
 8008aa4:	0801834c 	.word	0x0801834c
 8008aa8:	08018350 	.word	0x08018350

08008aac <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port,char *side){
 8008aac:	b570      	push	{r4, r5, r6, lr}
 8008aae:	0004      	movs	r4, r0
 8008ab0:	000d      	movs	r5, r1
	if(ADC_port == 2 || ADC_port == 3){
 8008ab2:	1e83      	subs	r3, r0, #2
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d900      	bls.n	8008aba <ADCSelectChannel+0xe>
}
 8008ab8:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_DeInit(GetUart(ADC_port));
 8008aba:	f004 fc67 	bl	800d38c <GetUart>
 8008abe:	f009 fa26 	bl	8011f0e <HAL_UART_DeInit>
		portStatus[ADC_port - 1] =CUSTOM;
 8008ac2:	4b0d      	ldr	r3, [pc, #52]	; (8008af8 <ADCSelectChannel+0x4c>)
 8008ac4:	191b      	adds	r3, r3, r4
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	2206      	movs	r2, #6
 8008aca:	701a      	strb	r2, [r3, #0]
		Channel =Get_channel(GetUart(ADC_port),side);
 8008acc:	0020      	movs	r0, r4
 8008ace:	f004 fc5d 	bl	800d38c <GetUart>
 8008ad2:	0029      	movs	r1, r5
 8008ad4:	f7ff fe0e 	bl	80086f4 <Get_channel>
 8008ad8:	4b08      	ldr	r3, [pc, #32]	; (8008afc <ADCSelectChannel+0x50>)
 8008ada:	7018      	strb	r0, [r3, #0]
		Rank_t =Get_Rank(ADC_port,side);
 8008adc:	0029      	movs	r1, r5
 8008ade:	0020      	movs	r0, r4
 8008ae0:	f7ff ffba 	bl	8008a58 <Get_Rank>
 8008ae4:	4b06      	ldr	r3, [pc, #24]	; (8008b00 <ADCSelectChannel+0x54>)
 8008ae6:	7018      	strb	r0, [r3, #0]
		if(ADC_flag == 0)
 8008ae8:	4b06      	ldr	r3, [pc, #24]	; (8008b04 <ADCSelectChannel+0x58>)
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1e3      	bne.n	8008ab8 <ADCSelectChannel+0xc>
			MX_ADC_Init();
 8008af0:	f7ff fe2a 	bl	8008748 <MX_ADC_Init>
}
 8008af4:	e7e0      	b.n	8008ab8 <ADCSelectChannel+0xc>
 8008af6:	46c0      	nop			; (mov r8, r8)
 8008af8:	200010f8 	.word	0x200010f8
 8008afc:	20001518 	.word	0x20001518
 8008b00:	20001519 	.word	0x20001519
 8008b04:	20001508 	.word	0x20001508

08008b08 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port,char *side,float *ADC_Value){
 8008b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0a:	0005      	movs	r5, r0
 8008b0c:	000e      	movs	r6, r1
 8008b0e:	0014      	movs	r4, r2
	if(ADC_flag == 1){
 8008b10:	4b26      	ldr	r3, [pc, #152]	; (8008bac <ReadADCChannel+0xa4>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d008      	beq.n	8008b2a <ReadADCChannel+0x22>
	*ADC_Value =(float )ADCchannelvalue[Rank_t];
 8008b18:	4b25      	ldr	r3, [pc, #148]	; (8008bb0 <ReadADCChannel+0xa8>)
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	4a25      	ldr	r2, [pc, #148]	; (8008bb4 <ReadADCChannel+0xac>)
 8008b20:	5a98      	ldrh	r0, [r3, r2]
 8008b22:	f7f8 fa21 	bl	8000f68 <__aeabi_ui2f>
 8008b26:	6020      	str	r0, [r4, #0]
}
 8008b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel =Get_channel(GetUart(Port),side);
 8008b2a:	f004 fc2f 	bl	800d38c <GetUart>
 8008b2e:	0031      	movs	r1, r6
 8008b30:	f7ff fde0 	bl	80086f4 <Get_channel>
 8008b34:	4f20      	ldr	r7, [pc, #128]	; (8008bb8 <ReadADCChannel+0xb0>)
 8008b36:	7038      	strb	r0, [r7, #0]
		Rank_t =Get_Rank(Port,side);
 8008b38:	0031      	movs	r1, r6
 8008b3a:	0028      	movs	r0, r5
 8008b3c:	f7ff ff8c 	bl	8008a58 <Get_Rank>
 8008b40:	4b1b      	ldr	r3, [pc, #108]	; (8008bb0 <ReadADCChannel+0xa8>)
 8008b42:	7018      	strb	r0, [r3, #0]
		sConfig.Channel =Channel;
 8008b44:	491d      	ldr	r1, [pc, #116]	; (8008bbc <ReadADCChannel+0xb4>)
 8008b46:	783b      	ldrb	r3, [r7, #0]
 8008b48:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008b4a:	2380      	movs	r3, #128	; 0x80
 8008b4c:	015b      	lsls	r3, r3, #5
 8008b4e:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008b50:	2303      	movs	r3, #3
 8008b52:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008b54:	481a      	ldr	r0, [pc, #104]	; (8008bc0 <ReadADCChannel+0xb8>)
 8008b56:	f006 ffcd 	bl	800faf4 <HAL_ADC_ConfigChannel>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d122      	bne.n	8008ba4 <ReadADCChannel+0x9c>
		HAL_ADC_Start(&hadc);
 8008b5e:	4d18      	ldr	r5, [pc, #96]	; (8008bc0 <ReadADCChannel+0xb8>)
 8008b60:	0028      	movs	r0, r5
 8008b62:	f006 ff0f 	bl	800f984 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc,100);
 8008b66:	2164      	movs	r1, #100	; 0x64
 8008b68:	0028      	movs	r0, r5
 8008b6a:	f006 ff5d 	bl	800fa28 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] =HAL_ADC_GetValue(&hadc);
 8008b6e:	0028      	movs	r0, r5
 8008b70:	f006 ffba 	bl	800fae8 <HAL_ADC_GetValue>
 8008b74:	4b0e      	ldr	r3, [pc, #56]	; (8008bb0 <ReadADCChannel+0xa8>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	005b      	lsls	r3, r3, #1
 8008b7a:	4a0e      	ldr	r2, [pc, #56]	; (8008bb4 <ReadADCChannel+0xac>)
 8008b7c:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 8008b7e:	0028      	movs	r0, r5
 8008b80:	f006 ff30 	bl	800f9e4 <HAL_ADC_Stop>
		sConfig.Channel =Channel;
 8008b84:	490d      	ldr	r1, [pc, #52]	; (8008bbc <ReadADCChannel+0xb4>)
 8008b86:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <ReadADCChannel+0xb0>)
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008b8c:	4b0d      	ldr	r3, [pc, #52]	; (8008bc4 <ReadADCChannel+0xbc>)
 8008b8e:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008b90:	2303      	movs	r3, #3
 8008b92:	608b      	str	r3, [r1, #8]
		if(HAL_ADC_ConfigChannel(&hadc,&sConfig) != HAL_OK){
 8008b94:	0028      	movs	r0, r5
 8008b96:	f006 ffad 	bl	800faf4 <HAL_ADC_ConfigChannel>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d0bc      	beq.n	8008b18 <ReadADCChannel+0x10>
			Error_Handler();
 8008b9e:	f7ff fdcd 	bl	800873c <Error_Handler>
 8008ba2:	e7b9      	b.n	8008b18 <ReadADCChannel+0x10>
			Error_Handler();
 8008ba4:	f7ff fdca 	bl	800873c <Error_Handler>
 8008ba8:	e7d9      	b.n	8008b5e <ReadADCChannel+0x56>
 8008baa:	46c0      	nop			; (mov r8, r8)
 8008bac:	20001508 	.word	0x20001508
 8008bb0:	20001519 	.word	0x20001519
 8008bb4:	20001510 	.word	0x20001510
 8008bb8:	20001518 	.word	0x20001518
 8008bbc:	200015a8 	.word	0x200015a8
 8008bc0:	20006a7c 	.word	0x20006a7c
 8008bc4:	00001001 	.word	0x00001001

08008bc8 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port){
}
 8008bc8:	4770      	bx	lr

08008bca <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port){
}
 8008bca:	4770      	bx	lr

08008bcc <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port){
}
 8008bcc:	4770      	bx	lr

08008bce <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port,uint8_t eventType){
}
 8008bce:	4770      	bx	lr

08008bd0 <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port,uint8_t eventType){
}
 8008bd0:	4770      	bx	lr
	...

08008bd4 <CheckAttachedButtons>:
void CheckAttachedButtons(void){
 8008bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bd6:	46de      	mov	lr, fp
 8008bd8:	4657      	mov	r7, sl
 8008bda:	464e      	mov	r6, r9
 8008bdc:	4645      	mov	r5, r8
 8008bde:	b5e0      	push	{r5, r6, r7, lr}
 8008be0:	b089      	sub	sp, #36	; 0x24
 8008be2:	4dbd      	ldr	r5, [pc, #756]	; (8008ed8 <CheckAttachedButtons+0x304>)
 8008be4:	3509      	adds	r5, #9
 8008be6:	2404      	movs	r4, #4
 8008be8:	2601      	movs	r6, #1
	uint8_t connected =GPIO_PIN_RESET, state =0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	469b      	mov	fp, r3
 8008bee:	4699      	mov	r9, r3
 8008bf0:	e111      	b.n	8008e16 <CheckAttachedButtons+0x242>
				HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_SET);
 8008bf2:	230e      	movs	r3, #14
 8008bf4:	aa02      	add	r2, sp, #8
 8008bf6:	4694      	mov	ip, r2
 8008bf8:	4463      	add	r3, ip
 8008bfa:	8819      	ldrh	r1, [r3, #0]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	9807      	ldr	r0, [sp, #28]
 8008c00:	f008 f9a8 	bl	8010f54 <HAL_GPIO_WritePin>
				Delay_us(10);
 8008c04:	200a      	movs	r0, #10
 8008c06:	f004 f9d5 	bl	800cfb4 <StartMicroDelay>
				connected =HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin);
 8008c0a:	ab05      	add	r3, sp, #20
 8008c0c:	8819      	ldrh	r1, [r3, #0]
 8008c0e:	9806      	ldr	r0, [sp, #24]
 8008c10:	f008 f99a 	bl	8010f48 <HAL_GPIO_ReadPin>
 8008c14:	4681      	mov	r9, r0
 8008c16:	e126      	b.n	8008e66 <CheckAttachedButtons+0x292>
			switch(button[i].type){
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d105      	bne.n	8008c28 <CheckAttachedButtons+0x54>
					if(connected == GPIO_PIN_SET)
 8008c1c:	464b      	mov	r3, r9
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d046      	beq.n	8008cb0 <CheckAttachedButtons+0xdc>
					else if(connected == GPIO_PIN_RESET)
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d100      	bne.n	8008c28 <CheckAttachedButtons+0x54>
 8008c26:	e1c5      	b.n	8008fb4 <CheckAttachedButtons+0x3e0>
			if(state == CLOSED || state == ON){
 8008c28:	465b      	mov	r3, fp
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	d001      	beq.n	8008c32 <CheckAttachedButtons+0x5e>
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d107      	bne.n	8008c42 <CheckAttachedButtons+0x6e>
				if(pressCounter[i] < 0xFFFF)
 8008c32:	4baa      	ldr	r3, [pc, #680]	; (8008edc <CheckAttachedButtons+0x308>)
 8008c34:	58e3      	ldr	r3, [r4, r3]
 8008c36:	4aaa      	ldr	r2, [pc, #680]	; (8008ee0 <CheckAttachedButtons+0x30c>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d842      	bhi.n	8008cc2 <CheckAttachedButtons+0xee>
					++pressCounter[i];			// Advance the debounce counter
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	4aa7      	ldr	r2, [pc, #668]	; (8008edc <CheckAttachedButtons+0x308>)
 8008c40:	50a3      	str	r3, [r4, r2]
			if(state == OPEN || state == OFF){
 8008c42:	23fd      	movs	r3, #253	; 0xfd
 8008c44:	465a      	mov	r2, fp
 8008c46:	4013      	ands	r3, r2
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d100      	bne.n	8008c4e <CheckAttachedButtons+0x7a>
 8008c4c:	e1b6      	b.n	8008fbc <CheckAttachedButtons+0x3e8>
			if(pressCounter[i] < BOS.buttons.debounce){
 8008c4e:	4ba3      	ldr	r3, [pc, #652]	; (8008edc <CheckAttachedButtons+0x308>)
 8008c50:	58e3      	ldr	r3, [r4, r3]
 8008c52:	4aa4      	ldr	r2, [pc, #656]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008c54:	8812      	ldrh	r2, [r2, #0]
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d36f      	bcc.n	8008d3a <CheckAttachedButtons+0x166>
				if(pressCounter[i] == BOS.buttons.debounce){
 8008c5a:	d045      	beq.n	8008ce8 <CheckAttachedButtons+0x114>
				if(releaseCounter[i] > BOS.buttons.debounce)			// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8008c5c:	4ba2      	ldr	r3, [pc, #648]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008c5e:	58e3      	ldr	r3, [r4, r3]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d202      	bcs.n	8008c6a <CheckAttachedButtons+0x96>
					releaseCounter[i] =0;
 8008c64:	4ba0      	ldr	r3, [pc, #640]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	50e2      	str	r2, [r4, r3]
				if(pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500){
 8008c6a:	4b9c      	ldr	r3, [pc, #624]	; (8008edc <CheckAttachedButtons+0x308>)
 8008c6c:	58e3      	ldr	r3, [r4, r3]
 8008c6e:	4a9d      	ldr	r2, [pc, #628]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008c70:	8852      	ldrh	r2, [r2, #2]
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d952      	bls.n	8008d1c <CheckAttachedButtons+0x148>
 8008c76:	22f4      	movs	r2, #244	; 0xf4
 8008c78:	32ff      	adds	r2, #255	; 0xff
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d84e      	bhi.n	8008d1c <CheckAttachedButtons+0x148>
					if(clicked == 0)
 8008c7e:	4b9b      	ldr	r3, [pc, #620]	; (8008eec <CheckAttachedButtons+0x318>)
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d137      	bne.n	8008cf6 <CheckAttachedButtons+0x122>
						clicked =1;		// Record a possible single click
 8008c86:	4b99      	ldr	r3, [pc, #612]	; (8008eec <CheckAttachedButtons+0x318>)
 8008c88:	3af3      	subs	r2, #243	; 0xf3
 8008c8a:	3aff      	subs	r2, #255	; 0xff
 8008c8c:	701a      	strb	r2, [r3, #0]
 8008c8e:	e054      	b.n	8008d3a <CheckAttachedButtons+0x166>
					if(connected == GPIO_PIN_SET)
 8008c90:	464b      	mov	r3, r9
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d00f      	beq.n	8008cb6 <CheckAttachedButtons+0xe2>
					else if(connected == GPIO_PIN_RESET)
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1c6      	bne.n	8008c28 <CheckAttachedButtons+0x54>
						state =OPEN;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	469b      	mov	fp, r3
 8008c9e:	e18d      	b.n	8008fbc <CheckAttachedButtons+0x3e8>
					if(connected == GPIO_PIN_SET)
 8008ca0:	464b      	mov	r3, r9
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d00a      	beq.n	8008cbc <CheckAttachedButtons+0xe8>
					else if(connected == GPIO_PIN_RESET)
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1be      	bne.n	8008c28 <CheckAttachedButtons+0x54>
						state =OFF;
 8008caa:	2301      	movs	r3, #1
 8008cac:	469b      	mov	fp, r3
 8008cae:	e185      	b.n	8008fbc <CheckAttachedButtons+0x3e8>
						state =CLOSED;
 8008cb0:	2304      	movs	r3, #4
 8008cb2:	469b      	mov	fp, r3
 8008cb4:	e7bd      	b.n	8008c32 <CheckAttachedButtons+0x5e>
						state =CLOSED;
 8008cb6:	2304      	movs	r3, #4
 8008cb8:	469b      	mov	fp, r3
 8008cba:	e7ba      	b.n	8008c32 <CheckAttachedButtons+0x5e>
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	469b      	mov	fp, r3
 8008cc0:	e7b7      	b.n	8008c32 <CheckAttachedButtons+0x5e>
					pressCounter[i] =0;			// Reset debounce counter
 8008cc2:	4b86      	ldr	r3, [pc, #536]	; (8008edc <CheckAttachedButtons+0x308>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	50e2      	str	r2, [r4, r3]
 8008cc8:	e7bb      	b.n	8008c42 <CheckAttachedButtons+0x6e>
					releaseCounter[i] =0;		// Reset debounce counter
 8008cca:	4b87      	ldr	r3, [pc, #540]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	50e2      	str	r2, [r4, r3]
 8008cd0:	e17d      	b.n	8008fce <CheckAttachedButtons+0x3fa>
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8008cd2:	4b87      	ldr	r3, [pc, #540]	; (8008ef0 <CheckAttachedButtons+0x31c>)
 8008cd4:	5cf3      	ldrb	r3, [r6, r3]
 8008cd6:	4a83      	ldr	r2, [pc, #524]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008cd8:	7952      	ldrb	r2, [r2, #5]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d200      	bcs.n	8008ce0 <CheckAttachedButtons+0x10c>
 8008cde:	e182      	b.n	8008fe6 <CheckAttachedButtons+0x412>
					++dblCounter[i];
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	4a83      	ldr	r2, [pc, #524]	; (8008ef0 <CheckAttachedButtons+0x31c>)
 8008ce4:	54b3      	strb	r3, [r6, r2]
 8008ce6:	e7b2      	b.n	8008c4e <CheckAttachedButtons+0x7a>
					button[i].state =PRESSED;			// Record a PRESSED event. This event is always reset on next tick.
 8008ce8:	2107      	movs	r1, #7
 8008cea:	4640      	mov	r0, r8
 8008cec:	7001      	strb	r1, [r0, #0]
					++pressCounter[i];
 8008cee:	3301      	adds	r3, #1
 8008cf0:	497a      	ldr	r1, [pc, #488]	; (8008edc <CheckAttachedButtons+0x308>)
 8008cf2:	5063      	str	r3, [r4, r1]
 8008cf4:	e7b2      	b.n	8008c5c <CheckAttachedButtons+0x88>
					else if(clicked == 2){
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d11f      	bne.n	8008d3a <CheckAttachedButtons+0x166>
						if(dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime){
 8008cfa:	4b7d      	ldr	r3, [pc, #500]	; (8008ef0 <CheckAttachedButtons+0x31c>)
 8008cfc:	5cf3      	ldrb	r3, [r6, r3]
 8008cfe:	4a79      	ldr	r2, [pc, #484]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008d00:	7912      	ldrb	r2, [r2, #4]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d219      	bcs.n	8008d3a <CheckAttachedButtons+0x166>
 8008d06:	4a77      	ldr	r2, [pc, #476]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008d08:	7952      	ldrb	r2, [r2, #5]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d915      	bls.n	8008d3a <CheckAttachedButtons+0x166>
							clicked =3;	// Record a possible double click
 8008d0e:	4b77      	ldr	r3, [pc, #476]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d10:	2203      	movs	r2, #3
 8008d12:	701a      	strb	r2, [r3, #0]
							dblCounter[i] =0;	// Reset the inter-click counter
 8008d14:	4b76      	ldr	r3, [pc, #472]	; (8008ef0 <CheckAttachedButtons+0x31c>)
 8008d16:	2200      	movs	r2, #0
 8008d18:	54f2      	strb	r2, [r6, r3]
 8008d1a:	e00e      	b.n	8008d3a <CheckAttachedButtons+0x166>
				else if(pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF){
 8008d1c:	3bf5      	subs	r3, #245	; 0xf5
 8008d1e:	3bff      	subs	r3, #255	; 0xff
 8008d20:	4a74      	ldr	r2, [pc, #464]	; (8008ef4 <CheckAttachedButtons+0x320>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d809      	bhi.n	8008d3a <CheckAttachedButtons+0x166>
					if(clicked)
 8008d26:	4b71      	ldr	r3, [pc, #452]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <CheckAttachedButtons+0x160>
						clicked =0;						// Cannot be a click
 8008d2e:	4b6f      	ldr	r3, [pc, #444]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 8008d34:	9803      	ldr	r0, [sp, #12]
 8008d36:	f7ff f9bd 	bl	80080b4 <CheckForTimedButtonPress>
			if(releaseCounter[i] < BOS.buttons.debounce){
 8008d3a:	4b6b      	ldr	r3, [pc, #428]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008d3c:	58e3      	ldr	r3, [r4, r3]
 8008d3e:	4a69      	ldr	r2, [pc, #420]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008d40:	8812      	ldrh	r2, [r2, #0]
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d34d      	bcc.n	8008de2 <CheckAttachedButtons+0x20e>
				if(releaseCounter[i] == BOS.buttons.debounce){
 8008d46:	d02b      	beq.n	8008da0 <CheckAttachedButtons+0x1cc>
				if(pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8008d48:	4b64      	ldr	r3, [pc, #400]	; (8008edc <CheckAttachedButtons+0x308>)
 8008d4a:	58e3      	ldr	r3, [r4, r3]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d202      	bcs.n	8008d56 <CheckAttachedButtons+0x182>
					pressCounter[i] =0;
 8008d50:	4b62      	ldr	r3, [pc, #392]	; (8008edc <CheckAttachedButtons+0x308>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	50e2      	str	r2, [r4, r3]
				if(releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500){
 8008d56:	4b64      	ldr	r3, [pc, #400]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008d58:	58e3      	ldr	r3, [r4, r3]
 8008d5a:	4a62      	ldr	r2, [pc, #392]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008d5c:	8852      	ldrh	r2, [r2, #2]
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d93a      	bls.n	8008dd8 <CheckAttachedButtons+0x204>
 8008d62:	22f4      	movs	r2, #244	; 0xf4
 8008d64:	32ff      	adds	r2, #255	; 0xff
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d836      	bhi.n	8008dd8 <CheckAttachedButtons+0x204>
					if(clicked == 1){
 8008d6a:	4b60      	ldr	r3, [pc, #384]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d01d      	beq.n	8008dae <CheckAttachedButtons+0x1da>
					else if(clicked == 3){
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d135      	bne.n	8008de2 <CheckAttachedButtons+0x20e>
						button[i].state =DBL_CLICKED;			// Record a double button click event
 8008d76:	3303      	adds	r3, #3
 8008d78:	4642      	mov	r2, r8
 8008d7a:	7013      	strb	r3, [r2, #0]
						clicked =0;			// Prepare for a single click
 8008d7c:	4b5b      	ldr	r3, [pc, #364]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	701a      	strb	r2, [r3, #0]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)){
 8008d82:	4b5d      	ldr	r3, [pc, #372]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d13f      	bne.n	8008e0a <CheckAttachedButtons+0x236>
 8008d8a:	4643      	mov	r3, r8
 8008d8c:	7a1b      	ldrb	r3, [r3, #8]
 8008d8e:	079b      	lsls	r3, r3, #30
 8008d90:	d53b      	bpl.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008d92:	4b59      	ldr	r3, [pc, #356]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008d94:	2201      	movs	r2, #1
 8008d96:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 8008d98:	9803      	ldr	r0, [sp, #12]
 8008d9a:	f7ff ff17 	bl	8008bcc <buttonDblClickedCallback>
 8008d9e:	e034      	b.n	8008e0a <CheckAttachedButtons+0x236>
					button[i].state =RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 8008da0:	2108      	movs	r1, #8
 8008da2:	4640      	mov	r0, r8
 8008da4:	7001      	strb	r1, [r0, #0]
					++releaseCounter[i];
 8008da6:	3301      	adds	r3, #1
 8008da8:	494f      	ldr	r1, [pc, #316]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008daa:	5063      	str	r3, [r4, r1]
 8008dac:	e7cc      	b.n	8008d48 <CheckAttachedButtons+0x174>
						button[i].state =CLICKED;	// Record a single button click event
 8008dae:	3304      	adds	r3, #4
 8008db0:	4642      	mov	r2, r8
 8008db2:	7013      	strb	r3, [r2, #0]
						clicked =2;			// Prepare for a double click
 8008db4:	4b4d      	ldr	r3, [pc, #308]	; (8008eec <CheckAttachedButtons+0x318>)
 8008db6:	2202      	movs	r2, #2
 8008db8:	701a      	strb	r2, [r3, #0]
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)){
 8008dba:	4b4f      	ldr	r3, [pc, #316]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d123      	bne.n	8008e0a <CheckAttachedButtons+0x236>
 8008dc2:	4643      	mov	r3, r8
 8008dc4:	7a1b      	ldrb	r3, [r3, #8]
 8008dc6:	07db      	lsls	r3, r3, #31
 8008dc8:	d51f      	bpl.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008dca:	4b4b      	ldr	r3, [pc, #300]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008dcc:	2201      	movs	r2, #1
 8008dce:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 8008dd0:	9803      	ldr	r0, [sp, #12]
 8008dd2:	f7ff fefa 	bl	8008bca <buttonClickedCallback>
 8008dd6:	e018      	b.n	8008e0a <CheckAttachedButtons+0x236>
				else if(releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF){
 8008dd8:	3bf5      	subs	r3, #245	; 0xf5
 8008dda:	3bff      	subs	r3, #255	; 0xff
 8008ddc:	4a45      	ldr	r2, [pc, #276]	; (8008ef4 <CheckAttachedButtons+0x320>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d909      	bls.n	8008df6 <CheckAttachedButtons+0x222>
			switch(button[i].state){
 8008de2:	4643      	mov	r3, r8
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	3b05      	subs	r3, #5
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	2a09      	cmp	r2, #9
 8008dec:	d80d      	bhi.n	8008e0a <CheckAttachedButtons+0x236>
 8008dee:	0093      	lsls	r3, r2, #2
 8008df0:	4a42      	ldr	r2, [pc, #264]	; (8008efc <CheckAttachedButtons+0x328>)
 8008df2:	58d3      	ldr	r3, [r2, r3]
 8008df4:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 8008df6:	9803      	ldr	r0, [sp, #12]
 8008df8:	f7ff f99a 	bl	8008130 <CheckForTimedButtonRelease>
 8008dfc:	e7f1      	b.n	8008de2 <CheckAttachedButtons+0x20e>
					buttonPressedCallback(i);
 8008dfe:	9803      	ldr	r0, [sp, #12]
 8008e00:	f7ff f956 	bl	80080b0 <buttonPressedCallback>
					button[i].state =NONE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	4642      	mov	r2, r8
 8008e08:	7013      	strb	r3, [r2, #0]
 8008e0a:	3601      	adds	r6, #1
 8008e0c:	3509      	adds	r5, #9
 8008e0e:	3404      	adds	r4, #4
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8008e10:	2c1c      	cmp	r4, #28
 8008e12:	d100      	bne.n	8008e16 <CheckAttachedButtons+0x242>
 8008e14:	e0ed      	b.n	8008ff2 <CheckAttachedButtons+0x41e>
 8008e16:	b2f3      	uxtb	r3, r6
 8008e18:	9303      	str	r3, [sp, #12]
 8008e1a:	46a8      	mov	r8, r5
		if(button[i].type)			// Only check defined butons
 8008e1c:	786b      	ldrb	r3, [r5, #1]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0f3      	beq.n	8008e0a <CheckAttachedButtons+0x236>
			if(delayButtonStateReset == false)
 8008e22:	4b35      	ldr	r3, [pc, #212]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d100      	bne.n	8008e2c <CheckAttachedButtons+0x258>
				button[i].state =NONE;
 8008e2a:	702b      	strb	r3, [r5, #0]
			GetPortGPIOs(i,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 8008e2c:	230e      	movs	r3, #14
 8008e2e:	aa02      	add	r2, sp, #8
 8008e30:	4694      	mov	ip, r2
 8008e32:	4463      	add	r3, ip
 8008e34:	469a      	mov	sl, r3
 8008e36:	af05      	add	r7, sp, #20
 8008e38:	9700      	str	r7, [sp, #0]
 8008e3a:	ab06      	add	r3, sp, #24
 8008e3c:	4652      	mov	r2, sl
 8008e3e:	a907      	add	r1, sp, #28
 8008e40:	9803      	ldr	r0, [sp, #12]
 8008e42:	f003 fd25 	bl	800c890 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 8008e46:	4653      	mov	r3, sl
 8008e48:	8819      	ldrh	r1, [r3, #0]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	9807      	ldr	r0, [sp, #28]
 8008e4e:	f008 f881 	bl	8010f54 <HAL_GPIO_WritePin>
			Delay_us(10);
 8008e52:	200a      	movs	r0, #10
 8008e54:	f004 f8ae 	bl	800cfb4 <StartMicroDelay>
			if(HAL_GPIO_ReadPin((GPIO_TypeDef* )RX_Port,RX_Pin) == GPIO_PIN_RESET){
 8008e58:	8839      	ldrh	r1, [r7, #0]
 8008e5a:	9806      	ldr	r0, [sp, #24]
 8008e5c:	f008 f874 	bl	8010f48 <HAL_GPIO_ReadPin>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d100      	bne.n	8008e66 <CheckAttachedButtons+0x292>
 8008e64:	e6c5      	b.n	8008bf2 <CheckAttachedButtons+0x1e>
			HAL_GPIO_WritePin((GPIO_TypeDef* )TX_Port,TX_Pin,GPIO_PIN_RESET);
 8008e66:	230e      	movs	r3, #14
 8008e68:	aa02      	add	r2, sp, #8
 8008e6a:	4694      	mov	ip, r2
 8008e6c:	4463      	add	r3, ip
 8008e6e:	8819      	ldrh	r1, [r3, #0]
 8008e70:	2200      	movs	r2, #0
 8008e72:	9807      	ldr	r0, [sp, #28]
 8008e74:	f008 f86e 	bl	8010f54 <HAL_GPIO_WritePin>
			switch(button[i].type){
 8008e78:	4643      	mov	r3, r8
 8008e7a:	785b      	ldrb	r3, [r3, #1]
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d100      	bne.n	8008e82 <CheckAttachedButtons+0x2ae>
 8008e80:	e706      	b.n	8008c90 <CheckAttachedButtons+0xbc>
 8008e82:	b2da      	uxtb	r2, r3
 8008e84:	2a02      	cmp	r2, #2
 8008e86:	d800      	bhi.n	8008e8a <CheckAttachedButtons+0x2b6>
 8008e88:	e6c6      	b.n	8008c18 <CheckAttachedButtons+0x44>
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d100      	bne.n	8008e90 <CheckAttachedButtons+0x2bc>
 8008e8e:	e707      	b.n	8008ca0 <CheckAttachedButtons+0xcc>
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d000      	beq.n	8008e96 <CheckAttachedButtons+0x2c2>
 8008e94:	e6c8      	b.n	8008c28 <CheckAttachedButtons+0x54>
					if(connected == GPIO_PIN_SET)
 8008e96:	464b      	mov	r3, r9
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d100      	bne.n	8008e9e <CheckAttachedButtons+0x2ca>
 8008e9c:	e08d      	b.n	8008fba <CheckAttachedButtons+0x3e6>
					else if(connected == GPIO_PIN_RESET)
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d000      	beq.n	8008ea4 <CheckAttachedButtons+0x2d0>
 8008ea2:	e6c1      	b.n	8008c28 <CheckAttachedButtons+0x54>
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	469b      	mov	fp, r3
 8008ea8:	e6c3      	b.n	8008c32 <CheckAttachedButtons+0x5e>
					buttonReleasedCallback(i);
 8008eaa:	9803      	ldr	r0, [sp, #12]
 8008eac:	f7ff fe8c 	bl	8008bc8 <buttonReleasedCallback>
					button[i].state =NONE;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	4642      	mov	r2, r8
 8008eb4:	7013      	strb	r3, [r2, #0]
					break;
 8008eb6:	e7a8      	b.n	8008e0a <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)){
 8008eb8:	4b0f      	ldr	r3, [pc, #60]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1a4      	bne.n	8008e0a <CheckAttachedButtons+0x236>
 8008ec0:	4643      	mov	r3, r8
 8008ec2:	7a1b      	ldrb	r3, [r3, #8]
 8008ec4:	075b      	lsls	r3, r3, #29
 8008ec6:	d5a0      	bpl.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008ec8:	4b0b      	ldr	r3, [pc, #44]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008eca:	2201      	movs	r2, #1
 8008ecc:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X1_SEC - 8);
 8008ece:	2101      	movs	r1, #1
 8008ed0:	9803      	ldr	r0, [sp, #12]
 8008ed2:	f7ff fe7c 	bl	8008bce <buttonPressedForXCallback>
 8008ed6:	e798      	b.n	8008e0a <CheckAttachedButtons+0x236>
 8008ed8:	2000151c 	.word	0x2000151c
 8008edc:	20001570 	.word	0x20001570
 8008ee0:	0000fffe 	.word	0x0000fffe
 8008ee4:	200069c4 	.word	0x200069c4
 8008ee8:	2000158c 	.word	0x2000158c
 8008eec:	2000155b 	.word	0x2000155b
 8008ef0:	20001560 	.word	0x20001560
 8008ef4:	0000fe0a 	.word	0x0000fe0a
 8008ef8:	20001567 	.word	0x20001567
 8008efc:	0801a1d0 	.word	0x0801a1d0
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)){
 8008f00:	4b3f      	ldr	r3, [pc, #252]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d000      	beq.n	8008f0a <CheckAttachedButtons+0x336>
 8008f08:	e77f      	b.n	8008e0a <CheckAttachedButtons+0x236>
 8008f0a:	4643      	mov	r3, r8
 8008f0c:	7a1b      	ldrb	r3, [r3, #8]
 8008f0e:	071b      	lsls	r3, r3, #28
 8008f10:	d400      	bmi.n	8008f14 <CheckAttachedButtons+0x340>
 8008f12:	e77a      	b.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008f14:	4b3a      	ldr	r3, [pc, #232]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f16:	2201      	movs	r2, #1
 8008f18:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X2_SEC - 8);
 8008f1a:	2102      	movs	r1, #2
 8008f1c:	9803      	ldr	r0, [sp, #12]
 8008f1e:	f7ff fe56 	bl	8008bce <buttonPressedForXCallback>
 8008f22:	e772      	b.n	8008e0a <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)){
 8008f24:	4b36      	ldr	r3, [pc, #216]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d000      	beq.n	8008f2e <CheckAttachedButtons+0x35a>
 8008f2c:	e76d      	b.n	8008e0a <CheckAttachedButtons+0x236>
 8008f2e:	4643      	mov	r3, r8
 8008f30:	7a1b      	ldrb	r3, [r3, #8]
 8008f32:	06db      	lsls	r3, r3, #27
 8008f34:	d400      	bmi.n	8008f38 <CheckAttachedButtons+0x364>
 8008f36:	e768      	b.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008f38:	4b31      	ldr	r3, [pc, #196]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i,PRESSED_FOR_X3_SEC - 8);
 8008f3e:	2103      	movs	r1, #3
 8008f40:	9803      	ldr	r0, [sp, #12]
 8008f42:	f7ff fe44 	bl	8008bce <buttonPressedForXCallback>
 8008f46:	e760      	b.n	8008e0a <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)){
 8008f48:	4b2d      	ldr	r3, [pc, #180]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d000      	beq.n	8008f52 <CheckAttachedButtons+0x37e>
 8008f50:	e75b      	b.n	8008e0a <CheckAttachedButtons+0x236>
 8008f52:	4643      	mov	r3, r8
 8008f54:	7a1b      	ldrb	r3, [r3, #8]
 8008f56:	069b      	lsls	r3, r3, #26
 8008f58:	d400      	bmi.n	8008f5c <CheckAttachedButtons+0x388>
 8008f5a:	e756      	b.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008f5c:	4b28      	ldr	r3, [pc, #160]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f5e:	2201      	movs	r2, #1
 8008f60:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y1_SEC - 11);
 8008f62:	2101      	movs	r1, #1
 8008f64:	9803      	ldr	r0, [sp, #12]
 8008f66:	f7ff fe33 	bl	8008bd0 <buttonReleasedForYCallback>
 8008f6a:	e74e      	b.n	8008e0a <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)){
 8008f6c:	4b24      	ldr	r3, [pc, #144]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d000      	beq.n	8008f76 <CheckAttachedButtons+0x3a2>
 8008f74:	e749      	b.n	8008e0a <CheckAttachedButtons+0x236>
 8008f76:	4643      	mov	r3, r8
 8008f78:	7a1b      	ldrb	r3, [r3, #8]
 8008f7a:	065b      	lsls	r3, r3, #25
 8008f7c:	d400      	bmi.n	8008f80 <CheckAttachedButtons+0x3ac>
 8008f7e:	e744      	b.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008f80:	4b1f      	ldr	r3, [pc, #124]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f82:	2201      	movs	r2, #1
 8008f84:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y2_SEC - 11);
 8008f86:	2102      	movs	r1, #2
 8008f88:	9803      	ldr	r0, [sp, #12]
 8008f8a:	f7ff fe21 	bl	8008bd0 <buttonReleasedForYCallback>
 8008f8e:	e73c      	b.n	8008e0a <CheckAttachedButtons+0x236>
					if(!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)){
 8008f90:	4b1b      	ldr	r3, [pc, #108]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d000      	beq.n	8008f9a <CheckAttachedButtons+0x3c6>
 8008f98:	e737      	b.n	8008e0a <CheckAttachedButtons+0x236>
 8008f9a:	4643      	mov	r3, r8
 8008f9c:	7a1b      	ldrb	r3, [r3, #8]
 8008f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8008fa0:	d800      	bhi.n	8008fa4 <CheckAttachedButtons+0x3d0>
 8008fa2:	e732      	b.n	8008e0a <CheckAttachedButtons+0x236>
						delayButtonStateReset = true;
 8008fa4:	4b16      	ldr	r3, [pc, #88]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i,RELEASED_FOR_Y3_SEC - 11);
 8008faa:	2103      	movs	r1, #3
 8008fac:	9803      	ldr	r0, [sp, #12]
 8008fae:	f7ff fe0f 	bl	8008bd0 <buttonReleasedForYCallback>
 8008fb2:	e72a      	b.n	8008e0a <CheckAttachedButtons+0x236>
						state =OPEN;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	469b      	mov	fp, r3
 8008fb8:	e000      	b.n	8008fbc <CheckAttachedButtons+0x3e8>
						state =OFF;
 8008fba:	46cb      	mov	fp, r9
				if(releaseCounter[i] < 0xFFFF)
 8008fbc:	4b11      	ldr	r3, [pc, #68]	; (8009004 <CheckAttachedButtons+0x430>)
 8008fbe:	58e3      	ldr	r3, [r4, r3]
 8008fc0:	4a11      	ldr	r2, [pc, #68]	; (8009008 <CheckAttachedButtons+0x434>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d900      	bls.n	8008fc8 <CheckAttachedButtons+0x3f4>
 8008fc6:	e680      	b.n	8008cca <CheckAttachedButtons+0xf6>
					++releaseCounter[i];		// Advance the debounce counter
 8008fc8:	3301      	adds	r3, #1
 8008fca:	4a0e      	ldr	r2, [pc, #56]	; (8009004 <CheckAttachedButtons+0x430>)
 8008fcc:	50a3      	str	r3, [r4, r2]
				if(clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)		// Advance the inter-click counter
 8008fce:	4b0f      	ldr	r3, [pc, #60]	; (800900c <CheckAttachedButtons+0x438>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d100      	bne.n	8008fd8 <CheckAttachedButtons+0x404>
 8008fd6:	e67c      	b.n	8008cd2 <CheckAttachedButtons+0xfe>
				else if(dblCounter[i] > BOS.buttons.maxInterClickTime){
 8008fd8:	4b0d      	ldr	r3, [pc, #52]	; (8009010 <CheckAttachedButtons+0x43c>)
 8008fda:	5cf2      	ldrb	r2, [r6, r3]
 8008fdc:	4b0d      	ldr	r3, [pc, #52]	; (8009014 <CheckAttachedButtons+0x440>)
 8008fde:	795b      	ldrb	r3, [r3, #5]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d800      	bhi.n	8008fe6 <CheckAttachedButtons+0x412>
 8008fe4:	e633      	b.n	8008c4e <CheckAttachedButtons+0x7a>
					clicked =0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	4a08      	ldr	r2, [pc, #32]	; (800900c <CheckAttachedButtons+0x438>)
 8008fea:	7013      	strb	r3, [r2, #0]
					dblCounter[i] =0;			// Reset the inter-click counter
 8008fec:	4a08      	ldr	r2, [pc, #32]	; (8009010 <CheckAttachedButtons+0x43c>)
 8008fee:	54b3      	strb	r3, [r6, r2]
 8008ff0:	e62d      	b.n	8008c4e <CheckAttachedButtons+0x7a>
}
 8008ff2:	b009      	add	sp, #36	; 0x24
 8008ff4:	bc3c      	pop	{r2, r3, r4, r5}
 8008ff6:	4690      	mov	r8, r2
 8008ff8:	4699      	mov	r9, r3
 8008ffa:	46a2      	mov	sl, r4
 8008ffc:	46ab      	mov	fp, r5
 8008ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009000:	20001567 	.word	0x20001567
 8009004:	2000158c 	.word	0x2000158c
 8009008:	0000fffe 	.word	0x0000fffe
 800900c:	2000155b 	.word	0x2000155b
 8009010:	20001560 	.word	0x20001560
 8009014:	200069c4 	.word	0x200069c4

08009018 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8009018:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 800901a:	f006 f951 	bl	800f2c0 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 800901e:	b2c4      	uxtb	r4, r0
 8009020:	0020      	movs	r0, r4
 8009022:	f7fe fa6b 	bl	80074fc <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8009026:	0020      	movs	r0, r4
 8009028:	f7fe fa96 	bl	8007558 <SwitchStreamDMAToMsg>
}
 800902c:	bd10      	pop	{r4, pc}
	...

08009030 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8009030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009032:	b085      	sub	sp, #20
 8009034:	000d      	movs	r5, r1
 8009036:	0014      	movs	r4, r2
 8009038:	220f      	movs	r2, #15
 800903a:	446a      	add	r2, sp
 800903c:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 800903e:	aa0a      	add	r2, sp, #40	; 0x28
 8009040:	7812      	ldrb	r2, [r2, #0]
 8009042:	4293      	cmp	r3, r2
 8009044:	d058      	beq.n	80090f8 <SetupDMAStreams+0xc8>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8009046:	2b00      	cmp	r3, #0
 8009048:	d100      	bne.n	800904c <SetupDMAStreams+0x1c>
 800904a:	e0be      	b.n	80091ca <SetupDMAStreams+0x19a>
 800904c:	2a00      	cmp	r2, #0
 800904e:	d100      	bne.n	8009052 <SetupDMAStreams+0x22>
 8009050:	e0bf      	b.n	80091d2 <SetupDMAStreams+0x1a2>
	if(direction == FORWARD){
 8009052:	2800      	cmp	r0, #0
 8009054:	d055      	beq.n	8009102 <SetupDMAStreams+0xd2>
	else if(direction == BACKWARD){
 8009056:	2801      	cmp	r0, #1
 8009058:	d100      	bne.n	800905c <SetupDMAStreams+0x2c>
 800905a:	e08b      	b.n	8009174 <SetupDMAStreams+0x144>
		return BOS_ERR_WrongParam;
 800905c:	2267      	movs	r2, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 800905e:	2802      	cmp	r0, #2
 8009060:	d000      	beq.n	8009064 <SetupDMAStreams+0x34>
 8009062:	e0b3      	b.n	80091cc <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009064:	0018      	movs	r0, r3
 8009066:	f004 f991 	bl	800d38c <GetUart>
 800906a:	0006      	movs	r6, r0
 800906c:	ab0a      	add	r3, sp, #40	; 0x28
 800906e:	7818      	ldrb	r0, [r3, #0]
 8009070:	f004 f98c 	bl	800d38c <GetUart>
 8009074:	0001      	movs	r1, r0
 8009076:	2201      	movs	r2, #1
 8009078:	0030      	movs	r0, r6
 800907a:	f7fe fa9f 	bl	80075bc <StartDMAstream>
 800907e:	0002      	movs	r2, r0
 8009080:	2817      	cmp	r0, #23
 8009082:	d100      	bne.n	8009086 <SetupDMAStreams+0x56>
 8009084:	e0a2      	b.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8009086:	0160      	lsls	r0, r4, #5
 8009088:	1b00      	subs	r0, r0, r4
 800908a:	0080      	lsls	r0, r0, #2
 800908c:	1900      	adds	r0, r0, r4
 800908e:	00c0      	lsls	r0, r0, #3
 8009090:	21fa      	movs	r1, #250	; 0xfa
 8009092:	0089      	lsls	r1, r1, #2
 8009094:	f7f7 f85c 	bl	8000150 <__udivsi3>
 8009098:	0004      	movs	r4, r0
 800909a:	260f      	movs	r6, #15
 800909c:	446e      	add	r6, sp
 800909e:	4b4e      	ldr	r3, [pc, #312]	; (80091d8 <SetupDMAStreams+0x1a8>)
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	0033      	movs	r3, r6
 80090a4:	2200      	movs	r2, #0
 80090a6:	0001      	movs	r1, r0
 80090a8:	484c      	ldr	r0, [pc, #304]	; (80091dc <SetupDMAStreams+0x1ac>)
 80090aa:	f005 ffad 	bl	800f008 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 80090ae:	7833      	ldrb	r3, [r6, #0]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4a4a      	ldr	r2, [pc, #296]	; (80091e0 <SetupDMAStreams+0x1b0>)
 80090b6:	509d      	str	r5, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 80090b8:	ab0a      	add	r3, sp, #40	; 0x28
 80090ba:	7818      	ldrb	r0, [r3, #0]
 80090bc:	f004 f966 	bl	800d38c <GetUart>
 80090c0:	0007      	movs	r7, r0
 80090c2:	7830      	ldrb	r0, [r6, #0]
 80090c4:	f004 f962 	bl	800d38c <GetUart>
 80090c8:	0001      	movs	r1, r0
 80090ca:	2201      	movs	r2, #1
 80090cc:	0038      	movs	r0, r7
 80090ce:	f7fe fa75 	bl	80075bc <StartDMAstream>
 80090d2:	0002      	movs	r2, r0
 80090d4:	2817      	cmp	r0, #23
 80090d6:	d079      	beq.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80090d8:	4b3f      	ldr	r3, [pc, #252]	; (80091d8 <SetupDMAStreams+0x1a8>)
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	ab0a      	add	r3, sp, #40	; 0x28
 80090de:	2200      	movs	r2, #0
 80090e0:	0021      	movs	r1, r4
 80090e2:	483e      	ldr	r0, [pc, #248]	; (80091dc <SetupDMAStreams+0x1ac>)
 80090e4:	f005 ff90 	bl	800f008 <xTimerCreate>
 80090e8:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 80090ea:	ab0a      	add	r3, sp, #40	; 0x28
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	3b01      	subs	r3, #1
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4a3b      	ldr	r2, [pc, #236]	; (80091e0 <SetupDMAStreams+0x1b0>)
 80090f4:	509d      	str	r5, [r3, r2]
 80090f6:	e02d      	b.n	8009154 <SetupDMAStreams+0x124>
		portStatus[src] =STREAM;
 80090f8:	4a3a      	ldr	r2, [pc, #232]	; (80091e4 <SetupDMAStreams+0x1b4>)
 80090fa:	2102      	movs	r1, #2
 80090fc:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 80090fe:	2267      	movs	r2, #103	; 0x67
 8009100:	e064      	b.n	80091cc <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009102:	0018      	movs	r0, r3
 8009104:	f004 f942 	bl	800d38c <GetUart>
 8009108:	0006      	movs	r6, r0
 800910a:	ab0a      	add	r3, sp, #40	; 0x28
 800910c:	7818      	ldrb	r0, [r3, #0]
 800910e:	f004 f93d 	bl	800d38c <GetUart>
 8009112:	0001      	movs	r1, r0
 8009114:	2201      	movs	r2, #1
 8009116:	0030      	movs	r0, r6
 8009118:	f7fe fa50 	bl	80075bc <StartDMAstream>
 800911c:	0002      	movs	r2, r0
 800911e:	2817      	cmp	r0, #23
 8009120:	d054      	beq.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8009122:	260f      	movs	r6, #15
 8009124:	446e      	add	r6, sp
 8009126:	0160      	lsls	r0, r4, #5
 8009128:	1b00      	subs	r0, r0, r4
 800912a:	0080      	lsls	r0, r0, #2
 800912c:	1900      	adds	r0, r0, r4
 800912e:	00c0      	lsls	r0, r0, #3
 8009130:	21fa      	movs	r1, #250	; 0xfa
 8009132:	0089      	lsls	r1, r1, #2
 8009134:	f7f7 f80c 	bl	8000150 <__udivsi3>
 8009138:	0001      	movs	r1, r0
 800913a:	4b27      	ldr	r3, [pc, #156]	; (80091d8 <SetupDMAStreams+0x1a8>)
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	0033      	movs	r3, r6
 8009140:	2200      	movs	r2, #0
 8009142:	4826      	ldr	r0, [pc, #152]	; (80091dc <SetupDMAStreams+0x1ac>)
 8009144:	f005 ff60 	bl	800f008 <xTimerCreate>
 8009148:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 800914a:	7833      	ldrb	r3, [r6, #0]
 800914c:	3b01      	subs	r3, #1
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4a23      	ldr	r2, [pc, #140]	; (80091e0 <SetupDMAStreams+0x1b0>)
 8009152:	509d      	str	r5, [r3, r2]
	return BOS_OK;
 8009154:	2200      	movs	r2, #0
	if(xTimerStream != NULL)
 8009156:	2c00      	cmp	r4, #0
 8009158:	d038      	beq.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStart(xTimerStream,portMAX_DELAY);
 800915a:	f005 f9ed 	bl	800e538 <xTaskGetTickCount>
 800915e:	0002      	movs	r2, r0
 8009160:	2301      	movs	r3, #1
 8009162:	425b      	negs	r3, r3
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	2300      	movs	r3, #0
 8009168:	2101      	movs	r1, #1
 800916a:	0020      	movs	r0, r4
 800916c:	f005 ff6c 	bl	800f048 <xTimerGenericCommand>
	return BOS_OK;
 8009170:	2200      	movs	r2, #0
 8009172:	e02b      	b.n	80091cc <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009174:	0010      	movs	r0, r2
 8009176:	f004 f909 	bl	800d38c <GetUart>
 800917a:	0006      	movs	r6, r0
 800917c:	230f      	movs	r3, #15
 800917e:	446b      	add	r3, sp
 8009180:	7818      	ldrb	r0, [r3, #0]
 8009182:	f004 f903 	bl	800d38c <GetUart>
 8009186:	0001      	movs	r1, r0
 8009188:	2201      	movs	r2, #1
 800918a:	0030      	movs	r0, r6
 800918c:	f7fe fa16 	bl	80075bc <StartDMAstream>
 8009190:	0002      	movs	r2, r0
 8009192:	2817      	cmp	r0, #23
 8009194:	d01a      	beq.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8009196:	0160      	lsls	r0, r4, #5
 8009198:	1b00      	subs	r0, r0, r4
 800919a:	0080      	lsls	r0, r0, #2
 800919c:	1900      	adds	r0, r0, r4
 800919e:	00c0      	lsls	r0, r0, #3
 80091a0:	21fa      	movs	r1, #250	; 0xfa
 80091a2:	0089      	lsls	r1, r1, #2
 80091a4:	f7f6 ffd4 	bl	8000150 <__udivsi3>
 80091a8:	0001      	movs	r1, r0
 80091aa:	4b0b      	ldr	r3, [pc, #44]	; (80091d8 <SetupDMAStreams+0x1a8>)
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	ab0a      	add	r3, sp, #40	; 0x28
 80091b0:	2200      	movs	r2, #0
 80091b2:	480a      	ldr	r0, [pc, #40]	; (80091dc <SetupDMAStreams+0x1ac>)
 80091b4:	f005 ff28 	bl	800f008 <xTimerCreate>
 80091b8:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 80091ba:	230f      	movs	r3, #15
 80091bc:	446b      	add	r3, sp
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4a06      	ldr	r2, [pc, #24]	; (80091e0 <SetupDMAStreams+0x1b0>)
 80091c6:	509d      	str	r5, [r3, r2]
 80091c8:	e7c4      	b.n	8009154 <SetupDMAStreams+0x124>
		return BOS_ERR_WrongParam;
 80091ca:	2267      	movs	r2, #103	; 0x67
}
 80091cc:	0010      	movs	r0, r2
 80091ce:	b005      	add	sp, #20
 80091d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 80091d2:	2267      	movs	r2, #103	; 0x67
 80091d4:	e7fa      	b.n	80091cc <SetupDMAStreams+0x19c>
 80091d6:	46c0      	nop			; (mov r8, r8)
 80091d8:	08009019 	.word	0x08009019
 80091dc:	0801a214 	.word	0x0801a214
 80091e0:	200014c0 	.word	0x200014c0
 80091e4:	200010f8 	.word	0x200010f8

080091e8 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 80091e8:	b510      	push	{r4, lr}
	switch(port){
 80091ea:	2806      	cmp	r0, #6
 80091ec:	d80a      	bhi.n	8009204 <NotifyMessagingTask+0x1c>
 80091ee:	0080      	lsls	r0, r0, #2
 80091f0:	4b19      	ldr	r3, [pc, #100]	; (8009258 <NotifyMessagingTask+0x70>)
 80091f2:	581b      	ldr	r3, [r3, r0]
 80091f4:	469f      	mov	pc, r3
#ifdef _P1
		case P1:
			xTaskNotifyGive(P1MsgTaskHandle)
 80091f6:	4b19      	ldr	r3, [pc, #100]	; (800925c <NotifyMessagingTask+0x74>)
 80091f8:	6818      	ldr	r0, [r3, #0]
 80091fa:	2300      	movs	r3, #0
 80091fc:	2202      	movs	r2, #2
 80091fe:	2100      	movs	r1, #0
 8009200:	f005 fe32 	bl	800ee68 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8009204:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle)
 8009206:	4b16      	ldr	r3, [pc, #88]	; (8009260 <NotifyMessagingTask+0x78>)
 8009208:	6818      	ldr	r0, [r3, #0]
 800920a:	2300      	movs	r3, #0
 800920c:	2202      	movs	r2, #2
 800920e:	2100      	movs	r1, #0
 8009210:	f005 fe2a 	bl	800ee68 <xTaskGenericNotify>
			break;
 8009214:	e7f6      	b.n	8009204 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle)
 8009216:	4b13      	ldr	r3, [pc, #76]	; (8009264 <NotifyMessagingTask+0x7c>)
 8009218:	6818      	ldr	r0, [r3, #0]
 800921a:	2300      	movs	r3, #0
 800921c:	2202      	movs	r2, #2
 800921e:	2100      	movs	r1, #0
 8009220:	f005 fe22 	bl	800ee68 <xTaskGenericNotify>
			break;
 8009224:	e7ee      	b.n	8009204 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle)
 8009226:	4b10      	ldr	r3, [pc, #64]	; (8009268 <NotifyMessagingTask+0x80>)
 8009228:	6818      	ldr	r0, [r3, #0]
 800922a:	2300      	movs	r3, #0
 800922c:	2202      	movs	r2, #2
 800922e:	2100      	movs	r1, #0
 8009230:	f005 fe1a 	bl	800ee68 <xTaskGenericNotify>
			break;
 8009234:	e7e6      	b.n	8009204 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle)
 8009236:	4b0d      	ldr	r3, [pc, #52]	; (800926c <NotifyMessagingTask+0x84>)
 8009238:	6818      	ldr	r0, [r3, #0]
 800923a:	2300      	movs	r3, #0
 800923c:	2202      	movs	r2, #2
 800923e:	2100      	movs	r1, #0
 8009240:	f005 fe12 	bl	800ee68 <xTaskGenericNotify>
			break;
 8009244:	e7de      	b.n	8009204 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P6MsgTaskHandle)
 8009246:	4b0a      	ldr	r3, [pc, #40]	; (8009270 <NotifyMessagingTask+0x88>)
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	2300      	movs	r3, #0
 800924c:	2202      	movs	r2, #2
 800924e:	2100      	movs	r1, #0
 8009250:	f005 fe0a 	bl	800ee68 <xTaskGenericNotify>
}
 8009254:	e7d6      	b.n	8009204 <NotifyMessagingTask+0x1c>
 8009256:	46c0      	nop			; (mov r8, r8)
 8009258:	0801a1f8 	.word	0x0801a1f8
 800925c:	200014e0 	.word	0x200014e0
 8009260:	200014e4 	.word	0x200014e4
 8009264:	200014e8 	.word	0x200014e8
 8009268:	200014ec 	.word	0x200014ec
 800926c:	200014f0 	.word	0x200014f0
 8009270:	200014f4 	.word	0x200014f4

08009274 <SendMessageFromPort>:
 6   !0        0					!0							Either single-cast message with myID as source module OR (if code == 0)
 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7   !0        !0				0								Not allowed.
 8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009276:	46de      	mov	lr, fp
 8009278:	4657      	mov	r7, sl
 800927a:	464e      	mov	r6, r9
 800927c:	4645      	mov	r5, r8
 800927e:	b5e0      	push	{r5, r6, r7, lr}
 8009280:	b085      	sub	sp, #20
 8009282:	4680      	mov	r8, r0
 8009284:	468b      	mov	fp, r1
 8009286:	0014      	movs	r4, r2
 8009288:	469a      	mov	sl, r3
 800928a:	ab0e      	add	r3, sp, #56	; 0x38
 800928c:	881d      	ldrh	r5, [r3, #0]
	static uint16_t ptrShift =0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 800928e:	0003      	movs	r3, r0
 8009290:	4313      	orrs	r3, r2
 8009292:	d100      	bne.n	8009296 <SendMessageFromPort+0x22>
 8009294:	e170      	b.n	8009578 <SendMessageFromPort+0x304>
 8009296:	2800      	cmp	r0, #0
 8009298:	d147      	bne.n	800932a <SendMessageFromPort+0xb6>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 800929a:	1c93      	adds	r3, r2, #2
 800929c:	b2db      	uxtb	r3, r3
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 800929e:	2067      	movs	r0, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d900      	bls.n	80092a6 <SendMessageFromPort+0x32>
 80092a4:	e149      	b.n	800953a <SendMessageFromPort+0x2c6>
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 80092a6:	2000      	movs	r0, #0
 80092a8:	f005 f8ae 	bl	800e408 <uxTaskPriorityGet>
 80092ac:	9002      	str	r0, [sp, #8]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80092ae:	2105      	movs	r1, #5
 80092b0:	2000      	movs	r0, #0
 80092b2:	f005 f8b9 	bl	800e428 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 80092b6:	4bbe      	ldr	r3, [pc, #760]	; (80095b0 <SendMessageFromPort+0x33c>)
 80092b8:	2248      	movs	r2, #72	; 0x48
 80092ba:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 80092bc:	3212      	adds	r2, #18
 80092be:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80092c0:	465b      	mov	r3, fp
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d000      	beq.n	80092c8 <SendMessageFromPort+0x54>
 80092c6:	e16d      	b.n	80095a4 <SendMessageFromPort+0x330>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 80092c8:	3d01      	subs	r5, #1
 80092ca:	4bba      	ldr	r3, [pc, #744]	; (80095b4 <SendMessageFromPort+0x340>)
 80092cc:	5d5f      	ldrb	r7, [r3, r5]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 80092ce:	4eba      	ldr	r6, [pc, #744]	; (80095b8 <SendMessageFromPort+0x344>)
 80092d0:	00e9      	lsls	r1, r5, #3
 80092d2:	1b49      	subs	r1, r1, r5
 80092d4:	00c9      	lsls	r1, r1, #3
 80092d6:	4db9      	ldr	r5, [pc, #740]	; (80095bc <SendMessageFromPort+0x348>)
 80092d8:	1949      	adds	r1, r1, r5
 80092da:	003a      	movs	r2, r7
 80092dc:	0030      	movs	r0, r6
 80092de:	f009 fe5e 	bl	8012f9e <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 80092e2:	3e03      	subs	r6, #3
 80092e4:	70b7      	strb	r7, [r6, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 80092e6:	1cfd      	adds	r5, r7, #3
 80092e8:	002a      	movs	r2, r5
 80092ea:	0031      	movs	r1, r6
 80092ec:	48b4      	ldr	r0, [pc, #720]	; (80095c0 <SendMessageFromPort+0x34c>)
 80092ee:	f009 fe56 	bl	8012f9e <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 80092f2:	b2bf      	uxth	r7, r7
 80092f4:	1cf9      	adds	r1, r7, #3
 80092f6:	48b2      	ldr	r0, [pc, #712]	; (80095c0 <SendMessageFromPort+0x34c>)
 80092f8:	f003 fa62 	bl	800c7c0 <CalculateCRC8>
 80092fc:	5570      	strb	r0, [r6, r5]
	/* end of crc calculation function addition */

//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);
	memset(crcBuffer,0,sizeof(crcBuffer));
 80092fe:	2238      	movs	r2, #56	; 0x38
 8009300:	2100      	movs	r1, #0
 8009302:	48af      	ldr	r0, [pc, #700]	; (80095c0 <SendMessageFromPort+0x34c>)
 8009304:	f009 fe54 	bl	8012fb0 <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8009308:	3402      	adds	r4, #2
 800930a:	b2e4      	uxtb	r4, r4
 800930c:	2c01      	cmp	r4, #1
 800930e:	d900      	bls.n	8009312 <SendMessageFromPort+0x9e>
 8009310:	e104      	b.n	800951c <SendMessageFromPort+0x2a8>
		writePxDMAMutex(port,message,length + 4,cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else{
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8009312:	4653      	mov	r3, sl
 8009314:	2b00      	cmp	r3, #0
 8009316:	d000      	beq.n	800931a <SendMessageFromPort+0xa6>
 8009318:	e0f5      	b.n	8009506 <SendMessageFromPort+0x292>
 800931a:	465b      	mov	r3, fp
 800931c:	2b00      	cmp	r3, #0
 800931e:	d000      	beq.n	8009322 <SendMessageFromPort+0xae>
 8009320:	e0f1      	b.n	8009506 <SendMessageFromPort+0x292>
			src =message[4];
 8009322:	4ba3      	ldr	r3, [pc, #652]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009324:	791b      	ldrb	r3, [r3, #4]
 8009326:	469b      	mov	fp, r3
 8009328:	e0ed      	b.n	8009506 <SendMessageFromPort+0x292>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 800932a:	2900      	cmp	r1, #0
 800932c:	d002      	beq.n	8009334 <SendMessageFromPort+0xc0>
 800932e:	2a00      	cmp	r2, #0
 8009330:	d100      	bne.n	8009334 <SendMessageFromPort+0xc0>
 8009332:	e123      	b.n	800957c <SendMessageFromPort+0x308>
	TaskPriority =uxTaskPriorityGet( NULL);
 8009334:	2000      	movs	r0, #0
 8009336:	f005 f867 	bl	800e408 <uxTaskPriorityGet>
 800933a:	9002      	str	r0, [sp, #8]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 800933c:	2105      	movs	r1, #5
 800933e:	2000      	movs	r0, #0
 8009340:	f005 f872 	bl	800e428 <vTaskPrioritySet>
	message[0] ='H';
 8009344:	4b9a      	ldr	r3, [pc, #616]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009346:	2248      	movs	r2, #72	; 0x48
 8009348:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 800934a:	3212      	adds	r2, #18
 800934c:	705a      	strb	r2, [r3, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800934e:	4653      	mov	r3, sl
 8009350:	2b00      	cmp	r3, #0
 8009352:	d0b9      	beq.n	80092c8 <SendMessageFromPort+0x54>
		if(src == 0)
 8009354:	465b      	mov	r3, fp
 8009356:	2b00      	cmp	r3, #0
 8009358:	d102      	bne.n	8009360 <SendMessageFromPort+0xec>
			src =myID;
 800935a:	4b9a      	ldr	r3, [pc, #616]	; (80095c4 <SendMessageFromPort+0x350>)
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	469b      	mov	fp, r3
		message[2] =length;
 8009360:	4993      	ldr	r1, [pc, #588]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009362:	2300      	movs	r3, #0
 8009364:	708b      	strb	r3, [r1, #2]
		message[3] =dst;
 8009366:	70cc      	strb	r4, [r1, #3]
		message[4] =src;
 8009368:	465b      	mov	r3, fp
 800936a:	710b      	strb	r3, [r1, #4]
		message[5] =(BOS.response) | (BOS.trace << 2) | (extendCode << 1) | (extendOptions);
 800936c:	4a96      	ldr	r2, [pc, #600]	; (80095c8 <SendMessageFromPort+0x354>)
 800936e:	79d3      	ldrb	r3, [r2, #7]
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	7992      	ldrb	r2, [r2, #6]
 8009374:	4313      	orrs	r3, r2
		if(code > 0xFF)
 8009376:	22ff      	movs	r2, #255	; 0xff
 8009378:	4552      	cmp	r2, sl
 800937a:	4192      	sbcs	r2, r2
 800937c:	4252      	negs	r2, r2
		message[5] =(BOS.response) | (BOS.trace << 2) | (extendCode << 1) | (extendOptions);
 800937e:	0052      	lsls	r2, r2, #1
 8009380:	4313      	orrs	r3, r2
 8009382:	b2db      	uxtb	r3, r3
 8009384:	714b      	strb	r3, [r1, #5]
		message[6 + shift] =(uint8_t )code;
 8009386:	4652      	mov	r2, sl
 8009388:	718a      	strb	r2, [r1, #6]
 800938a:	2200      	movs	r2, #0
 800938c:	4691      	mov	r9, r2
		if(extendCode == true){
 800938e:	4652      	mov	r2, sl
 8009390:	2aff      	cmp	r2, #255	; 0xff
 8009392:	d903      	bls.n	800939c <SendMessageFromPort+0x128>
			message[6 + shift] =(uint8_t )(code >> 8);
 8009394:	0a12      	lsrs	r2, r2, #8
 8009396:	71ca      	strb	r2, [r1, #7]
			++shift;
 8009398:	2201      	movs	r2, #1
 800939a:	4691      	mov	r9, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 800939c:	2d2e      	cmp	r5, #46	; 0x2e
 800939e:	d92f      	bls.n	8009400 <SendMessageFromPort+0x18c>
			message[5] |=0x80;
 80093a0:	2280      	movs	r2, #128	; 0x80
 80093a2:	4252      	negs	r2, r2
 80093a4:	4313      	orrs	r3, r2
 80093a6:	4a82      	ldr	r2, [pc, #520]	; (80095b0 <SendMessageFromPort+0x33c>)
 80093a8:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 80093aa:	4b88      	ldr	r3, [pc, #544]	; (80095cc <SendMessageFromPort+0x358>)
 80093ac:	801d      	strh	r5, [r3, #0]
	uint8_t length =0, shift =0;
 80093ae:	2600      	movs	r6, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 80093b0:	252e      	movs	r5, #46	; 0x2e
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80093b2:	464b      	mov	r3, r9
 80093b4:	3307      	adds	r3, #7
 80093b6:	4694      	mov	ip, r2
 80093b8:	4463      	add	r3, ip
 80093ba:	9303      	str	r3, [sp, #12]
			while(totalNumberOfParams != 0){
 80093bc:	4b83      	ldr	r3, [pc, #524]	; (80095cc <SendMessageFromPort+0x358>)
 80093be:	881f      	ldrh	r7, [r3, #0]
 80093c0:	2f00      	cmp	r7, #0
 80093c2:	d02b      	beq.n	800941c <SendMessageFromPort+0x1a8>
				if((totalNumberOfParams / numberOfParams) >= 1){
 80093c4:	0029      	movs	r1, r5
 80093c6:	0038      	movs	r0, r7
 80093c8:	f7f6 fec2 	bl	8000150 <__udivsi3>
 80093cc:	b280      	uxth	r0, r0
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d140      	bne.n	8009454 <SendMessageFromPort+0x1e0>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 80093d2:	4b77      	ldr	r3, [pc, #476]	; (80095b0 <SendMessageFromPort+0x33c>)
 80093d4:	795a      	ldrb	r2, [r3, #5]
 80093d6:	237f      	movs	r3, #127	; 0x7f
 80093d8:	4013      	ands	r3, r2
 80093da:	4a75      	ldr	r2, [pc, #468]	; (80095b0 <SendMessageFromPort+0x33c>)
 80093dc:	7153      	strb	r3, [r2, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80093de:	4d7c      	ldr	r5, [pc, #496]	; (80095d0 <SendMessageFromPort+0x35c>)
 80093e0:	8829      	ldrh	r1, [r5, #0]
 80093e2:	4b7c      	ldr	r3, [pc, #496]	; (80095d4 <SendMessageFromPort+0x360>)
 80093e4:	18c9      	adds	r1, r1, r3
 80093e6:	003a      	movs	r2, r7
 80093e8:	9803      	ldr	r0, [sp, #12]
 80093ea:	f009 fdd8 	bl	8012f9e <memcpy>
					ptrShift =0;
 80093ee:	2300      	movs	r3, #0
 80093f0:	802b      	strh	r3, [r5, #0]
					totalNumberOfParams =0;
 80093f2:	4a76      	ldr	r2, [pc, #472]	; (80095cc <SendMessageFromPort+0x358>)
 80093f4:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 80093f6:	1d3e      	adds	r6, r7, #4
 80093f8:	444e      	add	r6, r9
 80093fa:	b2f6      	uxtb	r6, r6
					numberOfParams =totalNumberOfParams;
 80093fc:	003d      	movs	r5, r7
 80093fe:	e7dd      	b.n	80093bc <SendMessageFromPort+0x148>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009400:	464b      	mov	r3, r9
 8009402:	3307      	adds	r3, #7
 8009404:	486a      	ldr	r0, [pc, #424]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009406:	1818      	adds	r0, r3, r0
 8009408:	4b71      	ldr	r3, [pc, #452]	; (80095d0 <SendMessageFromPort+0x35c>)
 800940a:	8819      	ldrh	r1, [r3, #0]
 800940c:	4b71      	ldr	r3, [pc, #452]	; (80095d4 <SendMessageFromPort+0x360>)
 800940e:	18c9      	adds	r1, r1, r3
 8009410:	002a      	movs	r2, r5
 8009412:	f009 fdc4 	bl	8012f9e <memcpy>
			length =numberOfParams + shift + 4;
 8009416:	1d2e      	adds	r6, r5, #4
 8009418:	444e      	add	r6, r9
 800941a:	b2f6      	uxtb	r6, r6
		if(AddBcastPayload == true){
 800941c:	4b6e      	ldr	r3, [pc, #440]	; (80095d8 <SendMessageFromPort+0x364>)
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d057      	beq.n	80094d4 <SendMessageFromPort+0x260>
			if(dstGroupID < BOS_BROADCAST){
 8009424:	4b6d      	ldr	r3, [pc, #436]	; (80095dc <SendMessageFromPort+0x368>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2bff      	cmp	r3, #255	; 0xff
 800942a:	d100      	bne.n	800942e <SendMessageFromPort+0x1ba>
 800942c:	e0aa      	b.n	8009584 <SendMessageFromPort+0x310>
				for(uint16_t i =1; i <= N; i++)						// N modules
 800942e:	4a6c      	ldr	r2, [pc, #432]	; (80095e0 <SendMessageFromPort+0x36c>)
 8009430:	7812      	ldrb	r2, [r2, #0]
 8009432:	4694      	mov	ip, r2
 8009434:	2a00      	cmp	r2, #0
 8009436:	d06f      	beq.n	8009518 <SendMessageFromPort+0x2a4>
 8009438:	2701      	movs	r7, #1
 800943a:	409f      	lsls	r7, r3
 800943c:	4869      	ldr	r0, [pc, #420]	; (80095e4 <SendMessageFromPort+0x370>)
 800943e:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 8009440:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8009442:	495b      	ldr	r1, [pc, #364]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009444:	468a      	mov	sl, r1
 8009446:	44aa      	add	sl, r5
 8009448:	0021      	movs	r1, r4
 800944a:	4664      	mov	r4, ip
 800944c:	46b4      	mov	ip, r6
 800944e:	464e      	mov	r6, r9
 8009450:	4689      	mov	r9, r1
 8009452:	e017      	b.n	8009484 <SendMessageFromPort+0x210>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8009454:	9500      	str	r5, [sp, #0]
 8009456:	4653      	mov	r3, sl
 8009458:	0022      	movs	r2, r4
 800945a:	4659      	mov	r1, fp
 800945c:	4640      	mov	r0, r8
 800945e:	f7ff ff09 	bl	8009274 <SendMessageFromPort>
					osDelay(10);
 8009462:	200a      	movs	r0, #10
 8009464:	f004 f8e1 	bl	800d62a <osDelay>
					totalNumberOfParams -=numberOfParams;
 8009468:	4a58      	ldr	r2, [pc, #352]	; (80095cc <SendMessageFromPort+0x358>)
 800946a:	8813      	ldrh	r3, [r2, #0]
 800946c:	1b5b      	subs	r3, r3, r5
 800946e:	8013      	strh	r3, [r2, #0]
					ptrShift +=numberOfParams;
 8009470:	4a57      	ldr	r2, [pc, #348]	; (80095d0 <SendMessageFromPort+0x35c>)
 8009472:	8813      	ldrh	r3, [r2, #0]
 8009474:	18eb      	adds	r3, r5, r3
 8009476:	8013      	strh	r3, [r2, #0]
 8009478:	e7a0      	b.n	80093bc <SendMessageFromPort+0x148>
				for(uint16_t i =1; i <= N; i++)						// N modules
 800947a:	3301      	adds	r3, #1
 800947c:	b29b      	uxth	r3, r3
 800947e:	3002      	adds	r0, #2
 8009480:	42a3      	cmp	r3, r4
 8009482:	d80e      	bhi.n	80094a2 <SendMessageFromPort+0x22e>
					if(InGroup(i,dstGroupID)){
 8009484:	8801      	ldrh	r1, [r0, #0]
 8009486:	420f      	tst	r7, r1
 8009488:	d0f7      	beq.n	800947a <SendMessageFromPort+0x206>
						++groupMembers;							// Add this member
 800948a:	3201      	adds	r2, #1
 800948c:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 800948e:	18a9      	adds	r1, r5, r2
 8009490:	3101      	adds	r1, #1
 8009492:	292d      	cmp	r1, #45	; 0x2d
 8009494:	dd00      	ble.n	8009498 <SendMessageFromPort+0x224>
 8009496:	e073      	b.n	8009580 <SendMessageFromPort+0x30c>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8009498:	4651      	mov	r1, sl
 800949a:	1889      	adds	r1, r1, r2
 800949c:	1989      	adds	r1, r1, r6
 800949e:	718b      	strb	r3, [r1, #6]
 80094a0:	e7eb      	b.n	800947a <SendMessageFromPort+0x206>
 80094a2:	464c      	mov	r4, r9
 80094a4:	46b1      	mov	r9, r6
 80094a6:	4666      	mov	r6, ip
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 80094a8:	464b      	mov	r3, r9
 80094aa:	3307      	adds	r3, #7
 80094ac:	195b      	adds	r3, r3, r5
 80094ae:	189b      	adds	r3, r3, r2
 80094b0:	493f      	ldr	r1, [pc, #252]	; (80095b0 <SendMessageFromPort+0x33c>)
 80094b2:	54ca      	strb	r2, [r1, r3]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80094b4:	18ad      	adds	r5, r5, r2
 80094b6:	3502      	adds	r5, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80094b8:	2069      	movs	r0, #105	; 0x69
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80094ba:	2d2d      	cmp	r5, #45	; 0x2d
 80094bc:	dc3d      	bgt.n	800953a <SendMessageFromPort+0x2c6>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 80094be:	484a      	ldr	r0, [pc, #296]	; (80095e8 <SendMessageFromPort+0x374>)
 80094c0:	7801      	ldrb	r1, [r0, #0]
 80094c2:	3101      	adds	r1, #1
 80094c4:	b2c9      	uxtb	r1, r1
 80094c6:	7001      	strb	r1, [r0, #0]
 80094c8:	4839      	ldr	r0, [pc, #228]	; (80095b0 <SendMessageFromPort+0x33c>)
 80094ca:	18c3      	adds	r3, r0, r3
 80094cc:	7059      	strb	r1, [r3, #1]
 80094ce:	3602      	adds	r6, #2
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 80094d0:	18b6      	adds	r6, r6, r2
 80094d2:	b2f6      	uxtb	r6, r6
	message[2] =length;
 80094d4:	4b36      	ldr	r3, [pc, #216]	; (80095b0 <SendMessageFromPort+0x33c>)
 80094d6:	469a      	mov	sl, r3
 80094d8:	709e      	strb	r6, [r3, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 80094da:	1cf5      	adds	r5, r6, #3
 80094dc:	002a      	movs	r2, r5
 80094de:	0019      	movs	r1, r3
 80094e0:	4837      	ldr	r0, [pc, #220]	; (80095c0 <SendMessageFromPort+0x34c>)
 80094e2:	f009 fd5c 	bl	8012f9e <memcpy>
	message[length + 3] =CalculateCRC8((uint32_t* )&crcBuffer,(length + 3));
 80094e6:	b2b7      	uxth	r7, r6
 80094e8:	0029      	movs	r1, r5
 80094ea:	4835      	ldr	r0, [pc, #212]	; (80095c0 <SendMessageFromPort+0x34c>)
 80094ec:	f003 f968 	bl	800c7c0 <CalculateCRC8>
 80094f0:	4653      	mov	r3, sl
 80094f2:	5558      	strb	r0, [r3, r5]
	memset(crcBuffer,0,sizeof(crcBuffer));
 80094f4:	2238      	movs	r2, #56	; 0x38
 80094f6:	2100      	movs	r1, #0
 80094f8:	4831      	ldr	r0, [pc, #196]	; (80095c0 <SendMessageFromPort+0x34c>)
 80094fa:	f009 fd59 	bl	8012fb0 <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 80094fe:	3402      	adds	r4, #2
 8009500:	b2e4      	uxtb	r4, r4
 8009502:	2c01      	cmp	r4, #1
 8009504:	d80a      	bhi.n	800951c <SendMessageFromPort+0x2a8>
		}
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8009506:	4658      	mov	r0, fp
 8009508:	f7fa f982 	bl	8003810 <FindBroadcastRoutes>
 800950c:	2500      	movs	r5, #0
		
		/* Send to all my broadcast ports */
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800950e:	2401      	movs	r4, #1
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009510:	4b36      	ldr	r3, [pc, #216]	; (80095ec <SendMessageFromPort+0x378>)
 8009512:	4698      	mov	r8, r3
 8009514:	4e2b      	ldr	r6, [pc, #172]	; (80095c4 <SendMessageFromPort+0x350>)
 8009516:	e01c      	b.n	8009552 <SendMessageFromPort+0x2de>
			uint8_t groupMembers =0;
 8009518:	2200      	movs	r2, #0
 800951a:	e7c5      	b.n	80094a8 <SendMessageFromPort+0x234>
		writePxDMAMutex(port,message,length + 4,cmd50ms);
 800951c:	1d3a      	adds	r2, r7, #4
 800951e:	b292      	uxth	r2, r2
 8009520:	2332      	movs	r3, #50	; 0x32
 8009522:	4923      	ldr	r1, [pc, #140]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009524:	4640      	mov	r0, r8
 8009526:	f003 ff9d 	bl	800d464 <writePxDMAMutex>
			}
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 800952a:	9902      	ldr	r1, [sp, #8]
 800952c:	2000      	movs	r0, #0
 800952e:	f004 ff7b 	bl	800e428 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 8009532:	4b2f      	ldr	r3, [pc, #188]	; (80095f0 <SendMessageFromPort+0x37c>)
 8009534:	2202      	movs	r2, #2
 8009536:	701a      	strb	r2, [r3, #0]
	
	return result;
 8009538:	2000      	movs	r0, #0
}
 800953a:	b005      	add	sp, #20
 800953c:	bc3c      	pop	{r2, r3, r4, r5}
 800953e:	4690      	mov	r8, r2
 8009540:	4699      	mov	r9, r3
 8009542:	46a2      	mov	sl, r4
 8009544:	46ab      	mov	fp, r5
 8009546:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8009548:	3401      	adds	r4, #1
 800954a:	b2e4      	uxtb	r4, r4
 800954c:	3501      	adds	r5, #1
 800954e:	2c07      	cmp	r4, #7
 8009550:	d0eb      	beq.n	800952a <SendMessageFromPort+0x2b6>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009552:	7833      	ldrb	r3, [r6, #0]
 8009554:	3b01      	subs	r3, #1
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	4642      	mov	r2, r8
 800955a:	5a9b      	ldrh	r3, [r3, r2]
 800955c:	412b      	asrs	r3, r5
 800955e:	07db      	lsls	r3, r3, #31
 8009560:	d5f2      	bpl.n	8009548 <SendMessageFromPort+0x2d4>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009562:	1d3a      	adds	r2, r7, #4
 8009564:	b292      	uxth	r2, r2
 8009566:	2332      	movs	r3, #50	; 0x32
 8009568:	4911      	ldr	r1, [pc, #68]	; (80095b0 <SendMessageFromPort+0x33c>)
 800956a:	0020      	movs	r0, r4
 800956c:	f003 ff7a 	bl	800d464 <writePxDMAMutex>
				Delay_ms(1);
 8009570:	2001      	movs	r0, #1
 8009572:	f006 f885 	bl	800f680 <HAL_Delay>
 8009576:	e7e7      	b.n	8009548 <SendMessageFromPort+0x2d4>
		return BOS_ERR_WrongParam;
 8009578:	2067      	movs	r0, #103	; 0x67
 800957a:	e7de      	b.n	800953a <SendMessageFromPort+0x2c6>
 800957c:	2067      	movs	r0, #103	; 0x67
 800957e:	e7dc      	b.n	800953a <SendMessageFromPort+0x2c6>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8009580:	2069      	movs	r0, #105	; 0x69
 8009582:	e7da      	b.n	800953a <SendMessageFromPort+0x2c6>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009584:	1c6b      	adds	r3, r5, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009586:	2069      	movs	r0, #105	; 0x69
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009588:	2b2d      	cmp	r3, #45	; 0x2d
 800958a:	dcd6      	bgt.n	800953a <SendMessageFromPort+0x2c6>
				message[7 + shift + numberOfParams] =++bcastID;
 800958c:	4a16      	ldr	r2, [pc, #88]	; (80095e8 <SendMessageFromPort+0x374>)
 800958e:	7813      	ldrb	r3, [r2, #0]
 8009590:	3301      	adds	r3, #1
 8009592:	b2db      	uxtb	r3, r3
 8009594:	7013      	strb	r3, [r2, #0]
 8009596:	4a06      	ldr	r2, [pc, #24]	; (80095b0 <SendMessageFromPort+0x33c>)
 8009598:	1955      	adds	r5, r2, r5
 800959a:	444d      	add	r5, r9
 800959c:	71eb      	strb	r3, [r5, #7]
				length +=1;		// + bcastID
 800959e:	3601      	adds	r6, #1
 80095a0:	b2f6      	uxtb	r6, r6
 80095a2:	e797      	b.n	80094d4 <SendMessageFromPort+0x260>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80095a4:	4653      	mov	r3, sl
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d100      	bne.n	80095ac <SendMessageFromPort+0x338>
 80095aa:	e68d      	b.n	80092c8 <SendMessageFromPort+0x54>
 80095ac:	e6d8      	b.n	8009360 <SendMessageFromPort+0xec>
 80095ae:	46c0      	nop			; (mov r8, r8)
 80095b0:	20000ef8 	.word	0x20000ef8
 80095b4:	20000f30 	.word	0x20000f30
 80095b8:	20000efb 	.word	0x20000efb
 80095bc:	20000d08 	.word	0x20000d08
 80095c0:	20001458 	.word	0x20001458
 80095c4:	20001076 	.word	0x20001076
 80095c8:	200069c4 	.word	0x200069c4
 80095cc:	200015b6 	.word	0x200015b6
 80095d0:	200015b4 	.word	0x200015b4
 80095d4:	20000f38 	.word	0x20000f38
 80095d8:	20000a74 	.word	0x20000a74
 80095dc:	2000001d 	.word	0x2000001d
 80095e0:	2000001c 	.word	0x2000001c
 80095e4:	20000ec0 	.word	0x20000ec0
 80095e8:	20000cb4 	.word	0x20000cb4
 80095ec:	20000cb8 	.word	0x20000cb8
 80095f0:	20001110 	.word	0x20001110

080095f4 <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80095f4:	b530      	push	{r4, r5, lr}
 80095f6:	b083      	sub	sp, #12
 80095f8:	0005      	movs	r5, r0
	AddBcastPayload = false;
 80095fa:	4b0b      	ldr	r3, [pc, #44]	; (8009628 <ForwardReceivedMessage+0x34>)
 80095fc:	2200      	movs	r2, #0
 80095fe:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8009600:	1e42      	subs	r2, r0, #1
 8009602:	00d3      	lsls	r3, r2, #3
 8009604:	1a9b      	subs	r3, r3, r2
 8009606:	00db      	lsls	r3, r3, #3
 8009608:	4a08      	ldr	r2, [pc, #32]	; (800962c <ForwardReceivedMessage+0x38>)
 800960a:	5c9c      	ldrb	r4, [r3, r2]
	port =FindRoute(myID,dst);
 800960c:	4b08      	ldr	r3, [pc, #32]	; (8009630 <ForwardReceivedMessage+0x3c>)
 800960e:	7818      	ldrb	r0, [r3, #0]
 8009610:	0021      	movs	r1, r4
 8009612:	f7fa f9cb 	bl	80039ac <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8009616:	9500      	str	r5, [sp, #0]
 8009618:	2300      	movs	r3, #0
 800961a:	0022      	movs	r2, r4
 800961c:	2100      	movs	r1, #0
 800961e:	f7ff fe29 	bl	8009274 <SendMessageFromPort>
}
 8009622:	2000      	movs	r0, #0
 8009624:	b003      	add	sp, #12
 8009626:	bd30      	pop	{r4, r5, pc}
 8009628:	20000a74 	.word	0x20000a74
 800962c:	20000d08 	.word	0x20000d08
 8009630:	20001076 	.word	0x20001076

08009634 <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8009634:	b500      	push	{lr}
 8009636:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8009638:	4b0c      	ldr	r3, [pc, #48]	; (800966c <BroadcastReceivedMessage+0x38>)
 800963a:	2200      	movs	r2, #0
 800963c:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 800963e:	4b0c      	ldr	r3, [pc, #48]	; (8009670 <BroadcastReceivedMessage+0x3c>)
 8009640:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009642:	28ff      	cmp	r0, #255	; 0xff
 8009644:	d009      	beq.n	800965a <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 8009646:	9100      	str	r1, [sp, #0]
 8009648:	2300      	movs	r3, #0
 800964a:	22fe      	movs	r2, #254	; 0xfe
 800964c:	2100      	movs	r1, #0
 800964e:	2000      	movs	r0, #0
 8009650:	f7ff fe10 	bl	8009274 <SendMessageFromPort>
}
 8009654:	2000      	movs	r0, #0
 8009656:	b003      	add	sp, #12
 8009658:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 800965a:	9100      	str	r1, [sp, #0]
 800965c:	2300      	movs	r3, #0
 800965e:	32ff      	adds	r2, #255	; 0xff
 8009660:	2100      	movs	r1, #0
 8009662:	2000      	movs	r0, #0
 8009664:	f7ff fe06 	bl	8009274 <SendMessageFromPort>
 8009668:	e7f4      	b.n	8009654 <BroadcastReceivedMessage+0x20>
 800966a:	46c0      	nop			; (mov r8, r8)
 800966c:	20000a74 	.word	0x20000a74
 8009670:	2000001d 	.word	0x2000001d

08009674 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8009674:	b530      	push	{r4, r5, lr}
 8009676:	b083      	sub	sp, #12
 8009678:	001c      	movs	r4, r3
	AddBcastPayload = true;
 800967a:	4b0f      	ldr	r3, [pc, #60]	; (80096b8 <BroadcastMessage+0x44>)
 800967c:	2501      	movs	r5, #1
 800967e:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8009680:	4b0e      	ldr	r3, [pc, #56]	; (80096bc <BroadcastMessage+0x48>)
 8009682:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009684:	29ff      	cmp	r1, #255	; 0xff
 8009686:	d00e      	beq.n	80096a6 <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 8009688:	9400      	str	r4, [sp, #0]
 800968a:	0013      	movs	r3, r2
 800968c:	22fe      	movs	r2, #254	; 0xfe
 800968e:	0001      	movs	r1, r0
 8009690:	2000      	movs	r0, #0
 8009692:	f7ff fdef 	bl	8009274 <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 8009696:	0022      	movs	r2, r4
 8009698:	2100      	movs	r1, #0
 800969a:	4809      	ldr	r0, [pc, #36]	; (80096c0 <BroadcastMessage+0x4c>)
 800969c:	f009 fc88 	bl	8012fb0 <memset>
}
 80096a0:	2000      	movs	r0, #0
 80096a2:	b003      	add	sp, #12
 80096a4:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 80096a6:	9400      	str	r4, [sp, #0]
 80096a8:	0013      	movs	r3, r2
 80096aa:	22ff      	movs	r2, #255	; 0xff
 80096ac:	0001      	movs	r1, r0
 80096ae:	2000      	movs	r0, #0
 80096b0:	f7ff fde0 	bl	8009274 <SendMessageFromPort>
 80096b4:	e7ef      	b.n	8009696 <BroadcastMessage+0x22>
 80096b6:	46c0      	nop			; (mov r8, r8)
 80096b8:	20000a74 	.word	0x20000a74
 80096bc:	2000001d 	.word	0x2000001d
 80096c0:	20000f38 	.word	0x20000f38

080096c4 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 80096c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096c6:	b083      	sub	sp, #12
 80096c8:	0004      	movs	r4, r0
 80096ca:	000e      	movs	r6, r1
 80096cc:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 80096ce:	28ff      	cmp	r0, #255	; 0xff
 80096d0:	d012      	beq.n	80096f8 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 80096d2:	4f0d      	ldr	r7, [pc, #52]	; (8009708 <SendMessageToModule+0x44>)
 80096d4:	7838      	ldrb	r0, [r7, #0]
 80096d6:	0021      	movs	r1, r4
 80096d8:	f7fa f968 	bl	80039ac <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 80096dc:	7839      	ldrb	r1, [r7, #0]
 80096de:	9500      	str	r5, [sp, #0]
 80096e0:	0033      	movs	r3, r6
 80096e2:	0022      	movs	r2, r4
 80096e4:	f7ff fdc6 	bl	8009274 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 80096e8:	002a      	movs	r2, r5
 80096ea:	2100      	movs	r1, #0
 80096ec:	4807      	ldr	r0, [pc, #28]	; (800970c <SendMessageToModule+0x48>)
 80096ee:	f009 fc5f 	bl	8012fb0 <memset>
}
 80096f2:	2000      	movs	r0, #0
 80096f4:	b003      	add	sp, #12
 80096f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 80096f8:	4b03      	ldr	r3, [pc, #12]	; (8009708 <SendMessageToModule+0x44>)
 80096fa:	7818      	ldrb	r0, [r3, #0]
 80096fc:	0013      	movs	r3, r2
 80096fe:	000a      	movs	r2, r1
 8009700:	21ff      	movs	r1, #255	; 0xff
 8009702:	f7ff ffb7 	bl	8009674 <BroadcastMessage>
 8009706:	e7f4      	b.n	80096f2 <SendMessageToModule+0x2e>
 8009708:	20001076 	.word	0x20001076
 800970c:	20000f38 	.word	0x20000f38

08009710 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8009710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009712:	46de      	mov	lr, fp
 8009714:	4657      	mov	r7, sl
 8009716:	464e      	mov	r6, r9
 8009718:	4645      	mov	r5, r8
 800971a:	b5e0      	push	{r5, r6, r7, lr}
 800971c:	b091      	sub	sp, #68	; 0x44
 800971e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009720:	000c      	movs	r4, r1
 8009722:	9106      	str	r1, [sp, #24]
 8009724:	0015      	movs	r5, r2
 8009726:	920e      	str	r2, [sp, #56]	; 0x38
 8009728:	001e      	movs	r6, r3
 800972a:	ab1a      	add	r3, sp, #104	; 0x68
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	4698      	mov	r8, r3
 8009730:	ab1d      	add	r3, sp, #116	; 0x74
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8009736:	4b5a      	ldr	r3, [pc, #360]	; (80098a0 <StartScastDMAStream+0x190>)
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	428b      	cmp	r3, r1
 800973c:	d11d      	bne.n	800977a <StartScastDMAStream+0x6a>
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800973e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009740:	0e1b      	lsrs	r3, r3, #24
 8009742:	9308      	str	r3, [sp, #32]
			messageParams[1] =(uint8_t )(count >> 16);
 8009744:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009746:	0c1b      	lsrs	r3, r3, #16
 8009748:	b2db      	uxtb	r3, r3
 800974a:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] =(uint8_t )(count >> 8);
 800974c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800974e:	0a1b      	lsrs	r3, r3, #8
 8009750:	b2db      	uxtb	r3, r3
 8009752:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] =(uint8_t )count;
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009754:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009756:	0e1b      	lsrs	r3, r3, #24
 8009758:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] =(uint8_t )(timeout >> 16);
 800975a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800975c:	0c1b      	lsrs	r3, r3, #16
 800975e:	b2db      	uxtb	r3, r3
 8009760:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009762:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009764:	0a1b      	lsrs	r3, r3, #8
 8009766:	b2db      	uxtb	r3, r3
 8009768:	469b      	mov	fp, r3
 800976a:	4d4e      	ldr	r5, [pc, #312]	; (80098a4 <StartScastDMAStream+0x194>)
 800976c:	231a      	movs	r3, #26
 800976e:	4699      	mov	r9, r3
 8009770:	44a9      	add	r9, r5
				temp2 =dstP;
 8009772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009774:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009776:	4c4c      	ldr	r4, [pc, #304]	; (80098a8 <StartScastDMAStream+0x198>)
 8009778:	e05c      	b.n	8009834 <StartScastDMAStream+0x124>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800977a:	4b4b      	ldr	r3, [pc, #300]	; (80098a8 <StartScastDMAStream+0x198>)
 800977c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800977e:	0e12      	lsrs	r2, r2, #24
 8009780:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 8009782:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009784:	0c12      	lsrs	r2, r2, #16
 8009786:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 8009788:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800978a:	0a12      	lsrs	r2, r2, #8
 800978c:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 800978e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009790:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009792:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009794:	0e12      	lsrs	r2, r2, #24
 8009796:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009798:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800979a:	0c12      	lsrs	r2, r2, #16
 800979c:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 800979e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80097a0:	0a12      	lsrs	r2, r2, #8
 80097a2:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 80097a4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80097a6:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 80097a8:	4642      	mov	r2, r8
 80097aa:	721a      	strb	r2, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 80097ac:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 80097ae:	729e      	strb	r6, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 80097b0:	72dd      	strb	r5, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 80097b2:	4652      	mov	r2, sl
 80097b4:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80097b6:	220d      	movs	r2, #13
 80097b8:	211c      	movs	r1, #28
 80097ba:	0020      	movs	r0, r4
 80097bc:	f7ff ff82 	bl	80096c4 <SendMessageToModule>
	if(stored){
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 80097c0:	2000      	movs	r0, #0
 80097c2:	b011      	add	sp, #68	; 0x44
 80097c4:	bc3c      	pop	{r2, r3, r4, r5}
 80097c6:	4690      	mov	r8, r2
 80097c8:	4699      	mov	r9, r3
 80097ca:	46a2      	mov	sl, r4
 80097cc:	46ab      	mov	fp, r5
 80097ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 =FindRoute(route[i],srcM);
 80097d0:	9906      	ldr	r1, [sp, #24]
 80097d2:	f7fa f8eb 	bl	80039ac <FindRoute>
 80097d6:	9007      	str	r0, [sp, #28]
			FindRoute(srcM,dstM);
 80097d8:	0031      	movs	r1, r6
 80097da:	9806      	ldr	r0, [sp, #24]
 80097dc:	f7fa f8e6 	bl	80039ac <FindRoute>
			if(route[i] == dstM){
 80097e0:	7878      	ldrb	r0, [r7, #1]
				temp2 =dstP;
 80097e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if(route[i] == dstM){
 80097e4:	42b0      	cmp	r0, r6
 80097e6:	d134      	bne.n	8009852 <StartScastDMAStream+0x142>
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80097e8:	9a08      	ldr	r2, [sp, #32]
 80097ea:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 80097ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097ee:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 80097f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097f2:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 80097f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80097f6:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80097f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097fa:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 80097fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097fe:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009800:	465a      	mov	r2, fp
 8009802:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8009804:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009806:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8009808:	4642      	mov	r2, r8
 800980a:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 800980c:	9a07      	ldr	r2, [sp, #28]
 800980e:	7262      	strb	r2, [r4, #9]
			messageParams[10] =temp2; /* destination port */
 8009810:	72a3      	strb	r3, [r4, #10]
			messageParams[11] =stored; /* EEPROM storage */
 8009812:	4653      	mov	r3, sl
 8009814:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM,dstM);
 8009816:	0031      	movs	r1, r6
 8009818:	9806      	ldr	r0, [sp, #24]
 800981a:	f7fa f8c7 	bl	80039ac <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 800981e:	7878      	ldrb	r0, [r7, #1]
 8009820:	220c      	movs	r2, #12
 8009822:	211b      	movs	r1, #27
 8009824:	f7ff ff4e 	bl	80096c4 <SendMessageToModule>
			osDelay(10);
 8009828:	200a      	movs	r0, #10
 800982a:	f003 fefe 	bl	800d62a <osDelay>
 800982e:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 8009830:	454d      	cmp	r5, r9
 8009832:	d013      	beq.n	800985c <StartScastDMAStream+0x14c>
		FindRoute(srcM,dstM);
 8009834:	0031      	movs	r1, r6
 8009836:	9806      	ldr	r0, [sp, #24]
 8009838:	f7fa f8b8 	bl	80039ac <FindRoute>
 800983c:	002f      	movs	r7, r5
		if(route[i]){
 800983e:	7868      	ldrb	r0, [r5, #1]
 8009840:	2800      	cmp	r0, #0
 8009842:	d0f4      	beq.n	800982e <StartScastDMAStream+0x11e>
			if(route[i + 1]){
 8009844:	78a9      	ldrb	r1, [r5, #2]
 8009846:	2900      	cmp	r1, #0
 8009848:	d0c2      	beq.n	80097d0 <StartScastDMAStream+0xc0>
				temp1 =FindRoute(route[i],route[i + 1]);
 800984a:	f7fa f8af 	bl	80039ac <FindRoute>
 800984e:	9007      	str	r0, [sp, #28]
 8009850:	e7c2      	b.n	80097d8 <StartScastDMAStream+0xc8>
				temp2 =FindRoute(route[i],route[i - 1]);
 8009852:	7839      	ldrb	r1, [r7, #0]
 8009854:	f7fa f8aa 	bl	80039ac <FindRoute>
 8009858:	0003      	movs	r3, r0
 800985a:	e7c5      	b.n	80097e8 <StartScastDMAStream+0xd8>
	if(srcM == dstM)
 800985c:	9806      	ldr	r0, [sp, #24]
 800985e:	42b0      	cmp	r0, r6
 8009860:	d118      	bne.n	8009894 <StartScastDMAStream+0x184>
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8009862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009868:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800986a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800986c:	4640      	mov	r0, r8
 800986e:	f7ff fbdf 	bl	8009030 <SetupDMAStreams>
	if(stored){
 8009872:	4653      	mov	r3, sl
 8009874:	2b00      	cmp	r3, #0
 8009876:	d0a3      	beq.n	80097c0 <StartScastDMAStream+0xb0>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8009878:	2300      	movs	r3, #0
 800987a:	9304      	str	r3, [sp, #16]
 800987c:	9303      	str	r3, [sp, #12]
 800987e:	9302      	str	r3, [sp, #8]
 8009880:	9301      	str	r3, [sp, #4]
 8009882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009888:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800988a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800988c:	4640      	mov	r0, r8
 800988e:	f7f9 fe1f 	bl	80034d0 <SaveEEstreams>
 8009892:	e795      	b.n	80097c0 <StartScastDMAStream+0xb0>
		port =FindRoute(srcM,dstM);
 8009894:	0031      	movs	r1, r6
 8009896:	f7fa f889 	bl	80039ac <FindRoute>
 800989a:	900e      	str	r0, [sp, #56]	; 0x38
 800989c:	e7e1      	b.n	8009862 <StartScastDMAStream+0x152>
 800989e:	46c0      	nop			; (mov r8, r8)
 80098a0:	20001076 	.word	0x20001076
 80098a4:	20006ac7 	.word	0x20006ac7
 80098a8:	20000f38 	.word	0x20000f38

080098ac <BackEndTask>:
}

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void *argument){
 80098ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ae:	46de      	mov	lr, fp
 80098b0:	4657      	mov	r7, sl
 80098b2:	464e      	mov	r6, r9
 80098b4:	4645      	mov	r5, r8
 80098b6:	b5e0      	push	{r5, r6, r7, lr}
 80098b8:	b087      	sub	sp, #28
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
 80098ba:	2300      	movs	r3, #0
 80098bc:	469b      	mov	fp, r3
						/* A.5.1. Copy the packet to message buffer */
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
						}
						else{ // Message wraps around
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 80098be:	4bd5      	ldr	r3, [pc, #852]	; (8009c14 <BackEndTask+0x368>)
 80098c0:	3b70      	subs	r3, #112	; 0x70
 80098c2:	9304      	str	r3, [sp, #16]
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 80098c4:	4bd3      	ldr	r3, [pc, #844]	; (8009c14 <BackEndTask+0x368>)
 80098c6:	3b70      	subs	r3, #112	; 0x70
 80098c8:	9305      	str	r3, [sp, #20]
 80098ca:	e19e      	b.n	8009c0a <BackEndTask+0x35e>
 80098cc:	1ebb      	subs	r3, r7, #2
 80098ce:	4698      	mov	r8, r3
 80098d0:	4bd1      	ldr	r3, [pc, #836]	; (8009c18 <BackEndTask+0x36c>)
 80098d2:	4443      	add	r3, r8
 80098d4:	4699      	mov	r9, r3
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 80098d6:	7819      	ldrb	r1, [r3, #0]
 80098d8:	293f      	cmp	r1, #63	; 0x3f
 80098da:	dc17      	bgt.n	800990c <BackEndTask+0x60>
							if(BOS.disableCLI == false){
 80098dc:	4bcf      	ldr	r3, [pc, #828]	; (8009c1c <BackEndTask+0x370>)
 80098de:	7edb      	ldrb	r3, [r3, #27]
 80098e0:	469c      	mov	ip, r3
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 80098e2:	000b      	movs	r3, r1
							if(BOS.disableCLI == false){
 80098e4:	2000      	movs	r0, #0
 80098e6:	e004      	b.n	80098f2 <BackEndTask+0x46>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 80098e8:	2b3f      	cmp	r3, #63	; 0x3f
 80098ea:	d023      	beq.n	8009934 <BackEndTask+0x88>
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 80098ec:	3301      	adds	r3, #1
 80098ee:	2b40      	cmp	r3, #64	; 0x40
 80098f0:	d009      	beq.n	8009906 <BackEndTask+0x5a>
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 80098f2:	2b3e      	cmp	r3, #62	; 0x3e
 80098f4:	dcf8      	bgt.n	80098e8 <BackEndTask+0x3c>
 80098f6:	5cf2      	ldrb	r2, [r6, r3]
 80098f8:	2a48      	cmp	r2, #72	; 0x48
 80098fa:	d1f5      	bne.n	80098e8 <BackEndTask+0x3c>
 80098fc:	18f2      	adds	r2, r6, r3
 80098fe:	7852      	ldrb	r2, [r2, #1]
 8009900:	2a5a      	cmp	r2, #90	; 0x5a
 8009902:	d1f1      	bne.n	80098e8 <BackEndTask+0x3c>
 8009904:	469b      	mov	fp, r3
				if(emptyBuffer){
 8009906:	2800      	cmp	r0, #0
 8009908:	d000      	beq.n	800990c <BackEndTask+0x60>
 800990a:	e15f      	b.n	8009bcc <BackEndTask+0x320>
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 800990c:	465b      	mov	r3, fp
 800990e:	2b3d      	cmp	r3, #61	; 0x3d
 8009910:	d051      	beq.n	80099b6 <BackEndTask+0x10a>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 8009912:	2b3e      	cmp	r3, #62	; 0x3e
 8009914:	d100      	bne.n	8009918 <BackEndTask+0x6c>
 8009916:	e090      	b.n	8009a3a <BackEndTask+0x18e>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8009918:	2b3f      	cmp	r3, #63	; 0x3f
 800991a:	d100      	bne.n	800991e <BackEndTask+0x72>
 800991c:	e092      	b.n	8009a44 <BackEndTask+0x198>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 800991e:	4643      	mov	r3, r8
 8009920:	019a      	lsls	r2, r3, #6
 8009922:	4bbf      	ldr	r3, [pc, #764]	; (8009c20 <BackEndTask+0x374>)
 8009924:	189b      	adds	r3, r3, r2
 8009926:	445b      	add	r3, fp
 8009928:	789b      	ldrb	r3, [r3, #2]
 800992a:	9300      	str	r3, [sp, #0]
					parseStart =packetStart + 3;
 800992c:	465b      	mov	r3, fp
 800992e:	3303      	adds	r3, #3
 8009930:	9302      	str	r3, [sp, #8]
 8009932:	e046      	b.n	80099c2 <BackEndTask+0x116>
 8009934:	9600      	str	r6, [sp, #0]
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009936:	223f      	movs	r2, #63	; 0x3f
 8009938:	4692      	mov	sl, r2
 800993a:	44b2      	add	sl, r6
 800993c:	4652      	mov	r2, sl
 800993e:	7812      	ldrb	r2, [r2, #0]
 8009940:	2a48      	cmp	r2, #72	; 0x48
 8009942:	d005      	beq.n	8009950 <BackEndTask+0xa4>
							if(BOS.disableCLI == false){
 8009944:	4663      	mov	r3, ip
 8009946:	2b00      	cmp	r3, #0
 8009948:	d000      	beq.n	800994c <BackEndTask+0xa0>
 800994a:	e13f      	b.n	8009bcc <BackEndTask+0x320>
 800994c:	9a00      	ldr	r2, [sp, #0]
 800994e:	e00c      	b.n	800996a <BackEndTask+0xbe>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009950:	7832      	ldrb	r2, [r6, #0]
 8009952:	2a5a      	cmp	r2, #90	; 0x5a
 8009954:	d1f6      	bne.n	8009944 <BackEndTask+0x98>
				if(emptyBuffer){
 8009956:	2800      	cmp	r0, #0
 8009958:	d074      	beq.n	8009a44 <BackEndTask+0x198>
						packetStart = MSG_RX_BUF_SIZE - 1;
 800995a:	469b      	mov	fp, r3
 800995c:	e136      	b.n	8009bcc <BackEndTask+0x320>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 800995e:	293f      	cmp	r1, #63	; 0x3f
 8009960:	d024      	beq.n	80099ac <BackEndTask+0x100>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009962:	3101      	adds	r1, #1
 8009964:	2940      	cmp	r1, #64	; 0x40
 8009966:	d100      	bne.n	800996a <BackEndTask+0xbe>
 8009968:	e130      	b.n	8009bcc <BackEndTask+0x320>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 800996a:	5c53      	ldrb	r3, [r2, r1]
 800996c:	2b0d      	cmp	r3, #13
 800996e:	d1f8      	bne.n	8009962 <BackEndTask+0xb6>
 8009970:	293e      	cmp	r1, #62	; 0x3e
 8009972:	dcf4      	bgt.n	800995e <BackEndTask+0xb2>
 8009974:	1850      	adds	r0, r2, r1
 8009976:	7843      	ldrb	r3, [r0, #1]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1f0      	bne.n	800995e <BackEndTask+0xb2>
										UARTRxBuf[port - 1][j] =0;
 800997c:	4643      	mov	r3, r8
 800997e:	019a      	lsls	r2, r3, #6
 8009980:	4ba7      	ldr	r3, [pc, #668]	; (8009c20 <BackEndTask+0x374>)
 8009982:	189b      	adds	r3, r3, r2
 8009984:	2200      	movs	r2, #0
 8009986:	545a      	strb	r2, [r3, r1]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8009988:	3101      	adds	r1, #1
 800998a:	464b      	mov	r3, r9
 800998c:	7019      	strb	r1, [r3, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 800998e:	4ba5      	ldr	r3, [pc, #660]	; (8009c24 <BackEndTask+0x378>)
 8009990:	7819      	ldrb	r1, [r3, #0]
 8009992:	48a5      	ldr	r0, [pc, #660]	; (8009c28 <BackEndTask+0x37c>)
 8009994:	5442      	strb	r2, [r0, r1]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8009996:	3203      	adds	r2, #3
 8009998:	7022      	strb	r2, [r4, #0]
										PcPort =port;
 800999a:	701d      	strb	r5, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 800999c:	4ba3      	ldr	r3, [pc, #652]	; (8009c2c <BackEndTask+0x380>)
 800999e:	6818      	ldr	r0, [r3, #0]
 80099a0:	2300      	movs	r3, #0
 80099a2:	3a01      	subs	r2, #1
 80099a4:	2100      	movs	r1, #0
 80099a6:	f005 fa5f 	bl	800ee68 <xTaskGenericNotify>
										break;
 80099aa:	e10f      	b.n	8009bcc <BackEndTask+0x320>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 80099ac:	7813      	ldrb	r3, [r2, #0]
							emptyBuffer = true;
 80099ae:	2001      	movs	r0, #1
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1a8      	bne.n	8009906 <BackEndTask+0x5a>
 80099b4:	e7e2      	b.n	800997c <BackEndTask+0xd0>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 80099b6:	0033      	movs	r3, r6
 80099b8:	333f      	adds	r3, #63	; 0x3f
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	9300      	str	r3, [sp, #0]
					parseStart =0;
 80099be:	2300      	movs	r3, #0
 80099c0:	9302      	str	r3, [sp, #8]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 80099c2:	9b00      	ldr	r3, [sp, #0]
 80099c4:	3303      	adds	r3, #3
 80099c6:	9301      	str	r3, [sp, #4]
 80099c8:	445b      	add	r3, fp
 80099ca:	469a      	mov	sl, r3
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 80099cc:	2b3f      	cmp	r3, #63	; 0x3f
 80099ce:	dd03      	ble.n	80099d8 <BackEndTask+0x12c>
					packetEnd -= MSG_RX_BUF_SIZE;
 80099d0:	2340      	movs	r3, #64	; 0x40
 80099d2:	425b      	negs	r3, r3
 80099d4:	469c      	mov	ip, r3
 80099d6:	44e2      	add	sl, ip
				if(packetStart != packetEnd) // Non-empty packet
 80099d8:	45da      	cmp	sl, fp
 80099da:	d100      	bne.n	80099de <BackEndTask+0x132>
 80099dc:	e0d0      	b.n	8009b80 <BackEndTask+0x2d4>
					Delay_ms(1);
 80099de:	2001      	movs	r0, #1
 80099e0:	f005 fe4e 	bl	800f680 <HAL_Delay>
					if(packetStart < packetEnd){
 80099e4:	45da      	cmp	sl, fp
 80099e6:	dd34      	ble.n	8009a52 <BackEndTask+0x1a6>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 80099e8:	4b91      	ldr	r3, [pc, #580]	; (8009c30 <BackEndTask+0x384>)
 80099ea:	18fb      	adds	r3, r7, r3
 80099ec:	019b      	lsls	r3, r3, #6
 80099ee:	445b      	add	r3, fp
 80099f0:	4a8b      	ldr	r2, [pc, #556]	; (8009c20 <BackEndTask+0x374>)
 80099f2:	4694      	mov	ip, r2
 80099f4:	4463      	add	r3, ip
 80099f6:	9303      	str	r3, [sp, #12]
 80099f8:	9a01      	ldr	r2, [sp, #4]
 80099fa:	0019      	movs	r1, r3
 80099fc:	488d      	ldr	r0, [pc, #564]	; (8009c34 <BackEndTask+0x388>)
 80099fe:	f009 face 	bl	8012f9e <memcpy>
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009a02:	9b00      	ldr	r3, [sp, #0]
 8009a04:	1cd9      	adds	r1, r3, #3
 8009a06:	488b      	ldr	r0, [pc, #556]	; (8009c34 <BackEndTask+0x388>)
 8009a08:	f002 feda 	bl	800c7c0 <CalculateCRC8>
 8009a0c:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009a0e:	2238      	movs	r2, #56	; 0x38
 8009a10:	2100      	movs	r1, #0
 8009a12:	4888      	ldr	r0, [pc, #544]	; (8009c34 <BackEndTask+0x388>)
 8009a14:	f009 facc 	bl	8012fb0 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009a18:	4643      	mov	r3, r8
 8009a1a:	019b      	lsls	r3, r3, #6
 8009a1c:	4a80      	ldr	r2, [pc, #512]	; (8009c20 <BackEndTask+0x374>)
 8009a1e:	4694      	mov	ip, r2
 8009a20:	4463      	add	r3, ip
 8009a22:	4652      	mov	r2, sl
 8009a24:	5c9b      	ldrb	r3, [r3, r2]
 8009a26:	9a01      	ldr	r2, [sp, #4]
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d040      	beq.n	8009aae <BackEndTask+0x202>
				
				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */
				if(packetStart < packetEnd){
					memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009a2c:	9a00      	ldr	r2, [sp, #0]
 8009a2e:	3204      	adds	r2, #4
 8009a30:	2100      	movs	r1, #0
 8009a32:	9803      	ldr	r0, [sp, #12]
 8009a34:	f009 fabc 	bl	8012fb0 <memset>
 8009a38:	e0b8      	b.n	8009bac <BackEndTask+0x300>
					packetLength =UARTRxBuf[port - 1][0];
 8009a3a:	7833      	ldrb	r3, [r6, #0]
 8009a3c:	9300      	str	r3, [sp, #0]
					parseStart =1;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	9302      	str	r3, [sp, #8]
 8009a42:	e7be      	b.n	80099c2 <BackEndTask+0x116>
					packetLength =UARTRxBuf[port - 1][1];
 8009a44:	7873      	ldrb	r3, [r6, #1]
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	233f      	movs	r3, #63	; 0x3f
 8009a4a:	469b      	mov	fp, r3
					parseStart =2;
 8009a4c:	3b3d      	subs	r3, #61	; 0x3d
 8009a4e:	9302      	str	r3, [sp, #8]
 8009a50:	e7b7      	b.n	80099c2 <BackEndTask+0x116>
						MSG_RX_BUF_SIZE - packetStart);
 8009a52:	2240      	movs	r2, #64	; 0x40
 8009a54:	465b      	mov	r3, fp
 8009a56:	1ad3      	subs	r3, r2, r3
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009a58:	4a75      	ldr	r2, [pc, #468]	; (8009c30 <BackEndTask+0x384>)
 8009a5a:	18b9      	adds	r1, r7, r2
 8009a5c:	0189      	lsls	r1, r1, #6
 8009a5e:	4459      	add	r1, fp
 8009a60:	4a6f      	ldr	r2, [pc, #444]	; (8009c20 <BackEndTask+0x374>)
 8009a62:	4694      	mov	ip, r2
 8009a64:	4461      	add	r1, ip
 8009a66:	9303      	str	r3, [sp, #12]
 8009a68:	001a      	movs	r2, r3
 8009a6a:	4872      	ldr	r0, [pc, #456]	; (8009c34 <BackEndTask+0x388>)
 8009a6c:	f009 fa97 	bl	8012f9e <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 8009a70:	4a70      	ldr	r2, [pc, #448]	; (8009c34 <BackEndTask+0x388>)
 8009a72:	0010      	movs	r0, r2
 8009a74:	9b03      	ldr	r3, [sp, #12]
 8009a76:	469c      	mov	ip, r3
 8009a78:	4460      	add	r0, ip
 8009a7a:	9a01      	ldr	r2, [sp, #4]
 8009a7c:	1ad2      	subs	r2, r2, r3
 8009a7e:	0031      	movs	r1, r6
 8009a80:	f009 fa8d 	bl	8012f9e <memcpy>
					crc8 =CalculateCRC8((uint32_t* )&crcBuffer,(packetLength + 3));
 8009a84:	9b00      	ldr	r3, [sp, #0]
 8009a86:	1cd9      	adds	r1, r3, #3
 8009a88:	486a      	ldr	r0, [pc, #424]	; (8009c34 <BackEndTask+0x388>)
 8009a8a:	f002 fe99 	bl	800c7c0 <CalculateCRC8>
 8009a8e:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009a90:	2238      	movs	r2, #56	; 0x38
 8009a92:	2100      	movs	r1, #0
 8009a94:	4867      	ldr	r0, [pc, #412]	; (8009c34 <BackEndTask+0x388>)
 8009a96:	f009 fa8b 	bl	8012fb0 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009a9a:	4643      	mov	r3, r8
 8009a9c:	019b      	lsls	r3, r3, #6
 8009a9e:	4a60      	ldr	r2, [pc, #384]	; (8009c20 <BackEndTask+0x374>)
 8009aa0:	4694      	mov	ip, r2
 8009aa2:	4463      	add	r3, ip
 8009aa4:	4652      	mov	r2, sl
 8009aa6:	5c9b      	ldrb	r3, [r3, r2]
 8009aa8:	9a01      	ldr	r2, [sp, #4]
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d168      	bne.n	8009b80 <BackEndTask+0x2d4>
						portStatus[port] =MSG;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	7023      	strb	r3, [r4, #0]
						messageLength[port - 1] =packetLength;
 8009ab2:	1ebb      	subs	r3, r7, #2
 8009ab4:	4a60      	ldr	r2, [pc, #384]	; (8009c38 <BackEndTask+0x38c>)
 8009ab6:	9900      	ldr	r1, [sp, #0]
 8009ab8:	54d1      	strb	r1, [r2, r3]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009aba:	233f      	movs	r3, #63	; 0x3f
 8009abc:	9c02      	ldr	r4, [sp, #8]
 8009abe:	1b1b      	subs	r3, r3, r4
 8009ac0:	000a      	movs	r2, r1
 8009ac2:	428b      	cmp	r3, r1
 8009ac4:	db27      	blt.n	8009b16 <BackEndTask+0x26a>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009ac6:	00f8      	lsls	r0, r7, #3
 8009ac8:	1bc0      	subs	r0, r0, r7
 8009aca:	00c0      	lsls	r0, r0, #3
 8009acc:	9b05      	ldr	r3, [sp, #20]
 8009ace:	469c      	mov	ip, r3
 8009ad0:	4460      	add	r0, ip
 8009ad2:	4b57      	ldr	r3, [pc, #348]	; (8009c30 <BackEndTask+0x384>)
 8009ad4:	18f9      	adds	r1, r7, r3
 8009ad6:	0189      	lsls	r1, r1, #6
 8009ad8:	46a4      	mov	ip, r4
 8009ada:	4461      	add	r1, ip
 8009adc:	4b50      	ldr	r3, [pc, #320]	; (8009c20 <BackEndTask+0x374>)
 8009ade:	18c9      	adds	r1, r1, r3
 8009ae0:	f009 fa5d 	bl	8012f9e <memcpy>
						if(packetStart < packetEnd){
 8009ae4:	45da      	cmp	sl, fp
 8009ae6:	dd36      	ble.n	8009b56 <BackEndTask+0x2aa>
							memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009ae8:	9a00      	ldr	r2, [sp, #0]
 8009aea:	3204      	adds	r2, #4
 8009aec:	4b50      	ldr	r3, [pc, #320]	; (8009c30 <BackEndTask+0x384>)
 8009aee:	18f8      	adds	r0, r7, r3
 8009af0:	0180      	lsls	r0, r0, #6
 8009af2:	4458      	add	r0, fp
 8009af4:	4b4a      	ldr	r3, [pc, #296]	; (8009c20 <BackEndTask+0x374>)
 8009af6:	18c0      	adds	r0, r0, r3
 8009af8:	2100      	movs	r1, #0
 8009afa:	f009 fa59 	bl	8012fb0 <memset>
						UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009afe:	4653      	mov	r3, sl
 8009b00:	3301      	adds	r3, #1
 8009b02:	464a      	mov	r2, r9
 8009b04:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8009b06:	4a4d      	ldr	r2, [pc, #308]	; (8009c3c <BackEndTask+0x390>)
 8009b08:	8813      	ldrh	r3, [r2, #0]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);
 8009b0e:	0028      	movs	r0, r5
 8009b10:	f7ff fb6a 	bl	80091e8 <NotifyMessagingTask>
						continue; // Inspect the next port circular buffer
 8009b14:	e05a      	b.n	8009bcc <BackEndTask+0x320>
 8009b16:	00fb      	lsls	r3, r7, #3
 8009b18:	1bdb      	subs	r3, r3, r7
 8009b1a:	00db      	lsls	r3, r3, #3
 8009b1c:	4698      	mov	r8, r3
							MSG_RX_BUF_SIZE - parseStart);
 8009b1e:	2440      	movs	r4, #64	; 0x40
 8009b20:	9b02      	ldr	r3, [sp, #8]
 8009b22:	1ae4      	subs	r4, r4, r3
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009b24:	9a04      	ldr	r2, [sp, #16]
 8009b26:	4442      	add	r2, r8
 8009b28:	0010      	movs	r0, r2
 8009b2a:	4a41      	ldr	r2, [pc, #260]	; (8009c30 <BackEndTask+0x384>)
 8009b2c:	18b9      	adds	r1, r7, r2
 8009b2e:	0189      	lsls	r1, r1, #6
 8009b30:	469c      	mov	ip, r3
 8009b32:	4461      	add	r1, ip
 8009b34:	4b3a      	ldr	r3, [pc, #232]	; (8009c20 <BackEndTask+0x374>)
 8009b36:	18c9      	adds	r1, r1, r3
 8009b38:	0022      	movs	r2, r4
 8009b3a:	f009 fa30 	bl	8012f9e <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 8009b3e:	4640      	mov	r0, r8
 8009b40:	3870      	subs	r0, #112	; 0x70
 8009b42:	1900      	adds	r0, r0, r4
 8009b44:	4b33      	ldr	r3, [pc, #204]	; (8009c14 <BackEndTask+0x368>)
 8009b46:	469c      	mov	ip, r3
 8009b48:	4460      	add	r0, ip
 8009b4a:	9b00      	ldr	r3, [sp, #0]
 8009b4c:	1b1a      	subs	r2, r3, r4
 8009b4e:	0031      	movs	r1, r6
 8009b50:	f009 fa25 	bl	8012f9e <memcpy>
 8009b54:	e7c6      	b.n	8009ae4 <BackEndTask+0x238>
							MSG_RX_BUF_SIZE - packetStart);
 8009b56:	2440      	movs	r4, #64	; 0x40
 8009b58:	465b      	mov	r3, fp
 8009b5a:	1ae4      	subs	r4, r4, r3
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8009b5c:	4b34      	ldr	r3, [pc, #208]	; (8009c30 <BackEndTask+0x384>)
 8009b5e:	18f8      	adds	r0, r7, r3
 8009b60:	0180      	lsls	r0, r0, #6
 8009b62:	4458      	add	r0, fp
 8009b64:	4b2e      	ldr	r3, [pc, #184]	; (8009c20 <BackEndTask+0x374>)
 8009b66:	18c0      	adds	r0, r0, r3
 8009b68:	0022      	movs	r2, r4
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	f009 fa20 	bl	8012fb0 <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009b70:	9a00      	ldr	r2, [sp, #0]
 8009b72:	3204      	adds	r2, #4
 8009b74:	1b12      	subs	r2, r2, r4
 8009b76:	2100      	movs	r1, #0
 8009b78:	0030      	movs	r0, r6
 8009b7a:	f009 fa19 	bl	8012fb0 <memset>
 8009b7e:	e7be      	b.n	8009afe <BackEndTask+0x252>
				}
				else{ // wrap around
					memset(&UARTRxBuf[port - 1][packetStart],0,
					MSG_RX_BUF_SIZE - packetStart);
 8009b80:	2240      	movs	r2, #64	; 0x40
 8009b82:	465b      	mov	r3, fp
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	4698      	mov	r8, r3
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8009b88:	4b29      	ldr	r3, [pc, #164]	; (8009c30 <BackEndTask+0x384>)
 8009b8a:	18f8      	adds	r0, r7, r3
 8009b8c:	0180      	lsls	r0, r0, #6
 8009b8e:	4458      	add	r0, fp
 8009b90:	4b23      	ldr	r3, [pc, #140]	; (8009c20 <BackEndTask+0x374>)
 8009b92:	18c0      	adds	r0, r0, r3
 8009b94:	4642      	mov	r2, r8
 8009b96:	2100      	movs	r1, #0
 8009b98:	f009 fa0a 	bl	8012fb0 <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8009b9c:	9a00      	ldr	r2, [sp, #0]
 8009b9e:	3204      	adds	r2, #4
 8009ba0:	4643      	mov	r3, r8
 8009ba2:	1ad2      	subs	r2, r2, r3
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	0030      	movs	r0, r6
 8009ba8:	f009 fa02 	bl	8012fb0 <memset>
				}
				
				/* A.6.2 Advance buffer index */
				UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009bac:	4653      	mov	r3, sl
 8009bae:	3301      	adds	r3, #1
 8009bb0:	464a      	mov	r2, r9
 8009bb2:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;
 8009bb4:	4a22      	ldr	r2, [pc, #136]	; (8009c40 <BackEndTask+0x394>)
 8009bb6:	8813      	ldrh	r3, [r2, #0]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	8013      	strh	r3, [r2, #0]
 8009bbc:	e014      	b.n	8009be8 <BackEndTask+0x33c>
			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
					portStatus[port] =FREE;
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 8009bbe:	0028      	movs	r0, r5
 8009bc0:	f003 fbe4 	bl	800d38c <GetUart>
 8009bc4:	2240      	movs	r2, #64	; 0x40
 8009bc6:	0031      	movs	r1, r6
 8009bc8:	f008 faba 	bl	8012140 <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 8009bcc:	3501      	adds	r5, #1
 8009bce:	b2ed      	uxtb	r5, r5
 8009bd0:	3701      	adds	r7, #1
 8009bd2:	3640      	adds	r6, #64	; 0x40
 8009bd4:	2d07      	cmp	r5, #7
 8009bd6:	d016      	beq.n	8009c06 <BackEndTask+0x35a>
 8009bd8:	1e7c      	subs	r4, r7, #1
 8009bda:	4b13      	ldr	r3, [pc, #76]	; (8009c28 <BackEndTask+0x37c>)
 8009bdc:	469c      	mov	ip, r3
 8009bde:	4464      	add	r4, ip
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 8009be0:	7823      	ldrb	r3, [r4, #0]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d800      	bhi.n	8009be8 <BackEndTask+0x33c>
 8009be6:	e671      	b.n	80098cc <BackEndTask+0x20>
 8009be8:	1ebb      	subs	r3, r7, #2
 8009bea:	4a16      	ldr	r2, [pc, #88]	; (8009c44 <BackEndTask+0x398>)
 8009bec:	4694      	mov	ip, r2
 8009bee:	4463      	add	r3, ip
			if(MsgDMAStopped[port - 1] == true){
 8009bf0:	781a      	ldrb	r2, [r3, #0]
 8009bf2:	2a00      	cmp	r2, #0
 8009bf4:	d0ea      	beq.n	8009bcc <BackEndTask+0x320>
				MsgDMAStopped[port - 1] = false;
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	701a      	strb	r2, [r3, #0]
				if(portStatus[port] == OVERRUN)
 8009bfa:	7823      	ldrb	r3, [r4, #0]
 8009bfc:	2b05      	cmp	r3, #5
 8009bfe:	d1de      	bne.n	8009bbe <BackEndTask+0x312>
					portStatus[port] =FREE;
 8009c00:	2300      	movs	r3, #0
 8009c02:	7023      	strb	r3, [r4, #0]
 8009c04:	e7db      	b.n	8009bbe <BackEndTask+0x312>
			}
		}

		taskYIELD();
 8009c06:	f005 fbbd 	bl	800f384 <vPortYield>
 8009c0a:	4e05      	ldr	r6, [pc, #20]	; (8009c20 <BackEndTask+0x374>)
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
 8009c0c:	2702      	movs	r7, #2
		for(port =1; port <= NumOfPorts; port++){
 8009c0e:	2501      	movs	r5, #1
 8009c10:	e7e2      	b.n	8009bd8 <BackEndTask+0x32c>
 8009c12:	46c0      	nop			; (mov r8, r8)
 8009c14:	20000d08 	.word	0x20000d08
 8009c18:	20001450 	.word	0x20001450
 8009c1c:	200069c4 	.word	0x200069c4
 8009c20:	200012d0 	.word	0x200012d0
 8009c24:	20000a77 	.word	0x20000a77
 8009c28:	200010f8 	.word	0x200010f8
 8009c2c:	20001504 	.word	0x20001504
 8009c30:	03fffffe 	.word	0x03fffffe
 8009c34:	20001458 	.word	0x20001458
 8009c38:	20000f30 	.word	0x20000f30
 8009c3c:	200015f0 	.word	0x200015f0
 8009c40:	20001798 	.word	0x20001798
 8009c44:	200012c8 	.word	0x200012c8

08009c48 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8009c48:	2001      	movs	r0, #1
 8009c4a:	4770      	bx	lr

08009c4c <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8009c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c4e:	46de      	mov	lr, fp
 8009c50:	4657      	mov	r7, sl
 8009c52:	464e      	mov	r6, r9
 8009c54:	4645      	mov	r5, r8
 8009c56:	b5e0      	push	{r5, r6, r7, lr}
 8009c58:	b097      	sub	sp, #92	; 0x5c
	port =(int8_t )(unsigned )argument;
 8009c5a:	b2c3      	uxtb	r3, r0
 8009c5c:	9308      	str	r3, [sp, #32]
 8009c5e:	23ff      	movs	r3, #255	; 0xff
 8009c60:	4003      	ands	r3, r0
 8009c62:	469b      	mov	fp, r3
		if(messageLength[port - 1]){
 8009c64:	1e5d      	subs	r5, r3, #1
 8009c66:	00eb      	lsls	r3, r5, #3
 8009c68:	1b5b      	subs	r3, r3, r5
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	0019      	movs	r1, r3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009c6e:	4ad6      	ldr	r2, [pc, #856]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009c70:	18d3      	adds	r3, r2, r3
 8009c72:	9307      	str	r3, [sp, #28]
	HAL_StatusTypeDef status =HAL_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	930a      	str	r3, [sp, #40]	; 0x28
	BOS_Status result =BOS_OK;
 8009c78:	2700      	movs	r7, #0
			if(cMessage[port - 1][2] >> 7){
 8009c7a:	000e      	movs	r6, r1
 8009c7c:	1853      	adds	r3, r2, r1
 8009c7e:	3302      	adds	r3, #2
 8009c80:	9309      	str	r3, [sp, #36]	; 0x24
 8009c82:	468a      	mov	sl, r1
 8009c84:	e026      	b.n	8009cd4 <PxMessagingTask+0x88>
				longMessage =1;
 8009c86:	4ad1      	ldr	r2, [pc, #836]	; (8009fcc <PxMessagingTask+0x380>)
 8009c88:	2001      	movs	r0, #1
 8009c8a:	7010      	strb	r0, [r2, #0]
 8009c8c:	e033      	b.n	8009cf6 <PxMessagingTask+0xaa>
				code =cMessage[port - 1][3 + shift];
 8009c8e:	4bce      	ldr	r3, [pc, #824]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009c90:	199b      	adds	r3, r3, r6
 8009c92:	189a      	adds	r2, r3, r2
 8009c94:	78d3      	ldrb	r3, [r2, #3]
 8009c96:	4698      	mov	r8, r3
 8009c98:	e04a      	b.n	8009d30 <PxMessagingTask+0xe4>
				if(code == CODE_UPDATE){ // Remote bootloader update
 8009c9a:	4643      	mov	r3, r8
 8009c9c:	2b19      	cmp	r3, #25
 8009c9e:	d063      	beq.n	8009d68 <PxMessagingTask+0x11c>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 8009ca0:	2b1a      	cmp	r3, #26
 8009ca2:	d06b      	beq.n	8009d7c <PxMessagingTask+0x130>
		if(result == BOS_ERR_UnknownMessage){
 8009ca4:	2f01      	cmp	r7, #1
 8009ca6:	d101      	bne.n	8009cac <PxMessagingTask+0x60>
 8009ca8:	f001 fabe 	bl	800b228 <PxMessagingTask+0x15dc>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009cac:	4cc8      	ldr	r4, [pc, #800]	; (8009fd0 <PxMessagingTask+0x384>)
 8009cae:	5d62      	ldrb	r2, [r4, r5]
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	9807      	ldr	r0, [sp, #28]
 8009cb4:	f009 f97c 	bl	8012fb0 <memset>
		messageLength[port - 1] =0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	5563      	strb	r3, [r4, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 8009cbc:	4bc5      	ldr	r3, [pc, #788]	; (8009fd4 <PxMessagingTask+0x388>)
 8009cbe:	465a      	mov	r2, fp
 8009cc0:	5c9b      	ldrb	r3, [r3, r2]
 8009cc2:	3b02      	subs	r3, #2
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d903      	bls.n	8009cd0 <PxMessagingTask+0x84>
			portStatus[port] =FREE;
 8009cc8:	4bc2      	ldr	r3, [pc, #776]	; (8009fd4 <PxMessagingTask+0x388>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	4659      	mov	r1, fp
 8009cce:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8009cd0:	f005 fb58 	bl	800f384 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	4249      	negs	r1, r1
 8009cd8:	2001      	movs	r0, #1
 8009cda:	f005 f879 	bl	800edd0 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 8009cde:	4bbc      	ldr	r3, [pc, #752]	; (8009fd0 <PxMessagingTask+0x384>)
 8009ce0:	5d59      	ldrb	r1, [r3, r5]
 8009ce2:	2900      	cmp	r1, #0
 8009ce4:	d0de      	beq.n	8009ca4 <PxMessagingTask+0x58>
			if(cMessage[port - 1][2] >> 7){
 8009ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	b25a      	sxtb	r2, r3
 8009cec:	2a00      	cmp	r2, #0
 8009cee:	dbca      	blt.n	8009c86 <PxMessagingTask+0x3a>
				longMessage =0;
 8009cf0:	4ab6      	ldr	r2, [pc, #728]	; (8009fcc <PxMessagingTask+0x380>)
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	7010      	strb	r0, [r2, #0]
			dst =cMessage[port - 1][0];
 8009cf6:	4ab4      	ldr	r2, [pc, #720]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009cf8:	5cb0      	ldrb	r0, [r6, r2]
 8009cfa:	4681      	mov	r9, r0
			src =cMessage[port - 1][1];
 8009cfc:	1992      	adds	r2, r2, r6
 8009cfe:	7852      	ldrb	r2, [r2, #1]
 8009d00:	9204      	str	r2, [sp, #16]
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 8009d02:	2201      	movs	r2, #1
 8009d04:	401a      	ands	r2, r3
			shift =0;
 8009d06:	9206      	str	r2, [sp, #24]
			BOS.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03); // 3rd-4th bits Trace
 8009d08:	4cb3      	ldr	r4, [pc, #716]	; (8009fd8 <PxMessagingTask+0x38c>)
 8009d0a:	0718      	lsls	r0, r3, #28
 8009d0c:	0f80      	lsrs	r0, r0, #30
 8009d0e:	71e0      	strb	r0, [r4, #7]
			BOS.response =(cMessage[port - 1][2]) & 0x60; // 6th-7th bits Response mode
 8009d10:	2060      	movs	r0, #96	; 0x60
 8009d12:	4018      	ands	r0, r3
 8009d14:	71a0      	strb	r0, [r4, #6]
			if(extendCode == true){
 8009d16:	079b      	lsls	r3, r3, #30
 8009d18:	d5b9      	bpl.n	8009c8e <PxMessagingTask+0x42>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8009d1a:	4bab      	ldr	r3, [pc, #684]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009d1c:	199b      	adds	r3, r3, r6
 8009d1e:	189b      	adds	r3, r3, r2
 8009d20:	7918      	ldrb	r0, [r3, #4]
 8009d22:	0200      	lsls	r0, r0, #8
 8009d24:	78db      	ldrb	r3, [r3, #3]
 8009d26:	181b      	adds	r3, r3, r0
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	4698      	mov	r8, r3
				++shift;
 8009d2c:	1c53      	adds	r3, r2, #1
 8009d2e:	9306      	str	r3, [sp, #24]
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8009d30:	464b      	mov	r3, r9
 8009d32:	3b01      	subs	r3, #1
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	2bfc      	cmp	r3, #252	; 0xfc
 8009d38:	d901      	bls.n	8009d3e <PxMessagingTask+0xf2>
 8009d3a:	f001 faae 	bl	800b29a <PxMessagingTask+0x164e>
 8009d3e:	4ba7      	ldr	r3, [pc, #668]	; (8009fdc <PxMessagingTask+0x390>)
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	454b      	cmp	r3, r9
 8009d44:	d101      	bne.n	8009d4a <PxMessagingTask+0xfe>
 8009d46:	f001 faa8 	bl	800b29a <PxMessagingTask+0x164e>
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d101      	bne.n	8009d52 <PxMessagingTask+0x106>
 8009d4e:	f001 fa9d 	bl	800b28c <PxMessagingTask+0x1640>
				ForwardReceivedMessage(port);
 8009d52:	9808      	ldr	r0, [sp, #32]
 8009d54:	f7ff fc4e 	bl	80095f4 <ForwardReceivedMessage>
				if(BOS.trace)
 8009d58:	4b9f      	ldr	r3, [pc, #636]	; (8009fd8 <PxMessagingTask+0x38c>)
 8009d5a:	79db      	ldrb	r3, [r3, #7]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d09c      	beq.n	8009c9a <PxMessagingTask+0x4e>
					indMode =IND_SHORT_BLINK;
 8009d60:	4b9f      	ldr	r3, [pc, #636]	; (8009fe0 <PxMessagingTask+0x394>)
 8009d62:	2203      	movs	r2, #3
 8009d64:	701a      	strb	r2, [r3, #0]
 8009d66:	e798      	b.n	8009c9a <PxMessagingTask+0x4e>
					Delay_ms(100);
 8009d68:	2064      	movs	r0, #100	; 0x64
 8009d6a:	f005 fc89 	bl	800f680 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8009d6e:	2300      	movs	r3, #0
 8009d70:	9a08      	ldr	r2, [sp, #32]
 8009d72:	4649      	mov	r1, r9
 8009d74:	9804      	ldr	r0, [sp, #16]
 8009d76:	f7f9 fee9 	bl	8003b4c <remoteBootloaderUpdate>
 8009d7a:	e793      	b.n	8009ca4 <PxMessagingTask+0x58>
					Delay_ms(100);
 8009d7c:	2064      	movs	r0, #100	; 0x64
 8009d7e:	f005 fc7f 	bl	800f680 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8009d82:	4b91      	ldr	r3, [pc, #580]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009d84:	199b      	adds	r3, r3, r6
 8009d86:	9a06      	ldr	r2, [sp, #24]
 8009d88:	5c9b      	ldrb	r3, [r3, r2]
 8009d8a:	9a08      	ldr	r2, [sp, #32]
 8009d8c:	4649      	mov	r1, r9
 8009d8e:	9804      	ldr	r0, [sp, #16]
 8009d90:	f7f9 fedc 	bl	8003b4c <remoteBootloaderUpdate>
 8009d94:	e786      	b.n	8009ca4 <PxMessagingTask+0x58>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8009d96:	4b8c      	ldr	r3, [pc, #560]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009d98:	199b      	adds	r3, r3, r6
 8009d9a:	1859      	adds	r1, r3, r1
 8009d9c:	3901      	subs	r1, #1
 8009d9e:	780b      	ldrb	r3, [r1, #0]
 8009da0:	4a90      	ldr	r2, [pc, #576]	; (8009fe4 <PxMessagingTask+0x398>)
 8009da2:	7812      	ldrb	r2, [r2, #0]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d113      	bne.n	8009dd0 <PxMessagingTask+0x184>
					result =BOS_ERR_MSG_Reflection;
 8009da8:	2703      	movs	r7, #3
				if(result == BOS_OK){
 8009daa:	2f00      	cmp	r7, #0
 8009dac:	d000      	beq.n	8009db0 <PxMessagingTask+0x164>
 8009dae:	e779      	b.n	8009ca4 <PxMessagingTask+0x58>
				shift +=4;
 8009db0:	9c06      	ldr	r4, [sp, #24]
 8009db2:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 8009db4:	4b86      	ldr	r3, [pc, #536]	; (8009fd0 <PxMessagingTask+0x384>)
 8009db6:	5d59      	ldrb	r1, [r3, r5]
 8009db8:	1b0a      	subs	r2, r1, r4
 8009dba:	b2d3      	uxtb	r3, r2
 8009dbc:	9306      	str	r3, [sp, #24]
					switch(code){
 8009dbe:	4643      	mov	r3, r8
 8009dc0:	2b24      	cmp	r3, #36	; 0x24
 8009dc2:	d901      	bls.n	8009dc8 <PxMessagingTask+0x17c>
 8009dc4:	f001 fa04 	bl	800b1d0 <PxMessagingTask+0x1584>
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4a87      	ldr	r2, [pc, #540]	; (8009fe8 <PxMessagingTask+0x39c>)
 8009dcc:	58d3      	ldr	r3, [r2, r3]
 8009dce:	469f      	mov	pc, r3
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8009dd0:	4a84      	ldr	r2, [pc, #528]	; (8009fe4 <PxMessagingTask+0x398>)
 8009dd2:	7013      	strb	r3, [r2, #0]
 8009dd4:	4a85      	ldr	r2, [pc, #532]	; (8009fec <PxMessagingTask+0x3a0>)
 8009dd6:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8009dd8:	9908      	ldr	r1, [sp, #32]
 8009dda:	20ff      	movs	r0, #255	; 0xff
 8009ddc:	f7ff fc2a 	bl	8009634 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8009de0:	4b7b      	ldr	r3, [pc, #492]	; (8009fd0 <PxMessagingTask+0x384>)
 8009de2:	5d5a      	ldrb	r2, [r3, r5]
 8009de4:	4b78      	ldr	r3, [pc, #480]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009de6:	199b      	adds	r3, r3, r6
 8009de8:	189b      	adds	r3, r3, r2
 8009dea:	3b01      	subs	r3, #1
 8009dec:	2200      	movs	r2, #0
 8009dee:	701a      	strb	r2, [r3, #0]
 8009df0:	e7db      	b.n	8009daa <PxMessagingTask+0x15e>
							for(p =0; p < numOfParams; p++){
 8009df2:	9b06      	ldr	r3, [sp, #24]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d01f      	beq.n	8009e38 <PxMessagingTask+0x1ec>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 8009df8:	9b04      	ldr	r3, [sp, #16]
 8009dfa:	1e58      	subs	r0, r3, #1
 8009dfc:	0042      	lsls	r2, r0, #1
 8009dfe:	4b7c      	ldr	r3, [pc, #496]	; (8009ff0 <PxMessagingTask+0x3a4>)
 8009e00:	5ad3      	ldrh	r3, [r2, r3]
 8009e02:	4652      	mov	r2, sl
 8009e04:	18a1      	adds	r1, r4, r2
 8009e06:	4a70      	ldr	r2, [pc, #448]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009e08:	1889      	adds	r1, r1, r2
 8009e0a:	3201      	adds	r2, #1
 8009e0c:	4452      	add	r2, sl
 8009e0e:	1914      	adds	r4, r2, r4
 8009e10:	9a06      	ldr	r2, [sp, #24]
 8009e12:	3a01      	subs	r2, #1
 8009e14:	b2d2      	uxtb	r2, r2
 8009e16:	18a4      	adds	r4, r4, r2
 8009e18:	2780      	movs	r7, #128	; 0x80
 8009e1a:	023f      	lsls	r7, r7, #8
 8009e1c:	4684      	mov	ip, r0
 8009e1e:	780a      	ldrb	r2, [r1, #0]
 8009e20:	3a01      	subs	r2, #1
 8009e22:	0038      	movs	r0, r7
 8009e24:	4110      	asrs	r0, r2
 8009e26:	4303      	orrs	r3, r0
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	3101      	adds	r1, #1
							for(p =0; p < numOfParams; p++){
 8009e2c:	42a1      	cmp	r1, r4
 8009e2e:	d1f6      	bne.n	8009e1e <PxMessagingTask+0x1d2>
 8009e30:	4660      	mov	r0, ip
 8009e32:	0040      	lsls	r0, r0, #1
 8009e34:	4a6e      	ldr	r2, [pc, #440]	; (8009ff0 <PxMessagingTask+0x3a4>)
 8009e36:	5283      	strh	r3, [r0, r2]
							responseStatus =BOS_OK;
 8009e38:	4b6e      	ldr	r3, [pc, #440]	; (8009ff4 <PxMessagingTask+0x3a8>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	701a      	strb	r2, [r3, #0]
							break;
 8009e3e:	2700      	movs	r7, #0
 8009e40:	e734      	b.n	8009cac <PxMessagingTask+0x60>
							indMode =IND_PING;
 8009e42:	4b67      	ldr	r3, [pc, #412]	; (8009fe0 <PxMessagingTask+0x394>)
 8009e44:	2201      	movs	r2, #1
 8009e46:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8009e48:	200a      	movs	r0, #10
 8009e4a:	f003 fbee 	bl	800d62a <osDelay>
							if(BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 8009e4e:	4b62      	ldr	r3, [pc, #392]	; (8009fd8 <PxMessagingTask+0x38c>)
 8009e50:	799b      	ldrb	r3, [r3, #6]
 8009e52:	2240      	movs	r2, #64	; 0x40
 8009e54:	4393      	bics	r3, r2
 8009e56:	2700      	movs	r7, #0
 8009e58:	2b20      	cmp	r3, #32
 8009e5a:	d000      	beq.n	8009e5e <PxMessagingTask+0x212>
 8009e5c:	e726      	b.n	8009cac <PxMessagingTask+0x60>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 8009e5e:	003a      	movs	r2, r7
 8009e60:	2102      	movs	r1, #2
 8009e62:	9804      	ldr	r0, [sp, #16]
 8009e64:	f7ff fc2e 	bl	80096c4 <SendMessageToModule>
 8009e68:	e720      	b.n	8009cac <PxMessagingTask+0x60>
							if(!moduleAlias[myID][0])
 8009e6a:	4b5c      	ldr	r3, [pc, #368]	; (8009fdc <PxMessagingTask+0x390>)
 8009e6c:	781a      	ldrb	r2, [r3, #0]
 8009e6e:	0093      	lsls	r3, r2, #2
 8009e70:	189b      	adds	r3, r3, r2
 8009e72:	005b      	lsls	r3, r3, #1
 8009e74:	4a60      	ldr	r2, [pc, #384]	; (8009ff8 <PxMessagingTask+0x3ac>)
 8009e76:	5c9b      	ldrb	r3, [r3, r2]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d117      	bne.n	8009eac <PxMessagingTask+0x260>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 8009e7c:	9a04      	ldr	r2, [sp, #16]
 8009e7e:	495f      	ldr	r1, [pc, #380]	; (8009ffc <PxMessagingTask+0x3b0>)
 8009e80:	485f      	ldr	r0, [pc, #380]	; (800a000 <PxMessagingTask+0x3b4>)
 8009e82:	f009 fa8f 	bl	80133a4 <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 8009e86:	4c5e      	ldr	r4, [pc, #376]	; (800a000 <PxMessagingTask+0x3b4>)
 8009e88:	0020      	movs	r0, r4
 8009e8a:	f7f6 f945 	bl	8000118 <strlen>
 8009e8e:	b282      	uxth	r2, r0
 8009e90:	4b5c      	ldr	r3, [pc, #368]	; (800a004 <PxMessagingTask+0x3b8>)
 8009e92:	7818      	ldrb	r0, [r3, #0]
 8009e94:	2301      	movs	r3, #1
 8009e96:	425b      	negs	r3, r3
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	3333      	adds	r3, #51	; 0x33
 8009e9c:	0021      	movs	r1, r4
 8009e9e:	f003 fa97 	bl	800d3d0 <writePxMutex>
							responseStatus =BOS_OK;
 8009ea2:	4b54      	ldr	r3, [pc, #336]	; (8009ff4 <PxMessagingTask+0x3a8>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	701a      	strb	r2, [r3, #0]
							break;
 8009ea8:	2700      	movs	r7, #0
 8009eaa:	e6ff      	b.n	8009cac <PxMessagingTask+0x60>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 8009eac:	230a      	movs	r3, #10
 8009eae:	9904      	ldr	r1, [sp, #16]
 8009eb0:	434b      	muls	r3, r1
 8009eb2:	4a51      	ldr	r2, [pc, #324]	; (8009ff8 <PxMessagingTask+0x3ac>)
 8009eb4:	189b      	adds	r3, r3, r2
 8009eb6:	000a      	movs	r2, r1
 8009eb8:	4953      	ldr	r1, [pc, #332]	; (800a008 <PxMessagingTask+0x3bc>)
 8009eba:	4851      	ldr	r0, [pc, #324]	; (800a000 <PxMessagingTask+0x3b4>)
 8009ebc:	f009 fa72 	bl	80133a4 <sprintf>
 8009ec0:	e7e1      	b.n	8009e86 <PxMessagingTask+0x23a>
							IND_ON();
 8009ec2:	2180      	movs	r1, #128	; 0x80
 8009ec4:	2090      	movs	r0, #144	; 0x90
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	0109      	lsls	r1, r1, #4
 8009eca:	05c0      	lsls	r0, r0, #23
 8009ecc:	f007 f842 	bl	8010f54 <HAL_GPIO_WritePin>
							break;
 8009ed0:	2700      	movs	r7, #0
 8009ed2:	e6eb      	b.n	8009cac <PxMessagingTask+0x60>
							IND_OFF();
 8009ed4:	2180      	movs	r1, #128	; 0x80
 8009ed6:	2090      	movs	r0, #144	; 0x90
 8009ed8:	2200      	movs	r2, #0
 8009eda:	0109      	lsls	r1, r1, #4
 8009edc:	05c0      	lsls	r0, r0, #23
 8009ede:	f007 f839 	bl	8010f54 <HAL_GPIO_WritePin>
							break;
 8009ee2:	2700      	movs	r7, #0
 8009ee4:	e6e2      	b.n	8009cac <PxMessagingTask+0x60>
							IND_toggle();
 8009ee6:	2180      	movs	r1, #128	; 0x80
 8009ee8:	2090      	movs	r0, #144	; 0x90
 8009eea:	0109      	lsls	r1, r1, #4
 8009eec:	05c0      	lsls	r0, r0, #23
 8009eee:	f007 f837 	bl	8010f60 <HAL_GPIO_TogglePin>
							break;
 8009ef2:	2700      	movs	r7, #0
 8009ef4:	e6da      	b.n	8009cac <PxMessagingTask+0x60>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009ef6:	4f45      	ldr	r7, [pc, #276]	; (800a00c <PxMessagingTask+0x3c0>)
 8009ef8:	00ab      	lsls	r3, r5, #2
 8009efa:	4a33      	ldr	r2, [pc, #204]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009efc:	1992      	adds	r2, r2, r6
 8009efe:	1910      	adds	r0, r2, r4
 8009f00:	7881      	ldrb	r1, [r0, #2]
 8009f02:	468c      	mov	ip, r1
 8009f04:	9904      	ldr	r1, [sp, #16]
 8009f06:	0209      	lsls	r1, r1, #8
 8009f08:	4461      	add	r1, ip
 8009f0a:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8009f0c:	18fb      	adds	r3, r7, r3
 8009f0e:	5d11      	ldrb	r1, [r2, r4]
 8009f10:	0209      	lsls	r1, r1, #8
 8009f12:	7842      	ldrb	r2, [r0, #1]
 8009f14:	1852      	adds	r2, r2, r1
 8009f16:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 8009f18:	4b3d      	ldr	r3, [pc, #244]	; (800a010 <PxMessagingTask+0x3c4>)
 8009f1a:	881b      	ldrh	r3, [r3, #0]
 8009f1c:	4a3d      	ldr	r2, [pc, #244]	; (800a014 <PxMessagingTask+0x3c8>)
 8009f1e:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 8009f20:	0a1b      	lsrs	r3, r3, #8
 8009f22:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8009f24:	9c08      	ldr	r4, [sp, #32]
 8009f26:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 8009f28:	2002      	movs	r0, #2
 8009f2a:	f003 fb7e 	bl	800d62a <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8009f2e:	2303      	movs	r3, #3
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	3308      	adds	r3, #8
 8009f34:	2200      	movs	r2, #0
 8009f36:	2100      	movs	r1, #0
 8009f38:	0020      	movs	r0, r4
 8009f3a:	f7ff f99b 	bl	8009274 <SendMessageFromPort>
							break;
 8009f3e:	2700      	movs	r7, #0
 8009f40:	e6b4      	b.n	8009cac <PxMessagingTask+0x60>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009f42:	4f32      	ldr	r7, [pc, #200]	; (800a00c <PxMessagingTask+0x3c0>)
 8009f44:	00ab      	lsls	r3, r5, #2
 8009f46:	4a20      	ldr	r2, [pc, #128]	; (8009fc8 <PxMessagingTask+0x37c>)
 8009f48:	1992      	adds	r2, r2, r6
 8009f4a:	1910      	adds	r0, r2, r4
 8009f4c:	7881      	ldrb	r1, [r0, #2]
 8009f4e:	468c      	mov	ip, r1
 8009f50:	9904      	ldr	r1, [sp, #16]
 8009f52:	0209      	lsls	r1, r1, #8
 8009f54:	4461      	add	r1, ip
 8009f56:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8009f58:	18fb      	adds	r3, r7, r3
 8009f5a:	5d11      	ldrb	r1, [r2, r4]
 8009f5c:	0209      	lsls	r1, r1, #8
 8009f5e:	7842      	ldrb	r2, [r0, #1]
 8009f60:	1852      	adds	r2, r2, r1
 8009f62:	805a      	strh	r2, [r3, #2]
							responseStatus =BOS_OK;
 8009f64:	4b23      	ldr	r3, [pc, #140]	; (8009ff4 <PxMessagingTask+0x3a8>)
 8009f66:	2200      	movs	r2, #0
 8009f68:	701a      	strb	r2, [r3, #0]
							break;
 8009f6a:	2700      	movs	r7, #0
 8009f6c:	e69e      	b.n	8009cac <PxMessagingTask+0x60>
							ExploreNeighbors(port);
 8009f6e:	9808      	ldr	r0, [sp, #32]
 8009f70:	f7f9 fc24 	bl	80037bc <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 8009f74:	4b1a      	ldr	r3, [pc, #104]	; (8009fe0 <PxMessagingTask+0x394>)
 8009f76:	2202      	movs	r2, #2
 8009f78:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8009f7a:	200a      	movs	r0, #10
 8009f7c:	f003 fb55 	bl	800d62a <osDelay>
 8009f80:	4f22      	ldr	r7, [pc, #136]	; (800a00c <PxMessagingTask+0x3c0>)
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8009f82:	2401      	movs	r4, #1
							temp =0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	9305      	str	r3, [sp, #20]
 8009f88:	e004      	b.n	8009f94 <PxMessagingTask+0x348>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8009f8a:	3401      	adds	r4, #1
 8009f8c:	b2e4      	uxtb	r4, r4
 8009f8e:	3704      	adds	r7, #4
 8009f90:	2c07      	cmp	r4, #7
 8009f92:	d011      	beq.n	8009fb8 <PxMessagingTask+0x36c>
								if(neighbors[p - 1][0]){
 8009f94:	883b      	ldrh	r3, [r7, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d0f7      	beq.n	8009f8a <PxMessagingTask+0x33e>
									messageParams[temp] =p;
 8009f9a:	4a1e      	ldr	r2, [pc, #120]	; (800a014 <PxMessagingTask+0x3c8>)
 8009f9c:	9b05      	ldr	r3, [sp, #20]
 8009f9e:	54d4      	strb	r4, [r2, r3]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8009fa0:	1c58      	adds	r0, r3, #1
 8009fa2:	4694      	mov	ip, r2
 8009fa4:	4460      	add	r0, ip
 8009fa6:	2204      	movs	r2, #4
 8009fa8:	0039      	movs	r1, r7
 8009faa:	f008 fff8 	bl	8012f9e <memcpy>
									temp +=5;
 8009fae:	9b05      	ldr	r3, [sp, #20]
 8009fb0:	3305      	adds	r3, #5
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	9305      	str	r3, [sp, #20]
 8009fb6:	e7e8      	b.n	8009f8a <PxMessagingTask+0x33e>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 8009fb8:	466b      	mov	r3, sp
 8009fba:	8a9a      	ldrh	r2, [r3, #20]
 8009fbc:	210d      	movs	r1, #13
 8009fbe:	9804      	ldr	r0, [sp, #16]
 8009fc0:	f7ff fb80 	bl	80096c4 <SendMessageToModule>
							break;
 8009fc4:	2700      	movs	r7, #0
 8009fc6:	e671      	b.n	8009cac <PxMessagingTask+0x60>
 8009fc8:	20000d08 	.word	0x20000d08
 8009fcc:	20000ef5 	.word	0x20000ef5
 8009fd0:	20000f30 	.word	0x20000f30
 8009fd4:	200010f8 	.word	0x200010f8
 8009fd8:	200069c4 	.word	0x200069c4
 8009fdc:	20001076 	.word	0x20001076
 8009fe0:	20000ef4 	.word	0x20000ef4
 8009fe4:	200015f2 	.word	0x200015f2
 8009fe8:	0801a220 	.word	0x0801a220
 8009fec:	20000cb4 	.word	0x20000cb4
 8009ff0:	20006e40 	.word	0x20006e40
 8009ff4:	20001110 	.word	0x20001110
 8009ff8:	20000f68 	.word	0x20000f68
 8009ffc:	08018ad8 	.word	0x08018ad8
 800a000:	20001748 	.word	0x20001748
 800a004:	20000a77 	.word	0x20000a77
 800a008:	08018aec 	.word	0x08018aec
 800a00c:	20001078 	.word	0x20001078
 800a010:	20000050 	.word	0x20000050
 800a014:	20000f38 	.word	0x20000f38
							temp =numOfParams / 5;
 800a018:	2105      	movs	r1, #5
 800a01a:	9806      	ldr	r0, [sp, #24]
 800a01c:	f7f6 f898 	bl	8000150 <__udivsi3>
 800a020:	b2c2      	uxtb	r2, r0
 800a022:	9205      	str	r2, [sp, #20]
							for(uint8_t k =0; k < temp; k++){
 800a024:	2a00      	cmp	r2, #0
 800a026:	d018      	beq.n	800a05a <PxMessagingTask+0x40e>
 800a028:	4653      	mov	r3, sl
 800a02a:	191f      	adds	r7, r3, r4
 800a02c:	4bd4      	ldr	r3, [pc, #848]	; (800a380 <PxMessagingTask+0x734>)
 800a02e:	18ff      	adds	r7, r7, r3
 800a030:	3305      	adds	r3, #5
 800a032:	4453      	add	r3, sl
 800a034:	191c      	adds	r4, r3, r4
 800a036:	1e53      	subs	r3, r2, #1
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	009a      	lsls	r2, r3, #2
 800a03c:	18d3      	adds	r3, r2, r3
 800a03e:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 800a040:	4bd0      	ldr	r3, [pc, #832]	; (800a384 <PxMessagingTask+0x738>)
 800a042:	4698      	mov	r8, r3
 800a044:	7838      	ldrb	r0, [r7, #0]
 800a046:	3801      	subs	r0, #1
 800a048:	0080      	lsls	r0, r0, #2
 800a04a:	4440      	add	r0, r8
 800a04c:	1c79      	adds	r1, r7, #1
 800a04e:	2204      	movs	r2, #4
 800a050:	f008 ffa5 	bl	8012f9e <memcpy>
 800a054:	3705      	adds	r7, #5
							for(uint8_t k =0; k < temp; k++){
 800a056:	42bc      	cmp	r4, r7
 800a058:	d1f4      	bne.n	800a044 <PxMessagingTask+0x3f8>
							responseStatus =BOS_OK;
 800a05a:	4bcb      	ldr	r3, [pc, #812]	; (800a388 <PxMessagingTask+0x73c>)
 800a05c:	2200      	movs	r2, #0
 800a05e:	701a      	strb	r2, [r3, #0]
							break;
 800a060:	2700      	movs	r7, #0
 800a062:	e623      	b.n	8009cac <PxMessagingTask+0x60>
 800a064:	4653      	mov	r3, sl
 800a066:	18e3      	adds	r3, r4, r3
 800a068:	4ac5      	ldr	r2, [pc, #788]	; (800a380 <PxMessagingTask+0x734>)
 800a06a:	4698      	mov	r8, r3
 800a06c:	4490      	add	r8, r2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a06e:	2701      	movs	r7, #1
								if(p != port)
 800a070:	9b08      	ldr	r3, [sp, #32]
 800a072:	42bb      	cmp	r3, r7
 800a074:	d006      	beq.n	800a084 <PxMessagingTask+0x438>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800a076:	0038      	movs	r0, r7
 800a078:	f003 f988 	bl	800d38c <GetUart>
 800a07c:	4643      	mov	r3, r8
 800a07e:	7819      	ldrb	r1, [r3, #0]
 800a080:	f003 fa1e 	bl	800d4c0 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a084:	3701      	adds	r7, #1
 800a086:	b2ff      	uxtb	r7, r7
 800a088:	2301      	movs	r3, #1
 800a08a:	469c      	mov	ip, r3
 800a08c:	44e0      	add	r8, ip
 800a08e:	2f07      	cmp	r7, #7
 800a090:	d1ee      	bne.n	800a070 <PxMessagingTask+0x424>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800a092:	9808      	ldr	r0, [sp, #32]
 800a094:	f003 f97a 	bl	800d38c <GetUart>
 800a098:	4bb9      	ldr	r3, [pc, #740]	; (800a380 <PxMessagingTask+0x734>)
 800a09a:	199b      	adds	r3, r3, r6
 800a09c:	191c      	adds	r4, r3, r4
 800a09e:	7aa1      	ldrb	r1, [r4, #10]
 800a0a0:	f003 fa0e 	bl	800d4c0 <SwapUartPins>
							break;
 800a0a4:	2700      	movs	r7, #0
 800a0a6:	e601      	b.n	8009cac <PxMessagingTask+0x60>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a0a8:	4bb5      	ldr	r3, [pc, #724]	; (800a380 <PxMessagingTask+0x734>)
 800a0aa:	199b      	adds	r3, r3, r6
 800a0ac:	5d1b      	ldrb	r3, [r3, r4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d109      	bne.n	800a0c6 <PxMessagingTask+0x47a>
								myID =cMessage[port - 1][1 + shift];
 800a0b2:	2238      	movs	r2, #56	; 0x38
 800a0b4:	436a      	muls	r2, r5
 800a0b6:	4bb2      	ldr	r3, [pc, #712]	; (800a380 <PxMessagingTask+0x734>)
 800a0b8:	189b      	adds	r3, r3, r2
 800a0ba:	191c      	adds	r4, r3, r4
 800a0bc:	7862      	ldrb	r2, [r4, #1]
 800a0be:	4bb3      	ldr	r3, [pc, #716]	; (800a38c <PxMessagingTask+0x740>)
 800a0c0:	701a      	strb	r2, [r3, #0]
 800a0c2:	2700      	movs	r7, #0
 800a0c4:	e5f2      	b.n	8009cac <PxMessagingTask+0x60>
 800a0c6:	2700      	movs	r7, #0
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d000      	beq.n	800a0ce <PxMessagingTask+0x482>
 800a0cc:	e5ee      	b.n	8009cac <PxMessagingTask+0x60>
								messageParams[0] =0; /* change own ID */
 800a0ce:	49b0      	ldr	r1, [pc, #704]	; (800a390 <PxMessagingTask+0x744>)
 800a0d0:	700f      	strb	r7, [r1, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800a0d2:	2238      	movs	r2, #56	; 0x38
 800a0d4:	436a      	muls	r2, r5
 800a0d6:	4baa      	ldr	r3, [pc, #680]	; (800a380 <PxMessagingTask+0x734>)
 800a0d8:	189b      	adds	r3, r3, r2
 800a0da:	191b      	adds	r3, r3, r4
 800a0dc:	785a      	ldrb	r2, [r3, #1]
 800a0de:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800a0e0:	7898      	ldrb	r0, [r3, #2]
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	330d      	adds	r3, #13
 800a0e8:	003a      	movs	r2, r7
 800a0ea:	0039      	movs	r1, r7
 800a0ec:	f7ff f8c2 	bl	8009274 <SendMessageFromPort>
 800a0f0:	e5dc      	b.n	8009cac <PxMessagingTask+0x60>
							if(longMessage){
 800a0f2:	4ba8      	ldr	r3, [pc, #672]	; (800a394 <PxMessagingTask+0x748>)
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d011      	beq.n	800a11e <PxMessagingTask+0x4d2>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a0fa:	4ba7      	ldr	r3, [pc, #668]	; (800a398 <PxMessagingTask+0x74c>)
 800a0fc:	4698      	mov	r8, r3
 800a0fe:	881f      	ldrh	r7, [r3, #0]
 800a100:	48a6      	ldr	r0, [pc, #664]	; (800a39c <PxMessagingTask+0x750>)
 800a102:	1838      	adds	r0, r7, r0
 800a104:	4454      	add	r4, sl
 800a106:	499e      	ldr	r1, [pc, #632]	; (800a380 <PxMessagingTask+0x734>)
 800a108:	1861      	adds	r1, r4, r1
 800a10a:	9c06      	ldr	r4, [sp, #24]
 800a10c:	0022      	movs	r2, r4
 800a10e:	f008 ff46 	bl	8012f9e <memcpy>
								longMessageLastPtr +=numOfParams;
 800a112:	46a4      	mov	ip, r4
 800a114:	4467      	add	r7, ip
 800a116:	4643      	mov	r3, r8
 800a118:	801f      	strh	r7, [r3, #0]
 800a11a:	2700      	movs	r7, #0
 800a11c:	e5c6      	b.n	8009cac <PxMessagingTask+0x60>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a11e:	4b9e      	ldr	r3, [pc, #632]	; (800a398 <PxMessagingTask+0x74c>)
 800a120:	4699      	mov	r9, r3
 800a122:	881f      	ldrh	r7, [r3, #0]
 800a124:	4b9d      	ldr	r3, [pc, #628]	; (800a39c <PxMessagingTask+0x750>)
 800a126:	4698      	mov	r8, r3
 800a128:	18f8      	adds	r0, r7, r3
 800a12a:	4454      	add	r4, sl
 800a12c:	4994      	ldr	r1, [pc, #592]	; (800a380 <PxMessagingTask+0x734>)
 800a12e:	1861      	adds	r1, r4, r1
 800a130:	9c06      	ldr	r4, [sp, #24]
 800a132:	0022      	movs	r2, r4
 800a134:	f008 ff33 	bl	8012f9e <memcpy>
								longMessageLastPtr +=numOfParams;
 800a138:	193c      	adds	r4, r7, r4
 800a13a:	b2a4      	uxth	r4, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800a13c:	2116      	movs	r1, #22
 800a13e:	0020      	movs	r0, r4
 800a140:	f7f6 f806 	bl	8000150 <__udivsi3>
 800a144:	4b96      	ldr	r3, [pc, #600]	; (800a3a0 <PxMessagingTask+0x754>)
 800a146:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800a148:	0022      	movs	r2, r4
 800a14a:	4641      	mov	r1, r8
 800a14c:	4895      	ldr	r0, [pc, #596]	; (800a3a4 <PxMessagingTask+0x758>)
 800a14e:	f008 ff26 	bl	8012f9e <memcpy>
								longMessageLastPtr =0;
 800a152:	2700      	movs	r7, #0
 800a154:	464b      	mov	r3, r9
 800a156:	801f      	strh	r7, [r3, #0]
 800a158:	e5a8      	b.n	8009cac <PxMessagingTask+0x60>
							for(p =1; p <= NumOfPorts; p++){
 800a15a:	2401      	movs	r4, #1
							temp =0;
 800a15c:	2300      	movs	r3, #0
 800a15e:	9305      	str	r3, [sp, #20]
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a160:	2780      	movs	r7, #128	; 0x80
 800a162:	023f      	lsls	r7, r7, #8
 800a164:	e003      	b.n	800a16e <PxMessagingTask+0x522>
							for(p =1; p <= NumOfPorts; p++){
 800a166:	3401      	adds	r4, #1
 800a168:	b2e4      	uxtb	r4, r4
 800a16a:	2c07      	cmp	r4, #7
 800a16c:	d00c      	beq.n	800a188 <PxMessagingTask+0x53c>
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a16e:	0020      	movs	r0, r4
 800a170:	f003 f90c 	bl	800d38c <GetUart>
 800a174:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a176:	42bb      	cmp	r3, r7
 800a178:	d1f5      	bne.n	800a166 <PxMessagingTask+0x51a>
									messageParams[temp++] =p;
 800a17a:	9a05      	ldr	r2, [sp, #20]
 800a17c:	1c53      	adds	r3, r2, #1
 800a17e:	4984      	ldr	r1, [pc, #528]	; (800a390 <PxMessagingTask+0x744>)
 800a180:	548c      	strb	r4, [r1, r2]
 800a182:	b2db      	uxtb	r3, r3
 800a184:	9305      	str	r3, [sp, #20]
 800a186:	e7ee      	b.n	800a166 <PxMessagingTask+0x51a>
							SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,temp);
 800a188:	466b      	mov	r3, sp
 800a18a:	8a9a      	ldrh	r2, [r3, #20]
 800a18c:	2114      	movs	r1, #20
 800a18e:	9804      	ldr	r0, [sp, #16]
 800a190:	f7ff fa98 	bl	80096c4 <SendMessageToModule>
							break;
 800a194:	2700      	movs	r7, #0
 800a196:	e589      	b.n	8009cac <PxMessagingTask+0x60>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a198:	4b79      	ldr	r3, [pc, #484]	; (800a380 <PxMessagingTask+0x734>)
 800a19a:	199b      	adds	r3, r3, r6
 800a19c:	5d1a      	ldrb	r2, [r3, r4]
 800a19e:	0612      	lsls	r2, r2, #24
 800a1a0:	191b      	adds	r3, r3, r4
 800a1a2:	78d9      	ldrb	r1, [r3, #3]
 800a1a4:	1852      	adds	r2, r2, r1
 800a1a6:	7859      	ldrb	r1, [r3, #1]
 800a1a8:	0409      	lsls	r1, r1, #16
 800a1aa:	1852      	adds	r2, r2, r1
 800a1ac:	7899      	ldrb	r1, [r3, #2]
 800a1ae:	0209      	lsls	r1, r1, #8
 800a1b0:	1852      	adds	r2, r2, r1
 800a1b2:	920b      	str	r2, [sp, #44]	; 0x2c
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a1b4:	791b      	ldrb	r3, [r3, #4]
 800a1b6:	2bff      	cmp	r3, #255	; 0xff
 800a1b8:	d01b      	beq.n	800a1f2 <PxMessagingTask+0x5a6>
								for(p =0; p < numOfParams; p++){
 800a1ba:	9b06      	ldr	r3, [sp, #24]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d015      	beq.n	800a1ec <PxMessagingTask+0x5a0>
 800a1c0:	4653      	mov	r3, sl
 800a1c2:	1d1f      	adds	r7, r3, #4
 800a1c4:	193f      	adds	r7, r7, r4
 800a1c6:	4b6e      	ldr	r3, [pc, #440]	; (800a380 <PxMessagingTask+0x734>)
 800a1c8:	18ff      	adds	r7, r7, r3
 800a1ca:	3305      	adds	r3, #5
 800a1cc:	4453      	add	r3, sl
 800a1ce:	191c      	adds	r4, r3, r4
 800a1d0:	9b06      	ldr	r3, [sp, #24]
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	18e4      	adds	r4, r4, r3
									temp =cMessage[port - 1][4 + shift + p];
 800a1d8:	783b      	ldrb	r3, [r7, #0]
 800a1da:	9305      	str	r3, [sp, #20]
									if(temp > 0 && temp <= NumOfPorts){
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	2b05      	cmp	r3, #5
 800a1e0:	d914      	bls.n	800a20c <PxMessagingTask+0x5c0>
 800a1e2:	3701      	adds	r7, #1
								for(p =0; p < numOfParams; p++){
 800a1e4:	42a7      	cmp	r7, r4
 800a1e6:	d1f7      	bne.n	800a1d8 <PxMessagingTask+0x58c>
 800a1e8:	2700      	movs	r7, #0
 800a1ea:	e55f      	b.n	8009cac <PxMessagingTask+0x60>
							temp =temp32 =0;
 800a1ec:	9305      	str	r3, [sp, #20]
								for(p =0; p < numOfParams; p++){
 800a1ee:	2700      	movs	r7, #0
 800a1f0:	e55c      	b.n	8009cac <PxMessagingTask+0x60>
								for(p =1; p <= NumOfPorts; p++){
 800a1f2:	2401      	movs	r4, #1
									UpdateBaudrate(p,temp32);
 800a1f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1f6:	0020      	movs	r0, r4
 800a1f8:	f003 f958 	bl	800d4ac <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800a1fc:	3401      	adds	r4, #1
 800a1fe:	b2e4      	uxtb	r4, r4
 800a200:	2c07      	cmp	r4, #7
 800a202:	d1f7      	bne.n	800a1f4 <PxMessagingTask+0x5a8>
							temp =temp32 =0;
 800a204:	2300      	movs	r3, #0
 800a206:	9305      	str	r3, [sp, #20]
 800a208:	001f      	movs	r7, r3
 800a20a:	e54f      	b.n	8009cac <PxMessagingTask+0x60>
										UpdateBaudrate(temp,temp32);
 800a20c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a20e:	9805      	ldr	r0, [sp, #20]
 800a210:	f003 f94c 	bl	800d4ac <UpdateBaudrate>
 800a214:	e7e5      	b.n	800a1e2 <PxMessagingTask+0x596>
							SaveToRO();
 800a216:	f001 f901 	bl	800b41c <SaveToRO>
							SaveEEportsDir();
 800a21a:	f7f9 f8ed 	bl	80033f8 <SaveEEportsDir>
							indMode =IND_PING;
 800a21e:	4b62      	ldr	r3, [pc, #392]	; (800a3a8 <PxMessagingTask+0x75c>)
 800a220:	2201      	movs	r2, #1
 800a222:	701a      	strb	r2, [r3, #0]
							break;
 800a224:	2700      	movs	r7, #0
 800a226:	e541      	b.n	8009cac <PxMessagingTask+0x60>
							ClearEEportsDir();
 800a228:	f7f9 f9d0 	bl	80035cc <ClearEEportsDir>
							ClearROtopology();
 800a22c:	f001 f9fe 	bl	800b62c <ClearROtopology>
							osDelay(100);
 800a230:	2064      	movs	r0, #100	; 0x64
 800a232:	f003 f9fa 	bl	800d62a <osDelay>
							indMode =IND_TOPOLOGY;
 800a236:	4b5c      	ldr	r3, [pc, #368]	; (800a3a8 <PxMessagingTask+0x75c>)
 800a238:	2202      	movs	r2, #2
 800a23a:	701a      	strb	r2, [r3, #0]
							break;
 800a23c:	2700      	movs	r7, #0
 800a23e:	e535      	b.n	8009cac <PxMessagingTask+0x60>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a240:	f003 fb08 	bl	800d854 <FreeRTOS_CLIGetOutputBuffer>
 800a244:	900b      	str	r0, [sp, #44]	; 0x2c
							if(dst == BOS_BROADCAST)
 800a246:	464b      	mov	r3, r9
 800a248:	2bff      	cmp	r3, #255	; 0xff
 800a24a:	d026      	beq.n	800a29a <PxMessagingTask+0x64e>
							else if(dst == BOS_MULTICAST)
 800a24c:	2bfe      	cmp	r3, #254	; 0xfe
 800a24e:	d02d      	beq.n	800a2ac <PxMessagingTask+0x660>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a250:	4454      	add	r4, sl
 800a252:	494b      	ldr	r1, [pc, #300]	; (800a380 <PxMessagingTask+0x734>)
 800a254:	1861      	adds	r1, r4, r1
 800a256:	9a06      	ldr	r2, [sp, #24]
 800a258:	4854      	ldr	r0, [pc, #336]	; (800a3ac <PxMessagingTask+0x760>)
 800a25a:	f008 fea0 	bl	8012f9e <memcpy>
								temp =PcPort;
 800a25e:	4c54      	ldr	r4, [pc, #336]	; (800a3b0 <PxMessagingTask+0x764>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a260:	4b52      	ldr	r3, [pc, #328]	; (800a3ac <PxMessagingTask+0x760>)
 800a262:	4699      	mov	r9, r3
								if(BOS.response == BOS_RESPONSE_ALL){
 800a264:	4b53      	ldr	r3, [pc, #332]	; (800a3b4 <PxMessagingTask+0x768>)
 800a266:	4698      	mov	r8, r3
								temp =PcPort;
 800a268:	7823      	ldrb	r3, [r4, #0]
 800a26a:	9305      	str	r3, [sp, #20]
								PcPort =port;
 800a26c:	9a08      	ldr	r2, [sp, #32]
 800a26e:	7022      	strb	r2, [r4, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a270:	2299      	movs	r2, #153	; 0x99
 800a272:	0092      	lsls	r2, r2, #2
 800a274:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a276:	4648      	mov	r0, r9
 800a278:	f003 fa6e 	bl	800d758 <FreeRTOS_CLIProcessCommand>
 800a27c:	0007      	movs	r7, r0
								PcPort =temp;
 800a27e:	9b05      	ldr	r3, [sp, #20]
 800a280:	7023      	strb	r3, [r4, #0]
								if(BOS.response == BOS_RESPONSE_ALL){
 800a282:	4643      	mov	r3, r8
 800a284:	799b      	ldrb	r3, [r3, #6]
 800a286:	2b60      	cmp	r3, #96	; 0x60
 800a288:	d01b      	beq.n	800a2c2 <PxMessagingTask+0x676>
							} while(xReturned != pdFALSE);
 800a28a:	2f00      	cmp	r7, #0
 800a28c:	d1ec      	bne.n	800a268 <PxMessagingTask+0x61c>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800a28e:	2232      	movs	r2, #50	; 0x32
 800a290:	2100      	movs	r1, #0
 800a292:	4846      	ldr	r0, [pc, #280]	; (800a3ac <PxMessagingTask+0x760>)
 800a294:	f008 fe8c 	bl	8012fb0 <memset>
							break;
 800a298:	e508      	b.n	8009cac <PxMessagingTask+0x60>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800a29a:	9a06      	ldr	r2, [sp, #24]
 800a29c:	3a01      	subs	r2, #1
 800a29e:	4454      	add	r4, sl
 800a2a0:	4937      	ldr	r1, [pc, #220]	; (800a380 <PxMessagingTask+0x734>)
 800a2a2:	1861      	adds	r1, r4, r1
 800a2a4:	4841      	ldr	r0, [pc, #260]	; (800a3ac <PxMessagingTask+0x760>)
 800a2a6:	f008 fe7a 	bl	8012f9e <memcpy>
 800a2aa:	e7d8      	b.n	800a25e <PxMessagingTask+0x612>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a2ac:	9b06      	ldr	r3, [sp, #24]
 800a2ae:	9a05      	ldr	r2, [sp, #20]
 800a2b0:	1a9a      	subs	r2, r3, r2
 800a2b2:	3a02      	subs	r2, #2
 800a2b4:	4454      	add	r4, sl
 800a2b6:	4932      	ldr	r1, [pc, #200]	; (800a380 <PxMessagingTask+0x734>)
 800a2b8:	1861      	adds	r1, r4, r1
 800a2ba:	483c      	ldr	r0, [pc, #240]	; (800a3ac <PxMessagingTask+0x760>)
 800a2bc:	f008 fe6f 	bl	8012f9e <memcpy>
 800a2c0:	e7cd      	b.n	800a25e <PxMessagingTask+0x612>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800a2c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a2c4:	f7f5 ff28 	bl	8000118 <strlen>
 800a2c8:	0002      	movs	r2, r0
 800a2ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2cc:	4830      	ldr	r0, [pc, #192]	; (800a390 <PxMessagingTask+0x744>)
 800a2ce:	f008 fe66 	bl	8012f9e <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800a2d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a2d4:	f7f5 ff20 	bl	8000118 <strlen>
 800a2d8:	b282      	uxth	r2, r0
 800a2da:	2118      	movs	r1, #24
 800a2dc:	9804      	ldr	r0, [sp, #16]
 800a2de:	f7ff f9f1 	bl	80096c4 <SendMessageToModule>
									osDelay(10);
 800a2e2:	200a      	movs	r0, #10
 800a2e4:	f003 f9a1 	bl	800d62a <osDelay>
 800a2e8:	e7cf      	b.n	800a28a <PxMessagingTask+0x63e>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a2ea:	f003 fab3 	bl	800d854 <FreeRTOS_CLIGetOutputBuffer>
 800a2ee:	0007      	movs	r7, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800a2f0:	f7f5 ff12 	bl	8000118 <strlen>
 800a2f4:	0002      	movs	r2, r0
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	0038      	movs	r0, r7
 800a2fa:	f008 fe59 	bl	8012fb0 <memset>
							if(longMessage){
 800a2fe:	4b25      	ldr	r3, [pc, #148]	; (800a394 <PxMessagingTask+0x748>)
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d012      	beq.n	800a32c <PxMessagingTask+0x6e0>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a306:	4b24      	ldr	r3, [pc, #144]	; (800a398 <PxMessagingTask+0x74c>)
 800a308:	4698      	mov	r8, r3
 800a30a:	8818      	ldrh	r0, [r3, #0]
 800a30c:	1838      	adds	r0, r7, r0
 800a30e:	4454      	add	r4, sl
 800a310:	491b      	ldr	r1, [pc, #108]	; (800a380 <PxMessagingTask+0x734>)
 800a312:	1861      	adds	r1, r4, r1
 800a314:	9c06      	ldr	r4, [sp, #24]
 800a316:	0022      	movs	r2, r4
 800a318:	f008 fe41 	bl	8012f9e <memcpy>
								longMessageLastPtr +=numOfParams;
 800a31c:	4643      	mov	r3, r8
 800a31e:	881a      	ldrh	r2, [r3, #0]
 800a320:	46a4      	mov	ip, r4
 800a322:	4462      	add	r2, ip
 800a324:	4643      	mov	r3, r8
 800a326:	801a      	strh	r2, [r3, #0]
 800a328:	2700      	movs	r7, #0
 800a32a:	e4bf      	b.n	8009cac <PxMessagingTask+0x60>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a32c:	4b1a      	ldr	r3, [pc, #104]	; (800a398 <PxMessagingTask+0x74c>)
 800a32e:	4698      	mov	r8, r3
 800a330:	8818      	ldrh	r0, [r3, #0]
 800a332:	1838      	adds	r0, r7, r0
 800a334:	4454      	add	r4, sl
 800a336:	4912      	ldr	r1, [pc, #72]	; (800a380 <PxMessagingTask+0x734>)
 800a338:	1861      	adds	r1, r4, r1
 800a33a:	9a06      	ldr	r2, [sp, #24]
 800a33c:	f008 fe2f 	bl	8012f9e <memcpy>
								longMessageLastPtr =0;
 800a340:	2700      	movs	r7, #0
 800a342:	4643      	mov	r3, r8
 800a344:	801f      	strh	r7, [r3, #0]
								responseStatus =BOS_OK;
 800a346:	4b10      	ldr	r3, [pc, #64]	; (800a388 <PxMessagingTask+0x73c>)
 800a348:	701f      	strb	r7, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800a34a:	003b      	movs	r3, r7
 800a34c:	003a      	movs	r2, r7
 800a34e:	0039      	movs	r1, r7
 800a350:	4819      	ldr	r0, [pc, #100]	; (800a3b8 <PxMessagingTask+0x76c>)
 800a352:	6800      	ldr	r0, [r0, #0]
 800a354:	f004 fd88 	bl	800ee68 <xTaskGenericNotify>
 800a358:	e4a8      	b.n	8009cac <PxMessagingTask+0x60>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a35a:	4b18      	ldr	r3, [pc, #96]	; (800a3bc <PxMessagingTask+0x770>)
 800a35c:	4a18      	ldr	r2, [pc, #96]	; (800a3c0 <PxMessagingTask+0x774>)
 800a35e:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 800a360:	4b11      	ldr	r3, [pc, #68]	; (800a3a8 <PxMessagingTask+0x75c>)
 800a362:	2201      	movs	r2, #1
 800a364:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a366:	200a      	movs	r0, #10
 800a368:	f003 f95f 	bl	800d62a <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	4b14      	ldr	r3, [pc, #80]	; (800a3c4 <PxMessagingTask+0x778>)
 800a372:	4a15      	ldr	r2, [pc, #84]	; (800a3c8 <PxMessagingTask+0x77c>)
 800a374:	60da      	str	r2, [r3, #12]
 800a376:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a37a:	46c0      	nop			; (mov r8, r8)
 800a37c:	e7fd      	b.n	800a37a <PxMessagingTask+0x72e>
 800a37e:	46c0      	nop			; (mov r8, r8)
 800a380:	20000d08 	.word	0x20000d08
 800a384:	20001090 	.word	0x20001090
 800a388:	20001110 	.word	0x20001110
 800a38c:	20001076 	.word	0x20001076
 800a390:	20000f38 	.word	0x20000f38
 800a394:	20000ef5 	.word	0x20000ef5
 800a398:	20000ef6 	.word	0x20000ef6
 800a39c:	20001628 	.word	0x20001628
 800a3a0:	2000001c 	.word	0x2000001c
 800a3a4:	20000a78 	.word	0x20000a78
 800a3a8:	20000ef4 	.word	0x20000ef4
 800a3ac:	200015f4 	.word	0x200015f4
 800a3b0:	20000a77 	.word	0x20000a77
 800a3b4:	200069c4 	.word	0x200069c4
 800a3b8:	20001504 	.word	0x20001504
 800a3bc:	20007ff0 	.word	0x20007ff0
 800a3c0:	deadbeef 	.word	0xdeadbeef
 800a3c4:	e000ed00 	.word	0xe000ed00
 800a3c8:	05fa0004 	.word	0x05fa0004
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800a3cc:	4fef      	ldr	r7, [pc, #956]	; (800a78c <PxMessagingTask+0xb40>)
 800a3ce:	19bf      	adds	r7, r7, r6
 800a3d0:	5d38      	ldrb	r0, [r7, r4]
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	3319      	adds	r3, #25
 800a3d8:	2200      	movs	r2, #0
 800a3da:	2100      	movs	r1, #0
 800a3dc:	f7fe ff4a 	bl	8009274 <SendMessageFromPort>
							osDelay(100);
 800a3e0:	2064      	movs	r0, #100	; 0x64
 800a3e2:	f003 f922 	bl	800d62a <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800a3e6:	5d3b      	ldrb	r3, [r7, r4]
 800a3e8:	4ae9      	ldr	r2, [pc, #932]	; (800a790 <PxMessagingTask+0xb44>)
 800a3ea:	7811      	ldrb	r1, [r2, #0]
 800a3ec:	9a08      	ldr	r2, [sp, #32]
 800a3ee:	9804      	ldr	r0, [sp, #16]
 800a3f0:	f7f9 fbac 	bl	8003b4c <remoteBootloaderUpdate>
							break;
 800a3f4:	2700      	movs	r7, #0
 800a3f6:	e459      	b.n	8009cac <PxMessagingTask+0x60>
							temp =cMessage[port - 1][11 + shift];
 800a3f8:	46a0      	mov	r8, r4
 800a3fa:	0027      	movs	r7, r4
 800a3fc:	370b      	adds	r7, #11
 800a3fe:	4be3      	ldr	r3, [pc, #908]	; (800a78c <PxMessagingTask+0xb40>)
 800a400:	199b      	adds	r3, r3, r6
 800a402:	5ddb      	ldrb	r3, [r3, r7]
 800a404:	4699      	mov	r9, r3
							if(numOfParams == 15)
 800a406:	9b06      	ldr	r3, [sp, #24]
 800a408:	2b0f      	cmp	r3, #15
 800a40a:	d100      	bne.n	800a40e <PxMessagingTask+0x7c2>
 800a40c:	e087      	b.n	800a51e <PxMessagingTask+0x8d2>
							if(numOfParams == 17)
 800a40e:	9b06      	ldr	r3, [sp, #24]
 800a410:	2b11      	cmp	r3, #17
 800a412:	d100      	bne.n	800a416 <PxMessagingTask+0x7ca>
 800a414:	e08b      	b.n	800a52e <PxMessagingTask+0x8e2>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a416:	4643      	mov	r3, r8
 800a418:	1c58      	adds	r0, r3, #1
 800a41a:	900c      	str	r0, [sp, #48]	; 0x30
 800a41c:	1c9c      	adds	r4, r3, #2
 800a41e:	940d      	str	r4, [sp, #52]	; 0x34
 800a420:	1cd9      	adds	r1, r3, #3
 800a422:	910e      	str	r1, [sp, #56]	; 0x38
 800a424:	4bd9      	ldr	r3, [pc, #868]	; (800a78c <PxMessagingTask+0xb40>)
 800a426:	199b      	adds	r3, r3, r6
 800a428:	4642      	mov	r2, r8
 800a42a:	5c9a      	ldrb	r2, [r3, r2]
 800a42c:	0612      	lsls	r2, r2, #24
 800a42e:	5c59      	ldrb	r1, [r3, r1]
 800a430:	1852      	adds	r2, r2, r1
 800a432:	5c19      	ldrb	r1, [r3, r0]
 800a434:	0409      	lsls	r1, r1, #16
 800a436:	1852      	adds	r2, r2, r1
 800a438:	5d19      	ldrb	r1, [r3, r4]
 800a43a:	0209      	lsls	r1, r1, #8
 800a43c:	1852      	adds	r2, r2, r1
 800a43e:	920b      	str	r2, [sp, #44]	; 0x2c
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a440:	4642      	mov	r2, r8
 800a442:	3204      	adds	r2, #4
 800a444:	920f      	str	r2, [sp, #60]	; 0x3c
 800a446:	4641      	mov	r1, r8
 800a448:	3105      	adds	r1, #5
 800a44a:	9110      	str	r1, [sp, #64]	; 0x40
 800a44c:	4640      	mov	r0, r8
 800a44e:	3006      	adds	r0, #6
 800a450:	9011      	str	r0, [sp, #68]	; 0x44
 800a452:	4644      	mov	r4, r8
 800a454:	3407      	adds	r4, #7
 800a456:	9405      	str	r4, [sp, #20]
 800a458:	5c9c      	ldrb	r4, [r3, r2]
 800a45a:	0624      	lsls	r4, r4, #24
 800a45c:	5c5a      	ldrb	r2, [r3, r1]
 800a45e:	0412      	lsls	r2, r2, #16
 800a460:	18a4      	adds	r4, r4, r2
 800a462:	9a05      	ldr	r2, [sp, #20]
 800a464:	5c9a      	ldrb	r2, [r3, r2]
 800a466:	18a4      	adds	r4, r4, r2
 800a468:	5c1b      	ldrb	r3, [r3, r0]
 800a46a:	021b      	lsls	r3, r3, #8
 800a46c:	18e4      	adds	r4, r4, r3
							if(temp == false){
 800a46e:	464b      	mov	r3, r9
 800a470:	2b00      	cmp	r3, #0
 800a472:	d164      	bne.n	800a53e <PxMessagingTask+0x8f2>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 800a474:	4bc5      	ldr	r3, [pc, #788]	; (800a78c <PxMessagingTask+0xb40>)
 800a476:	199b      	adds	r3, r3, r6
 800a478:	4443      	add	r3, r8
 800a47a:	7a5b      	ldrb	r3, [r3, #9]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d012      	beq.n	800a4a6 <PxMessagingTask+0x85a>
 800a480:	2138      	movs	r1, #56	; 0x38
 800a482:	4369      	muls	r1, r5
 800a484:	4ac1      	ldr	r2, [pc, #772]	; (800a78c <PxMessagingTask+0xb40>)
 800a486:	1852      	adds	r2, r2, r1
 800a488:	4442      	add	r2, r8
 800a48a:	7a91      	ldrb	r1, [r2, #10]
 800a48c:	2900      	cmp	r1, #0
 800a48e:	d00a      	beq.n	800a4a6 <PxMessagingTask+0x85a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800a490:	2038      	movs	r0, #56	; 0x38
 800a492:	4368      	muls	r0, r5
 800a494:	4abd      	ldr	r2, [pc, #756]	; (800a78c <PxMessagingTask+0xb40>)
 800a496:	1812      	adds	r2, r2, r0
 800a498:	4442      	add	r2, r8
 800a49a:	7a10      	ldrb	r0, [r2, #8]
 800a49c:	9100      	str	r1, [sp, #0]
 800a49e:	0022      	movs	r2, r4
 800a4a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4a2:	f7fe fdc5 	bl	8009030 <SetupDMAStreams>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800a4a6:	4bb9      	ldr	r3, [pc, #740]	; (800a78c <PxMessagingTask+0xb40>)
 800a4a8:	199b      	adds	r3, r3, r6
 800a4aa:	5ddb      	ldrb	r3, [r3, r7]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d012      	beq.n	800a4d6 <PxMessagingTask+0x88a>
 800a4b0:	2138      	movs	r1, #56	; 0x38
 800a4b2:	4369      	muls	r1, r5
 800a4b4:	4ab5      	ldr	r2, [pc, #724]	; (800a78c <PxMessagingTask+0xb40>)
 800a4b6:	1852      	adds	r2, r2, r1
 800a4b8:	4442      	add	r2, r8
 800a4ba:	7b11      	ldrb	r1, [r2, #12]
 800a4bc:	2900      	cmp	r1, #0
 800a4be:	d00a      	beq.n	800a4d6 <PxMessagingTask+0x88a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 800a4c0:	2038      	movs	r0, #56	; 0x38
 800a4c2:	4368      	muls	r0, r5
 800a4c4:	4ab1      	ldr	r2, [pc, #708]	; (800a78c <PxMessagingTask+0xb40>)
 800a4c6:	1812      	adds	r2, r2, r0
 800a4c8:	4442      	add	r2, r8
 800a4ca:	7a10      	ldrb	r0, [r2, #8]
 800a4cc:	9100      	str	r1, [sp, #0]
 800a4ce:	0022      	movs	r2, r4
 800a4d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4d2:	f7fe fdad 	bl	8009030 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800a4d6:	4bad      	ldr	r3, [pc, #692]	; (800a78c <PxMessagingTask+0xb40>)
 800a4d8:	199b      	adds	r3, r3, r6
 800a4da:	4443      	add	r3, r8
 800a4dc:	7b5b      	ldrb	r3, [r3, #13]
 800a4de:	9305      	str	r3, [sp, #20]
 800a4e0:	2700      	movs	r7, #0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d101      	bne.n	800a4ea <PxMessagingTask+0x89e>
 800a4e6:	f7ff fbe1 	bl	8009cac <PxMessagingTask+0x60>
 800a4ea:	2238      	movs	r2, #56	; 0x38
 800a4ec:	436a      	muls	r2, r5
 800a4ee:	4ba7      	ldr	r3, [pc, #668]	; (800a78c <PxMessagingTask+0xb40>)
 800a4f0:	189b      	adds	r3, r3, r2
 800a4f2:	4443      	add	r3, r8
 800a4f4:	7b9a      	ldrb	r2, [r3, #14]
 800a4f6:	42ba      	cmp	r2, r7
 800a4f8:	d101      	bne.n	800a4fe <PxMessagingTask+0x8b2>
 800a4fa:	f000 fea0 	bl	800b23e <PxMessagingTask+0x15f2>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800a4fe:	2138      	movs	r1, #56	; 0x38
 800a500:	4369      	muls	r1, r5
 800a502:	4ba2      	ldr	r3, [pc, #648]	; (800a78c <PxMessagingTask+0xb40>)
 800a504:	185b      	adds	r3, r3, r1
 800a506:	4443      	add	r3, r8
 800a508:	7a18      	ldrb	r0, [r3, #8]
 800a50a:	9200      	str	r2, [sp, #0]
 800a50c:	9b05      	ldr	r3, [sp, #20]
 800a50e:	0022      	movs	r2, r4
 800a510:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a512:	f7fe fd8d 	bl	8009030 <SetupDMAStreams>
 800a516:	464b      	mov	r3, r9
 800a518:	9305      	str	r3, [sp, #20]
 800a51a:	f7ff fbc7 	bl	8009cac <PxMessagingTask+0x60>
								temp =cMessage[port - 1][13 + shift];
 800a51e:	2238      	movs	r2, #56	; 0x38
 800a520:	436a      	muls	r2, r5
 800a522:	4b9a      	ldr	r3, [pc, #616]	; (800a78c <PxMessagingTask+0xb40>)
 800a524:	189b      	adds	r3, r3, r2
 800a526:	191c      	adds	r4, r3, r4
 800a528:	7b63      	ldrb	r3, [r4, #13]
 800a52a:	4699      	mov	r9, r3
 800a52c:	e773      	b.n	800a416 <PxMessagingTask+0x7ca>
								temp =cMessage[port - 1][15 + shift];
 800a52e:	2238      	movs	r2, #56	; 0x38
 800a530:	436a      	muls	r2, r5
 800a532:	4b96      	ldr	r3, [pc, #600]	; (800a78c <PxMessagingTask+0xb40>)
 800a534:	189b      	adds	r3, r3, r2
 800a536:	4443      	add	r3, r8
 800a538:	7bdb      	ldrb	r3, [r3, #15]
 800a53a:	4699      	mov	r9, r3
 800a53c:	e76b      	b.n	800a416 <PxMessagingTask+0x7ca>
 800a53e:	46c2      	mov	sl, r8
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800a540:	2338      	movs	r3, #56	; 0x38
 800a542:	436b      	muls	r3, r5
 800a544:	4c91      	ldr	r4, [pc, #580]	; (800a78c <PxMessagingTask+0xb40>)
 800a546:	18e4      	adds	r4, r4, r3
 800a548:	4653      	mov	r3, sl
 800a54a:	18e6      	adds	r6, r4, r3
 800a54c:	7a31      	ldrb	r1, [r6, #8]
 800a54e:	20e4      	movs	r0, #228	; 0xe4
 800a550:	f7fd f946 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800a554:	4653      	mov	r3, sl
 800a556:	5ce3      	ldrb	r3, [r4, r3]
 800a558:	021b      	lsls	r3, r3, #8
 800a55a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a55c:	5ca1      	ldrb	r1, [r4, r2]
 800a55e:	18c9      	adds	r1, r1, r3
 800a560:	b289      	uxth	r1, r1
 800a562:	20e5      	movs	r0, #229	; 0xe5
 800a564:	f7fd f93c 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800a568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a56a:	5ce3      	ldrb	r3, [r4, r3]
 800a56c:	021b      	lsls	r3, r3, #8
 800a56e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a570:	5ca1      	ldrb	r1, [r4, r2]
 800a572:	18c9      	adds	r1, r1, r3
 800a574:	b289      	uxth	r1, r1
 800a576:	20e6      	movs	r0, #230	; 0xe6
 800a578:	f7fd f932 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800a57c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a57e:	5ce3      	ldrb	r3, [r4, r3]
 800a580:	021b      	lsls	r3, r3, #8
 800a582:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a584:	5ca1      	ldrb	r1, [r4, r2]
 800a586:	18c9      	adds	r1, r1, r3
 800a588:	b289      	uxth	r1, r1
 800a58a:	20e7      	movs	r0, #231	; 0xe7
 800a58c:	f7fd f928 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800a590:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a592:	5ce3      	ldrb	r3, [r4, r3]
 800a594:	021b      	lsls	r3, r3, #8
 800a596:	9a05      	ldr	r2, [sp, #20]
 800a598:	5ca1      	ldrb	r1, [r4, r2]
 800a59a:	18c9      	adds	r1, r1, r3
 800a59c:	b289      	uxth	r1, r1
 800a59e:	20e8      	movs	r0, #232	; 0xe8
 800a5a0:	f7fd f91e 	bl	80077e0 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800a5a4:	7a73      	ldrb	r3, [r6, #9]
 800a5a6:	021b      	lsls	r3, r3, #8
 800a5a8:	7ab1      	ldrb	r1, [r6, #10]
 800a5aa:	18c9      	adds	r1, r1, r3
 800a5ac:	b289      	uxth	r1, r1
 800a5ae:	20e9      	movs	r0, #233	; 0xe9
 800a5b0:	f7fd f916 	bl	80077e0 <EE_WriteVariable>
								if(numOfParams == 19)
 800a5b4:	9b06      	ldr	r3, [sp, #24]
 800a5b6:	2b13      	cmp	r3, #19
 800a5b8:	d115      	bne.n	800a5e6 <PxMessagingTask+0x99a>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800a5ba:	3325      	adds	r3, #37	; 0x25
 800a5bc:	436b      	muls	r3, r5
 800a5be:	4d73      	ldr	r5, [pc, #460]	; (800a78c <PxMessagingTask+0xb40>)
 800a5c0:	18ed      	adds	r5, r5, r3
 800a5c2:	5deb      	ldrb	r3, [r5, r7]
 800a5c4:	021b      	lsls	r3, r3, #8
 800a5c6:	4455      	add	r5, sl
 800a5c8:	7b29      	ldrb	r1, [r5, #12]
 800a5ca:	18c9      	adds	r1, r1, r3
 800a5cc:	b289      	uxth	r1, r1
 800a5ce:	20ea      	movs	r0, #234	; 0xea
 800a5d0:	f7fd f906 	bl	80077e0 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	4b6e      	ldr	r3, [pc, #440]	; (800a794 <PxMessagingTask+0xb48>)
 800a5da:	4a6f      	ldr	r2, [pc, #444]	; (800a798 <PxMessagingTask+0xb4c>)
 800a5dc:	60da      	str	r2, [r3, #12]
 800a5de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a5e2:	46c0      	nop			; (mov r8, r8)
 800a5e4:	e7fd      	b.n	800a5e2 <PxMessagingTask+0x996>
								if(numOfParams == 21)
 800a5e6:	9b06      	ldr	r3, [sp, #24]
 800a5e8:	2b15      	cmp	r3, #21
 800a5ea:	d1f3      	bne.n	800a5d4 <PxMessagingTask+0x988>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800a5ec:	3323      	adds	r3, #35	; 0x23
 800a5ee:	435d      	muls	r5, r3
 800a5f0:	4b66      	ldr	r3, [pc, #408]	; (800a78c <PxMessagingTask+0xb40>)
 800a5f2:	195b      	adds	r3, r3, r5
 800a5f4:	4453      	add	r3, sl
 800a5f6:	7b5a      	ldrb	r2, [r3, #13]
 800a5f8:	0212      	lsls	r2, r2, #8
 800a5fa:	7b99      	ldrb	r1, [r3, #14]
 800a5fc:	1889      	adds	r1, r1, r2
 800a5fe:	b289      	uxth	r1, r1
 800a600:	20eb      	movs	r0, #235	; 0xeb
 800a602:	f7fd f8ed 	bl	80077e0 <EE_WriteVariable>
 800a606:	e7e5      	b.n	800a5d4 <PxMessagingTask+0x988>
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a608:	4f60      	ldr	r7, [pc, #384]	; (800a78c <PxMessagingTask+0xb40>)
 800a60a:	19bf      	adds	r7, r7, r6
 800a60c:	1939      	adds	r1, r7, r4
 800a60e:	7a8b      	ldrb	r3, [r1, #10]
 800a610:	9306      	str	r3, [sp, #24]
 800a612:	7aca      	ldrb	r2, [r1, #11]
 800a614:	485e      	ldr	r0, [pc, #376]	; (800a790 <PxMessagingTask+0xb44>)
 800a616:	7803      	ldrb	r3, [r0, #0]
 800a618:	4698      	mov	r8, r3
 800a61a:	7a4b      	ldrb	r3, [r1, #9]
 800a61c:	4699      	mov	r9, r3
 800a61e:	7b08      	ldrb	r0, [r1, #12]
 800a620:	0003      	movs	r3, r0
 800a622:	1e58      	subs	r0, r3, #1
 800a624:	4183      	sbcs	r3, r0
 800a626:	9303      	str	r3, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a628:	7908      	ldrb	r0, [r1, #4]
 800a62a:	0603      	lsls	r3, r0, #24
 800a62c:	469c      	mov	ip, r3
 800a62e:	7948      	ldrb	r0, [r1, #5]
 800a630:	0400      	lsls	r0, r0, #16
 800a632:	4460      	add	r0, ip
 800a634:	79cb      	ldrb	r3, [r1, #7]
 800a636:	469c      	mov	ip, r3
 800a638:	4460      	add	r0, ip
 800a63a:	798b      	ldrb	r3, [r1, #6]
 800a63c:	021b      	lsls	r3, r3, #8
 800a63e:	469c      	mov	ip, r3
 800a640:	4460      	add	r0, ip
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a642:	9002      	str	r0, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a644:	5d38      	ldrb	r0, [r7, r4]
 800a646:	0600      	lsls	r0, r0, #24
 800a648:	78cc      	ldrb	r4, [r1, #3]
 800a64a:	1900      	adds	r0, r0, r4
 800a64c:	784c      	ldrb	r4, [r1, #1]
 800a64e:	0424      	lsls	r4, r4, #16
 800a650:	1900      	adds	r0, r0, r4
 800a652:	788c      	ldrb	r4, [r1, #2]
 800a654:	0224      	lsls	r4, r4, #8
 800a656:	1900      	adds	r0, r0, r4
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800a658:	9001      	str	r0, [sp, #4]
 800a65a:	7a09      	ldrb	r1, [r1, #8]
 800a65c:	9100      	str	r1, [sp, #0]
 800a65e:	9b06      	ldr	r3, [sp, #24]
 800a660:	4641      	mov	r1, r8
 800a662:	4648      	mov	r0, r9
 800a664:	f7ff f854 	bl	8009710 <StartScastDMAStream>
							break;
 800a668:	2700      	movs	r7, #0
 800a66a:	f7ff fb1f 	bl	8009cac <PxMessagingTask+0x60>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800a66e:	0023      	movs	r3, r4
 800a670:	4a46      	ldr	r2, [pc, #280]	; (800a78c <PxMessagingTask+0xb40>)
 800a672:	1992      	adds	r2, r2, r6
 800a674:	5d12      	ldrb	r2, [r2, r4]
 800a676:	2a00      	cmp	r2, #0
 800a678:	d000      	beq.n	800a67c <PxMessagingTask+0xa30>
 800a67a:	e093      	b.n	800a7a4 <PxMessagingTask+0xb58>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800a67c:	3238      	adds	r2, #56	; 0x38
 800a67e:	436a      	muls	r2, r5
 800a680:	4b42      	ldr	r3, [pc, #264]	; (800a78c <PxMessagingTask+0xb40>)
 800a682:	189b      	adds	r3, r3, r2
 800a684:	191c      	adds	r4, r3, r4
 800a686:	78a3      	ldrb	r3, [r4, #2]
 800a688:	061b      	lsls	r3, r3, #24
 800a68a:	78e2      	ldrb	r2, [r4, #3]
 800a68c:	0412      	lsls	r2, r2, #16
 800a68e:	189b      	adds	r3, r3, r2
 800a690:	7962      	ldrb	r2, [r4, #5]
 800a692:	189b      	adds	r3, r3, r2
 800a694:	7922      	ldrb	r2, [r4, #4]
 800a696:	0212      	lsls	r2, r2, #8
 800a698:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 800a69a:	7862      	ldrb	r2, [r4, #1]
 800a69c:	3a01      	subs	r2, #1
 800a69e:	b2d1      	uxtb	r1, r2
 800a6a0:	2907      	cmp	r1, #7
 800a6a2:	d901      	bls.n	800a6a8 <PxMessagingTask+0xa5c>
 800a6a4:	f000 fdb7 	bl	800b216 <PxMessagingTask+0x15ca>
 800a6a8:	b2d2      	uxtb	r2, r2
 800a6aa:	0092      	lsls	r2, r2, #2
 800a6ac:	493b      	ldr	r1, [pc, #236]	; (800a79c <PxMessagingTask+0xb50>)
 800a6ae:	588a      	ldr	r2, [r1, r2]
 800a6b0:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 800a6b2:	781a      	ldrb	r2, [r3, #0]
 800a6b4:	4b3a      	ldr	r3, [pc, #232]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a6b6:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	211f      	movs	r1, #31
 800a6bc:	9804      	ldr	r0, [sp, #16]
 800a6be:	f7ff f801 	bl	80096c4 <SendMessageToModule>
										break;
 800a6c2:	2700      	movs	r7, #0
 800a6c4:	f7ff faf2 	bl	8009cac <PxMessagingTask+0x60>
										messageParams[0] =*(__IO int8_t* )temp32;
 800a6c8:	781a      	ldrb	r2, [r3, #0]
 800a6ca:	4b35      	ldr	r3, [pc, #212]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a6cc:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	211f      	movs	r1, #31
 800a6d2:	9804      	ldr	r0, [sp, #16]
 800a6d4:	f7fe fff6 	bl	80096c4 <SendMessageToModule>
										break;
 800a6d8:	2700      	movs	r7, #0
 800a6da:	f7ff fae7 	bl	8009cac <PxMessagingTask+0x60>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800a6de:	8819      	ldrh	r1, [r3, #0]
 800a6e0:	4a2f      	ldr	r2, [pc, #188]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a6e2:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	0a1b      	lsrs	r3, r3, #8
 800a6e8:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800a6ea:	2202      	movs	r2, #2
 800a6ec:	211f      	movs	r1, #31
 800a6ee:	9804      	ldr	r0, [sp, #16]
 800a6f0:	f7fe ffe8 	bl	80096c4 <SendMessageToModule>
										break;
 800a6f4:	2700      	movs	r7, #0
 800a6f6:	f7ff fad9 	bl	8009cac <PxMessagingTask+0x60>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800a6fa:	8819      	ldrh	r1, [r3, #0]
 800a6fc:	4a28      	ldr	r2, [pc, #160]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a6fe:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	b21b      	sxth	r3, r3
 800a704:	121b      	asrs	r3, r3, #8
 800a706:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800a708:	2202      	movs	r2, #2
 800a70a:	211f      	movs	r1, #31
 800a70c:	9804      	ldr	r0, [sp, #16]
 800a70e:	f7fe ffd9 	bl	80096c4 <SendMessageToModule>
										break;
 800a712:	2700      	movs	r7, #0
 800a714:	f7ff faca 	bl	8009cac <PxMessagingTask+0x60>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800a718:	6819      	ldr	r1, [r3, #0]
 800a71a:	4a21      	ldr	r2, [pc, #132]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a71c:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800a71e:	6819      	ldr	r1, [r3, #0]
 800a720:	0a09      	lsrs	r1, r1, #8
 800a722:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800a724:	6819      	ldr	r1, [r3, #0]
 800a726:	0c09      	lsrs	r1, r1, #16
 800a728:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	0e1b      	lsrs	r3, r3, #24
 800a72e:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800a730:	2204      	movs	r2, #4
 800a732:	211f      	movs	r1, #31
 800a734:	9804      	ldr	r0, [sp, #16]
 800a736:	f7fe ffc5 	bl	80096c4 <SendMessageToModule>
										break;
 800a73a:	2700      	movs	r7, #0
 800a73c:	f7ff fab6 	bl	8009cac <PxMessagingTask+0x60>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800a740:	6819      	ldr	r1, [r3, #0]
 800a742:	4a17      	ldr	r2, [pc, #92]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a744:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800a746:	6819      	ldr	r1, [r3, #0]
 800a748:	1209      	asrs	r1, r1, #8
 800a74a:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800a74c:	6819      	ldr	r1, [r3, #0]
 800a74e:	1409      	asrs	r1, r1, #16
 800a750:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	161b      	asrs	r3, r3, #24
 800a756:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800a758:	2204      	movs	r2, #4
 800a75a:	211f      	movs	r1, #31
 800a75c:	9804      	ldr	r0, [sp, #16]
 800a75e:	f7fe ffb1 	bl	80096c4 <SendMessageToModule>
										break;
 800a762:	2700      	movs	r7, #0
 800a764:	f7ff faa2 	bl	8009cac <PxMessagingTask+0x60>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800a768:	7819      	ldrb	r1, [r3, #0]
 800a76a:	4a0d      	ldr	r2, [pc, #52]	; (800a7a0 <PxMessagingTask+0xb54>)
 800a76c:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800a76e:	7859      	ldrb	r1, [r3, #1]
 800a770:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800a772:	7899      	ldrb	r1, [r3, #2]
 800a774:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800a776:	78db      	ldrb	r3, [r3, #3]
 800a778:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800a77a:	2208      	movs	r2, #8
 800a77c:	211f      	movs	r1, #31
 800a77e:	9804      	ldr	r0, [sp, #16]
 800a780:	f7fe ffa0 	bl	80096c4 <SendMessageToModule>
										break; // You cannot bitwise floats
 800a784:	2700      	movs	r7, #0
 800a786:	f7ff fa91 	bl	8009cac <PxMessagingTask+0x60>
 800a78a:	46c0      	nop			; (mov r8, r8)
 800a78c:	20000d08 	.word	0x20000d08
 800a790:	20001076 	.word	0x20001076
 800a794:	e000ed00 	.word	0xe000ed00
 800a798:	05fa0004 	.word	0x05fa0004
 800a79c:	0801a2b4 	.word	0x0801a2b4
 800a7a0:	20000f38 	.word	0x20000f38
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800a7a4:	2a02      	cmp	r2, #2
 800a7a6:	d000      	beq.n	800a7aa <PxMessagingTask+0xb5e>
 800a7a8:	e097      	b.n	800a8da <PxMessagingTask+0xc8e>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800a7aa:	48e6      	ldr	r0, [pc, #920]	; (800ab44 <PxMessagingTask+0xef8>)
 800a7ac:	3236      	adds	r2, #54	; 0x36
 800a7ae:	436a      	muls	r2, r5
 800a7b0:	1882      	adds	r2, r0, r2
 800a7b2:	1851      	adds	r1, r2, r1
 800a7b4:	3901      	subs	r1, #1
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	700a      	strb	r2, [r1, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	4453      	add	r3, sl
 800a7be:	1818      	adds	r0, r3, r0
 800a7c0:	f7f8 ffaa 	bl	8003718 <IsModuleParameter>
 800a7c4:	9005      	str	r0, [sp, #20]
								if(temp == 0){ // Parameter does not exist
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d107      	bne.n	800a7da <PxMessagingTask+0xb8e>
									SendMessageToModule(src,
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	211f      	movs	r1, #31
 800a7ce:	9804      	ldr	r0, [sp, #16]
 800a7d0:	f7fe ff78 	bl	80096c4 <SendMessageToModule>
 800a7d4:	2700      	movs	r7, #0
 800a7d6:	f7ff fa69 	bl	8009cac <PxMessagingTask+0x60>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800a7da:	3801      	subs	r0, #1
 800a7dc:	4ada      	ldr	r2, [pc, #872]	; (800ab48 <PxMessagingTask+0xefc>)
 800a7de:	210c      	movs	r1, #12
 800a7e0:	4341      	muls	r1, r0
 800a7e2:	588b      	ldr	r3, [r1, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800a7e4:	1852      	adds	r2, r2, r1
 800a7e6:	7912      	ldrb	r2, [r2, #4]
 800a7e8:	49d8      	ldr	r1, [pc, #864]	; (800ab4c <PxMessagingTask+0xf00>)
 800a7ea:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800a7ec:	3a01      	subs	r2, #1
 800a7ee:	b2d1      	uxtb	r1, r2
 800a7f0:	2907      	cmp	r1, #7
 800a7f2:	d901      	bls.n	800a7f8 <PxMessagingTask+0xbac>
 800a7f4:	f000 fd12 	bl	800b21c <PxMessagingTask+0x15d0>
 800a7f8:	b2d2      	uxtb	r2, r2
 800a7fa:	0092      	lsls	r2, r2, #2
 800a7fc:	49d4      	ldr	r1, [pc, #848]	; (800ab50 <PxMessagingTask+0xf04>)
 800a7fe:	588a      	ldr	r2, [r1, r2]
 800a800:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800a802:	781a      	ldrb	r2, [r3, #0]
 800a804:	4bd1      	ldr	r3, [pc, #836]	; (800ab4c <PxMessagingTask+0xf00>)
 800a806:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800a808:	2202      	movs	r2, #2
 800a80a:	211f      	movs	r1, #31
 800a80c:	9804      	ldr	r0, [sp, #16]
 800a80e:	f7fe ff59 	bl	80096c4 <SendMessageToModule>
											break;
 800a812:	2700      	movs	r7, #0
 800a814:	f7ff fa4a 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =*(__IO int8_t* )temp32;
 800a818:	781a      	ldrb	r2, [r3, #0]
 800a81a:	4bcc      	ldr	r3, [pc, #816]	; (800ab4c <PxMessagingTask+0xf00>)
 800a81c:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800a81e:	2202      	movs	r2, #2
 800a820:	211f      	movs	r1, #31
 800a822:	9804      	ldr	r0, [sp, #16]
 800a824:	f7fe ff4e 	bl	80096c4 <SendMessageToModule>
											break;
 800a828:	2700      	movs	r7, #0
 800a82a:	f7ff fa3f 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800a82e:	8819      	ldrh	r1, [r3, #0]
 800a830:	4ac6      	ldr	r2, [pc, #792]	; (800ab4c <PxMessagingTask+0xf00>)
 800a832:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800a834:	881b      	ldrh	r3, [r3, #0]
 800a836:	0a1b      	lsrs	r3, r3, #8
 800a838:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800a83a:	2203      	movs	r2, #3
 800a83c:	211f      	movs	r1, #31
 800a83e:	9804      	ldr	r0, [sp, #16]
 800a840:	f7fe ff40 	bl	80096c4 <SendMessageToModule>
											break;
 800a844:	2700      	movs	r7, #0
 800a846:	f7ff fa31 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800a84a:	8819      	ldrh	r1, [r3, #0]
 800a84c:	4abf      	ldr	r2, [pc, #764]	; (800ab4c <PxMessagingTask+0xf00>)
 800a84e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800a850:	881b      	ldrh	r3, [r3, #0]
 800a852:	b21b      	sxth	r3, r3
 800a854:	121b      	asrs	r3, r3, #8
 800a856:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800a858:	2203      	movs	r2, #3
 800a85a:	211f      	movs	r1, #31
 800a85c:	9804      	ldr	r0, [sp, #16]
 800a85e:	f7fe ff31 	bl	80096c4 <SendMessageToModule>
											break;
 800a862:	2700      	movs	r7, #0
 800a864:	f7ff fa22 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800a868:	6819      	ldr	r1, [r3, #0]
 800a86a:	4ab8      	ldr	r2, [pc, #736]	; (800ab4c <PxMessagingTask+0xf00>)
 800a86c:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800a86e:	6819      	ldr	r1, [r3, #0]
 800a870:	0a09      	lsrs	r1, r1, #8
 800a872:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800a874:	6819      	ldr	r1, [r3, #0]
 800a876:	0c09      	lsrs	r1, r1, #16
 800a878:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	0e1b      	lsrs	r3, r3, #24
 800a87e:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a880:	2205      	movs	r2, #5
 800a882:	211f      	movs	r1, #31
 800a884:	9804      	ldr	r0, [sp, #16]
 800a886:	f7fe ff1d 	bl	80096c4 <SendMessageToModule>
											break;
 800a88a:	2700      	movs	r7, #0
 800a88c:	f7ff fa0e 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800a890:	6819      	ldr	r1, [r3, #0]
 800a892:	4aae      	ldr	r2, [pc, #696]	; (800ab4c <PxMessagingTask+0xf00>)
 800a894:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800a896:	6819      	ldr	r1, [r3, #0]
 800a898:	1209      	asrs	r1, r1, #8
 800a89a:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800a89c:	6819      	ldr	r1, [r3, #0]
 800a89e:	1409      	asrs	r1, r1, #16
 800a8a0:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	161b      	asrs	r3, r3, #24
 800a8a6:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a8a8:	2205      	movs	r2, #5
 800a8aa:	211f      	movs	r1, #31
 800a8ac:	9804      	ldr	r0, [sp, #16]
 800a8ae:	f7fe ff09 	bl	80096c4 <SendMessageToModule>
											break;
 800a8b2:	2700      	movs	r7, #0
 800a8b4:	f7ff f9fa 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800a8b8:	7819      	ldrb	r1, [r3, #0]
 800a8ba:	4aa4      	ldr	r2, [pc, #656]	; (800ab4c <PxMessagingTask+0xf00>)
 800a8bc:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800a8be:	7859      	ldrb	r1, [r3, #1]
 800a8c0:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800a8c2:	7899      	ldrb	r1, [r3, #2]
 800a8c4:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800a8c6:	78db      	ldrb	r3, [r3, #3]
 800a8c8:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a8ca:	2209      	movs	r2, #9
 800a8cc:	211f      	movs	r1, #31
 800a8ce:	9804      	ldr	r0, [sp, #16]
 800a8d0:	f7fe fef8 	bl	80096c4 <SendMessageToModule>
											break;
 800a8d4:	2700      	movs	r7, #0
 800a8d6:	f7ff f9e9 	bl	8009cac <PxMessagingTask+0x60>
								}
 800a8da:	2700      	movs	r7, #0
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800a8dc:	2a02      	cmp	r2, #2
 800a8de:	d801      	bhi.n	800a8e4 <PxMessagingTask+0xc98>
 800a8e0:	f7ff f9e4 	bl	8009cac <PxMessagingTask+0x60>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800a8e4:	3a04      	subs	r2, #4
 800a8e6:	0092      	lsls	r2, r2, #2
 800a8e8:	4b9a      	ldr	r3, [pc, #616]	; (800ab54 <PxMessagingTask+0xf08>)
 800a8ea:	58d1      	ldr	r1, [r2, r3]
 800a8ec:	220f      	movs	r2, #15
 800a8ee:	400a      	ands	r2, r1
 800a8f0:	4b96      	ldr	r3, [pc, #600]	; (800ab4c <PxMessagingTask+0xf00>)
 800a8f2:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800a8f4:	42ba      	cmp	r2, r7
 800a8f6:	d106      	bne.n	800a906 <PxMessagingTask+0xcba>
									SendMessageToModule(src,
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	211f      	movs	r1, #31
 800a8fc:	9804      	ldr	r0, [sp, #16]
 800a8fe:	f7fe fee1 	bl	80096c4 <SendMessageToModule>
 800a902:	f7ff f9d3 	bl	8009cac <PxMessagingTask+0x60>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800a906:	0c09      	lsrs	r1, r1, #16
 800a908:	2380      	movs	r3, #128	; 0x80
 800a90a:	059b      	lsls	r3, r3, #22
 800a90c:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 800a90e:	3a01      	subs	r2, #1
 800a910:	b2d0      	uxtb	r0, r2
 800a912:	2807      	cmp	r0, #7
 800a914:	d901      	bls.n	800a91a <PxMessagingTask+0xcce>
 800a916:	f000 fc84 	bl	800b222 <PxMessagingTask+0x15d6>
 800a91a:	b2d2      	uxtb	r2, r2
 800a91c:	0092      	lsls	r2, r2, #2
 800a91e:	488e      	ldr	r0, [pc, #568]	; (800ab58 <PxMessagingTask+0xf0c>)
 800a920:	5882      	ldr	r2, [r0, r2]
 800a922:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800a924:	781a      	ldrb	r2, [r3, #0]
 800a926:	4b89      	ldr	r3, [pc, #548]	; (800ab4c <PxMessagingTask+0xf00>)
 800a928:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800a92a:	2202      	movs	r2, #2
 800a92c:	211f      	movs	r1, #31
 800a92e:	9804      	ldr	r0, [sp, #16]
 800a930:	f7fe fec8 	bl	80096c4 <SendMessageToModule>
											break;
 800a934:	2700      	movs	r7, #0
 800a936:	f7ff f9b9 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =*(__IO int8_t* )temp32;
 800a93a:	781a      	ldrb	r2, [r3, #0]
 800a93c:	4b83      	ldr	r3, [pc, #524]	; (800ab4c <PxMessagingTask+0xf00>)
 800a93e:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800a940:	2202      	movs	r2, #2
 800a942:	211f      	movs	r1, #31
 800a944:	9804      	ldr	r0, [sp, #16]
 800a946:	f7fe febd 	bl	80096c4 <SendMessageToModule>
											break;
 800a94a:	2700      	movs	r7, #0
 800a94c:	f7ff f9ae 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800a950:	8819      	ldrh	r1, [r3, #0]
 800a952:	4a7e      	ldr	r2, [pc, #504]	; (800ab4c <PxMessagingTask+0xf00>)
 800a954:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800a956:	881b      	ldrh	r3, [r3, #0]
 800a958:	0a1b      	lsrs	r3, r3, #8
 800a95a:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800a95c:	2203      	movs	r2, #3
 800a95e:	211f      	movs	r1, #31
 800a960:	9804      	ldr	r0, [sp, #16]
 800a962:	f7fe feaf 	bl	80096c4 <SendMessageToModule>
											break;
 800a966:	2700      	movs	r7, #0
 800a968:	f7ff f9a0 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800a96c:	8819      	ldrh	r1, [r3, #0]
 800a96e:	4a77      	ldr	r2, [pc, #476]	; (800ab4c <PxMessagingTask+0xf00>)
 800a970:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800a972:	881b      	ldrh	r3, [r3, #0]
 800a974:	b21b      	sxth	r3, r3
 800a976:	121b      	asrs	r3, r3, #8
 800a978:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800a97a:	2203      	movs	r2, #3
 800a97c:	211f      	movs	r1, #31
 800a97e:	9804      	ldr	r0, [sp, #16]
 800a980:	f7fe fea0 	bl	80096c4 <SendMessageToModule>
											break;
 800a984:	2700      	movs	r7, #0
 800a986:	f7ff f991 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800a98a:	6819      	ldr	r1, [r3, #0]
 800a98c:	4a6f      	ldr	r2, [pc, #444]	; (800ab4c <PxMessagingTask+0xf00>)
 800a98e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800a990:	6819      	ldr	r1, [r3, #0]
 800a992:	0a09      	lsrs	r1, r1, #8
 800a994:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800a996:	6819      	ldr	r1, [r3, #0]
 800a998:	0c09      	lsrs	r1, r1, #16
 800a99a:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	0e1b      	lsrs	r3, r3, #24
 800a9a0:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a9a2:	2205      	movs	r2, #5
 800a9a4:	211f      	movs	r1, #31
 800a9a6:	9804      	ldr	r0, [sp, #16]
 800a9a8:	f7fe fe8c 	bl	80096c4 <SendMessageToModule>
											break;
 800a9ac:	2700      	movs	r7, #0
 800a9ae:	f7ff f97d 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800a9b2:	6819      	ldr	r1, [r3, #0]
 800a9b4:	4a65      	ldr	r2, [pc, #404]	; (800ab4c <PxMessagingTask+0xf00>)
 800a9b6:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800a9b8:	6819      	ldr	r1, [r3, #0]
 800a9ba:	1209      	asrs	r1, r1, #8
 800a9bc:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800a9be:	6819      	ldr	r1, [r3, #0]
 800a9c0:	1409      	asrs	r1, r1, #16
 800a9c2:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	161b      	asrs	r3, r3, #24
 800a9c8:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800a9ca:	2205      	movs	r2, #5
 800a9cc:	211f      	movs	r1, #31
 800a9ce:	9804      	ldr	r0, [sp, #16]
 800a9d0:	f7fe fe78 	bl	80096c4 <SendMessageToModule>
											break;
 800a9d4:	2700      	movs	r7, #0
 800a9d6:	f7ff f969 	bl	8009cac <PxMessagingTask+0x60>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800a9da:	781a      	ldrb	r2, [r3, #0]
 800a9dc:	4b5b      	ldr	r3, [pc, #364]	; (800ab4c <PxMessagingTask+0xf00>)
 800a9de:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800a9e0:	4a5e      	ldr	r2, [pc, #376]	; (800ab5c <PxMessagingTask+0xf10>)
 800a9e2:	188a      	adds	r2, r1, r2
 800a9e4:	7812      	ldrb	r2, [r2, #0]
 800a9e6:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800a9e8:	4a5d      	ldr	r2, [pc, #372]	; (800ab60 <PxMessagingTask+0xf14>)
 800a9ea:	188a      	adds	r2, r1, r2
 800a9ec:	7812      	ldrb	r2, [r2, #0]
 800a9ee:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800a9f0:	4a5c      	ldr	r2, [pc, #368]	; (800ab64 <PxMessagingTask+0xf18>)
 800a9f2:	4694      	mov	ip, r2
 800a9f4:	4461      	add	r1, ip
 800a9f6:	780a      	ldrb	r2, [r1, #0]
 800a9f8:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 800a9fa:	2209      	movs	r2, #9
 800a9fc:	211f      	movs	r1, #31
 800a9fe:	9804      	ldr	r0, [sp, #16]
 800aa00:	f7fe fe60 	bl	80096c4 <SendMessageToModule>
											break;
 800aa04:	2700      	movs	r7, #0
 800aa06:	f7ff f951 	bl	8009cac <PxMessagingTask+0x60>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800aa0a:	4b57      	ldr	r3, [pc, #348]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	2002      	movs	r0, #2
 800aa12:	4240      	negs	r0, r0
 800aa14:	17c1      	asrs	r1, r0, #31
 800aa16:	1812      	adds	r2, r2, r0
 800aa18:	414b      	adcs	r3, r1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00b      	beq.n	800aa36 <PxMessagingTask+0xdea>
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800aa1e:	4b53      	ldr	r3, [pc, #332]	; (800ab6c <PxMessagingTask+0xf20>)
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	2b10      	cmp	r3, #16
 800aa24:	d101      	bne.n	800aa2a <PxMessagingTask+0xdde>
 800aa26:	f000 fc0e 	bl	800b246 <PxMessagingTask+0x15fa>
								responseStatus =BOS_OK;
 800aa2a:	4b50      	ldr	r3, [pc, #320]	; (800ab6c <PxMessagingTask+0xf20>)
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	701a      	strb	r2, [r3, #0]
 800aa30:	2700      	movs	r7, #0
 800aa32:	f7ff f93b 	bl	8009cac <PxMessagingTask+0x60>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d101      	bne.n	800aa3e <PxMessagingTask+0xdf2>
 800aa3a:	2a01      	cmp	r2, #1
 800aa3c:	d8ef      	bhi.n	800aa1e <PxMessagingTask+0xdd2>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800aa3e:	2138      	movs	r1, #56	; 0x38
 800aa40:	4369      	muls	r1, r5
 800aa42:	4a40      	ldr	r2, [pc, #256]	; (800ab44 <PxMessagingTask+0xef8>)
 800aa44:	1852      	adds	r2, r2, r1
 800aa46:	5d12      	ldrb	r2, [r2, r4]
 800aa48:	4949      	ldr	r1, [pc, #292]	; (800ab70 <PxMessagingTask+0xf24>)
 800aa4a:	700a      	strb	r2, [r1, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800aa4c:	2a08      	cmp	r2, #8
 800aa4e:	d8e6      	bhi.n	800aa1e <PxMessagingTask+0xdd2>
 800aa50:	0092      	lsls	r2, r2, #2
 800aa52:	4948      	ldr	r1, [pc, #288]	; (800ab74 <PxMessagingTask+0xf28>)
 800aa54:	588a      	ldr	r2, [r1, r2]
 800aa56:	4697      	mov	pc, r2
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800aa58:	4b44      	ldr	r3, [pc, #272]	; (800ab6c <PxMessagingTask+0xf20>)
 800aa5a:	2210      	movs	r2, #16
 800aa5c:	701a      	strb	r2, [r3, #0]
 800aa5e:	2700      	movs	r7, #0
 800aa60:	f7ff f924 	bl	8009cac <PxMessagingTask+0x60>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800aa64:	4a40      	ldr	r2, [pc, #256]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aa66:	2038      	movs	r0, #56	; 0x38
 800aa68:	4368      	muls	r0, r5
 800aa6a:	4936      	ldr	r1, [pc, #216]	; (800ab44 <PxMessagingTask+0xef8>)
 800aa6c:	1809      	adds	r1, r1, r0
 800aa6e:	1909      	adds	r1, r1, r4
 800aa70:	784b      	ldrb	r3, [r1, #1]
 800aa72:	6013      	str	r3, [r2, #0]
 800aa74:	2300      	movs	r3, #0
 800aa76:	6053      	str	r3, [r2, #4]
										break;
 800aa78:	e7d1      	b.n	800aa1e <PxMessagingTask+0xdd2>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800aa7a:	4a3b      	ldr	r2, [pc, #236]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aa7c:	2038      	movs	r0, #56	; 0x38
 800aa7e:	4368      	muls	r0, r5
 800aa80:	4930      	ldr	r1, [pc, #192]	; (800ab44 <PxMessagingTask+0xef8>)
 800aa82:	1809      	adds	r1, r1, r0
 800aa84:	1909      	adds	r1, r1, r4
 800aa86:	2301      	movs	r3, #1
 800aa88:	56cb      	ldrsb	r3, [r1, r3]
 800aa8a:	6013      	str	r3, [r2, #0]
 800aa8c:	17db      	asrs	r3, r3, #31
 800aa8e:	6053      	str	r3, [r2, #4]
										break;
 800aa90:	e7c5      	b.n	800aa1e <PxMessagingTask+0xdd2>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 800aa92:	4a35      	ldr	r2, [pc, #212]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aa94:	2038      	movs	r0, #56	; 0x38
 800aa96:	4368      	muls	r0, r5
 800aa98:	492a      	ldr	r1, [pc, #168]	; (800ab44 <PxMessagingTask+0xef8>)
 800aa9a:	1809      	adds	r1, r1, r0
 800aa9c:	1909      	adds	r1, r1, r4
 800aa9e:	788b      	ldrb	r3, [r1, #2]
 800aaa0:	021b      	lsls	r3, r3, #8
 800aaa2:	7849      	ldrb	r1, [r1, #1]
 800aaa4:	185b      	adds	r3, r3, r1
 800aaa6:	6013      	str	r3, [r2, #0]
 800aaa8:	17db      	asrs	r3, r3, #31
 800aaaa:	6053      	str	r3, [r2, #4]
										break;
 800aaac:	e7b7      	b.n	800aa1e <PxMessagingTask+0xdd2>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800aaae:	4a2e      	ldr	r2, [pc, #184]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aab0:	2038      	movs	r0, #56	; 0x38
 800aab2:	4368      	muls	r0, r5
 800aab4:	4923      	ldr	r1, [pc, #140]	; (800ab44 <PxMessagingTask+0xef8>)
 800aab6:	1809      	adds	r1, r1, r0
 800aab8:	1909      	adds	r1, r1, r4
 800aaba:	788b      	ldrb	r3, [r1, #2]
 800aabc:	021b      	lsls	r3, r3, #8
 800aabe:	7849      	ldrb	r1, [r1, #1]
 800aac0:	185b      	adds	r3, r3, r1
 800aac2:	6013      	str	r3, [r2, #0]
 800aac4:	17db      	asrs	r3, r3, #31
 800aac6:	6053      	str	r3, [r2, #4]
										break;
 800aac8:	e7a9      	b.n	800aa1e <PxMessagingTask+0xdd2>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800aaca:	4a27      	ldr	r2, [pc, #156]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aacc:	2038      	movs	r0, #56	; 0x38
 800aace:	4368      	muls	r0, r5
 800aad0:	491c      	ldr	r1, [pc, #112]	; (800ab44 <PxMessagingTask+0xef8>)
 800aad2:	1809      	adds	r1, r1, r0
 800aad4:	1909      	adds	r1, r1, r4
 800aad6:	788b      	ldrb	r3, [r1, #2]
 800aad8:	021b      	lsls	r3, r3, #8
 800aada:	78c8      	ldrb	r0, [r1, #3]
 800aadc:	0400      	lsls	r0, r0, #16
 800aade:	181b      	adds	r3, r3, r0
 800aae0:	7848      	ldrb	r0, [r1, #1]
 800aae2:	181b      	adds	r3, r3, r0
 800aae4:	7909      	ldrb	r1, [r1, #4]
 800aae6:	0609      	lsls	r1, r1, #24
 800aae8:	185b      	adds	r3, r3, r1
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	2300      	movs	r3, #0
 800aaee:	6053      	str	r3, [r2, #4]
										break;
 800aaf0:	e795      	b.n	800aa1e <PxMessagingTask+0xdd2>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800aaf2:	4a1d      	ldr	r2, [pc, #116]	; (800ab68 <PxMessagingTask+0xf1c>)
 800aaf4:	2038      	movs	r0, #56	; 0x38
 800aaf6:	4368      	muls	r0, r5
 800aaf8:	4912      	ldr	r1, [pc, #72]	; (800ab44 <PxMessagingTask+0xef8>)
 800aafa:	1809      	adds	r1, r1, r0
 800aafc:	1909      	adds	r1, r1, r4
 800aafe:	788b      	ldrb	r3, [r1, #2]
 800ab00:	021b      	lsls	r3, r3, #8
 800ab02:	7848      	ldrb	r0, [r1, #1]
 800ab04:	181b      	adds	r3, r3, r0
 800ab06:	78c8      	ldrb	r0, [r1, #3]
 800ab08:	0400      	lsls	r0, r0, #16
 800ab0a:	181b      	adds	r3, r3, r0
 800ab0c:	7909      	ldrb	r1, [r1, #4]
 800ab0e:	0609      	lsls	r1, r1, #24
 800ab10:	185b      	adds	r3, r3, r1
 800ab12:	6013      	str	r3, [r2, #0]
 800ab14:	17db      	asrs	r3, r3, #31
 800ab16:	6053      	str	r3, [r2, #4]
										break;
 800ab18:	e781      	b.n	800aa1e <PxMessagingTask+0xdd2>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800ab1a:	4a13      	ldr	r2, [pc, #76]	; (800ab68 <PxMessagingTask+0xf1c>)
 800ab1c:	2038      	movs	r0, #56	; 0x38
 800ab1e:	4368      	muls	r0, r5
 800ab20:	4908      	ldr	r1, [pc, #32]	; (800ab44 <PxMessagingTask+0xef8>)
 800ab22:	1809      	adds	r1, r1, r0
 800ab24:	1909      	adds	r1, r1, r4
 800ab26:	788b      	ldrb	r3, [r1, #2]
 800ab28:	021b      	lsls	r3, r3, #8
 800ab2a:	78c8      	ldrb	r0, [r1, #3]
 800ab2c:	0400      	lsls	r0, r0, #16
 800ab2e:	181b      	adds	r3, r3, r0
 800ab30:	7848      	ldrb	r0, [r1, #1]
 800ab32:	181b      	adds	r3, r3, r0
 800ab34:	7909      	ldrb	r1, [r1, #4]
 800ab36:	0609      	lsls	r1, r1, #24
 800ab38:	185b      	adds	r3, r3, r1
 800ab3a:	6013      	str	r3, [r2, #0]
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	6053      	str	r3, [r2, #4]
										break;
 800ab40:	e76d      	b.n	800aa1e <PxMessagingTask+0xdd2>
 800ab42:	46c0      	nop			; (mov r8, r8)
 800ab44:	20000d08 	.word	0x20000d08
 800ab48:	20000084 	.word	0x20000084
 800ab4c:	20000f38 	.word	0x20000f38
 800ab50:	0801a2d4 	.word	0x0801a2d4
 800ab54:	2000694c 	.word	0x2000694c
 800ab58:	0801a2f4 	.word	0x0801a2f4
 800ab5c:	20000001 	.word	0x20000001
 800ab60:	20000002 	.word	0x20000002
 800ab64:	20000003 	.word	0x20000003
 800ab68:	20001108 	.word	0x20001108
 800ab6c:	20001110 	.word	0x20001110
 800ab70:	20000070 	.word	0x20000070
 800ab74:	0801a314 	.word	0x0801a314
							responseStatus =BOS_OK; // Initialize response
 800ab78:	4bcd      	ldr	r3, [pc, #820]	; (800aeb0 <PxMessagingTask+0x1264>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800ab7e:	0027      	movs	r7, r4
 800ab80:	4bcc      	ldr	r3, [pc, #816]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ab82:	199b      	adds	r3, r3, r6
 800ab84:	5d1b      	ldrb	r3, [r3, r4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d100      	bne.n	800ab8c <PxMessagingTask+0xf40>
 800ab8a:	e10b      	b.n	800ada4 <PxMessagingTask+0x1158>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800ab8c:	2b1e      	cmp	r3, #30
 800ab8e:	d900      	bls.n	800ab92 <PxMessagingTask+0xf46>
 800ab90:	e104      	b.n	800ad9c <PxMessagingTask+0x1150>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800ab92:	1e5c      	subs	r4, r3, #1
 800ab94:	00a2      	lsls	r2, r4, #2
 800ab96:	4bc8      	ldr	r3, [pc, #800]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ab98:	58d1      	ldr	r1, [r2, r3]
 800ab9a:	0c0b      	lsrs	r3, r1, #16
 800ab9c:	2280      	movs	r2, #128	; 0x80
 800ab9e:	0592      	lsls	r2, r2, #22
 800aba0:	4694      	mov	ip, r2
 800aba2:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800aba4:	1c7a      	adds	r2, r7, #1
 800aba6:	4690      	mov	r8, r2
 800aba8:	2038      	movs	r0, #56	; 0x38
 800abaa:	4368      	muls	r0, r5
 800abac:	4ac1      	ldr	r2, [pc, #772]	; (800aeb4 <PxMessagingTask+0x1268>)
 800abae:	1812      	adds	r2, r2, r0
 800abb0:	4640      	mov	r0, r8
 800abb2:	5c12      	ldrb	r2, [r2, r0]
 800abb4:	4691      	mov	r9, r2
 800abb6:	3a01      	subs	r2, #1
 800abb8:	b2d0      	uxtb	r0, r2
 800abba:	2807      	cmp	r0, #7
 800abbc:	d81b      	bhi.n	800abf6 <PxMessagingTask+0xfaa>
 800abbe:	b2d2      	uxtb	r2, r2
 800abc0:	0092      	lsls	r2, r2, #2
 800abc2:	48be      	ldr	r0, [pc, #760]	; (800aebc <PxMessagingTask+0x1270>)
 800abc4:	5882      	ldr	r2, [r0, r2]
 800abc6:	4697      	mov	pc, r2
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800abc8:	070a      	lsls	r2, r1, #28
 800abca:	d109      	bne.n	800abe0 <PxMessagingTask+0xf94>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800abcc:	2001      	movs	r0, #1
 800abce:	f007 ff99 	bl	8012b04 <malloc>
 800abd2:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800abd4:	d00c      	beq.n	800abf0 <PxMessagingTask+0xfa4>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800abd6:	00a4      	lsls	r4, r4, #2
 800abd8:	0400      	lsls	r0, r0, #16
 800abda:	4448      	add	r0, r9
 800abdc:	4ab6      	ldr	r2, [pc, #728]	; (800aeb8 <PxMessagingTask+0x126c>)
 800abde:	50a0      	str	r0, [r4, r2]
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800abe0:	2138      	movs	r1, #56	; 0x38
 800abe2:	4369      	muls	r1, r5
 800abe4:	4ab3      	ldr	r2, [pc, #716]	; (800aeb4 <PxMessagingTask+0x1268>)
 800abe6:	1852      	adds	r2, r2, r1
 800abe8:	19d2      	adds	r2, r2, r7
 800abea:	7892      	ldrb	r2, [r2, #2]
 800abec:	701a      	strb	r2, [r3, #0]
 800abee:	e002      	b.n	800abf6 <PxMessagingTask+0xfaa>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800abf0:	4baf      	ldr	r3, [pc, #700]	; (800aeb0 <PxMessagingTask+0x1264>)
 800abf2:	2212      	movs	r2, #18
 800abf4:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800abf6:	2338      	movs	r3, #56	; 0x38
 800abf8:	436b      	muls	r3, r5
 800abfa:	4aae      	ldr	r2, [pc, #696]	; (800aeb4 <PxMessagingTask+0x1268>)
 800abfc:	18d2      	adds	r2, r2, r3
 800abfe:	5dd3      	ldrb	r3, [r2, r7]
 800ac00:	3b01      	subs	r3, #1
 800ac02:	0098      	lsls	r0, r3, #2
 800ac04:	49ac      	ldr	r1, [pc, #688]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ac06:	5841      	ldr	r1, [r0, r1]
 800ac08:	4640      	mov	r0, r8
 800ac0a:	5c12      	ldrb	r2, [r2, r0]
 800ac0c:	200f      	movs	r0, #15
 800ac0e:	4008      	ands	r0, r1
 800ac10:	4290      	cmp	r0, r2
 800ac12:	d009      	beq.n	800ac28 <PxMessagingTask+0xfdc>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	48aa      	ldr	r0, [pc, #680]	; (800aec0 <PxMessagingTask+0x1274>)
 800ac18:	4684      	mov	ip, r0
 800ac1a:	4462      	add	r2, ip
 800ac1c:	400a      	ands	r2, r1
 800ac1e:	49a6      	ldr	r1, [pc, #664]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ac20:	505a      	str	r2, [r3, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800ac22:	4ba3      	ldr	r3, [pc, #652]	; (800aeb0 <PxMessagingTask+0x1264>)
 800ac24:	2214      	movs	r2, #20
 800ac26:	701a      	strb	r2, [r3, #0]
							if(BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG){
 800ac28:	4ba6      	ldr	r3, [pc, #664]	; (800aec4 <PxMessagingTask+0x1278>)
 800ac2a:	799b      	ldrb	r3, [r3, #6]
 800ac2c:	2240      	movs	r2, #64	; 0x40
 800ac2e:	4393      	bics	r3, r2
 800ac30:	2700      	movs	r7, #0
 800ac32:	2b20      	cmp	r3, #32
 800ac34:	d001      	beq.n	800ac3a <PxMessagingTask+0xfee>
 800ac36:	f7ff f839 	bl	8009cac <PxMessagingTask+0x60>
								messageParams[0] =responseStatus;
 800ac3a:	4b9d      	ldr	r3, [pc, #628]	; (800aeb0 <PxMessagingTask+0x1264>)
 800ac3c:	781a      	ldrb	r2, [r3, #0]
 800ac3e:	4ba2      	ldr	r3, [pc, #648]	; (800aec8 <PxMessagingTask+0x127c>)
 800ac40:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800ac42:	2201      	movs	r2, #1
 800ac44:	2121      	movs	r1, #33	; 0x21
 800ac46:	9804      	ldr	r0, [sp, #16]
 800ac48:	f7fe fd3c 	bl	80096c4 <SendMessageToModule>
 800ac4c:	f7ff f82e 	bl	8009cac <PxMessagingTask+0x60>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ac50:	070a      	lsls	r2, r1, #28
 800ac52:	d10a      	bne.n	800ac6a <PxMessagingTask+0x101e>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800ac54:	2001      	movs	r0, #1
 800ac56:	f007 ff55 	bl	8012b04 <malloc>
 800ac5a:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800ac5c:	d100      	bne.n	800ac60 <PxMessagingTask+0x1014>
 800ac5e:	e369      	b.n	800b334 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ac60:	00a4      	lsls	r4, r4, #2
 800ac62:	0400      	lsls	r0, r0, #16
 800ac64:	3002      	adds	r0, #2
 800ac66:	4a94      	ldr	r2, [pc, #592]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ac68:	50a0      	str	r0, [r4, r2]
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800ac6a:	2138      	movs	r1, #56	; 0x38
 800ac6c:	4369      	muls	r1, r5
 800ac6e:	4a91      	ldr	r2, [pc, #580]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ac70:	1852      	adds	r2, r2, r1
 800ac72:	19d2      	adds	r2, r2, r7
 800ac74:	7892      	ldrb	r2, [r2, #2]
 800ac76:	b252      	sxtb	r2, r2
 800ac78:	701a      	strb	r2, [r3, #0]
 800ac7a:	e7bc      	b.n	800abf6 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ac7c:	070a      	lsls	r2, r1, #28
 800ac7e:	d10a      	bne.n	800ac96 <PxMessagingTask+0x104a>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800ac80:	2002      	movs	r0, #2
 800ac82:	f007 ff3f 	bl	8012b04 <malloc>
 800ac86:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800ac88:	d100      	bne.n	800ac8c <PxMessagingTask+0x1040>
 800ac8a:	e353      	b.n	800b334 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ac8c:	00a4      	lsls	r4, r4, #2
 800ac8e:	0400      	lsls	r0, r0, #16
 800ac90:	3003      	adds	r0, #3
 800ac92:	4a89      	ldr	r2, [pc, #548]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ac94:	50a0      	str	r0, [r4, r2]
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800ac96:	2138      	movs	r1, #56	; 0x38
 800ac98:	4369      	muls	r1, r5
 800ac9a:	4a86      	ldr	r2, [pc, #536]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ac9c:	1852      	adds	r2, r2, r1
 800ac9e:	19d2      	adds	r2, r2, r7
 800aca0:	78d1      	ldrb	r1, [r2, #3]
 800aca2:	0209      	lsls	r1, r1, #8
 800aca4:	7892      	ldrb	r2, [r2, #2]
 800aca6:	1852      	adds	r2, r2, r1
 800aca8:	b292      	uxth	r2, r2
 800acaa:	801a      	strh	r2, [r3, #0]
 800acac:	e7a3      	b.n	800abf6 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800acae:	070a      	lsls	r2, r1, #28
 800acb0:	d10a      	bne.n	800acc8 <PxMessagingTask+0x107c>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800acb2:	2002      	movs	r0, #2
 800acb4:	f007 ff26 	bl	8012b04 <malloc>
 800acb8:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800acba:	d100      	bne.n	800acbe <PxMessagingTask+0x1072>
 800acbc:	e33a      	b.n	800b334 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800acbe:	00a4      	lsls	r4, r4, #2
 800acc0:	0400      	lsls	r0, r0, #16
 800acc2:	3004      	adds	r0, #4
 800acc4:	4a7c      	ldr	r2, [pc, #496]	; (800aeb8 <PxMessagingTask+0x126c>)
 800acc6:	50a0      	str	r0, [r4, r2]
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800acc8:	2138      	movs	r1, #56	; 0x38
 800acca:	4369      	muls	r1, r5
 800accc:	4a79      	ldr	r2, [pc, #484]	; (800aeb4 <PxMessagingTask+0x1268>)
 800acce:	1852      	adds	r2, r2, r1
 800acd0:	19d2      	adds	r2, r2, r7
 800acd2:	78d1      	ldrb	r1, [r2, #3]
 800acd4:	0209      	lsls	r1, r1, #8
 800acd6:	7892      	ldrb	r2, [r2, #2]
 800acd8:	1852      	adds	r2, r2, r1
 800acda:	b212      	sxth	r2, r2
 800acdc:	801a      	strh	r2, [r3, #0]
 800acde:	e78a      	b.n	800abf6 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ace0:	070a      	lsls	r2, r1, #28
 800ace2:	d10a      	bne.n	800acfa <PxMessagingTask+0x10ae>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800ace4:	2004      	movs	r0, #4
 800ace6:	f007 ff0d 	bl	8012b04 <malloc>
 800acea:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800acec:	d100      	bne.n	800acf0 <PxMessagingTask+0x10a4>
 800acee:	e321      	b.n	800b334 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800acf0:	00a4      	lsls	r4, r4, #2
 800acf2:	0400      	lsls	r0, r0, #16
 800acf4:	3005      	adds	r0, #5
 800acf6:	4a70      	ldr	r2, [pc, #448]	; (800aeb8 <PxMessagingTask+0x126c>)
 800acf8:	50a0      	str	r0, [r4, r2]
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800acfa:	2238      	movs	r2, #56	; 0x38
 800acfc:	436a      	muls	r2, r5
 800acfe:	496d      	ldr	r1, [pc, #436]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ad00:	1889      	adds	r1, r1, r2
 800ad02:	19c9      	adds	r1, r1, r7
 800ad04:	78ca      	ldrb	r2, [r1, #3]
 800ad06:	0212      	lsls	r2, r2, #8
 800ad08:	7908      	ldrb	r0, [r1, #4]
 800ad0a:	0400      	lsls	r0, r0, #16
 800ad0c:	1812      	adds	r2, r2, r0
 800ad0e:	7888      	ldrb	r0, [r1, #2]
 800ad10:	1812      	adds	r2, r2, r0
 800ad12:	7949      	ldrb	r1, [r1, #5]
 800ad14:	0609      	lsls	r1, r1, #24
 800ad16:	1852      	adds	r2, r2, r1
 800ad18:	601a      	str	r2, [r3, #0]
 800ad1a:	e76c      	b.n	800abf6 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad1c:	070a      	lsls	r2, r1, #28
 800ad1e:	d10a      	bne.n	800ad36 <PxMessagingTask+0x10ea>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800ad20:	2004      	movs	r0, #4
 800ad22:	f007 feef 	bl	8012b04 <malloc>
 800ad26:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800ad28:	d100      	bne.n	800ad2c <PxMessagingTask+0x10e0>
 800ad2a:	e303      	b.n	800b334 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad2c:	00a4      	lsls	r4, r4, #2
 800ad2e:	0400      	lsls	r0, r0, #16
 800ad30:	3006      	adds	r0, #6
 800ad32:	4a61      	ldr	r2, [pc, #388]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ad34:	50a0      	str	r0, [r4, r2]
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800ad36:	2238      	movs	r2, #56	; 0x38
 800ad38:	436a      	muls	r2, r5
 800ad3a:	495e      	ldr	r1, [pc, #376]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ad3c:	1889      	adds	r1, r1, r2
 800ad3e:	19c9      	adds	r1, r1, r7
 800ad40:	78ca      	ldrb	r2, [r1, #3]
 800ad42:	0212      	lsls	r2, r2, #8
 800ad44:	7888      	ldrb	r0, [r1, #2]
 800ad46:	1812      	adds	r2, r2, r0
 800ad48:	7908      	ldrb	r0, [r1, #4]
 800ad4a:	0400      	lsls	r0, r0, #16
 800ad4c:	1812      	adds	r2, r2, r0
 800ad4e:	7949      	ldrb	r1, [r1, #5]
 800ad50:	0609      	lsls	r1, r1, #24
 800ad52:	1852      	adds	r2, r2, r1
 800ad54:	601a      	str	r2, [r3, #0]
 800ad56:	e74e      	b.n	800abf6 <PxMessagingTask+0xfaa>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800ad58:	070a      	lsls	r2, r1, #28
 800ad5a:	d10a      	bne.n	800ad72 <PxMessagingTask+0x1126>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800ad5c:	2004      	movs	r0, #4
 800ad5e:	f007 fed1 	bl	8012b04 <malloc>
 800ad62:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800ad64:	d100      	bne.n	800ad68 <PxMessagingTask+0x111c>
 800ad66:	e2e5      	b.n	800b334 <PxMessagingTask+0x16e8>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800ad68:	00a4      	lsls	r4, r4, #2
 800ad6a:	0400      	lsls	r0, r0, #16
 800ad6c:	3007      	adds	r0, #7
 800ad6e:	4a52      	ldr	r2, [pc, #328]	; (800aeb8 <PxMessagingTask+0x126c>)
 800ad70:	50a0      	str	r0, [r4, r2]
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800ad72:	2238      	movs	r2, #56	; 0x38
 800ad74:	436a      	muls	r2, r5
 800ad76:	494f      	ldr	r1, [pc, #316]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ad78:	1889      	adds	r1, r1, r2
 800ad7a:	19c9      	adds	r1, r1, r7
 800ad7c:	78ca      	ldrb	r2, [r1, #3]
 800ad7e:	0212      	lsls	r2, r2, #8
 800ad80:	7908      	ldrb	r0, [r1, #4]
 800ad82:	0400      	lsls	r0, r0, #16
 800ad84:	1812      	adds	r2, r2, r0
 800ad86:	7888      	ldrb	r0, [r1, #2]
 800ad88:	1812      	adds	r2, r2, r0
 800ad8a:	7949      	ldrb	r1, [r1, #5]
 800ad8c:	0609      	lsls	r1, r1, #24
 800ad8e:	1852      	adds	r2, r2, r1
 800ad90:	494e      	ldr	r1, [pc, #312]	; (800aecc <PxMessagingTask+0x1280>)
 800ad92:	600a      	str	r2, [r1, #0]
 800ad94:	2000      	movs	r0, #0
 800ad96:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800ad98:	601a      	str	r2, [r3, #0]
 800ad9a:	e72c      	b.n	800abf6 <PxMessagingTask+0xfaa>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800ad9c:	4b44      	ldr	r3, [pc, #272]	; (800aeb0 <PxMessagingTask+0x1264>)
 800ad9e:	2213      	movs	r2, #19
 800ada0:	701a      	strb	r2, [r3, #0]
 800ada2:	e741      	b.n	800ac28 <PxMessagingTask+0xfdc>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800ada4:	2238      	movs	r2, #56	; 0x38
 800ada6:	436a      	muls	r2, r5
 800ada8:	4b42      	ldr	r3, [pc, #264]	; (800aeb4 <PxMessagingTask+0x1268>)
 800adaa:	189b      	adds	r3, r3, r2
 800adac:	191b      	adds	r3, r3, r4
 800adae:	789c      	ldrb	r4, [r3, #2]
 800adb0:	0624      	lsls	r4, r4, #24
 800adb2:	78da      	ldrb	r2, [r3, #3]
 800adb4:	0412      	lsls	r2, r2, #16
 800adb6:	18a4      	adds	r4, r4, r2
 800adb8:	795a      	ldrb	r2, [r3, #5]
 800adba:	18a4      	adds	r4, r4, r2
 800adbc:	791b      	ldrb	r3, [r3, #4]
 800adbe:	021b      	lsls	r3, r3, #8
 800adc0:	18e4      	adds	r4, r4, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800adc2:	23e0      	movs	r3, #224	; 0xe0
 800adc4:	061b      	lsls	r3, r3, #24
 800adc6:	18e2      	adds	r2, r4, r3
 800adc8:	4b41      	ldr	r3, [pc, #260]	; (800aed0 <PxMessagingTask+0x1284>)
 800adca:	429a      	cmp	r2, r3
 800adcc:	d900      	bls.n	800add0 <PxMessagingTask+0x1184>
 800adce:	e083      	b.n	800aed8 <PxMessagingTask+0x128c>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800add0:	2238      	movs	r2, #56	; 0x38
 800add2:	436a      	muls	r2, r5
 800add4:	4b37      	ldr	r3, [pc, #220]	; (800aeb4 <PxMessagingTask+0x1268>)
 800add6:	189b      	adds	r3, r3, r2
 800add8:	19db      	adds	r3, r3, r7
 800adda:	785b      	ldrb	r3, [r3, #1]
 800addc:	3b01      	subs	r3, #1
 800adde:	b2da      	uxtb	r2, r3
 800ade0:	2a07      	cmp	r2, #7
 800ade2:	d900      	bls.n	800ade6 <PxMessagingTask+0x119a>
 800ade4:	e720      	b.n	800ac28 <PxMessagingTask+0xfdc>
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4a3a      	ldr	r2, [pc, #232]	; (800aed4 <PxMessagingTask+0x1288>)
 800adec:	58d3      	ldr	r3, [r2, r3]
 800adee:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800adf0:	2238      	movs	r2, #56	; 0x38
 800adf2:	436a      	muls	r2, r5
 800adf4:	4b2f      	ldr	r3, [pc, #188]	; (800aeb4 <PxMessagingTask+0x1268>)
 800adf6:	189b      	adds	r3, r3, r2
 800adf8:	19df      	adds	r7, r3, r7
 800adfa:	79bb      	ldrb	r3, [r7, #6]
 800adfc:	7023      	strb	r3, [r4, #0]
											break;
 800adfe:	e713      	b.n	800ac28 <PxMessagingTask+0xfdc>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800ae00:	2238      	movs	r2, #56	; 0x38
 800ae02:	436a      	muls	r2, r5
 800ae04:	4b2b      	ldr	r3, [pc, #172]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ae06:	189b      	adds	r3, r3, r2
 800ae08:	19df      	adds	r7, r3, r7
 800ae0a:	2306      	movs	r3, #6
 800ae0c:	56fb      	ldrsb	r3, [r7, r3]
 800ae0e:	7023      	strb	r3, [r4, #0]
											break;
 800ae10:	e70a      	b.n	800ac28 <PxMessagingTask+0xfdc>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800ae12:	2238      	movs	r2, #56	; 0x38
 800ae14:	436a      	muls	r2, r5
 800ae16:	4b27      	ldr	r3, [pc, #156]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ae18:	189b      	adds	r3, r3, r2
 800ae1a:	19df      	adds	r7, r3, r7
 800ae1c:	79fa      	ldrb	r2, [r7, #7]
 800ae1e:	0212      	lsls	r2, r2, #8
 800ae20:	79bb      	ldrb	r3, [r7, #6]
 800ae22:	189b      	adds	r3, r3, r2
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	8023      	strh	r3, [r4, #0]
											break;
 800ae28:	e6fe      	b.n	800ac28 <PxMessagingTask+0xfdc>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800ae2a:	2238      	movs	r2, #56	; 0x38
 800ae2c:	436a      	muls	r2, r5
 800ae2e:	4b21      	ldr	r3, [pc, #132]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ae30:	189b      	adds	r3, r3, r2
 800ae32:	19df      	adds	r7, r3, r7
 800ae34:	79fa      	ldrb	r2, [r7, #7]
 800ae36:	0212      	lsls	r2, r2, #8
 800ae38:	79bb      	ldrb	r3, [r7, #6]
 800ae3a:	189b      	adds	r3, r3, r2
 800ae3c:	b21b      	sxth	r3, r3
 800ae3e:	8023      	strh	r3, [r4, #0]
											break;
 800ae40:	e6f2      	b.n	800ac28 <PxMessagingTask+0xfdc>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800ae42:	2238      	movs	r2, #56	; 0x38
 800ae44:	436a      	muls	r2, r5
 800ae46:	4b1b      	ldr	r3, [pc, #108]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ae48:	189b      	adds	r3, r3, r2
 800ae4a:	19df      	adds	r7, r3, r7
 800ae4c:	79fb      	ldrb	r3, [r7, #7]
 800ae4e:	021b      	lsls	r3, r3, #8
 800ae50:	7a3a      	ldrb	r2, [r7, #8]
 800ae52:	0412      	lsls	r2, r2, #16
 800ae54:	189b      	adds	r3, r3, r2
 800ae56:	79ba      	ldrb	r2, [r7, #6]
 800ae58:	189b      	adds	r3, r3, r2
 800ae5a:	7a7a      	ldrb	r2, [r7, #9]
 800ae5c:	0612      	lsls	r2, r2, #24
 800ae5e:	189b      	adds	r3, r3, r2
 800ae60:	6023      	str	r3, [r4, #0]
											break;
 800ae62:	e6e1      	b.n	800ac28 <PxMessagingTask+0xfdc>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800ae64:	2238      	movs	r2, #56	; 0x38
 800ae66:	436a      	muls	r2, r5
 800ae68:	4b12      	ldr	r3, [pc, #72]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ae6a:	189b      	adds	r3, r3, r2
 800ae6c:	19df      	adds	r7, r3, r7
 800ae6e:	79fb      	ldrb	r3, [r7, #7]
 800ae70:	021b      	lsls	r3, r3, #8
 800ae72:	79ba      	ldrb	r2, [r7, #6]
 800ae74:	189b      	adds	r3, r3, r2
 800ae76:	7a3a      	ldrb	r2, [r7, #8]
 800ae78:	0412      	lsls	r2, r2, #16
 800ae7a:	189b      	adds	r3, r3, r2
 800ae7c:	7a7a      	ldrb	r2, [r7, #9]
 800ae7e:	0612      	lsls	r2, r2, #24
 800ae80:	189b      	adds	r3, r3, r2
 800ae82:	6023      	str	r3, [r4, #0]
											break;
 800ae84:	e6d0      	b.n	800ac28 <PxMessagingTask+0xfdc>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800ae86:	2238      	movs	r2, #56	; 0x38
 800ae88:	436a      	muls	r2, r5
 800ae8a:	4b0a      	ldr	r3, [pc, #40]	; (800aeb4 <PxMessagingTask+0x1268>)
 800ae8c:	189b      	adds	r3, r3, r2
 800ae8e:	19df      	adds	r7, r3, r7
 800ae90:	79fb      	ldrb	r3, [r7, #7]
 800ae92:	021b      	lsls	r3, r3, #8
 800ae94:	7a3a      	ldrb	r2, [r7, #8]
 800ae96:	0412      	lsls	r2, r2, #16
 800ae98:	189b      	adds	r3, r3, r2
 800ae9a:	79ba      	ldrb	r2, [r7, #6]
 800ae9c:	189b      	adds	r3, r3, r2
 800ae9e:	7a7a      	ldrb	r2, [r7, #9]
 800aea0:	0612      	lsls	r2, r2, #24
 800aea2:	189b      	adds	r3, r3, r2
 800aea4:	4a09      	ldr	r2, [pc, #36]	; (800aecc <PxMessagingTask+0x1280>)
 800aea6:	6013      	str	r3, [r2, #0]
 800aea8:	2100      	movs	r1, #0
 800aeaa:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800aeac:	6023      	str	r3, [r4, #0]
											break;
 800aeae:	e6bb      	b.n	800ac28 <PxMessagingTask+0xfdc>
 800aeb0:	20001110 	.word	0x20001110
 800aeb4:	20000d08 	.word	0x20000d08
 800aeb8:	2000694c 	.word	0x2000694c
 800aebc:	0801a338 	.word	0x0801a338
 800aec0:	0000fff0 	.word	0x0000fff0
 800aec4:	200069c4 	.word	0x200069c4
 800aec8:	20000f38 	.word	0x20000f38
 800aecc:	20001108 	.word	0x20001108
 800aed0:	00007fff 	.word	0x00007fff
 800aed4:	0801a358 	.word	0x0801a358
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800aed8:	4adc      	ldr	r2, [pc, #880]	; (800b24c <PxMessagingTask+0x1600>)
 800aeda:	23f8      	movs	r3, #248	; 0xf8
 800aedc:	061b      	lsls	r3, r3, #24
 800aede:	18e3      	adds	r3, r4, r3
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d900      	bls.n	800aee6 <PxMessagingTask+0x129a>
 800aee4:	e0a7      	b.n	800b036 <PxMessagingTask+0x13ea>
									HAL_FLASH_Unlock();
 800aee6:	f005 fd8d 	bl	8010a04 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800aeea:	4643      	mov	r3, r8
 800aeec:	2b22      	cmp	r3, #34	; 0x22
 800aeee:	d111      	bne.n	800af14 <PxMessagingTask+0x12c8>
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800aef0:	2300      	movs	r3, #0
 800aef2:	9313      	str	r3, [sp, #76]	; 0x4c
										erase.PageAddress =temp32;
 800aef4:	9414      	str	r4, [sp, #80]	; 0x50
										erase.NbPages =1;
 800aef6:	3301      	adds	r3, #1
 800aef8:	9315      	str	r3, [sp, #84]	; 0x54
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800aefa:	a912      	add	r1, sp, #72	; 0x48
 800aefc:	a813      	add	r0, sp, #76	; 0x4c
 800aefe:	f005 fe55 	bl	8010bac <HAL_FLASHEx_Erase>
 800af02:	900a      	str	r0, [sp, #40]	; 0x28
										if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800af04:	2800      	cmp	r0, #0
 800af06:	d102      	bne.n	800af0e <PxMessagingTask+0x12c2>
 800af08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af0a:	3301      	adds	r3, #1
 800af0c:	d002      	beq.n	800af14 <PxMessagingTask+0x12c8>
											responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800af0e:	4bd0      	ldr	r3, [pc, #832]	; (800b250 <PxMessagingTask+0x1604>)
 800af10:	2216      	movs	r2, #22
 800af12:	701a      	strb	r2, [r3, #0]
									if(responseStatus == BOS_OK){
 800af14:	4bce      	ldr	r3, [pc, #824]	; (800b250 <PxMessagingTask+0x1604>)
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d116      	bne.n	800af4a <PxMessagingTask+0x12fe>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800af1c:	2238      	movs	r2, #56	; 0x38
 800af1e:	436a      	muls	r2, r5
 800af20:	4bcc      	ldr	r3, [pc, #816]	; (800b254 <PxMessagingTask+0x1608>)
 800af22:	189b      	adds	r3, r3, r2
 800af24:	19db      	adds	r3, r3, r7
 800af26:	785b      	ldrb	r3, [r3, #1]
 800af28:	3b01      	subs	r3, #1
 800af2a:	b2da      	uxtb	r2, r3
 800af2c:	2a07      	cmp	r2, #7
 800af2e:	d80c      	bhi.n	800af4a <PxMessagingTask+0x12fe>
 800af30:	b2db      	uxtb	r3, r3
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4ac8      	ldr	r2, [pc, #800]	; (800b258 <PxMessagingTask+0x160c>)
 800af36:	58d3      	ldr	r3, [r2, r3]
 800af38:	469f      	mov	pc, r3
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800af3a:	8823      	ldrh	r3, [r4, #0]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	4ac7      	ldr	r2, [pc, #796]	; (800b25c <PxMessagingTask+0x1610>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d00c      	beq.n	800af5e <PxMessagingTask+0x1312>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800af44:	4bc2      	ldr	r3, [pc, #776]	; (800b250 <PxMessagingTask+0x1604>)
 800af46:	2216      	movs	r2, #22
 800af48:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800af4a:	f005 fd6d 	bl	8010a28 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800af4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af50:	2b00      	cmp	r3, #0
 800af52:	d100      	bne.n	800af56 <PxMessagingTask+0x130a>
 800af54:	e668      	b.n	800ac28 <PxMessagingTask+0xfdc>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800af56:	4bbe      	ldr	r3, [pc, #760]	; (800b250 <PxMessagingTask+0x1604>)
 800af58:	2216      	movs	r2, #22
 800af5a:	701a      	strb	r2, [r3, #0]
 800af5c:	e664      	b.n	800ac28 <PxMessagingTask+0xfdc>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800af5e:	2238      	movs	r2, #56	; 0x38
 800af60:	436a      	muls	r2, r5
 800af62:	4bbc      	ldr	r3, [pc, #752]	; (800b254 <PxMessagingTask+0x1608>)
 800af64:	189b      	adds	r3, r3, r2
 800af66:	19df      	adds	r7, r3, r7
 800af68:	79ba      	ldrb	r2, [r7, #6]
 800af6a:	2300      	movs	r3, #0
 800af6c:	49bc      	ldr	r1, [pc, #752]	; (800b260 <PxMessagingTask+0x1614>)
 800af6e:	600a      	str	r2, [r1, #0]
 800af70:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800af72:	0021      	movs	r1, r4
 800af74:	2001      	movs	r0, #1
 800af76:	f005 fd8f 	bl	8010a98 <HAL_FLASH_Program>
 800af7a:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800af7c:	e7e5      	b.n	800af4a <PxMessagingTask+0x12fe>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800af7e:	8823      	ldrh	r3, [r4, #0]
 800af80:	b29b      	uxth	r3, r3
 800af82:	4ab6      	ldr	r2, [pc, #728]	; (800b25c <PxMessagingTask+0x1610>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d003      	beq.n	800af90 <PxMessagingTask+0x1344>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800af88:	4bb1      	ldr	r3, [pc, #708]	; (800b250 <PxMessagingTask+0x1604>)
 800af8a:	2216      	movs	r2, #22
 800af8c:	701a      	strb	r2, [r3, #0]
													break;
 800af8e:	e7dc      	b.n	800af4a <PxMessagingTask+0x12fe>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800af90:	2238      	movs	r2, #56	; 0x38
 800af92:	436a      	muls	r2, r5
 800af94:	4baf      	ldr	r3, [pc, #700]	; (800b254 <PxMessagingTask+0x1608>)
 800af96:	189b      	adds	r3, r3, r2
 800af98:	19df      	adds	r7, r3, r7
 800af9a:	79fa      	ldrb	r2, [r7, #7]
 800af9c:	0212      	lsls	r2, r2, #8
 800af9e:	79bb      	ldrb	r3, [r7, #6]
 800afa0:	18d2      	adds	r2, r2, r3
 800afa2:	17d3      	asrs	r3, r2, #31
 800afa4:	49ae      	ldr	r1, [pc, #696]	; (800b260 <PxMessagingTask+0x1614>)
 800afa6:	600a      	str	r2, [r1, #0]
 800afa8:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800afaa:	0021      	movs	r1, r4
 800afac:	2001      	movs	r0, #1
 800afae:	f005 fd73 	bl	8010a98 <HAL_FLASH_Program>
 800afb2:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800afb4:	e7c9      	b.n	800af4a <PxMessagingTask+0x12fe>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800afb6:	6823      	ldr	r3, [r4, #0]
 800afb8:	3301      	adds	r3, #1
 800afba:	d003      	beq.n	800afc4 <PxMessagingTask+0x1378>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800afbc:	4ba4      	ldr	r3, [pc, #656]	; (800b250 <PxMessagingTask+0x1604>)
 800afbe:	2216      	movs	r2, #22
 800afc0:	701a      	strb	r2, [r3, #0]
													break;
 800afc2:	e7c2      	b.n	800af4a <PxMessagingTask+0x12fe>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800afc4:	2238      	movs	r2, #56	; 0x38
 800afc6:	436a      	muls	r2, r5
 800afc8:	4ba2      	ldr	r3, [pc, #648]	; (800b254 <PxMessagingTask+0x1608>)
 800afca:	189b      	adds	r3, r3, r2
 800afcc:	19df      	adds	r7, r3, r7
 800afce:	79fa      	ldrb	r2, [r7, #7]
 800afd0:	0212      	lsls	r2, r2, #8
 800afd2:	7a3b      	ldrb	r3, [r7, #8]
 800afd4:	041b      	lsls	r3, r3, #16
 800afd6:	18d2      	adds	r2, r2, r3
 800afd8:	79bb      	ldrb	r3, [r7, #6]
 800afda:	18d2      	adds	r2, r2, r3
 800afdc:	7a7b      	ldrb	r3, [r7, #9]
 800afde:	061b      	lsls	r3, r3, #24
 800afe0:	18d2      	adds	r2, r2, r3
 800afe2:	2300      	movs	r3, #0
 800afe4:	499e      	ldr	r1, [pc, #632]	; (800b260 <PxMessagingTask+0x1614>)
 800afe6:	600a      	str	r2, [r1, #0]
 800afe8:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800afea:	0021      	movs	r1, r4
 800afec:	2002      	movs	r0, #2
 800afee:	f005 fd53 	bl	8010a98 <HAL_FLASH_Program>
 800aff2:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800aff4:	e7a9      	b.n	800af4a <PxMessagingTask+0x12fe>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800aff6:	6823      	ldr	r3, [r4, #0]
 800aff8:	3301      	adds	r3, #1
 800affa:	d003      	beq.n	800b004 <PxMessagingTask+0x13b8>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800affc:	4b94      	ldr	r3, [pc, #592]	; (800b250 <PxMessagingTask+0x1604>)
 800affe:	2216      	movs	r2, #22
 800b000:	701a      	strb	r2, [r3, #0]
													break;
 800b002:	e7a2      	b.n	800af4a <PxMessagingTask+0x12fe>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b004:	2238      	movs	r2, #56	; 0x38
 800b006:	436a      	muls	r2, r5
 800b008:	4b92      	ldr	r3, [pc, #584]	; (800b254 <PxMessagingTask+0x1608>)
 800b00a:	189b      	adds	r3, r3, r2
 800b00c:	19df      	adds	r7, r3, r7
 800b00e:	79fa      	ldrb	r2, [r7, #7]
 800b010:	0212      	lsls	r2, r2, #8
 800b012:	7a3b      	ldrb	r3, [r7, #8]
 800b014:	041b      	lsls	r3, r3, #16
 800b016:	18d2      	adds	r2, r2, r3
 800b018:	79bb      	ldrb	r3, [r7, #6]
 800b01a:	18d2      	adds	r2, r2, r3
 800b01c:	7a7b      	ldrb	r3, [r7, #9]
 800b01e:	061b      	lsls	r3, r3, #24
 800b020:	18d2      	adds	r2, r2, r3
 800b022:	2300      	movs	r3, #0
 800b024:	498e      	ldr	r1, [pc, #568]	; (800b260 <PxMessagingTask+0x1614>)
 800b026:	600a      	str	r2, [r1, #0]
 800b028:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b02a:	0021      	movs	r1, r4
 800b02c:	2003      	movs	r0, #3
 800b02e:	f005 fd33 	bl	8010a98 <HAL_FLASH_Program>
 800b032:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b034:	e789      	b.n	800af4a <PxMessagingTask+0x12fe>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800b036:	4b86      	ldr	r3, [pc, #536]	; (800b250 <PxMessagingTask+0x1604>)
 800b038:	2215      	movs	r2, #21
 800b03a:	701a      	strb	r2, [r3, #0]
 800b03c:	e5f4      	b.n	800ac28 <PxMessagingTask+0xfdc>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800b03e:	4b85      	ldr	r3, [pc, #532]	; (800b254 <PxMessagingTask+0x1608>)
 800b040:	199b      	adds	r3, r3, r6
 800b042:	5d1a      	ldrb	r2, [r3, r4]
 800b044:	4b82      	ldr	r3, [pc, #520]	; (800b250 <PxMessagingTask+0x1604>)
 800b046:	701a      	strb	r2, [r3, #0]
							break;
 800b048:	2700      	movs	r7, #0
 800b04a:	f7fe fe2f 	bl	8009cac <PxMessagingTask+0x60>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800b04e:	9a06      	ldr	r2, [sp, #24]
 800b050:	3a01      	subs	r2, #1
 800b052:	b292      	uxth	r2, r2
 800b054:	1c61      	adds	r1, r4, #1
 800b056:	4451      	add	r1, sl
 800b058:	4b7e      	ldr	r3, [pc, #504]	; (800b254 <PxMessagingTask+0x1608>)
 800b05a:	18c9      	adds	r1, r1, r3
 800b05c:	199b      	adds	r3, r3, r6
 800b05e:	5d18      	ldrb	r0, [r3, r4]
 800b060:	230a      	movs	r3, #10
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	f002 f9b4 	bl	800d3d0 <writePxMutex>
							break;
 800b068:	2700      	movs	r7, #0
 800b06a:	f7fe fe1f 	bl	8009cac <PxMessagingTask+0x60>
							switch(cMessage[port - 1][0 + shift]){
 800b06e:	9406      	str	r4, [sp, #24]
 800b070:	4b78      	ldr	r3, [pc, #480]	; (800b254 <PxMessagingTask+0x1608>)
 800b072:	199b      	adds	r3, r3, r6
 800b074:	5d18      	ldrb	r0, [r3, r4]
 800b076:	282b      	cmp	r0, #43	; 0x2b
 800b078:	d900      	bls.n	800b07c <PxMessagingTask+0x1430>
 800b07a:	e0a9      	b.n	800b1d0 <PxMessagingTask+0x1584>
 800b07c:	0083      	lsls	r3, r0, #2
 800b07e:	4a79      	ldr	r2, [pc, #484]	; (800b264 <PxMessagingTask+0x1618>)
 800b080:	58d3      	ldr	r3, [r2, r3]
 800b082:	469f      	mov	pc, r3
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b084:	2338      	movs	r3, #56	; 0x38
 800b086:	436b      	muls	r3, r5
 800b088:	4f72      	ldr	r7, [pc, #456]	; (800b254 <PxMessagingTask+0x1608>)
 800b08a:	18ff      	adds	r7, r7, r3
 800b08c:	9b06      	ldr	r3, [sp, #24]
 800b08e:	469c      	mov	ip, r3
 800b090:	4467      	add	r7, ip
 800b092:	78bb      	ldrb	r3, [r7, #2]
 800b094:	021b      	lsls	r3, r3, #8
 800b096:	78fa      	ldrb	r2, [r7, #3]
 800b098:	0412      	lsls	r2, r2, #16
 800b09a:	189b      	adds	r3, r3, r2
 800b09c:	787a      	ldrb	r2, [r7, #1]
 800b09e:	189b      	adds	r3, r3, r2
 800b0a0:	793a      	ldrb	r2, [r7, #4]
 800b0a2:	0612      	lsls	r2, r2, #24
 800b0a4:	189b      	adds	r3, r3, r2
 800b0a6:	4a70      	ldr	r2, [pc, #448]	; (800b268 <PxMessagingTask+0x161c>)
 800b0a8:	6013      	str	r3, [r2, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b0aa:	79bb      	ldrb	r3, [r7, #6]
 800b0ac:	021b      	lsls	r3, r3, #8
 800b0ae:	79f9      	ldrb	r1, [r7, #7]
 800b0b0:	0409      	lsls	r1, r1, #16
 800b0b2:	185b      	adds	r3, r3, r1
 800b0b4:	7979      	ldrb	r1, [r7, #5]
 800b0b6:	185b      	adds	r3, r3, r1
 800b0b8:	7a39      	ldrb	r1, [r7, #8]
 800b0ba:	0609      	lsls	r1, r1, #24
 800b0bc:	185b      	adds	r3, r3, r1
 800b0be:	6053      	str	r3, [r2, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b0c0:	7abb      	ldrb	r3, [r7, #10]
 800b0c2:	021b      	lsls	r3, r3, #8
 800b0c4:	7af9      	ldrb	r1, [r7, #11]
 800b0c6:	0409      	lsls	r1, r1, #16
 800b0c8:	185b      	adds	r3, r3, r1
 800b0ca:	7a79      	ldrb	r1, [r7, #9]
 800b0cc:	185b      	adds	r3, r3, r1
 800b0ce:	7b39      	ldrb	r1, [r7, #12]
 800b0d0:	0609      	lsls	r1, r1, #24
 800b0d2:	185b      	adds	r3, r3, r1
 800b0d4:	6093      	str	r3, [r2, #8]
									break;
 800b0d6:	e07b      	b.n	800b1d0 <PxMessagingTask+0x1584>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b0d8:	2338      	movs	r3, #56	; 0x38
 800b0da:	436b      	muls	r3, r5
 800b0dc:	4f5d      	ldr	r7, [pc, #372]	; (800b254 <PxMessagingTask+0x1608>)
 800b0de:	18ff      	adds	r7, r7, r3
 800b0e0:	9b06      	ldr	r3, [sp, #24]
 800b0e2:	469c      	mov	ip, r3
 800b0e4:	4467      	add	r7, ip
 800b0e6:	78bb      	ldrb	r3, [r7, #2]
 800b0e8:	021b      	lsls	r3, r3, #8
 800b0ea:	78fa      	ldrb	r2, [r7, #3]
 800b0ec:	0412      	lsls	r2, r2, #16
 800b0ee:	189b      	adds	r3, r3, r2
 800b0f0:	787a      	ldrb	r2, [r7, #1]
 800b0f2:	189b      	adds	r3, r3, r2
 800b0f4:	793a      	ldrb	r2, [r7, #4]
 800b0f6:	0612      	lsls	r2, r2, #24
 800b0f8:	189b      	adds	r3, r3, r2
 800b0fa:	4a5b      	ldr	r2, [pc, #364]	; (800b268 <PxMessagingTask+0x161c>)
 800b0fc:	60d3      	str	r3, [r2, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b0fe:	79bb      	ldrb	r3, [r7, #6]
 800b100:	021b      	lsls	r3, r3, #8
 800b102:	79f9      	ldrb	r1, [r7, #7]
 800b104:	0409      	lsls	r1, r1, #16
 800b106:	185b      	adds	r3, r3, r1
 800b108:	7979      	ldrb	r1, [r7, #5]
 800b10a:	185b      	adds	r3, r3, r1
 800b10c:	7a39      	ldrb	r1, [r7, #8]
 800b10e:	0609      	lsls	r1, r1, #24
 800b110:	185b      	adds	r3, r3, r1
 800b112:	6113      	str	r3, [r2, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b114:	7abb      	ldrb	r3, [r7, #10]
 800b116:	021b      	lsls	r3, r3, #8
 800b118:	7af9      	ldrb	r1, [r7, #11]
 800b11a:	0409      	lsls	r1, r1, #16
 800b11c:	185b      	adds	r3, r3, r1
 800b11e:	7a79      	ldrb	r1, [r7, #9]
 800b120:	185b      	adds	r3, r3, r1
 800b122:	7b39      	ldrb	r1, [r7, #12]
 800b124:	0609      	lsls	r1, r1, #24
 800b126:	185b      	adds	r3, r3, r1
 800b128:	6153      	str	r3, [r2, #20]
									break;
 800b12a:	e051      	b.n	800b1d0 <PxMessagingTask+0x1584>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b12c:	2338      	movs	r3, #56	; 0x38
 800b12e:	436b      	muls	r3, r5
 800b130:	4a48      	ldr	r2, [pc, #288]	; (800b254 <PxMessagingTask+0x1608>)
 800b132:	18d2      	adds	r2, r2, r3
 800b134:	9b06      	ldr	r3, [sp, #24]
 800b136:	469c      	mov	ip, r3
 800b138:	4462      	add	r2, ip
 800b13a:	7893      	ldrb	r3, [r2, #2]
 800b13c:	021b      	lsls	r3, r3, #8
 800b13e:	78d1      	ldrb	r1, [r2, #3]
 800b140:	0409      	lsls	r1, r1, #16
 800b142:	185b      	adds	r3, r3, r1
 800b144:	7851      	ldrb	r1, [r2, #1]
 800b146:	185b      	adds	r3, r3, r1
 800b148:	7912      	ldrb	r2, [r2, #4]
 800b14a:	0612      	lsls	r2, r2, #24
 800b14c:	189b      	adds	r3, r3, r2
 800b14e:	4a46      	ldr	r2, [pc, #280]	; (800b268 <PxMessagingTask+0x161c>)
 800b150:	6193      	str	r3, [r2, #24]
									ADCPort =cMessage[port - 1][shift];
 800b152:	4b46      	ldr	r3, [pc, #280]	; (800b26c <PxMessagingTask+0x1620>)
 800b154:	8018      	strh	r0, [r3, #0]
									ADCSide =cMessage[port - 1][shift + 1];
 800b156:	2238      	movs	r2, #56	; 0x38
 800b158:	436a      	muls	r2, r5
 800b15a:	4b3e      	ldr	r3, [pc, #248]	; (800b254 <PxMessagingTask+0x1608>)
 800b15c:	189b      	adds	r3, r3, r2
 800b15e:	9a06      	ldr	r2, [sp, #24]
 800b160:	4694      	mov	ip, r2
 800b162:	4463      	add	r3, ip
 800b164:	785b      	ldrb	r3, [r3, #1]
 800b166:	4a42      	ldr	r2, [pc, #264]	; (800b270 <PxMessagingTask+0x1624>)
 800b168:	8013      	strh	r3, [r2, #0]
									if(0 == ADCSide){
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d146      	bne.n	800b1fc <PxMessagingTask+0x15b0>
										ADCSelectChannel(ADCPort,"top");
 800b16e:	4f41      	ldr	r7, [pc, #260]	; (800b274 <PxMessagingTask+0x1628>)
 800b170:	0039      	movs	r1, r7
 800b172:	f7fd fc9b 	bl	8008aac <ADCSelectChannel>
										ReadADCChannel(ADCPort,"top",&ADCValue);
 800b176:	4b3d      	ldr	r3, [pc, #244]	; (800b26c <PxMessagingTask+0x1620>)
 800b178:	7818      	ldrb	r0, [r3, #0]
 800b17a:	4a3f      	ldr	r2, [pc, #252]	; (800b278 <PxMessagingTask+0x162c>)
 800b17c:	0039      	movs	r1, r7
 800b17e:	f7fd fcc3 	bl	8008b08 <ReadADCChannel>
									ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800b182:	493e      	ldr	r1, [pc, #248]	; (800b27c <PxMessagingTask+0x1630>)
 800b184:	483e      	ldr	r0, [pc, #248]	; (800b280 <PxMessagingTask+0x1634>)
 800b186:	f7fd fb09 	bl	800879c <ReadTempAndVref>
									ADCPort =cMessage[port - 1][shift];
 800b18a:	4f32      	ldr	r7, [pc, #200]	; (800b254 <PxMessagingTask+0x1608>)
 800b18c:	19bf      	adds	r7, r7, r6
 800b18e:	9b06      	ldr	r3, [sp, #24]
 800b190:	5cf8      	ldrb	r0, [r7, r3]
 800b192:	4b36      	ldr	r3, [pc, #216]	; (800b26c <PxMessagingTask+0x1620>)
 800b194:	8018      	strh	r0, [r3, #0]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800b196:	493b      	ldr	r1, [pc, #236]	; (800b284 <PxMessagingTask+0x1638>)
 800b198:	f7fd fbbe 	bl	8008918 <GetReadPrecentage>
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b19c:	9b06      	ldr	r3, [sp, #24]
 800b19e:	469c      	mov	ip, r3
 800b1a0:	4467      	add	r7, ip
 800b1a2:	79bb      	ldrb	r3, [r7, #6]
 800b1a4:	021b      	lsls	r3, r3, #8
 800b1a6:	79fa      	ldrb	r2, [r7, #7]
 800b1a8:	0412      	lsls	r2, r2, #16
 800b1aa:	189b      	adds	r3, r3, r2
 800b1ac:	797a      	ldrb	r2, [r7, #5]
 800b1ae:	189b      	adds	r3, r3, r2
 800b1b0:	7a3a      	ldrb	r2, [r7, #8]
 800b1b2:	0612      	lsls	r2, r2, #24
 800b1b4:	189b      	adds	r3, r3, r2
 800b1b6:	4a2c      	ldr	r2, [pc, #176]	; (800b268 <PxMessagingTask+0x161c>)
 800b1b8:	61d3      	str	r3, [r2, #28]
									MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b1ba:	7abb      	ldrb	r3, [r7, #10]
 800b1bc:	021b      	lsls	r3, r3, #8
 800b1be:	7af9      	ldrb	r1, [r7, #11]
 800b1c0:	0409      	lsls	r1, r1, #16
 800b1c2:	185b      	adds	r3, r3, r1
 800b1c4:	7a79      	ldrb	r1, [r7, #9]
 800b1c6:	185b      	adds	r3, r3, r1
 800b1c8:	7b39      	ldrb	r1, [r7, #12]
 800b1ca:	0609      	lsls	r1, r1, #24
 800b1cc:	185b      	adds	r3, r3, r1
 800b1ce:	6213      	str	r3, [r2, #32]
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800b1d0:	9400      	str	r4, [sp, #0]
 800b1d2:	464b      	mov	r3, r9
 800b1d4:	9a04      	ldr	r2, [sp, #16]
 800b1d6:	9908      	ldr	r1, [sp, #32]
 800b1d8:	4640      	mov	r0, r8
 800b1da:	f7fe fd35 	bl	8009c48 <User_MessagingParser>
 800b1de:	0007      	movs	r7, r0
							if(result == BOS_ERR_UnknownMessage){
 800b1e0:	2801      	cmp	r0, #1
 800b1e2:	d001      	beq.n	800b1e8 <PxMessagingTask+0x159c>
 800b1e4:	f7fe fd62 	bl	8009cac <PxMessagingTask+0x60>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800b1e8:	9400      	str	r4, [sp, #0]
 800b1ea:	464b      	mov	r3, r9
 800b1ec:	9a04      	ldr	r2, [sp, #16]
 800b1ee:	9908      	ldr	r1, [sp, #32]
 800b1f0:	4640      	mov	r0, r8
 800b1f2:	f000 fa44 	bl	800b67e <Module_MessagingTask>
 800b1f6:	0007      	movs	r7, r0
 800b1f8:	f7fe fd54 	bl	8009ca4 <PxMessagingTask+0x58>
									else if(1 == ADCSide){
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d1c0      	bne.n	800b182 <PxMessagingTask+0x1536>
										ADCSelectChannel(ADCPort,"bottom");
 800b200:	4f21      	ldr	r7, [pc, #132]	; (800b288 <PxMessagingTask+0x163c>)
 800b202:	0039      	movs	r1, r7
 800b204:	f7fd fc52 	bl	8008aac <ADCSelectChannel>
										ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800b208:	4b18      	ldr	r3, [pc, #96]	; (800b26c <PxMessagingTask+0x1620>)
 800b20a:	7818      	ldrb	r0, [r3, #0]
 800b20c:	4a1a      	ldr	r2, [pc, #104]	; (800b278 <PxMessagingTask+0x162c>)
 800b20e:	0039      	movs	r1, r7
 800b210:	f7fd fc7a 	bl	8008b08 <ReadADCChannel>
 800b214:	e7b5      	b.n	800b182 <PxMessagingTask+0x1536>
								switch(cMessage[port - 1][1 + shift]) // requested format
 800b216:	2700      	movs	r7, #0
 800b218:	f7fe fd44 	bl	8009ca4 <PxMessagingTask+0x58>
									switch(messageParams[0]) // requested format
 800b21c:	2700      	movs	r7, #0
 800b21e:	f7fe fd41 	bl	8009ca4 <PxMessagingTask+0x58>
									switch(messageParams[0]) // requested format
 800b222:	2700      	movs	r7, #0
 800b224:	f7fe fd3e 	bl	8009ca4 <PxMessagingTask+0x58>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800b228:	2200      	movs	r2, #0
 800b22a:	2100      	movs	r1, #0
 800b22c:	9804      	ldr	r0, [sp, #16]
 800b22e:	f7fe fa49 	bl	80096c4 <SendMessageToModule>
			result =BOS_OK;
 800b232:	2700      	movs	r7, #0
 800b234:	f7fe fd3a 	bl	8009cac <PxMessagingTask+0x60>
					switch(code){
 800b238:	2700      	movs	r7, #0
 800b23a:	f7fe fd37 	bl	8009cac <PxMessagingTask+0x60>
 800b23e:	9205      	str	r2, [sp, #20]
 800b240:	2700      	movs	r7, #0
 800b242:	f7fe fd33 	bl	8009cac <PxMessagingTask+0x60>
 800b246:	2700      	movs	r7, #0
 800b248:	f7fe fd30 	bl	8009cac <PxMessagingTask+0x60>
 800b24c:	0001ffff 	.word	0x0001ffff
 800b250:	20001110 	.word	0x20001110
 800b254:	20000d08 	.word	0x20000d08
 800b258:	0801a378 	.word	0x0801a378
 800b25c:	0000ffff 	.word	0x0000ffff
 800b260:	20001108 	.word	0x20001108
 800b264:	0801a398 	.word	0x0801a398
 800b268:	200015cc 	.word	0x200015cc
 800b26c:	200015bc 	.word	0x200015bc
 800b270:	200015be 	.word	0x200015be
 800b274:	0801834c 	.word	0x0801834c
 800b278:	200015c0 	.word	0x200015c0
 800b27c:	200015c8 	.word	0x200015c8
 800b280:	200015c4 	.word	0x200015c4
 800b284:	200015b8 	.word	0x200015b8
 800b288:	08018350 	.word	0x08018350
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800b28c:	454b      	cmp	r3, r9
 800b28e:	d004      	beq.n	800b29a <PxMessagingTask+0x164e>
 800b290:	4643      	mov	r3, r8
 800b292:	2b10      	cmp	r3, #16
 800b294:	d001      	beq.n	800b29a <PxMessagingTask+0x164e>
 800b296:	f7fe fd5c 	bl	8009d52 <PxMessagingTask+0x106>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b29a:	464b      	mov	r3, r9
 800b29c:	2bff      	cmp	r3, #255	; 0xff
 800b29e:	d101      	bne.n	800b2a4 <PxMessagingTask+0x1658>
 800b2a0:	f7fe fd79 	bl	8009d96 <PxMessagingTask+0x14a>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b2a4:	2bfe      	cmp	r3, #254	; 0xfe
 800b2a6:	d001      	beq.n	800b2ac <PxMessagingTask+0x1660>
 800b2a8:	f7fe fd7f 	bl	8009daa <PxMessagingTask+0x15e>
 800b2ac:	4b29      	ldr	r3, [pc, #164]	; (800b354 <PxMessagingTask+0x1708>)
 800b2ae:	199b      	adds	r3, r3, r6
 800b2b0:	1859      	adds	r1, r3, r1
 800b2b2:	3901      	subs	r1, #1
 800b2b4:	780b      	ldrb	r3, [r1, #0]
 800b2b6:	4a28      	ldr	r2, [pc, #160]	; (800b358 <PxMessagingTask+0x170c>)
 800b2b8:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 800b2ba:	2703      	movs	r7, #3
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d101      	bne.n	800b2c4 <PxMessagingTask+0x1678>
 800b2c0:	f7fe fcf0 	bl	8009ca4 <PxMessagingTask+0x58>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800b2c4:	4a24      	ldr	r2, [pc, #144]	; (800b358 <PxMessagingTask+0x170c>)
 800b2c6:	7013      	strb	r3, [r2, #0]
 800b2c8:	4a24      	ldr	r2, [pc, #144]	; (800b35c <PxMessagingTask+0x1710>)
 800b2ca:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800b2cc:	9908      	ldr	r1, [sp, #32]
 800b2ce:	20fe      	movs	r0, #254	; 0xfe
 800b2d0:	f7fe f9b0 	bl	8009634 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800b2d4:	4b22      	ldr	r3, [pc, #136]	; (800b360 <PxMessagingTask+0x1714>)
 800b2d6:	5d59      	ldrb	r1, [r3, r5]
 800b2d8:	4b1e      	ldr	r3, [pc, #120]	; (800b354 <PxMessagingTask+0x1708>)
 800b2da:	199b      	adds	r3, r3, r6
 800b2dc:	185a      	adds	r2, r3, r1
 800b2de:	3a01      	subs	r2, #1
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	7010      	strb	r0, [r2, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800b2e4:	1e8a      	subs	r2, r1, #2
 800b2e6:	5c9c      	ldrb	r4, [r3, r2]
 800b2e8:	9405      	str	r4, [sp, #20]
					for(i =0; i < temp; i++){
 800b2ea:	2c00      	cmp	r4, #0
 800b2ec:	d02e      	beq.n	800b34c <PxMessagingTask+0x1700>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800b2ee:	1b13      	subs	r3, r2, r4
 800b2f0:	469c      	mov	ip, r3
 800b2f2:	4b1c      	ldr	r3, [pc, #112]	; (800b364 <PxMessagingTask+0x1718>)
 800b2f4:	7818      	ldrb	r0, [r3, #0]
 800b2f6:	4b17      	ldr	r3, [pc, #92]	; (800b354 <PxMessagingTask+0x1708>)
 800b2f8:	199b      	adds	r3, r3, r6
 800b2fa:	4662      	mov	r2, ip
 800b2fc:	5c9b      	ldrb	r3, [r3, r2]
 800b2fe:	4283      	cmp	r3, r0
 800b300:	d011      	beq.n	800b326 <PxMessagingTask+0x16da>
 800b302:	4653      	mov	r3, sl
 800b304:	3301      	adds	r3, #1
 800b306:	4463      	add	r3, ip
 800b308:	4a12      	ldr	r2, [pc, #72]	; (800b354 <PxMessagingTask+0x1708>)
 800b30a:	189b      	adds	r3, r3, r2
 800b30c:	3201      	adds	r2, #1
 800b30e:	4452      	add	r2, sl
 800b310:	1e67      	subs	r7, r4, #1
 800b312:	b2ff      	uxtb	r7, r7
 800b314:	19d2      	adds	r2, r2, r7
 800b316:	4462      	add	r2, ip
					for(i =0; i < temp; i++){
 800b318:	4293      	cmp	r3, r2
 800b31a:	d017      	beq.n	800b34c <PxMessagingTask+0x1700>
 800b31c:	3301      	adds	r3, #1
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800b31e:	1e5c      	subs	r4, r3, #1
 800b320:	7824      	ldrb	r4, [r4, #0]
 800b322:	4284      	cmp	r4, r0
 800b324:	d1f8      	bne.n	800b318 <PxMessagingTask+0x16cc>
				shift +=4;
 800b326:	9c06      	ldr	r4, [sp, #24]
 800b328:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800b32a:	1b0a      	subs	r2, r1, r4
 800b32c:	b2d3      	uxtb	r3, r2
 800b32e:	9306      	str	r3, [sp, #24]
 800b330:	f7fe fd45 	bl	8009dbe <PxMessagingTask+0x172>
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800b334:	2338      	movs	r3, #56	; 0x38
 800b336:	436b      	muls	r3, r5
 800b338:	4a06      	ldr	r2, [pc, #24]	; (800b354 <PxMessagingTask+0x1708>)
 800b33a:	18d2      	adds	r2, r2, r3
 800b33c:	5dd3      	ldrb	r3, [r2, r7]
 800b33e:	3b01      	subs	r3, #1
 800b340:	0098      	lsls	r0, r3, #2
 800b342:	4909      	ldr	r1, [pc, #36]	; (800b368 <PxMessagingTask+0x171c>)
 800b344:	5841      	ldr	r1, [r0, r1]
 800b346:	4640      	mov	r0, r8
 800b348:	5c12      	ldrb	r2, [r2, r0]
 800b34a:	e463      	b.n	800ac14 <PxMessagingTask+0xfc8>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800b34c:	2766      	movs	r7, #102	; 0x66
 800b34e:	f7fe fcad 	bl	8009cac <PxMessagingTask+0x60>
 800b352:	46c0      	nop			; (mov r8, r8)
 800b354:	20000d08 	.word	0x20000d08
 800b358:	200015f2 	.word	0x200015f2
 800b35c:	20000cb4 	.word	0x20000cb4
 800b360:	20000f30 	.word	0x20000f30
 800b364:	20001076 	.word	0x20001076
 800b368:	2000694c 	.word	0x2000694c

0800b36c <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800b36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b36e:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b370:	2401      	movs	r4, #1
 800b372:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b374:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b376:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800b378:	2310      	movs	r3, #16
 800b37a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b37c:	2702      	movs	r7, #2
 800b37e:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b380:	2680      	movs	r6, #128	; 0x80
 800b382:	0276      	lsls	r6, r6, #9
 800b384:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b386:	2380      	movs	r3, #128	; 0x80
 800b388:	035b      	lsls	r3, r3, #13
 800b38a:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b38c:	2500      	movs	r5, #0
 800b38e:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b390:	a80d      	add	r0, sp, #52	; 0x34
 800b392:	f005 fdf5 	bl	8010f80 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800b396:	2307      	movs	r3, #7
 800b398:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b39a:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b39c:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b39e:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b3a0:	2101      	movs	r1, #1
 800b3a2:	a809      	add	r0, sp, #36	; 0x24
 800b3a4:	f006 f8ae 	bl	8011504 <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800b3a8:	4b1a      	ldr	r3, [pc, #104]	; (800b414 <SystemClock_Config+0xa8>)
 800b3aa:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800b3ac:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b3ae:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b3b0:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b3b2:	a802      	add	r0, sp, #8
 800b3b4:	f006 fa54 	bl	8011860 <HAL_RCCEx_PeriphCLKConfig>
	
	__HAL_RCC_PWR_CLK_ENABLE();
 800b3b8:	4d17      	ldr	r5, [pc, #92]	; (800b418 <SystemClock_Config+0xac>)
 800b3ba:	69ea      	ldr	r2, [r5, #28]
 800b3bc:	2180      	movs	r1, #128	; 0x80
 800b3be:	0549      	lsls	r1, r1, #21
 800b3c0:	430a      	orrs	r2, r1
 800b3c2:	61ea      	str	r2, [r5, #28]
 800b3c4:	69eb      	ldr	r3, [r5, #28]
 800b3c6:	400b      	ands	r3, r1
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800b3cc:	f005 fdce 	bl	8010f6c <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b3d0:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b3d2:	23c0      	movs	r3, #192	; 0xc0
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b3d8:	a802      	add	r0, sp, #8
 800b3da:	f006 fa41 	bl	8011860 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b3de:	f006 fa1b 	bl	8011818 <HAL_RCC_GetHCLKFreq>
 800b3e2:	21fa      	movs	r1, #250	; 0xfa
 800b3e4:	0089      	lsls	r1, r1, #2
 800b3e6:	f7f4 feb3 	bl	8000150 <__udivsi3>
 800b3ea:	f004 fcbd 	bl	800fd68 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b3ee:	2004      	movs	r0, #4
 800b3f0:	f004 fcd6 	bl	800fda0 <HAL_SYSTICK_CLKSourceConfig>
	

	__SYSCFG_CLK_ENABLE();
 800b3f4:	69ab      	ldr	r3, [r5, #24]
 800b3f6:	4323      	orrs	r3, r4
 800b3f8:	61ab      	str	r3, [r5, #24]
 800b3fa:	69ab      	ldr	r3, [r5, #24]
 800b3fc:	401c      	ands	r4, r3
 800b3fe:	9401      	str	r4, [sp, #4]
 800b400:	9b01      	ldr	r3, [sp, #4]

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b402:	2001      	movs	r0, #1
 800b404:	2200      	movs	r2, #0
 800b406:	2100      	movs	r1, #0
 800b408:	4240      	negs	r0, r0
 800b40a:	f004 fc65 	bl	800fcd8 <HAL_NVIC_SetPriority>
	
}
 800b40e:	b01b      	add	sp, #108	; 0x6c
 800b410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b412:	46c0      	nop			; (mov r8, r8)
 800b414:	00040003 	.word	0x00040003
 800b418:	40021000 	.word	0x40021000

0800b41c <SaveToRO>:
/* --- Save array topology and Command Snippets in Flash RO --- 
*/
uint8_t SaveToRO(void)
{
 800b41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b41e:	46de      	mov	lr, fp
 800b420:	4657      	mov	r7, sl
 800b422:	464e      	mov	r6, r9
 800b424:	4645      	mov	r5, r8
 800b426:	b5e0      	push	{r5, r6, r7, lr}
 800b428:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800b42a:	2215      	movs	r2, #21
 800b42c:	2100      	movs	r1, #0
 800b42e:	a802      	add	r0, sp, #8
 800b430:	f007 fdbe 	bl	8012fb0 <memset>
	
	HAL_FLASH_Unlock();
 800b434:	f005 fae6 	bl	8010a04 <HAL_FLASH_Unlock>
	
	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 800b438:	4872      	ldr	r0, [pc, #456]	; (800b604 <SaveToRO+0x1e8>)
 800b43a:	f005 fba5 	bl	8010b88 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b43e:	4872      	ldr	r0, [pc, #456]	; (800b608 <SaveToRO+0x1ec>)
 800b440:	f005 fafc 	bl	8010a3c <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 800b444:	2800      	cmp	r0, #0
 800b446:	d112      	bne.n	800b46e <SaveToRO+0x52>
		return pFlash.ErrorCode;
	} else {			
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b448:	4a70      	ldr	r2, [pc, #448]	; (800b60c <SaveToRO+0x1f0>)
 800b44a:	6913      	ldr	r3, [r2, #16]
 800b44c:	2102      	movs	r1, #2
 800b44e:	438b      	bics	r3, r1
 800b450:	6113      	str	r3, [r2, #16]
	}	
	
	/* Save number of modules and myID */
	if (myID)
 800b452:	4b6f      	ldr	r3, [pc, #444]	; (800b610 <SaveToRO+0x1f4>)
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d113      	bne.n	800b482 <SaveToRO+0x66>
		}
	}
	
	// Save Command Snippets
	int currentAdd = RO_MID_ADDRESS;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b45a:	4b6e      	ldr	r3, [pc, #440]	; (800b614 <SaveToRO+0x1f8>)
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d100      	bne.n	800b464 <SaveToRO+0x48>
 800b462:	e0ca      	b.n	800b5fa <SaveToRO+0x1de>
 800b464:	2500      	movs	r5, #0
 800b466:	4c6c      	ldr	r4, [pc, #432]	; (800b618 <SaveToRO+0x1fc>)
	{
		if (snippets[s].cond.conditionType) 
 800b468:	4b6c      	ldr	r3, [pc, #432]	; (800b61c <SaveToRO+0x200>)
 800b46a:	4698      	mov	r8, r3
 800b46c:	e06e      	b.n	800b54c <SaveToRO+0x130>
		return pFlash.ErrorCode;
 800b46e:	4b6c      	ldr	r3, [pc, #432]	; (800b620 <SaveToRO+0x204>)
 800b470:	69d8      	ldr	r0, [r3, #28]
 800b472:	b2c0      	uxtb	r0, r0
	}
	
	HAL_FLASH_Lock();
	
	return result;
}
 800b474:	b009      	add	sp, #36	; 0x24
 800b476:	bc3c      	pop	{r2, r3, r4, r5}
 800b478:	4690      	mov	r8, r2
 800b47a:	4699      	mov	r9, r3
 800b47c:	46a2      	mov	sl, r4
 800b47e:	46ab      	mov	fp, r5
 800b480:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800b482:	4a68      	ldr	r2, [pc, #416]	; (800b624 <SaveToRO+0x208>)
 800b484:	7812      	ldrb	r2, [r2, #0]
 800b486:	0212      	lsls	r2, r2, #8
 800b488:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b48a:	b292      	uxth	r2, r2
 800b48c:	2300      	movs	r3, #0
 800b48e:	495d      	ldr	r1, [pc, #372]	; (800b604 <SaveToRO+0x1e8>)
 800b490:	2001      	movs	r0, #1
 800b492:	f005 fb01 	bl	8010a98 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b496:	485c      	ldr	r0, [pc, #368]	; (800b608 <SaveToRO+0x1ec>)
 800b498:	f005 fad0 	bl	8010a3c <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d111      	bne.n	800b4c4 <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b4a0:	4a5a      	ldr	r2, [pc, #360]	; (800b60c <SaveToRO+0x1f0>)
 800b4a2:	6913      	ldr	r3, [r2, #16]
 800b4a4:	2101      	movs	r1, #1
 800b4a6:	438b      	bics	r3, r1
 800b4a8:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800b4aa:	4b5e      	ldr	r3, [pc, #376]	; (800b624 <SaveToRO+0x208>)
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800b4b2:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d0d0      	beq.n	800b45a <SaveToRO+0x3e>
 800b4b8:	2316      	movs	r3, #22
 800b4ba:	469b      	mov	fp, r3
 800b4bc:	4b5a      	ldr	r3, [pc, #360]	; (800b628 <SaveToRO+0x20c>)
 800b4be:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 800b4c0:	4698      	mov	r8, r3
 800b4c2:	e02a      	b.n	800b51a <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 800b4c4:	4b56      	ldr	r3, [pc, #344]	; (800b620 <SaveToRO+0x204>)
 800b4c6:	69d8      	ldr	r0, [r3, #28]
 800b4c8:	b2c0      	uxtb	r0, r0
 800b4ca:	e7d3      	b.n	800b474 <SaveToRO+0x58>
						return pFlash.ErrorCode;
 800b4cc:	4b54      	ldr	r3, [pc, #336]	; (800b620 <SaveToRO+0x204>)
 800b4ce:	69d8      	ldr	r0, [r3, #28]
 800b4d0:	b2c0      	uxtb	r0, r0
 800b4d2:	e7cf      	b.n	800b474 <SaveToRO+0x58>
 800b4d4:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800b4d6:	42b4      	cmp	r4, r6
 800b4d8:	d017      	beq.n	800b50a <SaveToRO+0xee>
				if (array[i-1][0]) {
 800b4da:	4643      	mov	r3, r8
 800b4dc:	5afb      	ldrh	r3, [r7, r3]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d0f8      	beq.n	800b4d4 <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800b4e2:	8822      	ldrh	r2, [r4, #0]
 800b4e4:	4b47      	ldr	r3, [pc, #284]	; (800b604 <SaveToRO+0x1e8>)
 800b4e6:	18e9      	adds	r1, r5, r3
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	2001      	movs	r0, #1
 800b4ec:	f005 fad4 	bl	8010a98 <HAL_FLASH_Program>
					add += 2;
 800b4f0:	3502      	adds	r5, #2
 800b4f2:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b4f4:	4844      	ldr	r0, [pc, #272]	; (800b608 <SaveToRO+0x1ec>)
 800b4f6:	f005 faa1 	bl	8010a3c <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	d1e6      	bne.n	800b4cc <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b4fe:	4a43      	ldr	r2, [pc, #268]	; (800b60c <SaveToRO+0x1f0>)
 800b500:	6913      	ldr	r3, [r2, #16]
 800b502:	2101      	movs	r1, #1
 800b504:	438b      	bics	r3, r1
 800b506:	6113      	str	r3, [r2, #16]
 800b508:	e7e4      	b.n	800b4d4 <SaveToRO+0xb8>
		for(uint8_t i=1 ; i<=N ; i++)
 800b50a:	464b      	mov	r3, r9
 800b50c:	3301      	adds	r3, #1
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	4699      	mov	r9, r3
 800b512:	4b44      	ldr	r3, [pc, #272]	; (800b624 <SaveToRO+0x208>)
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	454b      	cmp	r3, r9
 800b518:	d39f      	bcc.n	800b45a <SaveToRO+0x3e>
 800b51a:	465e      	mov	r6, fp
 800b51c:	464b      	mov	r3, r9
 800b51e:	435e      	muls	r6, r3
 800b520:	0034      	movs	r4, r6
 800b522:	3c16      	subs	r4, #22
 800b524:	4454      	add	r4, sl
 800b526:	4456      	add	r6, sl
				if (array[i-1][0]) {
 800b528:	1e5f      	subs	r7, r3, #1
 800b52a:	465b      	mov	r3, fp
 800b52c:	435f      	muls	r7, r3
 800b52e:	e7d4      	b.n	800b4da <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 800b530:	4b3b      	ldr	r3, [pc, #236]	; (800b620 <SaveToRO+0x204>)
 800b532:	69d8      	ldr	r0, [r3, #28]
 800b534:	b2c0      	uxtb	r0, r0
 800b536:	e79d      	b.n	800b474 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800b538:	4b39      	ldr	r3, [pc, #228]	; (800b620 <SaveToRO+0x204>)
 800b53a:	69d8      	ldr	r0, [r3, #28]
 800b53c:	b2c0      	uxtb	r0, r0
 800b53e:	e799      	b.n	800b474 <SaveToRO+0x58>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800b540:	3501      	adds	r5, #1
 800b542:	b2ed      	uxtb	r5, r5
 800b544:	4b33      	ldr	r3, [pc, #204]	; (800b614 <SaveToRO+0x1f8>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	42ab      	cmp	r3, r5
 800b54a:	d956      	bls.n	800b5fa <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType) 
 800b54c:	9501      	str	r5, [sp, #4]
 800b54e:	00ab      	lsls	r3, r5, #2
 800b550:	195b      	adds	r3, r3, r5
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	4642      	mov	r2, r8
 800b556:	5c9b      	ldrb	r3, [r3, r2]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d0f1      	beq.n	800b540 <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b55c:	23fe      	movs	r3, #254	; 0xfe
 800b55e:	aa02      	add	r2, sp, #8
 800b560:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800b562:	00a9      	lsls	r1, r5, #2
 800b564:	1949      	adds	r1, r1, r5
 800b566:	0089      	lsls	r1, r1, #2
 800b568:	4b2c      	ldr	r3, [pc, #176]	; (800b61c <SaveToRO+0x200>)
 800b56a:	469c      	mov	ip, r3
 800b56c:	4461      	add	r1, ip
 800b56e:	2214      	movs	r2, #20
 800b570:	ab02      	add	r3, sp, #8
 800b572:	1c58      	adds	r0, r3, #1
 800b574:	f007 fd13 	bl	8012f9e <memcpy>
 800b578:	2314      	movs	r3, #20
 800b57a:	469b      	mov	fp, r3
 800b57c:	44a3      	add	fp, r4
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b57e:	ae02      	add	r6, sp, #8
 800b580:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b582:	4f22      	ldr	r7, [pc, #136]	; (800b60c <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800b584:	5b32      	ldrh	r2, [r6, r4]
 800b586:	2300      	movs	r3, #0
 800b588:	0021      	movs	r1, r4
 800b58a:	2001      	movs	r0, #1
 800b58c:	f005 fa84 	bl	8010a98 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b590:	481d      	ldr	r0, [pc, #116]	; (800b608 <SaveToRO+0x1ec>)
 800b592:	f005 fa53 	bl	8010a3c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b596:	2800      	cmp	r0, #0
 800b598:	d1ca      	bne.n	800b530 <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	2201      	movs	r2, #1
 800b59e:	4393      	bics	r3, r2
 800b5a0:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800b5a2:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800b5a4:	455c      	cmp	r4, fp
 800b5a6:	d1ed      	bne.n	800b584 <SaveToRO+0x168>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b5a8:	2700      	movs	r7, #0
 800b5aa:	9a01      	ldr	r2, [sp, #4]
 800b5ac:	0093      	lsls	r3, r2, #2
 800b5ae:	189e      	adds	r6, r3, r2
 800b5b0:	00b6      	lsls	r6, r6, #2
 800b5b2:	4b1a      	ldr	r3, [pc, #104]	; (800b61c <SaveToRO+0x200>)
 800b5b4:	469a      	mov	sl, r3
 800b5b6:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5b8:	4b14      	ldr	r3, [pc, #80]	; (800b60c <SaveToRO+0x1f0>)
 800b5ba:	469b      	mov	fp, r3
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b5bc:	4653      	mov	r3, sl
 800b5be:	68de      	ldr	r6, [r3, #12]
 800b5c0:	0030      	movs	r0, r6
 800b5c2:	f7f4 fda9 	bl	8000118 <strlen>
 800b5c6:	3001      	adds	r0, #1
 800b5c8:	0840      	lsrs	r0, r0, #1
 800b5ca:	4287      	cmp	r7, r0
 800b5cc:	d2b8      	bcs.n	800b540 <SaveToRO+0x124>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800b5ce:	007b      	lsls	r3, r7, #1
 800b5d0:	5af2      	ldrh	r2, [r6, r3]
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	0021      	movs	r1, r4
 800b5d6:	2001      	movs	r0, #1
 800b5d8:	f005 fa5e 	bl	8010a98 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800b5dc:	480a      	ldr	r0, [pc, #40]	; (800b608 <SaveToRO+0x1ec>)
 800b5de:	f005 fa2d 	bl	8010a3c <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	d1a8      	bne.n	800b538 <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5e6:	465b      	mov	r3, fp
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	4393      	bics	r3, r2
 800b5ee:	465a      	mov	r2, fp
 800b5f0:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800b5f2:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b5f4:	3701      	adds	r7, #1
 800b5f6:	b2ff      	uxtb	r7, r7
 800b5f8:	e7e0      	b.n	800b5bc <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 800b5fa:	f005 fa15 	bl	8010a28 <HAL_FLASH_Lock>
	return result;
 800b5fe:	2000      	movs	r0, #0
 800b600:	e738      	b.n	800b474 <SaveToRO+0x58>
 800b602:	46c0      	nop			; (mov r8, r8)
 800b604:	0801d800 	.word	0x0801d800
 800b608:	0000c350 	.word	0x0000c350
 800b60c:	40022000 	.word	0x40022000
 800b610:	20001076 	.word	0x20001076
 800b614:	2000121f 	.word	0x2000121f
 800b618:	0801dc00 	.word	0x0801dc00
 800b61c:	200069e0 	.word	0x200069e0
 800b620:	20006eb8 	.word	0x20006eb8
 800b624:	2000001c 	.word	0x2000001c
 800b628:	20000a78 	.word	0x20000a78

0800b62c <ClearROtopology>:

/* --- Clear array topology in SRAM and Flash RO --- 
*/
uint8_t ClearROtopology(void)
{
 800b62c:	b510      	push	{r4, lr}
	// Clear the array 
	memset(array, 0, sizeof(array));
 800b62e:	228f      	movs	r2, #143	; 0x8f
 800b630:	0092      	lsls	r2, r2, #2
 800b632:	2100      	movs	r1, #0
 800b634:	4805      	ldr	r0, [pc, #20]	; (800b64c <ClearROtopology+0x20>)
 800b636:	f007 fcbb 	bl	8012fb0 <memset>
	N = 1; myID = 0;
 800b63a:	4b05      	ldr	r3, [pc, #20]	; (800b650 <ClearROtopology+0x24>)
 800b63c:	2201      	movs	r2, #1
 800b63e:	701a      	strb	r2, [r3, #0]
 800b640:	4b04      	ldr	r3, [pc, #16]	; (800b654 <ClearROtopology+0x28>)
 800b642:	2200      	movs	r2, #0
 800b644:	701a      	strb	r2, [r3, #0]
	
	return SaveToRO();
 800b646:	f7ff fee9 	bl	800b41c <SaveToRO>
}
 800b64a:	bd10      	pop	{r4, pc}
 800b64c:	20000a78 	.word	0x20000a78
 800b650:	2000001c 	.word	0x2000001c
 800b654:	20001076 	.word	0x20001076

0800b658 <Module_Peripheral_Init>:


/* --- H23R0 module initialization.
*/
void Module_Peripheral_Init(void)
{
 800b658:	b510      	push	{r4, lr}


	/* Array ports */
  MX_USART1_UART_Init();
 800b65a:	f001 fccf 	bl	800cffc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b65e:	f001 fce5 	bl	800d02c <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 800b662:	f001 fd13 	bl	800d08c <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 800b666:	f001 fd29 	bl	800d0bc <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800b66a:	f001 fd3f 	bl	800d0ec <MX_USART6_UART_Init>

	/* FT234XD/BT900 UART */
  MX_USART3_UART_Init();
 800b66e:	f001 fcf5 	bl	800d05c <MX_USART3_UART_Init>
  UpdateBaudrate(6, 115200);
 800b672:	21e1      	movs	r1, #225	; 0xe1
 800b674:	0249      	lsls	r1, r1, #9
 800b676:	2006      	movs	r0, #6
 800b678:	f001 ff18 	bl	800d4ac <UpdateBaudrate>

}
 800b67c:	bd10      	pop	{r4, pc}

0800b67e <Module_MessagingTask>:
	uint8_t lenPar = 0;



	return result;
}
 800b67e:	2000      	movs	r0, #0
 800b680:	4770      	bx	lr

0800b682 <RegisterModuleCLICommands>:
/* --- Register this module CLI Commands
*/
void RegisterModuleCLICommands(void)
{

}
 800b682:	4770      	bx	lr

0800b684 <GetPort>:

/* --- Get the port for a given UART.
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART4)
 800b684:	6800      	ldr	r0, [r0, #0]
 800b686:	4b11      	ldr	r3, [pc, #68]	; (800b6cc <GetPort+0x48>)
 800b688:	4298      	cmp	r0, r3
 800b68a:	d014      	beq.n	800b6b6 <GetPort+0x32>
			return P1;
	else if (huart->Instance == USART2)
 800b68c:	4b10      	ldr	r3, [pc, #64]	; (800b6d0 <GetPort+0x4c>)
 800b68e:	4298      	cmp	r0, r3
 800b690:	d013      	beq.n	800b6ba <GetPort+0x36>
			return P2;
	else if (huart->Instance == USART6)
 800b692:	4b10      	ldr	r3, [pc, #64]	; (800b6d4 <GetPort+0x50>)
 800b694:	4298      	cmp	r0, r3
 800b696:	d012      	beq.n	800b6be <GetPort+0x3a>
			return P3;
	else if (huart->Instance == USART1)
 800b698:	4b0f      	ldr	r3, [pc, #60]	; (800b6d8 <GetPort+0x54>)
 800b69a:	4298      	cmp	r0, r3
 800b69c:	d011      	beq.n	800b6c2 <GetPort+0x3e>
			return P4;
	else if (huart->Instance == USART5)
 800b69e:	4b0f      	ldr	r3, [pc, #60]	; (800b6dc <GetPort+0x58>)
 800b6a0:	4298      	cmp	r0, r3
 800b6a2:	d010      	beq.n	800b6c6 <GetPort+0x42>
			return P5;
	else if (huart->Instance == USART3)
			return P6;

	return 0;
 800b6a4:	4b0e      	ldr	r3, [pc, #56]	; (800b6e0 <GetPort+0x5c>)
 800b6a6:	469c      	mov	ip, r3
 800b6a8:	4460      	add	r0, ip
 800b6aa:	4243      	negs	r3, r0
 800b6ac:	4158      	adcs	r0, r3
 800b6ae:	4240      	negs	r0, r0
 800b6b0:	2306      	movs	r3, #6
 800b6b2:	4018      	ands	r0, r3
}
 800b6b4:	4770      	bx	lr
			return P1;
 800b6b6:	2001      	movs	r0, #1
 800b6b8:	e7fc      	b.n	800b6b4 <GetPort+0x30>
			return P2;
 800b6ba:	2002      	movs	r0, #2
 800b6bc:	e7fa      	b.n	800b6b4 <GetPort+0x30>
			return P3;
 800b6be:	2003      	movs	r0, #3
 800b6c0:	e7f8      	b.n	800b6b4 <GetPort+0x30>
			return P4;
 800b6c2:	2004      	movs	r0, #4
 800b6c4:	e7f6      	b.n	800b6b4 <GetPort+0x30>
			return P5;
 800b6c6:	2005      	movs	r0, #5
 800b6c8:	e7f4      	b.n	800b6b4 <GetPort+0x30>
 800b6ca:	46c0      	nop			; (mov r8, r8)
 800b6cc:	40004c00 	.word	0x40004c00
 800b6d0:	40004400 	.word	0x40004400
 800b6d4:	40011400 	.word	0x40011400
 800b6d8:	40013800 	.word	0x40013800
 800b6dc:	40005000 	.word	0x40005000
 800b6e0:	bfffb800 	.word	0xbfffb800

0800b6e4 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b6e4:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b6e6:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b6ec:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b6ee:	2280      	movs	r2, #128	; 0x80
 800b6f0:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b6f2:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b6f4:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b6f6:	3320      	adds	r3, #32
 800b6f8:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b6fa:	2380      	movs	r3, #128	; 0x80
 800b6fc:	019b      	lsls	r3, r3, #6
 800b6fe:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b700:	f004 fc88 	bl	8010014 <HAL_DMA_Init>
}
 800b704:	bd10      	pop	{r4, pc}

0800b706 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b706:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b708:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b70a:	2310      	movs	r3, #16
 800b70c:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b70e:	2300      	movs	r3, #0
 800b710:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b712:	2280      	movs	r2, #128	; 0x80
 800b714:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b716:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b718:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800b71a:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b71c:	2380      	movs	r3, #128	; 0x80
 800b71e:	019b      	lsls	r3, r3, #6
 800b720:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b722:	f004 fc77 	bl	8010014 <HAL_DMA_Init>
}
 800b726:	bd10      	pop	{r4, pc}

0800b728 <DMA_Init>:
{
 800b728:	b510      	push	{r4, lr}
 800b72a:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800b72c:	4b20      	ldr	r3, [pc, #128]	; (800b7b0 <DMA_Init+0x88>)
 800b72e:	6959      	ldr	r1, [r3, #20]
 800b730:	2201      	movs	r2, #1
 800b732:	4311      	orrs	r1, r2
 800b734:	6159      	str	r1, [r3, #20]
 800b736:	6959      	ldr	r1, [r3, #20]
 800b738:	400a      	ands	r2, r1
 800b73a:	9200      	str	r2, [sp, #0]
 800b73c:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800b73e:	6959      	ldr	r1, [r3, #20]
 800b740:	2202      	movs	r2, #2
 800b742:	4311      	orrs	r1, r2
 800b744:	6159      	str	r1, [r3, #20]
 800b746:	695b      	ldr	r3, [r3, #20]
 800b748:	401a      	ands	r2, r3
 800b74a:	9201      	str	r2, [sp, #4]
 800b74c:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800b74e:	4c19      	ldr	r4, [pc, #100]	; (800b7b4 <DMA_Init+0x8c>)
 800b750:	4919      	ldr	r1, [pc, #100]	; (800b7b8 <DMA_Init+0x90>)
 800b752:	0020      	movs	r0, r4
 800b754:	f7ff ffc6 	bl	800b6e4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800b758:	0020      	movs	r0, r4
 800b75a:	3038      	adds	r0, #56	; 0x38
 800b75c:	4917      	ldr	r1, [pc, #92]	; (800b7bc <DMA_Init+0x94>)
 800b75e:	f7ff ffc1 	bl	800b6e4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800b762:	0020      	movs	r0, r4
 800b764:	3070      	adds	r0, #112	; 0x70
 800b766:	4916      	ldr	r1, [pc, #88]	; (800b7c0 <DMA_Init+0x98>)
 800b768:	f7ff ffbc 	bl	800b6e4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800b76c:	0020      	movs	r0, r4
 800b76e:	30a8      	adds	r0, #168	; 0xa8
 800b770:	4914      	ldr	r1, [pc, #80]	; (800b7c4 <DMA_Init+0x9c>)
 800b772:	f7ff ffb7 	bl	800b6e4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800b776:	0020      	movs	r0, r4
 800b778:	30e0      	adds	r0, #224	; 0xe0
 800b77a:	4913      	ldr	r1, [pc, #76]	; (800b7c8 <DMA_Init+0xa0>)
 800b77c:	f7ff ffb2 	bl	800b6e4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[5], DMA2_Channel3);
 800b780:	0020      	movs	r0, r4
 800b782:	3019      	adds	r0, #25
 800b784:	30ff      	adds	r0, #255	; 0xff
 800b786:	4911      	ldr	r1, [pc, #68]	; (800b7cc <DMA_Init+0xa4>)
 800b788:	f7ff ffac 	bl	800b6e4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800b78c:	4c10      	ldr	r4, [pc, #64]	; (800b7d0 <DMA_Init+0xa8>)
 800b78e:	4911      	ldr	r1, [pc, #68]	; (800b7d4 <DMA_Init+0xac>)
 800b790:	0020      	movs	r0, r4
 800b792:	f7ff ffb8 	bl	800b706 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800b796:	0020      	movs	r0, r4
 800b798:	3038      	adds	r0, #56	; 0x38
 800b79a:	490f      	ldr	r1, [pc, #60]	; (800b7d8 <DMA_Init+0xb0>)
 800b79c:	f7ff ffb3 	bl	800b706 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800b7a0:	0020      	movs	r0, r4
 800b7a2:	3070      	adds	r0, #112	; 0x70
 800b7a4:	490d      	ldr	r1, [pc, #52]	; (800b7dc <DMA_Init+0xb4>)
 800b7a6:	f7ff ffae 	bl	800b706 <DMA_MSG_TX_CH_Init>
}
 800b7aa:	b002      	add	sp, #8
 800b7ac:	bd10      	pop	{r4, pc}
 800b7ae:	46c0      	nop			; (mov r8, r8)
 800b7b0:	40021000 	.word	0x40021000
 800b7b4:	2000179c 	.word	0x2000179c
 800b7b8:	40020008 	.word	0x40020008
 800b7bc:	40020030 	.word	0x40020030
 800b7c0:	40020058 	.word	0x40020058
 800b7c4:	4002006c 	.word	0x4002006c
 800b7c8:	4002041c 	.word	0x4002041c
 800b7cc:	40020430 	.word	0x40020430
 800b7d0:	200018ec 	.word	0x200018ec
 800b7d4:	4002001c 	.word	0x4002001c
 800b7d8:	40020044 	.word	0x40020044
 800b7dc:	40020080 	.word	0x40020080

0800b7e0 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b7e0:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b7e2:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b7e8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800b7ea:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b7ec:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b7ee:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b7f0:	3320      	adds	r3, #32
 800b7f2:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800b7f4:	2380      	movs	r3, #128	; 0x80
 800b7f6:	015b      	lsls	r3, r3, #5
 800b7f8:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b7fa:	f004 fc0b 	bl	8010014 <HAL_DMA_Init>
}
 800b7fe:	bd10      	pop	{r4, pc}

0800b800 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800b800:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800b802:	6803      	ldr	r3, [r0, #0]
 800b804:	4a20      	ldr	r2, [pc, #128]	; (800b888 <SetupDMAInterrupts+0x88>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d020      	beq.n	800b84c <SetupDMAInterrupts+0x4c>
 800b80a:	d827      	bhi.n	800b85c <SetupDMAInterrupts+0x5c>
 800b80c:	4a1f      	ldr	r2, [pc, #124]	; (800b88c <SetupDMAInterrupts+0x8c>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d00e      	beq.n	800b830 <SetupDMAInterrupts+0x30>
 800b812:	d815      	bhi.n	800b840 <SetupDMAInterrupts+0x40>
 800b814:	4a1e      	ldr	r2, [pc, #120]	; (800b890 <SetupDMAInterrupts+0x90>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d107      	bne.n	800b82a <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800b81a:	2200      	movs	r2, #0
 800b81c:	2009      	movs	r0, #9
 800b81e:	f004 fa5b 	bl	800fcd8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800b822:	2009      	movs	r0, #9
 800b824:	f004 fa8c 	bl	800fd40 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800b828:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b82a:	4a1a      	ldr	r2, [pc, #104]	; (800b894 <SetupDMAInterrupts+0x94>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d1fb      	bne.n	800b828 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800b830:	2200      	movs	r2, #0
 800b832:	200a      	movs	r0, #10
 800b834:	f004 fa50 	bl	800fcd8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b838:	200a      	movs	r0, #10
 800b83a:	f004 fa81 	bl	800fd40 <HAL_NVIC_EnableIRQ>
			break;
 800b83e:	e7f3      	b.n	800b828 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800b840:	4a15      	ldr	r2, [pc, #84]	; (800b898 <SetupDMAInterrupts+0x98>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d002      	beq.n	800b84c <SetupDMAInterrupts+0x4c>
 800b846:	4a15      	ldr	r2, [pc, #84]	; (800b89c <SetupDMAInterrupts+0x9c>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d1ed      	bne.n	800b828 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800b84c:	2200      	movs	r2, #0
 800b84e:	200b      	movs	r0, #11
 800b850:	f004 fa42 	bl	800fcd8 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b854:	200b      	movs	r0, #11
 800b856:	f004 fa73 	bl	800fd40 <HAL_NVIC_EnableIRQ>
}
 800b85a:	e7e5      	b.n	800b828 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800b85c:	4a10      	ldr	r2, [pc, #64]	; (800b8a0 <SetupDMAInterrupts+0xa0>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d0e6      	beq.n	800b830 <SetupDMAInterrupts+0x30>
 800b862:	d909      	bls.n	800b878 <SetupDMAInterrupts+0x78>
 800b864:	4a0f      	ldr	r2, [pc, #60]	; (800b8a4 <SetupDMAInterrupts+0xa4>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d0f0      	beq.n	800b84c <SetupDMAInterrupts+0x4c>
 800b86a:	4a0f      	ldr	r2, [pc, #60]	; (800b8a8 <SetupDMAInterrupts+0xa8>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d0ed      	beq.n	800b84c <SetupDMAInterrupts+0x4c>
 800b870:	4a0e      	ldr	r2, [pc, #56]	; (800b8ac <SetupDMAInterrupts+0xac>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d1d8      	bne.n	800b828 <SetupDMAInterrupts+0x28>
 800b876:	e7e9      	b.n	800b84c <SetupDMAInterrupts+0x4c>
 800b878:	4a0d      	ldr	r2, [pc, #52]	; (800b8b0 <SetupDMAInterrupts+0xb0>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d0e6      	beq.n	800b84c <SetupDMAInterrupts+0x4c>
 800b87e:	4a0d      	ldr	r2, [pc, #52]	; (800b8b4 <SetupDMAInterrupts+0xb4>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d0d5      	beq.n	800b830 <SetupDMAInterrupts+0x30>
 800b884:	e7d0      	b.n	800b828 <SetupDMAInterrupts+0x28>
 800b886:	46c0      	nop			; (mov r8, r8)
 800b888:	4002006c 	.word	0x4002006c
 800b88c:	40020030 	.word	0x40020030
 800b890:	40020008 	.word	0x40020008
 800b894:	4002001c 	.word	0x4002001c
 800b898:	40020044 	.word	0x40020044
 800b89c:	40020058 	.word	0x40020058
 800b8a0:	4002041c 	.word	0x4002041c
 800b8a4:	40020444 	.word	0x40020444
 800b8a8:	40020458 	.word	0x40020458
 800b8ac:	40020430 	.word	0x40020430
 800b8b0:	40020080 	.word	0x40020080
 800b8b4:	40020408 	.word	0x40020408

0800b8b8 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800b8b8:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800b8ba:	6803      	ldr	r3, [r0, #0]
 800b8bc:	4a1a      	ldr	r2, [pc, #104]	; (800b928 <UnSetupDMAInterrupts+0x70>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d018      	beq.n	800b8f4 <UnSetupDMAInterrupts+0x3c>
 800b8c2:	d81b      	bhi.n	800b8fc <UnSetupDMAInterrupts+0x44>
 800b8c4:	4a19      	ldr	r2, [pc, #100]	; (800b92c <UnSetupDMAInterrupts+0x74>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d00a      	beq.n	800b8e0 <UnSetupDMAInterrupts+0x28>
 800b8ca:	d80d      	bhi.n	800b8e8 <UnSetupDMAInterrupts+0x30>
 800b8cc:	4a18      	ldr	r2, [pc, #96]	; (800b930 <UnSetupDMAInterrupts+0x78>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d103      	bne.n	800b8da <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800b8d2:	2009      	movs	r0, #9
 800b8d4:	f004 fa3e 	bl	800fd54 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800b8d8:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b8da:	4a16      	ldr	r2, [pc, #88]	; (800b934 <UnSetupDMAInterrupts+0x7c>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d1fb      	bne.n	800b8d8 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b8e0:	200a      	movs	r0, #10
 800b8e2:	f004 fa37 	bl	800fd54 <HAL_NVIC_DisableIRQ>
			break;
 800b8e6:	e7f7      	b.n	800b8d8 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800b8e8:	4a13      	ldr	r2, [pc, #76]	; (800b938 <UnSetupDMAInterrupts+0x80>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d002      	beq.n	800b8f4 <UnSetupDMAInterrupts+0x3c>
 800b8ee:	4a13      	ldr	r2, [pc, #76]	; (800b93c <UnSetupDMAInterrupts+0x84>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d1f1      	bne.n	800b8d8 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b8f4:	200b      	movs	r0, #11
 800b8f6:	f004 fa2d 	bl	800fd54 <HAL_NVIC_DisableIRQ>
}
 800b8fa:	e7ed      	b.n	800b8d8 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800b8fc:	4a10      	ldr	r2, [pc, #64]	; (800b940 <UnSetupDMAInterrupts+0x88>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d0ee      	beq.n	800b8e0 <UnSetupDMAInterrupts+0x28>
 800b902:	d909      	bls.n	800b918 <UnSetupDMAInterrupts+0x60>
 800b904:	4a0f      	ldr	r2, [pc, #60]	; (800b944 <UnSetupDMAInterrupts+0x8c>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d0f4      	beq.n	800b8f4 <UnSetupDMAInterrupts+0x3c>
 800b90a:	4a0f      	ldr	r2, [pc, #60]	; (800b948 <UnSetupDMAInterrupts+0x90>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d0f1      	beq.n	800b8f4 <UnSetupDMAInterrupts+0x3c>
 800b910:	4a0e      	ldr	r2, [pc, #56]	; (800b94c <UnSetupDMAInterrupts+0x94>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d1e0      	bne.n	800b8d8 <UnSetupDMAInterrupts+0x20>
 800b916:	e7ed      	b.n	800b8f4 <UnSetupDMAInterrupts+0x3c>
 800b918:	4a0d      	ldr	r2, [pc, #52]	; (800b950 <UnSetupDMAInterrupts+0x98>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d0ea      	beq.n	800b8f4 <UnSetupDMAInterrupts+0x3c>
 800b91e:	4a0d      	ldr	r2, [pc, #52]	; (800b954 <UnSetupDMAInterrupts+0x9c>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d0dd      	beq.n	800b8e0 <UnSetupDMAInterrupts+0x28>
 800b924:	e7d8      	b.n	800b8d8 <UnSetupDMAInterrupts+0x20>
 800b926:	46c0      	nop			; (mov r8, r8)
 800b928:	4002006c 	.word	0x4002006c
 800b92c:	40020030 	.word	0x40020030
 800b930:	40020008 	.word	0x40020008
 800b934:	4002001c 	.word	0x4002001c
 800b938:	40020044 	.word	0x40020044
 800b93c:	40020058 	.word	0x40020058
 800b940:	4002041c 	.word	0x4002041c
 800b944:	40020444 	.word	0x40020444
 800b948:	40020458 	.word	0x40020458
 800b94c:	40020430 	.word	0x40020430
 800b950:	40020080 	.word	0x40020080
 800b954:	40020408 	.word	0x40020408

0800b958 <DMA_MSG_TX_UnSetup>:
{	
 800b958:	b510      	push	{r4, lr}
 800b95a:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800b95c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800b95e:	f7ff ffab 	bl	800b8b8 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800b962:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800b964:	2300      	movs	r3, #0
 800b966:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800b968:	6623      	str	r3, [r4, #96]	; 0x60
}
 800b96a:	bd10      	pop	{r4, pc}

0800b96c <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800b96c:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b96e:	6803      	ldr	r3, [r0, #0]
 800b970:	4abd      	ldr	r2, [pc, #756]	; (800bc68 <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d02f      	beq.n	800b9d6 <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800b976:	4abd      	ldr	r2, [pc, #756]	; (800bc6c <RemapAndLinkDMAtoUARTRx+0x300>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d100      	bne.n	800b97e <RemapAndLinkDMAtoUARTRx+0x12>
 800b97c:	e087      	b.n	800ba8e <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800b97e:	4abc      	ldr	r2, [pc, #752]	; (800bc70 <RemapAndLinkDMAtoUARTRx+0x304>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d100      	bne.n	800b986 <RemapAndLinkDMAtoUARTRx+0x1a>
 800b984:	e0dc      	b.n	800bb40 <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800b986:	4abb      	ldr	r2, [pc, #748]	; (800bc74 <RemapAndLinkDMAtoUARTRx+0x308>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d000      	beq.n	800b98e <RemapAndLinkDMAtoUARTRx+0x22>
 800b98c:	e18a      	b.n	800bca4 <RemapAndLinkDMAtoUARTRx+0x338>
 800b98e:	680b      	ldr	r3, [r1, #0]
 800b990:	4ab9      	ldr	r2, [pc, #740]	; (800bc78 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d100      	bne.n	800b998 <RemapAndLinkDMAtoUARTRx+0x2c>
 800b996:	e12d      	b.n	800bbf4 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800b998:	4ab8      	ldr	r2, [pc, #736]	; (800bc7c <RemapAndLinkDMAtoUARTRx+0x310>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d100      	bne.n	800b9a0 <RemapAndLinkDMAtoUARTRx+0x34>
 800b99e:	e134      	b.n	800bc0a <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800b9a0:	4ab7      	ldr	r2, [pc, #732]	; (800bc80 <RemapAndLinkDMAtoUARTRx+0x314>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d100      	bne.n	800b9a8 <RemapAndLinkDMAtoUARTRx+0x3c>
 800b9a6:	e13c      	b.n	800bc22 <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800b9a8:	4ab6      	ldr	r2, [pc, #728]	; (800bc84 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d100      	bne.n	800b9b0 <RemapAndLinkDMAtoUARTRx+0x44>
 800b9ae:	e144      	b.n	800bc3a <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800b9b0:	4ab5      	ldr	r2, [pc, #724]	; (800bc88 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d100      	bne.n	800b9b8 <RemapAndLinkDMAtoUARTRx+0x4c>
 800b9b6:	e14c      	b.n	800bc52 <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800b9b8:	4ab4      	ldr	r2, [pc, #720]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x320>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d11e      	bne.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800b9be:	4ab4      	ldr	r2, [pc, #720]	; (800bc90 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b9c0:	23a8      	movs	r3, #168	; 0xa8
 800b9c2:	58d4      	ldr	r4, [r2, r3]
 800b9c4:	4db3      	ldr	r5, [pc, #716]	; (800bc94 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b9c6:	402c      	ands	r4, r5
 800b9c8:	50d4      	str	r4, [r2, r3]
 800b9ca:	58d5      	ldr	r5, [r2, r3]
 800b9cc:	24b0      	movs	r4, #176	; 0xb0
 800b9ce:	0124      	lsls	r4, r4, #4
 800b9d0:	432c      	orrs	r4, r5
 800b9d2:	50d4      	str	r4, [r2, r3]
 800b9d4:	e012      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b9d6:	680b      	ldr	r3, [r1, #0]
 800b9d8:	4aa7      	ldr	r2, [pc, #668]	; (800bc78 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d011      	beq.n	800ba02 <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800b9de:	4aa7      	ldr	r2, [pc, #668]	; (800bc7c <RemapAndLinkDMAtoUARTRx+0x310>)
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d019      	beq.n	800ba18 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800b9e4:	4aa6      	ldr	r2, [pc, #664]	; (800bc80 <RemapAndLinkDMAtoUARTRx+0x314>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d022      	beq.n	800ba30 <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800b9ea:	4aa6      	ldr	r2, [pc, #664]	; (800bc84 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d02b      	beq.n	800ba48 <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800b9f0:	4aa5      	ldr	r2, [pc, #660]	; (800bc88 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d034      	beq.n	800ba60 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800b9f6:	4aa5      	ldr	r2, [pc, #660]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x320>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d03c      	beq.n	800ba76 <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800b9fc:	6641      	str	r1, [r0, #100]	; 0x64
 800b9fe:	6248      	str	r0, [r1, #36]	; 0x24
}
 800ba00:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800ba02:	4aa5      	ldr	r2, [pc, #660]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ba04:	23a8      	movs	r3, #168	; 0xa8
 800ba06:	58d4      	ldr	r4, [r2, r3]
 800ba08:	250f      	movs	r5, #15
 800ba0a:	43ac      	bics	r4, r5
 800ba0c:	50d4      	str	r4, [r2, r3]
 800ba0e:	58d4      	ldr	r4, [r2, r3]
 800ba10:	3d07      	subs	r5, #7
 800ba12:	432c      	orrs	r4, r5
 800ba14:	50d4      	str	r4, [r2, r3]
 800ba16:	e7f1      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800ba18:	4a9f      	ldr	r2, [pc, #636]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ba1a:	23a8      	movs	r3, #168	; 0xa8
 800ba1c:	58d4      	ldr	r4, [r2, r3]
 800ba1e:	4d9d      	ldr	r5, [pc, #628]	; (800bc94 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ba20:	402c      	ands	r4, r5
 800ba22:	50d4      	str	r4, [r2, r3]
 800ba24:	58d5      	ldr	r5, [r2, r3]
 800ba26:	2480      	movs	r4, #128	; 0x80
 800ba28:	0124      	lsls	r4, r4, #4
 800ba2a:	432c      	orrs	r4, r5
 800ba2c:	50d4      	str	r4, [r2, r3]
 800ba2e:	e7e5      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800ba30:	4a99      	ldr	r2, [pc, #612]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ba32:	23a8      	movs	r3, #168	; 0xa8
 800ba34:	58d4      	ldr	r4, [r2, r3]
 800ba36:	4d99      	ldr	r5, [pc, #612]	; (800bc9c <RemapAndLinkDMAtoUARTRx+0x330>)
 800ba38:	402c      	ands	r4, r5
 800ba3a:	50d4      	str	r4, [r2, r3]
 800ba3c:	58d5      	ldr	r5, [r2, r3]
 800ba3e:	2480      	movs	r4, #128	; 0x80
 800ba40:	0324      	lsls	r4, r4, #12
 800ba42:	432c      	orrs	r4, r5
 800ba44:	50d4      	str	r4, [r2, r3]
 800ba46:	e7d9      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800ba48:	4a93      	ldr	r2, [pc, #588]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ba4a:	23a8      	movs	r3, #168	; 0xa8
 800ba4c:	58d4      	ldr	r4, [r2, r3]
 800ba4e:	4d94      	ldr	r5, [pc, #592]	; (800bca0 <RemapAndLinkDMAtoUARTRx+0x334>)
 800ba50:	402c      	ands	r4, r5
 800ba52:	50d4      	str	r4, [r2, r3]
 800ba54:	58d5      	ldr	r5, [r2, r3]
 800ba56:	2480      	movs	r4, #128	; 0x80
 800ba58:	0424      	lsls	r4, r4, #16
 800ba5a:	432c      	orrs	r4, r5
 800ba5c:	50d4      	str	r4, [r2, r3]
 800ba5e:	e7cd      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800ba60:	4a8b      	ldr	r2, [pc, #556]	; (800bc90 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ba62:	23a8      	movs	r3, #168	; 0xa8
 800ba64:	58d4      	ldr	r4, [r2, r3]
 800ba66:	25f0      	movs	r5, #240	; 0xf0
 800ba68:	43ac      	bics	r4, r5
 800ba6a:	50d4      	str	r4, [r2, r3]
 800ba6c:	58d4      	ldr	r4, [r2, r3]
 800ba6e:	3d70      	subs	r5, #112	; 0x70
 800ba70:	432c      	orrs	r4, r5
 800ba72:	50d4      	str	r4, [r2, r3]
 800ba74:	e7c2      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800ba76:	4a86      	ldr	r2, [pc, #536]	; (800bc90 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ba78:	23a8      	movs	r3, #168	; 0xa8
 800ba7a:	58d4      	ldr	r4, [r2, r3]
 800ba7c:	4d85      	ldr	r5, [pc, #532]	; (800bc94 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ba7e:	402c      	ands	r4, r5
 800ba80:	50d4      	str	r4, [r2, r3]
 800ba82:	58d5      	ldr	r5, [r2, r3]
 800ba84:	2480      	movs	r4, #128	; 0x80
 800ba86:	0124      	lsls	r4, r4, #4
 800ba88:	432c      	orrs	r4, r5
 800ba8a:	50d4      	str	r4, [r2, r3]
 800ba8c:	e7b6      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800ba8e:	680b      	ldr	r3, [r1, #0]
 800ba90:	4a79      	ldr	r2, [pc, #484]	; (800bc78 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d01a      	beq.n	800bacc <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800ba96:	4a79      	ldr	r2, [pc, #484]	; (800bc7c <RemapAndLinkDMAtoUARTRx+0x310>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d022      	beq.n	800bae2 <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800ba9c:	4a78      	ldr	r2, [pc, #480]	; (800bc80 <RemapAndLinkDMAtoUARTRx+0x314>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d02b      	beq.n	800bafa <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800baa2:	4a78      	ldr	r2, [pc, #480]	; (800bc84 <RemapAndLinkDMAtoUARTRx+0x318>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d034      	beq.n	800bb12 <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800baa8:	4a77      	ldr	r2, [pc, #476]	; (800bc88 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d03d      	beq.n	800bb2a <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800baae:	4a77      	ldr	r2, [pc, #476]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x320>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d1a3      	bne.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800bab4:	4a76      	ldr	r2, [pc, #472]	; (800bc90 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bab6:	23a8      	movs	r3, #168	; 0xa8
 800bab8:	58d4      	ldr	r4, [r2, r3]
 800baba:	4d76      	ldr	r5, [pc, #472]	; (800bc94 <RemapAndLinkDMAtoUARTRx+0x328>)
 800babc:	402c      	ands	r4, r5
 800babe:	50d4      	str	r4, [r2, r3]
 800bac0:	58d5      	ldr	r5, [r2, r3]
 800bac2:	2490      	movs	r4, #144	; 0x90
 800bac4:	0124      	lsls	r4, r4, #4
 800bac6:	432c      	orrs	r4, r5
 800bac8:	50d4      	str	r4, [r2, r3]
 800baca:	e797      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800bacc:	4a72      	ldr	r2, [pc, #456]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bace:	23a8      	movs	r3, #168	; 0xa8
 800bad0:	58d4      	ldr	r4, [r2, r3]
 800bad2:	250f      	movs	r5, #15
 800bad4:	43ac      	bics	r4, r5
 800bad6:	50d4      	str	r4, [r2, r3]
 800bad8:	58d4      	ldr	r4, [r2, r3]
 800bada:	3d06      	subs	r5, #6
 800badc:	432c      	orrs	r4, r5
 800bade:	50d4      	str	r4, [r2, r3]
 800bae0:	e78c      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800bae2:	4a6d      	ldr	r2, [pc, #436]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bae4:	23a8      	movs	r3, #168	; 0xa8
 800bae6:	58d4      	ldr	r4, [r2, r3]
 800bae8:	4d6a      	ldr	r5, [pc, #424]	; (800bc94 <RemapAndLinkDMAtoUARTRx+0x328>)
 800baea:	402c      	ands	r4, r5
 800baec:	50d4      	str	r4, [r2, r3]
 800baee:	58d5      	ldr	r5, [r2, r3]
 800baf0:	2490      	movs	r4, #144	; 0x90
 800baf2:	0124      	lsls	r4, r4, #4
 800baf4:	432c      	orrs	r4, r5
 800baf6:	50d4      	str	r4, [r2, r3]
 800baf8:	e780      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800bafa:	4a67      	ldr	r2, [pc, #412]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bafc:	23a8      	movs	r3, #168	; 0xa8
 800bafe:	58d4      	ldr	r4, [r2, r3]
 800bb00:	4d66      	ldr	r5, [pc, #408]	; (800bc9c <RemapAndLinkDMAtoUARTRx+0x330>)
 800bb02:	402c      	ands	r4, r5
 800bb04:	50d4      	str	r4, [r2, r3]
 800bb06:	58d5      	ldr	r5, [r2, r3]
 800bb08:	2490      	movs	r4, #144	; 0x90
 800bb0a:	0324      	lsls	r4, r4, #12
 800bb0c:	432c      	orrs	r4, r5
 800bb0e:	50d4      	str	r4, [r2, r3]
 800bb10:	e774      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800bb12:	4a61      	ldr	r2, [pc, #388]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bb14:	23a8      	movs	r3, #168	; 0xa8
 800bb16:	58d4      	ldr	r4, [r2, r3]
 800bb18:	4d61      	ldr	r5, [pc, #388]	; (800bca0 <RemapAndLinkDMAtoUARTRx+0x334>)
 800bb1a:	402c      	ands	r4, r5
 800bb1c:	50d4      	str	r4, [r2, r3]
 800bb1e:	58d5      	ldr	r5, [r2, r3]
 800bb20:	2490      	movs	r4, #144	; 0x90
 800bb22:	0424      	lsls	r4, r4, #16
 800bb24:	432c      	orrs	r4, r5
 800bb26:	50d4      	str	r4, [r2, r3]
 800bb28:	e768      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800bb2a:	4a59      	ldr	r2, [pc, #356]	; (800bc90 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bb2c:	23a8      	movs	r3, #168	; 0xa8
 800bb2e:	58d4      	ldr	r4, [r2, r3]
 800bb30:	25f0      	movs	r5, #240	; 0xf0
 800bb32:	43ac      	bics	r4, r5
 800bb34:	50d4      	str	r4, [r2, r3]
 800bb36:	58d4      	ldr	r4, [r2, r3]
 800bb38:	3d60      	subs	r5, #96	; 0x60
 800bb3a:	432c      	orrs	r4, r5
 800bb3c:	50d4      	str	r4, [r2, r3]
 800bb3e:	e75d      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800bb40:	680b      	ldr	r3, [r1, #0]
 800bb42:	4a4d      	ldr	r2, [pc, #308]	; (800bc78 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d01b      	beq.n	800bb80 <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800bb48:	4a4c      	ldr	r2, [pc, #304]	; (800bc7c <RemapAndLinkDMAtoUARTRx+0x310>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d023      	beq.n	800bb96 <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800bb4e:	4a4c      	ldr	r2, [pc, #304]	; (800bc80 <RemapAndLinkDMAtoUARTRx+0x314>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d02c      	beq.n	800bbae <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800bb54:	4a4b      	ldr	r2, [pc, #300]	; (800bc84 <RemapAndLinkDMAtoUARTRx+0x318>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d035      	beq.n	800bbc6 <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800bb5a:	4a4b      	ldr	r2, [pc, #300]	; (800bc88 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d03e      	beq.n	800bbde <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800bb60:	4a4a      	ldr	r2, [pc, #296]	; (800bc8c <RemapAndLinkDMAtoUARTRx+0x320>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d000      	beq.n	800bb68 <RemapAndLinkDMAtoUARTRx+0x1fc>
 800bb66:	e749      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800bb68:	4a49      	ldr	r2, [pc, #292]	; (800bc90 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bb6a:	23a8      	movs	r3, #168	; 0xa8
 800bb6c:	58d4      	ldr	r4, [r2, r3]
 800bb6e:	4d49      	ldr	r5, [pc, #292]	; (800bc94 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bb70:	402c      	ands	r4, r5
 800bb72:	50d4      	str	r4, [r2, r3]
 800bb74:	58d5      	ldr	r5, [r2, r3]
 800bb76:	24a0      	movs	r4, #160	; 0xa0
 800bb78:	0124      	lsls	r4, r4, #4
 800bb7a:	432c      	orrs	r4, r5
 800bb7c:	50d4      	str	r4, [r2, r3]
 800bb7e:	e73d      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800bb80:	4a45      	ldr	r2, [pc, #276]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bb82:	23a8      	movs	r3, #168	; 0xa8
 800bb84:	58d4      	ldr	r4, [r2, r3]
 800bb86:	250f      	movs	r5, #15
 800bb88:	43ac      	bics	r4, r5
 800bb8a:	50d4      	str	r4, [r2, r3]
 800bb8c:	58d4      	ldr	r4, [r2, r3]
 800bb8e:	3d05      	subs	r5, #5
 800bb90:	432c      	orrs	r4, r5
 800bb92:	50d4      	str	r4, [r2, r3]
 800bb94:	e732      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800bb96:	4a40      	ldr	r2, [pc, #256]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bb98:	23a8      	movs	r3, #168	; 0xa8
 800bb9a:	58d4      	ldr	r4, [r2, r3]
 800bb9c:	4d3d      	ldr	r5, [pc, #244]	; (800bc94 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bb9e:	402c      	ands	r4, r5
 800bba0:	50d4      	str	r4, [r2, r3]
 800bba2:	58d5      	ldr	r5, [r2, r3]
 800bba4:	24a0      	movs	r4, #160	; 0xa0
 800bba6:	0124      	lsls	r4, r4, #4
 800bba8:	432c      	orrs	r4, r5
 800bbaa:	50d4      	str	r4, [r2, r3]
 800bbac:	e726      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800bbae:	4a3a      	ldr	r2, [pc, #232]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bbb0:	23a8      	movs	r3, #168	; 0xa8
 800bbb2:	58d4      	ldr	r4, [r2, r3]
 800bbb4:	4d39      	ldr	r5, [pc, #228]	; (800bc9c <RemapAndLinkDMAtoUARTRx+0x330>)
 800bbb6:	402c      	ands	r4, r5
 800bbb8:	50d4      	str	r4, [r2, r3]
 800bbba:	58d5      	ldr	r5, [r2, r3]
 800bbbc:	24a0      	movs	r4, #160	; 0xa0
 800bbbe:	0324      	lsls	r4, r4, #12
 800bbc0:	432c      	orrs	r4, r5
 800bbc2:	50d4      	str	r4, [r2, r3]
 800bbc4:	e71a      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800bbc6:	4a34      	ldr	r2, [pc, #208]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bbc8:	23a8      	movs	r3, #168	; 0xa8
 800bbca:	58d4      	ldr	r4, [r2, r3]
 800bbcc:	4d34      	ldr	r5, [pc, #208]	; (800bca0 <RemapAndLinkDMAtoUARTRx+0x334>)
 800bbce:	402c      	ands	r4, r5
 800bbd0:	50d4      	str	r4, [r2, r3]
 800bbd2:	58d5      	ldr	r5, [r2, r3]
 800bbd4:	24a0      	movs	r4, #160	; 0xa0
 800bbd6:	0424      	lsls	r4, r4, #16
 800bbd8:	432c      	orrs	r4, r5
 800bbda:	50d4      	str	r4, [r2, r3]
 800bbdc:	e70e      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800bbde:	4a2c      	ldr	r2, [pc, #176]	; (800bc90 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bbe0:	23a8      	movs	r3, #168	; 0xa8
 800bbe2:	58d4      	ldr	r4, [r2, r3]
 800bbe4:	25f0      	movs	r5, #240	; 0xf0
 800bbe6:	43ac      	bics	r4, r5
 800bbe8:	50d4      	str	r4, [r2, r3]
 800bbea:	58d4      	ldr	r4, [r2, r3]
 800bbec:	3d50      	subs	r5, #80	; 0x50
 800bbee:	432c      	orrs	r4, r5
 800bbf0:	50d4      	str	r4, [r2, r3]
 800bbf2:	e703      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800bbf4:	4a28      	ldr	r2, [pc, #160]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bbf6:	23a8      	movs	r3, #168	; 0xa8
 800bbf8:	58d4      	ldr	r4, [r2, r3]
 800bbfa:	250f      	movs	r5, #15
 800bbfc:	43ac      	bics	r4, r5
 800bbfe:	50d4      	str	r4, [r2, r3]
 800bc00:	58d4      	ldr	r4, [r2, r3]
 800bc02:	3d04      	subs	r5, #4
 800bc04:	432c      	orrs	r4, r5
 800bc06:	50d4      	str	r4, [r2, r3]
 800bc08:	e6f8      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800bc0a:	4a23      	ldr	r2, [pc, #140]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bc0c:	23a8      	movs	r3, #168	; 0xa8
 800bc0e:	58d4      	ldr	r4, [r2, r3]
 800bc10:	4d20      	ldr	r5, [pc, #128]	; (800bc94 <RemapAndLinkDMAtoUARTRx+0x328>)
 800bc12:	402c      	ands	r4, r5
 800bc14:	50d4      	str	r4, [r2, r3]
 800bc16:	58d5      	ldr	r5, [r2, r3]
 800bc18:	24b0      	movs	r4, #176	; 0xb0
 800bc1a:	0124      	lsls	r4, r4, #4
 800bc1c:	432c      	orrs	r4, r5
 800bc1e:	50d4      	str	r4, [r2, r3]
 800bc20:	e6ec      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800bc22:	4a1d      	ldr	r2, [pc, #116]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bc24:	23a8      	movs	r3, #168	; 0xa8
 800bc26:	58d4      	ldr	r4, [r2, r3]
 800bc28:	4d1c      	ldr	r5, [pc, #112]	; (800bc9c <RemapAndLinkDMAtoUARTRx+0x330>)
 800bc2a:	402c      	ands	r4, r5
 800bc2c:	50d4      	str	r4, [r2, r3]
 800bc2e:	58d5      	ldr	r5, [r2, r3]
 800bc30:	24b0      	movs	r4, #176	; 0xb0
 800bc32:	0324      	lsls	r4, r4, #12
 800bc34:	432c      	orrs	r4, r5
 800bc36:	50d4      	str	r4, [r2, r3]
 800bc38:	e6e0      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800bc3a:	4a17      	ldr	r2, [pc, #92]	; (800bc98 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800bc3c:	23a8      	movs	r3, #168	; 0xa8
 800bc3e:	58d4      	ldr	r4, [r2, r3]
 800bc40:	4d17      	ldr	r5, [pc, #92]	; (800bca0 <RemapAndLinkDMAtoUARTRx+0x334>)
 800bc42:	402c      	ands	r4, r5
 800bc44:	50d4      	str	r4, [r2, r3]
 800bc46:	58d5      	ldr	r5, [r2, r3]
 800bc48:	24b0      	movs	r4, #176	; 0xb0
 800bc4a:	0424      	lsls	r4, r4, #16
 800bc4c:	432c      	orrs	r4, r5
 800bc4e:	50d4      	str	r4, [r2, r3]
 800bc50:	e6d4      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800bc52:	4a0f      	ldr	r2, [pc, #60]	; (800bc90 <RemapAndLinkDMAtoUARTRx+0x324>)
 800bc54:	23a8      	movs	r3, #168	; 0xa8
 800bc56:	58d4      	ldr	r4, [r2, r3]
 800bc58:	25f0      	movs	r5, #240	; 0xf0
 800bc5a:	43ac      	bics	r4, r5
 800bc5c:	50d4      	str	r4, [r2, r3]
 800bc5e:	58d4      	ldr	r4, [r2, r3]
 800bc60:	3d40      	subs	r5, #64	; 0x40
 800bc62:	432c      	orrs	r4, r5
 800bc64:	50d4      	str	r4, [r2, r3]
 800bc66:	e6c9      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
 800bc68:	40013800 	.word	0x40013800
 800bc6c:	40004400 	.word	0x40004400
 800bc70:	40004800 	.word	0x40004800
 800bc74:	40004c00 	.word	0x40004c00
 800bc78:	40020008 	.word	0x40020008
 800bc7c:	40020030 	.word	0x40020030
 800bc80:	40020058 	.word	0x40020058
 800bc84:	4002006c 	.word	0x4002006c
 800bc88:	4002041c 	.word	0x4002041c
 800bc8c:	40020430 	.word	0x40020430
 800bc90:	40020400 	.word	0x40020400
 800bc94:	fffff0ff 	.word	0xfffff0ff
 800bc98:	40020000 	.word	0x40020000
 800bc9c:	fff0ffff 	.word	0xfff0ffff
 800bca0:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800bca4:	4ab9      	ldr	r2, [pc, #740]	; (800bf8c <RemapAndLinkDMAtoUARTRx+0x620>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d159      	bne.n	800bd5e <RemapAndLinkDMAtoUARTRx+0x3f2>
 800bcaa:	680b      	ldr	r3, [r1, #0]
 800bcac:	4ab8      	ldr	r2, [pc, #736]	; (800bf90 <RemapAndLinkDMAtoUARTRx+0x624>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d01b      	beq.n	800bcea <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800bcb2:	4ab8      	ldr	r2, [pc, #736]	; (800bf94 <RemapAndLinkDMAtoUARTRx+0x628>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d023      	beq.n	800bd00 <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800bcb8:	4ab7      	ldr	r2, [pc, #732]	; (800bf98 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d02c      	beq.n	800bd18 <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800bcbe:	4ab7      	ldr	r2, [pc, #732]	; (800bf9c <RemapAndLinkDMAtoUARTRx+0x630>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d035      	beq.n	800bd30 <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800bcc4:	4ab6      	ldr	r2, [pc, #728]	; (800bfa0 <RemapAndLinkDMAtoUARTRx+0x634>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d03e      	beq.n	800bd48 <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800bcca:	4ab6      	ldr	r2, [pc, #728]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x638>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d000      	beq.n	800bcd2 <RemapAndLinkDMAtoUARTRx+0x366>
 800bcd0:	e694      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800bcd2:	4ab5      	ldr	r2, [pc, #724]	; (800bfa8 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bcd4:	23a8      	movs	r3, #168	; 0xa8
 800bcd6:	58d4      	ldr	r4, [r2, r3]
 800bcd8:	4db4      	ldr	r5, [pc, #720]	; (800bfac <RemapAndLinkDMAtoUARTRx+0x640>)
 800bcda:	402c      	ands	r4, r5
 800bcdc:	50d4      	str	r4, [r2, r3]
 800bcde:	58d5      	ldr	r5, [r2, r3]
 800bce0:	24c0      	movs	r4, #192	; 0xc0
 800bce2:	0124      	lsls	r4, r4, #4
 800bce4:	432c      	orrs	r4, r5
 800bce6:	50d4      	str	r4, [r2, r3]
 800bce8:	e688      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800bcea:	4ab1      	ldr	r2, [pc, #708]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bcec:	23a8      	movs	r3, #168	; 0xa8
 800bcee:	58d4      	ldr	r4, [r2, r3]
 800bcf0:	250f      	movs	r5, #15
 800bcf2:	43ac      	bics	r4, r5
 800bcf4:	50d4      	str	r4, [r2, r3]
 800bcf6:	58d4      	ldr	r4, [r2, r3]
 800bcf8:	3d03      	subs	r5, #3
 800bcfa:	432c      	orrs	r4, r5
 800bcfc:	50d4      	str	r4, [r2, r3]
 800bcfe:	e67d      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800bd00:	4aab      	ldr	r2, [pc, #684]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bd02:	23a8      	movs	r3, #168	; 0xa8
 800bd04:	58d4      	ldr	r4, [r2, r3]
 800bd06:	4da9      	ldr	r5, [pc, #676]	; (800bfac <RemapAndLinkDMAtoUARTRx+0x640>)
 800bd08:	402c      	ands	r4, r5
 800bd0a:	50d4      	str	r4, [r2, r3]
 800bd0c:	58d5      	ldr	r5, [r2, r3]
 800bd0e:	24c0      	movs	r4, #192	; 0xc0
 800bd10:	0124      	lsls	r4, r4, #4
 800bd12:	432c      	orrs	r4, r5
 800bd14:	50d4      	str	r4, [r2, r3]
 800bd16:	e671      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800bd18:	4aa5      	ldr	r2, [pc, #660]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bd1a:	23a8      	movs	r3, #168	; 0xa8
 800bd1c:	58d4      	ldr	r4, [r2, r3]
 800bd1e:	4da5      	ldr	r5, [pc, #660]	; (800bfb4 <RemapAndLinkDMAtoUARTRx+0x648>)
 800bd20:	402c      	ands	r4, r5
 800bd22:	50d4      	str	r4, [r2, r3]
 800bd24:	58d5      	ldr	r5, [r2, r3]
 800bd26:	24c0      	movs	r4, #192	; 0xc0
 800bd28:	0324      	lsls	r4, r4, #12
 800bd2a:	432c      	orrs	r4, r5
 800bd2c:	50d4      	str	r4, [r2, r3]
 800bd2e:	e665      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800bd30:	4a9f      	ldr	r2, [pc, #636]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bd32:	23a8      	movs	r3, #168	; 0xa8
 800bd34:	58d4      	ldr	r4, [r2, r3]
 800bd36:	4da0      	ldr	r5, [pc, #640]	; (800bfb8 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800bd38:	402c      	ands	r4, r5
 800bd3a:	50d4      	str	r4, [r2, r3]
 800bd3c:	58d5      	ldr	r5, [r2, r3]
 800bd3e:	24c0      	movs	r4, #192	; 0xc0
 800bd40:	0424      	lsls	r4, r4, #16
 800bd42:	432c      	orrs	r4, r5
 800bd44:	50d4      	str	r4, [r2, r3]
 800bd46:	e659      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800bd48:	4a97      	ldr	r2, [pc, #604]	; (800bfa8 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bd4a:	23a8      	movs	r3, #168	; 0xa8
 800bd4c:	58d4      	ldr	r4, [r2, r3]
 800bd4e:	25f0      	movs	r5, #240	; 0xf0
 800bd50:	43ac      	bics	r4, r5
 800bd52:	50d4      	str	r4, [r2, r3]
 800bd54:	58d4      	ldr	r4, [r2, r3]
 800bd56:	3d30      	subs	r5, #48	; 0x30
 800bd58:	432c      	orrs	r4, r5
 800bd5a:	50d4      	str	r4, [r2, r3]
 800bd5c:	e64e      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800bd5e:	4a97      	ldr	r2, [pc, #604]	; (800bfbc <RemapAndLinkDMAtoUARTRx+0x650>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d159      	bne.n	800be18 <RemapAndLinkDMAtoUARTRx+0x4ac>
 800bd64:	680b      	ldr	r3, [r1, #0]
 800bd66:	4a8a      	ldr	r2, [pc, #552]	; (800bf90 <RemapAndLinkDMAtoUARTRx+0x624>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d01b      	beq.n	800bda4 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800bd6c:	4a89      	ldr	r2, [pc, #548]	; (800bf94 <RemapAndLinkDMAtoUARTRx+0x628>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d023      	beq.n	800bdba <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800bd72:	4a89      	ldr	r2, [pc, #548]	; (800bf98 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d02c      	beq.n	800bdd2 <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800bd78:	4a88      	ldr	r2, [pc, #544]	; (800bf9c <RemapAndLinkDMAtoUARTRx+0x630>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d035      	beq.n	800bdea <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800bd7e:	4a88      	ldr	r2, [pc, #544]	; (800bfa0 <RemapAndLinkDMAtoUARTRx+0x634>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d03e      	beq.n	800be02 <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800bd84:	4a87      	ldr	r2, [pc, #540]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x638>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d000      	beq.n	800bd8c <RemapAndLinkDMAtoUARTRx+0x420>
 800bd8a:	e637      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800bd8c:	4a86      	ldr	r2, [pc, #536]	; (800bfa8 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bd8e:	23a8      	movs	r3, #168	; 0xa8
 800bd90:	58d4      	ldr	r4, [r2, r3]
 800bd92:	4d86      	ldr	r5, [pc, #536]	; (800bfac <RemapAndLinkDMAtoUARTRx+0x640>)
 800bd94:	402c      	ands	r4, r5
 800bd96:	50d4      	str	r4, [r2, r3]
 800bd98:	58d5      	ldr	r5, [r2, r3]
 800bd9a:	24d0      	movs	r4, #208	; 0xd0
 800bd9c:	0124      	lsls	r4, r4, #4
 800bd9e:	432c      	orrs	r4, r5
 800bda0:	50d4      	str	r4, [r2, r3]
 800bda2:	e62b      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800bda4:	4a82      	ldr	r2, [pc, #520]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bda6:	23a8      	movs	r3, #168	; 0xa8
 800bda8:	58d4      	ldr	r4, [r2, r3]
 800bdaa:	250f      	movs	r5, #15
 800bdac:	43ac      	bics	r4, r5
 800bdae:	50d4      	str	r4, [r2, r3]
 800bdb0:	58d4      	ldr	r4, [r2, r3]
 800bdb2:	3d02      	subs	r5, #2
 800bdb4:	432c      	orrs	r4, r5
 800bdb6:	50d4      	str	r4, [r2, r3]
 800bdb8:	e620      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800bdba:	4a7d      	ldr	r2, [pc, #500]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bdbc:	23a8      	movs	r3, #168	; 0xa8
 800bdbe:	58d4      	ldr	r4, [r2, r3]
 800bdc0:	4d7a      	ldr	r5, [pc, #488]	; (800bfac <RemapAndLinkDMAtoUARTRx+0x640>)
 800bdc2:	402c      	ands	r4, r5
 800bdc4:	50d4      	str	r4, [r2, r3]
 800bdc6:	58d5      	ldr	r5, [r2, r3]
 800bdc8:	24d0      	movs	r4, #208	; 0xd0
 800bdca:	0124      	lsls	r4, r4, #4
 800bdcc:	432c      	orrs	r4, r5
 800bdce:	50d4      	str	r4, [r2, r3]
 800bdd0:	e614      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800bdd2:	4a77      	ldr	r2, [pc, #476]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bdd4:	23a8      	movs	r3, #168	; 0xa8
 800bdd6:	58d4      	ldr	r4, [r2, r3]
 800bdd8:	4d76      	ldr	r5, [pc, #472]	; (800bfb4 <RemapAndLinkDMAtoUARTRx+0x648>)
 800bdda:	402c      	ands	r4, r5
 800bddc:	50d4      	str	r4, [r2, r3]
 800bdde:	58d5      	ldr	r5, [r2, r3]
 800bde0:	24d0      	movs	r4, #208	; 0xd0
 800bde2:	0324      	lsls	r4, r4, #12
 800bde4:	432c      	orrs	r4, r5
 800bde6:	50d4      	str	r4, [r2, r3]
 800bde8:	e608      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800bdea:	4a71      	ldr	r2, [pc, #452]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bdec:	23a8      	movs	r3, #168	; 0xa8
 800bdee:	58d4      	ldr	r4, [r2, r3]
 800bdf0:	4d71      	ldr	r5, [pc, #452]	; (800bfb8 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800bdf2:	402c      	ands	r4, r5
 800bdf4:	50d4      	str	r4, [r2, r3]
 800bdf6:	58d5      	ldr	r5, [r2, r3]
 800bdf8:	24d0      	movs	r4, #208	; 0xd0
 800bdfa:	0424      	lsls	r4, r4, #16
 800bdfc:	432c      	orrs	r4, r5
 800bdfe:	50d4      	str	r4, [r2, r3]
 800be00:	e5fc      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800be02:	4a69      	ldr	r2, [pc, #420]	; (800bfa8 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800be04:	23a8      	movs	r3, #168	; 0xa8
 800be06:	58d4      	ldr	r4, [r2, r3]
 800be08:	25f0      	movs	r5, #240	; 0xf0
 800be0a:	43ac      	bics	r4, r5
 800be0c:	50d4      	str	r4, [r2, r3]
 800be0e:	58d4      	ldr	r4, [r2, r3]
 800be10:	3d20      	subs	r5, #32
 800be12:	432c      	orrs	r4, r5
 800be14:	50d4      	str	r4, [r2, r3]
 800be16:	e5f1      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800be18:	4a69      	ldr	r2, [pc, #420]	; (800bfc0 <RemapAndLinkDMAtoUARTRx+0x654>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d159      	bne.n	800bed2 <RemapAndLinkDMAtoUARTRx+0x566>
 800be1e:	680b      	ldr	r3, [r1, #0]
 800be20:	4a5b      	ldr	r2, [pc, #364]	; (800bf90 <RemapAndLinkDMAtoUARTRx+0x624>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d01b      	beq.n	800be5e <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800be26:	4a5b      	ldr	r2, [pc, #364]	; (800bf94 <RemapAndLinkDMAtoUARTRx+0x628>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d023      	beq.n	800be74 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800be2c:	4a5a      	ldr	r2, [pc, #360]	; (800bf98 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d02c      	beq.n	800be8c <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800be32:	4a5a      	ldr	r2, [pc, #360]	; (800bf9c <RemapAndLinkDMAtoUARTRx+0x630>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d035      	beq.n	800bea4 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800be38:	4a59      	ldr	r2, [pc, #356]	; (800bfa0 <RemapAndLinkDMAtoUARTRx+0x634>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d03e      	beq.n	800bebc <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800be3e:	4a59      	ldr	r2, [pc, #356]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x638>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d000      	beq.n	800be46 <RemapAndLinkDMAtoUARTRx+0x4da>
 800be44:	e5da      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800be46:	4a58      	ldr	r2, [pc, #352]	; (800bfa8 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800be48:	23a8      	movs	r3, #168	; 0xa8
 800be4a:	58d4      	ldr	r4, [r2, r3]
 800be4c:	4d57      	ldr	r5, [pc, #348]	; (800bfac <RemapAndLinkDMAtoUARTRx+0x640>)
 800be4e:	402c      	ands	r4, r5
 800be50:	50d4      	str	r4, [r2, r3]
 800be52:	58d5      	ldr	r5, [r2, r3]
 800be54:	24e0      	movs	r4, #224	; 0xe0
 800be56:	0124      	lsls	r4, r4, #4
 800be58:	432c      	orrs	r4, r5
 800be5a:	50d4      	str	r4, [r2, r3]
 800be5c:	e5ce      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800be5e:	4a54      	ldr	r2, [pc, #336]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800be60:	23a8      	movs	r3, #168	; 0xa8
 800be62:	58d4      	ldr	r4, [r2, r3]
 800be64:	250f      	movs	r5, #15
 800be66:	43ac      	bics	r4, r5
 800be68:	50d4      	str	r4, [r2, r3]
 800be6a:	58d4      	ldr	r4, [r2, r3]
 800be6c:	3d01      	subs	r5, #1
 800be6e:	432c      	orrs	r4, r5
 800be70:	50d4      	str	r4, [r2, r3]
 800be72:	e5c3      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800be74:	4a4e      	ldr	r2, [pc, #312]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800be76:	23a8      	movs	r3, #168	; 0xa8
 800be78:	58d4      	ldr	r4, [r2, r3]
 800be7a:	4d4c      	ldr	r5, [pc, #304]	; (800bfac <RemapAndLinkDMAtoUARTRx+0x640>)
 800be7c:	402c      	ands	r4, r5
 800be7e:	50d4      	str	r4, [r2, r3]
 800be80:	58d5      	ldr	r5, [r2, r3]
 800be82:	24e0      	movs	r4, #224	; 0xe0
 800be84:	0124      	lsls	r4, r4, #4
 800be86:	432c      	orrs	r4, r5
 800be88:	50d4      	str	r4, [r2, r3]
 800be8a:	e5b7      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800be8c:	4a48      	ldr	r2, [pc, #288]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800be8e:	23a8      	movs	r3, #168	; 0xa8
 800be90:	58d4      	ldr	r4, [r2, r3]
 800be92:	4d48      	ldr	r5, [pc, #288]	; (800bfb4 <RemapAndLinkDMAtoUARTRx+0x648>)
 800be94:	402c      	ands	r4, r5
 800be96:	50d4      	str	r4, [r2, r3]
 800be98:	58d5      	ldr	r5, [r2, r3]
 800be9a:	24e0      	movs	r4, #224	; 0xe0
 800be9c:	0324      	lsls	r4, r4, #12
 800be9e:	432c      	orrs	r4, r5
 800bea0:	50d4      	str	r4, [r2, r3]
 800bea2:	e5ab      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800bea4:	4a42      	ldr	r2, [pc, #264]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bea6:	23a8      	movs	r3, #168	; 0xa8
 800bea8:	58d4      	ldr	r4, [r2, r3]
 800beaa:	4d43      	ldr	r5, [pc, #268]	; (800bfb8 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800beac:	402c      	ands	r4, r5
 800beae:	50d4      	str	r4, [r2, r3]
 800beb0:	58d5      	ldr	r5, [r2, r3]
 800beb2:	24e0      	movs	r4, #224	; 0xe0
 800beb4:	0424      	lsls	r4, r4, #16
 800beb6:	432c      	orrs	r4, r5
 800beb8:	50d4      	str	r4, [r2, r3]
 800beba:	e59f      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800bebc:	4a3a      	ldr	r2, [pc, #232]	; (800bfa8 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bebe:	23a8      	movs	r3, #168	; 0xa8
 800bec0:	58d4      	ldr	r4, [r2, r3]
 800bec2:	25f0      	movs	r5, #240	; 0xf0
 800bec4:	43ac      	bics	r4, r5
 800bec6:	50d4      	str	r4, [r2, r3]
 800bec8:	58d4      	ldr	r4, [r2, r3]
 800beca:	3d10      	subs	r5, #16
 800becc:	432c      	orrs	r4, r5
 800bece:	50d4      	str	r4, [r2, r3]
 800bed0:	e594      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800bed2:	4a3c      	ldr	r2, [pc, #240]	; (800bfc4 <RemapAndLinkDMAtoUARTRx+0x658>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d000      	beq.n	800beda <RemapAndLinkDMAtoUARTRx+0x56e>
 800bed8:	e590      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
 800beda:	680b      	ldr	r3, [r1, #0]
 800bedc:	4a2c      	ldr	r2, [pc, #176]	; (800bf90 <RemapAndLinkDMAtoUARTRx+0x624>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d01b      	beq.n	800bf1a <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800bee2:	4a2c      	ldr	r2, [pc, #176]	; (800bf94 <RemapAndLinkDMAtoUARTRx+0x628>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d022      	beq.n	800bf2e <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800bee8:	4a2b      	ldr	r2, [pc, #172]	; (800bf98 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d02b      	beq.n	800bf46 <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800beee:	4a2b      	ldr	r2, [pc, #172]	; (800bf9c <RemapAndLinkDMAtoUARTRx+0x630>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d034      	beq.n	800bf5e <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800bef4:	4a2a      	ldr	r2, [pc, #168]	; (800bfa0 <RemapAndLinkDMAtoUARTRx+0x634>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d03d      	beq.n	800bf76 <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800befa:	4a2a      	ldr	r2, [pc, #168]	; (800bfa4 <RemapAndLinkDMAtoUARTRx+0x638>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d000      	beq.n	800bf02 <RemapAndLinkDMAtoUARTRx+0x596>
 800bf00:	e57c      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800bf02:	4a29      	ldr	r2, [pc, #164]	; (800bfa8 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bf04:	23a8      	movs	r3, #168	; 0xa8
 800bf06:	58d4      	ldr	r4, [r2, r3]
 800bf08:	4d28      	ldr	r5, [pc, #160]	; (800bfac <RemapAndLinkDMAtoUARTRx+0x640>)
 800bf0a:	402c      	ands	r4, r5
 800bf0c:	50d4      	str	r4, [r2, r3]
 800bf0e:	58d5      	ldr	r5, [r2, r3]
 800bf10:	24f0      	movs	r4, #240	; 0xf0
 800bf12:	0124      	lsls	r4, r4, #4
 800bf14:	432c      	orrs	r4, r5
 800bf16:	50d4      	str	r4, [r2, r3]
 800bf18:	e570      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800bf1a:	4a25      	ldr	r2, [pc, #148]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bf1c:	23a8      	movs	r3, #168	; 0xa8
 800bf1e:	58d5      	ldr	r5, [r2, r3]
 800bf20:	260f      	movs	r6, #15
 800bf22:	43b5      	bics	r5, r6
 800bf24:	50d5      	str	r5, [r2, r3]
 800bf26:	58d4      	ldr	r4, [r2, r3]
 800bf28:	4334      	orrs	r4, r6
 800bf2a:	50d4      	str	r4, [r2, r3]
 800bf2c:	e566      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800bf2e:	4a20      	ldr	r2, [pc, #128]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bf30:	23a8      	movs	r3, #168	; 0xa8
 800bf32:	58d4      	ldr	r4, [r2, r3]
 800bf34:	4d1d      	ldr	r5, [pc, #116]	; (800bfac <RemapAndLinkDMAtoUARTRx+0x640>)
 800bf36:	402c      	ands	r4, r5
 800bf38:	50d4      	str	r4, [r2, r3]
 800bf3a:	58d5      	ldr	r5, [r2, r3]
 800bf3c:	24f0      	movs	r4, #240	; 0xf0
 800bf3e:	0124      	lsls	r4, r4, #4
 800bf40:	432c      	orrs	r4, r5
 800bf42:	50d4      	str	r4, [r2, r3]
 800bf44:	e55a      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800bf46:	4a1a      	ldr	r2, [pc, #104]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bf48:	23a8      	movs	r3, #168	; 0xa8
 800bf4a:	58d4      	ldr	r4, [r2, r3]
 800bf4c:	4d19      	ldr	r5, [pc, #100]	; (800bfb4 <RemapAndLinkDMAtoUARTRx+0x648>)
 800bf4e:	402c      	ands	r4, r5
 800bf50:	50d4      	str	r4, [r2, r3]
 800bf52:	58d5      	ldr	r5, [r2, r3]
 800bf54:	24f0      	movs	r4, #240	; 0xf0
 800bf56:	0324      	lsls	r4, r4, #12
 800bf58:	432c      	orrs	r4, r5
 800bf5a:	50d4      	str	r4, [r2, r3]
 800bf5c:	e54e      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800bf5e:	4a14      	ldr	r2, [pc, #80]	; (800bfb0 <RemapAndLinkDMAtoUARTRx+0x644>)
 800bf60:	23a8      	movs	r3, #168	; 0xa8
 800bf62:	58d4      	ldr	r4, [r2, r3]
 800bf64:	4d14      	ldr	r5, [pc, #80]	; (800bfb8 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800bf66:	402c      	ands	r4, r5
 800bf68:	50d4      	str	r4, [r2, r3]
 800bf6a:	58d5      	ldr	r5, [r2, r3]
 800bf6c:	24f0      	movs	r4, #240	; 0xf0
 800bf6e:	0424      	lsls	r4, r4, #16
 800bf70:	432c      	orrs	r4, r5
 800bf72:	50d4      	str	r4, [r2, r3]
 800bf74:	e542      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800bf76:	4a0c      	ldr	r2, [pc, #48]	; (800bfa8 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bf78:	23a8      	movs	r3, #168	; 0xa8
 800bf7a:	58d5      	ldr	r5, [r2, r3]
 800bf7c:	26f0      	movs	r6, #240	; 0xf0
 800bf7e:	43b5      	bics	r5, r6
 800bf80:	50d5      	str	r5, [r2, r3]
 800bf82:	58d4      	ldr	r4, [r2, r3]
 800bf84:	4334      	orrs	r4, r6
 800bf86:	50d4      	str	r4, [r2, r3]
 800bf88:	e538      	b.n	800b9fc <RemapAndLinkDMAtoUARTRx+0x90>
 800bf8a:	46c0      	nop			; (mov r8, r8)
 800bf8c:	40005000 	.word	0x40005000
 800bf90:	40020008 	.word	0x40020008
 800bf94:	40020030 	.word	0x40020030
 800bf98:	40020058 	.word	0x40020058
 800bf9c:	4002006c 	.word	0x4002006c
 800bfa0:	4002041c 	.word	0x4002041c
 800bfa4:	40020430 	.word	0x40020430
 800bfa8:	40020400 	.word	0x40020400
 800bfac:	fffff0ff 	.word	0xfffff0ff
 800bfb0:	40020000 	.word	0x40020000
 800bfb4:	fff0ffff 	.word	0xfff0ffff
 800bfb8:	ff0fffff 	.word	0xff0fffff
 800bfbc:	40011400 	.word	0x40011400
 800bfc0:	40011800 	.word	0x40011800
 800bfc4:	40011c00 	.word	0x40011c00

0800bfc8 <DMA_MSG_RX_Setup>:
{	
 800bfc8:	b570      	push	{r4, r5, r6, lr}
 800bfca:	0004      	movs	r4, r0
 800bfcc:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800bfce:	f7ff fccd 	bl	800b96c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800bfd2:	2100      	movs	r1, #0
 800bfd4:	0028      	movs	r0, r5
 800bfd6:	f7ff fc13 	bl	800b800 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800bfda:	0020      	movs	r0, r4
 800bfdc:	f7ff fb52 	bl	800b684 <GetPort>
 800bfe0:	1e41      	subs	r1, r0, #1
 800bfe2:	0189      	lsls	r1, r1, #6
 800bfe4:	4803      	ldr	r0, [pc, #12]	; (800bff4 <DMA_MSG_RX_Setup+0x2c>)
 800bfe6:	1809      	adds	r1, r1, r0
 800bfe8:	2240      	movs	r2, #64	; 0x40
 800bfea:	0020      	movs	r0, r4
 800bfec:	f006 f8a8 	bl	8012140 <HAL_UART_Receive_DMA>
}
 800bff0:	bd70      	pop	{r4, r5, r6, pc}
 800bff2:	46c0      	nop			; (mov r8, r8)
 800bff4:	200012d0 	.word	0x200012d0

0800bff8 <SetupMessagingRxDMAs>:
{	
 800bff8:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800bffa:	4b1b      	ldr	r3, [pc, #108]	; (800c068 <SetupMessagingRxDMAs+0x70>)
 800bffc:	785b      	ldrb	r3, [r3, #1]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d014      	beq.n	800c02c <SetupMessagingRxDMAs+0x34>
	if (portStatus[P2] == FREE)	
 800c002:	4b19      	ldr	r3, [pc, #100]	; (800c068 <SetupMessagingRxDMAs+0x70>)
 800c004:	789b      	ldrb	r3, [r3, #2]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d015      	beq.n	800c036 <SetupMessagingRxDMAs+0x3e>
	if (portStatus[P3] == FREE)
 800c00a:	4b17      	ldr	r3, [pc, #92]	; (800c068 <SetupMessagingRxDMAs+0x70>)
 800c00c:	78db      	ldrb	r3, [r3, #3]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d016      	beq.n	800c040 <SetupMessagingRxDMAs+0x48>
	if (portStatus[P4] == FREE)
 800c012:	4b15      	ldr	r3, [pc, #84]	; (800c068 <SetupMessagingRxDMAs+0x70>)
 800c014:	791b      	ldrb	r3, [r3, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d017      	beq.n	800c04a <SetupMessagingRxDMAs+0x52>
	if (portStatus[P5] == FREE)
 800c01a:	4b13      	ldr	r3, [pc, #76]	; (800c068 <SetupMessagingRxDMAs+0x70>)
 800c01c:	795b      	ldrb	r3, [r3, #5]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d018      	beq.n	800c054 <SetupMessagingRxDMAs+0x5c>
	if (portStatus[P6] == FREE)
 800c022:	4b11      	ldr	r3, [pc, #68]	; (800c068 <SetupMessagingRxDMAs+0x70>)
 800c024:	799b      	ldrb	r3, [r3, #6]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d019      	beq.n	800c05e <SetupMessagingRxDMAs+0x66>
}
 800c02a:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800c02c:	490f      	ldr	r1, [pc, #60]	; (800c06c <SetupMessagingRxDMAs+0x74>)
 800c02e:	4810      	ldr	r0, [pc, #64]	; (800c070 <SetupMessagingRxDMAs+0x78>)
 800c030:	f7ff ffca 	bl	800bfc8 <DMA_MSG_RX_Setup>
 800c034:	e7e5      	b.n	800c002 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800c036:	490f      	ldr	r1, [pc, #60]	; (800c074 <SetupMessagingRxDMAs+0x7c>)
 800c038:	480f      	ldr	r0, [pc, #60]	; (800c078 <SetupMessagingRxDMAs+0x80>)
 800c03a:	f7ff ffc5 	bl	800bfc8 <DMA_MSG_RX_Setup>
 800c03e:	e7e4      	b.n	800c00a <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800c040:	490e      	ldr	r1, [pc, #56]	; (800c07c <SetupMessagingRxDMAs+0x84>)
 800c042:	480f      	ldr	r0, [pc, #60]	; (800c080 <SetupMessagingRxDMAs+0x88>)
 800c044:	f7ff ffc0 	bl	800bfc8 <DMA_MSG_RX_Setup>
 800c048:	e7e3      	b.n	800c012 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800c04a:	490e      	ldr	r1, [pc, #56]	; (800c084 <SetupMessagingRxDMAs+0x8c>)
 800c04c:	480e      	ldr	r0, [pc, #56]	; (800c088 <SetupMessagingRxDMAs+0x90>)
 800c04e:	f7ff ffbb 	bl	800bfc8 <DMA_MSG_RX_Setup>
 800c052:	e7e2      	b.n	800c01a <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800c054:	490d      	ldr	r1, [pc, #52]	; (800c08c <SetupMessagingRxDMAs+0x94>)
 800c056:	480e      	ldr	r0, [pc, #56]	; (800c090 <SetupMessagingRxDMAs+0x98>)
 800c058:	f7ff ffb6 	bl	800bfc8 <DMA_MSG_RX_Setup>
 800c05c:	e7e1      	b.n	800c022 <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800c05e:	490d      	ldr	r1, [pc, #52]	; (800c094 <SetupMessagingRxDMAs+0x9c>)
 800c060:	480d      	ldr	r0, [pc, #52]	; (800c098 <SetupMessagingRxDMAs+0xa0>)
 800c062:	f7ff ffb1 	bl	800bfc8 <DMA_MSG_RX_Setup>
}
 800c066:	e7e0      	b.n	800c02a <SetupMessagingRxDMAs+0x32>
 800c068:	200010f8 	.word	0x200010f8
 800c06c:	2000179c 	.word	0x2000179c
 800c070:	20006ca4 	.word	0x20006ca4
 800c074:	200017d4 	.word	0x200017d4
 800c078:	20006d14 	.word	0x20006d14
 800c07c:	2000180c 	.word	0x2000180c
 800c080:	20006c34 	.word	0x20006c34
 800c084:	20001844 	.word	0x20001844
 800c088:	20006bc4 	.word	0x20006bc4
 800c08c:	2000187c 	.word	0x2000187c
 800c090:	20006b54 	.word	0x20006b54
 800c094:	200018b4 	.word	0x200018b4
 800c098:	20006ae4 	.word	0x20006ae4

0800c09c <DMA_STREAM_Setup>:
{	
 800c09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c09e:	0005      	movs	r5, r0
 800c0a0:	000f      	movs	r7, r1
 800c0a2:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800c0a4:	f7ff faee 	bl	800b684 <GetPort>
	hDMA = &streamDMA[port-1];
 800c0a8:	3801      	subs	r0, #1
 800c0aa:	00c4      	lsls	r4, r0, #3
 800c0ac:	1a24      	subs	r4, r4, r0
 800c0ae:	00e4      	lsls	r4, r4, #3
 800c0b0:	4809      	ldr	r0, [pc, #36]	; (800c0d8 <DMA_STREAM_Setup+0x3c>)
 800c0b2:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800c0b4:	0021      	movs	r1, r4
 800c0b6:	0028      	movs	r0, r5
 800c0b8:	f7ff fc58 	bl	800b96c <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800c0bc:	2101      	movs	r1, #1
 800c0be:	0020      	movs	r0, r4
 800c0c0:	f7ff fb9e 	bl	800b800 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800c0c4:	2369      	movs	r3, #105	; 0x69
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	3128      	adds	r1, #40	; 0x28
 800c0ce:	0032      	movs	r2, r6
 800c0d0:	0028      	movs	r0, r5
 800c0d2:	f006 f835 	bl	8012140 <HAL_UART_Receive_DMA>
}
 800c0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0d8:	20001994 	.word	0x20001994

0800c0dc <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800c0dc:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c0de:	6803      	ldr	r3, [r0, #0]
 800c0e0:	4abd      	ldr	r2, [pc, #756]	; (800c3d8 <RemapAndLinkDMAtoUARTTx+0x2fc>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d02f      	beq.n	800c146 <RemapAndLinkDMAtoUARTTx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c0e6:	4abd      	ldr	r2, [pc, #756]	; (800c3dc <RemapAndLinkDMAtoUARTTx+0x300>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d100      	bne.n	800c0ee <RemapAndLinkDMAtoUARTTx+0x12>
 800c0ec:	e087      	b.n	800c1fe <RemapAndLinkDMAtoUARTTx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c0ee:	4abc      	ldr	r2, [pc, #752]	; (800c3e0 <RemapAndLinkDMAtoUARTTx+0x304>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d100      	bne.n	800c0f6 <RemapAndLinkDMAtoUARTTx+0x1a>
 800c0f4:	e0dc      	b.n	800c2b0 <RemapAndLinkDMAtoUARTTx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800c0f6:	4abb      	ldr	r2, [pc, #748]	; (800c3e4 <RemapAndLinkDMAtoUARTTx+0x308>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d000      	beq.n	800c0fe <RemapAndLinkDMAtoUARTTx+0x22>
 800c0fc:	e18a      	b.n	800c414 <RemapAndLinkDMAtoUARTTx+0x338>
 800c0fe:	680b      	ldr	r3, [r1, #0]
 800c100:	4ab9      	ldr	r2, [pc, #740]	; (800c3e8 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d100      	bne.n	800c108 <RemapAndLinkDMAtoUARTTx+0x2c>
 800c106:	e12d      	b.n	800c364 <RemapAndLinkDMAtoUARTTx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800c108:	4ab8      	ldr	r2, [pc, #736]	; (800c3ec <RemapAndLinkDMAtoUARTTx+0x310>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d100      	bne.n	800c110 <RemapAndLinkDMAtoUARTTx+0x34>
 800c10e:	e134      	b.n	800c37a <RemapAndLinkDMAtoUARTTx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800c110:	4ab7      	ldr	r2, [pc, #732]	; (800c3f0 <RemapAndLinkDMAtoUARTTx+0x314>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d100      	bne.n	800c118 <RemapAndLinkDMAtoUARTTx+0x3c>
 800c116:	e13c      	b.n	800c392 <RemapAndLinkDMAtoUARTTx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800c118:	4ab6      	ldr	r2, [pc, #728]	; (800c3f4 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d100      	bne.n	800c120 <RemapAndLinkDMAtoUARTTx+0x44>
 800c11e:	e144      	b.n	800c3aa <RemapAndLinkDMAtoUARTTx+0x2ce>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800c120:	4ab5      	ldr	r2, [pc, #724]	; (800c3f8 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d100      	bne.n	800c128 <RemapAndLinkDMAtoUARTTx+0x4c>
 800c126:	e14b      	b.n	800c3c0 <RemapAndLinkDMAtoUARTTx+0x2e4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800c128:	4ab4      	ldr	r2, [pc, #720]	; (800c3fc <RemapAndLinkDMAtoUARTTx+0x320>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d11e      	bne.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800c12e:	4ab4      	ldr	r2, [pc, #720]	; (800c400 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c130:	23a8      	movs	r3, #168	; 0xa8
 800c132:	58d4      	ldr	r4, [r2, r3]
 800c134:	4db3      	ldr	r5, [pc, #716]	; (800c404 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c136:	402c      	ands	r4, r5
 800c138:	50d4      	str	r4, [r2, r3]
 800c13a:	58d5      	ldr	r5, [r2, r3]
 800c13c:	24b0      	movs	r4, #176	; 0xb0
 800c13e:	0324      	lsls	r4, r4, #12
 800c140:	432c      	orrs	r4, r5
 800c142:	50d4      	str	r4, [r2, r3]
 800c144:	e012      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800c146:	680b      	ldr	r3, [r1, #0]
 800c148:	4aa7      	ldr	r2, [pc, #668]	; (800c3e8 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d011      	beq.n	800c172 <RemapAndLinkDMAtoUARTTx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800c14e:	4aa7      	ldr	r2, [pc, #668]	; (800c3ec <RemapAndLinkDMAtoUARTTx+0x310>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d019      	beq.n	800c188 <RemapAndLinkDMAtoUARTTx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800c154:	4aa6      	ldr	r2, [pc, #664]	; (800c3f0 <RemapAndLinkDMAtoUARTTx+0x314>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d022      	beq.n	800c1a0 <RemapAndLinkDMAtoUARTTx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800c15a:	4aa6      	ldr	r2, [pc, #664]	; (800c3f4 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d02b      	beq.n	800c1b8 <RemapAndLinkDMAtoUARTTx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800c160:	4aa5      	ldr	r2, [pc, #660]	; (800c3f8 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d033      	beq.n	800c1ce <RemapAndLinkDMAtoUARTTx+0xf2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800c166:	4aa5      	ldr	r2, [pc, #660]	; (800c3fc <RemapAndLinkDMAtoUARTTx+0x320>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d03c      	beq.n	800c1e6 <RemapAndLinkDMAtoUARTTx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800c16c:	6601      	str	r1, [r0, #96]	; 0x60
 800c16e:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c170:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800c172:	4aa5      	ldr	r2, [pc, #660]	; (800c408 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c174:	23a8      	movs	r3, #168	; 0xa8
 800c176:	58d4      	ldr	r4, [r2, r3]
 800c178:	25f0      	movs	r5, #240	; 0xf0
 800c17a:	43ac      	bics	r4, r5
 800c17c:	50d4      	str	r4, [r2, r3]
 800c17e:	58d4      	ldr	r4, [r2, r3]
 800c180:	3d70      	subs	r5, #112	; 0x70
 800c182:	432c      	orrs	r4, r5
 800c184:	50d4      	str	r4, [r2, r3]
 800c186:	e7f1      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800c188:	4a9f      	ldr	r2, [pc, #636]	; (800c408 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c18a:	23a8      	movs	r3, #168	; 0xa8
 800c18c:	58d4      	ldr	r4, [r2, r3]
 800c18e:	4d9f      	ldr	r5, [pc, #636]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x330>)
 800c190:	402c      	ands	r4, r5
 800c192:	50d4      	str	r4, [r2, r3]
 800c194:	58d5      	ldr	r5, [r2, r3]
 800c196:	2480      	movs	r4, #128	; 0x80
 800c198:	0224      	lsls	r4, r4, #8
 800c19a:	432c      	orrs	r4, r5
 800c19c:	50d4      	str	r4, [r2, r3]
 800c19e:	e7e5      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800c1a0:	4a99      	ldr	r2, [pc, #612]	; (800c408 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c1a2:	23a8      	movs	r3, #168	; 0xa8
 800c1a4:	58d4      	ldr	r4, [r2, r3]
 800c1a6:	4d9a      	ldr	r5, [pc, #616]	; (800c410 <RemapAndLinkDMAtoUARTTx+0x334>)
 800c1a8:	402c      	ands	r4, r5
 800c1aa:	50d4      	str	r4, [r2, r3]
 800c1ac:	58d5      	ldr	r5, [r2, r3]
 800c1ae:	2480      	movs	r4, #128	; 0x80
 800c1b0:	0524      	lsls	r4, r4, #20
 800c1b2:	432c      	orrs	r4, r5
 800c1b4:	50d4      	str	r4, [r2, r3]
 800c1b6:	e7d9      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800c1b8:	4a91      	ldr	r2, [pc, #580]	; (800c400 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c1ba:	23a8      	movs	r3, #168	; 0xa8
 800c1bc:	58d4      	ldr	r4, [r2, r3]
 800c1be:	250f      	movs	r5, #15
 800c1c0:	43ac      	bics	r4, r5
 800c1c2:	50d4      	str	r4, [r2, r3]
 800c1c4:	58d4      	ldr	r4, [r2, r3]
 800c1c6:	3d07      	subs	r5, #7
 800c1c8:	432c      	orrs	r4, r5
 800c1ca:	50d4      	str	r4, [r2, r3]
 800c1cc:	e7ce      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800c1ce:	4a8c      	ldr	r2, [pc, #560]	; (800c400 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c1d0:	23a8      	movs	r3, #168	; 0xa8
 800c1d2:	58d4      	ldr	r4, [r2, r3]
 800c1d4:	4d8d      	ldr	r5, [pc, #564]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x330>)
 800c1d6:	402c      	ands	r4, r5
 800c1d8:	50d4      	str	r4, [r2, r3]
 800c1da:	58d5      	ldr	r5, [r2, r3]
 800c1dc:	2480      	movs	r4, #128	; 0x80
 800c1de:	0224      	lsls	r4, r4, #8
 800c1e0:	432c      	orrs	r4, r5
 800c1e2:	50d4      	str	r4, [r2, r3]
 800c1e4:	e7c2      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800c1e6:	4a86      	ldr	r2, [pc, #536]	; (800c400 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c1e8:	23a8      	movs	r3, #168	; 0xa8
 800c1ea:	58d4      	ldr	r4, [r2, r3]
 800c1ec:	4d85      	ldr	r5, [pc, #532]	; (800c404 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c1ee:	402c      	ands	r4, r5
 800c1f0:	50d4      	str	r4, [r2, r3]
 800c1f2:	58d5      	ldr	r5, [r2, r3]
 800c1f4:	2480      	movs	r4, #128	; 0x80
 800c1f6:	0324      	lsls	r4, r4, #12
 800c1f8:	432c      	orrs	r4, r5
 800c1fa:	50d4      	str	r4, [r2, r3]
 800c1fc:	e7b6      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800c1fe:	680b      	ldr	r3, [r1, #0]
 800c200:	4a79      	ldr	r2, [pc, #484]	; (800c3e8 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d01a      	beq.n	800c23c <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800c206:	4a79      	ldr	r2, [pc, #484]	; (800c3ec <RemapAndLinkDMAtoUARTTx+0x310>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d022      	beq.n	800c252 <RemapAndLinkDMAtoUARTTx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800c20c:	4a78      	ldr	r2, [pc, #480]	; (800c3f0 <RemapAndLinkDMAtoUARTTx+0x314>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d02b      	beq.n	800c26a <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800c212:	4a78      	ldr	r2, [pc, #480]	; (800c3f4 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d034      	beq.n	800c282 <RemapAndLinkDMAtoUARTTx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800c218:	4a77      	ldr	r2, [pc, #476]	; (800c3f8 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d03c      	beq.n	800c298 <RemapAndLinkDMAtoUARTTx+0x1bc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800c21e:	4a77      	ldr	r2, [pc, #476]	; (800c3fc <RemapAndLinkDMAtoUARTTx+0x320>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d1a3      	bne.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800c224:	4a76      	ldr	r2, [pc, #472]	; (800c400 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c226:	23a8      	movs	r3, #168	; 0xa8
 800c228:	58d4      	ldr	r4, [r2, r3]
 800c22a:	4d76      	ldr	r5, [pc, #472]	; (800c404 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c22c:	402c      	ands	r4, r5
 800c22e:	50d4      	str	r4, [r2, r3]
 800c230:	58d5      	ldr	r5, [r2, r3]
 800c232:	2490      	movs	r4, #144	; 0x90
 800c234:	0324      	lsls	r4, r4, #12
 800c236:	432c      	orrs	r4, r5
 800c238:	50d4      	str	r4, [r2, r3]
 800c23a:	e797      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800c23c:	4a72      	ldr	r2, [pc, #456]	; (800c408 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c23e:	23a8      	movs	r3, #168	; 0xa8
 800c240:	58d4      	ldr	r4, [r2, r3]
 800c242:	25f0      	movs	r5, #240	; 0xf0
 800c244:	43ac      	bics	r4, r5
 800c246:	50d4      	str	r4, [r2, r3]
 800c248:	58d4      	ldr	r4, [r2, r3]
 800c24a:	3d60      	subs	r5, #96	; 0x60
 800c24c:	432c      	orrs	r4, r5
 800c24e:	50d4      	str	r4, [r2, r3]
 800c250:	e78c      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800c252:	4a6d      	ldr	r2, [pc, #436]	; (800c408 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c254:	23a8      	movs	r3, #168	; 0xa8
 800c256:	58d4      	ldr	r4, [r2, r3]
 800c258:	4d6c      	ldr	r5, [pc, #432]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x330>)
 800c25a:	402c      	ands	r4, r5
 800c25c:	50d4      	str	r4, [r2, r3]
 800c25e:	58d5      	ldr	r5, [r2, r3]
 800c260:	2490      	movs	r4, #144	; 0x90
 800c262:	0224      	lsls	r4, r4, #8
 800c264:	432c      	orrs	r4, r5
 800c266:	50d4      	str	r4, [r2, r3]
 800c268:	e780      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800c26a:	4a67      	ldr	r2, [pc, #412]	; (800c408 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c26c:	23a8      	movs	r3, #168	; 0xa8
 800c26e:	58d4      	ldr	r4, [r2, r3]
 800c270:	4d67      	ldr	r5, [pc, #412]	; (800c410 <RemapAndLinkDMAtoUARTTx+0x334>)
 800c272:	402c      	ands	r4, r5
 800c274:	50d4      	str	r4, [r2, r3]
 800c276:	58d5      	ldr	r5, [r2, r3]
 800c278:	2490      	movs	r4, #144	; 0x90
 800c27a:	0524      	lsls	r4, r4, #20
 800c27c:	432c      	orrs	r4, r5
 800c27e:	50d4      	str	r4, [r2, r3]
 800c280:	e774      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800c282:	4a5f      	ldr	r2, [pc, #380]	; (800c400 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c284:	23a8      	movs	r3, #168	; 0xa8
 800c286:	58d4      	ldr	r4, [r2, r3]
 800c288:	250f      	movs	r5, #15
 800c28a:	43ac      	bics	r4, r5
 800c28c:	50d4      	str	r4, [r2, r3]
 800c28e:	58d4      	ldr	r4, [r2, r3]
 800c290:	3d06      	subs	r5, #6
 800c292:	432c      	orrs	r4, r5
 800c294:	50d4      	str	r4, [r2, r3]
 800c296:	e769      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800c298:	4a59      	ldr	r2, [pc, #356]	; (800c400 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c29a:	23a8      	movs	r3, #168	; 0xa8
 800c29c:	58d4      	ldr	r4, [r2, r3]
 800c29e:	4d5b      	ldr	r5, [pc, #364]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x330>)
 800c2a0:	402c      	ands	r4, r5
 800c2a2:	50d4      	str	r4, [r2, r3]
 800c2a4:	58d5      	ldr	r5, [r2, r3]
 800c2a6:	2490      	movs	r4, #144	; 0x90
 800c2a8:	0224      	lsls	r4, r4, #8
 800c2aa:	432c      	orrs	r4, r5
 800c2ac:	50d4      	str	r4, [r2, r3]
 800c2ae:	e75d      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800c2b0:	680b      	ldr	r3, [r1, #0]
 800c2b2:	4a4d      	ldr	r2, [pc, #308]	; (800c3e8 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d01b      	beq.n	800c2f0 <RemapAndLinkDMAtoUARTTx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800c2b8:	4a4c      	ldr	r2, [pc, #304]	; (800c3ec <RemapAndLinkDMAtoUARTTx+0x310>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d023      	beq.n	800c306 <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800c2be:	4a4c      	ldr	r2, [pc, #304]	; (800c3f0 <RemapAndLinkDMAtoUARTTx+0x314>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d02c      	beq.n	800c31e <RemapAndLinkDMAtoUARTTx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800c2c4:	4a4b      	ldr	r2, [pc, #300]	; (800c3f4 <RemapAndLinkDMAtoUARTTx+0x318>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d035      	beq.n	800c336 <RemapAndLinkDMAtoUARTTx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800c2ca:	4a4b      	ldr	r2, [pc, #300]	; (800c3f8 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d03d      	beq.n	800c34c <RemapAndLinkDMAtoUARTTx+0x270>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800c2d0:	4a4a      	ldr	r2, [pc, #296]	; (800c3fc <RemapAndLinkDMAtoUARTTx+0x320>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d000      	beq.n	800c2d8 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800c2d6:	e749      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800c2d8:	4a49      	ldr	r2, [pc, #292]	; (800c400 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c2da:	23a8      	movs	r3, #168	; 0xa8
 800c2dc:	58d4      	ldr	r4, [r2, r3]
 800c2de:	4d49      	ldr	r5, [pc, #292]	; (800c404 <RemapAndLinkDMAtoUARTTx+0x328>)
 800c2e0:	402c      	ands	r4, r5
 800c2e2:	50d4      	str	r4, [r2, r3]
 800c2e4:	58d5      	ldr	r5, [r2, r3]
 800c2e6:	24a0      	movs	r4, #160	; 0xa0
 800c2e8:	0324      	lsls	r4, r4, #12
 800c2ea:	432c      	orrs	r4, r5
 800c2ec:	50d4      	str	r4, [r2, r3]
 800c2ee:	e73d      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800c2f0:	4a45      	ldr	r2, [pc, #276]	; (800c408 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c2f2:	23a8      	movs	r3, #168	; 0xa8
 800c2f4:	58d4      	ldr	r4, [r2, r3]
 800c2f6:	25f0      	movs	r5, #240	; 0xf0
 800c2f8:	43ac      	bics	r4, r5
 800c2fa:	50d4      	str	r4, [r2, r3]
 800c2fc:	58d4      	ldr	r4, [r2, r3]
 800c2fe:	3d50      	subs	r5, #80	; 0x50
 800c300:	432c      	orrs	r4, r5
 800c302:	50d4      	str	r4, [r2, r3]
 800c304:	e732      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800c306:	4a40      	ldr	r2, [pc, #256]	; (800c408 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c308:	23a8      	movs	r3, #168	; 0xa8
 800c30a:	58d4      	ldr	r4, [r2, r3]
 800c30c:	4d3f      	ldr	r5, [pc, #252]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x330>)
 800c30e:	402c      	ands	r4, r5
 800c310:	50d4      	str	r4, [r2, r3]
 800c312:	58d5      	ldr	r5, [r2, r3]
 800c314:	24a0      	movs	r4, #160	; 0xa0
 800c316:	0224      	lsls	r4, r4, #8
 800c318:	432c      	orrs	r4, r5
 800c31a:	50d4      	str	r4, [r2, r3]
 800c31c:	e726      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800c31e:	4a3a      	ldr	r2, [pc, #232]	; (800c408 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c320:	23a8      	movs	r3, #168	; 0xa8
 800c322:	58d4      	ldr	r4, [r2, r3]
 800c324:	4d3a      	ldr	r5, [pc, #232]	; (800c410 <RemapAndLinkDMAtoUARTTx+0x334>)
 800c326:	402c      	ands	r4, r5
 800c328:	50d4      	str	r4, [r2, r3]
 800c32a:	58d5      	ldr	r5, [r2, r3]
 800c32c:	24a0      	movs	r4, #160	; 0xa0
 800c32e:	0524      	lsls	r4, r4, #20
 800c330:	432c      	orrs	r4, r5
 800c332:	50d4      	str	r4, [r2, r3]
 800c334:	e71a      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800c336:	4a32      	ldr	r2, [pc, #200]	; (800c400 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c338:	23a8      	movs	r3, #168	; 0xa8
 800c33a:	58d4      	ldr	r4, [r2, r3]
 800c33c:	250f      	movs	r5, #15
 800c33e:	43ac      	bics	r4, r5
 800c340:	50d4      	str	r4, [r2, r3]
 800c342:	58d4      	ldr	r4, [r2, r3]
 800c344:	3d05      	subs	r5, #5
 800c346:	432c      	orrs	r4, r5
 800c348:	50d4      	str	r4, [r2, r3]
 800c34a:	e70f      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800c34c:	4a2c      	ldr	r2, [pc, #176]	; (800c400 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c34e:	23a8      	movs	r3, #168	; 0xa8
 800c350:	58d4      	ldr	r4, [r2, r3]
 800c352:	4d2e      	ldr	r5, [pc, #184]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x330>)
 800c354:	402c      	ands	r4, r5
 800c356:	50d4      	str	r4, [r2, r3]
 800c358:	58d5      	ldr	r5, [r2, r3]
 800c35a:	24a0      	movs	r4, #160	; 0xa0
 800c35c:	0224      	lsls	r4, r4, #8
 800c35e:	432c      	orrs	r4, r5
 800c360:	50d4      	str	r4, [r2, r3]
 800c362:	e703      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800c364:	4a28      	ldr	r2, [pc, #160]	; (800c408 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c366:	23a8      	movs	r3, #168	; 0xa8
 800c368:	58d4      	ldr	r4, [r2, r3]
 800c36a:	25f0      	movs	r5, #240	; 0xf0
 800c36c:	43ac      	bics	r4, r5
 800c36e:	50d4      	str	r4, [r2, r3]
 800c370:	58d4      	ldr	r4, [r2, r3]
 800c372:	3d40      	subs	r5, #64	; 0x40
 800c374:	432c      	orrs	r4, r5
 800c376:	50d4      	str	r4, [r2, r3]
 800c378:	e6f8      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800c37a:	4a23      	ldr	r2, [pc, #140]	; (800c408 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c37c:	23a8      	movs	r3, #168	; 0xa8
 800c37e:	58d4      	ldr	r4, [r2, r3]
 800c380:	4d22      	ldr	r5, [pc, #136]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x330>)
 800c382:	402c      	ands	r4, r5
 800c384:	50d4      	str	r4, [r2, r3]
 800c386:	58d5      	ldr	r5, [r2, r3]
 800c388:	24b0      	movs	r4, #176	; 0xb0
 800c38a:	0224      	lsls	r4, r4, #8
 800c38c:	432c      	orrs	r4, r5
 800c38e:	50d4      	str	r4, [r2, r3]
 800c390:	e6ec      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800c392:	4a1d      	ldr	r2, [pc, #116]	; (800c408 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800c394:	23a8      	movs	r3, #168	; 0xa8
 800c396:	58d4      	ldr	r4, [r2, r3]
 800c398:	4d1d      	ldr	r5, [pc, #116]	; (800c410 <RemapAndLinkDMAtoUARTTx+0x334>)
 800c39a:	402c      	ands	r4, r5
 800c39c:	50d4      	str	r4, [r2, r3]
 800c39e:	58d5      	ldr	r5, [r2, r3]
 800c3a0:	24b0      	movs	r4, #176	; 0xb0
 800c3a2:	0524      	lsls	r4, r4, #20
 800c3a4:	432c      	orrs	r4, r5
 800c3a6:	50d4      	str	r4, [r2, r3]
 800c3a8:	e6e0      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800c3aa:	4a15      	ldr	r2, [pc, #84]	; (800c400 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c3ac:	23a8      	movs	r3, #168	; 0xa8
 800c3ae:	58d4      	ldr	r4, [r2, r3]
 800c3b0:	250f      	movs	r5, #15
 800c3b2:	43ac      	bics	r4, r5
 800c3b4:	50d4      	str	r4, [r2, r3]
 800c3b6:	58d4      	ldr	r4, [r2, r3]
 800c3b8:	3d04      	subs	r5, #4
 800c3ba:	432c      	orrs	r4, r5
 800c3bc:	50d4      	str	r4, [r2, r3]
 800c3be:	e6d5      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800c3c0:	4a0f      	ldr	r2, [pc, #60]	; (800c400 <RemapAndLinkDMAtoUARTTx+0x324>)
 800c3c2:	23a8      	movs	r3, #168	; 0xa8
 800c3c4:	58d4      	ldr	r4, [r2, r3]
 800c3c6:	4d11      	ldr	r5, [pc, #68]	; (800c40c <RemapAndLinkDMAtoUARTTx+0x330>)
 800c3c8:	402c      	ands	r4, r5
 800c3ca:	50d4      	str	r4, [r2, r3]
 800c3cc:	58d5      	ldr	r5, [r2, r3]
 800c3ce:	24b0      	movs	r4, #176	; 0xb0
 800c3d0:	0224      	lsls	r4, r4, #8
 800c3d2:	432c      	orrs	r4, r5
 800c3d4:	50d4      	str	r4, [r2, r3]
 800c3d6:	e6c9      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
 800c3d8:	40013800 	.word	0x40013800
 800c3dc:	40004400 	.word	0x40004400
 800c3e0:	40004800 	.word	0x40004800
 800c3e4:	40004c00 	.word	0x40004c00
 800c3e8:	4002001c 	.word	0x4002001c
 800c3ec:	40020044 	.word	0x40020044
 800c3f0:	40020080 	.word	0x40020080
 800c3f4:	40020408 	.word	0x40020408
 800c3f8:	40020444 	.word	0x40020444
 800c3fc:	40020458 	.word	0x40020458
 800c400:	40020400 	.word	0x40020400
 800c404:	fff0ffff 	.word	0xfff0ffff
 800c408:	40020000 	.word	0x40020000
 800c40c:	ffff0fff 	.word	0xffff0fff
 800c410:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800c414:	4ab9      	ldr	r2, [pc, #740]	; (800c6fc <RemapAndLinkDMAtoUARTTx+0x620>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d159      	bne.n	800c4ce <RemapAndLinkDMAtoUARTTx+0x3f2>
 800c41a:	680b      	ldr	r3, [r1, #0]
 800c41c:	4ab8      	ldr	r2, [pc, #736]	; (800c700 <RemapAndLinkDMAtoUARTTx+0x624>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d01b      	beq.n	800c45a <RemapAndLinkDMAtoUARTTx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800c422:	4ab8      	ldr	r2, [pc, #736]	; (800c704 <RemapAndLinkDMAtoUARTTx+0x628>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d023      	beq.n	800c470 <RemapAndLinkDMAtoUARTTx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800c428:	4ab7      	ldr	r2, [pc, #732]	; (800c708 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d02c      	beq.n	800c488 <RemapAndLinkDMAtoUARTTx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800c42e:	4ab7      	ldr	r2, [pc, #732]	; (800c70c <RemapAndLinkDMAtoUARTTx+0x630>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d035      	beq.n	800c4a0 <RemapAndLinkDMAtoUARTTx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800c434:	4ab6      	ldr	r2, [pc, #728]	; (800c710 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d03d      	beq.n	800c4b6 <RemapAndLinkDMAtoUARTTx+0x3da>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800c43a:	4ab6      	ldr	r2, [pc, #728]	; (800c714 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d000      	beq.n	800c442 <RemapAndLinkDMAtoUARTTx+0x366>
 800c440:	e694      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800c442:	4ab5      	ldr	r2, [pc, #724]	; (800c718 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c444:	23a8      	movs	r3, #168	; 0xa8
 800c446:	58d4      	ldr	r4, [r2, r3]
 800c448:	4db4      	ldr	r5, [pc, #720]	; (800c71c <RemapAndLinkDMAtoUARTTx+0x640>)
 800c44a:	402c      	ands	r4, r5
 800c44c:	50d4      	str	r4, [r2, r3]
 800c44e:	58d5      	ldr	r5, [r2, r3]
 800c450:	24c0      	movs	r4, #192	; 0xc0
 800c452:	0324      	lsls	r4, r4, #12
 800c454:	432c      	orrs	r4, r5
 800c456:	50d4      	str	r4, [r2, r3]
 800c458:	e688      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800c45a:	4ab1      	ldr	r2, [pc, #708]	; (800c720 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c45c:	23a8      	movs	r3, #168	; 0xa8
 800c45e:	58d4      	ldr	r4, [r2, r3]
 800c460:	25f0      	movs	r5, #240	; 0xf0
 800c462:	43ac      	bics	r4, r5
 800c464:	50d4      	str	r4, [r2, r3]
 800c466:	58d4      	ldr	r4, [r2, r3]
 800c468:	3d30      	subs	r5, #48	; 0x30
 800c46a:	432c      	orrs	r4, r5
 800c46c:	50d4      	str	r4, [r2, r3]
 800c46e:	e67d      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800c470:	4aab      	ldr	r2, [pc, #684]	; (800c720 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c472:	23a8      	movs	r3, #168	; 0xa8
 800c474:	58d4      	ldr	r4, [r2, r3]
 800c476:	4dab      	ldr	r5, [pc, #684]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c478:	402c      	ands	r4, r5
 800c47a:	50d4      	str	r4, [r2, r3]
 800c47c:	58d5      	ldr	r5, [r2, r3]
 800c47e:	24c0      	movs	r4, #192	; 0xc0
 800c480:	0224      	lsls	r4, r4, #8
 800c482:	432c      	orrs	r4, r5
 800c484:	50d4      	str	r4, [r2, r3]
 800c486:	e671      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800c488:	4aa5      	ldr	r2, [pc, #660]	; (800c720 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c48a:	23a8      	movs	r3, #168	; 0xa8
 800c48c:	58d4      	ldr	r4, [r2, r3]
 800c48e:	4da6      	ldr	r5, [pc, #664]	; (800c728 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c490:	402c      	ands	r4, r5
 800c492:	50d4      	str	r4, [r2, r3]
 800c494:	58d5      	ldr	r5, [r2, r3]
 800c496:	24c0      	movs	r4, #192	; 0xc0
 800c498:	0524      	lsls	r4, r4, #20
 800c49a:	432c      	orrs	r4, r5
 800c49c:	50d4      	str	r4, [r2, r3]
 800c49e:	e665      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800c4a0:	4a9d      	ldr	r2, [pc, #628]	; (800c718 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c4a2:	23a8      	movs	r3, #168	; 0xa8
 800c4a4:	58d4      	ldr	r4, [r2, r3]
 800c4a6:	250f      	movs	r5, #15
 800c4a8:	43ac      	bics	r4, r5
 800c4aa:	50d4      	str	r4, [r2, r3]
 800c4ac:	58d4      	ldr	r4, [r2, r3]
 800c4ae:	3d03      	subs	r5, #3
 800c4b0:	432c      	orrs	r4, r5
 800c4b2:	50d4      	str	r4, [r2, r3]
 800c4b4:	e65a      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800c4b6:	4a98      	ldr	r2, [pc, #608]	; (800c718 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c4b8:	23a8      	movs	r3, #168	; 0xa8
 800c4ba:	58d4      	ldr	r4, [r2, r3]
 800c4bc:	4d99      	ldr	r5, [pc, #612]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c4be:	402c      	ands	r4, r5
 800c4c0:	50d4      	str	r4, [r2, r3]
 800c4c2:	58d5      	ldr	r5, [r2, r3]
 800c4c4:	24c0      	movs	r4, #192	; 0xc0
 800c4c6:	0224      	lsls	r4, r4, #8
 800c4c8:	432c      	orrs	r4, r5
 800c4ca:	50d4      	str	r4, [r2, r3]
 800c4cc:	e64e      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800c4ce:	4a97      	ldr	r2, [pc, #604]	; (800c72c <RemapAndLinkDMAtoUARTTx+0x650>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d159      	bne.n	800c588 <RemapAndLinkDMAtoUARTTx+0x4ac>
 800c4d4:	680b      	ldr	r3, [r1, #0]
 800c4d6:	4a8a      	ldr	r2, [pc, #552]	; (800c700 <RemapAndLinkDMAtoUARTTx+0x624>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d01b      	beq.n	800c514 <RemapAndLinkDMAtoUARTTx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800c4dc:	4a89      	ldr	r2, [pc, #548]	; (800c704 <RemapAndLinkDMAtoUARTTx+0x628>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d023      	beq.n	800c52a <RemapAndLinkDMAtoUARTTx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800c4e2:	4a89      	ldr	r2, [pc, #548]	; (800c708 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d02c      	beq.n	800c542 <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800c4e8:	4a88      	ldr	r2, [pc, #544]	; (800c70c <RemapAndLinkDMAtoUARTTx+0x630>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d035      	beq.n	800c55a <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800c4ee:	4a88      	ldr	r2, [pc, #544]	; (800c710 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d03d      	beq.n	800c570 <RemapAndLinkDMAtoUARTTx+0x494>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800c4f4:	4a87      	ldr	r2, [pc, #540]	; (800c714 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d000      	beq.n	800c4fc <RemapAndLinkDMAtoUARTTx+0x420>
 800c4fa:	e637      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800c4fc:	4a86      	ldr	r2, [pc, #536]	; (800c718 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c4fe:	23a8      	movs	r3, #168	; 0xa8
 800c500:	58d4      	ldr	r4, [r2, r3]
 800c502:	4d86      	ldr	r5, [pc, #536]	; (800c71c <RemapAndLinkDMAtoUARTTx+0x640>)
 800c504:	402c      	ands	r4, r5
 800c506:	50d4      	str	r4, [r2, r3]
 800c508:	58d5      	ldr	r5, [r2, r3]
 800c50a:	24d0      	movs	r4, #208	; 0xd0
 800c50c:	0324      	lsls	r4, r4, #12
 800c50e:	432c      	orrs	r4, r5
 800c510:	50d4      	str	r4, [r2, r3]
 800c512:	e62b      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800c514:	4a82      	ldr	r2, [pc, #520]	; (800c720 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c516:	23a8      	movs	r3, #168	; 0xa8
 800c518:	58d4      	ldr	r4, [r2, r3]
 800c51a:	25f0      	movs	r5, #240	; 0xf0
 800c51c:	43ac      	bics	r4, r5
 800c51e:	50d4      	str	r4, [r2, r3]
 800c520:	58d4      	ldr	r4, [r2, r3]
 800c522:	3d20      	subs	r5, #32
 800c524:	432c      	orrs	r4, r5
 800c526:	50d4      	str	r4, [r2, r3]
 800c528:	e620      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800c52a:	4a7d      	ldr	r2, [pc, #500]	; (800c720 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c52c:	23a8      	movs	r3, #168	; 0xa8
 800c52e:	58d4      	ldr	r4, [r2, r3]
 800c530:	4d7c      	ldr	r5, [pc, #496]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c532:	402c      	ands	r4, r5
 800c534:	50d4      	str	r4, [r2, r3]
 800c536:	58d5      	ldr	r5, [r2, r3]
 800c538:	24d0      	movs	r4, #208	; 0xd0
 800c53a:	0224      	lsls	r4, r4, #8
 800c53c:	432c      	orrs	r4, r5
 800c53e:	50d4      	str	r4, [r2, r3]
 800c540:	e614      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800c542:	4a77      	ldr	r2, [pc, #476]	; (800c720 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c544:	23a8      	movs	r3, #168	; 0xa8
 800c546:	58d4      	ldr	r4, [r2, r3]
 800c548:	4d77      	ldr	r5, [pc, #476]	; (800c728 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c54a:	402c      	ands	r4, r5
 800c54c:	50d4      	str	r4, [r2, r3]
 800c54e:	58d5      	ldr	r5, [r2, r3]
 800c550:	24d0      	movs	r4, #208	; 0xd0
 800c552:	0524      	lsls	r4, r4, #20
 800c554:	432c      	orrs	r4, r5
 800c556:	50d4      	str	r4, [r2, r3]
 800c558:	e608      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800c55a:	4a6f      	ldr	r2, [pc, #444]	; (800c718 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c55c:	23a8      	movs	r3, #168	; 0xa8
 800c55e:	58d4      	ldr	r4, [r2, r3]
 800c560:	250f      	movs	r5, #15
 800c562:	43ac      	bics	r4, r5
 800c564:	50d4      	str	r4, [r2, r3]
 800c566:	58d4      	ldr	r4, [r2, r3]
 800c568:	3d02      	subs	r5, #2
 800c56a:	432c      	orrs	r4, r5
 800c56c:	50d4      	str	r4, [r2, r3]
 800c56e:	e5fd      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800c570:	4a69      	ldr	r2, [pc, #420]	; (800c718 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c572:	23a8      	movs	r3, #168	; 0xa8
 800c574:	58d4      	ldr	r4, [r2, r3]
 800c576:	4d6b      	ldr	r5, [pc, #428]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c578:	402c      	ands	r4, r5
 800c57a:	50d4      	str	r4, [r2, r3]
 800c57c:	58d5      	ldr	r5, [r2, r3]
 800c57e:	24d0      	movs	r4, #208	; 0xd0
 800c580:	0224      	lsls	r4, r4, #8
 800c582:	432c      	orrs	r4, r5
 800c584:	50d4      	str	r4, [r2, r3]
 800c586:	e5f1      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800c588:	4a69      	ldr	r2, [pc, #420]	; (800c730 <RemapAndLinkDMAtoUARTTx+0x654>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d159      	bne.n	800c642 <RemapAndLinkDMAtoUARTTx+0x566>
 800c58e:	680b      	ldr	r3, [r1, #0]
 800c590:	4a5b      	ldr	r2, [pc, #364]	; (800c700 <RemapAndLinkDMAtoUARTTx+0x624>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d01b      	beq.n	800c5ce <RemapAndLinkDMAtoUARTTx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800c596:	4a5b      	ldr	r2, [pc, #364]	; (800c704 <RemapAndLinkDMAtoUARTTx+0x628>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d023      	beq.n	800c5e4 <RemapAndLinkDMAtoUARTTx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800c59c:	4a5a      	ldr	r2, [pc, #360]	; (800c708 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d02c      	beq.n	800c5fc <RemapAndLinkDMAtoUARTTx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800c5a2:	4a5a      	ldr	r2, [pc, #360]	; (800c70c <RemapAndLinkDMAtoUARTTx+0x630>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d035      	beq.n	800c614 <RemapAndLinkDMAtoUARTTx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800c5a8:	4a59      	ldr	r2, [pc, #356]	; (800c710 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d03d      	beq.n	800c62a <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800c5ae:	4a59      	ldr	r2, [pc, #356]	; (800c714 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d000      	beq.n	800c5b6 <RemapAndLinkDMAtoUARTTx+0x4da>
 800c5b4:	e5da      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800c5b6:	4a58      	ldr	r2, [pc, #352]	; (800c718 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c5b8:	23a8      	movs	r3, #168	; 0xa8
 800c5ba:	58d4      	ldr	r4, [r2, r3]
 800c5bc:	4d57      	ldr	r5, [pc, #348]	; (800c71c <RemapAndLinkDMAtoUARTTx+0x640>)
 800c5be:	402c      	ands	r4, r5
 800c5c0:	50d4      	str	r4, [r2, r3]
 800c5c2:	58d5      	ldr	r5, [r2, r3]
 800c5c4:	24e0      	movs	r4, #224	; 0xe0
 800c5c6:	0324      	lsls	r4, r4, #12
 800c5c8:	432c      	orrs	r4, r5
 800c5ca:	50d4      	str	r4, [r2, r3]
 800c5cc:	e5ce      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800c5ce:	4a54      	ldr	r2, [pc, #336]	; (800c720 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c5d0:	23a8      	movs	r3, #168	; 0xa8
 800c5d2:	58d4      	ldr	r4, [r2, r3]
 800c5d4:	25f0      	movs	r5, #240	; 0xf0
 800c5d6:	43ac      	bics	r4, r5
 800c5d8:	50d4      	str	r4, [r2, r3]
 800c5da:	58d4      	ldr	r4, [r2, r3]
 800c5dc:	3d10      	subs	r5, #16
 800c5de:	432c      	orrs	r4, r5
 800c5e0:	50d4      	str	r4, [r2, r3]
 800c5e2:	e5c3      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800c5e4:	4a4e      	ldr	r2, [pc, #312]	; (800c720 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c5e6:	23a8      	movs	r3, #168	; 0xa8
 800c5e8:	58d4      	ldr	r4, [r2, r3]
 800c5ea:	4d4e      	ldr	r5, [pc, #312]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c5ec:	402c      	ands	r4, r5
 800c5ee:	50d4      	str	r4, [r2, r3]
 800c5f0:	58d5      	ldr	r5, [r2, r3]
 800c5f2:	24e0      	movs	r4, #224	; 0xe0
 800c5f4:	0224      	lsls	r4, r4, #8
 800c5f6:	432c      	orrs	r4, r5
 800c5f8:	50d4      	str	r4, [r2, r3]
 800c5fa:	e5b7      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800c5fc:	4a48      	ldr	r2, [pc, #288]	; (800c720 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c5fe:	23a8      	movs	r3, #168	; 0xa8
 800c600:	58d4      	ldr	r4, [r2, r3]
 800c602:	4d49      	ldr	r5, [pc, #292]	; (800c728 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c604:	402c      	ands	r4, r5
 800c606:	50d4      	str	r4, [r2, r3]
 800c608:	58d5      	ldr	r5, [r2, r3]
 800c60a:	24e0      	movs	r4, #224	; 0xe0
 800c60c:	0524      	lsls	r4, r4, #20
 800c60e:	432c      	orrs	r4, r5
 800c610:	50d4      	str	r4, [r2, r3]
 800c612:	e5ab      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800c614:	4a40      	ldr	r2, [pc, #256]	; (800c718 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c616:	23a8      	movs	r3, #168	; 0xa8
 800c618:	58d4      	ldr	r4, [r2, r3]
 800c61a:	250f      	movs	r5, #15
 800c61c:	43ac      	bics	r4, r5
 800c61e:	50d4      	str	r4, [r2, r3]
 800c620:	58d4      	ldr	r4, [r2, r3]
 800c622:	3d01      	subs	r5, #1
 800c624:	432c      	orrs	r4, r5
 800c626:	50d4      	str	r4, [r2, r3]
 800c628:	e5a0      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800c62a:	4a3b      	ldr	r2, [pc, #236]	; (800c718 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c62c:	23a8      	movs	r3, #168	; 0xa8
 800c62e:	58d4      	ldr	r4, [r2, r3]
 800c630:	4d3c      	ldr	r5, [pc, #240]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c632:	402c      	ands	r4, r5
 800c634:	50d4      	str	r4, [r2, r3]
 800c636:	58d5      	ldr	r5, [r2, r3]
 800c638:	24e0      	movs	r4, #224	; 0xe0
 800c63a:	0224      	lsls	r4, r4, #8
 800c63c:	432c      	orrs	r4, r5
 800c63e:	50d4      	str	r4, [r2, r3]
 800c640:	e594      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800c642:	4a3c      	ldr	r2, [pc, #240]	; (800c734 <RemapAndLinkDMAtoUARTTx+0x658>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d000      	beq.n	800c64a <RemapAndLinkDMAtoUARTTx+0x56e>
 800c648:	e590      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
 800c64a:	680b      	ldr	r3, [r1, #0]
 800c64c:	4a2c      	ldr	r2, [pc, #176]	; (800c700 <RemapAndLinkDMAtoUARTTx+0x624>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d01b      	beq.n	800c68a <RemapAndLinkDMAtoUARTTx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800c652:	4a2c      	ldr	r2, [pc, #176]	; (800c704 <RemapAndLinkDMAtoUARTTx+0x628>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d022      	beq.n	800c69e <RemapAndLinkDMAtoUARTTx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800c658:	4a2b      	ldr	r2, [pc, #172]	; (800c708 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d02b      	beq.n	800c6b6 <RemapAndLinkDMAtoUARTTx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800c65e:	4a2b      	ldr	r2, [pc, #172]	; (800c70c <RemapAndLinkDMAtoUARTTx+0x630>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d034      	beq.n	800c6ce <RemapAndLinkDMAtoUARTTx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800c664:	4a2a      	ldr	r2, [pc, #168]	; (800c710 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d03b      	beq.n	800c6e2 <RemapAndLinkDMAtoUARTTx+0x606>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800c66a:	4a2a      	ldr	r2, [pc, #168]	; (800c714 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d000      	beq.n	800c672 <RemapAndLinkDMAtoUARTTx+0x596>
 800c670:	e57c      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800c672:	4a29      	ldr	r2, [pc, #164]	; (800c718 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c674:	23a8      	movs	r3, #168	; 0xa8
 800c676:	58d4      	ldr	r4, [r2, r3]
 800c678:	4d28      	ldr	r5, [pc, #160]	; (800c71c <RemapAndLinkDMAtoUARTTx+0x640>)
 800c67a:	402c      	ands	r4, r5
 800c67c:	50d4      	str	r4, [r2, r3]
 800c67e:	58d5      	ldr	r5, [r2, r3]
 800c680:	24f0      	movs	r4, #240	; 0xf0
 800c682:	0324      	lsls	r4, r4, #12
 800c684:	432c      	orrs	r4, r5
 800c686:	50d4      	str	r4, [r2, r3]
 800c688:	e570      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800c68a:	4a25      	ldr	r2, [pc, #148]	; (800c720 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c68c:	23a8      	movs	r3, #168	; 0xa8
 800c68e:	58d5      	ldr	r5, [r2, r3]
 800c690:	26f0      	movs	r6, #240	; 0xf0
 800c692:	43b5      	bics	r5, r6
 800c694:	50d5      	str	r5, [r2, r3]
 800c696:	58d4      	ldr	r4, [r2, r3]
 800c698:	4334      	orrs	r4, r6
 800c69a:	50d4      	str	r4, [r2, r3]
 800c69c:	e566      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800c69e:	4a20      	ldr	r2, [pc, #128]	; (800c720 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c6a0:	23a8      	movs	r3, #168	; 0xa8
 800c6a2:	58d4      	ldr	r4, [r2, r3]
 800c6a4:	4d1f      	ldr	r5, [pc, #124]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c6a6:	402c      	ands	r4, r5
 800c6a8:	50d4      	str	r4, [r2, r3]
 800c6aa:	58d5      	ldr	r5, [r2, r3]
 800c6ac:	24f0      	movs	r4, #240	; 0xf0
 800c6ae:	0224      	lsls	r4, r4, #8
 800c6b0:	432c      	orrs	r4, r5
 800c6b2:	50d4      	str	r4, [r2, r3]
 800c6b4:	e55a      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800c6b6:	4a1a      	ldr	r2, [pc, #104]	; (800c720 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c6b8:	23a8      	movs	r3, #168	; 0xa8
 800c6ba:	58d4      	ldr	r4, [r2, r3]
 800c6bc:	4d1a      	ldr	r5, [pc, #104]	; (800c728 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c6be:	402c      	ands	r4, r5
 800c6c0:	50d4      	str	r4, [r2, r3]
 800c6c2:	58d5      	ldr	r5, [r2, r3]
 800c6c4:	24f0      	movs	r4, #240	; 0xf0
 800c6c6:	0524      	lsls	r4, r4, #20
 800c6c8:	432c      	orrs	r4, r5
 800c6ca:	50d4      	str	r4, [r2, r3]
 800c6cc:	e54e      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800c6ce:	4a12      	ldr	r2, [pc, #72]	; (800c718 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c6d0:	23a8      	movs	r3, #168	; 0xa8
 800c6d2:	58d5      	ldr	r5, [r2, r3]
 800c6d4:	260f      	movs	r6, #15
 800c6d6:	43b5      	bics	r5, r6
 800c6d8:	50d5      	str	r5, [r2, r3]
 800c6da:	58d4      	ldr	r4, [r2, r3]
 800c6dc:	4334      	orrs	r4, r6
 800c6de:	50d4      	str	r4, [r2, r3]
 800c6e0:	e544      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800c6e2:	4a0d      	ldr	r2, [pc, #52]	; (800c718 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c6e4:	23a8      	movs	r3, #168	; 0xa8
 800c6e6:	58d4      	ldr	r4, [r2, r3]
 800c6e8:	4d0e      	ldr	r5, [pc, #56]	; (800c724 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c6ea:	402c      	ands	r4, r5
 800c6ec:	50d4      	str	r4, [r2, r3]
 800c6ee:	58d5      	ldr	r5, [r2, r3]
 800c6f0:	24f0      	movs	r4, #240	; 0xf0
 800c6f2:	0224      	lsls	r4, r4, #8
 800c6f4:	432c      	orrs	r4, r5
 800c6f6:	50d4      	str	r4, [r2, r3]
 800c6f8:	e538      	b.n	800c16c <RemapAndLinkDMAtoUARTTx+0x90>
 800c6fa:	46c0      	nop			; (mov r8, r8)
 800c6fc:	40005000 	.word	0x40005000
 800c700:	4002001c 	.word	0x4002001c
 800c704:	40020044 	.word	0x40020044
 800c708:	40020080 	.word	0x40020080
 800c70c:	40020408 	.word	0x40020408
 800c710:	40020444 	.word	0x40020444
 800c714:	40020458 	.word	0x40020458
 800c718:	40020400 	.word	0x40020400
 800c71c:	fff0ffff 	.word	0xfff0ffff
 800c720:	40020000 	.word	0x40020000
 800c724:	ffff0fff 	.word	0xffff0fff
 800c728:	f0ffffff 	.word	0xf0ffffff
 800c72c:	40011400 	.word	0x40011400
 800c730:	40011800 	.word	0x40011800
 800c734:	40011c00 	.word	0x40011c00

0800c738 <DMA_MSG_TX_Setup>:
{	
 800c738:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800c73a:	4b0d      	ldr	r3, [pc, #52]	; (800c770 <DMA_MSG_TX_Setup+0x38>)
 800c73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d012      	beq.n	800c768 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800c742:	4b0b      	ldr	r3, [pc, #44]	; (800c770 <DMA_MSG_TX_Setup+0x38>)
 800c744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c746:	2b00      	cmp	r3, #0
 800c748:	d010      	beq.n	800c76c <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800c74a:	4a09      	ldr	r2, [pc, #36]	; (800c770 <DMA_MSG_TX_Setup+0x38>)
 800c74c:	2394      	movs	r3, #148	; 0x94
 800c74e:	58d3      	ldr	r3, [r2, r3]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d007      	beq.n	800c764 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800c754:	0021      	movs	r1, r4
 800c756:	f7ff fcc1 	bl	800c0dc <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c75a:	2100      	movs	r1, #0
 800c75c:	0020      	movs	r0, r4
 800c75e:	f7ff f84f 	bl	800b800 <SetupDMAInterrupts>
}
 800c762:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800c764:	4c03      	ldr	r4, [pc, #12]	; (800c774 <DMA_MSG_TX_Setup+0x3c>)
 800c766:	e7f5      	b.n	800c754 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800c768:	4c01      	ldr	r4, [pc, #4]	; (800c770 <DMA_MSG_TX_Setup+0x38>)
 800c76a:	e7f3      	b.n	800c754 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800c76c:	4c02      	ldr	r4, [pc, #8]	; (800c778 <DMA_MSG_TX_Setup+0x40>)
 800c76e:	e7f1      	b.n	800c754 <DMA_MSG_TX_Setup+0x1c>
 800c770:	200018ec 	.word	0x200018ec
 800c774:	2000195c 	.word	0x2000195c
 800c778:	20001924 	.word	0x20001924

0800c77c <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800c77c:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800c77e:	4807      	ldr	r0, [pc, #28]	; (800c79c <CRC_Init+0x20>)
 800c780:	4b07      	ldr	r3, [pc, #28]	; (800c7a0 <CRC_Init+0x24>)
 800c782:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800c784:	2310      	movs	r3, #16
 800c786:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800c788:	2300      	movs	r3, #0
 800c78a:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800c78c:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800c78e:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800c790:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800c792:	3303      	adds	r3, #3
 800c794:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800c796:	f003 fb69 	bl	800fe6c <HAL_CRC_Init>
}
 800c79a:	bd10      	pop	{r4, pc}
 800c79c:	20006d84 	.word	0x20006d84
 800c7a0:	40023000 	.word	0x40023000

0800c7a4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800c7a4:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800c7a6:	4a05      	ldr	r2, [pc, #20]	; (800c7bc <HAL_CRC_MspInit+0x18>)
 800c7a8:	6951      	ldr	r1, [r2, #20]
 800c7aa:	2340      	movs	r3, #64	; 0x40
 800c7ac:	4319      	orrs	r1, r3
 800c7ae:	6151      	str	r1, [r2, #20]
 800c7b0:	6952      	ldr	r2, [r2, #20]
 800c7b2:	4013      	ands	r3, r2
 800c7b4:	9301      	str	r3, [sp, #4]
 800c7b6:	9b01      	ldr	r3, [sp, #4]
}
 800c7b8:	b002      	add	sp, #8
 800c7ba:	4770      	bx	lr
 800c7bc:	40021000 	.word	0x40021000

0800c7c0 <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800c7c0:	b570      	push	{r4, r5, r6, lr}
 800c7c2:	0004      	movs	r4, r0
 800c7c4:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	d015      	beq.n	800c7f6 <CalculateCRC8+0x36>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800c7ca:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800c7cc:	2900      	cmp	r1, #0
 800c7ce:	d100      	bne.n	800c7d2 <CalculateCRC8+0x12>
}
 800c7d0:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800c7d2:	088e      	lsrs	r6, r1, #2
 800c7d4:	0032      	movs	r2, r6
 800c7d6:	0021      	movs	r1, r4
 800c7d8:	4808      	ldr	r0, [pc, #32]	; (800c7fc <CalculateCRC8+0x3c>)
 800c7da:	f003 fba4 	bl	800ff26 <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800c7de:	07ab      	lsls	r3, r5, #30
 800c7e0:	d101      	bne.n	800c7e6 <CalculateCRC8+0x26>
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800c7e2:	b2c0      	uxtb	r0, r0
 800c7e4:	e7f4      	b.n	800c7d0 <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800c7e6:	0131      	lsls	r1, r6, #4
 800c7e8:	1861      	adds	r1, r4, r1
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	4803      	ldr	r0, [pc, #12]	; (800c7fc <CalculateCRC8+0x3c>)
 800c7ee:	f003 fb6e 	bl	800fece <HAL_CRC_Accumulate>
 800c7f2:	b2c0      	uxtb	r0, r0
 800c7f4:	e7ec      	b.n	800c7d0 <CalculateCRC8+0x10>
	return 0;
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	e7ea      	b.n	800c7d0 <CalculateCRC8+0x10>
 800c7fa:	46c0      	nop			; (mov r8, r8)
 800c7fc:	20006d84 	.word	0x20006d84

0800c800 <IND_LED_Init>:
}

/* --- Configure indicator LED ---
*/
void IND_LED_Init(void)
{
 800c800:	b500      	push	{lr}
 800c802:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800c804:	2380      	movs	r3, #128	; 0x80
 800c806:	011b      	lsls	r3, r3, #4
 800c808:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c80a:	2301      	movs	r3, #1
 800c80c:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c80e:	2300      	movs	r3, #0
 800c810:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c812:	3303      	adds	r3, #3
 800c814:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c816:	2090      	movs	r0, #144	; 0x90
 800c818:	a901      	add	r1, sp, #4
 800c81a:	05c0      	lsls	r0, r0, #23
 800c81c:	f004 fa26 	bl	8010c6c <HAL_GPIO_Init>
}
 800c820:	b007      	add	sp, #28
 800c822:	bd00      	pop	{pc}

0800c824 <GPIO_Init>:
{
 800c824:	b500      	push	{lr}
 800c826:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800c828:	4b18      	ldr	r3, [pc, #96]	; (800c88c <GPIO_Init+0x68>)
 800c82a:	6959      	ldr	r1, [r3, #20]
 800c82c:	2080      	movs	r0, #128	; 0x80
 800c82e:	0300      	lsls	r0, r0, #12
 800c830:	4301      	orrs	r1, r0
 800c832:	6159      	str	r1, [r3, #20]
 800c834:	695a      	ldr	r2, [r3, #20]
 800c836:	4002      	ands	r2, r0
 800c838:	9201      	str	r2, [sp, #4]
 800c83a:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800c83c:	6959      	ldr	r1, [r3, #20]
 800c83e:	2080      	movs	r0, #128	; 0x80
 800c840:	0280      	lsls	r0, r0, #10
 800c842:	4301      	orrs	r1, r0
 800c844:	6159      	str	r1, [r3, #20]
 800c846:	695a      	ldr	r2, [r3, #20]
 800c848:	4002      	ands	r2, r0
 800c84a:	9202      	str	r2, [sp, #8]
 800c84c:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800c84e:	6959      	ldr	r1, [r3, #20]
 800c850:	2080      	movs	r0, #128	; 0x80
 800c852:	0340      	lsls	r0, r0, #13
 800c854:	4301      	orrs	r1, r0
 800c856:	6159      	str	r1, [r3, #20]
 800c858:	695a      	ldr	r2, [r3, #20]
 800c85a:	4002      	ands	r2, r0
 800c85c:	9203      	str	r2, [sp, #12]
 800c85e:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800c860:	6959      	ldr	r1, [r3, #20]
 800c862:	2080      	movs	r0, #128	; 0x80
 800c864:	02c0      	lsls	r0, r0, #11
 800c866:	4301      	orrs	r1, r0
 800c868:	6159      	str	r1, [r3, #20]
 800c86a:	695a      	ldr	r2, [r3, #20]
 800c86c:	4002      	ands	r2, r0
 800c86e:	9204      	str	r2, [sp, #16]
 800c870:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c872:	695a      	ldr	r2, [r3, #20]
 800c874:	2180      	movs	r1, #128	; 0x80
 800c876:	03c9      	lsls	r1, r1, #15
 800c878:	430a      	orrs	r2, r1
 800c87a:	615a      	str	r2, [r3, #20]
 800c87c:	695b      	ldr	r3, [r3, #20]
 800c87e:	400b      	ands	r3, r1
 800c880:	9305      	str	r3, [sp, #20]
 800c882:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800c884:	f7ff ffbc 	bl	800c800 <IND_LED_Init>
}
 800c888:	b007      	add	sp, #28
 800c88a:	bd00      	pop	{pc}
 800c88c:	40021000 	.word	0x40021000

0800c890 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800c890:	b570      	push	{r4, r5, r6, lr}
 800c892:	000e      	movs	r6, r1
 800c894:	0015      	movs	r5, r2
 800c896:	001c      	movs	r4, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800c898:	f000 fd78 	bl	800d38c <GetUart>
	
	if (huart == &huart1) 
 800c89c:	4b2b      	ldr	r3, [pc, #172]	; (800c94c <GetPortGPIOs+0xbc>)
 800c89e:	4298      	cmp	r0, r3
 800c8a0:	d01a      	beq.n	800c8d8 <GetPortGPIOs+0x48>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800c8a2:	4b2b      	ldr	r3, [pc, #172]	; (800c950 <GetPortGPIOs+0xc0>)
 800c8a4:	4298      	cmp	r0, r3
 800c8a6:	d025      	beq.n	800c8f4 <GetPortGPIOs+0x64>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800c8a8:	4b2a      	ldr	r3, [pc, #168]	; (800c954 <GetPortGPIOs+0xc4>)
 800c8aa:	4298      	cmp	r0, r3
 800c8ac:	d02d      	beq.n	800c90a <GetPortGPIOs+0x7a>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800c8ae:	4b2a      	ldr	r3, [pc, #168]	; (800c958 <GetPortGPIOs+0xc8>)
 800c8b0:	4298      	cmp	r0, r3
 800c8b2:	d036      	beq.n	800c922 <GetPortGPIOs+0x92>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800c8b4:	4b29      	ldr	r3, [pc, #164]	; (800c95c <GetPortGPIOs+0xcc>)
 800c8b6:	4298      	cmp	r0, r3
 800c8b8:	d03e      	beq.n	800c938 <GetPortGPIOs+0xa8>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800c8ba:	4a29      	ldr	r2, [pc, #164]	; (800c960 <GetPortGPIOs+0xd0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800c8bc:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 800c8be:	4290      	cmp	r0, r2
 800c8c0:	d116      	bne.n	800c8f0 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800c8c2:	2390      	movs	r3, #144	; 0x90
 800c8c4:	05db      	lsls	r3, r3, #23
 800c8c6:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800c8c8:	2210      	movs	r2, #16
 800c8ca:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800c8cc:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800c8ce:	2320      	movs	r3, #32
 800c8d0:	9a04      	ldr	r2, [sp, #16]
 800c8d2:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	e00b      	b.n	800c8f0 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c8d8:	2390      	movs	r3, #144	; 0x90
 800c8da:	05db      	lsls	r3, r3, #23
 800c8dc:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800c8de:	2280      	movs	r2, #128	; 0x80
 800c8e0:	0092      	lsls	r2, r2, #2
 800c8e2:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800c8e4:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800c8e6:	2380      	movs	r3, #128	; 0x80
 800c8e8:	00db      	lsls	r3, r3, #3
 800c8ea:	9a04      	ldr	r2, [sp, #16]
 800c8ec:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c8ee:	2300      	movs	r3, #0
	
	return result;	
}
 800c8f0:	0018      	movs	r0, r3
 800c8f2:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800c8f4:	2390      	movs	r3, #144	; 0x90
 800c8f6:	05db      	lsls	r3, r3, #23
 800c8f8:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800c8fa:	2204      	movs	r2, #4
 800c8fc:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800c8fe:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800c900:	2308      	movs	r3, #8
 800c902:	9a04      	ldr	r2, [sp, #16]
 800c904:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c906:	2300      	movs	r3, #0
 800c908:	e7f2      	b.n	800c8f0 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800c90a:	4b16      	ldr	r3, [pc, #88]	; (800c964 <GetPortGPIOs+0xd4>)
 800c90c:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800c90e:	2280      	movs	r2, #128	; 0x80
 800c910:	00d2      	lsls	r2, r2, #3
 800c912:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800c914:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800c916:	2380      	movs	r3, #128	; 0x80
 800c918:	011b      	lsls	r3, r3, #4
 800c91a:	9a04      	ldr	r2, [sp, #16]
 800c91c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c91e:	2300      	movs	r3, #0
 800c920:	e7e6      	b.n	800c8f0 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800c922:	2390      	movs	r3, #144	; 0x90
 800c924:	05db      	lsls	r3, r3, #23
 800c926:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800c928:	2201      	movs	r2, #1
 800c92a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800c92c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800c92e:	2302      	movs	r3, #2
 800c930:	9a04      	ldr	r2, [sp, #16]
 800c932:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c934:	2300      	movs	r3, #0
 800c936:	e7db      	b.n	800c8f0 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800c938:	4b0a      	ldr	r3, [pc, #40]	; (800c964 <GetPortGPIOs+0xd4>)
 800c93a:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800c93c:	2208      	movs	r2, #8
 800c93e:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800c940:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800c942:	2310      	movs	r3, #16
 800c944:	9a04      	ldr	r2, [sp, #16]
 800c946:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c948:	2300      	movs	r3, #0
 800c94a:	e7d1      	b.n	800c8f0 <GetPortGPIOs+0x60>
 800c94c:	20006bc4 	.word	0x20006bc4
 800c950:	20006d14 	.word	0x20006d14
 800c954:	20006ae4 	.word	0x20006ae4
 800c958:	20006ca4 	.word	0x20006ca4
 800c95c:	20006b54 	.word	0x20006b54
 800c960:	20006c34 	.word	0x20006c34
 800c964:	48000400 	.word	0x48000400

0800c968 <IsFactoryReset>:
{
 800c968:	b570      	push	{r4, r5, r6, lr}
 800c96a:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800c96c:	4b39      	ldr	r3, [pc, #228]	; (800ca54 <IsFactoryReset+0xec>)
 800c96e:	6959      	ldr	r1, [r3, #20]
 800c970:	2080      	movs	r0, #128	; 0x80
 800c972:	0280      	lsls	r0, r0, #10
 800c974:	4301      	orrs	r1, r0
 800c976:	6159      	str	r1, [r3, #20]
 800c978:	695a      	ldr	r2, [r3, #20]
 800c97a:	4002      	ands	r2, r0
 800c97c:	9203      	str	r2, [sp, #12]
 800c97e:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800c980:	6959      	ldr	r1, [r3, #20]
 800c982:	2080      	movs	r0, #128	; 0x80
 800c984:	02c0      	lsls	r0, r0, #11
 800c986:	4301      	orrs	r1, r0
 800c988:	6159      	str	r1, [r3, #20]
 800c98a:	695a      	ldr	r2, [r3, #20]
 800c98c:	4002      	ands	r2, r0
 800c98e:	9204      	str	r2, [sp, #16]
 800c990:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800c992:	6959      	ldr	r1, [r3, #20]
 800c994:	2080      	movs	r0, #128	; 0x80
 800c996:	0300      	lsls	r0, r0, #12
 800c998:	4301      	orrs	r1, r0
 800c99a:	6159      	str	r1, [r3, #20]
 800c99c:	695a      	ldr	r2, [r3, #20]
 800c99e:	4002      	ands	r2, r0
 800c9a0:	9205      	str	r2, [sp, #20]
 800c9a2:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800c9a4:	695a      	ldr	r2, [r3, #20]
 800c9a6:	2180      	movs	r1, #128	; 0x80
 800c9a8:	0349      	lsls	r1, r1, #13
 800c9aa:	430a      	orrs	r2, r1
 800c9ac:	615a      	str	r2, [r3, #20]
 800c9ae:	695b      	ldr	r3, [r3, #20]
 800c9b0:	400b      	ands	r3, r1
 800c9b2:	9306      	str	r3, [sp, #24]
 800c9b4:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800c9b6:	2522      	movs	r5, #34	; 0x22
 800c9b8:	446d      	add	r5, sp
 800c9ba:	ab08      	add	r3, sp, #32
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	ab0b      	add	r3, sp, #44	; 0x2c
 800c9c0:	002a      	movs	r2, r5
 800c9c2:	a90c      	add	r1, sp, #48	; 0x30
 800c9c4:	2001      	movs	r0, #1
 800c9c6:	f7ff ff63 	bl	800c890 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800c9ca:	ac07      	add	r4, sp, #28
 800c9cc:	9400      	str	r4, [sp, #0]
 800c9ce:	ab09      	add	r3, sp, #36	; 0x24
 800c9d0:	221e      	movs	r2, #30
 800c9d2:	446a      	add	r2, sp
 800c9d4:	a90a      	add	r1, sp, #40	; 0x28
 800c9d6:	2006      	movs	r0, #6
 800c9d8:	f7ff ff5a 	bl	800c890 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9e0:	2600      	movs	r6, #0
 800c9e2:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800c9e4:	882b      	ldrh	r3, [r5, #0]
 800c9e6:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800c9e8:	a90d      	add	r1, sp, #52	; 0x34
 800c9ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c9ec:	f004 f93e 	bl	8010c6c <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c9f0:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800c9f2:	2302      	movs	r3, #2
 800c9f4:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800c9f6:	8823      	ldrh	r3, [r4, #0]
 800c9f8:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800c9fa:	a90d      	add	r1, sp, #52	; 0x34
 800c9fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9fe:	f004 f935 	bl	8010c6c <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800ca02:	8829      	ldrh	r1, [r5, #0]
 800ca04:	2200      	movs	r2, #0
 800ca06:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ca08:	f004 faa4 	bl	8010f54 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800ca0c:	2005      	movs	r0, #5
 800ca0e:	f000 fae3 	bl	800cfd8 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800ca12:	8821      	ldrh	r1, [r4, #0]
 800ca14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca16:	f004 fa97 	bl	8010f48 <HAL_GPIO_ReadPin>
 800ca1a:	2800      	cmp	r0, #0
 800ca1c:	d006      	beq.n	800ca2c <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800ca1e:	4b0e      	ldr	r3, [pc, #56]	; (800ca58 <IsFactoryReset+0xf0>)
 800ca20:	2201      	movs	r2, #1
 800ca22:	4252      	negs	r2, r2
 800ca24:	601a      	str	r2, [r3, #0]
	return 0;
 800ca26:	2000      	movs	r0, #0
}
 800ca28:	b012      	add	sp, #72	; 0x48
 800ca2a:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800ca2c:	2322      	movs	r3, #34	; 0x22
 800ca2e:	446b      	add	r3, sp
 800ca30:	8819      	ldrh	r1, [r3, #0]
 800ca32:	2201      	movs	r2, #1
 800ca34:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ca36:	f004 fa8d 	bl	8010f54 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800ca3a:	2005      	movs	r0, #5
 800ca3c:	f000 facc 	bl	800cfd8 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800ca40:	ab07      	add	r3, sp, #28
 800ca42:	8819      	ldrh	r1, [r3, #0]
 800ca44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca46:	f004 fa7f 	bl	8010f48 <HAL_GPIO_ReadPin>
 800ca4a:	2801      	cmp	r0, #1
 800ca4c:	d1e7      	bne.n	800ca1e <IsFactoryReset+0xb6>
			return 1;
 800ca4e:	2001      	movs	r0, #1
 800ca50:	e7ea      	b.n	800ca28 <IsFactoryReset+0xc0>
 800ca52:	46c0      	nop			; (mov r8, r8)
 800ca54:	40021000 	.word	0x40021000
 800ca58:	20007ff0 	.word	0x20007ff0

0800ca5c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800ca5c:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800ca5e:	f002 fe01 	bl	800f664 <HAL_IncTick>
  osSystickHandler();  
 800ca62:	f000 fe55 	bl	800d710 <osSystickHandler>

}
 800ca66:	bd10      	pop	{r4, pc}

0800ca68 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800ca68:	e7fe      	b.n	800ca68 <HardFault_Handler>
	...

0800ca6c <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800ca6c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800ca6e:	4802      	ldr	r0, [pc, #8]	; (800ca78 <USART1_IRQHandler+0xc>)
 800ca70:	f005 ff7d 	bl	801296e <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ca74:	bd10      	pop	{r4, pc}
 800ca76:	46c0      	nop			; (mov r8, r8)
 800ca78:	20006bc4 	.word	0x20006bc4

0800ca7c <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800ca7c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800ca7e:	4802      	ldr	r0, [pc, #8]	; (800ca88 <USART2_IRQHandler+0xc>)
 800ca80:	f005 ff75 	bl	801296e <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ca84:	bd10      	pop	{r4, pc}
 800ca86:	46c0      	nop			; (mov r8, r8)
 800ca88:	20006d14 	.word	0x20006d14

0800ca8c <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800ca8c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800ca8e:	4806      	ldr	r0, [pc, #24]	; (800caa8 <USART3_8_IRQHandler+0x1c>)
 800ca90:	f005 ff6d 	bl	801296e <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800ca94:	4805      	ldr	r0, [pc, #20]	; (800caac <USART3_8_IRQHandler+0x20>)
 800ca96:	f005 ff6a 	bl	801296e <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800ca9a:	4805      	ldr	r0, [pc, #20]	; (800cab0 <USART3_8_IRQHandler+0x24>)
 800ca9c:	f005 ff67 	bl	801296e <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800caa0:	4804      	ldr	r0, [pc, #16]	; (800cab4 <USART3_8_IRQHandler+0x28>)
 800caa2:	f005 ff64 	bl	801296e <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800caa6:	bd10      	pop	{r4, pc}
 800caa8:	20006ae4 	.word	0x20006ae4
 800caac:	20006ca4 	.word	0x20006ca4
 800cab0:	20006b54 	.word	0x20006b54
 800cab4:	20006c34 	.word	0x20006c34

0800cab8 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800cab8:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800caba:	2001      	movs	r0, #1
 800cabc:	f7fa fda6 	bl	800760c <DMA_IRQHandler>
	
}
 800cac0:	bd10      	pop	{r4, pc}
	...

0800cac4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800cac4:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800cac6:	4b0c      	ldr	r3, [pc, #48]	; (800caf8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	06db      	lsls	r3, r3, #27
 800cacc:	d408      	bmi.n	800cae0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800cace:	4b0b      	ldr	r3, [pc, #44]	; (800cafc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	05db      	lsls	r3, r3, #23
 800cad4:	d408      	bmi.n	800cae8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800cad6:	4b09      	ldr	r3, [pc, #36]	; (800cafc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	06db      	lsls	r3, r3, #27
 800cadc:	d408      	bmi.n	800caf0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800cade:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800cae0:	2005      	movs	r0, #5
 800cae2:	f7fa fd93 	bl	800760c <DMA_IRQHandler>
 800cae6:	e7fa      	b.n	800cade <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800cae8:	2002      	movs	r0, #2
 800caea:	f7fa fd8f 	bl	800760c <DMA_IRQHandler>
 800caee:	e7f6      	b.n	800cade <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800caf0:	4803      	ldr	r0, [pc, #12]	; (800cb00 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800caf2:	f003 fb17 	bl	8010124 <HAL_DMA_IRQHandler>
}
 800caf6:	e7f2      	b.n	800cade <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800caf8:	40020400 	.word	0x40020400
 800cafc:	40020000 	.word	0x40020000
 800cb00:	200018ec 	.word	0x200018ec

0800cb04 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800cb04:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800cb06:	4b14      	ldr	r3, [pc, #80]	; (800cb58 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	03db      	lsls	r3, r3, #15
 800cb0c:	d413      	bmi.n	800cb36 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800cb0e:	4b12      	ldr	r3, [pc, #72]	; (800cb58 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	02db      	lsls	r3, r3, #11
 800cb14:	d413      	bmi.n	800cb3e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800cb16:	4b11      	ldr	r3, [pc, #68]	; (800cb5c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	05db      	lsls	r3, r3, #23
 800cb1c:	d413      	bmi.n	800cb46 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800cb1e:	4b0e      	ldr	r3, [pc, #56]	; (800cb58 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	04db      	lsls	r3, r3, #19
 800cb24:	d413      	bmi.n	800cb4e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800cb26:	4b0c      	ldr	r3, [pc, #48]	; (800cb58 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	01db      	lsls	r3, r3, #7
 800cb2c:	d506      	bpl.n	800cb3c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800cb2e:	480c      	ldr	r0, [pc, #48]	; (800cb60 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800cb30:	f003 faf8 	bl	8010124 <HAL_DMA_IRQHandler>
	}
}
 800cb34:	e002      	b.n	800cb3c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800cb36:	2003      	movs	r0, #3
 800cb38:	f7fa fd68 	bl	800760c <DMA_IRQHandler>
}
 800cb3c:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800cb3e:	2004      	movs	r0, #4
 800cb40:	f7fa fd64 	bl	800760c <DMA_IRQHandler>
 800cb44:	e7fa      	b.n	800cb3c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800cb46:	2006      	movs	r0, #6
 800cb48:	f7fa fd60 	bl	800760c <DMA_IRQHandler>
 800cb4c:	e7f6      	b.n	800cb3c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800cb4e:	4805      	ldr	r0, [pc, #20]	; (800cb64 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800cb50:	f003 fae8 	bl	8010124 <HAL_DMA_IRQHandler>
 800cb54:	e7f2      	b.n	800cb3c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800cb56:	46c0      	nop			; (mov r8, r8)
 800cb58:	40020000 	.word	0x40020000
 800cb5c:	40020400 	.word	0x40020400
 800cb60:	2000195c 	.word	0x2000195c
 800cb64:	20001924 	.word	0x20001924

0800cb68 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb68:	b510      	push	{r4, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800cb72:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d001      	beq.n	800cb7c <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800cb78:	f7fe feee 	bl	800b958 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800cb7c:	0020      	movs	r0, r4
 800cb7e:	f7fe fd81 	bl	800b684 <GetPort>
 800cb82:	0080      	lsls	r0, r0, #2
 800cb84:	4b03      	ldr	r3, [pc, #12]	; (800cb94 <HAL_UART_TxCpltCallback+0x2c>)
 800cb86:	58c0      	ldr	r0, [r0, r3]
 800cb88:	a901      	add	r1, sp, #4
 800cb8a:	f001 f945 	bl	800de18 <xQueueGiveFromISR>
}
 800cb8e:	b002      	add	sp, #8
 800cb90:	bd10      	pop	{r4, pc}
 800cb92:	46c0      	nop			; (mov r8, r8)
 800cb94:	20006a44 	.word	0x20006a44

0800cb98 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cb98:	b510      	push	{r4, lr}
 800cb9a:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800cb9c:	2369      	movs	r3, #105	; 0x69
 800cb9e:	2201      	movs	r2, #1
 800cba0:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800cba2:	f7fe fd6f 	bl	800b684 <GetPort>
	if (portStatus[port] == STREAM) {
 800cba6:	4b0c      	ldr	r3, [pc, #48]	; (800cbd8 <HAL_UART_ErrorCallback+0x40>)
 800cba8:	5c1b      	ldrb	r3, [r3, r0]
 800cbaa:	2b02      	cmp	r3, #2
 800cbac:	d005      	beq.n	800cbba <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800cbae:	4b0b      	ldr	r3, [pc, #44]	; (800cbdc <HAL_UART_ErrorCallback+0x44>)
 800cbb0:	1818      	adds	r0, r3, r0
 800cbb2:	3801      	subs	r0, #1
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	7003      	strb	r3, [r0, #0]
	}	
}
 800cbb8:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800cbba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	685a      	ldr	r2, [r3, #4]
 800cbc0:	b292      	uxth	r2, r2
 800cbc2:	3801      	subs	r0, #1
 800cbc4:	0080      	lsls	r0, r0, #2
 800cbc6:	4b06      	ldr	r3, [pc, #24]	; (800cbe0 <HAL_UART_ErrorCallback+0x48>)
 800cbc8:	58c3      	ldr	r3, [r0, r3]
 800cbca:	6819      	ldr	r1, [r3, #0]
 800cbcc:	3128      	adds	r1, #40	; 0x28
 800cbce:	0020      	movs	r0, r4
 800cbd0:	f005 fab6 	bl	8012140 <HAL_UART_Receive_DMA>
 800cbd4:	e7f0      	b.n	800cbb8 <HAL_UART_ErrorCallback+0x20>
 800cbd6:	46c0      	nop			; (mov r8, r8)
 800cbd8:	200010f8 	.word	0x200010f8
 800cbdc:	200012c8 	.word	0x200012c8
 800cbe0:	200014a8 	.word	0x200014a8

0800cbe4 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cbe4:	b510      	push	{r4, lr}
 800cbe6:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800cbe8:	f7fe fd4c 	bl	800b684 <GetPort>
 800cbec:	4b13      	ldr	r3, [pc, #76]	; (800cc3c <HAL_UART_RxCpltCallback+0x58>)
 800cbee:	5c1b      	ldrb	r3, [r3, r0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d006      	beq.n	800cc02 <HAL_UART_RxCpltCallback+0x1e>
 800cbf4:	0020      	movs	r0, r4
 800cbf6:	f7fe fd45 	bl	800b684 <GetPort>
 800cbfa:	4b10      	ldr	r3, [pc, #64]	; (800cc3c <HAL_UART_RxCpltCallback+0x58>)
 800cbfc:	5c1b      	ldrb	r3, [r3, r0]
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d11a      	bne.n	800cc38 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800cc02:	0020      	movs	r0, r4
 800cc04:	f7fe fd3e 	bl	800b684 <GetPort>
 800cc08:	4b0d      	ldr	r3, [pc, #52]	; (800cc40 <HAL_UART_RxCpltCallback+0x5c>)
 800cc0a:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800cc0c:	0020      	movs	r0, r4
 800cc0e:	f7fe fd39 	bl	800b684 <GetPort>
 800cc12:	4b0a      	ldr	r3, [pc, #40]	; (800cc3c <HAL_UART_RxCpltCallback+0x58>)
 800cc14:	2205      	movs	r2, #5
 800cc16:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800cc18:	0020      	movs	r0, r4
 800cc1a:	f7fe fd33 	bl	800b684 <GetPort>
 800cc1e:	4b09      	ldr	r3, [pc, #36]	; (800cc44 <HAL_UART_RxCpltCallback+0x60>)
 800cc20:	1818      	adds	r0, r3, r0
 800cc22:	3801      	subs	r0, #1
 800cc24:	2300      	movs	r3, #0
 800cc26:	7003      	strb	r3, [r0, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800cc28:	0020      	movs	r0, r4
 800cc2a:	f7fe fd2b 	bl	800b684 <GetPort>
 800cc2e:	4b06      	ldr	r3, [pc, #24]	; (800cc48 <HAL_UART_RxCpltCallback+0x64>)
 800cc30:	1818      	adds	r0, r3, r0
 800cc32:	3801      	subs	r0, #1
 800cc34:	2301      	movs	r3, #1
 800cc36:	7003      	strb	r3, [r0, #0]
	}
}
 800cc38:	bd10      	pop	{r4, pc}
 800cc3a:	46c0      	nop			; (mov r8, r8)
 800cc3c:	200010f8 	.word	0x200010f8
 800cc40:	200069c4 	.word	0x200069c4
 800cc44:	20001450 	.word	0x20001450
 800cc48:	200012c8 	.word	0x200012c8

0800cc4c <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800cc4c:	b672      	cpsid	i
 800cc4e:	e7fe      	b.n	800cc4e <vApplicationStackOverflowHook+0x2>

0800cc50 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800cc50:	b672      	cpsid	i
 800cc52:	e7fe      	b.n	800cc52 <vApplicationMallocFailedHook+0x2>

0800cc54 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800cc54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc56:	46ce      	mov	lr, r9
 800cc58:	b500      	push	{lr}
 800cc5a:	b08e      	sub	sp, #56	; 0x38
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cc5c:	ac05      	add	r4, sp, #20
 800cc5e:	4b34      	ldr	r3, [pc, #208]	; (800cd30 <RTC_CalendarConfig+0xdc>)
 800cc60:	0022      	movs	r2, r4
 800cc62:	cb43      	ldmia	r3!, {r0, r1, r6}
 800cc64:	c243      	stmia	r2!, {r0, r1, r6}
 800cc66:	aa02      	add	r2, sp, #8
 800cc68:	4b32      	ldr	r3, [pc, #200]	; (800cd34 <RTC_CalendarConfig+0xe0>)
 800cc6a:	cb03      	ldmia	r3!, {r0, r1}
 800cc6c:	c203      	stmia	r2!, {r0, r1}
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800cc72:	2015      	movs	r0, #21
 800cc74:	ab02      	add	r3, sp, #8
 800cc76:	469c      	mov	ip, r3
 800cc78:	4460      	add	r0, ip
 800cc7a:	f005 ff00 	bl	8012a7e <atoi>
 800cc7e:	b2c3      	uxtb	r3, r0
 800cc80:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800cc82:	2600      	movs	r6, #0
 800cc84:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 800cc86:	a806      	add	r0, sp, #24
 800cc88:	f005 fef9 	bl	8012a7e <atoi>
 800cc8c:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 800cc8e:	70e6      	strb	r6, [r4, #3]
 800cc90:	2401      	movs	r4, #1
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800cc92:	4e29      	ldr	r6, [pc, #164]	; (800cd38 <RTC_CalendarConfig+0xe4>)
 800cc94:	e002      	b.n	800cc9c <RTC_CalendarConfig+0x48>
 800cc96:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 800cc98:	2c0d      	cmp	r4, #13
 800cc9a:	d009      	beq.n	800ccb0 <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800cc9c:	00a3      	lsls	r3, r4, #2
 800cc9e:	3b04      	subs	r3, #4
 800cca0:	58f1      	ldr	r1, [r6, r3]
 800cca2:	a805      	add	r0, sp, #20
 800cca4:	f7f3 fa2e 	bl	8000104 <strcmp>
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	d1f4      	bne.n	800cc96 <RTC_CalendarConfig+0x42>
			month = i + 1;
 800ccac:	b2e5      	uxtb	r5, r4
 800ccae:	e7f2      	b.n	800cc96 <RTC_CalendarConfig+0x42>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800ccb0:	ab02      	add	r3, sp, #8
 800ccb2:	1d98      	adds	r0, r3, #6
 800ccb4:	f005 fee3 	bl	8012a7e <atoi>
 800ccb8:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 800ccba:	ac05      	add	r4, sp, #20
 800ccbc:	2600      	movs	r6, #0
 800ccbe:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 800ccc0:	ab02      	add	r3, sp, #8
 800ccc2:	1cd8      	adds	r0, r3, #3
 800ccc4:	f005 fedb 	bl	8012a7e <atoi>
 800ccc8:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 800ccca:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 800cccc:	a802      	add	r0, sp, #8
 800ccce:	f005 fed6 	bl	8012a7e <atoi>
 800ccd2:	0004      	movs	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800ccd4:	a90d      	add	r1, sp, #52	; 0x34
 800ccd6:	464b      	mov	r3, r9
 800ccd8:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800ccda:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800ccdc:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800ccde:	2301      	movs	r3, #1
 800cce0:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800cce2:	2200      	movs	r2, #0
 800cce4:	4815      	ldr	r0, [pc, #84]	; (800cd3c <RTC_CalendarConfig+0xe8>)
 800cce6:	f004 ff77 	bl	8011bd8 <HAL_RTC_SetDate>
		return BOS_ERROR;
 800ccea:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800ccec:	2800      	cmp	r0, #0
 800ccee:	d119      	bne.n	800cd24 <RTC_CalendarConfig+0xd0>

  /* Set Time */
  stimestructure.Hours = hours;
 800ccf0:	a908      	add	r1, sp, #32
 800ccf2:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800ccf4:	9b01      	ldr	r3, [sp, #4]
 800ccf6:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800ccf8:	9b00      	ldr	r3, [sp, #0]
 800ccfa:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	720b      	strb	r3, [r1, #8]
 800cd00:	4a0f      	ldr	r2, [pc, #60]	; (800cd40 <RTC_CalendarConfig+0xec>)
 800cd02:	3018      	adds	r0, #24
 800cd04:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800cd06:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800cd08:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	480b      	ldr	r0, [pc, #44]	; (800cd3c <RTC_CalendarConfig+0xe8>)
 800cd0e:	f004 fedd 	bl	8011acc <HAL_RTC_SetTime>
		return BOS_ERROR;
 800cd12:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800cd14:	2800      	cmp	r0, #0
 800cd16:	d105      	bne.n	800cd24 <RTC_CalendarConfig+0xd0>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800cd18:	4a0a      	ldr	r2, [pc, #40]	; (800cd44 <RTC_CalendarConfig+0xf0>)
 800cd1a:	2101      	movs	r1, #1
 800cd1c:	4807      	ldr	r0, [pc, #28]	; (800cd3c <RTC_CalendarConfig+0xe8>)
 800cd1e:	f005 f81f 	bl	8011d60 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800cd22:	2300      	movs	r3, #0
}
 800cd24:	0018      	movs	r0, r3
 800cd26:	b00e      	add	sp, #56	; 0x38
 800cd28:	bc04      	pop	{r2}
 800cd2a:	4691      	mov	r9, r2
 800cd2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd2e:	46c0      	nop			; (mov r8, r8)
 800cd30:	08017910 	.word	0x08017910
 800cd34:	0801a448 	.word	0x0801a448
 800cd38:	20000020 	.word	0x20000020
 800cd3c:	20006da8 	.word	0x20006da8
 800cd40:	200069c4 	.word	0x200069c4
 800cd44:	000032f2 	.word	0x000032f2

0800cd48 <RTC_Init>:
{
 800cd48:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800cd4a:	4a1c      	ldr	r2, [pc, #112]	; (800cdbc <RTC_Init+0x74>)
 800cd4c:	6a11      	ldr	r1, [r2, #32]
 800cd4e:	2380      	movs	r3, #128	; 0x80
 800cd50:	021b      	lsls	r3, r3, #8
 800cd52:	430b      	orrs	r3, r1
 800cd54:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800cd56:	481a      	ldr	r0, [pc, #104]	; (800cdc0 <RTC_Init+0x78>)
 800cd58:	4b1a      	ldr	r3, [pc, #104]	; (800cdc4 <RTC_Init+0x7c>)
 800cd5a:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800cd60:	227c      	movs	r2, #124	; 0x7c
 800cd62:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800cd64:	4a18      	ldr	r2, [pc, #96]	; (800cdc8 <RTC_Init+0x80>)
 800cd66:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800cd68:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800cd6a:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800cd6c:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800cd6e:	f004 fe4f 	bl	8011a10 <HAL_RTC_Init>
 800cd72:	23ff      	movs	r3, #255	; 0xff
 800cd74:	2800      	cmp	r0, #0
 800cd76:	d11e      	bne.n	800cdb6 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800cd78:	2101      	movs	r1, #1
 800cd7a:	4811      	ldr	r0, [pc, #68]	; (800cdc0 <RTC_Init+0x78>)
 800cd7c:	f004 fff6 	bl	8011d6c <HAL_RTCEx_BKUPRead>
 800cd80:	4b12      	ldr	r3, [pc, #72]	; (800cdcc <RTC_Init+0x84>)
 800cd82:	4298      	cmp	r0, r3
 800cd84:	d10e      	bne.n	800cda4 <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800cd86:	4b0d      	ldr	r3, [pc, #52]	; (800cdbc <RTC_Init+0x74>)
 800cd88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd8a:	011b      	lsls	r3, r3, #4
 800cd8c:	d502      	bpl.n	800cd94 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800cd8e:	4b10      	ldr	r3, [pc, #64]	; (800cdd0 <RTC_Init+0x88>)
 800cd90:	2200      	movs	r2, #0
 800cd92:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800cd94:	4b09      	ldr	r3, [pc, #36]	; (800cdbc <RTC_Init+0x74>)
 800cd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd98:	015b      	lsls	r3, r3, #5
 800cd9a:	d505      	bpl.n	800cda8 <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 800cd9c:	4b0c      	ldr	r3, [pc, #48]	; (800cdd0 <RTC_Init+0x88>)
 800cd9e:	2201      	movs	r2, #1
 800cda0:	701a      	strb	r2, [r3, #0]
 800cda2:	e001      	b.n	800cda8 <RTC_Init+0x60>
    RTC_CalendarConfig();
 800cda4:	f7ff ff56 	bl	800cc54 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800cda8:	4a04      	ldr	r2, [pc, #16]	; (800cdbc <RTC_Init+0x74>)
 800cdaa:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800cdac:	2380      	movs	r3, #128	; 0x80
 800cdae:	045b      	lsls	r3, r3, #17
 800cdb0:	430b      	orrs	r3, r1
 800cdb2:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	0018      	movs	r0, r3
 800cdb8:	bd10      	pop	{r4, pc}
 800cdba:	46c0      	nop			; (mov r8, r8)
 800cdbc:	40021000 	.word	0x40021000
 800cdc0:	20006da8 	.word	0x20006da8
 800cdc4:	40002800 	.word	0x40002800
 800cdc8:	000007cf 	.word	0x000007cf
 800cdcc:	000032f2 	.word	0x000032f2
 800cdd0:	20001ae4 	.word	0x20001ae4

0800cdd4 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800cdd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdd6:	46c6      	mov	lr, r8
 800cdd8:	b500      	push	{lr}
 800cdda:	b086      	sub	sp, #24
 800cddc:	ac0c      	add	r4, sp, #48	; 0x30
 800cdde:	7827      	ldrb	r7, [r4, #0]
 800cde0:	ac0d      	add	r4, sp, #52	; 0x34
 800cde2:	7824      	ldrb	r4, [r4, #0]
 800cde4:	46a0      	mov	r8, r4
 800cde6:	ac0e      	add	r4, sp, #56	; 0x38
 800cde8:	7825      	ldrb	r5, [r4, #0]
 800cdea:	ac0f      	add	r4, sp, #60	; 0x3c
 800cdec:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800cdee:	ac05      	add	r4, sp, #20
 800cdf0:	3230      	adds	r2, #48	; 0x30
 800cdf2:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800cdf4:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800cdf6:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800cdf8:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	0021      	movs	r1, r4
 800cdfe:	481f      	ldr	r0, [pc, #124]	; (800ce7c <BOS_CalendarConfig+0xa8>)
 800ce00:	f004 feea 	bl	8011bd8 <HAL_RTC_SetDate>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d136      	bne.n	800ce76 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800ce08:	466b      	mov	r3, sp
 800ce0a:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800ce0c:	4642      	mov	r2, r8
 800ce0e:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800ce10:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800ce12:	2300      	movs	r3, #0
 800ce14:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800ce16:	2e01      	cmp	r6, #1
 800ce18:	d020      	beq.n	800ce5c <BOS_CalendarConfig+0x88>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800ce1a:	2e02      	cmp	r6, #2
 800ce1c:	d024      	beq.n	800ce68 <BOS_CalendarConfig+0x94>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800ce1e:	4b18      	ldr	r3, [pc, #96]	; (800ce80 <BOS_CalendarConfig+0xac>)
 800ce20:	2218      	movs	r2, #24
 800ce22:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800ce24:	2200      	movs	r2, #0
 800ce26:	4669      	mov	r1, sp
 800ce28:	4814      	ldr	r0, [pc, #80]	; (800ce7c <BOS_CalendarConfig+0xa8>)
 800ce2a:	f004 fe4f 	bl	8011acc <HAL_RTC_SetTime>
		return BOS_ERROR;
 800ce2e:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800ce30:	2800      	cmp	r0, #0
 800ce32:	d10e      	bne.n	800ce52 <BOS_CalendarConfig+0x7e>
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800ce34:	4a12      	ldr	r2, [pc, #72]	; (800ce80 <BOS_CalendarConfig+0xac>)
 800ce36:	7b53      	ldrb	r3, [r2, #13]
 800ce38:	021b      	lsls	r3, r3, #8
 800ce3a:	7911      	ldrb	r1, [r2, #4]
 800ce3c:	4319      	orrs	r1, r3
 800ce3e:	308d      	adds	r0, #141	; 0x8d
 800ce40:	0040      	lsls	r0, r0, #1
 800ce42:	f7fa fccd 	bl	80077e0 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800ce46:	4a0f      	ldr	r2, [pc, #60]	; (800ce84 <BOS_CalendarConfig+0xb0>)
 800ce48:	2101      	movs	r1, #1
 800ce4a:	480c      	ldr	r0, [pc, #48]	; (800ce7c <BOS_CalendarConfig+0xa8>)
 800ce4c:	f004 ff88 	bl	8011d60 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800ce50:	2300      	movs	r3, #0
}
 800ce52:	0018      	movs	r0, r3
 800ce54:	b006      	add	sp, #24
 800ce56:	bc04      	pop	{r2}
 800ce58:	4690      	mov	r8, r2
 800ce5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800ce5c:	466a      	mov	r2, sp
 800ce5e:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800ce60:	4b07      	ldr	r3, [pc, #28]	; (800ce80 <BOS_CalendarConfig+0xac>)
 800ce62:	220c      	movs	r2, #12
 800ce64:	735a      	strb	r2, [r3, #13]
 800ce66:	e7dd      	b.n	800ce24 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800ce68:	2340      	movs	r3, #64	; 0x40
 800ce6a:	466a      	mov	r2, sp
 800ce6c:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800ce6e:	4b04      	ldr	r3, [pc, #16]	; (800ce80 <BOS_CalendarConfig+0xac>)
 800ce70:	220c      	movs	r2, #12
 800ce72:	735a      	strb	r2, [r3, #13]
 800ce74:	e7d6      	b.n	800ce24 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800ce76:	23ff      	movs	r3, #255	; 0xff
 800ce78:	e7eb      	b.n	800ce52 <BOS_CalendarConfig+0x7e>
 800ce7a:	46c0      	nop			; (mov r8, r8)
 800ce7c:	20006da8 	.word	0x20006da8
 800ce80:	200069c4 	.word	0x200069c4
 800ce84:	000032f2 	.word	0x000032f2

0800ce88 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800ce88:	b530      	push	{r4, r5, lr}
 800ce8a:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800ce8c:	4d16      	ldr	r5, [pc, #88]	; (800cee8 <GetTimeDate+0x60>)
 800ce8e:	2200      	movs	r2, #0
 800ce90:	a902      	add	r1, sp, #8
 800ce92:	0028      	movs	r0, r5
 800ce94:	f004 ff1c 	bl	8011cd0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800ce98:	ac07      	add	r4, sp, #28
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	0021      	movs	r1, r4
 800ce9e:	0028      	movs	r0, r5
 800cea0:	f004 ff3c 	bl	8011d1c <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800cea4:	4b11      	ldr	r3, [pc, #68]	; (800ceec <GetTimeDate+0x64>)
 800cea6:	aa02      	add	r2, sp, #8
 800cea8:	7a12      	ldrb	r2, [r2, #8]
 800ceaa:	09d2      	lsrs	r2, r2, #7
 800ceac:	3201      	adds	r2, #1
 800ceae:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800ceb0:	9a03      	ldr	r2, [sp, #12]
 800ceb2:	9201      	str	r2, [sp, #4]
 800ceb4:	0852      	lsrs	r2, r2, #1
 800ceb6:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800ceb8:	aa02      	add	r2, sp, #8
 800ceba:	7892      	ldrb	r2, [r2, #2]
 800cebc:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800cebe:	aa02      	add	r2, sp, #8
 800cec0:	7852      	ldrb	r2, [r2, #1]
 800cec2:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800cec4:	aa02      	add	r2, sp, #8
 800cec6:	7812      	ldrb	r2, [r2, #0]
 800cec8:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800ceca:	78a2      	ldrb	r2, [r4, #2]
 800cecc:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800cece:	7862      	ldrb	r2, [r4, #1]
 800ced0:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800ced2:	7822      	ldrb	r2, [r4, #0]
 800ced4:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800ced6:	78e2      	ldrb	r2, [r4, #3]
 800ced8:	21fa      	movs	r1, #250	; 0xfa
 800ceda:	00c9      	lsls	r1, r1, #3
 800cedc:	468c      	mov	ip, r1
 800cede:	4462      	add	r2, ip
 800cee0:	831a      	strh	r2, [r3, #24]
}
 800cee2:	b009      	add	sp, #36	; 0x24
 800cee4:	bd30      	pop	{r4, r5, pc}
 800cee6:	46c0      	nop			; (mov r8, r8)
 800cee8:	20006da8 	.word	0x20006da8
 800ceec:	200069c4 	.word	0x200069c4

0800cef0 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800cef0:	b530      	push	{r4, r5, lr}
 800cef2:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800cef4:	4a12      	ldr	r2, [pc, #72]	; (800cf40 <TIM_USEC_Init+0x50>)
 800cef6:	69d1      	ldr	r1, [r2, #28]
 800cef8:	2080      	movs	r0, #128	; 0x80
 800cefa:	0040      	lsls	r0, r0, #1
 800cefc:	4301      	orrs	r1, r0
 800cefe:	61d1      	str	r1, [r2, #28]
 800cf00:	69d3      	ldr	r3, [r2, #28]
 800cf02:	4003      	ands	r3, r0
 800cf04:	9301      	str	r3, [sp, #4]
 800cf06:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800cf08:	4c0e      	ldr	r4, [pc, #56]	; (800cf44 <TIM_USEC_Init+0x54>)
 800cf0a:	4b0f      	ldr	r3, [pc, #60]	; (800cf48 <TIM_USEC_Init+0x58>)
 800cf0c:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800cf0e:	f004 fc97 	bl	8011840 <HAL_RCC_GetPCLK1Freq>
 800cf12:	490e      	ldr	r1, [pc, #56]	; (800cf4c <TIM_USEC_Init+0x5c>)
 800cf14:	f7f3 f91c 	bl	8000150 <__udivsi3>
 800cf18:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cf1a:	2500      	movs	r5, #0
 800cf1c:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800cf1e:	4b0c      	ldr	r3, [pc, #48]	; (800cf50 <TIM_USEC_Init+0x60>)
 800cf20:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800cf22:	0020      	movs	r0, r4
 800cf24:	f004 ffb2 	bl	8011e8c <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cf28:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cf2a:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800cf2c:	a902      	add	r1, sp, #8
 800cf2e:	0020      	movs	r0, r4
 800cf30:	f004 ffc6 	bl	8011ec0 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800cf34:	0020      	movs	r0, r4
 800cf36:	f004 ff20 	bl	8011d7a <HAL_TIM_Base_Start>
}
 800cf3a:	b005      	add	sp, #20
 800cf3c:	bd30      	pop	{r4, r5, pc}
 800cf3e:	46c0      	nop			; (mov r8, r8)
 800cf40:	40021000 	.word	0x40021000
 800cf44:	20006e04 	.word	0x20006e04
 800cf48:	40002000 	.word	0x40002000
 800cf4c:	000f4240 	.word	0x000f4240
 800cf50:	0000ffff 	.word	0x0000ffff

0800cf54 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800cf54:	b530      	push	{r4, r5, lr}
 800cf56:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800cf58:	4a12      	ldr	r2, [pc, #72]	; (800cfa4 <TIM_MSEC_Init+0x50>)
 800cf5a:	6991      	ldr	r1, [r2, #24]
 800cf5c:	2080      	movs	r0, #128	; 0x80
 800cf5e:	0240      	lsls	r0, r0, #9
 800cf60:	4301      	orrs	r1, r0
 800cf62:	6191      	str	r1, [r2, #24]
 800cf64:	6993      	ldr	r3, [r2, #24]
 800cf66:	4003      	ands	r3, r0
 800cf68:	9301      	str	r3, [sp, #4]
 800cf6a:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800cf6c:	4c0e      	ldr	r4, [pc, #56]	; (800cfa8 <TIM_MSEC_Init+0x54>)
 800cf6e:	4b0f      	ldr	r3, [pc, #60]	; (800cfac <TIM_MSEC_Init+0x58>)
 800cf70:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800cf72:	f004 fc65 	bl	8011840 <HAL_RCC_GetPCLK1Freq>
 800cf76:	21fa      	movs	r1, #250	; 0xfa
 800cf78:	0089      	lsls	r1, r1, #2
 800cf7a:	f7f3 f8e9 	bl	8000150 <__udivsi3>
 800cf7e:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cf80:	2500      	movs	r5, #0
 800cf82:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800cf84:	4b0a      	ldr	r3, [pc, #40]	; (800cfb0 <TIM_MSEC_Init+0x5c>)
 800cf86:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800cf88:	0020      	movs	r0, r4
 800cf8a:	f004 ff7f 	bl	8011e8c <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cf8e:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cf90:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800cf92:	a902      	add	r1, sp, #8
 800cf94:	0020      	movs	r0, r4
 800cf96:	f004 ff93 	bl	8011ec0 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800cf9a:	0020      	movs	r0, r4
 800cf9c:	f004 feed 	bl	8011d7a <HAL_TIM_Base_Start>
}
 800cfa0:	b005      	add	sp, #20
 800cfa2:	bd30      	pop	{r4, r5, pc}
 800cfa4:	40021000 	.word	0x40021000
 800cfa8:	20006dc8 	.word	0x20006dc8
 800cfac:	40014000 	.word	0x40014000
 800cfb0:	0000ffff 	.word	0x0000ffff

0800cfb4 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800cfb4:	b510      	push	{r4, lr}
 800cfb6:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800cfb8:	f002 f9f0 	bl	800f39c <vPortEnterCritical>
	
	if (Delay)
 800cfbc:	2c00      	cmp	r4, #0
 800cfbe:	d006      	beq.n	800cfce <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800cfc0:	4b04      	ldr	r3, [pc, #16]	; (800cfd4 <StartMicroDelay+0x20>)
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800cfc6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800cfc8:	1a5b      	subs	r3, r3, r1
 800cfca:	42a3      	cmp	r3, r4
 800cfcc:	d9fb      	bls.n	800cfc6 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800cfce:	f002 f9f1 	bl	800f3b4 <vPortExitCritical>
}
 800cfd2:	bd10      	pop	{r4, pc}
 800cfd4:	20006e04 	.word	0x20006e04

0800cfd8 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800cfd8:	b510      	push	{r4, lr}
 800cfda:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800cfdc:	f002 f9de 	bl	800f39c <vPortEnterCritical>
	
	if (Delay)
 800cfe0:	2c00      	cmp	r4, #0
 800cfe2:	d006      	beq.n	800cff2 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800cfe4:	4b04      	ldr	r3, [pc, #16]	; (800cff8 <StartMilliDelay+0x20>)
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800cfea:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800cfec:	1a5b      	subs	r3, r3, r1
 800cfee:	42a3      	cmp	r3, r4
 800cff0:	d9fb      	bls.n	800cfea <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800cff2:	f002 f9df 	bl	800f3b4 <vPortExitCritical>
}
 800cff6:	bd10      	pop	{r4, pc}
 800cff8:	20006dc8 	.word	0x20006dc8

0800cffc <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800cffc:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800cffe:	4809      	ldr	r0, [pc, #36]	; (800d024 <MX_USART1_UART_Init+0x28>)
 800d000:	4b09      	ldr	r3, [pc, #36]	; (800d028 <MX_USART1_UART_Init+0x2c>)
 800d002:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d004:	23e1      	movs	r3, #225	; 0xe1
 800d006:	031b      	lsls	r3, r3, #12
 800d008:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d00a:	2300      	movs	r3, #0
 800d00c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d00e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d010:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d012:	220c      	movs	r2, #12
 800d014:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d016:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d018:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d01a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d01c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800d01e:	f005 fbcf 	bl	80127c0 <HAL_UART_Init>
	#if _P4pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif
}
 800d022:	bd10      	pop	{r4, pc}
 800d024:	20006bc4 	.word	0x20006bc4
 800d028:	40013800 	.word	0x40013800

0800d02c <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800d02c:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800d02e:	4809      	ldr	r0, [pc, #36]	; (800d054 <MX_USART2_UART_Init+0x28>)
 800d030:	4b09      	ldr	r3, [pc, #36]	; (800d058 <MX_USART2_UART_Init+0x2c>)
 800d032:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d034:	23e1      	movs	r3, #225	; 0xe1
 800d036:	031b      	lsls	r3, r3, #12
 800d038:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d03a:	2300      	movs	r3, #0
 800d03c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d03e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d040:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d042:	220c      	movs	r2, #12
 800d044:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d046:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d048:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d04a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d04c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d04e:	f005 fbb7 	bl	80127c0 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif
}
 800d052:	bd10      	pop	{r4, pc}
 800d054:	20006d14 	.word	0x20006d14
 800d058:	40004400 	.word	0x40004400

0800d05c <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800d05c:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d05e:	4809      	ldr	r0, [pc, #36]	; (800d084 <MX_USART3_UART_Init+0x28>)
 800d060:	4b09      	ldr	r3, [pc, #36]	; (800d088 <MX_USART3_UART_Init+0x2c>)
 800d062:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d064:	23e1      	movs	r3, #225	; 0xe1
 800d066:	031b      	lsls	r3, r3, #12
 800d068:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d06a:	2300      	movs	r3, #0
 800d06c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d06e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d070:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d072:	220c      	movs	r2, #12
 800d074:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d076:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d078:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d07a:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d07c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800d07e:	f005 fb9f 	bl	80127c0 <HAL_UART_Init>
	#if _P6pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif
}
 800d082:	bd10      	pop	{r4, pc}
 800d084:	20006ae4 	.word	0x20006ae4
 800d088:	40004800 	.word	0x40004800

0800d08c <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800d08c:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800d08e:	4809      	ldr	r0, [pc, #36]	; (800d0b4 <MX_USART4_UART_Init+0x28>)
 800d090:	4b09      	ldr	r3, [pc, #36]	; (800d0b8 <MX_USART4_UART_Init+0x2c>)
 800d092:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d094:	23e1      	movs	r3, #225	; 0xe1
 800d096:	031b      	lsls	r3, r3, #12
 800d098:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d09a:	2300      	movs	r3, #0
 800d09c:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800d09e:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800d0a0:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d0a2:	220c      	movs	r2, #12
 800d0a4:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d0a6:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d0a8:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d0aa:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d0ac:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800d0ae:	f005 fb87 	bl	80127c0 <HAL_UART_Init>
	#if _P1pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif
}
 800d0b2:	bd10      	pop	{r4, pc}
 800d0b4:	20006ca4 	.word	0x20006ca4
 800d0b8:	40004c00 	.word	0x40004c00

0800d0bc <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800d0bc:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800d0be:	4809      	ldr	r0, [pc, #36]	; (800d0e4 <MX_USART5_UART_Init+0x28>)
 800d0c0:	4b09      	ldr	r3, [pc, #36]	; (800d0e8 <MX_USART5_UART_Init+0x2c>)
 800d0c2:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d0c4:	23e1      	movs	r3, #225	; 0xe1
 800d0c6:	031b      	lsls	r3, r3, #12
 800d0c8:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800d0ce:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800d0d0:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d0d2:	220c      	movs	r2, #12
 800d0d4:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d0d6:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800d0d8:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d0da:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d0dc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800d0de:	f005 fb6f 	bl	80127c0 <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif
}
 800d0e2:	bd10      	pop	{r4, pc}
 800d0e4:	20006b54 	.word	0x20006b54
 800d0e8:	40005000 	.word	0x40005000

0800d0ec <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800d0ec:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800d0ee:	4809      	ldr	r0, [pc, #36]	; (800d114 <MX_USART6_UART_Init+0x28>)
 800d0f0:	4b09      	ldr	r3, [pc, #36]	; (800d118 <MX_USART6_UART_Init+0x2c>)
 800d0f2:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d0f4:	23e1      	movs	r3, #225	; 0xe1
 800d0f6:	031b      	lsls	r3, r3, #12
 800d0f8:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d0fe:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d100:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d102:	220c      	movs	r2, #12
 800d104:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d106:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d108:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d10a:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d10c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800d10e:	f005 fb57 	bl	80127c0 <HAL_UART_Init>
	#if _P3pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif
}
 800d112:	bd10      	pop	{r4, pc}
 800d114:	20006c34 	.word	0x20006c34
 800d118:	40011400 	.word	0x40011400

0800d11c <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d11e:	46ce      	mov	lr, r9
 800d120:	b500      	push	{lr}
 800d122:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800d124:	6803      	ldr	r3, [r0, #0]
 800d126:	4a91      	ldr	r2, [pc, #580]	; (800d36c <HAL_UART_MspInit+0x250>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d015      	beq.n	800d158 <HAL_UART_MspInit+0x3c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800d12c:	4a90      	ldr	r2, [pc, #576]	; (800d370 <HAL_UART_MspInit+0x254>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d040      	beq.n	800d1b4 <HAL_UART_MspInit+0x98>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800d132:	4a90      	ldr	r2, [pc, #576]	; (800d374 <HAL_UART_MspInit+0x258>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d069      	beq.n	800d20c <HAL_UART_MspInit+0xf0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800d138:	4a8f      	ldr	r2, [pc, #572]	; (800d378 <HAL_UART_MspInit+0x25c>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d100      	bne.n	800d140 <HAL_UART_MspInit+0x24>
 800d13e:	e092      	b.n	800d266 <HAL_UART_MspInit+0x14a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800d140:	4a8e      	ldr	r2, [pc, #568]	; (800d37c <HAL_UART_MspInit+0x260>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d100      	bne.n	800d148 <HAL_UART_MspInit+0x2c>
 800d146:	e0b9      	b.n	800d2bc <HAL_UART_MspInit+0x1a0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800d148:	4a8d      	ldr	r2, [pc, #564]	; (800d380 <HAL_UART_MspInit+0x264>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d100      	bne.n	800d150 <HAL_UART_MspInit+0x34>
 800d14e:	e0e0      	b.n	800d312 <HAL_UART_MspInit+0x1f6>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800d150:	b00c      	add	sp, #48	; 0x30
 800d152:	bc04      	pop	{r2}
 800d154:	4691      	mov	r9, r2
 800d156:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800d158:	4a8a      	ldr	r2, [pc, #552]	; (800d384 <HAL_UART_MspInit+0x268>)
 800d15a:	6991      	ldr	r1, [r2, #24]
 800d15c:	2080      	movs	r0, #128	; 0x80
 800d15e:	01c0      	lsls	r0, r0, #7
 800d160:	4301      	orrs	r1, r0
 800d162:	6191      	str	r1, [r2, #24]
 800d164:	6993      	ldr	r3, [r2, #24]
 800d166:	4003      	ands	r3, r0
 800d168:	9301      	str	r3, [sp, #4]
 800d16a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_PIN;
 800d16c:	2380      	movs	r3, #128	; 0x80
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d172:	2702      	movs	r7, #2
 800d174:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d176:	2401      	movs	r4, #1
 800d178:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d17a:	2603      	movs	r6, #3
 800d17c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800d17e:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d180:	2590      	movs	r5, #144	; 0x90
 800d182:	05ed      	lsls	r5, r5, #23
 800d184:	a907      	add	r1, sp, #28
 800d186:	0028      	movs	r0, r5
 800d188:	f003 fd70 	bl	8010c6c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;
 800d18c:	2380      	movs	r3, #128	; 0x80
 800d18e:	00db      	lsls	r3, r3, #3
 800d190:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d192:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d194:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d196:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800d198:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d19a:	a907      	add	r1, sp, #28
 800d19c:	0028      	movs	r0, r5
 800d19e:	f003 fd65 	bl	8010c6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	2101      	movs	r1, #1
 800d1a6:	201b      	movs	r0, #27
 800d1a8:	f002 fd96 	bl	800fcd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d1ac:	201b      	movs	r0, #27
 800d1ae:	f002 fdc7 	bl	800fd40 <HAL_NVIC_EnableIRQ>
 800d1b2:	e7cd      	b.n	800d150 <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800d1b4:	4a73      	ldr	r2, [pc, #460]	; (800d384 <HAL_UART_MspInit+0x268>)
 800d1b6:	69d1      	ldr	r1, [r2, #28]
 800d1b8:	2080      	movs	r0, #128	; 0x80
 800d1ba:	0280      	lsls	r0, r0, #10
 800d1bc:	4301      	orrs	r1, r0
 800d1be:	61d1      	str	r1, [r2, #28]
 800d1c0:	69d3      	ldr	r3, [r2, #28]
 800d1c2:	4003      	ands	r3, r0
 800d1c4:	9302      	str	r3, [sp, #8]
 800d1c6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART2_TX_PIN;
 800d1c8:	2304      	movs	r3, #4
 800d1ca:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1cc:	2702      	movs	r7, #2
 800d1ce:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1d0:	2401      	movs	r4, #1
 800d1d2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1d4:	2603      	movs	r6, #3
 800d1d6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800d1d8:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d1da:	2590      	movs	r5, #144	; 0x90
 800d1dc:	05ed      	lsls	r5, r5, #23
 800d1de:	a907      	add	r1, sp, #28
 800d1e0:	0028      	movs	r0, r5
 800d1e2:	f003 fd43 	bl	8010c6c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;
 800d1e6:	2308      	movs	r3, #8
 800d1e8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1ea:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1ec:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d1ee:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800d1f0:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d1f2:	a907      	add	r1, sp, #28
 800d1f4:	0028      	movs	r0, r5
 800d1f6:	f003 fd39 	bl	8010c6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	2101      	movs	r1, #1
 800d1fe:	201c      	movs	r0, #28
 800d200:	f002 fd6a 	bl	800fcd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d204:	201c      	movs	r0, #28
 800d206:	f002 fd9b 	bl	800fd40 <HAL_NVIC_EnableIRQ>
 800d20a:	e7a1      	b.n	800d150 <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800d20c:	4a5d      	ldr	r2, [pc, #372]	; (800d384 <HAL_UART_MspInit+0x268>)
 800d20e:	69d1      	ldr	r1, [r2, #28]
 800d210:	2080      	movs	r0, #128	; 0x80
 800d212:	02c0      	lsls	r0, r0, #11
 800d214:	4301      	orrs	r1, r0
 800d216:	61d1      	str	r1, [r2, #28]
 800d218:	69d3      	ldr	r3, [r2, #28]
 800d21a:	4003      	ands	r3, r0
 800d21c:	9303      	str	r3, [sp, #12]
 800d21e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN;
 800d220:	2380      	movs	r3, #128	; 0x80
 800d222:	00db      	lsls	r3, r3, #3
 800d224:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d226:	2402      	movs	r4, #2
 800d228:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d22a:	2701      	movs	r7, #1
 800d22c:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d22e:	2603      	movs	r6, #3
 800d230:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800d232:	2504      	movs	r5, #4
 800d234:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d236:	a907      	add	r1, sp, #28
 800d238:	4853      	ldr	r0, [pc, #332]	; (800d388 <HAL_UART_MspInit+0x26c>)
 800d23a:	f003 fd17 	bl	8010c6c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;
 800d23e:	2380      	movs	r3, #128	; 0x80
 800d240:	011b      	lsls	r3, r3, #4
 800d242:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d244:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d246:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d248:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800d24a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800d24c:	a907      	add	r1, sp, #28
 800d24e:	484e      	ldr	r0, [pc, #312]	; (800d388 <HAL_UART_MspInit+0x26c>)
 800d250:	f003 fd0c 	bl	8010c6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d254:	2200      	movs	r2, #0
 800d256:	2101      	movs	r1, #1
 800d258:	201d      	movs	r0, #29
 800d25a:	f002 fd3d 	bl	800fcd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d25e:	201d      	movs	r0, #29
 800d260:	f002 fd6e 	bl	800fd40 <HAL_NVIC_EnableIRQ>
 800d264:	e774      	b.n	800d150 <HAL_UART_MspInit+0x34>
    __USART4_CLK_ENABLE();
 800d266:	4a47      	ldr	r2, [pc, #284]	; (800d384 <HAL_UART_MspInit+0x268>)
 800d268:	69d1      	ldr	r1, [r2, #28]
 800d26a:	2080      	movs	r0, #128	; 0x80
 800d26c:	0300      	lsls	r0, r0, #12
 800d26e:	4301      	orrs	r1, r0
 800d270:	61d1      	str	r1, [r2, #28]
 800d272:	69d3      	ldr	r3, [r2, #28]
 800d274:	4003      	ands	r3, r0
 800d276:	9304      	str	r3, [sp, #16]
 800d278:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN;
 800d27a:	2401      	movs	r4, #1
 800d27c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d27e:	2502      	movs	r5, #2
 800d280:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d282:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d284:	2603      	movs	r6, #3
 800d286:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800d288:	2704      	movs	r7, #4
 800d28a:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800d28c:	a907      	add	r1, sp, #28
 800d28e:	2090      	movs	r0, #144	; 0x90
 800d290:	05c0      	lsls	r0, r0, #23
 800d292:	f003 fceb 	bl	8010c6c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;
 800d296:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d298:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d29a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d29c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800d29e:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800d2a0:	a907      	add	r1, sp, #28
 800d2a2:	2090      	movs	r0, #144	; 0x90
 800d2a4:	05c0      	lsls	r0, r0, #23
 800d2a6:	f003 fce1 	bl	8010c6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	2101      	movs	r1, #1
 800d2ae:	201d      	movs	r0, #29
 800d2b0:	f002 fd12 	bl	800fcd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d2b4:	201d      	movs	r0, #29
 800d2b6:	f002 fd43 	bl	800fd40 <HAL_NVIC_EnableIRQ>
 800d2ba:	e749      	b.n	800d150 <HAL_UART_MspInit+0x34>
    __USART5_CLK_ENABLE();
 800d2bc:	4a31      	ldr	r2, [pc, #196]	; (800d384 <HAL_UART_MspInit+0x268>)
 800d2be:	69d1      	ldr	r1, [r2, #28]
 800d2c0:	2080      	movs	r0, #128	; 0x80
 800d2c2:	0340      	lsls	r0, r0, #13
 800d2c4:	4301      	orrs	r1, r0
 800d2c6:	61d1      	str	r1, [r2, #28]
 800d2c8:	69d3      	ldr	r3, [r2, #28]
 800d2ca:	4003      	ands	r3, r0
 800d2cc:	9305      	str	r3, [sp, #20]
 800d2ce:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART5_TX_PIN;
 800d2d0:	2308      	movs	r3, #8
 800d2d2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2d4:	2402      	movs	r4, #2
 800d2d6:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2d8:	2701      	movs	r7, #1
 800d2da:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2dc:	2603      	movs	r6, #3
 800d2de:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800d2e0:	2504      	movs	r5, #4
 800d2e2:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d2e4:	a907      	add	r1, sp, #28
 800d2e6:	4828      	ldr	r0, [pc, #160]	; (800d388 <HAL_UART_MspInit+0x26c>)
 800d2e8:	f003 fcc0 	bl	8010c6c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;
 800d2ec:	2310      	movs	r3, #16
 800d2ee:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2f0:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2f2:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d2f4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800d2f6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800d2f8:	a907      	add	r1, sp, #28
 800d2fa:	4823      	ldr	r0, [pc, #140]	; (800d388 <HAL_UART_MspInit+0x26c>)
 800d2fc:	f003 fcb6 	bl	8010c6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d300:	2200      	movs	r2, #0
 800d302:	2101      	movs	r1, #1
 800d304:	201d      	movs	r0, #29
 800d306:	f002 fce7 	bl	800fcd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d30a:	201d      	movs	r0, #29
 800d30c:	f002 fd18 	bl	800fd40 <HAL_NVIC_EnableIRQ>
 800d310:	e71e      	b.n	800d150 <HAL_UART_MspInit+0x34>
    __USART6_CLK_ENABLE();
 800d312:	4b1c      	ldr	r3, [pc, #112]	; (800d384 <HAL_UART_MspInit+0x268>)
 800d314:	699a      	ldr	r2, [r3, #24]
 800d316:	2420      	movs	r4, #32
 800d318:	4322      	orrs	r2, r4
 800d31a:	619a      	str	r2, [r3, #24]
 800d31c:	699b      	ldr	r3, [r3, #24]
 800d31e:	4023      	ands	r3, r4
 800d320:	9306      	str	r3, [sp, #24]
 800d322:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN;
 800d324:	2310      	movs	r3, #16
 800d326:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d328:	3b0e      	subs	r3, #14
 800d32a:	4699      	mov	r9, r3
 800d32c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d32e:	2501      	movs	r5, #1
 800d330:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d332:	2703      	movs	r7, #3
 800d334:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800d336:	2605      	movs	r6, #5
 800d338:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d33a:	a907      	add	r1, sp, #28
 800d33c:	2090      	movs	r0, #144	; 0x90
 800d33e:	05c0      	lsls	r0, r0, #23
 800d340:	f003 fc94 	bl	8010c6c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;
 800d344:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d346:	464b      	mov	r3, r9
 800d348:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d34a:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d34c:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800d34e:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d350:	a907      	add	r1, sp, #28
 800d352:	2090      	movs	r0, #144	; 0x90
 800d354:	05c0      	lsls	r0, r0, #23
 800d356:	f003 fc89 	bl	8010c6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d35a:	2200      	movs	r2, #0
 800d35c:	2101      	movs	r1, #1
 800d35e:	201d      	movs	r0, #29
 800d360:	f002 fcba 	bl	800fcd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d364:	201d      	movs	r0, #29
 800d366:	f002 fceb 	bl	800fd40 <HAL_NVIC_EnableIRQ>
}
 800d36a:	e6f1      	b.n	800d150 <HAL_UART_MspInit+0x34>
 800d36c:	40013800 	.word	0x40013800
 800d370:	40004400 	.word	0x40004400
 800d374:	40004800 	.word	0x40004800
 800d378:	40004c00 	.word	0x40004c00
 800d37c:	40005000 	.word	0x40005000
 800d380:	40011400 	.word	0x40011400
 800d384:	40021000 	.word	0x40021000
 800d388:	48000400 	.word	0x48000400

0800d38c <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800d38c:	2806      	cmp	r0, #6
 800d38e:	d80d      	bhi.n	800d3ac <GetUart+0x20>
 800d390:	0080      	lsls	r0, r0, #2
 800d392:	4b08      	ldr	r3, [pc, #32]	; (800d3b4 <GetUart+0x28>)
 800d394:	581b      	ldr	r3, [r3, r0]
 800d396:	469f      	mov	pc, r3
		case P1 : 
			return P1uart;	
	#endif
	#ifdef _P2
		case P2 :
			return P2uart;
 800d398:	4807      	ldr	r0, [pc, #28]	; (800d3b8 <GetUart+0x2c>)
 800d39a:	e00a      	b.n	800d3b2 <GetUart+0x26>
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800d39c:	4807      	ldr	r0, [pc, #28]	; (800d3bc <GetUart+0x30>)
 800d39e:	e008      	b.n	800d3b2 <GetUart+0x26>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800d3a0:	4807      	ldr	r0, [pc, #28]	; (800d3c0 <GetUart+0x34>)
 800d3a2:	e006      	b.n	800d3b2 <GetUart+0x26>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800d3a4:	4807      	ldr	r0, [pc, #28]	; (800d3c4 <GetUart+0x38>)
 800d3a6:	e004      	b.n	800d3b2 <GetUart+0x26>
	#endif
	#ifdef _P6
		case P6 :
			return P6uart;
 800d3a8:	4807      	ldr	r0, [pc, #28]	; (800d3c8 <GetUart+0x3c>)
 800d3aa:	e002      	b.n	800d3b2 <GetUart+0x26>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800d3ac:	2000      	movs	r0, #0
 800d3ae:	e000      	b.n	800d3b2 <GetUart+0x26>
			return P1uart;	
 800d3b0:	4806      	ldr	r0, [pc, #24]	; (800d3cc <GetUart+0x40>)
	}		
}
 800d3b2:	4770      	bx	lr
 800d3b4:	0801a454 	.word	0x0801a454
 800d3b8:	20006d14 	.word	0x20006d14
 800d3bc:	20006c34 	.word	0x20006c34
 800d3c0:	20006bc4 	.word	0x20006bc4
 800d3c4:	20006b54 	.word	0x20006b54
 800d3c8:	20006ae4 	.word	0x20006ae4
 800d3cc:	20006ca4 	.word	0x20006ca4

0800d3d0 <writePxMutex>:
{
 800d3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	0005      	movs	r5, r0
 800d3d6:	9100      	str	r1, [sp, #0]
 800d3d8:	0017      	movs	r7, r2
 800d3da:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800d3dc:	f7ff ffd6 	bl	800d38c <GetUart>
 800d3e0:	0004      	movs	r4, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800d3e2:	2601      	movs	r6, #1
	if (GetUart(port) != NULL) {
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	d016      	beq.n	800d416 <writePxMutex+0x46>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d3e8:	00ab      	lsls	r3, r5, #2
 800d3ea:	4a0c      	ldr	r2, [pc, #48]	; (800d41c <writePxMutex+0x4c>)
 800d3ec:	5898      	ldr	r0, [r3, r2]
 800d3ee:	9901      	ldr	r1, [sp, #4]
 800d3f0:	f000 f93a 	bl	800d668 <osSemaphoreWait>
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d10e      	bne.n	800d416 <writePxMutex+0x46>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800d3f8:	9b08      	ldr	r3, [sp, #32]
 800d3fa:	003a      	movs	r2, r7
 800d3fc:	9900      	ldr	r1, [sp, #0]
 800d3fe:	0020      	movs	r0, r4
 800d400:	f005 f938 	bl	8012674 <HAL_UART_Transmit>
 800d404:	1e06      	subs	r6, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d406:	d001      	beq.n	800d40c <writePxMutex+0x3c>
 800d408:	2803      	cmp	r0, #3
 800d40a:	d1f5      	bne.n	800d3f8 <writePxMutex+0x28>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800d40c:	00ad      	lsls	r5, r5, #2
 800d40e:	4b03      	ldr	r3, [pc, #12]	; (800d41c <writePxMutex+0x4c>)
 800d410:	58e8      	ldr	r0, [r5, r3]
 800d412:	f000 f955 	bl	800d6c0 <osSemaphoreRelease>
}
 800d416:	0030      	movs	r0, r6
 800d418:	b003      	add	sp, #12
 800d41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d41c:	20006a44 	.word	0x20006a44

0800d420 <writePxITMutex>:
{
 800d420:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d422:	b083      	sub	sp, #12
 800d424:	0004      	movs	r4, r0
 800d426:	9101      	str	r1, [sp, #4]
 800d428:	0017      	movs	r7, r2
 800d42a:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {
 800d42c:	f7ff ffae 	bl	800d38c <GetUart>
 800d430:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800d432:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {
 800d434:	2800      	cmp	r0, #0
 800d436:	d008      	beq.n	800d44a <writePxITMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d438:	00a4      	lsls	r4, r4, #2
 800d43a:	4b09      	ldr	r3, [pc, #36]	; (800d460 <writePxITMutex+0x40>)
 800d43c:	58e0      	ldr	r0, [r4, r3]
 800d43e:	0029      	movs	r1, r5
 800d440:	f000 f912 	bl	800d668 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR;
 800d444:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d446:	2800      	cmp	r0, #0
 800d448:	d002      	beq.n	800d450 <writePxITMutex+0x30>
}
 800d44a:	0018      	movs	r0, r3
 800d44c:	b003      	add	sp, #12
 800d44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800d450:	003a      	movs	r2, r7
 800d452:	9901      	ldr	r1, [sp, #4]
 800d454:	0030      	movs	r0, r6
 800d456:	f004 fd77 	bl	8011f48 <HAL_UART_Transmit_IT>
 800d45a:	0003      	movs	r3, r0
 800d45c:	e7f5      	b.n	800d44a <writePxITMutex+0x2a>
 800d45e:	46c0      	nop			; (mov r8, r8)
 800d460:	20006a44 	.word	0x20006a44

0800d464 <writePxDMAMutex>:
{
 800d464:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d466:	b083      	sub	sp, #12
 800d468:	0004      	movs	r4, r0
 800d46a:	000f      	movs	r7, r1
 800d46c:	9201      	str	r2, [sp, #4]
 800d46e:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800d470:	f7ff ff8c 	bl	800d38c <GetUart>
 800d474:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d476:	2301      	movs	r3, #1
	if (hUart != NULL) {	
 800d478:	2800      	cmp	r0, #0
 800d47a:	d008      	beq.n	800d48e <writePxDMAMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d47c:	00a4      	lsls	r4, r4, #2
 800d47e:	4b0a      	ldr	r3, [pc, #40]	; (800d4a8 <writePxDMAMutex+0x44>)
 800d480:	58e0      	ldr	r0, [r4, r3]
 800d482:	0031      	movs	r1, r6
 800d484:	f000 f8f0 	bl	800d668 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d488:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d48a:	2800      	cmp	r0, #0
 800d48c:	d002      	beq.n	800d494 <writePxDMAMutex+0x30>
}
 800d48e:	0018      	movs	r0, r3
 800d490:	b003      	add	sp, #12
 800d492:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800d494:	0028      	movs	r0, r5
 800d496:	f7ff f94f 	bl	800c738 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800d49a:	9a01      	ldr	r2, [sp, #4]
 800d49c:	0039      	movs	r1, r7
 800d49e:	0028      	movs	r0, r5
 800d4a0:	f004 fdfe 	bl	80120a0 <HAL_UART_Transmit_DMA>
 800d4a4:	0003      	movs	r3, r0
 800d4a6:	e7f2      	b.n	800d48e <writePxDMAMutex+0x2a>
 800d4a8:	20006a44 	.word	0x20006a44

0800d4ac <UpdateBaudrate>:
{
 800d4ac:	b510      	push	{r4, lr}
 800d4ae:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800d4b0:	f7ff ff6c 	bl	800d38c <GetUart>
	huart->Init.BaudRate = baudrate;
 800d4b4:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800d4b6:	f005 f983 	bl	80127c0 <HAL_UART_Init>
}
 800d4ba:	2000      	movs	r0, #0
 800d4bc:	bd10      	pop	{r4, pc}
	...

0800d4c0 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800d4c0:	b570      	push	{r4, r5, r6, lr}
 800d4c2:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800d4c4:	d003      	beq.n	800d4ce <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800d4c6:	2901      	cmp	r1, #1
 800d4c8:	d002      	beq.n	800d4d0 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800d4ca:	2900      	cmp	r1, #0
 800d4cc:	d016      	beq.n	800d4fc <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800d4ce:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d4d0:	f7fe f8d8 	bl	800b684 <GetPort>
 800d4d4:	4b14      	ldr	r3, [pc, #80]	; (800d528 <SwapUartPins+0x68>)
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	4d14      	ldr	r5, [pc, #80]	; (800d52c <SwapUartPins+0x6c>)
 800d4dc:	005b      	lsls	r3, r3, #1
 800d4de:	3801      	subs	r0, #1
 800d4e0:	2180      	movs	r1, #128	; 0x80
 800d4e2:	0209      	lsls	r1, r1, #8
 800d4e4:	000a      	movs	r2, r1
 800d4e6:	4102      	asrs	r2, r0
 800d4e8:	5b58      	ldrh	r0, [r3, r5]
 800d4ea:	4302      	orrs	r2, r0
 800d4ec:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d4ee:	2308      	movs	r3, #8
 800d4f0:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d4f2:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800d4f4:	0020      	movs	r0, r4
 800d4f6:	f005 f963 	bl	80127c0 <HAL_UART_Init>
 800d4fa:	e7e8      	b.n	800d4ce <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d4fc:	f7fe f8c2 	bl	800b684 <GetPort>
 800d500:	4b09      	ldr	r3, [pc, #36]	; (800d528 <SwapUartPins+0x68>)
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	3b01      	subs	r3, #1
 800d506:	4d09      	ldr	r5, [pc, #36]	; (800d52c <SwapUartPins+0x6c>)
 800d508:	005b      	lsls	r3, r3, #1
 800d50a:	3801      	subs	r0, #1
 800d50c:	2180      	movs	r1, #128	; 0x80
 800d50e:	0209      	lsls	r1, r1, #8
 800d510:	4101      	asrs	r1, r0
 800d512:	5b5a      	ldrh	r2, [r3, r5]
 800d514:	438a      	bics	r2, r1
 800d516:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d518:	2308      	movs	r3, #8
 800d51a:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800d51c:	2300      	movs	r3, #0
 800d51e:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800d520:	0020      	movs	r0, r4
 800d522:	f005 f94d 	bl	80127c0 <HAL_UART_Init>
}
 800d526:	e7d2      	b.n	800d4ce <SwapUartPins+0xe>
 800d528:	20001076 	.word	0x20001076
 800d52c:	20006e40 	.word	0x20006e40

0800d530 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d530:	4816      	ldr	r0, [pc, #88]	; (800d58c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800d532:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d534:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d536:	e003      	b.n	800d540 <LoopCopyDataInit>

0800d538 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d538:	4b15      	ldr	r3, [pc, #84]	; (800d590 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800d53a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d53c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d53e:	3104      	adds	r1, #4

0800d540 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d540:	4814      	ldr	r0, [pc, #80]	; (800d594 <LoopForever+0xc>)
  ldr r3, =_edata
 800d542:	4b15      	ldr	r3, [pc, #84]	; (800d598 <LoopForever+0x10>)
  adds r2, r0, r1
 800d544:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d546:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d548:	d3f6      	bcc.n	800d538 <CopyDataInit>
  ldr r2, =_sbss
 800d54a:	4a14      	ldr	r2, [pc, #80]	; (800d59c <LoopForever+0x14>)
  b LoopFillZerobss
 800d54c:	e002      	b.n	800d554 <LoopFillZerobss>

0800d54e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d54e:	2300      	movs	r3, #0
  str  r3, [r2]
 800d550:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d552:	3204      	adds	r2, #4

0800d554 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800d554:	4b12      	ldr	r3, [pc, #72]	; (800d5a0 <LoopForever+0x18>)
  cmp r2, r3
 800d556:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d558:	d3f9      	bcc.n	800d54e <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d55a:	4812      	ldr	r0, [pc, #72]	; (800d5a4 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800d55c:	4912      	ldr	r1, [pc, #72]	; (800d5a8 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800d55e:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800d560:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800d562:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800d564:	d005      	beq.n	800d572 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d566:	f000 f82b 	bl	800d5c0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d56a:	f005 fa95 	bl	8012a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d56e:	f005 fa7c 	bl	8012a6a <main>

0800d572 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d572:	480e      	ldr	r0, [pc, #56]	; (800d5ac <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d574:	490e      	ldr	r1, [pc, #56]	; (800d5b0 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d576:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d578:	480e      	ldr	r0, [pc, #56]	; (800d5b4 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800d57a:	490d      	ldr	r1, [pc, #52]	; (800d5b0 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d57c:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d57e:	480e      	ldr	r0, [pc, #56]	; (800d5b8 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800d580:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800d582:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800d584:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800d586:	4700      	bx	r0

0800d588 <LoopForever>:


LoopForever:
    b LoopForever
 800d588:	e7fe      	b.n	800d588 <LoopForever>
 800d58a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800d58c:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800d590:	0801a910 	.word	0x0801a910
  ldr r0, =_sdata
 800d594:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800d598:	20000a58 	.word	0x20000a58
  ldr r2, =_sbss
 800d59c:	20000a58 	.word	0x20000a58
  ldr r3, = _ebss
 800d5a0:	20006ee8 	.word	0x20006ee8
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d5a4:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800d5a8:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d5ac:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d5b0:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d5b4:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d5b8:	1fffd800 	.word	0x1fffd800

0800d5bc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d5bc:	e7fe      	b.n	800d5bc <ADC1_COMP_IRQHandler>
	...

0800d5c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d5c0:	4b11      	ldr	r3, [pc, #68]	; (800d608 <SystemInit+0x48>)
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	2101      	movs	r1, #1
 800d5c6:	430a      	orrs	r2, r1
 800d5c8:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d5ca:	685a      	ldr	r2, [r3, #4]
 800d5cc:	480f      	ldr	r0, [pc, #60]	; (800d60c <SystemInit+0x4c>)
 800d5ce:	4002      	ands	r2, r0
 800d5d0:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d5d2:	681a      	ldr	r2, [r3, #0]
 800d5d4:	480e      	ldr	r0, [pc, #56]	; (800d610 <SystemInit+0x50>)
 800d5d6:	4002      	ands	r2, r0
 800d5d8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	480d      	ldr	r0, [pc, #52]	; (800d614 <SystemInit+0x54>)
 800d5de:	4002      	ands	r2, r0
 800d5e0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d5e2:	685a      	ldr	r2, [r3, #4]
 800d5e4:	480c      	ldr	r0, [pc, #48]	; (800d618 <SystemInit+0x58>)
 800d5e6:	4002      	ands	r2, r0
 800d5e8:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ec:	200f      	movs	r0, #15
 800d5ee:	4382      	bics	r2, r0
 800d5f0:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800d5f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d5f4:	4809      	ldr	r0, [pc, #36]	; (800d61c <SystemInit+0x5c>)
 800d5f6:	4002      	ands	r2, r0
 800d5f8:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800d5fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5fc:	438a      	bics	r2, r1
 800d5fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d600:	2200      	movs	r2, #0
 800d602:	609a      	str	r2, [r3, #8]

}
 800d604:	4770      	bx	lr
 800d606:	46c0      	nop			; (mov r8, r8)
 800d608:	40021000 	.word	0x40021000
 800d60c:	08ffb80c 	.word	0x08ffb80c
 800d610:	fef6ffff 	.word	0xfef6ffff
 800d614:	fffbffff 	.word	0xfffbffff
 800d618:	ffc0ffff 	.word	0xffc0ffff
 800d61c:	fff0feac 	.word	0xfff0feac

0800d620 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d620:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800d622:	f000 ff55 	bl	800e4d0 <vTaskStartScheduler>
  
  return osOK;
}
 800d626:	2000      	movs	r0, #0
 800d628:	bd10      	pop	{r4, pc}

0800d62a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d62a:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d62c:	2800      	cmp	r0, #0
 800d62e:	d100      	bne.n	800d632 <osDelay+0x8>
 800d630:	3001      	adds	r0, #1
 800d632:	f001 f889 	bl	800e748 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d636:	2000      	movs	r0, #0
 800d638:	bd10      	pop	{r4, pc}

0800d63a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800d63a:	b510      	push	{r4, lr}
 800d63c:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800d63e:	2901      	cmp	r1, #1
 800d640:	d005      	beq.n	800d64e <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800d642:	2100      	movs	r1, #0
 800d644:	f000 faf6 	bl	800dc34 <xQueueCreateCountingSemaphore>
 800d648:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800d64a:	0020      	movs	r0, r4
 800d64c:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800d64e:	2203      	movs	r2, #3
 800d650:	2100      	movs	r1, #0
 800d652:	f000 fac8 	bl	800dbe6 <xQueueGenericCreate>
 800d656:	1e04      	subs	r4, r0, #0
 800d658:	d0f7      	beq.n	800d64a <osSemaphoreCreate+0x10>
 800d65a:	2300      	movs	r3, #0
 800d65c:	2200      	movs	r2, #0
 800d65e:	2100      	movs	r1, #0
 800d660:	f000 fafc 	bl	800dc5c <xQueueGenericSend>
 800d664:	e7f1      	b.n	800d64a <osSemaphoreCreate+0x10>
	...

0800d668 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d668:	b500      	push	{lr}
 800d66a:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d66c:	2300      	movs	r3, #0
 800d66e:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800d670:	2800      	cmp	r0, #0
 800d672:	d021      	beq.n	800d6b8 <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d674:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d010      	beq.n	800d69e <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d67c:	aa01      	add	r2, sp, #4
 800d67e:	2100      	movs	r1, #0
 800d680:	f000 fcae 	bl	800dfe0 <xQueueReceiveFromISR>
 800d684:	0003      	movs	r3, r0
      return osErrorOS;
 800d686:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d113      	bne.n	800d6b4 <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800d68c:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800d68e:	9b01      	ldr	r3, [sp, #4]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d00f      	beq.n	800d6b4 <osSemaphoreWait+0x4c>
 800d694:	4b09      	ldr	r3, [pc, #36]	; (800d6bc <osSemaphoreWait+0x54>)
 800d696:	2280      	movs	r2, #128	; 0x80
 800d698:	0552      	lsls	r2, r2, #21
 800d69a:	601a      	str	r2, [r3, #0]
 800d69c:	e00a      	b.n	800d6b4 <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d69e:	2300      	movs	r3, #0
 800d6a0:	000a      	movs	r2, r1
 800d6a2:	2100      	movs	r1, #0
 800d6a4:	f000 fbf3 	bl	800de8e <xQueueGenericReceive>
  return osOK;
 800d6a8:	3801      	subs	r0, #1
 800d6aa:	1e43      	subs	r3, r0, #1
 800d6ac:	4198      	sbcs	r0, r3
 800d6ae:	4240      	negs	r0, r0
 800d6b0:	23ff      	movs	r3, #255	; 0xff
 800d6b2:	4018      	ands	r0, r3
}
 800d6b4:	b003      	add	sp, #12
 800d6b6:	bd00      	pop	{pc}
    return osErrorParameter;
 800d6b8:	2080      	movs	r0, #128	; 0x80
 800d6ba:	e7fb      	b.n	800d6b4 <osSemaphoreWait+0x4c>
 800d6bc:	e000ed04 	.word	0xe000ed04

0800d6c0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d6c0:	b500      	push	{lr}
 800d6c2:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	9301      	str	r3, [sp, #4]
 800d6c8:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d00f      	beq.n	800d6f0 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d6d0:	a901      	add	r1, sp, #4
 800d6d2:	f000 fba1 	bl	800de18 <xQueueGiveFromISR>
 800d6d6:	0003      	movs	r3, r0
      return osErrorOS;
 800d6d8:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	d114      	bne.n	800d708 <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800d6de:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d6e0:	9b01      	ldr	r3, [sp, #4]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d010      	beq.n	800d708 <osSemaphoreRelease+0x48>
 800d6e6:	4b09      	ldr	r3, [pc, #36]	; (800d70c <osSemaphoreRelease+0x4c>)
 800d6e8:	2280      	movs	r2, #128	; 0x80
 800d6ea:	0552      	lsls	r2, r2, #21
 800d6ec:	601a      	str	r2, [r3, #0]
 800d6ee:	e00b      	b.n	800d708 <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	2100      	movs	r1, #0
 800d6f6:	f000 fab1 	bl	800dc5c <xQueueGenericSend>
      result = osErrorOS;
 800d6fa:	3801      	subs	r0, #1
 800d6fc:	4243      	negs	r3, r0
 800d6fe:	4158      	adcs	r0, r3
 800d700:	4240      	negs	r0, r0
 800d702:	23fe      	movs	r3, #254	; 0xfe
 800d704:	4398      	bics	r0, r3
 800d706:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800d708:	b003      	add	sp, #12
 800d70a:	bd00      	pop	{pc}
 800d70c:	e000ed04 	.word	0xe000ed04

0800d710 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800d710:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800d712:	f001 fa0f 	bl	800eb34 <xTaskGetSchedulerState>
 800d716:	2801      	cmp	r0, #1
 800d718:	d001      	beq.n	800d71e <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800d71a:	f001 fe85 	bl	800f428 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800d71e:	bd10      	pop	{r4, pc}

0800d720 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800d720:	b570      	push	{r4, r5, r6, lr}
 800d722:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800d724:	d101      	bne.n	800d72a <FreeRTOS_CLIRegisterCommand+0xa>
 800d726:	b672      	cpsid	i
 800d728:	e7fe      	b.n	800d728 <FreeRTOS_CLIRegisterCommand+0x8>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800d72a:	2008      	movs	r0, #8
 800d72c:	f001 feb8 	bl	800f4a0 <pvPortMalloc>
 800d730:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800d732:	d101      	bne.n	800d738 <FreeRTOS_CLIRegisterCommand+0x18>
 800d734:	b672      	cpsid	i
 800d736:	e7fe      	b.n	800d736 <FreeRTOS_CLIRegisterCommand+0x16>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800d738:	f001 fe30 	bl	800f39c <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800d73c:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800d73e:	2300      	movs	r3, #0
 800d740:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800d742:	4b04      	ldr	r3, [pc, #16]	; (800d754 <FreeRTOS_CLIRegisterCommand+0x34>)
 800d744:	681a      	ldr	r2, [r3, #0]
 800d746:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800d748:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800d74a:	f001 fe33 	bl	800f3b4 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800d74e:	2001      	movs	r0, #1
 800d750:	bd70      	pop	{r4, r5, r6, pc}
 800d752:	46c0      	nop			; (mov r8, r8)
 800d754:	20000094 	.word	0x20000094

0800d758 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800d758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d75a:	46d6      	mov	lr, sl
 800d75c:	b500      	push	{lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	9001      	str	r0, [sp, #4]
 800d762:	9102      	str	r1, [sp, #8]
 800d764:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800d766:	4b37      	ldr	r3, [pc, #220]	; (800d844 <FreeRTOS_CLIProcessCommand+0xec>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00e      	beq.n	800d78c <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	689b      	ldr	r3, [r3, #8]
 800d772:	9a01      	ldr	r2, [sp, #4]
 800d774:	9903      	ldr	r1, [sp, #12]
 800d776:	9802      	ldr	r0, [sp, #8]
 800d778:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800d77a:	2800      	cmp	r0, #0
 800d77c:	d102      	bne.n	800d784 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800d77e:	4b31      	ldr	r3, [pc, #196]	; (800d844 <FreeRTOS_CLIProcessCommand+0xec>)
 800d780:	2200      	movs	r2, #0
 800d782:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800d784:	b004      	add	sp, #16
 800d786:	bc04      	pop	{r2}
 800d788:	4692      	mov	sl, r2
 800d78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d78c:	4d2e      	ldr	r5, [pc, #184]	; (800d848 <FreeRTOS_CLIProcessCommand+0xf0>)
 800d78e:	4a2d      	ldr	r2, [pc, #180]	; (800d844 <FreeRTOS_CLIProcessCommand+0xec>)
 800d790:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d792:	3320      	adds	r3, #32
 800d794:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d796:	0017      	movs	r7, r2
 800d798:	e00a      	b.n	800d7b0 <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800d79a:	0002      	movs	r2, r0
 800d79c:	0021      	movs	r1, r4
 800d79e:	9801      	ldr	r0, [sp, #4]
 800d7a0:	f005 fe44 	bl	801342c <strncmp>
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	d00e      	beq.n	800d7c6 <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800d7a8:	686d      	ldr	r5, [r5, #4]
 800d7aa:	603d      	str	r5, [r7, #0]
 800d7ac:	2d00      	cmp	r5, #0
 800d7ae:	d012      	beq.n	800d7d6 <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800d7b0:	682e      	ldr	r6, [r5, #0]
 800d7b2:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800d7b4:	0020      	movs	r0, r4
 800d7b6:	f7f2 fcaf 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800d7ba:	9b01      	ldr	r3, [sp, #4]
 800d7bc:	5c1b      	ldrb	r3, [r3, r0]
 800d7be:	4652      	mov	r2, sl
 800d7c0:	4393      	bics	r3, r2
 800d7c2:	d1f1      	bne.n	800d7a8 <FreeRTOS_CLIProcessCommand+0x50>
 800d7c4:	e7e9      	b.n	800d79a <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800d7c6:	200c      	movs	r0, #12
 800d7c8:	5630      	ldrsb	r0, [r6, r0]
 800d7ca:	2800      	cmp	r0, #0
 800d7cc:	da0a      	bge.n	800d7e4 <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d7ce:	4b1d      	ldr	r3, [pc, #116]	; (800d844 <FreeRTOS_CLIProcessCommand+0xec>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d1cb      	bne.n	800d76e <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d7d6:	9a03      	ldr	r2, [sp, #12]
 800d7d8:	491c      	ldr	r1, [pc, #112]	; (800d84c <FreeRTOS_CLIProcessCommand+0xf4>)
 800d7da:	9802      	ldr	r0, [sp, #8]
 800d7dc:	f005 fe37 	bl	801344e <strncpy>
		xReturn = pdFALSE;
 800d7e0:	2000      	movs	r0, #0
	return xReturn;
 800d7e2:	e7cf      	b.n	800d784 <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800d7e4:	9a01      	ldr	r2, [sp, #4]
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	56d3      	ldrsb	r3, [r2, r3]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d027      	beq.n	800d83e <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800d7ee:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800d7f0:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800d7f2:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800d7f4:	2501      	movs	r5, #1
 800d7f6:	e009      	b.n	800d80c <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800d7f8:	2901      	cmp	r1, #1
 800d7fa:	d002      	beq.n	800d802 <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800d7fc:	3401      	adds	r4, #1
 800d7fe:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800d800:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800d802:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800d804:	2300      	movs	r3, #0
 800d806:	56d3      	ldrsb	r3, [r2, r3]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d003      	beq.n	800d814 <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800d80c:	2b20      	cmp	r3, #32
 800d80e:	d0f3      	beq.n	800d7f8 <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800d810:	0031      	movs	r1, r6
 800d812:	e7f6      	b.n	800d802 <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800d814:	2901      	cmp	r1, #1
 800d816:	d00f      	beq.n	800d838 <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800d818:	4b0a      	ldr	r3, [pc, #40]	; (800d844 <FreeRTOS_CLIProcessCommand+0xec>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d0da      	beq.n	800d7d6 <FreeRTOS_CLIProcessCommand+0x7e>
 800d820:	42a0      	cmp	r0, r4
 800d822:	d0a4      	beq.n	800d76e <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800d824:	9a03      	ldr	r2, [sp, #12]
 800d826:	490a      	ldr	r1, [pc, #40]	; (800d850 <FreeRTOS_CLIProcessCommand+0xf8>)
 800d828:	9802      	ldr	r0, [sp, #8]
 800d82a:	f005 fe10 	bl	801344e <strncpy>
		pxCommand = NULL;
 800d82e:	4b05      	ldr	r3, [pc, #20]	; (800d844 <FreeRTOS_CLIProcessCommand+0xec>)
 800d830:	2200      	movs	r2, #0
 800d832:	601a      	str	r2, [r3, #0]
 800d834:	2000      	movs	r0, #0
 800d836:	e7a5      	b.n	800d784 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800d838:	3c01      	subs	r4, #1
 800d83a:	b264      	sxtb	r4, r4
 800d83c:	e7ec      	b.n	800d818 <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800d83e:	2400      	movs	r4, #0
 800d840:	e7ea      	b.n	800d818 <FreeRTOS_CLIProcessCommand+0xc0>
 800d842:	46c0      	nop			; (mov r8, r8)
 800d844:	20001d50 	.word	0x20001d50
 800d848:	20000098 	.word	0x20000098
 800d84c:	0801a4c8 	.word	0x0801a4c8
 800d850:	0801a470 	.word	0x0801a470

0800d854 <FreeRTOS_CLIGetOutputBuffer>:
}
 800d854:	4800      	ldr	r0, [pc, #0]	; (800d858 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800d856:	4770      	bx	lr
 800d858:	20001ae8 	.word	0x20001ae8

0800d85c <FreeRTOS_CLIGetParameter>:
{
 800d85c:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800d85e:	2300      	movs	r3, #0
 800d860:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800d862:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800d864:	2900      	cmp	r1, #0
 800d866:	d10b      	bne.n	800d880 <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800d868:	2000      	movs	r0, #0
 800d86a:	e02a      	b.n	800d8c2 <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800d86c:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d86e:	2300      	movs	r3, #0
 800d870:	56c3      	ldrsb	r3, [r0, r3]
 800d872:	2b20      	cmp	r3, #32
 800d874:	d0fa      	beq.n	800d86c <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800d876:	2b00      	cmp	r3, #0
 800d878:	d022      	beq.n	800d8c0 <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800d87a:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800d87c:	42a1      	cmp	r1, r4
 800d87e:	d00d      	beq.n	800d89c <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d880:	2300      	movs	r3, #0
 800d882:	56c3      	ldrsb	r3, [r0, r3]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d01f      	beq.n	800d8c8 <FreeRTOS_CLIGetParameter+0x6c>
 800d888:	2b20      	cmp	r3, #32
 800d88a:	d0ef      	beq.n	800d86c <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800d88c:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d88e:	2300      	movs	r3, #0
 800d890:	56c3      	ldrsb	r3, [r0, r3]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d018      	beq.n	800d8c8 <FreeRTOS_CLIGetParameter+0x6c>
 800d896:	2b20      	cmp	r3, #32
 800d898:	d1f8      	bne.n	800d88c <FreeRTOS_CLIGetParameter+0x30>
 800d89a:	e7e7      	b.n	800d86c <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d89c:	7803      	ldrb	r3, [r0, #0]
 800d89e:	2120      	movs	r1, #32
 800d8a0:	438b      	bics	r3, r1
 800d8a2:	d00f      	beq.n	800d8c4 <FreeRTOS_CLIGetParameter+0x68>
 800d8a4:	0004      	movs	r4, r0
 800d8a6:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800d8a8:	6813      	ldr	r3, [r2, #0]
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800d8ae:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800d8b0:	7821      	ldrb	r1, [r4, #0]
 800d8b2:	43a9      	bics	r1, r5
 800d8b4:	d1f8      	bne.n	800d8a8 <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800d8b6:	1e5a      	subs	r2, r3, #1
 800d8b8:	4193      	sbcs	r3, r2
 800d8ba:	425b      	negs	r3, r3
 800d8bc:	4018      	ands	r0, r3
 800d8be:	e000      	b.n	800d8c2 <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800d8c0:	2000      	movs	r0, #0
}
 800d8c2:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800d8c4:	2000      	movs	r0, #0
 800d8c6:	e7fc      	b.n	800d8c2 <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	56c3      	ldrsb	r3, [r0, r3]
 800d8cc:	e7d3      	b.n	800d876 <FreeRTOS_CLIGetParameter+0x1a>
	...

0800d8d0 <prvHelpCommand>:
{
 800d8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	0004      	movs	r4, r0
 800d8d6:	000d      	movs	r5, r1
 800d8d8:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800d8de:	aa01      	add	r2, sp, #4
 800d8e0:	2101      	movs	r1, #1
 800d8e2:	f7ff ffbb 	bl	800d85c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800d8e6:	2800      	cmp	r0, #0
 800d8e8:	d027      	beq.n	800d93a <prvHelpCommand+0x6a>
 800d8ea:	2206      	movs	r2, #6
 800d8ec:	4930      	ldr	r1, [pc, #192]	; (800d9b0 <prvHelpCommand+0xe0>)
 800d8ee:	f005 fd9d 	bl	801342c <strncmp>
 800d8f2:	2800      	cmp	r0, #0
 800d8f4:	d149      	bne.n	800d98a <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800d8f6:	4b2f      	ldr	r3, [pc, #188]	; (800d9b4 <prvHelpCommand+0xe4>)
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	2b07      	cmp	r3, #7
 800d8fc:	d012      	beq.n	800d924 <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d8fe:	1c5f      	adds	r7, r3, #1
 800d900:	b2ff      	uxtb	r7, r7
 800d902:	4a2c      	ldr	r2, [pc, #176]	; (800d9b4 <prvHelpCommand+0xe4>)
 800d904:	7017      	strb	r7, [r2, #0]
 800d906:	009b      	lsls	r3, r3, #2
 800d908:	4a2b      	ldr	r2, [pc, #172]	; (800d9b8 <prvHelpCommand+0xe8>)
 800d90a:	5899      	ldr	r1, [r3, r2]
 800d90c:	002a      	movs	r2, r5
 800d90e:	0020      	movs	r0, r4
 800d910:	f005 fd9d 	bl	801344e <strncpy>
			xReturn = pdTRUE;
 800d914:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800d916:	2f07      	cmp	r7, #7
 800d918:	d137      	bne.n	800d98a <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800d91a:	4b26      	ldr	r3, [pc, #152]	; (800d9b4 <prvHelpCommand+0xe4>)
 800d91c:	2200      	movs	r2, #0
 800d91e:	701a      	strb	r2, [r3, #0]
 800d920:	2600      	movs	r6, #0
 800d922:	e032      	b.n	800d98a <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800d924:	4b23      	ldr	r3, [pc, #140]	; (800d9b4 <prvHelpCommand+0xe4>)
 800d926:	2201      	movs	r2, #1
 800d928:	701a      	strb	r2, [r3, #0]
 800d92a:	4b23      	ldr	r3, [pc, #140]	; (800d9b8 <prvHelpCommand+0xe8>)
 800d92c:	6819      	ldr	r1, [r3, #0]
 800d92e:	002a      	movs	r2, r5
 800d930:	0020      	movs	r0, r4
 800d932:	f005 fd8c 	bl	801344e <strncpy>
			xReturn = pdTRUE;
 800d936:	2601      	movs	r6, #1
 800d938:	e027      	b.n	800d98a <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800d93a:	4b20      	ldr	r3, [pc, #128]	; (800d9bc <prvHelpCommand+0xec>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d026      	beq.n	800d990 <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800d942:	4b1f      	ldr	r3, [pc, #124]	; (800d9c0 <prvHelpCommand+0xf0>)
 800d944:	781a      	ldrb	r2, [r3, #0]
 800d946:	4b1f      	ldr	r3, [pc, #124]	; (800d9c4 <prvHelpCommand+0xf4>)
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d927      	bls.n	800d99e <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800d94e:	002a      	movs	r2, r5
 800d950:	3a08      	subs	r2, #8
 800d952:	4b1a      	ldr	r3, [pc, #104]	; (800d9bc <prvHelpCommand+0xec>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	6859      	ldr	r1, [r3, #4]
 800d95a:	0020      	movs	r0, r4
 800d95c:	3008      	adds	r0, #8
 800d95e:	f005 fd76 	bl	801344e <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800d962:	1c60      	adds	r0, r4, #1
 800d964:	4918      	ldr	r1, [pc, #96]	; (800d9c8 <prvHelpCommand+0xf8>)
 800d966:	f005 fd59 	bl	801341c <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800d96a:	2328      	movs	r3, #40	; 0x28
 800d96c:	7023      	strb	r3, [r4, #0]
 800d96e:	3301      	adds	r3, #1
 800d970:	71a3      	strb	r3, [r4, #6]
 800d972:	3b09      	subs	r3, #9
 800d974:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800d976:	4b11      	ldr	r3, [pc, #68]	; (800d9bc <prvHelpCommand+0xec>)
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	6856      	ldr	r6, [r2, #4]
 800d97c:	601e      	str	r6, [r3, #0]
		counter++;
 800d97e:	4a10      	ldr	r2, [pc, #64]	; (800d9c0 <prvHelpCommand+0xf0>)
 800d980:	7813      	ldrb	r3, [r2, #0]
 800d982:	3301      	adds	r3, #1
 800d984:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800d986:	1e73      	subs	r3, r6, #1
 800d988:	419e      	sbcs	r6, r3
}
 800d98a:	0030      	movs	r0, r6
 800d98c:	b003      	add	sp, #12
 800d98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800d990:	4b0a      	ldr	r3, [pc, #40]	; (800d9bc <prvHelpCommand+0xec>)
 800d992:	4a0e      	ldr	r2, [pc, #56]	; (800d9cc <prvHelpCommand+0xfc>)
 800d994:	601a      	str	r2, [r3, #0]
			counter = 1;
 800d996:	4b0a      	ldr	r3, [pc, #40]	; (800d9c0 <prvHelpCommand+0xf0>)
 800d998:	2201      	movs	r2, #1
 800d99a:	701a      	strb	r2, [r3, #0]
 800d99c:	e7d1      	b.n	800d942 <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800d99e:	4b07      	ldr	r3, [pc, #28]	; (800d9bc <prvHelpCommand+0xec>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	6859      	ldr	r1, [r3, #4]
 800d9a6:	002a      	movs	r2, r5
 800d9a8:	0020      	movs	r0, r4
 800d9aa:	f005 fd50 	bl	801344e <strncpy>
 800d9ae:	e7e2      	b.n	800d976 <prvHelpCommand+0xa6>
 800d9b0:	080185b0 	.word	0x080185b0
 800d9b4:	20001d58 	.word	0x20001d58
 800d9b8:	20000054 	.word	0x20000054
 800d9bc:	20001d54 	.word	0x20001d54
 800d9c0:	20001d4c 	.word	0x20001d4c
 800d9c4:	20006948 	.word	0x20006948
 800d9c8:	08017b4a 	.word	0x08017b4a
 800d9cc:	20000098 	.word	0x20000098

0800d9d0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9d0:	0003      	movs	r3, r0
 800d9d2:	3308      	adds	r3, #8
 800d9d4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	4252      	negs	r2, r2
 800d9da:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9dc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9de:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d9e4:	4770      	bx	lr

0800d9e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d9ea:	4770      	bx	lr

0800d9ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d9ec:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d9ee:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d9f0:	689a      	ldr	r2, [r3, #8]
 800d9f2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d9f4:	689a      	ldr	r2, [r3, #8]
 800d9f6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d9f8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d9fa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800d9fc:	6803      	ldr	r3, [r0, #0]
 800d9fe:	3301      	adds	r3, #1
 800da00:	6003      	str	r3, [r0, #0]
}
 800da02:	4770      	bx	lr

0800da04 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800da04:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800da06:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da08:	0002      	movs	r2, r0
 800da0a:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800da0c:	1c63      	adds	r3, r4, #1
 800da0e:	d102      	bne.n	800da16 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800da10:	6902      	ldr	r2, [r0, #16]
 800da12:	e004      	b.n	800da1e <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da14:	001a      	movs	r2, r3
 800da16:	6853      	ldr	r3, [r2, #4]
 800da18:	681d      	ldr	r5, [r3, #0]
 800da1a:	42a5      	cmp	r5, r4
 800da1c:	d9fa      	bls.n	800da14 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800da1e:	6853      	ldr	r3, [r2, #4]
 800da20:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800da22:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800da24:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800da26:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800da28:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800da2a:	6803      	ldr	r3, [r0, #0]
 800da2c:	3301      	adds	r3, #1
 800da2e:	6003      	str	r3, [r0, #0]
}
 800da30:	bd30      	pop	{r4, r5, pc}

0800da32 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800da32:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800da34:	6842      	ldr	r2, [r0, #4]
 800da36:	6881      	ldr	r1, [r0, #8]
 800da38:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800da3a:	6882      	ldr	r2, [r0, #8]
 800da3c:	6841      	ldr	r1, [r0, #4]
 800da3e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800da40:	685a      	ldr	r2, [r3, #4]
 800da42:	4282      	cmp	r2, r0
 800da44:	d005      	beq.n	800da52 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800da46:	2200      	movs	r2, #0
 800da48:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	1e50      	subs	r0, r2, #1
 800da4e:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800da50:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800da52:	6882      	ldr	r2, [r0, #8]
 800da54:	605a      	str	r2, [r3, #4]
 800da56:	e7f6      	b.n	800da46 <uxListRemove+0x14>

0800da58 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800da58:	b570      	push	{r4, r5, r6, lr}
 800da5a:	0004      	movs	r4, r0
 800da5c:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800da5e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800da60:	2a00      	cmp	r2, #0
 800da62:	d10d      	bne.n	800da80 <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800da64:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da66:	6823      	ldr	r3, [r4, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d003      	beq.n	800da74 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800da6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800da6e:	3301      	adds	r3, #1
 800da70:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800da72:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800da74:	6860      	ldr	r0, [r4, #4]
 800da76:	f001 f8ab 	bl	800ebd0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800da7a:	2300      	movs	r3, #0
 800da7c:	6063      	str	r3, [r4, #4]
 800da7e:	e7f5      	b.n	800da6c <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800da80:	2d00      	cmp	r5, #0
 800da82:	d10e      	bne.n	800daa2 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800da84:	6880      	ldr	r0, [r0, #8]
 800da86:	f005 fa8a 	bl	8012f9e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800da8a:	68a3      	ldr	r3, [r4, #8]
 800da8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800da8e:	4694      	mov	ip, r2
 800da90:	4463      	add	r3, ip
 800da92:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800da94:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da96:	6862      	ldr	r2, [r4, #4]
 800da98:	4293      	cmp	r3, r2
 800da9a:	d3e7      	bcc.n	800da6c <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800da9c:	6823      	ldr	r3, [r4, #0]
 800da9e:	60a3      	str	r3, [r4, #8]
 800daa0:	e7e4      	b.n	800da6c <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800daa2:	68c0      	ldr	r0, [r0, #12]
 800daa4:	f005 fa7b 	bl	8012f9e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800daa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800daaa:	425a      	negs	r2, r3
 800daac:	68e3      	ldr	r3, [r4, #12]
 800daae:	189b      	adds	r3, r3, r2
 800dab0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dab2:	6821      	ldr	r1, [r4, #0]
 800dab4:	428b      	cmp	r3, r1
 800dab6:	d203      	bcs.n	800dac0 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800dab8:	6863      	ldr	r3, [r4, #4]
 800daba:	469c      	mov	ip, r3
 800dabc:	4462      	add	r2, ip
 800dabe:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800dac0:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800dac2:	2d02      	cmp	r5, #2
 800dac4:	d1d2      	bne.n	800da6c <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dac6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d0cf      	beq.n	800da6c <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800dacc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dace:	3b01      	subs	r3, #1
 800dad0:	63a3      	str	r3, [r4, #56]	; 0x38
 800dad2:	e7cb      	b.n	800da6c <prvCopyDataToQueue+0x14>

0800dad4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dad4:	b510      	push	{r4, lr}
 800dad6:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dad8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800dada:	2a00      	cmp	r2, #0
 800dadc:	d00b      	beq.n	800daf6 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800dade:	68c3      	ldr	r3, [r0, #12]
 800dae0:	189b      	adds	r3, r3, r2
 800dae2:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dae4:	6841      	ldr	r1, [r0, #4]
 800dae6:	428b      	cmp	r3, r1
 800dae8:	d301      	bcc.n	800daee <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800daea:	6803      	ldr	r3, [r0, #0]
 800daec:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800daee:	68c1      	ldr	r1, [r0, #12]
 800daf0:	0020      	movs	r0, r4
 800daf2:	f005 fa54 	bl	8012f9e <memcpy>
	}
}
 800daf6:	bd10      	pop	{r4, pc}

0800daf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800daf8:	b570      	push	{r4, r5, r6, lr}
 800dafa:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dafc:	f001 fc4e 	bl	800f39c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800db00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800db02:	2b00      	cmp	r3, #0
 800db04:	dd04      	ble.n	800db10 <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db06:	0025      	movs	r5, r4
 800db08:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d11f      	bne.n	800db50 <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800db10:	2301      	movs	r3, #1
 800db12:	425b      	negs	r3, r3
 800db14:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800db16:	f001 fc4d 	bl	800f3b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800db1a:	f001 fc3f 	bl	800f39c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800db1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db20:	2b00      	cmp	r3, #0
 800db22:	dd04      	ble.n	800db2e <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db24:	0025      	movs	r5, r4
 800db26:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db28:	6923      	ldr	r3, [r4, #16]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d121      	bne.n	800db72 <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800db2e:	2301      	movs	r3, #1
 800db30:	425b      	negs	r3, r3
 800db32:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800db34:	f001 fc3e 	bl	800f3b4 <vPortExitCritical>
}
 800db38:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800db3a:	f000 fff5 	bl	800eb28 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800db3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800db40:	3b01      	subs	r3, #1
 800db42:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800db44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800db46:	2b00      	cmp	r3, #0
 800db48:	dde2      	ble.n	800db10 <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d0df      	beq.n	800db10 <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db50:	0028      	movs	r0, r5
 800db52:	f000 ff67 	bl	800ea24 <xTaskRemoveFromEventList>
 800db56:	2800      	cmp	r0, #0
 800db58:	d0f1      	beq.n	800db3e <prvUnlockQueue+0x46>
 800db5a:	e7ee      	b.n	800db3a <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800db5c:	f000 ffe4 	bl	800eb28 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800db60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db62:	3b01      	subs	r3, #1
 800db64:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800db66:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800db68:	2b00      	cmp	r3, #0
 800db6a:	dde0      	ble.n	800db2e <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db6c:	6923      	ldr	r3, [r4, #16]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d0dd      	beq.n	800db2e <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db72:	0028      	movs	r0, r5
 800db74:	f000 ff56 	bl	800ea24 <xTaskRemoveFromEventList>
 800db78:	2800      	cmp	r0, #0
 800db7a:	d0f1      	beq.n	800db60 <prvUnlockQueue+0x68>
 800db7c:	e7ee      	b.n	800db5c <prvUnlockQueue+0x64>

0800db7e <xQueueGenericReset>:
{
 800db7e:	b570      	push	{r4, r5, r6, lr}
 800db80:	0004      	movs	r4, r0
 800db82:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800db84:	2800      	cmp	r0, #0
 800db86:	d101      	bne.n	800db8c <xQueueGenericReset+0xe>
 800db88:	b672      	cpsid	i
 800db8a:	e7fe      	b.n	800db8a <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 800db8c:	f001 fc06 	bl	800f39c <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800db90:	6822      	ldr	r2, [r4, #0]
 800db92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800db94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800db96:	434b      	muls	r3, r1
 800db98:	18d0      	adds	r0, r2, r3
 800db9a:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800db9c:	2000      	movs	r0, #0
 800db9e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dba0:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800dba2:	1a5b      	subs	r3, r3, r1
 800dba4:	18d3      	adds	r3, r2, r3
 800dba6:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	425b      	negs	r3, r3
 800dbac:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800dbae:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800dbb0:	2d00      	cmp	r5, #0
 800dbb2:	d10f      	bne.n	800dbd4 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbb4:	6923      	ldr	r3, [r4, #16]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d103      	bne.n	800dbc2 <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800dbba:	f001 fbfb 	bl	800f3b4 <vPortExitCritical>
}
 800dbbe:	2001      	movs	r0, #1
 800dbc0:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800dbc2:	0020      	movs	r0, r4
 800dbc4:	3010      	adds	r0, #16
 800dbc6:	f000 ff2d 	bl	800ea24 <xTaskRemoveFromEventList>
 800dbca:	2801      	cmp	r0, #1
 800dbcc:	d1f5      	bne.n	800dbba <xQueueGenericReset+0x3c>
					queueYIELD_IF_USING_PREEMPTION();
 800dbce:	f001 fbd9 	bl	800f384 <vPortYield>
 800dbd2:	e7f2      	b.n	800dbba <xQueueGenericReset+0x3c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dbd4:	0020      	movs	r0, r4
 800dbd6:	3010      	adds	r0, #16
 800dbd8:	f7ff fefa 	bl	800d9d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dbdc:	0020      	movs	r0, r4
 800dbde:	3024      	adds	r0, #36	; 0x24
 800dbe0:	f7ff fef6 	bl	800d9d0 <vListInitialise>
 800dbe4:	e7e9      	b.n	800dbba <xQueueGenericReset+0x3c>

0800dbe6 <xQueueGenericCreate>:
{
 800dbe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbe8:	0005      	movs	r5, r0
 800dbea:	000e      	movs	r6, r1
 800dbec:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	d101      	bne.n	800dbf6 <xQueueGenericCreate+0x10>
 800dbf2:	b672      	cpsid	i
 800dbf4:	e7fe      	b.n	800dbf4 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800dbf6:	2900      	cmp	r1, #0
 800dbf8:	d00c      	beq.n	800dc14 <xQueueGenericCreate+0x2e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbfa:	0008      	movs	r0, r1
 800dbfc:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dbfe:	3055      	adds	r0, #85	; 0x55
 800dc00:	f001 fc4e 	bl	800f4a0 <pvPortMalloc>
 800dc04:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800dc06:	d101      	bne.n	800dc0c <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800dc08:	b672      	cpsid	i
 800dc0a:	e7fe      	b.n	800dc0a <xQueueGenericCreate+0x24>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800dc0c:	0003      	movs	r3, r0
 800dc0e:	3354      	adds	r3, #84	; 0x54
 800dc10:	6003      	str	r3, [r0, #0]
 800dc12:	e005      	b.n	800dc20 <xQueueGenericCreate+0x3a>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dc14:	2054      	movs	r0, #84	; 0x54
 800dc16:	f001 fc43 	bl	800f4a0 <pvPortMalloc>
 800dc1a:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800dc1c:	d0f4      	beq.n	800dc08 <xQueueGenericCreate+0x22>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dc1e:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800dc20:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800dc22:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dc24:	2101      	movs	r1, #1
 800dc26:	0020      	movs	r0, r4
 800dc28:	f7ff ffa9 	bl	800db7e <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800dc2c:	2350      	movs	r3, #80	; 0x50
 800dc2e:	54e7      	strb	r7, [r4, r3]
}
 800dc30:	0020      	movs	r0, r4
 800dc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dc34 <xQueueCreateCountingSemaphore>:
	{
 800dc34:	b510      	push	{r4, lr}
 800dc36:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	d101      	bne.n	800dc40 <xQueueCreateCountingSemaphore+0xc>
 800dc3c:	b672      	cpsid	i
 800dc3e:	e7fe      	b.n	800dc3e <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dc40:	4288      	cmp	r0, r1
 800dc42:	d201      	bcs.n	800dc48 <xQueueCreateCountingSemaphore+0x14>
 800dc44:	b672      	cpsid	i
 800dc46:	e7fe      	b.n	800dc46 <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dc48:	2202      	movs	r2, #2
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	f7ff ffcb 	bl	800dbe6 <xQueueGenericCreate>
		if( xHandle != NULL )
 800dc50:	2800      	cmp	r0, #0
 800dc52:	d001      	beq.n	800dc58 <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dc54:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800dc56:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800dc58:	b672      	cpsid	i
 800dc5a:	e7fe      	b.n	800dc5a <xQueueCreateCountingSemaphore+0x26>

0800dc5c <xQueueGenericSend>:
{
 800dc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc5e:	46ce      	mov	lr, r9
 800dc60:	b500      	push	{lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	0004      	movs	r4, r0
 800dc66:	9100      	str	r1, [sp, #0]
 800dc68:	9201      	str	r2, [sp, #4]
 800dc6a:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	d007      	beq.n	800dc80 <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc70:	9b00      	ldr	r3, [sp, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d106      	bne.n	800dc84 <xQueueGenericSend+0x28>
 800dc76:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d003      	beq.n	800dc84 <xQueueGenericSend+0x28>
 800dc7c:	b672      	cpsid	i
 800dc7e:	e7fe      	b.n	800dc7e <xQueueGenericSend+0x22>
	configASSERT( pxQueue );
 800dc80:	b672      	cpsid	i
 800dc82:	e7fe      	b.n	800dc82 <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc84:	2d02      	cmp	r5, #2
 800dc86:	d104      	bne.n	800dc92 <xQueueGenericSend+0x36>
 800dc88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d001      	beq.n	800dc92 <xQueueGenericSend+0x36>
 800dc8e:	b672      	cpsid	i
 800dc90:	e7fe      	b.n	800dc90 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc92:	f000 ff4f 	bl	800eb34 <xTaskGetSchedulerState>
 800dc96:	2800      	cmp	r0, #0
 800dc98:	d104      	bne.n	800dca4 <xQueueGenericSend+0x48>
 800dc9a:	9b01      	ldr	r3, [sp, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d004      	beq.n	800dcaa <xQueueGenericSend+0x4e>
 800dca0:	b672      	cpsid	i
 800dca2:	e7fe      	b.n	800dca2 <xQueueGenericSend+0x46>
 800dca4:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800dca6:	2700      	movs	r7, #0
 800dca8:	e02f      	b.n	800dd0a <xQueueGenericSend+0xae>
 800dcaa:	2600      	movs	r6, #0
 800dcac:	e7fb      	b.n	800dca6 <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dcae:	002a      	movs	r2, r5
 800dcb0:	9900      	ldr	r1, [sp, #0]
 800dcb2:	0020      	movs	r0, r4
 800dcb4:	f7ff fed0 	bl	800da58 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d104      	bne.n	800dcc8 <xQueueGenericSend+0x6c>
					else if( xYieldRequired != pdFALSE )
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	d00a      	beq.n	800dcd8 <xQueueGenericSend+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 800dcc2:	f001 fb5f 	bl	800f384 <vPortYield>
 800dcc6:	e007      	b.n	800dcd8 <xQueueGenericSend+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800dcc8:	0020      	movs	r0, r4
 800dcca:	3024      	adds	r0, #36	; 0x24
 800dccc:	f000 feaa 	bl	800ea24 <xTaskRemoveFromEventList>
 800dcd0:	2801      	cmp	r0, #1
 800dcd2:	d101      	bne.n	800dcd8 <xQueueGenericSend+0x7c>
							queueYIELD_IF_USING_PREEMPTION();
 800dcd4:	f001 fb56 	bl	800f384 <vPortYield>
				taskEXIT_CRITICAL();
 800dcd8:	f001 fb6c 	bl	800f3b4 <vPortExitCritical>
				return pdPASS;
 800dcdc:	2001      	movs	r0, #1
}
 800dcde:	b004      	add	sp, #16
 800dce0:	bc04      	pop	{r2}
 800dce2:	4691      	mov	r9, r2
 800dce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800dce6:	f001 fb65 	bl	800f3b4 <vPortExitCritical>
					return errQUEUE_FULL;
 800dcea:	2000      	movs	r0, #0
 800dcec:	e7f7      	b.n	800dcde <xQueueGenericSend+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 800dcee:	a802      	add	r0, sp, #8
 800dcf0:	f000 fed8 	bl	800eaa4 <vTaskSetTimeOutState>
 800dcf4:	e016      	b.n	800dd24 <xQueueGenericSend+0xc8>
		prvLockQueue( pxQueue );
 800dcf6:	6467      	str	r7, [r4, #68]	; 0x44
 800dcf8:	e01d      	b.n	800dd36 <xQueueGenericSend+0xda>
 800dcfa:	64a7      	str	r7, [r4, #72]	; 0x48
 800dcfc:	e01e      	b.n	800dd3c <xQueueGenericSend+0xe0>
				prvUnlockQueue( pxQueue );
 800dcfe:	0020      	movs	r0, r4
 800dd00:	f7ff fefa 	bl	800daf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd04:	f000 fcb0 	bl	800e668 <xTaskResumeAll>
 800dd08:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800dd0a:	f001 fb47 	bl	800f39c <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd10:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d3cb      	bcc.n	800dcae <xQueueGenericSend+0x52>
 800dd16:	2d02      	cmp	r5, #2
 800dd18:	d0c9      	beq.n	800dcae <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd1a:	9b01      	ldr	r3, [sp, #4]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d0e2      	beq.n	800dce6 <xQueueGenericSend+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 800dd20:	2e00      	cmp	r6, #0
 800dd22:	d0e4      	beq.n	800dcee <xQueueGenericSend+0x92>
		taskEXIT_CRITICAL();
 800dd24:	f001 fb46 	bl	800f3b4 <vPortExitCritical>
		vTaskSuspendAll();
 800dd28:	f000 fbfe 	bl	800e528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd2c:	f001 fb36 	bl	800f39c <vPortEnterCritical>
 800dd30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dd32:	3301      	adds	r3, #1
 800dd34:	d0df      	beq.n	800dcf6 <xQueueGenericSend+0x9a>
 800dd36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dd38:	3301      	adds	r3, #1
 800dd3a:	d0de      	beq.n	800dcfa <xQueueGenericSend+0x9e>
 800dd3c:	f001 fb3a 	bl	800f3b4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd40:	a901      	add	r1, sp, #4
 800dd42:	a802      	add	r0, sp, #8
 800dd44:	f000 febe 	bl	800eac4 <xTaskCheckForTimeOut>
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	d117      	bne.n	800dd7c <xQueueGenericSend+0x120>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd4c:	f001 fb26 	bl	800f39c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dd50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd52:	4699      	mov	r9, r3
 800dd54:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800dd56:	f001 fb2d 	bl	800f3b4 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dd5a:	45b1      	cmp	r9, r6
 800dd5c:	d1cf      	bne.n	800dcfe <xQueueGenericSend+0xa2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dd5e:	0020      	movs	r0, r4
 800dd60:	3010      	adds	r0, #16
 800dd62:	9901      	ldr	r1, [sp, #4]
 800dd64:	f000 fe20 	bl	800e9a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd68:	0020      	movs	r0, r4
 800dd6a:	f7ff fec5 	bl	800daf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd6e:	f000 fc7b 	bl	800e668 <xTaskResumeAll>
 800dd72:	2800      	cmp	r0, #0
 800dd74:	d1c8      	bne.n	800dd08 <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800dd76:	f001 fb05 	bl	800f384 <vPortYield>
 800dd7a:	e7c5      	b.n	800dd08 <xQueueGenericSend+0xac>
			prvUnlockQueue( pxQueue );
 800dd7c:	0020      	movs	r0, r4
 800dd7e:	f7ff febb 	bl	800daf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd82:	f000 fc71 	bl	800e668 <xTaskResumeAll>
			return errQUEUE_FULL;
 800dd86:	2000      	movs	r0, #0
 800dd88:	e7a9      	b.n	800dcde <xQueueGenericSend+0x82>

0800dd8a <xQueueGenericSendFromISR>:
{
 800dd8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd8c:	b083      	sub	sp, #12
 800dd8e:	0004      	movs	r4, r0
 800dd90:	000d      	movs	r5, r1
 800dd92:	0016      	movs	r6, r2
 800dd94:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800dd96:	2800      	cmp	r0, #0
 800dd98:	d006      	beq.n	800dda8 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd9a:	2900      	cmp	r1, #0
 800dd9c:	d106      	bne.n	800ddac <xQueueGenericSendFromISR+0x22>
 800dd9e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d003      	beq.n	800ddac <xQueueGenericSendFromISR+0x22>
 800dda4:	b672      	cpsid	i
 800dda6:	e7fe      	b.n	800dda6 <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 800dda8:	b672      	cpsid	i
 800ddaa:	e7fe      	b.n	800ddaa <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ddac:	2f02      	cmp	r7, #2
 800ddae:	d12a      	bne.n	800de06 <xQueueGenericSendFromISR+0x7c>
 800ddb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d011      	beq.n	800ddda <xQueueGenericSendFromISR+0x50>
 800ddb6:	b672      	cpsid	i
 800ddb8:	e7fe      	b.n	800ddb8 <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800ddba:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ddbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d01b      	beq.n	800ddfa <xQueueGenericSendFromISR+0x70>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ddc2:	0020      	movs	r0, r4
 800ddc4:	3024      	adds	r0, #36	; 0x24
 800ddc6:	f000 fe2d 	bl	800ea24 <xTaskRemoveFromEventList>
 800ddca:	2800      	cmp	r0, #0
 800ddcc:	d015      	beq.n	800ddfa <xQueueGenericSendFromISR+0x70>
							if( pxHigherPriorityTaskWoken != NULL )
 800ddce:	2e00      	cmp	r6, #0
 800ddd0:	d001      	beq.n	800ddd6 <xQueueGenericSendFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ddd2:	6035      	str	r5, [r6, #0]
 800ddd4:	e011      	b.n	800ddfa <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
 800ddd6:	2501      	movs	r5, #1
 800ddd8:	e00f      	b.n	800ddfa <xQueueGenericSendFromISR+0x70>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ddda:	f001 fafb 	bl	800f3d4 <ulSetInterruptMaskFromISR>
 800ddde:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dde0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dde2:	003a      	movs	r2, r7
 800dde4:	0029      	movs	r1, r5
 800dde6:	0020      	movs	r0, r4
 800dde8:	f7ff fe36 	bl	800da58 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800ddec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ddee:	3301      	adds	r3, #1
 800ddf0:	d0e3      	beq.n	800ddba <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800ddf2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800ddf8:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ddfa:	9801      	ldr	r0, [sp, #4]
 800ddfc:	f001 faef 	bl	800f3de <vClearInterruptMaskFromISR>
}
 800de00:	0028      	movs	r0, r5
 800de02:	b003      	add	sp, #12
 800de04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de06:	f001 fae5 	bl	800f3d4 <ulSetInterruptMaskFromISR>
 800de0a:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800de0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de0e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800de10:	4293      	cmp	r3, r2
 800de12:	d3e6      	bcc.n	800dde2 <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 800de14:	2500      	movs	r5, #0
 800de16:	e7f0      	b.n	800ddfa <xQueueGenericSendFromISR+0x70>

0800de18 <xQueueGiveFromISR>:
{
 800de18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de1a:	0004      	movs	r4, r0
 800de1c:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800de1e:	2800      	cmp	r0, #0
 800de20:	d004      	beq.n	800de2c <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800de22:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800de24:	2b00      	cmp	r3, #0
 800de26:	d003      	beq.n	800de30 <xQueueGiveFromISR+0x18>
 800de28:	b672      	cpsid	i
 800de2a:	e7fe      	b.n	800de2a <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800de2c:	b672      	cpsid	i
 800de2e:	e7fe      	b.n	800de2e <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800de30:	6803      	ldr	r3, [r0, #0]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d01f      	beq.n	800de76 <xQueueGiveFromISR+0x5e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de36:	f001 facd 	bl	800f3d4 <ulSetInterruptMaskFromISR>
 800de3a:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800de3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800de3e:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800de40:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800de42:	4293      	cmp	r3, r2
 800de44:	d212      	bcs.n	800de6c <xQueueGiveFromISR+0x54>
			++( pxQueue->uxMessagesWaiting );
 800de46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de48:	3301      	adds	r3, #1
 800de4a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800de4c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de4e:	3301      	adds	r3, #1
 800de50:	d116      	bne.n	800de80 <xQueueGiveFromISR+0x68>
			xReturn = pdPASS;
 800de52:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de56:	2b00      	cmp	r3, #0
 800de58:	d008      	beq.n	800de6c <xQueueGiveFromISR+0x54>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de5a:	0020      	movs	r0, r4
 800de5c:	3024      	adds	r0, #36	; 0x24
 800de5e:	f000 fde1 	bl	800ea24 <xTaskRemoveFromEventList>
 800de62:	2800      	cmp	r0, #0
 800de64:	d002      	beq.n	800de6c <xQueueGiveFromISR+0x54>
							if( pxHigherPriorityTaskWoken != NULL )
 800de66:	2f00      	cmp	r7, #0
 800de68:	d00f      	beq.n	800de8a <xQueueGiveFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800de6a:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800de6c:	0030      	movs	r0, r6
 800de6e:	f001 fab6 	bl	800f3de <vClearInterruptMaskFromISR>
}
 800de72:	0028      	movs	r0, r5
 800de74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800de76:	6843      	ldr	r3, [r0, #4]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d0dc      	beq.n	800de36 <xQueueGiveFromISR+0x1e>
 800de7c:	b672      	cpsid	i
 800de7e:	e7fe      	b.n	800de7e <xQueueGiveFromISR+0x66>
				++( pxQueue->xTxLock );
 800de80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de82:	3301      	adds	r3, #1
 800de84:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800de86:	2501      	movs	r5, #1
 800de88:	e7f0      	b.n	800de6c <xQueueGiveFromISR+0x54>
 800de8a:	2501      	movs	r5, #1
 800de8c:	e7ee      	b.n	800de6c <xQueueGiveFromISR+0x54>

0800de8e <xQueueGenericReceive>:
{
 800de8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de90:	46c6      	mov	lr, r8
 800de92:	b500      	push	{lr}
 800de94:	b084      	sub	sp, #16
 800de96:	0004      	movs	r4, r0
 800de98:	000e      	movs	r6, r1
 800de9a:	9201      	str	r2, [sp, #4]
 800de9c:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800de9e:	2800      	cmp	r0, #0
 800dea0:	d006      	beq.n	800deb0 <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dea2:	2900      	cmp	r1, #0
 800dea4:	d106      	bne.n	800deb4 <xQueueGenericReceive+0x26>
 800dea6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d003      	beq.n	800deb4 <xQueueGenericReceive+0x26>
 800deac:	b672      	cpsid	i
 800deae:	e7fe      	b.n	800deae <xQueueGenericReceive+0x20>
	configASSERT( pxQueue );
 800deb0:	b672      	cpsid	i
 800deb2:	e7fe      	b.n	800deb2 <xQueueGenericReceive+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800deb4:	f000 fe3e 	bl	800eb34 <xTaskGetSchedulerState>
 800deb8:	2800      	cmp	r0, #0
 800deba:	d104      	bne.n	800dec6 <xQueueGenericReceive+0x38>
 800debc:	9b01      	ldr	r3, [sp, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d004      	beq.n	800decc <xQueueGenericReceive+0x3e>
 800dec2:	b672      	cpsid	i
 800dec4:	e7fe      	b.n	800dec4 <xQueueGenericReceive+0x36>
 800dec6:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800dec8:	2700      	movs	r7, #0
 800deca:	e04b      	b.n	800df64 <xQueueGenericReceive+0xd6>
 800decc:	2500      	movs	r5, #0
 800dece:	e7fb      	b.n	800dec8 <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800ded0:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ded2:	0031      	movs	r1, r6
 800ded4:	0020      	movs	r0, r4
 800ded6:	f7ff fdfd 	bl	800dad4 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800deda:	4643      	mov	r3, r8
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d11a      	bne.n	800df16 <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
 800dee0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dee2:	3b01      	subs	r3, #1
 800dee4:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dee6:	6823      	ldr	r3, [r4, #0]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d102      	bne.n	800def2 <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800deec:	f000 ff62 	bl	800edb4 <pvTaskIncrementMutexHeldCount>
 800def0:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800def2:	6923      	ldr	r3, [r4, #16]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d007      	beq.n	800df08 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800def8:	0020      	movs	r0, r4
 800defa:	3010      	adds	r0, #16
 800defc:	f000 fd92 	bl	800ea24 <xTaskRemoveFromEventList>
 800df00:	2801      	cmp	r0, #1
 800df02:	d101      	bne.n	800df08 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800df04:	f001 fa3e 	bl	800f384 <vPortYield>
				taskEXIT_CRITICAL();
 800df08:	f001 fa54 	bl	800f3b4 <vPortExitCritical>
				return pdPASS;
 800df0c:	2001      	movs	r0, #1
}
 800df0e:	b004      	add	sp, #16
 800df10:	bc04      	pop	{r2}
 800df12:	4690      	mov	r8, r2
 800df14:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800df16:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d0f4      	beq.n	800df08 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df1e:	0020      	movs	r0, r4
 800df20:	3024      	adds	r0, #36	; 0x24
 800df22:	f000 fd7f 	bl	800ea24 <xTaskRemoveFromEventList>
 800df26:	2800      	cmp	r0, #0
 800df28:	d0ee      	beq.n	800df08 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800df2a:	f001 fa2b 	bl	800f384 <vPortYield>
 800df2e:	e7eb      	b.n	800df08 <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 800df30:	f001 fa40 	bl	800f3b4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800df34:	2000      	movs	r0, #0
 800df36:	e7ea      	b.n	800df0e <xQueueGenericReceive+0x80>
					vTaskSetTimeOutState( &xTimeOut );
 800df38:	a802      	add	r0, sp, #8
 800df3a:	f000 fdb3 	bl	800eaa4 <vTaskSetTimeOutState>
 800df3e:	e01b      	b.n	800df78 <xQueueGenericReceive+0xea>
		prvLockQueue( pxQueue );
 800df40:	6467      	str	r7, [r4, #68]	; 0x44
 800df42:	e022      	b.n	800df8a <xQueueGenericReceive+0xfc>
 800df44:	64a7      	str	r7, [r4, #72]	; 0x48
 800df46:	e023      	b.n	800df90 <xQueueGenericReceive+0x102>
						taskENTER_CRITICAL();
 800df48:	f001 fa28 	bl	800f39c <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800df4c:	6860      	ldr	r0, [r4, #4]
 800df4e:	f000 fe01 	bl	800eb54 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800df52:	f001 fa2f 	bl	800f3b4 <vPortExitCritical>
 800df56:	e02d      	b.n	800dfb4 <xQueueGenericReceive+0x126>
				prvUnlockQueue( pxQueue );
 800df58:	0020      	movs	r0, r4
 800df5a:	f7ff fdcd 	bl	800daf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df5e:	f000 fb83 	bl	800e668 <xTaskResumeAll>
 800df62:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800df64:	f001 fa1a 	bl	800f39c <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d1b0      	bne.n	800ded0 <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800df6e:	9b01      	ldr	r3, [sp, #4]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d0dd      	beq.n	800df30 <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800df74:	2d00      	cmp	r5, #0
 800df76:	d0df      	beq.n	800df38 <xQueueGenericReceive+0xaa>
		taskEXIT_CRITICAL();
 800df78:	f001 fa1c 	bl	800f3b4 <vPortExitCritical>
		vTaskSuspendAll();
 800df7c:	f000 fad4 	bl	800e528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df80:	f001 fa0c 	bl	800f39c <vPortEnterCritical>
 800df84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800df86:	3301      	adds	r3, #1
 800df88:	d0da      	beq.n	800df40 <xQueueGenericReceive+0xb2>
 800df8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df8c:	3301      	adds	r3, #1
 800df8e:	d0d9      	beq.n	800df44 <xQueueGenericReceive+0xb6>
 800df90:	f001 fa10 	bl	800f3b4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df94:	a901      	add	r1, sp, #4
 800df96:	a802      	add	r0, sp, #8
 800df98:	f000 fd94 	bl	800eac4 <xTaskCheckForTimeOut>
 800df9c:	2800      	cmp	r0, #0
 800df9e:	d118      	bne.n	800dfd2 <xQueueGenericReceive+0x144>
	taskENTER_CRITICAL();
 800dfa0:	f001 f9fc 	bl	800f39c <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dfa4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800dfa6:	f001 fa05 	bl	800f3b4 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfaa:	2d00      	cmp	r5, #0
 800dfac:	d1d4      	bne.n	800df58 <xQueueGenericReceive+0xca>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dfae:	6823      	ldr	r3, [r4, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d0c9      	beq.n	800df48 <xQueueGenericReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dfb4:	0020      	movs	r0, r4
 800dfb6:	3024      	adds	r0, #36	; 0x24
 800dfb8:	9901      	ldr	r1, [sp, #4]
 800dfba:	f000 fcf5 	bl	800e9a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dfbe:	0020      	movs	r0, r4
 800dfc0:	f7ff fd9a 	bl	800daf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dfc4:	f000 fb50 	bl	800e668 <xTaskResumeAll>
 800dfc8:	2800      	cmp	r0, #0
 800dfca:	d1ca      	bne.n	800df62 <xQueueGenericReceive+0xd4>
					portYIELD_WITHIN_API();
 800dfcc:	f001 f9da 	bl	800f384 <vPortYield>
 800dfd0:	e7c7      	b.n	800df62 <xQueueGenericReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800dfd2:	0020      	movs	r0, r4
 800dfd4:	f7ff fd90 	bl	800daf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dfd8:	f000 fb46 	bl	800e668 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800dfdc:	2000      	movs	r0, #0
 800dfde:	e796      	b.n	800df0e <xQueueGenericReceive+0x80>

0800dfe0 <xQueueReceiveFromISR>:
{
 800dfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	0004      	movs	r4, r0
 800dfe6:	000f      	movs	r7, r1
 800dfe8:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800dfea:	2800      	cmp	r0, #0
 800dfec:	d006      	beq.n	800dffc <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dfee:	2900      	cmp	r1, #0
 800dff0:	d106      	bne.n	800e000 <xQueueReceiveFromISR+0x20>
 800dff2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d003      	beq.n	800e000 <xQueueReceiveFromISR+0x20>
 800dff8:	b672      	cpsid	i
 800dffa:	e7fe      	b.n	800dffa <xQueueReceiveFromISR+0x1a>
	configASSERT( pxQueue );
 800dffc:	b672      	cpsid	i
 800dffe:	e7fe      	b.n	800dffe <xQueueReceiveFromISR+0x1e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e000:	f001 f9e8 	bl	800f3d4 <ulSetInterruptMaskFromISR>
 800e004:	9001      	str	r0, [sp, #4]
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e006:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800e008:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d01b      	beq.n	800e046 <xQueueReceiveFromISR+0x66>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e00e:	0039      	movs	r1, r7
 800e010:	0020      	movs	r0, r4
 800e012:	f7ff fd5f 	bl	800dad4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800e016:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e018:	3b01      	subs	r3, #1
 800e01a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800e01c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e01e:	3301      	adds	r3, #1
 800e020:	d004      	beq.n	800e02c <xQueueReceiveFromISR+0x4c>
				++( pxQueue->xRxLock );
 800e022:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e024:	3301      	adds	r3, #1
 800e026:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800e028:	2501      	movs	r5, #1
 800e02a:	e00c      	b.n	800e046 <xQueueReceiveFromISR+0x66>
 800e02c:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e02e:	6923      	ldr	r3, [r4, #16]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d008      	beq.n	800e046 <xQueueReceiveFromISR+0x66>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e034:	0020      	movs	r0, r4
 800e036:	3010      	adds	r0, #16
 800e038:	f000 fcf4 	bl	800ea24 <xTaskRemoveFromEventList>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	d002      	beq.n	800e046 <xQueueReceiveFromISR+0x66>
						if( pxHigherPriorityTaskWoken != NULL )
 800e040:	2e00      	cmp	r6, #0
 800e042:	d006      	beq.n	800e052 <xQueueReceiveFromISR+0x72>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e044:	6035      	str	r5, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e046:	9801      	ldr	r0, [sp, #4]
 800e048:	f001 f9c9 	bl	800f3de <vClearInterruptMaskFromISR>
}
 800e04c:	0028      	movs	r0, r5
 800e04e:	b003      	add	sp, #12
 800e050:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800e052:	2501      	movs	r5, #1
 800e054:	e7f7      	b.n	800e046 <xQueueReceiveFromISR+0x66>
	...

0800e058 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e058:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e05a:	4b0a      	ldr	r3, [pc, #40]	; (800e084 <vQueueAddToRegistry+0x2c>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d009      	beq.n	800e076 <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e062:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e064:	4c07      	ldr	r4, [pc, #28]	; (800e084 <vQueueAddToRegistry+0x2c>)
 800e066:	00da      	lsls	r2, r3, #3
 800e068:	58a2      	ldr	r2, [r4, r2]
 800e06a:	2a00      	cmp	r2, #0
 800e06c:	d004      	beq.n	800e078 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e06e:	3301      	adds	r3, #1
 800e070:	2b08      	cmp	r3, #8
 800e072:	d1f8      	bne.n	800e066 <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e074:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e076:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e078:	4a02      	ldr	r2, [pc, #8]	; (800e084 <vQueueAddToRegistry+0x2c>)
 800e07a:	00db      	lsls	r3, r3, #3
 800e07c:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e07e:	18d3      	adds	r3, r2, r3
 800e080:	6058      	str	r0, [r3, #4]
				break;
 800e082:	e7f7      	b.n	800e074 <vQueueAddToRegistry+0x1c>
 800e084:	20006e74 	.word	0x20006e74

0800e088 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800e088:	b570      	push	{r4, r5, r6, lr}
 800e08a:	0004      	movs	r4, r0
 800e08c:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e08e:	f001 f985 	bl	800f39c <vPortEnterCritical>
 800e092:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e094:	3301      	adds	r3, #1
 800e096:	d00b      	beq.n	800e0b0 <vQueueWaitForMessageRestricted+0x28>
 800e098:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e09a:	3301      	adds	r3, #1
 800e09c:	d00b      	beq.n	800e0b6 <vQueueWaitForMessageRestricted+0x2e>
 800e09e:	f001 f989 	bl	800f3b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e0a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d009      	beq.n	800e0bc <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e0a8:	0020      	movs	r0, r4
 800e0aa:	f7ff fd25 	bl	800daf8 <prvUnlockQueue>
	}
 800e0ae:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	6463      	str	r3, [r4, #68]	; 0x44
 800e0b4:	e7f0      	b.n	800e098 <vQueueWaitForMessageRestricted+0x10>
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	64a3      	str	r3, [r4, #72]	; 0x48
 800e0ba:	e7f0      	b.n	800e09e <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e0bc:	0020      	movs	r0, r4
 800e0be:	3024      	adds	r0, #36	; 0x24
 800e0c0:	0029      	movs	r1, r5
 800e0c2:	f000 fc95 	bl	800e9f0 <vTaskPlaceOnEventListRestricted>
 800e0c6:	e7ef      	b.n	800e0a8 <vQueueWaitForMessageRestricted+0x20>

0800e0c8 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800e0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0ca:	46d6      	mov	lr, sl
 800e0cc:	464f      	mov	r7, r9
 800e0ce:	4646      	mov	r6, r8
 800e0d0:	b5c0      	push	{r6, r7, lr}
 800e0d2:	0006      	movs	r6, r0
 800e0d4:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e0d6:	6808      	ldr	r0, [r1, #0]
 800e0d8:	2800      	cmp	r0, #0
 800e0da:	d044      	beq.n	800e166 <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e0dc:	684b      	ldr	r3, [r1, #4]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	604b      	str	r3, [r1, #4]
 800e0e2:	2208      	movs	r2, #8
 800e0e4:	4690      	mov	r8, r2
 800e0e6:	4488      	add	r8, r1
 800e0e8:	4543      	cmp	r3, r8
 800e0ea:	d006      	beq.n	800e0fa <prvListTaskWithinSingleList+0x32>
 800e0ec:	684b      	ldr	r3, [r1, #4]
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800e0f2:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e0f4:	2302      	movs	r3, #2
 800e0f6:	469a      	mov	sl, r3
 800e0f8:	e018      	b.n	800e12c <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e0fa:	68cb      	ldr	r3, [r1, #12]
 800e0fc:	604b      	str	r3, [r1, #4]
 800e0fe:	e7f5      	b.n	800e0ec <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e100:	68cb      	ldr	r3, [r1, #12]
 800e102:	604b      	str	r3, [r1, #4]
 800e104:	e017      	b.n	800e136 <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e106:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800e108:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e10a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800e10c:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e10e:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e110:	783b      	ldrb	r3, [r7, #0]
 800e112:	2ba5      	cmp	r3, #165	; 0xa5
 800e114:	d125      	bne.n	800e162 <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800e116:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800e118:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e11a:	5cfc      	ldrb	r4, [r7, r3]
 800e11c:	2ca5      	cmp	r4, #165	; 0xa5
 800e11e:	d0fb      	beq.n	800e118 <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e120:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800e122:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800e124:	3001      	adds	r0, #1
 800e126:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800e128:	45a9      	cmp	r9, r5
 800e12a:	d01c      	beq.n	800e166 <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e12c:	684b      	ldr	r3, [r1, #4]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	604b      	str	r3, [r1, #4]
 800e132:	4598      	cmp	r8, r3
 800e134:	d0e4      	beq.n	800e100 <prvListTaskWithinSingleList+0x38>
 800e136:	684b      	ldr	r3, [r1, #4]
 800e138:	68dd      	ldr	r5, [r3, #12]
 800e13a:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800e13c:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800e13e:	002b      	movs	r3, r5
 800e140:	3334      	adds	r3, #52	; 0x34
 800e142:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e144:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800e146:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800e148:	4663      	mov	r3, ip
 800e14a:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800e14c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e14e:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800e150:	4663      	mov	r3, ip
 800e152:	2b03      	cmp	r3, #3
 800e154:	d1d7      	bne.n	800e106 <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800e156:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d0d4      	beq.n	800e106 <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e15c:	4653      	mov	r3, sl
 800e15e:	7333      	strb	r3, [r6, #12]
 800e160:	e7d1      	b.n	800e106 <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800e162:	2300      	movs	r3, #0
 800e164:	e7dc      	b.n	800e120 <prvListTaskWithinSingleList+0x58>
	}
 800e166:	bc1c      	pop	{r2, r3, r4}
 800e168:	4690      	mov	r8, r2
 800e16a:	4699      	mov	r9, r3
 800e16c:	46a2      	mov	sl, r4
 800e16e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e170 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e170:	4b08      	ldr	r3, [pc, #32]	; (800e194 <prvResetNextTaskUnblockTime+0x24>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d007      	beq.n	800e18a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e17a:	4b06      	ldr	r3, [pc, #24]	; (800e194 <prvResetNextTaskUnblockTime+0x24>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e180:	68db      	ldr	r3, [r3, #12]
 800e182:	685a      	ldr	r2, [r3, #4]
 800e184:	4b04      	ldr	r3, [pc, #16]	; (800e198 <prvResetNextTaskUnblockTime+0x28>)
 800e186:	601a      	str	r2, [r3, #0]
	}
}
 800e188:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800e18a:	4b03      	ldr	r3, [pc, #12]	; (800e198 <prvResetNextTaskUnblockTime+0x28>)
 800e18c:	2201      	movs	r2, #1
 800e18e:	4252      	negs	r2, r2
 800e190:	601a      	str	r2, [r3, #0]
 800e192:	e7f9      	b.n	800e188 <prvResetNextTaskUnblockTime+0x18>
 800e194:	20001d60 	.word	0x20001d60
 800e198:	200000a0 	.word	0x200000a0

0800e19c <prvAddCurrentTaskToDelayedList>:
{
 800e19c:	b510      	push	{r4, lr}
 800e19e:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e1a0:	4b0e      	ldr	r3, [pc, #56]	; (800e1dc <prvAddCurrentTaskToDelayedList+0x40>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800e1a6:	4b0e      	ldr	r3, [pc, #56]	; (800e1e0 <prvAddCurrentTaskToDelayedList+0x44>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	4283      	cmp	r3, r0
 800e1ac:	d80d      	bhi.n	800e1ca <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e1ae:	4b0d      	ldr	r3, [pc, #52]	; (800e1e4 <prvAddCurrentTaskToDelayedList+0x48>)
 800e1b0:	6818      	ldr	r0, [r3, #0]
 800e1b2:	4b0a      	ldr	r3, [pc, #40]	; (800e1dc <prvAddCurrentTaskToDelayedList+0x40>)
 800e1b4:	6819      	ldr	r1, [r3, #0]
 800e1b6:	3104      	adds	r1, #4
 800e1b8:	f7ff fc24 	bl	800da04 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800e1bc:	4b0a      	ldr	r3, [pc, #40]	; (800e1e8 <prvAddCurrentTaskToDelayedList+0x4c>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	42a3      	cmp	r3, r4
 800e1c2:	d909      	bls.n	800e1d8 <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800e1c4:	4b08      	ldr	r3, [pc, #32]	; (800e1e8 <prvAddCurrentTaskToDelayedList+0x4c>)
 800e1c6:	601c      	str	r4, [r3, #0]
}
 800e1c8:	e006      	b.n	800e1d8 <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e1ca:	4b08      	ldr	r3, [pc, #32]	; (800e1ec <prvAddCurrentTaskToDelayedList+0x50>)
 800e1cc:	6818      	ldr	r0, [r3, #0]
 800e1ce:	4b03      	ldr	r3, [pc, #12]	; (800e1dc <prvAddCurrentTaskToDelayedList+0x40>)
 800e1d0:	6819      	ldr	r1, [r3, #0]
 800e1d2:	3104      	adds	r1, #4
 800e1d4:	f7ff fc16 	bl	800da04 <vListInsert>
}
 800e1d8:	bd10      	pop	{r4, pc}
 800e1da:	46c0      	nop			; (mov r8, r8)
 800e1dc:	20001d5c 	.word	0x20001d5c
 800e1e0:	20001e7c 	.word	0x20001e7c
 800e1e4:	20001d60 	.word	0x20001d60
 800e1e8:	200000a0 	.word	0x200000a0
 800e1ec:	20001d64 	.word	0x20001d64

0800e1f0 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800e1f0:	b510      	push	{r4, lr}
 800e1f2:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800e1f4:	f005 f912 	bl	801341c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e1f8:	0020      	movs	r0, r4
 800e1fa:	f7f1 ff8d 	bl	8000118 <strlen>
 800e1fe:	0003      	movs	r3, r0
 800e200:	280b      	cmp	r0, #11
 800e202:	dc08      	bgt.n	800e216 <prvWriteNameToBuffer+0x26>
 800e204:	1820      	adds	r0, r4, r0
 800e206:	0022      	movs	r2, r4
 800e208:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800e20a:	2320      	movs	r3, #32
 800e20c:	7003      	strb	r3, [r0, #0]
 800e20e:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800e210:	4290      	cmp	r0, r2
 800e212:	d1fb      	bne.n	800e20c <prvWriteNameToBuffer+0x1c>
 800e214:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800e216:	18e0      	adds	r0, r4, r3
 800e218:	2300      	movs	r3, #0
 800e21a:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800e21c:	bd10      	pop	{r4, pc}
	...

0800e220 <xTaskGenericCreate>:
{
 800e220:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e222:	46d6      	mov	lr, sl
 800e224:	4647      	mov	r7, r8
 800e226:	b580      	push	{r7, lr}
 800e228:	b085      	sub	sp, #20
 800e22a:	9002      	str	r0, [sp, #8]
 800e22c:	000d      	movs	r5, r1
 800e22e:	0016      	movs	r6, r2
 800e230:	9303      	str	r3, [sp, #12]
 800e232:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
 800e234:	2800      	cmp	r0, #0
 800e236:	d101      	bne.n	800e23c <xTaskGenericCreate+0x1c>
 800e238:	b672      	cpsid	i
 800e23a:	e7fe      	b.n	800e23a <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800e23c:	2f06      	cmp	r7, #6
 800e23e:	d901      	bls.n	800e244 <xTaskGenericCreate+0x24>
 800e240:	b672      	cpsid	i
 800e242:	e7fe      	b.n	800e242 <xTaskGenericCreate+0x22>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e246:	2b00      	cmp	r3, #0
 800e248:	d106      	bne.n	800e258 <xTaskGenericCreate+0x38>
 800e24a:	0090      	lsls	r0, r2, #2
 800e24c:	f001 f928 	bl	800f4a0 <pvPortMalloc>
 800e250:	900e      	str	r0, [sp, #56]	; 0x38
		if( pxStack != NULL )
 800e252:	2800      	cmp	r0, #0
 800e254:	d100      	bne.n	800e258 <xTaskGenericCreate+0x38>
 800e256:	e0b7      	b.n	800e3c8 <xTaskGenericCreate+0x1a8>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800e258:	2060      	movs	r0, #96	; 0x60
 800e25a:	f001 f921 	bl	800f4a0 <pvPortMalloc>
 800e25e:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800e260:	d100      	bne.n	800e264 <xTaskGenericCreate+0x44>
 800e262:	e08b      	b.n	800e37c <xTaskGenericCreate+0x15c>
				pxNewTCB->pxStack = pxStack;
 800e264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e266:	6303      	str	r3, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e268:	00b2      	lsls	r2, r6, #2
 800e26a:	21a5      	movs	r1, #165	; 0xa5
 800e26c:	0018      	movs	r0, r3
 800e26e:	f004 fe9f 	bl	8012fb0 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e272:	4b57      	ldr	r3, [pc, #348]	; (800e3d0 <xTaskGenericCreate+0x1b0>)
 800e274:	18f3      	adds	r3, r6, r3
 800e276:	009b      	lsls	r3, r3, #2
 800e278:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e27a:	4694      	mov	ip, r2
 800e27c:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e27e:	2207      	movs	r2, #7
 800e280:	4393      	bics	r3, r2
 800e282:	469a      	mov	sl, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e284:	782a      	ldrb	r2, [r5, #0]
 800e286:	2334      	movs	r3, #52	; 0x34
 800e288:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
 800e28a:	782b      	ldrb	r3, [r5, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d000      	beq.n	800e292 <xTaskGenericCreate+0x72>
 800e290:	e07e      	b.n	800e390 <xTaskGenericCreate+0x170>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e292:	2500      	movs	r5, #0
 800e294:	2340      	movs	r3, #64	; 0x40
 800e296:	54e5      	strb	r5, [r4, r3]
	pxTCB->uxPriority = uxPriority;
 800e298:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800e29a:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800e29c:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e29e:	1d23      	adds	r3, r4, #4
 800e2a0:	9301      	str	r3, [sp, #4]
 800e2a2:	0018      	movs	r0, r3
 800e2a4:	f7ff fb9f 	bl	800d9e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800e2a8:	0020      	movs	r0, r4
 800e2aa:	3018      	adds	r0, #24
 800e2ac:	f7ff fb9b 	bl	800d9e6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800e2b0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2b2:	2307      	movs	r3, #7
 800e2b4:	1bdb      	subs	r3, r3, r7
 800e2b6:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800e2b8:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800e2ba:	6565      	str	r5, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800e2bc:	65a5      	str	r5, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e2be:	235c      	movs	r3, #92	; 0x5c
 800e2c0:	54e5      	strb	r5, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e2c2:	9a03      	ldr	r2, [sp, #12]
 800e2c4:	9902      	ldr	r1, [sp, #8]
 800e2c6:	4650      	mov	r0, sl
 800e2c8:	f001 f820 	bl	800f30c <pxPortInitialiseStack>
 800e2cc:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800e2ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2d0:	42ab      	cmp	r3, r5
 800e2d2:	d000      	beq.n	800e2d6 <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e2d4:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800e2d6:	f001 f861 	bl	800f39c <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800e2da:	4a3e      	ldr	r2, [pc, #248]	; (800e3d4 <xTaskGenericCreate+0x1b4>)
 800e2dc:	6813      	ldr	r3, [r2, #0]
 800e2de:	3301      	adds	r3, #1
 800e2e0:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800e2e2:	4b3d      	ldr	r3, [pc, #244]	; (800e3d8 <xTaskGenericCreate+0x1b8>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d162      	bne.n	800e3b0 <xTaskGenericCreate+0x190>
				pxCurrentTCB =  pxNewTCB;
 800e2ea:	4b3b      	ldr	r3, [pc, #236]	; (800e3d8 <xTaskGenericCreate+0x1b8>)
 800e2ec:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e2ee:	6813      	ldr	r3, [r2, #0]
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d120      	bne.n	800e336 <xTaskGenericCreate+0x116>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2f4:	2500      	movs	r5, #0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e2f6:	3313      	adds	r3, #19
 800e2f8:	4698      	mov	r8, r3
 800e2fa:	4e38      	ldr	r6, [pc, #224]	; (800e3dc <xTaskGenericCreate+0x1bc>)
 800e2fc:	4640      	mov	r0, r8
 800e2fe:	4368      	muls	r0, r5
 800e300:	1980      	adds	r0, r0, r6
 800e302:	f7ff fb65 	bl	800d9d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e306:	3501      	adds	r5, #1
 800e308:	2d07      	cmp	r5, #7
 800e30a:	d1f7      	bne.n	800e2fc <xTaskGenericCreate+0xdc>
	vListInitialise( &xDelayedTaskList1 );
 800e30c:	4e34      	ldr	r6, [pc, #208]	; (800e3e0 <xTaskGenericCreate+0x1c0>)
 800e30e:	0030      	movs	r0, r6
 800e310:	f7ff fb5e 	bl	800d9d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e314:	4d33      	ldr	r5, [pc, #204]	; (800e3e4 <xTaskGenericCreate+0x1c4>)
 800e316:	0028      	movs	r0, r5
 800e318:	f7ff fb5a 	bl	800d9d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e31c:	4832      	ldr	r0, [pc, #200]	; (800e3e8 <xTaskGenericCreate+0x1c8>)
 800e31e:	f7ff fb57 	bl	800d9d0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800e322:	4832      	ldr	r0, [pc, #200]	; (800e3ec <xTaskGenericCreate+0x1cc>)
 800e324:	f7ff fb54 	bl	800d9d0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800e328:	4831      	ldr	r0, [pc, #196]	; (800e3f0 <xTaskGenericCreate+0x1d0>)
 800e32a:	f7ff fb51 	bl	800d9d0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800e32e:	4b31      	ldr	r3, [pc, #196]	; (800e3f4 <xTaskGenericCreate+0x1d4>)
 800e330:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e332:	4b31      	ldr	r3, [pc, #196]	; (800e3f8 <xTaskGenericCreate+0x1d8>)
 800e334:	601d      	str	r5, [r3, #0]
			uxTaskNumber++;
 800e336:	4a31      	ldr	r2, [pc, #196]	; (800e3fc <xTaskGenericCreate+0x1dc>)
 800e338:	6813      	ldr	r3, [r2, #0]
 800e33a:	3301      	adds	r3, #1
 800e33c:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e33e:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800e340:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e342:	4a2f      	ldr	r2, [pc, #188]	; (800e400 <xTaskGenericCreate+0x1e0>)
 800e344:	6812      	ldr	r2, [r2, #0]
 800e346:	4293      	cmp	r3, r2
 800e348:	d901      	bls.n	800e34e <xTaskGenericCreate+0x12e>
 800e34a:	4a2d      	ldr	r2, [pc, #180]	; (800e400 <xTaskGenericCreate+0x1e0>)
 800e34c:	6013      	str	r3, [r2, #0]
 800e34e:	2014      	movs	r0, #20
 800e350:	4358      	muls	r0, r3
 800e352:	4b22      	ldr	r3, [pc, #136]	; (800e3dc <xTaskGenericCreate+0x1bc>)
 800e354:	18c0      	adds	r0, r0, r3
 800e356:	9901      	ldr	r1, [sp, #4]
 800e358:	f7ff fb48 	bl	800d9ec <vListInsertEnd>
		taskEXIT_CRITICAL();
 800e35c:	f001 f82a 	bl	800f3b4 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e360:	4b28      	ldr	r3, [pc, #160]	; (800e404 <xTaskGenericCreate+0x1e4>)
 800e362:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800e364:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00d      	beq.n	800e386 <xTaskGenericCreate+0x166>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800e36a:	4b1b      	ldr	r3, [pc, #108]	; (800e3d8 <xTaskGenericCreate+0x1b8>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e370:	42bb      	cmp	r3, r7
 800e372:	d208      	bcs.n	800e386 <xTaskGenericCreate+0x166>
				taskYIELD_IF_USING_PREEMPTION();
 800e374:	f001 f806 	bl	800f384 <vPortYield>
			xReturn = pdPASS;
 800e378:	2001      	movs	r0, #1
 800e37a:	e004      	b.n	800e386 <xTaskGenericCreate+0x166>
				vPortFree( pxStack );
 800e37c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e37e:	f001 f925 	bl	800f5cc <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e382:	2001      	movs	r0, #1
 800e384:	4240      	negs	r0, r0
}
 800e386:	b005      	add	sp, #20
 800e388:	bc0c      	pop	{r2, r3}
 800e38a:	4690      	mov	r8, r2
 800e38c:	469a      	mov	sl, r3
 800e38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e390:	1c6b      	adds	r3, r5, #1
 800e392:	0022      	movs	r2, r4
 800e394:	3235      	adds	r2, #53	; 0x35
 800e396:	0021      	movs	r1, r4
 800e398:	3141      	adds	r1, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e39a:	7818      	ldrb	r0, [r3, #0]
 800e39c:	7010      	strb	r0, [r2, #0]
		if( pcName[ x ] == 0x00 )
 800e39e:	7818      	ldrb	r0, [r3, #0]
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	d100      	bne.n	800e3a6 <xTaskGenericCreate+0x186>
 800e3a4:	e775      	b.n	800e292 <xTaskGenericCreate+0x72>
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	3201      	adds	r2, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e3aa:	4291      	cmp	r1, r2
 800e3ac:	d1f5      	bne.n	800e39a <xTaskGenericCreate+0x17a>
 800e3ae:	e770      	b.n	800e292 <xTaskGenericCreate+0x72>
				if( xSchedulerRunning == pdFALSE )
 800e3b0:	4b14      	ldr	r3, [pc, #80]	; (800e404 <xTaskGenericCreate+0x1e4>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d1be      	bne.n	800e336 <xTaskGenericCreate+0x116>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800e3b8:	4b07      	ldr	r3, [pc, #28]	; (800e3d8 <xTaskGenericCreate+0x1b8>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3be:	42bb      	cmp	r3, r7
 800e3c0:	d8b9      	bhi.n	800e336 <xTaskGenericCreate+0x116>
						pxCurrentTCB = pxNewTCB;
 800e3c2:	4b05      	ldr	r3, [pc, #20]	; (800e3d8 <xTaskGenericCreate+0x1b8>)
 800e3c4:	601c      	str	r4, [r3, #0]
 800e3c6:	e7b6      	b.n	800e336 <xTaskGenericCreate+0x116>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e3c8:	2001      	movs	r0, #1
 800e3ca:	4240      	negs	r0, r0
 800e3cc:	e7db      	b.n	800e386 <xTaskGenericCreate+0x166>
 800e3ce:	46c0      	nop			; (mov r8, r8)
 800e3d0:	3fffffff 	.word	0x3fffffff
 800e3d4:	20001df8 	.word	0x20001df8
 800e3d8:	20001d5c 	.word	0x20001d5c
 800e3dc:	20001d68 	.word	0x20001d68
 800e3e0:	20001e10 	.word	0x20001e10
 800e3e4:	20001e24 	.word	0x20001e24
 800e3e8:	20001e3c 	.word	0x20001e3c
 800e3ec:	20001e68 	.word	0x20001e68
 800e3f0:	20001e54 	.word	0x20001e54
 800e3f4:	20001d60 	.word	0x20001d60
 800e3f8:	20001d64 	.word	0x20001d64
 800e3fc:	20001e04 	.word	0x20001e04
 800e400:	20001e0c 	.word	0x20001e0c
 800e404:	20001e50 	.word	0x20001e50

0800e408 <uxTaskPriorityGet>:
	{
 800e408:	b510      	push	{r4, lr}
 800e40a:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800e40c:	f000 ffc6 	bl	800f39c <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e410:	2c00      	cmp	r4, #0
 800e412:	d004      	beq.n	800e41e <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800e414:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800e416:	f000 ffcd 	bl	800f3b4 <vPortExitCritical>
	}
 800e41a:	0020      	movs	r0, r4
 800e41c:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800e41e:	4b01      	ldr	r3, [pc, #4]	; (800e424 <uxTaskPriorityGet+0x1c>)
 800e420:	681c      	ldr	r4, [r3, #0]
 800e422:	e7f7      	b.n	800e414 <uxTaskPriorityGet+0xc>
 800e424:	20001d5c 	.word	0x20001d5c

0800e428 <vTaskPrioritySet>:
	{
 800e428:	b570      	push	{r4, r5, r6, lr}
 800e42a:	0004      	movs	r4, r0
 800e42c:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800e42e:	2906      	cmp	r1, #6
 800e430:	d901      	bls.n	800e436 <vTaskPrioritySet+0xe>
 800e432:	b672      	cpsid	i
 800e434:	e7fe      	b.n	800e434 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800e436:	f000 ffb1 	bl	800f39c <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e43a:	2c00      	cmp	r4, #0
 800e43c:	d101      	bne.n	800e442 <vTaskPrioritySet+0x1a>
 800e43e:	4b21      	ldr	r3, [pc, #132]	; (800e4c4 <vTaskPrioritySet+0x9c>)
 800e440:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800e442:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800e444:	4295      	cmp	r5, r2
 800e446:	d032      	beq.n	800e4ae <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 800e448:	d934      	bls.n	800e4b4 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 800e44a:	4b1e      	ldr	r3, [pc, #120]	; (800e4c4 <vTaskPrioritySet+0x9c>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	42a3      	cmp	r3, r4
 800e450:	d036      	beq.n	800e4c0 <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800e452:	4b1c      	ldr	r3, [pc, #112]	; (800e4c4 <vTaskPrioritySet+0x9c>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e458:	2600      	movs	r6, #0
 800e45a:	429d      	cmp	r5, r3
 800e45c:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e45e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800e460:	428a      	cmp	r2, r1
 800e462:	d100      	bne.n	800e466 <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 800e464:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 800e466:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e468:	69a3      	ldr	r3, [r4, #24]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	db02      	blt.n	800e474 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e46e:	2207      	movs	r2, #7
 800e470:	1b55      	subs	r5, r2, r5
 800e472:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e474:	2314      	movs	r3, #20
 800e476:	434b      	muls	r3, r1
 800e478:	4a13      	ldr	r2, [pc, #76]	; (800e4c8 <vTaskPrioritySet+0xa0>)
 800e47a:	189b      	adds	r3, r3, r2
 800e47c:	6962      	ldr	r2, [r4, #20]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d111      	bne.n	800e4a6 <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e482:	1d25      	adds	r5, r4, #4
 800e484:	0028      	movs	r0, r5
 800e486:	f7ff fad4 	bl	800da32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e48a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e48c:	4a0f      	ldr	r2, [pc, #60]	; (800e4cc <vTaskPrioritySet+0xa4>)
 800e48e:	6812      	ldr	r2, [r2, #0]
 800e490:	4293      	cmp	r3, r2
 800e492:	d901      	bls.n	800e498 <vTaskPrioritySet+0x70>
 800e494:	4a0d      	ldr	r2, [pc, #52]	; (800e4cc <vTaskPrioritySet+0xa4>)
 800e496:	6013      	str	r3, [r2, #0]
 800e498:	2014      	movs	r0, #20
 800e49a:	4358      	muls	r0, r3
 800e49c:	4b0a      	ldr	r3, [pc, #40]	; (800e4c8 <vTaskPrioritySet+0xa0>)
 800e49e:	18c0      	adds	r0, r0, r3
 800e4a0:	0029      	movs	r1, r5
 800e4a2:	f7ff faa3 	bl	800d9ec <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 800e4a6:	2e01      	cmp	r6, #1
 800e4a8:	d101      	bne.n	800e4ae <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800e4aa:	f000 ff6b 	bl	800f384 <vPortYield>
		taskEXIT_CRITICAL();
 800e4ae:	f000 ff81 	bl	800f3b4 <vPortExitCritical>
	}
 800e4b2:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 800e4b4:	4b03      	ldr	r3, [pc, #12]	; (800e4c4 <vTaskPrioritySet+0x9c>)
 800e4b6:	681e      	ldr	r6, [r3, #0]
 800e4b8:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800e4ba:	4273      	negs	r3, r6
 800e4bc:	415e      	adcs	r6, r3
 800e4be:	e7ce      	b.n	800e45e <vTaskPrioritySet+0x36>
	BaseType_t xYieldRequired = pdFALSE;
 800e4c0:	2600      	movs	r6, #0
 800e4c2:	e7cc      	b.n	800e45e <vTaskPrioritySet+0x36>
 800e4c4:	20001d5c 	.word	0x20001d5c
 800e4c8:	20001d68 	.word	0x20001d68
 800e4cc:	20001e0c 	.word	0x20001e0c

0800e4d0 <vTaskStartScheduler>:
{
 800e4d0:	b500      	push	{lr}
 800e4d2:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	9303      	str	r3, [sp, #12]
 800e4d8:	9302      	str	r3, [sp, #8]
 800e4da:	9301      	str	r3, [sp, #4]
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	22a0      	movs	r2, #160	; 0xa0
 800e4e0:	490d      	ldr	r1, [pc, #52]	; (800e518 <vTaskStartScheduler+0x48>)
 800e4e2:	480e      	ldr	r0, [pc, #56]	; (800e51c <vTaskStartScheduler+0x4c>)
 800e4e4:	f7ff fe9c 	bl	800e220 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800e4e8:	2801      	cmp	r0, #1
 800e4ea:	d003      	beq.n	800e4f4 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800e4ec:	2800      	cmp	r0, #0
 800e4ee:	d110      	bne.n	800e512 <vTaskStartScheduler+0x42>
 800e4f0:	b672      	cpsid	i
 800e4f2:	e7fe      	b.n	800e4f2 <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800e4f4:	f000 fd68 	bl	800efc8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e4f8:	2801      	cmp	r0, #1
 800e4fa:	d1f7      	bne.n	800e4ec <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800e4fc:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800e4fe:	4b08      	ldr	r3, [pc, #32]	; (800e520 <vTaskStartScheduler+0x50>)
 800e500:	2201      	movs	r2, #1
 800e502:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800e504:	4b07      	ldr	r3, [pc, #28]	; (800e524 <vTaskStartScheduler+0x54>)
 800e506:	2200      	movs	r2, #0
 800e508:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e50a:	f7f9 fd99 	bl	8008040 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800e50e:	f000 ff0f 	bl	800f330 <xPortStartScheduler>
}
 800e512:	b005      	add	sp, #20
 800e514:	bd00      	pop	{pc}
 800e516:	46c0      	nop			; (mov r8, r8)
 800e518:	0801a5e8 	.word	0x0801a5e8
 800e51c:	0800e791 	.word	0x0800e791
 800e520:	20001e50 	.word	0x20001e50
 800e524:	20001e7c 	.word	0x20001e7c

0800e528 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e528:	4a02      	ldr	r2, [pc, #8]	; (800e534 <vTaskSuspendAll+0xc>)
 800e52a:	6813      	ldr	r3, [r2, #0]
 800e52c:	3301      	adds	r3, #1
 800e52e:	6013      	str	r3, [r2, #0]
}
 800e530:	4770      	bx	lr
 800e532:	46c0      	nop			; (mov r8, r8)
 800e534:	20001e00 	.word	0x20001e00

0800e538 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e538:	4b01      	ldr	r3, [pc, #4]	; (800e540 <xTaskGetTickCount+0x8>)
 800e53a:	6818      	ldr	r0, [r3, #0]
}
 800e53c:	4770      	bx	lr
 800e53e:	46c0      	nop			; (mov r8, r8)
 800e540:	20001e7c 	.word	0x20001e7c

0800e544 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800e544:	4b01      	ldr	r3, [pc, #4]	; (800e54c <xTaskGetTickCountFromISR+0x8>)
 800e546:	6818      	ldr	r0, [r3, #0]
}
 800e548:	4770      	bx	lr
 800e54a:	46c0      	nop			; (mov r8, r8)
 800e54c:	20001e7c 	.word	0x20001e7c

0800e550 <xTaskIncrementTick>:
{
 800e550:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e552:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e554:	4b39      	ldr	r3, [pc, #228]	; (800e63c <xTaskIncrementTick+0xec>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d161      	bne.n	800e620 <xTaskIncrementTick+0xd0>
		++xTickCount;
 800e55c:	4b38      	ldr	r3, [pc, #224]	; (800e640 <xTaskIncrementTick+0xf0>)
 800e55e:	681a      	ldr	r2, [r3, #0]
 800e560:	3201      	adds	r2, #1
 800e562:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800e564:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800e566:	2e00      	cmp	r6, #0
 800e568:	d112      	bne.n	800e590 <xTaskIncrementTick+0x40>
				taskSWITCH_DELAYED_LISTS();
 800e56a:	4b36      	ldr	r3, [pc, #216]	; (800e644 <xTaskIncrementTick+0xf4>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d001      	beq.n	800e578 <xTaskIncrementTick+0x28>
 800e574:	b672      	cpsid	i
 800e576:	e7fe      	b.n	800e576 <xTaskIncrementTick+0x26>
 800e578:	4a32      	ldr	r2, [pc, #200]	; (800e644 <xTaskIncrementTick+0xf4>)
 800e57a:	6811      	ldr	r1, [r2, #0]
 800e57c:	4b32      	ldr	r3, [pc, #200]	; (800e648 <xTaskIncrementTick+0xf8>)
 800e57e:	6818      	ldr	r0, [r3, #0]
 800e580:	6010      	str	r0, [r2, #0]
 800e582:	6019      	str	r1, [r3, #0]
 800e584:	4a31      	ldr	r2, [pc, #196]	; (800e64c <xTaskIncrementTick+0xfc>)
 800e586:	6813      	ldr	r3, [r2, #0]
 800e588:	3301      	adds	r3, #1
 800e58a:	6013      	str	r3, [r2, #0]
 800e58c:	f7ff fdf0 	bl	800e170 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e590:	4b2f      	ldr	r3, [pc, #188]	; (800e650 <xTaskIncrementTick+0x100>)
 800e592:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e594:	2700      	movs	r7, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e596:	42b3      	cmp	r3, r6
 800e598:	d833      	bhi.n	800e602 <xTaskIncrementTick+0xb2>
BaseType_t xSwitchRequired = pdFALSE;
 800e59a:	2700      	movs	r7, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e59c:	4d29      	ldr	r5, [pc, #164]	; (800e644 <xTaskIncrementTick+0xf4>)
 800e59e:	682b      	ldr	r3, [r5, #0]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d029      	beq.n	800e5fa <xTaskIncrementTick+0xaa>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e5a6:	4b27      	ldr	r3, [pc, #156]	; (800e644 <xTaskIncrementTick+0xf4>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	68db      	ldr	r3, [r3, #12]
 800e5ac:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800e5ae:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800e5b0:	429e      	cmp	r6, r3
 800e5b2:	d332      	bcc.n	800e61a <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e5b4:	1d23      	adds	r3, r4, #4
 800e5b6:	9301      	str	r3, [sp, #4]
 800e5b8:	0018      	movs	r0, r3
 800e5ba:	f7ff fa3a 	bl	800da32 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e5be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d003      	beq.n	800e5cc <xTaskIncrementTick+0x7c>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5c4:	0020      	movs	r0, r4
 800e5c6:	3018      	adds	r0, #24
 800e5c8:	f7ff fa33 	bl	800da32 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e5cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e5ce:	4a21      	ldr	r2, [pc, #132]	; (800e654 <xTaskIncrementTick+0x104>)
 800e5d0:	6812      	ldr	r2, [r2, #0]
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d901      	bls.n	800e5da <xTaskIncrementTick+0x8a>
 800e5d6:	4a1f      	ldr	r2, [pc, #124]	; (800e654 <xTaskIncrementTick+0x104>)
 800e5d8:	6013      	str	r3, [r2, #0]
 800e5da:	0098      	lsls	r0, r3, #2
 800e5dc:	18c0      	adds	r0, r0, r3
 800e5de:	0080      	lsls	r0, r0, #2
 800e5e0:	4b1d      	ldr	r3, [pc, #116]	; (800e658 <xTaskIncrementTick+0x108>)
 800e5e2:	18c0      	adds	r0, r0, r3
 800e5e4:	9901      	ldr	r1, [sp, #4]
 800e5e6:	f7ff fa01 	bl	800d9ec <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5ea:	4b1c      	ldr	r3, [pc, #112]	; (800e65c <xTaskIncrementTick+0x10c>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d3d3      	bcc.n	800e59e <xTaskIncrementTick+0x4e>
								xSwitchRequired = pdTRUE;
 800e5f6:	2701      	movs	r7, #1
 800e5f8:	e7d1      	b.n	800e59e <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800e5fa:	4b15      	ldr	r3, [pc, #84]	; (800e650 <xTaskIncrementTick+0x100>)
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	4252      	negs	r2, r2
 800e600:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e602:	4b16      	ldr	r3, [pc, #88]	; (800e65c <xTaskIncrementTick+0x10c>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e608:	0093      	lsls	r3, r2, #2
 800e60a:	189b      	adds	r3, r3, r2
 800e60c:	009b      	lsls	r3, r3, #2
 800e60e:	4a12      	ldr	r2, [pc, #72]	; (800e658 <xTaskIncrementTick+0x108>)
 800e610:	589b      	ldr	r3, [r3, r2]
 800e612:	2b01      	cmp	r3, #1
 800e614:	d909      	bls.n	800e62a <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 800e616:	2701      	movs	r7, #1
 800e618:	e007      	b.n	800e62a <xTaskIncrementTick+0xda>
							xNextTaskUnblockTime = xItemValue;
 800e61a:	4a0d      	ldr	r2, [pc, #52]	; (800e650 <xTaskIncrementTick+0x100>)
 800e61c:	6013      	str	r3, [r2, #0]
							break;
 800e61e:	e7f0      	b.n	800e602 <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
 800e620:	4a0f      	ldr	r2, [pc, #60]	; (800e660 <xTaskIncrementTick+0x110>)
 800e622:	6813      	ldr	r3, [r2, #0]
 800e624:	3301      	adds	r3, #1
 800e626:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e628:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800e62a:	4b0e      	ldr	r3, [pc, #56]	; (800e664 <xTaskIncrementTick+0x114>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d000      	beq.n	800e634 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 800e632:	2701      	movs	r7, #1
}
 800e634:	0038      	movs	r0, r7
 800e636:	b003      	add	sp, #12
 800e638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e63a:	46c0      	nop			; (mov r8, r8)
 800e63c:	20001e00 	.word	0x20001e00
 800e640:	20001e7c 	.word	0x20001e7c
 800e644:	20001d60 	.word	0x20001d60
 800e648:	20001d64 	.word	0x20001d64
 800e64c:	20001e38 	.word	0x20001e38
 800e650:	200000a0 	.word	0x200000a0
 800e654:	20001e0c 	.word	0x20001e0c
 800e658:	20001d68 	.word	0x20001d68
 800e65c:	20001d5c 	.word	0x20001d5c
 800e660:	20001dfc 	.word	0x20001dfc
 800e664:	20001e80 	.word	0x20001e80

0800e668 <xTaskResumeAll>:
{
 800e668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800e66a:	4b2f      	ldr	r3, [pc, #188]	; (800e728 <xTaskResumeAll+0xc0>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d101      	bne.n	800e676 <xTaskResumeAll+0xe>
 800e672:	b672      	cpsid	i
 800e674:	e7fe      	b.n	800e674 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800e676:	f000 fe91 	bl	800f39c <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e67a:	4b2b      	ldr	r3, [pc, #172]	; (800e728 <xTaskResumeAll+0xc0>)
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	3a01      	subs	r2, #1
 800e680:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e682:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800e684:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e686:	42a3      	cmp	r3, r4
 800e688:	d105      	bne.n	800e696 <xTaskResumeAll+0x2e>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e68a:	4b28      	ldr	r3, [pc, #160]	; (800e72c <xTaskResumeAll+0xc4>)
 800e68c:	681b      	ldr	r3, [r3, #0]
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e68e:	4d28      	ldr	r5, [pc, #160]	; (800e730 <xTaskResumeAll+0xc8>)
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e690:	42a3      	cmp	r3, r4
 800e692:	d12a      	bne.n	800e6ea <xTaskResumeAll+0x82>
BaseType_t xAlreadyYielded = pdFALSE;
 800e694:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e696:	f000 fe8d 	bl	800f3b4 <vPortExitCritical>
}
 800e69a:	0020      	movs	r0, r4
 800e69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
 800e69e:	0098      	lsls	r0, r3, #2
 800e6a0:	18c0      	adds	r0, r0, r3
 800e6a2:	0080      	lsls	r0, r0, #2
 800e6a4:	4b23      	ldr	r3, [pc, #140]	; (800e734 <xTaskResumeAll+0xcc>)
 800e6a6:	18c0      	adds	r0, r0, r3
 800e6a8:	0021      	movs	r1, r4
 800e6aa:	f7ff f99f 	bl	800d9ec <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6ae:	4b22      	ldr	r3, [pc, #136]	; (800e738 <xTaskResumeAll+0xd0>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d214      	bcs.n	800e6e4 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6ba:	6833      	ldr	r3, [r6, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d016      	beq.n	800e6ee <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e6c0:	68eb      	ldr	r3, [r5, #12]
 800e6c2:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6c4:	0038      	movs	r0, r7
 800e6c6:	3018      	adds	r0, #24
 800e6c8:	f7ff f9b3 	bl	800da32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e6cc:	1d3c      	adds	r4, r7, #4
 800e6ce:	0020      	movs	r0, r4
 800e6d0:	f7ff f9af 	bl	800da32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d6:	4a19      	ldr	r2, [pc, #100]	; (800e73c <xTaskResumeAll+0xd4>)
 800e6d8:	6812      	ldr	r2, [r2, #0]
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d9df      	bls.n	800e69e <xTaskResumeAll+0x36>
 800e6de:	4a17      	ldr	r2, [pc, #92]	; (800e73c <xTaskResumeAll+0xd4>)
 800e6e0:	6013      	str	r3, [r2, #0]
 800e6e2:	e7dc      	b.n	800e69e <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
 800e6e4:	4b16      	ldr	r3, [pc, #88]	; (800e740 <xTaskResumeAll+0xd8>)
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6ea:	4e11      	ldr	r6, [pc, #68]	; (800e730 <xTaskResumeAll+0xc8>)
 800e6ec:	e7e5      	b.n	800e6ba <xTaskResumeAll+0x52>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800e6ee:	4b15      	ldr	r3, [pc, #84]	; (800e744 <xTaskResumeAll+0xdc>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d005      	beq.n	800e702 <xTaskResumeAll+0x9a>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e6f6:	4e13      	ldr	r6, [pc, #76]	; (800e744 <xTaskResumeAll+0xdc>)
							xYieldPending = pdTRUE;
 800e6f8:	4c11      	ldr	r4, [pc, #68]	; (800e740 <xTaskResumeAll+0xd8>)
 800e6fa:	2501      	movs	r5, #1
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800e6fc:	6833      	ldr	r3, [r6, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d108      	bne.n	800e714 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
 800e702:	4b0f      	ldr	r3, [pc, #60]	; (800e740 <xTaskResumeAll+0xd8>)
 800e704:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800e706:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d1c4      	bne.n	800e696 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800e70c:	f000 fe3a 	bl	800f384 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800e710:	3401      	adds	r4, #1
 800e712:	e7c0      	b.n	800e696 <xTaskResumeAll+0x2e>
						if( xTaskIncrementTick() != pdFALSE )
 800e714:	f7ff ff1c 	bl	800e550 <xTaskIncrementTick>
 800e718:	2800      	cmp	r0, #0
 800e71a:	d000      	beq.n	800e71e <xTaskResumeAll+0xb6>
							xYieldPending = pdTRUE;
 800e71c:	6025      	str	r5, [r4, #0]
						--uxPendedTicks;
 800e71e:	4a09      	ldr	r2, [pc, #36]	; (800e744 <xTaskResumeAll+0xdc>)
 800e720:	6813      	ldr	r3, [r2, #0]
 800e722:	3b01      	subs	r3, #1
 800e724:	6013      	str	r3, [r2, #0]
 800e726:	e7e9      	b.n	800e6fc <xTaskResumeAll+0x94>
 800e728:	20001e00 	.word	0x20001e00
 800e72c:	20001df8 	.word	0x20001df8
 800e730:	20001e3c 	.word	0x20001e3c
 800e734:	20001d68 	.word	0x20001d68
 800e738:	20001d5c 	.word	0x20001d5c
 800e73c:	20001e0c 	.word	0x20001e0c
 800e740:	20001e80 	.word	0x20001e80
 800e744:	20001dfc 	.word	0x20001dfc

0800e748 <vTaskDelay>:
	{
 800e748:	b570      	push	{r4, r5, r6, lr}
 800e74a:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e74c:	d016      	beq.n	800e77c <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800e74e:	4b0d      	ldr	r3, [pc, #52]	; (800e784 <vTaskDelay+0x3c>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d001      	beq.n	800e75a <vTaskDelay+0x12>
 800e756:	b672      	cpsid	i
 800e758:	e7fe      	b.n	800e758 <vTaskDelay+0x10>
			vTaskSuspendAll();
 800e75a:	f7ff fee5 	bl	800e528 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800e75e:	4b0a      	ldr	r3, [pc, #40]	; (800e788 <vTaskDelay+0x40>)
 800e760:	681c      	ldr	r4, [r3, #0]
 800e762:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e764:	4b09      	ldr	r3, [pc, #36]	; (800e78c <vTaskDelay+0x44>)
 800e766:	6818      	ldr	r0, [r3, #0]
 800e768:	3004      	adds	r0, #4
 800e76a:	f7ff f962 	bl	800da32 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e76e:	0020      	movs	r0, r4
 800e770:	f7ff fd14 	bl	800e19c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e774:	f7ff ff78 	bl	800e668 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e778:	2800      	cmp	r0, #0
 800e77a:	d101      	bne.n	800e780 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800e77c:	f000 fe02 	bl	800f384 <vPortYield>
	}
 800e780:	bd70      	pop	{r4, r5, r6, pc}
 800e782:	46c0      	nop			; (mov r8, r8)
 800e784:	20001e00 	.word	0x20001e00
 800e788:	20001e7c 	.word	0x20001e7c
 800e78c:	20001d5c 	.word	0x20001d5c

0800e790 <prvIdleTask>:
{
 800e790:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e792:	4d16      	ldr	r5, [pc, #88]	; (800e7ec <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e794:	4e16      	ldr	r6, [pc, #88]	; (800e7f0 <prvIdleTask+0x60>)
 800e796:	e003      	b.n	800e7a0 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e798:	4b16      	ldr	r3, [pc, #88]	; (800e7f4 <prvIdleTask+0x64>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d822      	bhi.n	800e7e6 <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800e7a0:	682b      	ldr	r3, [r5, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d0f8      	beq.n	800e798 <prvIdleTask+0x8>
			vTaskSuspendAll();
 800e7a6:	f7ff febf 	bl	800e528 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800e7aa:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800e7ac:	f7ff ff5c 	bl	800e668 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800e7b0:	2c00      	cmp	r4, #0
 800e7b2:	d0f5      	beq.n	800e7a0 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800e7b4:	f000 fdf2 	bl	800f39c <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e7b8:	4b0d      	ldr	r3, [pc, #52]	; (800e7f0 <prvIdleTask+0x60>)
 800e7ba:	68db      	ldr	r3, [r3, #12]
 800e7bc:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e7be:	1d20      	adds	r0, r4, #4
 800e7c0:	f7ff f937 	bl	800da32 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800e7c4:	4a0c      	ldr	r2, [pc, #48]	; (800e7f8 <prvIdleTask+0x68>)
 800e7c6:	6813      	ldr	r3, [r2, #0]
 800e7c8:	3b01      	subs	r3, #1
 800e7ca:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800e7cc:	4a07      	ldr	r2, [pc, #28]	; (800e7ec <prvIdleTask+0x5c>)
 800e7ce:	6813      	ldr	r3, [r2, #0]
 800e7d0:	3b01      	subs	r3, #1
 800e7d2:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800e7d4:	f000 fdee 	bl	800f3b4 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800e7d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e7da:	f000 fef7 	bl	800f5cc <vPortFree>
		vPortFree( pxTCB );
 800e7de:	0020      	movs	r0, r4
 800e7e0:	f000 fef4 	bl	800f5cc <vPortFree>
 800e7e4:	e7dc      	b.n	800e7a0 <prvIdleTask+0x10>
				taskYIELD();
 800e7e6:	f000 fdcd 	bl	800f384 <vPortYield>
 800e7ea:	e7d9      	b.n	800e7a0 <prvIdleTask+0x10>
 800e7ec:	20001e08 	.word	0x20001e08
 800e7f0:	20001e68 	.word	0x20001e68
 800e7f4:	20001d68 	.word	0x20001d68
 800e7f8:	20001df8 	.word	0x20001df8

0800e7fc <uxTaskGetSystemState>:
	{
 800e7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7fe:	46c6      	mov	lr, r8
 800e800:	b500      	push	{lr}
 800e802:	0006      	movs	r6, r0
 800e804:	000d      	movs	r5, r1
 800e806:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800e808:	f7ff fe8e 	bl	800e528 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e80c:	4b1e      	ldr	r3, [pc, #120]	; (800e888 <uxTaskGetSystemState+0x8c>)
 800e80e:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800e810:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800e812:	42ab      	cmp	r3, r5
 800e814:	d831      	bhi.n	800e87a <uxTaskGetSystemState+0x7e>
 800e816:	4d1d      	ldr	r5, [pc, #116]	; (800e88c <uxTaskGetSystemState+0x90>)
 800e818:	002f      	movs	r7, r5
 800e81a:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800e81c:	0160      	lsls	r0, r4, #5
 800e81e:	1830      	adds	r0, r6, r0
 800e820:	2201      	movs	r2, #1
 800e822:	0029      	movs	r1, r5
 800e824:	f7ff fc50 	bl	800e0c8 <prvListTaskWithinSingleList>
 800e828:	1824      	adds	r4, r4, r0
 800e82a:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e82c:	42bd      	cmp	r5, r7
 800e82e:	d1f5      	bne.n	800e81c <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800e830:	4b17      	ldr	r3, [pc, #92]	; (800e890 <uxTaskGetSystemState+0x94>)
 800e832:	6819      	ldr	r1, [r3, #0]
 800e834:	0160      	lsls	r0, r4, #5
 800e836:	1830      	adds	r0, r6, r0
 800e838:	2202      	movs	r2, #2
 800e83a:	f7ff fc45 	bl	800e0c8 <prvListTaskWithinSingleList>
 800e83e:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800e840:	4b14      	ldr	r3, [pc, #80]	; (800e894 <uxTaskGetSystemState+0x98>)
 800e842:	6819      	ldr	r1, [r3, #0]
 800e844:	0160      	lsls	r0, r4, #5
 800e846:	1830      	adds	r0, r6, r0
 800e848:	2202      	movs	r2, #2
 800e84a:	f7ff fc3d 	bl	800e0c8 <prvListTaskWithinSingleList>
 800e84e:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800e850:	0160      	lsls	r0, r4, #5
 800e852:	1830      	adds	r0, r6, r0
 800e854:	2204      	movs	r2, #4
 800e856:	4910      	ldr	r1, [pc, #64]	; (800e898 <uxTaskGetSystemState+0x9c>)
 800e858:	f7ff fc36 	bl	800e0c8 <prvListTaskWithinSingleList>
 800e85c:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800e85e:	0160      	lsls	r0, r4, #5
 800e860:	1830      	adds	r0, r6, r0
 800e862:	2203      	movs	r2, #3
 800e864:	490d      	ldr	r1, [pc, #52]	; (800e89c <uxTaskGetSystemState+0xa0>)
 800e866:	f7ff fc2f 	bl	800e0c8 <prvListTaskWithinSingleList>
 800e86a:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800e86c:	4643      	mov	r3, r8
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d003      	beq.n	800e87a <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e872:	f7f9 fbf5 	bl	8008060 <ulMainGetRunTimeCounterValue>
 800e876:	4643      	mov	r3, r8
 800e878:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800e87a:	f7ff fef5 	bl	800e668 <xTaskResumeAll>
	}
 800e87e:	0020      	movs	r0, r4
 800e880:	bc04      	pop	{r2}
 800e882:	4690      	mov	r8, r2
 800e884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e886:	46c0      	nop			; (mov r8, r8)
 800e888:	20001df8 	.word	0x20001df8
 800e88c:	20001de0 	.word	0x20001de0
 800e890:	20001d60 	.word	0x20001d60
 800e894:	20001d64 	.word	0x20001d64
 800e898:	20001e68 	.word	0x20001e68
 800e89c:	20001e54 	.word	0x20001e54

0800e8a0 <vTaskSwitchContext>:
{
 800e8a0:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e8a2:	4b3a      	ldr	r3, [pc, #232]	; (800e98c <vTaskSwitchContext+0xec>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d003      	beq.n	800e8b2 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800e8aa:	4b39      	ldr	r3, [pc, #228]	; (800e990 <vTaskSwitchContext+0xf0>)
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	601a      	str	r2, [r3, #0]
}
 800e8b0:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800e8b2:	4b37      	ldr	r3, [pc, #220]	; (800e990 <vTaskSwitchContext+0xf0>)
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e8b8:	f7f9 fbd2 	bl	8008060 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e8bc:	4b35      	ldr	r3, [pc, #212]	; (800e994 <vTaskSwitchContext+0xf4>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4298      	cmp	r0, r3
 800e8c2:	d905      	bls.n	800e8d0 <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e8c4:	4a34      	ldr	r2, [pc, #208]	; (800e998 <vTaskSwitchContext+0xf8>)
 800e8c6:	6812      	ldr	r2, [r2, #0]
 800e8c8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800e8ca:	1acb      	subs	r3, r1, r3
 800e8cc:	181b      	adds	r3, r3, r0
 800e8ce:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800e8d0:	4b30      	ldr	r3, [pc, #192]	; (800e994 <vTaskSwitchContext+0xf4>)
 800e8d2:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e8d4:	4b30      	ldr	r3, [pc, #192]	; (800e998 <vTaskSwitchContext+0xf8>)
 800e8d6:	681a      	ldr	r2, [r3, #0]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	6812      	ldr	r2, [r2, #0]
 800e8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d805      	bhi.n	800e8ee <vTaskSwitchContext+0x4e>
 800e8e2:	4b2d      	ldr	r3, [pc, #180]	; (800e998 <vTaskSwitchContext+0xf8>)
 800e8e4:	6818      	ldr	r0, [r3, #0]
 800e8e6:	6819      	ldr	r1, [r3, #0]
 800e8e8:	3134      	adds	r1, #52	; 0x34
 800e8ea:	f7fe f9af 	bl	800cc4c <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800e8ee:	4b2a      	ldr	r3, [pc, #168]	; (800e998 <vTaskSwitchContext+0xf8>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e8f4:	2214      	movs	r2, #20
 800e8f6:	4929      	ldr	r1, [pc, #164]	; (800e99c <vTaskSwitchContext+0xfc>)
 800e8f8:	f004 fb42 	bl	8012f80 <memcmp>
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	d005      	beq.n	800e90c <vTaskSwitchContext+0x6c>
 800e900:	4b25      	ldr	r3, [pc, #148]	; (800e998 <vTaskSwitchContext+0xf8>)
 800e902:	6818      	ldr	r0, [r3, #0]
 800e904:	6819      	ldr	r1, [r3, #0]
 800e906:	3134      	adds	r1, #52	; 0x34
 800e908:	f7fe f9a0 	bl	800cc4c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e90c:	4b24      	ldr	r3, [pc, #144]	; (800e9a0 <vTaskSwitchContext+0x100>)
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	0093      	lsls	r3, r2, #2
 800e912:	189b      	adds	r3, r3, r2
 800e914:	009b      	lsls	r3, r3, #2
 800e916:	4a23      	ldr	r2, [pc, #140]	; (800e9a4 <vTaskSwitchContext+0x104>)
 800e918:	589b      	ldr	r3, [r3, r2]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d115      	bne.n	800e94a <vTaskSwitchContext+0xaa>
 800e91e:	4b20      	ldr	r3, [pc, #128]	; (800e9a0 <vTaskSwitchContext+0x100>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d00f      	beq.n	800e946 <vTaskSwitchContext+0xa6>
 800e926:	4a1e      	ldr	r2, [pc, #120]	; (800e9a0 <vTaskSwitchContext+0x100>)
 800e928:	4c1e      	ldr	r4, [pc, #120]	; (800e9a4 <vTaskSwitchContext+0x104>)
 800e92a:	0010      	movs	r0, r2
 800e92c:	6813      	ldr	r3, [r2, #0]
 800e92e:	3b01      	subs	r3, #1
 800e930:	6013      	str	r3, [r2, #0]
 800e932:	6811      	ldr	r1, [r2, #0]
 800e934:	008b      	lsls	r3, r1, #2
 800e936:	185b      	adds	r3, r3, r1
 800e938:	009b      	lsls	r3, r3, #2
 800e93a:	591b      	ldr	r3, [r3, r4]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d104      	bne.n	800e94a <vTaskSwitchContext+0xaa>
 800e940:	6803      	ldr	r3, [r0, #0]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d1f2      	bne.n	800e92c <vTaskSwitchContext+0x8c>
 800e946:	b672      	cpsid	i
 800e948:	e7fe      	b.n	800e948 <vTaskSwitchContext+0xa8>
 800e94a:	4b15      	ldr	r3, [pc, #84]	; (800e9a0 <vTaskSwitchContext+0x100>)
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	4c15      	ldr	r4, [pc, #84]	; (800e9a4 <vTaskSwitchContext+0x104>)
 800e950:	0093      	lsls	r3, r2, #2
 800e952:	1899      	adds	r1, r3, r2
 800e954:	0089      	lsls	r1, r1, #2
 800e956:	1861      	adds	r1, r4, r1
 800e958:	6848      	ldr	r0, [r1, #4]
 800e95a:	6840      	ldr	r0, [r0, #4]
 800e95c:	6048      	str	r0, [r1, #4]
 800e95e:	189b      	adds	r3, r3, r2
 800e960:	009b      	lsls	r3, r3, #2
 800e962:	3308      	adds	r3, #8
 800e964:	191b      	adds	r3, r3, r4
 800e966:	4298      	cmp	r0, r3
 800e968:	d009      	beq.n	800e97e <vTaskSwitchContext+0xde>
 800e96a:	0093      	lsls	r3, r2, #2
 800e96c:	189a      	adds	r2, r3, r2
 800e96e:	0092      	lsls	r2, r2, #2
 800e970:	4b0c      	ldr	r3, [pc, #48]	; (800e9a4 <vTaskSwitchContext+0x104>)
 800e972:	189a      	adds	r2, r3, r2
 800e974:	6853      	ldr	r3, [r2, #4]
 800e976:	68da      	ldr	r2, [r3, #12]
 800e978:	4b07      	ldr	r3, [pc, #28]	; (800e998 <vTaskSwitchContext+0xf8>)
 800e97a:	601a      	str	r2, [r3, #0]
}
 800e97c:	e798      	b.n	800e8b0 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e97e:	6840      	ldr	r0, [r0, #4]
 800e980:	2114      	movs	r1, #20
 800e982:	4351      	muls	r1, r2
 800e984:	1863      	adds	r3, r4, r1
 800e986:	6058      	str	r0, [r3, #4]
 800e988:	e7ef      	b.n	800e96a <vTaskSwitchContext+0xca>
 800e98a:	46c0      	nop			; (mov r8, r8)
 800e98c:	20001e00 	.word	0x20001e00
 800e990:	20001e80 	.word	0x20001e80
 800e994:	20001df4 	.word	0x20001df4
 800e998:	20001d5c 	.word	0x20001d5c
 800e99c:	0801a5ac 	.word	0x0801a5ac
 800e9a0:	20001e0c 	.word	0x20001e0c
 800e9a4:	20001d68 	.word	0x20001d68

0800e9a8 <vTaskPlaceOnEventList>:
{
 800e9a8:	b570      	push	{r4, r5, r6, lr}
 800e9aa:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800e9ac:	2800      	cmp	r0, #0
 800e9ae:	d101      	bne.n	800e9b4 <vTaskPlaceOnEventList+0xc>
 800e9b0:	b672      	cpsid	i
 800e9b2:	e7fe      	b.n	800e9b2 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9b4:	4d0b      	ldr	r5, [pc, #44]	; (800e9e4 <vTaskPlaceOnEventList+0x3c>)
 800e9b6:	6829      	ldr	r1, [r5, #0]
 800e9b8:	3118      	adds	r1, #24
 800e9ba:	f7ff f823 	bl	800da04 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e9be:	6828      	ldr	r0, [r5, #0]
 800e9c0:	3004      	adds	r0, #4
 800e9c2:	f7ff f836 	bl	800da32 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800e9c6:	1c63      	adds	r3, r4, #1
 800e9c8:	d005      	beq.n	800e9d6 <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800e9ca:	4b07      	ldr	r3, [pc, #28]	; (800e9e8 <vTaskPlaceOnEventList+0x40>)
 800e9cc:	6818      	ldr	r0, [r3, #0]
 800e9ce:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e9d0:	f7ff fbe4 	bl	800e19c <prvAddCurrentTaskToDelayedList>
}
 800e9d4:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e9d6:	4b03      	ldr	r3, [pc, #12]	; (800e9e4 <vTaskPlaceOnEventList+0x3c>)
 800e9d8:	6819      	ldr	r1, [r3, #0]
 800e9da:	3104      	adds	r1, #4
 800e9dc:	4803      	ldr	r0, [pc, #12]	; (800e9ec <vTaskPlaceOnEventList+0x44>)
 800e9de:	f7ff f805 	bl	800d9ec <vListInsertEnd>
 800e9e2:	e7f7      	b.n	800e9d4 <vTaskPlaceOnEventList+0x2c>
 800e9e4:	20001d5c 	.word	0x20001d5c
 800e9e8:	20001e7c 	.word	0x20001e7c
 800e9ec:	20001e54 	.word	0x20001e54

0800e9f0 <vTaskPlaceOnEventListRestricted>:
	{
 800e9f0:	b570      	push	{r4, r5, r6, lr}
 800e9f2:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800e9f4:	2800      	cmp	r0, #0
 800e9f6:	d101      	bne.n	800e9fc <vTaskPlaceOnEventListRestricted+0xc>
 800e9f8:	b672      	cpsid	i
 800e9fa:	e7fe      	b.n	800e9fa <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9fc:	4c07      	ldr	r4, [pc, #28]	; (800ea1c <vTaskPlaceOnEventListRestricted+0x2c>)
 800e9fe:	6821      	ldr	r1, [r4, #0]
 800ea00:	3118      	adds	r1, #24
 800ea02:	f7fe fff3 	bl	800d9ec <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ea06:	6820      	ldr	r0, [r4, #0]
 800ea08:	3004      	adds	r0, #4
 800ea0a:	f7ff f812 	bl	800da32 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800ea0e:	4b04      	ldr	r3, [pc, #16]	; (800ea20 <vTaskPlaceOnEventListRestricted+0x30>)
 800ea10:	6818      	ldr	r0, [r3, #0]
 800ea12:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ea14:	f7ff fbc2 	bl	800e19c <prvAddCurrentTaskToDelayedList>
	}
 800ea18:	bd70      	pop	{r4, r5, r6, pc}
 800ea1a:	46c0      	nop			; (mov r8, r8)
 800ea1c:	20001d5c 	.word	0x20001d5c
 800ea20:	20001e7c 	.word	0x20001e7c

0800ea24 <xTaskRemoveFromEventList>:
{
 800ea24:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ea26:	68c3      	ldr	r3, [r0, #12]
 800ea28:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ea2a:	2d00      	cmp	r5, #0
 800ea2c:	d101      	bne.n	800ea32 <xTaskRemoveFromEventList+0xe>
 800ea2e:	b672      	cpsid	i
 800ea30:	e7fe      	b.n	800ea30 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ea32:	002c      	movs	r4, r5
 800ea34:	3418      	adds	r4, #24
 800ea36:	0020      	movs	r0, r4
 800ea38:	f7fe fffb 	bl	800da32 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea3c:	4b13      	ldr	r3, [pc, #76]	; (800ea8c <xTaskRemoveFromEventList+0x68>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d11e      	bne.n	800ea82 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800ea44:	1d2c      	adds	r4, r5, #4
 800ea46:	0020      	movs	r0, r4
 800ea48:	f7fe fff3 	bl	800da32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea4c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ea4e:	4a10      	ldr	r2, [pc, #64]	; (800ea90 <xTaskRemoveFromEventList+0x6c>)
 800ea50:	6812      	ldr	r2, [r2, #0]
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d901      	bls.n	800ea5a <xTaskRemoveFromEventList+0x36>
 800ea56:	4a0e      	ldr	r2, [pc, #56]	; (800ea90 <xTaskRemoveFromEventList+0x6c>)
 800ea58:	6013      	str	r3, [r2, #0]
 800ea5a:	0098      	lsls	r0, r3, #2
 800ea5c:	18c0      	adds	r0, r0, r3
 800ea5e:	0080      	lsls	r0, r0, #2
 800ea60:	4b0c      	ldr	r3, [pc, #48]	; (800ea94 <xTaskRemoveFromEventList+0x70>)
 800ea62:	18c0      	adds	r0, r0, r3
 800ea64:	0021      	movs	r1, r4
 800ea66:	f7fe ffc1 	bl	800d9ec <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea6a:	4b0b      	ldr	r3, [pc, #44]	; (800ea98 <xTaskRemoveFromEventList+0x74>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800ea70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800ea72:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d903      	bls.n	800ea80 <xTaskRemoveFromEventList+0x5c>
		xYieldPending = pdTRUE;
 800ea78:	4b08      	ldr	r3, [pc, #32]	; (800ea9c <xTaskRemoveFromEventList+0x78>)
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800ea7e:	3001      	adds	r0, #1
}
 800ea80:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ea82:	0021      	movs	r1, r4
 800ea84:	4806      	ldr	r0, [pc, #24]	; (800eaa0 <xTaskRemoveFromEventList+0x7c>)
 800ea86:	f7fe ffb1 	bl	800d9ec <vListInsertEnd>
 800ea8a:	e7ee      	b.n	800ea6a <xTaskRemoveFromEventList+0x46>
 800ea8c:	20001e00 	.word	0x20001e00
 800ea90:	20001e0c 	.word	0x20001e0c
 800ea94:	20001d68 	.word	0x20001d68
 800ea98:	20001d5c 	.word	0x20001d5c
 800ea9c:	20001e80 	.word	0x20001e80
 800eaa0:	20001e3c 	.word	0x20001e3c

0800eaa4 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	d006      	beq.n	800eab6 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eaa8:	4b04      	ldr	r3, [pc, #16]	; (800eabc <vTaskSetTimeOutState+0x18>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eaae:	4b04      	ldr	r3, [pc, #16]	; (800eac0 <vTaskSetTimeOutState+0x1c>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	6043      	str	r3, [r0, #4]
}
 800eab4:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800eab6:	b672      	cpsid	i
 800eab8:	e7fe      	b.n	800eab8 <vTaskSetTimeOutState+0x14>
 800eaba:	46c0      	nop			; (mov r8, r8)
 800eabc:	20001e38 	.word	0x20001e38
 800eac0:	20001e7c 	.word	0x20001e7c

0800eac4 <xTaskCheckForTimeOut>:
{
 800eac4:	b570      	push	{r4, r5, r6, lr}
 800eac6:	0004      	movs	r4, r0
 800eac8:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800eaca:	2800      	cmp	r0, #0
 800eacc:	d003      	beq.n	800ead6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800eace:	2900      	cmp	r1, #0
 800ead0:	d103      	bne.n	800eada <xTaskCheckForTimeOut+0x16>
 800ead2:	b672      	cpsid	i
 800ead4:	e7fe      	b.n	800ead4 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 800ead6:	b672      	cpsid	i
 800ead8:	e7fe      	b.n	800ead8 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800eada:	f000 fc5f 	bl	800f39c <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800eade:	4b10      	ldr	r3, [pc, #64]	; (800eb20 <xTaskCheckForTimeOut+0x5c>)
 800eae0:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800eae2:	6833      	ldr	r3, [r6, #0]
 800eae4:	1c59      	adds	r1, r3, #1
 800eae6:	d019      	beq.n	800eb1c <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eae8:	490e      	ldr	r1, [pc, #56]	; (800eb24 <xTaskCheckForTimeOut+0x60>)
 800eaea:	6809      	ldr	r1, [r1, #0]
 800eaec:	6820      	ldr	r0, [r4, #0]
 800eaee:	4288      	cmp	r0, r1
 800eaf0:	d003      	beq.n	800eafa <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800eaf2:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eaf4:	6861      	ldr	r1, [r4, #4]
 800eaf6:	4291      	cmp	r1, r2
 800eaf8:	d904      	bls.n	800eb04 <xTaskCheckForTimeOut+0x40>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800eafa:	6861      	ldr	r1, [r4, #4]
 800eafc:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800eafe:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800eb00:	4283      	cmp	r3, r0
 800eb02:	d803      	bhi.n	800eb0c <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
 800eb04:	f000 fc56 	bl	800f3b4 <vPortExitCritical>
}
 800eb08:	0028      	movs	r0, r5
 800eb0a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800eb0c:	1a9b      	subs	r3, r3, r2
 800eb0e:	185b      	adds	r3, r3, r1
 800eb10:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800eb12:	0020      	movs	r0, r4
 800eb14:	f7ff ffc6 	bl	800eaa4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800eb18:	2500      	movs	r5, #0
 800eb1a:	e7f3      	b.n	800eb04 <xTaskCheckForTimeOut+0x40>
				xReturn = pdFALSE;
 800eb1c:	2500      	movs	r5, #0
 800eb1e:	e7f1      	b.n	800eb04 <xTaskCheckForTimeOut+0x40>
 800eb20:	20001e7c 	.word	0x20001e7c
 800eb24:	20001e38 	.word	0x20001e38

0800eb28 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800eb28:	4b01      	ldr	r3, [pc, #4]	; (800eb30 <vTaskMissedYield+0x8>)
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	601a      	str	r2, [r3, #0]
}
 800eb2e:	4770      	bx	lr
 800eb30:	20001e80 	.word	0x20001e80

0800eb34 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800eb34:	4b05      	ldr	r3, [pc, #20]	; (800eb4c <xTaskGetSchedulerState+0x18>)
 800eb36:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb38:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d004      	beq.n	800eb48 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb3e:	4b04      	ldr	r3, [pc, #16]	; (800eb50 <xTaskGetSchedulerState+0x1c>)
 800eb40:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800eb42:	4243      	negs	r3, r0
 800eb44:	4158      	adcs	r0, r3
 800eb46:	0040      	lsls	r0, r0, #1
	}
 800eb48:	4770      	bx	lr
 800eb4a:	46c0      	nop			; (mov r8, r8)
 800eb4c:	20001e50 	.word	0x20001e50
 800eb50:	20001e00 	.word	0x20001e00

0800eb54 <vTaskPriorityInherit>:
	{
 800eb54:	b570      	push	{r4, r5, r6, lr}
 800eb56:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800eb58:	d01a      	beq.n	800eb90 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eb5a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800eb5c:	4b19      	ldr	r3, [pc, #100]	; (800ebc4 <vTaskPriorityInherit+0x70>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d214      	bcs.n	800eb90 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eb66:	6983      	ldr	r3, [r0, #24]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	db05      	blt.n	800eb78 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb6c:	4b15      	ldr	r3, [pc, #84]	; (800ebc4 <vTaskPriorityInherit+0x70>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800eb72:	2307      	movs	r3, #7
 800eb74:	1a5b      	subs	r3, r3, r1
 800eb76:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800eb78:	0093      	lsls	r3, r2, #2
 800eb7a:	189b      	adds	r3, r3, r2
 800eb7c:	009b      	lsls	r3, r3, #2
 800eb7e:	4a12      	ldr	r2, [pc, #72]	; (800ebc8 <vTaskPriorityInherit+0x74>)
 800eb80:	189b      	adds	r3, r3, r2
 800eb82:	6962      	ldr	r2, [r4, #20]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d004      	beq.n	800eb92 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb88:	4b0e      	ldr	r3, [pc, #56]	; (800ebc4 <vTaskPriorityInherit+0x70>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb8e:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800eb90:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800eb92:	1d25      	adds	r5, r4, #4
 800eb94:	0028      	movs	r0, r5
 800eb96:	f7fe ff4c 	bl	800da32 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb9a:	4b0a      	ldr	r3, [pc, #40]	; (800ebc4 <vTaskPriorityInherit+0x70>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eba0:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800eba2:	4a0a      	ldr	r2, [pc, #40]	; (800ebcc <vTaskPriorityInherit+0x78>)
 800eba4:	6812      	ldr	r2, [r2, #0]
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d808      	bhi.n	800ebbc <vTaskPriorityInherit+0x68>
 800ebaa:	0098      	lsls	r0, r3, #2
 800ebac:	18c0      	adds	r0, r0, r3
 800ebae:	0080      	lsls	r0, r0, #2
 800ebb0:	4b05      	ldr	r3, [pc, #20]	; (800ebc8 <vTaskPriorityInherit+0x74>)
 800ebb2:	18c0      	adds	r0, r0, r3
 800ebb4:	0029      	movs	r1, r5
 800ebb6:	f7fe ff19 	bl	800d9ec <vListInsertEnd>
	}
 800ebba:	e7e9      	b.n	800eb90 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800ebbc:	4a03      	ldr	r2, [pc, #12]	; (800ebcc <vTaskPriorityInherit+0x78>)
 800ebbe:	6013      	str	r3, [r2, #0]
 800ebc0:	e7f3      	b.n	800ebaa <vTaskPriorityInherit+0x56>
 800ebc2:	46c0      	nop			; (mov r8, r8)
 800ebc4:	20001d5c 	.word	0x20001d5c
 800ebc8:	20001d68 	.word	0x20001d68
 800ebcc:	20001e0c 	.word	0x20001e0c

0800ebd0 <xTaskPriorityDisinherit>:
	{
 800ebd0:	b570      	push	{r4, r5, r6, lr}
 800ebd2:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800ebd4:	d02b      	beq.n	800ec2e <xTaskPriorityDisinherit+0x5e>
			configASSERT( pxTCB == pxCurrentTCB );
 800ebd6:	4b18      	ldr	r3, [pc, #96]	; (800ec38 <xTaskPriorityDisinherit+0x68>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	4283      	cmp	r3, r0
 800ebdc:	d001      	beq.n	800ebe2 <xTaskPriorityDisinherit+0x12>
 800ebde:	b672      	cpsid	i
 800ebe0:	e7fe      	b.n	800ebe0 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800ebe2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d101      	bne.n	800ebec <xTaskPriorityDisinherit+0x1c>
 800ebe8:	b672      	cpsid	i
 800ebea:	e7fe      	b.n	800ebea <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800ebec:	3b01      	subs	r3, #1
 800ebee:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ebf0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ebf2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800ebf4:	428a      	cmp	r2, r1
 800ebf6:	d01c      	beq.n	800ec32 <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800ebf8:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ebfa:	4283      	cmp	r3, r0
 800ebfc:	d118      	bne.n	800ec30 <xTaskPriorityDisinherit+0x60>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ebfe:	1d25      	adds	r5, r4, #4
 800ec00:	0028      	movs	r0, r5
 800ec02:	f7fe ff16 	bl	800da32 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec06:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ec08:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec0a:	2207      	movs	r2, #7
 800ec0c:	1ad2      	subs	r2, r2, r3
 800ec0e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec10:	4a0a      	ldr	r2, [pc, #40]	; (800ec3c <xTaskPriorityDisinherit+0x6c>)
 800ec12:	6812      	ldr	r2, [r2, #0]
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d901      	bls.n	800ec1c <xTaskPriorityDisinherit+0x4c>
 800ec18:	4a08      	ldr	r2, [pc, #32]	; (800ec3c <xTaskPriorityDisinherit+0x6c>)
 800ec1a:	6013      	str	r3, [r2, #0]
 800ec1c:	2014      	movs	r0, #20
 800ec1e:	4358      	muls	r0, r3
 800ec20:	4b07      	ldr	r3, [pc, #28]	; (800ec40 <xTaskPriorityDisinherit+0x70>)
 800ec22:	18c0      	adds	r0, r0, r3
 800ec24:	0029      	movs	r1, r5
 800ec26:	f7fe fee1 	bl	800d9ec <vListInsertEnd>
					xReturn = pdTRUE;
 800ec2a:	2001      	movs	r0, #1
 800ec2c:	e000      	b.n	800ec30 <xTaskPriorityDisinherit+0x60>
	BaseType_t xReturn = pdFALSE;
 800ec2e:	2000      	movs	r0, #0
	}
 800ec30:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800ec32:	2000      	movs	r0, #0
 800ec34:	e7fc      	b.n	800ec30 <xTaskPriorityDisinherit+0x60>
 800ec36:	46c0      	nop			; (mov r8, r8)
 800ec38:	20001d5c 	.word	0x20001d5c
 800ec3c:	20001e0c 	.word	0x20001e0c
 800ec40:	20001d68 	.word	0x20001d68

0800ec44 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800ec44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec46:	b085      	sub	sp, #20
 800ec48:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ec4e:	4b2b      	ldr	r3, [pc, #172]	; (800ecfc <vTaskList+0xb8>)
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ec54:	6818      	ldr	r0, [r3, #0]
 800ec56:	0140      	lsls	r0, r0, #5
 800ec58:	f000 fc22 	bl	800f4a0 <pvPortMalloc>
 800ec5c:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800ec5e:	d04a      	beq.n	800ecf6 <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ec60:	9903      	ldr	r1, [sp, #12]
 800ec62:	2200      	movs	r2, #0
 800ec64:	f7ff fdca 	bl	800e7fc <uxTaskGetSystemState>
 800ec68:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	9302      	str	r3, [sp, #8]
 800ec6e:	9a02      	ldr	r2, [sp, #8]
 800ec70:	9b03      	ldr	r3, [sp, #12]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d23c      	bcs.n	800ecf0 <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ec76:	4e22      	ldr	r6, [pc, #136]	; (800ed00 <vTaskList+0xbc>)
 800ec78:	e027      	b.n	800ecca <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 800ec7a:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d133      	bne.n	800ece8 <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ec80:	9b02      	ldr	r3, [sp, #8]
 800ec82:	015b      	lsls	r3, r3, #5
 800ec84:	18fb      	adds	r3, r7, r3
 800ec86:	6859      	ldr	r1, [r3, #4]
 800ec88:	0020      	movs	r0, r4
 800ec8a:	f7ff fab1 	bl	800e1f0 <prvWriteNameToBuffer>
 800ec8e:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ec90:	9b02      	ldr	r3, [sp, #8]
 800ec92:	9a02      	ldr	r2, [sp, #8]
 800ec94:	9902      	ldr	r1, [sp, #8]
 800ec96:	015b      	lsls	r3, r3, #5
 800ec98:	18fb      	adds	r3, r7, r3
 800ec9a:	691b      	ldr	r3, [r3, #16]
 800ec9c:	0149      	lsls	r1, r1, #5
 800ec9e:	1879      	adds	r1, r7, r1
 800eca0:	6889      	ldr	r1, [r1, #8]
 800eca2:	9101      	str	r1, [sp, #4]
 800eca4:	0152      	lsls	r2, r2, #5
 800eca6:	18ba      	adds	r2, r7, r2
 800eca8:	8b92      	ldrh	r2, [r2, #28]
 800ecaa:	9200      	str	r2, [sp, #0]
 800ecac:	002a      	movs	r2, r5
 800ecae:	0031      	movs	r1, r6
 800ecb0:	f004 fb78 	bl	80133a4 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ecb4:	0020      	movs	r0, r4
 800ecb6:	f7f1 fa2f 	bl	8000118 <strlen>
 800ecba:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800ecbc:	9b02      	ldr	r3, [sp, #8]
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	9302      	str	r3, [sp, #8]
 800ecc2:	9a02      	ldr	r2, [sp, #8]
 800ecc4:	9b03      	ldr	r3, [sp, #12]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d212      	bcs.n	800ecf0 <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ecca:	9b02      	ldr	r3, [sp, #8]
 800eccc:	015b      	lsls	r3, r3, #5
 800ecce:	18fb      	adds	r3, r7, r3
 800ecd0:	7b1b      	ldrb	r3, [r3, #12]
 800ecd2:	2b02      	cmp	r3, #2
 800ecd4:	d00a      	beq.n	800ecec <vTaskList+0xa8>
 800ecd6:	b2da      	uxtb	r2, r3
 800ecd8:	2a02      	cmp	r2, #2
 800ecda:	d9ce      	bls.n	800ec7a <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800ecdc:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ecde:	2b03      	cmp	r3, #3
 800ece0:	d0ce      	beq.n	800ec80 <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800ece2:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ece4:	2b04      	cmp	r3, #4
 800ece6:	d0cb      	beq.n	800ec80 <vTaskList+0x3c>
										cStatus = 0x00;
 800ece8:	2500      	movs	r5, #0
										break;
 800ecea:	e7c9      	b.n	800ec80 <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ecec:	2542      	movs	r5, #66	; 0x42
 800ecee:	e7c7      	b.n	800ec80 <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ecf0:	0038      	movs	r0, r7
 800ecf2:	f000 fc6b 	bl	800f5cc <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ecf6:	b005      	add	sp, #20
 800ecf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecfa:	46c0      	nop			; (mov r8, r8)
 800ecfc:	20001df8 	.word	0x20001df8
 800ed00:	0801a5d8 	.word	0x0801a5d8

0800ed04 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800ed04:	b570      	push	{r4, r5, r6, lr}
 800ed06:	b084      	sub	sp, #16
 800ed08:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ed0e:	4b26      	ldr	r3, [pc, #152]	; (800eda8 <vTaskGetRunTimeStats+0xa4>)
 800ed10:	681a      	ldr	r2, [r3, #0]
 800ed12:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ed14:	6818      	ldr	r0, [r3, #0]
 800ed16:	0140      	lsls	r0, r0, #5
 800ed18:	f000 fbc2 	bl	800f4a0 <pvPortMalloc>
 800ed1c:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800ed1e:	d014      	beq.n	800ed4a <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ed20:	9903      	ldr	r1, [sp, #12]
 800ed22:	aa01      	add	r2, sp, #4
 800ed24:	f7ff fd6a 	bl	800e7fc <uxTaskGetSystemState>
 800ed28:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800ed2a:	2164      	movs	r1, #100	; 0x64
 800ed2c:	9801      	ldr	r0, [sp, #4]
 800ed2e:	f7f1 fa0f 	bl	8000150 <__udivsi3>
 800ed32:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800ed34:	2800      	cmp	r0, #0
 800ed36:	d005      	beq.n	800ed44 <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800ed38:	2300      	movs	r3, #0
 800ed3a:	9302      	str	r3, [sp, #8]
 800ed3c:	9a02      	ldr	r2, [sp, #8]
 800ed3e:	9b03      	ldr	r3, [sp, #12]
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d316      	bcc.n	800ed72 <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ed44:	0030      	movs	r0, r6
 800ed46:	f000 fc41 	bl	800f5cc <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed4a:	b004      	add	sp, #16
 800ed4c:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800ed4e:	9b02      	ldr	r3, [sp, #8]
 800ed50:	015b      	lsls	r3, r3, #5
 800ed52:	18f3      	adds	r3, r6, r3
 800ed54:	699a      	ldr	r2, [r3, #24]
 800ed56:	4915      	ldr	r1, [pc, #84]	; (800edac <vTaskGetRunTimeStats+0xa8>)
 800ed58:	f004 fb24 	bl	80133a4 <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800ed5c:	0020      	movs	r0, r4
 800ed5e:	f7f1 f9db 	bl	8000118 <strlen>
 800ed62:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800ed64:	9b02      	ldr	r3, [sp, #8]
 800ed66:	3301      	adds	r3, #1
 800ed68:	9302      	str	r3, [sp, #8]
 800ed6a:	9a02      	ldr	r2, [sp, #8]
 800ed6c:	9b03      	ldr	r3, [sp, #12]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d2e8      	bcs.n	800ed44 <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ed72:	9b02      	ldr	r3, [sp, #8]
 800ed74:	015b      	lsls	r3, r3, #5
 800ed76:	18f3      	adds	r3, r6, r3
 800ed78:	9901      	ldr	r1, [sp, #4]
 800ed7a:	6998      	ldr	r0, [r3, #24]
 800ed7c:	f7f1 f9e8 	bl	8000150 <__udivsi3>
 800ed80:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ed82:	9b02      	ldr	r3, [sp, #8]
 800ed84:	015b      	lsls	r3, r3, #5
 800ed86:	18f3      	adds	r3, r6, r3
 800ed88:	6859      	ldr	r1, [r3, #4]
 800ed8a:	0020      	movs	r0, r4
 800ed8c:	f7ff fa30 	bl	800e1f0 <prvWriteNameToBuffer>
 800ed90:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800ed92:	2d00      	cmp	r5, #0
 800ed94:	d0db      	beq.n	800ed4e <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ed96:	9b02      	ldr	r3, [sp, #8]
 800ed98:	015b      	lsls	r3, r3, #5
 800ed9a:	18f3      	adds	r3, r6, r3
 800ed9c:	699a      	ldr	r2, [r3, #24]
 800ed9e:	002b      	movs	r3, r5
 800eda0:	4903      	ldr	r1, [pc, #12]	; (800edb0 <vTaskGetRunTimeStats+0xac>)
 800eda2:	f004 faff 	bl	80133a4 <sprintf>
 800eda6:	e7d9      	b.n	800ed5c <vTaskGetRunTimeStats+0x58>
 800eda8:	20001df8 	.word	0x20001df8
 800edac:	0801a5cc 	.word	0x0801a5cc
 800edb0:	0801a5c0 	.word	0x0801a5c0

0800edb4 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800edb4:	4b05      	ldr	r3, [pc, #20]	; (800edcc <pvTaskIncrementMutexHeldCount+0x18>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d004      	beq.n	800edc6 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800edbc:	4b03      	ldr	r3, [pc, #12]	; (800edcc <pvTaskIncrementMutexHeldCount+0x18>)
 800edbe:	681a      	ldr	r2, [r3, #0]
 800edc0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800edc2:	3301      	adds	r3, #1
 800edc4:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800edc6:	4b01      	ldr	r3, [pc, #4]	; (800edcc <pvTaskIncrementMutexHeldCount+0x18>)
 800edc8:	6818      	ldr	r0, [r3, #0]
	}
 800edca:	4770      	bx	lr
 800edcc:	20001d5c 	.word	0x20001d5c

0800edd0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800edd0:	b570      	push	{r4, r5, r6, lr}
 800edd2:	0005      	movs	r5, r0
 800edd4:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800edd6:	f000 fae1 	bl	800f39c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800edda:	4b20      	ldr	r3, [pc, #128]	; (800ee5c <ulTaskNotifyTake+0x8c>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d106      	bne.n	800edf2 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800ede4:	4b1d      	ldr	r3, [pc, #116]	; (800ee5c <ulTaskNotifyTake+0x8c>)
 800ede6:	681a      	ldr	r2, [r3, #0]
 800ede8:	235c      	movs	r3, #92	; 0x5c
 800edea:	2101      	movs	r1, #1
 800edec:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800edee:	2c00      	cmp	r4, #0
 800edf0:	d118      	bne.n	800ee24 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800edf2:	f000 fadf 	bl	800f3b4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800edf6:	f000 fad1 	bl	800f39c <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800edfa:	4b18      	ldr	r3, [pc, #96]	; (800ee5c <ulTaskNotifyTake+0x8c>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800ee00:	2c00      	cmp	r4, #0
 800ee02:	d006      	beq.n	800ee12 <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 800ee04:	2d00      	cmp	r5, #0
 800ee06:	d123      	bne.n	800ee50 <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800ee08:	4b14      	ldr	r3, [pc, #80]	; (800ee5c <ulTaskNotifyTake+0x8c>)
 800ee0a:	681a      	ldr	r2, [r3, #0]
 800ee0c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ee0e:	3b01      	subs	r3, #1
 800ee10:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800ee12:	4b12      	ldr	r3, [pc, #72]	; (800ee5c <ulTaskNotifyTake+0x8c>)
 800ee14:	681a      	ldr	r2, [r3, #0]
 800ee16:	235c      	movs	r3, #92	; 0x5c
 800ee18:	2100      	movs	r1, #0
 800ee1a:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800ee1c:	f000 faca 	bl	800f3b4 <vPortExitCritical>

		return ulReturn;
	}
 800ee20:	0020      	movs	r0, r4
 800ee22:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ee24:	4b0d      	ldr	r3, [pc, #52]	; (800ee5c <ulTaskNotifyTake+0x8c>)
 800ee26:	6818      	ldr	r0, [r3, #0]
 800ee28:	3004      	adds	r0, #4
 800ee2a:	f7fe fe02 	bl	800da32 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800ee2e:	1c63      	adds	r3, r4, #1
 800ee30:	d007      	beq.n	800ee42 <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 800ee32:	4b0b      	ldr	r3, [pc, #44]	; (800ee60 <ulTaskNotifyTake+0x90>)
 800ee34:	6818      	ldr	r0, [r3, #0]
 800ee36:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ee38:	f7ff f9b0 	bl	800e19c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800ee3c:	f000 faa2 	bl	800f384 <vPortYield>
 800ee40:	e7d7      	b.n	800edf2 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ee42:	4b06      	ldr	r3, [pc, #24]	; (800ee5c <ulTaskNotifyTake+0x8c>)
 800ee44:	6819      	ldr	r1, [r3, #0]
 800ee46:	3104      	adds	r1, #4
 800ee48:	4806      	ldr	r0, [pc, #24]	; (800ee64 <ulTaskNotifyTake+0x94>)
 800ee4a:	f7fe fdcf 	bl	800d9ec <vListInsertEnd>
 800ee4e:	e7f5      	b.n	800ee3c <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ee50:	4b02      	ldr	r3, [pc, #8]	; (800ee5c <ulTaskNotifyTake+0x8c>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	2200      	movs	r2, #0
 800ee56:	659a      	str	r2, [r3, #88]	; 0x58
 800ee58:	e7db      	b.n	800ee12 <ulTaskNotifyTake+0x42>
 800ee5a:	46c0      	nop			; (mov r8, r8)
 800ee5c:	20001d5c 	.word	0x20001d5c
 800ee60:	20001e7c 	.word	0x20001e7c
 800ee64:	20001e54 	.word	0x20001e54

0800ee68 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ee68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee6a:	0004      	movs	r4, r0
 800ee6c:	000e      	movs	r6, r1
 800ee6e:	0015      	movs	r5, r2
 800ee70:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800ee72:	2800      	cmp	r0, #0
 800ee74:	d101      	bne.n	800ee7a <xTaskGenericNotify+0x12>
 800ee76:	b672      	cpsid	i
 800ee78:	e7fe      	b.n	800ee78 <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800ee7a:	f000 fa8f 	bl	800f39c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ee7e:	2f00      	cmp	r7, #0
 800ee80:	d001      	beq.n	800ee86 <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ee82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee84:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800ee86:	225c      	movs	r2, #92	; 0x5c
 800ee88:	5ca3      	ldrb	r3, [r4, r2]
 800ee8a:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800ee8c:	2102      	movs	r1, #2
 800ee8e:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800ee90:	2d02      	cmp	r5, #2
 800ee92:	d015      	beq.n	800eec0 <xTaskGenericNotify+0x58>
 800ee94:	d907      	bls.n	800eea6 <xTaskGenericNotify+0x3e>
 800ee96:	2d03      	cmp	r5, #3
 800ee98:	d016      	beq.n	800eec8 <xTaskGenericNotify+0x60>
 800ee9a:	2d04      	cmp	r5, #4
 800ee9c:	d105      	bne.n	800eeaa <xTaskGenericNotify+0x42>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800ee9e:	2b02      	cmp	r3, #2
 800eea0:	d035      	beq.n	800ef0e <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800eea2:	65a6      	str	r6, [r4, #88]	; 0x58
 800eea4:	e001      	b.n	800eeaa <xTaskGenericNotify+0x42>
			switch( eAction )
 800eea6:	2d01      	cmp	r5, #1
 800eea8:	d006      	beq.n	800eeb8 <xTaskGenericNotify+0x50>
 800eeaa:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	d00d      	beq.n	800eecc <xTaskGenericNotify+0x64>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800eeb0:	f000 fa80 	bl	800f3b4 <vPortExitCritical>

		return xReturn;
	}
 800eeb4:	0028      	movs	r0, r5
 800eeb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 800eeb8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800eeba:	4316      	orrs	r6, r2
 800eebc:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800eebe:	e7f4      	b.n	800eeaa <xTaskGenericNotify+0x42>
					( pxTCB->ulNotifiedValue )++;
 800eec0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800eec2:	3201      	adds	r2, #1
 800eec4:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800eec6:	e7f0      	b.n	800eeaa <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue = ulValue;
 800eec8:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800eeca:	e7ee      	b.n	800eeaa <xTaskGenericNotify+0x42>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800eecc:	1d25      	adds	r5, r4, #4
 800eece:	0028      	movs	r0, r5
 800eed0:	f7fe fdaf 	bl	800da32 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800eed4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eed6:	4a0f      	ldr	r2, [pc, #60]	; (800ef14 <xTaskGenericNotify+0xac>)
 800eed8:	6812      	ldr	r2, [r2, #0]
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d901      	bls.n	800eee2 <xTaskGenericNotify+0x7a>
 800eede:	4a0d      	ldr	r2, [pc, #52]	; (800ef14 <xTaskGenericNotify+0xac>)
 800eee0:	6013      	str	r3, [r2, #0]
 800eee2:	2014      	movs	r0, #20
 800eee4:	4358      	muls	r0, r3
 800eee6:	4b0c      	ldr	r3, [pc, #48]	; (800ef18 <xTaskGenericNotify+0xb0>)
 800eee8:	18c0      	adds	r0, r0, r3
 800eeea:	0029      	movs	r1, r5
 800eeec:	f7fe fd7e 	bl	800d9ec <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800eef0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d001      	beq.n	800eefa <xTaskGenericNotify+0x92>
 800eef6:	b672      	cpsid	i
 800eef8:	e7fe      	b.n	800eef8 <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eefa:	4b08      	ldr	r3, [pc, #32]	; (800ef1c <xTaskGenericNotify+0xb4>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ef00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef02:	2501      	movs	r5, #1
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d9d3      	bls.n	800eeb0 <xTaskGenericNotify+0x48>
					taskYIELD_IF_USING_PREEMPTION();
 800ef08:	f000 fa3c 	bl	800f384 <vPortYield>
 800ef0c:	e7d0      	b.n	800eeb0 <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
 800ef0e:	2500      	movs	r5, #0
 800ef10:	e7ce      	b.n	800eeb0 <xTaskGenericNotify+0x48>
 800ef12:	46c0      	nop			; (mov r8, r8)
 800ef14:	20001e0c 	.word	0x20001e0c
 800ef18:	20001d68 	.word	0x20001d68
 800ef1c:	20001d5c 	.word	0x20001d5c

0800ef20 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ef20:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ef22:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef24:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ef26:	4291      	cmp	r1, r2
 800ef28:	d80b      	bhi.n	800ef42 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800ef2a:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ef2c:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800ef2e:	6983      	ldr	r3, [r0, #24]
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d211      	bcs.n	800ef58 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ef34:	1d01      	adds	r1, r0, #4
 800ef36:	4b09      	ldr	r3, [pc, #36]	; (800ef5c <prvInsertTimerInActiveList+0x3c>)
 800ef38:	6818      	ldr	r0, [r3, #0]
 800ef3a:	f7fe fd63 	bl	800da04 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ef3e:	2400      	movs	r4, #0
 800ef40:	e00a      	b.n	800ef58 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d202      	bcs.n	800ef4c <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ef46:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ef48:	4299      	cmp	r1, r3
 800ef4a:	d205      	bcs.n	800ef58 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef4c:	1d01      	adds	r1, r0, #4
 800ef4e:	4b04      	ldr	r3, [pc, #16]	; (800ef60 <prvInsertTimerInActiveList+0x40>)
 800ef50:	6818      	ldr	r0, [r3, #0]
 800ef52:	f7fe fd57 	bl	800da04 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ef56:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 800ef58:	0020      	movs	r0, r4
 800ef5a:	bd10      	pop	{r4, pc}
 800ef5c:	20001e88 	.word	0x20001e88
 800ef60:	20001e84 	.word	0x20001e84

0800ef64 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ef64:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ef66:	f000 fa19 	bl	800f39c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ef6a:	4b11      	ldr	r3, [pc, #68]	; (800efb0 <prvCheckForValidListAndQueue+0x4c>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d002      	beq.n	800ef78 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef72:	f000 fa1f 	bl	800f3b4 <vPortExitCritical>
}
 800ef76:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800ef78:	4d0e      	ldr	r5, [pc, #56]	; (800efb4 <prvCheckForValidListAndQueue+0x50>)
 800ef7a:	0028      	movs	r0, r5
 800ef7c:	f7fe fd28 	bl	800d9d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ef80:	4c0d      	ldr	r4, [pc, #52]	; (800efb8 <prvCheckForValidListAndQueue+0x54>)
 800ef82:	0020      	movs	r0, r4
 800ef84:	f7fe fd24 	bl	800d9d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ef88:	4b0c      	ldr	r3, [pc, #48]	; (800efbc <prvCheckForValidListAndQueue+0x58>)
 800ef8a:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ef8c:	4b0c      	ldr	r3, [pc, #48]	; (800efc0 <prvCheckForValidListAndQueue+0x5c>)
 800ef8e:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ef90:	2200      	movs	r2, #0
 800ef92:	2110      	movs	r1, #16
 800ef94:	2004      	movs	r0, #4
 800ef96:	f7fe fe26 	bl	800dbe6 <xQueueGenericCreate>
 800ef9a:	4b05      	ldr	r3, [pc, #20]	; (800efb0 <prvCheckForValidListAndQueue+0x4c>)
 800ef9c:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 800ef9e:	2800      	cmp	r0, #0
 800efa0:	d101      	bne.n	800efa6 <prvCheckForValidListAndQueue+0x42>
 800efa2:	b672      	cpsid	i
 800efa4:	e7fe      	b.n	800efa4 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800efa6:	4907      	ldr	r1, [pc, #28]	; (800efc4 <prvCheckForValidListAndQueue+0x60>)
 800efa8:	f7ff f856 	bl	800e058 <vQueueAddToRegistry>
 800efac:	e7e1      	b.n	800ef72 <prvCheckForValidListAndQueue+0xe>
 800efae:	46c0      	nop			; (mov r8, r8)
 800efb0:	20001eb8 	.word	0x20001eb8
 800efb4:	20001e8c 	.word	0x20001e8c
 800efb8:	20001ea0 	.word	0x20001ea0
 800efbc:	20001e84 	.word	0x20001e84
 800efc0:	20001e88 	.word	0x20001e88
 800efc4:	0801a618 	.word	0x0801a618

0800efc8 <xTimerCreateTimerTask>:
{
 800efc8:	b500      	push	{lr}
 800efca:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800efcc:	f7ff ffca 	bl	800ef64 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800efd0:	4b0a      	ldr	r3, [pc, #40]	; (800effc <xTimerCreateTimerTask+0x34>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d00d      	beq.n	800eff4 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800efd8:	2300      	movs	r3, #0
 800efda:	9303      	str	r3, [sp, #12]
 800efdc:	9302      	str	r3, [sp, #8]
 800efde:	9301      	str	r3, [sp, #4]
 800efe0:	3303      	adds	r3, #3
 800efe2:	9300      	str	r3, [sp, #0]
 800efe4:	2300      	movs	r3, #0
 800efe6:	22a0      	movs	r2, #160	; 0xa0
 800efe8:	4905      	ldr	r1, [pc, #20]	; (800f000 <xTimerCreateTimerTask+0x38>)
 800efea:	4806      	ldr	r0, [pc, #24]	; (800f004 <xTimerCreateTimerTask+0x3c>)
 800efec:	f7ff f918 	bl	800e220 <xTaskGenericCreate>
	configASSERT( xReturn );
 800eff0:	2800      	cmp	r0, #0
 800eff2:	d101      	bne.n	800eff8 <xTimerCreateTimerTask+0x30>
 800eff4:	b672      	cpsid	i
 800eff6:	e7fe      	b.n	800eff6 <xTimerCreateTimerTask+0x2e>
}
 800eff8:	b005      	add	sp, #20
 800effa:	bd00      	pop	{pc}
 800effc:	20001eb8 	.word	0x20001eb8
 800f000:	0801a620 	.word	0x0801a620
 800f004:	0800f151 	.word	0x0800f151

0800f008 <xTimerCreate>:
{
 800f008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f00a:	46c6      	mov	lr, r8
 800f00c:	b500      	push	{lr}
 800f00e:	4680      	mov	r8, r0
 800f010:	000d      	movs	r5, r1
 800f012:	0017      	movs	r7, r2
 800f014:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800f016:	2900      	cmp	r1, #0
 800f018:	d014      	beq.n	800f044 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f01a:	202c      	movs	r0, #44	; 0x2c
 800f01c:	f000 fa40 	bl	800f4a0 <pvPortMalloc>
 800f020:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800f022:	d00b      	beq.n	800f03c <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800f024:	f7ff ff9e 	bl	800ef64 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800f028:	4643      	mov	r3, r8
 800f02a:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f02c:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800f02e:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800f030:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f032:	9b06      	ldr	r3, [sp, #24]
 800f034:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f036:	1d20      	adds	r0, r4, #4
 800f038:	f7fe fcd5 	bl	800d9e6 <vListInitialiseItem>
}
 800f03c:	0020      	movs	r0, r4
 800f03e:	bc04      	pop	{r2}
 800f040:	4690      	mov	r8, r2
 800f042:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f044:	b672      	cpsid	i
 800f046:	e7fe      	b.n	800f046 <xTimerCreate+0x3e>

0800f048 <xTimerGenericCommand>:
{
 800f048:	b530      	push	{r4, r5, lr}
 800f04a:	b085      	sub	sp, #20
 800f04c:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800f04e:	4b13      	ldr	r3, [pc, #76]	; (800f09c <xTimerGenericCommand+0x54>)
 800f050:	681c      	ldr	r4, [r3, #0]
 800f052:	2c00      	cmp	r4, #0
 800f054:	d020      	beq.n	800f098 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800f056:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f058:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f05a:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f05c:	2905      	cmp	r1, #5
 800f05e:	dc13      	bgt.n	800f088 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f060:	f7ff fd68 	bl	800eb34 <xTaskGetSchedulerState>
 800f064:	2802      	cmp	r0, #2
 800f066:	d007      	beq.n	800f078 <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f068:	4b0c      	ldr	r3, [pc, #48]	; (800f09c <xTimerGenericCommand+0x54>)
 800f06a:	6818      	ldr	r0, [r3, #0]
 800f06c:	2300      	movs	r3, #0
 800f06e:	2200      	movs	r2, #0
 800f070:	4669      	mov	r1, sp
 800f072:	f7fe fdf3 	bl	800dc5c <xQueueGenericSend>
 800f076:	e00d      	b.n	800f094 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f078:	4b08      	ldr	r3, [pc, #32]	; (800f09c <xTimerGenericCommand+0x54>)
 800f07a:	6818      	ldr	r0, [r3, #0]
 800f07c:	2300      	movs	r3, #0
 800f07e:	9a08      	ldr	r2, [sp, #32]
 800f080:	4669      	mov	r1, sp
 800f082:	f7fe fdeb 	bl	800dc5c <xQueueGenericSend>
 800f086:	e005      	b.n	800f094 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f088:	2300      	movs	r3, #0
 800f08a:	002a      	movs	r2, r5
 800f08c:	4669      	mov	r1, sp
 800f08e:	0020      	movs	r0, r4
 800f090:	f7fe fe7b 	bl	800dd8a <xQueueGenericSendFromISR>
}
 800f094:	b005      	add	sp, #20
 800f096:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800f098:	2000      	movs	r0, #0
	return xReturn;
 800f09a:	e7fb      	b.n	800f094 <xTimerGenericCommand+0x4c>
 800f09c:	20001eb8 	.word	0x20001eb8

0800f0a0 <prvSampleTimeNow>:
{
 800f0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0a2:	46d6      	mov	lr, sl
 800f0a4:	464f      	mov	r7, r9
 800f0a6:	4646      	mov	r6, r8
 800f0a8:	b5c0      	push	{r6, r7, lr}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 800f0ae:	f7ff fa43 	bl	800e538 <xTaskGetTickCount>
 800f0b2:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 800f0b4:	4b23      	ldr	r3, [pc, #140]	; (800f144 <prvSampleTimeNow+0xa4>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4283      	cmp	r3, r0
 800f0ba:	d80b      	bhi.n	800f0d4 <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	4642      	mov	r2, r8
 800f0c0:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 800f0c2:	4b20      	ldr	r3, [pc, #128]	; (800f144 <prvSampleTimeNow+0xa4>)
 800f0c4:	601f      	str	r7, [r3, #0]
}
 800f0c6:	0038      	movs	r0, r7
 800f0c8:	b004      	add	sp, #16
 800f0ca:	bc1c      	pop	{r2, r3, r4}
 800f0cc:	4690      	mov	r8, r2
 800f0ce:	4699      	mov	r9, r3
 800f0d0:	46a2      	mov	sl, r4
 800f0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f0d4:	4e1c      	ldr	r6, [pc, #112]	; (800f148 <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f0da:	6833      	ldr	r3, [r6, #0]
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	2a00      	cmp	r2, #0
 800f0e0:	d026      	beq.n	800f130 <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f0e2:	68db      	ldr	r3, [r3, #12]
 800f0e4:	681a      	ldr	r2, [r3, #0]
 800f0e6:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f0e8:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0ea:	1d25      	adds	r5, r4, #4
 800f0ec:	0028      	movs	r0, r5
 800f0ee:	f7fe fca0 	bl	800da32 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0f2:	0020      	movs	r0, r4
 800f0f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0f6:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f0f8:	69e3      	ldr	r3, [r4, #28]
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d1ed      	bne.n	800f0da <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f0fe:	69a3      	ldr	r3, [r4, #24]
 800f100:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800f102:	459a      	cmp	sl, r3
 800f104:	d209      	bcs.n	800f11a <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f106:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f108:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f10a:	4b0f      	ldr	r3, [pc, #60]	; (800f148 <prvSampleTimeNow+0xa8>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	9303      	str	r3, [sp, #12]
 800f110:	0029      	movs	r1, r5
 800f112:	0018      	movs	r0, r3
 800f114:	f7fe fc76 	bl	800da04 <vListInsert>
 800f118:	e7df      	b.n	800f0da <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f11a:	464b      	mov	r3, r9
 800f11c:	9300      	str	r3, [sp, #0]
 800f11e:	4652      	mov	r2, sl
 800f120:	4649      	mov	r1, r9
 800f122:	0020      	movs	r0, r4
 800f124:	f7ff ff90 	bl	800f048 <xTimerGenericCommand>
				configASSERT( xResult );
 800f128:	2800      	cmp	r0, #0
 800f12a:	d1d6      	bne.n	800f0da <prvSampleTimeNow+0x3a>
 800f12c:	b672      	cpsid	i
 800f12e:	e7fe      	b.n	800f12e <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 800f130:	4a06      	ldr	r2, [pc, #24]	; (800f14c <prvSampleTimeNow+0xac>)
 800f132:	4905      	ldr	r1, [pc, #20]	; (800f148 <prvSampleTimeNow+0xa8>)
 800f134:	6810      	ldr	r0, [r2, #0]
 800f136:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800f138:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800f13a:	2301      	movs	r3, #1
 800f13c:	4642      	mov	r2, r8
 800f13e:	6013      	str	r3, [r2, #0]
 800f140:	e7bf      	b.n	800f0c2 <prvSampleTimeNow+0x22>
 800f142:	46c0      	nop			; (mov r8, r8)
 800f144:	20001eb4 	.word	0x20001eb4
 800f148:	20001e84 	.word	0x20001e84
 800f14c:	20001e88 	.word	0x20001e88

0800f150 <prvTimerTask>:
{
 800f150:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f152:	b08d      	sub	sp, #52	; 0x34
			switch( xMessage.xMessageID )
 800f154:	4e57      	ldr	r6, [pc, #348]	; (800f2b4 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f156:	4b58      	ldr	r3, [pc, #352]	; (800f2b8 <prvTimerTask+0x168>)
 800f158:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f15a:	681a      	ldr	r2, [r3, #0]
 800f15c:	2a00      	cmp	r2, #0
 800f15e:	d100      	bne.n	800f162 <prvTimerTask+0x12>
 800f160:	e09c      	b.n	800f29c <prvTimerTask+0x14c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f162:	68db      	ldr	r3, [r3, #12]
 800f164:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 800f166:	f7ff f9df 	bl	800e528 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f16a:	a808      	add	r0, sp, #32
 800f16c:	f7ff ff98 	bl	800f0a0 <prvSampleTimeNow>
 800f170:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f172:	9b08      	ldr	r3, [sp, #32]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d000      	beq.n	800f17a <prvTimerTask+0x2a>
 800f178:	e099      	b.n	800f2ae <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f17a:	42a0      	cmp	r0, r4
 800f17c:	d233      	bcs.n	800f1e6 <prvTimerTask+0x96>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f17e:	1b61      	subs	r1, r4, r5
 800f180:	4b4e      	ldr	r3, [pc, #312]	; (800f2bc <prvTimerTask+0x16c>)
 800f182:	6818      	ldr	r0, [r3, #0]
 800f184:	f7fe ff80 	bl	800e088 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f188:	f7ff fa6e 	bl	800e668 <xTaskResumeAll>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d050      	beq.n	800f232 <prvTimerTask+0xe2>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f190:	4c4a      	ldr	r4, [pc, #296]	; (800f2bc <prvTimerTask+0x16c>)
 800f192:	2300      	movs	r3, #0
 800f194:	2200      	movs	r2, #0
 800f196:	a908      	add	r1, sp, #32
 800f198:	6820      	ldr	r0, [r4, #0]
 800f19a:	f7fe fe78 	bl	800de8e <xQueueGenericReceive>
 800f19e:	2800      	cmp	r0, #0
 800f1a0:	d0d9      	beq.n	800f156 <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f1a2:	9b08      	ldr	r3, [sp, #32]
 800f1a4:	9303      	str	r3, [sp, #12]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	da0c      	bge.n	800f1c4 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f1aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1ac:	9303      	str	r3, [sp, #12]
 800f1ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1b0:	9304      	str	r3, [sp, #16]
 800f1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1b4:	9305      	str	r3, [sp, #20]
 800f1b6:	9903      	ldr	r1, [sp, #12]
 800f1b8:	9804      	ldr	r0, [sp, #16]
 800f1ba:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f1bc:	9b08      	ldr	r3, [sp, #32]
 800f1be:	9303      	str	r3, [sp, #12]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	dbe6      	blt.n	800f192 <prvTimerTask+0x42>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f1c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f1c6:	696b      	ldr	r3, [r5, #20]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d002      	beq.n	800f1d2 <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1cc:	1d28      	adds	r0, r5, #4
 800f1ce:	f7fe fc30 	bl	800da32 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1d2:	a807      	add	r0, sp, #28
 800f1d4:	f7ff ff64 	bl	800f0a0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800f1d8:	9b08      	ldr	r3, [sp, #32]
 800f1da:	9303      	str	r3, [sp, #12]
 800f1dc:	2b09      	cmp	r3, #9
 800f1de:	d8d8      	bhi.n	800f192 <prvTimerTask+0x42>
 800f1e0:	009b      	lsls	r3, r3, #2
 800f1e2:	58f3      	ldr	r3, [r6, r3]
 800f1e4:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 800f1e6:	f7ff fa3f 	bl	800e668 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1ea:	4b33      	ldr	r3, [pc, #204]	; (800f2b8 <prvTimerTask+0x168>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	68db      	ldr	r3, [r3, #12]
 800f1f0:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1f2:	1d38      	adds	r0, r7, #4
 800f1f4:	f7fe fc1d 	bl	800da32 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d003      	beq.n	800f206 <prvTimerTask+0xb6>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f200:	0038      	movs	r0, r7
 800f202:	4798      	blx	r3
 800f204:	e7c4      	b.n	800f190 <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f206:	69bb      	ldr	r3, [r7, #24]
 800f208:	18e1      	adds	r1, r4, r3
 800f20a:	0023      	movs	r3, r4
 800f20c:	002a      	movs	r2, r5
 800f20e:	0038      	movs	r0, r7
 800f210:	f7ff fe86 	bl	800ef20 <prvInsertTimerInActiveList>
 800f214:	2801      	cmp	r0, #1
 800f216:	d1f2      	bne.n	800f1fe <prvTimerTask+0xae>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f218:	2100      	movs	r1, #0
 800f21a:	9100      	str	r1, [sp, #0]
 800f21c:	000b      	movs	r3, r1
 800f21e:	0022      	movs	r2, r4
 800f220:	0038      	movs	r0, r7
 800f222:	f7ff ff11 	bl	800f048 <xTimerGenericCommand>
			configASSERT( xResult );
 800f226:	2800      	cmp	r0, #0
 800f228:	d1e9      	bne.n	800f1fe <prvTimerTask+0xae>
 800f22a:	b672      	cpsid	i
 800f22c:	e7fe      	b.n	800f22c <prvTimerTask+0xdc>
		xNextExpireTime = ( TickType_t ) 0U;
 800f22e:	2400      	movs	r4, #0
 800f230:	e7a5      	b.n	800f17e <prvTimerTask+0x2e>
					portYIELD_WITHIN_API();
 800f232:	f000 f8a7 	bl	800f384 <vPortYield>
 800f236:	e7ab      	b.n	800f190 <prvTimerTask+0x40>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f23a:	69aa      	ldr	r2, [r5, #24]
 800f23c:	4694      	mov	ip, r2
 800f23e:	4463      	add	r3, ip
 800f240:	0019      	movs	r1, r3
 800f242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f244:	0002      	movs	r2, r0
 800f246:	0028      	movs	r0, r5
 800f248:	f7ff fe6a 	bl	800ef20 <prvInsertTimerInActiveList>
 800f24c:	2801      	cmp	r0, #1
 800f24e:	d1a0      	bne.n	800f192 <prvTimerTask+0x42>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f250:	0028      	movs	r0, r5
 800f252:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f254:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f256:	69eb      	ldr	r3, [r5, #28]
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d19a      	bne.n	800f192 <prvTimerTask+0x42>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f25c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f25e:	69a9      	ldr	r1, [r5, #24]
 800f260:	468c      	mov	ip, r1
 800f262:	4463      	add	r3, ip
 800f264:	001a      	movs	r2, r3
 800f266:	2300      	movs	r3, #0
 800f268:	9300      	str	r3, [sp, #0]
 800f26a:	2100      	movs	r1, #0
 800f26c:	0028      	movs	r0, r5
 800f26e:	f7ff feeb 	bl	800f048 <xTimerGenericCommand>
							configASSERT( xResult );
 800f272:	2800      	cmp	r0, #0
 800f274:	d18d      	bne.n	800f192 <prvTimerTask+0x42>
 800f276:	b672      	cpsid	i
 800f278:	e7fe      	b.n	800f278 <prvTimerTask+0x128>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f27a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f27c:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f27e:	2900      	cmp	r1, #0
 800f280:	d006      	beq.n	800f290 <prvTimerTask+0x140>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f282:	1841      	adds	r1, r0, r1
 800f284:	0003      	movs	r3, r0
 800f286:	0002      	movs	r2, r0
 800f288:	0028      	movs	r0, r5
 800f28a:	f7ff fe49 	bl	800ef20 <prvInsertTimerInActiveList>
 800f28e:	e780      	b.n	800f192 <prvTimerTask+0x42>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f290:	b672      	cpsid	i
 800f292:	e7fe      	b.n	800f292 <prvTimerTask+0x142>
					vPortFree( pxTimer );
 800f294:	0028      	movs	r0, r5
 800f296:	f000 f999 	bl	800f5cc <vPortFree>
 800f29a:	e77a      	b.n	800f192 <prvTimerTask+0x42>
	vTaskSuspendAll();
 800f29c:	f7ff f944 	bl	800e528 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2a0:	a808      	add	r0, sp, #32
 800f2a2:	f7ff fefd 	bl	800f0a0 <prvSampleTimeNow>
 800f2a6:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800f2a8:	9b08      	ldr	r3, [sp, #32]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d0bf      	beq.n	800f22e <prvTimerTask+0xde>
			( void ) xTaskResumeAll();
 800f2ae:	f7ff f9db 	bl	800e668 <xTaskResumeAll>
 800f2b2:	e76d      	b.n	800f190 <prvTimerTask+0x40>
 800f2b4:	0801a5f0 	.word	0x0801a5f0
 800f2b8:	20001e84 	.word	0x20001e84
 800f2bc:	20001eb8 	.word	0x20001eb8

0800f2c0 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f2c0:	b510      	push	{r4, lr}
 800f2c2:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800f2c4:	d101      	bne.n	800f2ca <pvTimerGetTimerID+0xa>
 800f2c6:	b672      	cpsid	i
 800f2c8:	e7fe      	b.n	800f2c8 <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 800f2ca:	f000 f867 	bl	800f39c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f2ce:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800f2d0:	f000 f870 	bl	800f3b4 <vPortExitCritical>

	return pvReturn;
}
 800f2d4:	0020      	movs	r0, r4
 800f2d6:	bd10      	pop	{r4, pc}

0800f2d8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f2d8:	4b03      	ldr	r3, [pc, #12]	; (800f2e8 <prvTaskExitError+0x10>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	3301      	adds	r3, #1
 800f2de:	d001      	beq.n	800f2e4 <prvTaskExitError+0xc>
 800f2e0:	b672      	cpsid	i
 800f2e2:	e7fe      	b.n	800f2e2 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800f2e4:	b672      	cpsid	i
 800f2e6:	e7fe      	b.n	800f2e6 <prvTaskExitError+0xe>
 800f2e8:	200000a4 	.word	0x200000a4

0800f2ec <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800f2ec:	4a06      	ldr	r2, [pc, #24]	; (800f308 <pxCurrentTCBConst2>)
 800f2ee:	6813      	ldr	r3, [r2, #0]
 800f2f0:	6818      	ldr	r0, [r3, #0]
 800f2f2:	3020      	adds	r0, #32
 800f2f4:	f380 8809 	msr	PSP, r0
 800f2f8:	2002      	movs	r0, #2
 800f2fa:	f380 8814 	msr	CONTROL, r0
 800f2fe:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800f300:	46ae      	mov	lr, r5
 800f302:	b662      	cpsie	i
 800f304:	bd00      	pop	{pc}
 800f306:	46c0      	nop			; (mov r8, r8)

0800f308 <pxCurrentTCBConst2>:
 800f308:	20001d5c 	.word	0x20001d5c

0800f30c <pxPortInitialiseStack>:
{
 800f30c:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f30e:	1f03      	subs	r3, r0, #4
 800f310:	2480      	movs	r4, #128	; 0x80
 800f312:	0464      	lsls	r4, r4, #17
 800f314:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800f316:	3b04      	subs	r3, #4
 800f318:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f31a:	3b04      	subs	r3, #4
 800f31c:	4902      	ldr	r1, [pc, #8]	; (800f328 <pxPortInitialiseStack+0x1c>)
 800f31e:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f320:	3b14      	subs	r3, #20
 800f322:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800f324:	3840      	subs	r0, #64	; 0x40
}
 800f326:	bd10      	pop	{r4, pc}
 800f328:	0800f2d9 	.word	0x0800f2d9

0800f32c <SVC_Handler>:
}
 800f32c:	4770      	bx	lr
	...

0800f330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f330:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f332:	4b0f      	ldr	r3, [pc, #60]	; (800f370 <xPortStartScheduler+0x40>)
 800f334:	6819      	ldr	r1, [r3, #0]
 800f336:	22ff      	movs	r2, #255	; 0xff
 800f338:	0412      	lsls	r2, r2, #16
 800f33a:	430a      	orrs	r2, r1
 800f33c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f33e:	6819      	ldr	r1, [r3, #0]
 800f340:	22ff      	movs	r2, #255	; 0xff
 800f342:	0612      	lsls	r2, r2, #24
 800f344:	430a      	orrs	r2, r1
 800f346:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f348:	4b0a      	ldr	r3, [pc, #40]	; (800f374 <xPortStartScheduler+0x44>)
 800f34a:	6818      	ldr	r0, [r3, #0]
 800f34c:	21fa      	movs	r1, #250	; 0xfa
 800f34e:	0089      	lsls	r1, r1, #2
 800f350:	f7f0 fefe 	bl	8000150 <__udivsi3>
 800f354:	3801      	subs	r0, #1
 800f356:	4b08      	ldr	r3, [pc, #32]	; (800f378 <xPortStartScheduler+0x48>)
 800f358:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f35a:	4b08      	ldr	r3, [pc, #32]	; (800f37c <xPortStartScheduler+0x4c>)
 800f35c:	2207      	movs	r2, #7
 800f35e:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800f360:	4b07      	ldr	r3, [pc, #28]	; (800f380 <xPortStartScheduler+0x50>)
 800f362:	2200      	movs	r2, #0
 800f364:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800f366:	f7ff ffc1 	bl	800f2ec <vPortStartFirstTask>
	prvTaskExitError();
 800f36a:	f7ff ffb5 	bl	800f2d8 <prvTaskExitError>
 800f36e:	46c0      	nop			; (mov r8, r8)
 800f370:	e000ed20 	.word	0xe000ed20
 800f374:	20000090 	.word	0x20000090
 800f378:	e000e014 	.word	0xe000e014
 800f37c:	e000e010 	.word	0xe000e010
 800f380:	200000a4 	.word	0x200000a4

0800f384 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800f384:	4b04      	ldr	r3, [pc, #16]	; (800f398 <vPortYield+0x14>)
 800f386:	2280      	movs	r2, #128	; 0x80
 800f388:	0552      	lsls	r2, r2, #21
 800f38a:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800f38c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f390:	f3bf 8f6f 	isb	sy
}
 800f394:	4770      	bx	lr
 800f396:	46c0      	nop			; (mov r8, r8)
 800f398:	e000ed04 	.word	0xe000ed04

0800f39c <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800f39c:	b672      	cpsid	i
    uxCriticalNesting++;
 800f39e:	4a04      	ldr	r2, [pc, #16]	; (800f3b0 <vPortEnterCritical+0x14>)
 800f3a0:	6813      	ldr	r3, [r2, #0]
 800f3a2:	3301      	adds	r3, #1
 800f3a4:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800f3a6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f3aa:	f3bf 8f6f 	isb	sy
}
 800f3ae:	4770      	bx	lr
 800f3b0:	200000a4 	.word	0x200000a4

0800f3b4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800f3b4:	4b06      	ldr	r3, [pc, #24]	; (800f3d0 <vPortExitCritical+0x1c>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d101      	bne.n	800f3c0 <vPortExitCritical+0xc>
 800f3bc:	b672      	cpsid	i
 800f3be:	e7fe      	b.n	800f3be <vPortExitCritical+0xa>
    uxCriticalNesting--;
 800f3c0:	3b01      	subs	r3, #1
 800f3c2:	4a03      	ldr	r2, [pc, #12]	; (800f3d0 <vPortExitCritical+0x1c>)
 800f3c4:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d100      	bne.n	800f3cc <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 800f3ca:	b662      	cpsie	i
}
 800f3cc:	4770      	bx	lr
 800f3ce:	46c0      	nop			; (mov r8, r8)
 800f3d0:	200000a4 	.word	0x200000a4

0800f3d4 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800f3d4:	f3ef 8010 	mrs	r0, PRIMASK
 800f3d8:	b672      	cpsid	i
 800f3da:	4770      	bx	lr
}
 800f3dc:	2000      	movs	r0, #0

0800f3de <vClearInterruptMaskFromISR>:
	__asm volatile(
 800f3de:	f380 8810 	msr	PRIMASK, r0
 800f3e2:	4770      	bx	lr

0800f3e4 <PendSV_Handler>:
	__asm volatile
 800f3e4:	f3ef 8009 	mrs	r0, PSP
 800f3e8:	4b0e      	ldr	r3, [pc, #56]	; (800f424 <pxCurrentTCBConst>)
 800f3ea:	681a      	ldr	r2, [r3, #0]
 800f3ec:	3820      	subs	r0, #32
 800f3ee:	6010      	str	r0, [r2, #0]
 800f3f0:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f3f2:	4644      	mov	r4, r8
 800f3f4:	464d      	mov	r5, r9
 800f3f6:	4656      	mov	r6, sl
 800f3f8:	465f      	mov	r7, fp
 800f3fa:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f3fc:	b508      	push	{r3, lr}
 800f3fe:	b672      	cpsid	i
 800f400:	f7ff fa4e 	bl	800e8a0 <vTaskSwitchContext>
 800f404:	b662      	cpsie	i
 800f406:	bc0c      	pop	{r2, r3}
 800f408:	6811      	ldr	r1, [r2, #0]
 800f40a:	6808      	ldr	r0, [r1, #0]
 800f40c:	3010      	adds	r0, #16
 800f40e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f410:	46a0      	mov	r8, r4
 800f412:	46a9      	mov	r9, r5
 800f414:	46b2      	mov	sl, r6
 800f416:	46bb      	mov	fp, r7
 800f418:	f380 8809 	msr	PSP, r0
 800f41c:	3820      	subs	r0, #32
 800f41e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f420:	4718      	bx	r3
 800f422:	46c0      	nop			; (mov r8, r8)

0800f424 <pxCurrentTCBConst>:
 800f424:	20001d5c 	.word	0x20001d5c

0800f428 <xPortSysTickHandler>:
{
 800f428:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800f42a:	f7ff ffd3 	bl	800f3d4 <ulSetInterruptMaskFromISR>
 800f42e:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800f430:	f7ff f88e 	bl	800e550 <xTaskIncrementTick>
 800f434:	2800      	cmp	r0, #0
 800f436:	d003      	beq.n	800f440 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800f438:	4b03      	ldr	r3, [pc, #12]	; (800f448 <xPortSysTickHandler+0x20>)
 800f43a:	2280      	movs	r2, #128	; 0x80
 800f43c:	0552      	lsls	r2, r2, #21
 800f43e:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800f440:	0020      	movs	r0, r4
 800f442:	f7ff ffcc 	bl	800f3de <vClearInterruptMaskFromISR>
}
 800f446:	bd10      	pop	{r4, pc}
 800f448:	e000ed04 	.word	0xe000ed04

0800f44c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f44c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f44e:	4b12      	ldr	r3, [pc, #72]	; (800f498 <prvInsertBlockIntoFreeList+0x4c>)
 800f450:	681a      	ldr	r2, [r3, #0]
 800f452:	4282      	cmp	r2, r0
 800f454:	d319      	bcc.n	800f48a <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f456:	685c      	ldr	r4, [r3, #4]
 800f458:	1919      	adds	r1, r3, r4
 800f45a:	4288      	cmp	r0, r1
 800f45c:	d103      	bne.n	800f466 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f45e:	6841      	ldr	r1, [r0, #4]
 800f460:	1909      	adds	r1, r1, r4
 800f462:	6059      	str	r1, [r3, #4]
 800f464:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f466:	6841      	ldr	r1, [r0, #4]
 800f468:	1844      	adds	r4, r0, r1
 800f46a:	42a2      	cmp	r2, r4
 800f46c:	d111      	bne.n	800f492 <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f46e:	4c0b      	ldr	r4, [pc, #44]	; (800f49c <prvInsertBlockIntoFreeList+0x50>)
 800f470:	6824      	ldr	r4, [r4, #0]
 800f472:	42a2      	cmp	r2, r4
 800f474:	d00b      	beq.n	800f48e <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f476:	6852      	ldr	r2, [r2, #4]
 800f478:	1852      	adds	r2, r2, r1
 800f47a:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f47c:	681a      	ldr	r2, [r3, #0]
 800f47e:	6812      	ldr	r2, [r2, #0]
 800f480:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f482:	4298      	cmp	r0, r3
 800f484:	d000      	beq.n	800f488 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f486:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f488:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f48a:	0013      	movs	r3, r2
 800f48c:	e7e0      	b.n	800f450 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f48e:	6002      	str	r2, [r0, #0]
 800f490:	e7f7      	b.n	800f482 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f492:	6002      	str	r2, [r0, #0]
 800f494:	e7f5      	b.n	800f482 <prvInsertBlockIntoFreeList+0x36>
 800f496:	46c0      	nop			; (mov r8, r8)
 800f498:	20006904 	.word	0x20006904
 800f49c:	20001ebc 	.word	0x20001ebc

0800f4a0 <pvPortMalloc>:
{
 800f4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4a2:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800f4a4:	f7ff f840 	bl	800e528 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f4a8:	4b41      	ldr	r3, [pc, #260]	; (800f5b0 <pvPortMalloc+0x110>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d00a      	beq.n	800f4c6 <pvPortMalloc+0x26>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f4b0:	4b40      	ldr	r3, [pc, #256]	; (800f5b4 <pvPortMalloc+0x114>)
 800f4b2:	681f      	ldr	r7, [r3, #0]
 800f4b4:	423c      	tst	r4, r7
 800f4b6:	d02a      	beq.n	800f50e <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 800f4b8:	f7ff f8d6 	bl	800e668 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800f4bc:	f7fd fbc8 	bl	800cc50 <vApplicationMallocFailedHook>
 800f4c0:	2500      	movs	r5, #0
}
 800f4c2:	0028      	movs	r0, r5
 800f4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ulAddress = ( uint32_t ) ucHeap;
 800f4c6:	4a3c      	ldr	r2, [pc, #240]	; (800f5b8 <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f4c8:	0753      	lsls	r3, r2, #29
 800f4ca:	d01e      	beq.n	800f50a <pvPortMalloc+0x6a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800f4cc:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f4ce:	2307      	movs	r3, #7
 800f4d0:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800f4d2:	4b3a      	ldr	r3, [pc, #232]	; (800f5bc <pvPortMalloc+0x11c>)
 800f4d4:	18d3      	adds	r3, r2, r3
 800f4d6:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f4d8:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f4da:	4839      	ldr	r0, [pc, #228]	; (800f5c0 <pvPortMalloc+0x120>)
 800f4dc:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f4de:	2100      	movs	r1, #0
 800f4e0:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f4e2:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 800f4e4:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f4e6:	2007      	movs	r0, #7
 800f4e8:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 800f4ea:	4831      	ldr	r0, [pc, #196]	; (800f5b0 <pvPortMalloc+0x110>)
 800f4ec:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800f4ee:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f4f0:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f4f2:	1a99      	subs	r1, r3, r2
 800f4f4:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f4f6:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f4f8:	4b32      	ldr	r3, [pc, #200]	; (800f5c4 <pvPortMalloc+0x124>)
 800f4fa:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f4fc:	4b32      	ldr	r3, [pc, #200]	; (800f5c8 <pvPortMalloc+0x128>)
 800f4fe:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f500:	4b2c      	ldr	r3, [pc, #176]	; (800f5b4 <pvPortMalloc+0x114>)
 800f502:	2280      	movs	r2, #128	; 0x80
 800f504:	0612      	lsls	r2, r2, #24
 800f506:	601a      	str	r2, [r3, #0]
 800f508:	e7d2      	b.n	800f4b0 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f50a:	4b2c      	ldr	r3, [pc, #176]	; (800f5bc <pvPortMalloc+0x11c>)
 800f50c:	e7e5      	b.n	800f4da <pvPortMalloc+0x3a>
			if( xWantedSize > 0 )
 800f50e:	2c00      	cmp	r4, #0
 800f510:	d008      	beq.n	800f524 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 800f512:	0023      	movs	r3, r4
 800f514:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f516:	075a      	lsls	r2, r3, #29
 800f518:	d002      	beq.n	800f520 <pvPortMalloc+0x80>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f51a:	2207      	movs	r2, #7
 800f51c:	4393      	bics	r3, r2
 800f51e:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f520:	2b00      	cmp	r3, #0
 800f522:	d102      	bne.n	800f52a <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 800f524:	f7ff f8a0 	bl	800e668 <xTaskResumeAll>
 800f528:	e7c8      	b.n	800f4bc <pvPortMalloc+0x1c>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f52a:	4a27      	ldr	r2, [pc, #156]	; (800f5c8 <pvPortMalloc+0x128>)
 800f52c:	6816      	ldr	r6, [r2, #0]
 800f52e:	429e      	cmp	r6, r3
 800f530:	d302      	bcc.n	800f538 <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 800f532:	4a23      	ldr	r2, [pc, #140]	; (800f5c0 <pvPortMalloc+0x120>)
 800f534:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f536:	e004      	b.n	800f542 <pvPortMalloc+0xa2>
	( void ) xTaskResumeAll();
 800f538:	f7ff f896 	bl	800e668 <xTaskResumeAll>
 800f53c:	e7be      	b.n	800f4bc <pvPortMalloc+0x1c>
 800f53e:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800f540:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f542:	6861      	ldr	r1, [r4, #4]
 800f544:	4299      	cmp	r1, r3
 800f546:	d202      	bcs.n	800f54e <pvPortMalloc+0xae>
 800f548:	6821      	ldr	r1, [r4, #0]
 800f54a:	2900      	cmp	r1, #0
 800f54c:	d1f7      	bne.n	800f53e <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 800f54e:	4918      	ldr	r1, [pc, #96]	; (800f5b0 <pvPortMalloc+0x110>)
 800f550:	6809      	ldr	r1, [r1, #0]
 800f552:	42a1      	cmp	r1, r4
 800f554:	d00b      	beq.n	800f56e <pvPortMalloc+0xce>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f556:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f558:	6821      	ldr	r1, [r4, #0]
 800f55a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f55c:	6862      	ldr	r2, [r4, #4]
 800f55e:	1ad2      	subs	r2, r2, r3
 800f560:	2a10      	cmp	r2, #16
 800f562:	d90b      	bls.n	800f57c <pvPortMalloc+0xdc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f564:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f566:	0741      	lsls	r1, r0, #29
 800f568:	d004      	beq.n	800f574 <pvPortMalloc+0xd4>
 800f56a:	b672      	cpsid	i
 800f56c:	e7fe      	b.n	800f56c <pvPortMalloc+0xcc>
	( void ) xTaskResumeAll();
 800f56e:	f7ff f87b 	bl	800e668 <xTaskResumeAll>
 800f572:	e7a3      	b.n	800f4bc <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f574:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f576:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800f578:	f7ff ff68 	bl	800f44c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f57c:	6862      	ldr	r2, [r4, #4]
 800f57e:	1ab6      	subs	r6, r6, r2
 800f580:	4911      	ldr	r1, [pc, #68]	; (800f5c8 <pvPortMalloc+0x128>)
 800f582:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f584:	490f      	ldr	r1, [pc, #60]	; (800f5c4 <pvPortMalloc+0x124>)
 800f586:	6809      	ldr	r1, [r1, #0]
 800f588:	428e      	cmp	r6, r1
 800f58a:	d201      	bcs.n	800f590 <pvPortMalloc+0xf0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f58c:	490d      	ldr	r1, [pc, #52]	; (800f5c4 <pvPortMalloc+0x124>)
 800f58e:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f590:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f592:	4317      	orrs	r7, r2
 800f594:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f596:	2300      	movs	r3, #0
 800f598:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800f59a:	f7ff f865 	bl	800e668 <xTaskResumeAll>
		if( pvReturn == NULL )
 800f59e:	2d00      	cmp	r5, #0
 800f5a0:	d100      	bne.n	800f5a4 <pvPortMalloc+0x104>
 800f5a2:	e78b      	b.n	800f4bc <pvPortMalloc+0x1c>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5a4:	076b      	lsls	r3, r5, #29
 800f5a6:	d100      	bne.n	800f5aa <pvPortMalloc+0x10a>
 800f5a8:	e78b      	b.n	800f4c2 <pvPortMalloc+0x22>
 800f5aa:	b672      	cpsid	i
 800f5ac:	e7fe      	b.n	800f5ac <pvPortMalloc+0x10c>
 800f5ae:	46c0      	nop			; (mov r8, r8)
 800f5b0:	20001ebc 	.word	0x20001ebc
 800f5b4:	200068f8 	.word	0x200068f8
 800f5b8:	20001ec0 	.word	0x20001ec0
 800f5bc:	00004a38 	.word	0x00004a38
 800f5c0:	20006904 	.word	0x20006904
 800f5c4:	20006900 	.word	0x20006900
 800f5c8:	200068fc 	.word	0x200068fc

0800f5cc <vPortFree>:
{
 800f5cc:	b510      	push	{r4, lr}
	if( pv != NULL )
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	d020      	beq.n	800f614 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f5d2:	0003      	movs	r3, r0
 800f5d4:	3b08      	subs	r3, #8
 800f5d6:	685b      	ldr	r3, [r3, #4]
 800f5d8:	4a0f      	ldr	r2, [pc, #60]	; (800f618 <vPortFree+0x4c>)
 800f5da:	6812      	ldr	r2, [r2, #0]
 800f5dc:	421a      	tst	r2, r3
 800f5de:	d101      	bne.n	800f5e4 <vPortFree+0x18>
 800f5e0:	b672      	cpsid	i
 800f5e2:	e7fe      	b.n	800f5e2 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f5e4:	0001      	movs	r1, r0
 800f5e6:	3908      	subs	r1, #8
 800f5e8:	6809      	ldr	r1, [r1, #0]
 800f5ea:	2900      	cmp	r1, #0
 800f5ec:	d001      	beq.n	800f5f2 <vPortFree+0x26>
 800f5ee:	b672      	cpsid	i
 800f5f0:	e7fe      	b.n	800f5f0 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f5f2:	3808      	subs	r0, #8
 800f5f4:	0004      	movs	r4, r0
 800f5f6:	4393      	bics	r3, r2
 800f5f8:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800f5fa:	f7fe ff95 	bl	800e528 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f5fe:	4a07      	ldr	r2, [pc, #28]	; (800f61c <vPortFree+0x50>)
 800f600:	6863      	ldr	r3, [r4, #4]
 800f602:	6811      	ldr	r1, [r2, #0]
 800f604:	468c      	mov	ip, r1
 800f606:	4463      	add	r3, ip
 800f608:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f60a:	0020      	movs	r0, r4
 800f60c:	f7ff ff1e 	bl	800f44c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800f610:	f7ff f82a 	bl	800e668 <xTaskResumeAll>
}
 800f614:	bd10      	pop	{r4, pc}
 800f616:	46c0      	nop			; (mov r8, r8)
 800f618:	200068f8 	.word	0x200068f8
 800f61c:	200068fc 	.word	0x200068fc

0800f620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f620:	b510      	push	{r4, lr}
 800f622:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800f624:	f002 f8f8 	bl	8011818 <HAL_RCC_GetHCLKFreq>
 800f628:	21fa      	movs	r1, #250	; 0xfa
 800f62a:	0089      	lsls	r1, r1, #2
 800f62c:	f7f0 fd90 	bl	8000150 <__udivsi3>
 800f630:	f000 fb9a 	bl	800fd68 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800f634:	2001      	movs	r0, #1
 800f636:	2200      	movs	r2, #0
 800f638:	0021      	movs	r1, r4
 800f63a:	4240      	negs	r0, r0
 800f63c:	f000 fb4c 	bl	800fcd8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800f640:	2000      	movs	r0, #0
 800f642:	bd10      	pop	{r4, pc}

0800f644 <HAL_Init>:
{
 800f644:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f646:	4a06      	ldr	r2, [pc, #24]	; (800f660 <HAL_Init+0x1c>)
 800f648:	6813      	ldr	r3, [r2, #0]
 800f64a:	2110      	movs	r1, #16
 800f64c:	430b      	orrs	r3, r1
 800f64e:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f650:	2000      	movs	r0, #0
 800f652:	f7ff ffe5 	bl	800f620 <HAL_InitTick>
  HAL_MspInit();
 800f656:	f001 fc87 	bl	8010f68 <HAL_MspInit>
}
 800f65a:	2000      	movs	r0, #0
 800f65c:	bd10      	pop	{r4, pc}
 800f65e:	46c0      	nop			; (mov r8, r8)
 800f660:	40022000 	.word	0x40022000

0800f664 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800f664:	4a02      	ldr	r2, [pc, #8]	; (800f670 <HAL_IncTick+0xc>)
 800f666:	6813      	ldr	r3, [r2, #0]
 800f668:	3301      	adds	r3, #1
 800f66a:	6013      	str	r3, [r2, #0]
}
 800f66c:	4770      	bx	lr
 800f66e:	46c0      	nop			; (mov r8, r8)
 800f670:	2000690c 	.word	0x2000690c

0800f674 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800f674:	4b01      	ldr	r3, [pc, #4]	; (800f67c <HAL_GetTick+0x8>)
 800f676:	6818      	ldr	r0, [r3, #0]
}
 800f678:	4770      	bx	lr
 800f67a:	46c0      	nop			; (mov r8, r8)
 800f67c:	2000690c 	.word	0x2000690c

0800f680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800f680:	b510      	push	{r4, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800f686:	f7ff fff5 	bl	800f674 <HAL_GetTick>
 800f68a:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800f68c:	f7ff fff2 	bl	800f674 <HAL_GetTick>
 800f690:	9b01      	ldr	r3, [sp, #4]
 800f692:	1b00      	subs	r0, r0, r4
 800f694:	4298      	cmp	r0, r3
 800f696:	d3f9      	bcc.n	800f68c <HAL_Delay+0xc>
  {
  }
}
 800f698:	b002      	add	sp, #8
 800f69a:	bd10      	pop	{r4, pc}

0800f69c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800f69c:	4b01      	ldr	r3, [pc, #4]	; (800f6a4 <HAL_GetREVID+0x8>)
 800f69e:	6818      	ldr	r0, [r3, #0]
 800f6a0:	0c00      	lsrs	r0, r0, #16
}
 800f6a2:	4770      	bx	lr
 800f6a4:	40015800 	.word	0x40015800

0800f6a8 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800f6a8:	4b02      	ldr	r3, [pc, #8]	; (800f6b4 <HAL_GetDEVID+0xc>)
 800f6aa:	6818      	ldr	r0, [r3, #0]
 800f6ac:	0500      	lsls	r0, r0, #20
 800f6ae:	0d00      	lsrs	r0, r0, #20
}
 800f6b0:	4770      	bx	lr
 800f6b2:	46c0      	nop			; (mov r8, r8)
 800f6b4:	40015800 	.word	0x40015800

0800f6b8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800f6b8:	b570      	push	{r4, r5, r6, lr}
 800f6ba:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f6bc:	6803      	ldr	r3, [r0, #0]
 800f6be:	689a      	ldr	r2, [r3, #8]
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800f6c0:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f6c2:	0752      	lsls	r2, r2, #29
 800f6c4:	d521      	bpl.n	800f70a <ADC_ConversionStop+0x52>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f6c6:	689a      	ldr	r2, [r3, #8]
 800f6c8:	0752      	lsls	r2, r2, #29
 800f6ca:	d506      	bpl.n	800f6da <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800f6cc:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f6ce:	0792      	lsls	r2, r2, #30
 800f6d0:	d403      	bmi.n	800f6da <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800f6d2:	689a      	ldr	r2, [r3, #8]
 800f6d4:	2110      	movs	r1, #16
 800f6d6:	430a      	orrs	r2, r1
 800f6d8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800f6da:	f7ff ffcb 	bl	800f674 <HAL_GetTick>
 800f6de:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f6e0:	2504      	movs	r5, #4
 800f6e2:	6823      	ldr	r3, [r4, #0]
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	421d      	tst	r5, r3
 800f6e8:	d00e      	beq.n	800f708 <ADC_ConversionStop+0x50>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800f6ea:	f7ff ffc3 	bl	800f674 <HAL_GetTick>
 800f6ee:	1b80      	subs	r0, r0, r6
 800f6f0:	2802      	cmp	r0, #2
 800f6f2:	d9f6      	bls.n	800f6e2 <ADC_ConversionStop+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f6f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f6f6:	2210      	movs	r2, #16
 800f6f8:	4313      	orrs	r3, r2
 800f6fa:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f6fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f6fe:	3a0f      	subs	r2, #15
 800f700:	4313      	orrs	r3, r2
 800f702:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f704:	2001      	movs	r0, #1
 800f706:	e000      	b.n	800f70a <ADC_ConversionStop+0x52>
  return HAL_OK;
 800f708:	2000      	movs	r0, #0
}
 800f70a:	bd70      	pop	{r4, r5, r6, pc}

0800f70c <ADC_Disable>:
{
 800f70c:	b570      	push	{r4, r5, r6, lr}
 800f70e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f710:	6802      	ldr	r2, [r0, #0]
 800f712:	6891      	ldr	r1, [r2, #8]
 800f714:	2303      	movs	r3, #3
 800f716:	400b      	ands	r3, r1
  return HAL_OK;
 800f718:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f71a:	2b01      	cmp	r3, #1
 800f71c:	d000      	beq.n	800f720 <ADC_Disable+0x14>
}
 800f71e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f720:	6813      	ldr	r3, [r2, #0]
 800f722:	07db      	lsls	r3, r3, #31
 800f724:	d402      	bmi.n	800f72c <ADC_Disable+0x20>
 800f726:	68d3      	ldr	r3, [r2, #12]
 800f728:	041b      	lsls	r3, r3, #16
 800f72a:	d5f8      	bpl.n	800f71e <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800f72c:	6891      	ldr	r1, [r2, #8]
 800f72e:	2305      	movs	r3, #5
 800f730:	400b      	ands	r3, r1
 800f732:	2b01      	cmp	r3, #1
 800f734:	d009      	beq.n	800f74a <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f736:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f738:	2210      	movs	r2, #16
 800f73a:	4313      	orrs	r3, r2
 800f73c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f73e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f740:	3a0f      	subs	r2, #15
 800f742:	4313      	orrs	r3, r2
 800f744:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800f746:	2001      	movs	r0, #1
 800f748:	e7e9      	b.n	800f71e <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 800f74a:	6893      	ldr	r3, [r2, #8]
 800f74c:	2102      	movs	r1, #2
 800f74e:	430b      	orrs	r3, r1
 800f750:	6093      	str	r3, [r2, #8]
 800f752:	6823      	ldr	r3, [r4, #0]
 800f754:	2203      	movs	r2, #3
 800f756:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800f758:	f7ff ff8c 	bl	800f674 <HAL_GetTick>
 800f75c:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f75e:	2501      	movs	r5, #1
 800f760:	6823      	ldr	r3, [r4, #0]
 800f762:	689b      	ldr	r3, [r3, #8]
 800f764:	421d      	tst	r5, r3
 800f766:	d00e      	beq.n	800f786 <ADC_Disable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800f768:	f7ff ff84 	bl	800f674 <HAL_GetTick>
 800f76c:	1b80      	subs	r0, r0, r6
 800f76e:	2802      	cmp	r0, #2
 800f770:	d9f6      	bls.n	800f760 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f772:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f774:	2210      	movs	r2, #16
 800f776:	4313      	orrs	r3, r2
 800f778:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f77a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f77c:	3a0f      	subs	r2, #15
 800f77e:	4313      	orrs	r3, r2
 800f780:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f782:	2001      	movs	r0, #1
 800f784:	e7cb      	b.n	800f71e <ADC_Disable+0x12>
  return HAL_OK;
 800f786:	2000      	movs	r0, #0
 800f788:	e7c9      	b.n	800f71e <ADC_Disable+0x12>
	...

0800f78c <ADC_Enable>:
{
 800f78c:	b570      	push	{r4, r5, r6, lr}
 800f78e:	b082      	sub	sp, #8
 800f790:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 800f792:	2300      	movs	r3, #0
 800f794:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f796:	6803      	ldr	r3, [r0, #0]
 800f798:	6899      	ldr	r1, [r3, #8]
 800f79a:	2203      	movs	r2, #3
 800f79c:	400a      	ands	r2, r1
 800f79e:	2a01      	cmp	r2, #1
 800f7a0:	d02d      	beq.n	800f7fe <ADC_Enable+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f7a2:	6899      	ldr	r1, [r3, #8]
 800f7a4:	4a20      	ldr	r2, [pc, #128]	; (800f828 <ADC_Enable+0x9c>)
 800f7a6:	4211      	tst	r1, r2
 800f7a8:	d131      	bne.n	800f80e <ADC_Enable+0x82>
    __HAL_ADC_ENABLE(hadc);
 800f7aa:	689a      	ldr	r2, [r3, #8]
 800f7ac:	2101      	movs	r1, #1
 800f7ae:	430a      	orrs	r2, r1
 800f7b0:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800f7b2:	4b1e      	ldr	r3, [pc, #120]	; (800f82c <ADC_Enable+0xa0>)
 800f7b4:	6818      	ldr	r0, [r3, #0]
 800f7b6:	491e      	ldr	r1, [pc, #120]	; (800f830 <ADC_Enable+0xa4>)
 800f7b8:	f7f0 fcca 	bl	8000150 <__udivsi3>
 800f7bc:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800f7be:	9b01      	ldr	r3, [sp, #4]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d005      	beq.n	800f7d0 <ADC_Enable+0x44>
      wait_loop_index--;
 800f7c4:	9b01      	ldr	r3, [sp, #4]
 800f7c6:	3b01      	subs	r3, #1
 800f7c8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800f7ca:	9b01      	ldr	r3, [sp, #4]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d1f9      	bne.n	800f7c4 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800f7d0:	f7ff ff50 	bl	800f674 <HAL_GetTick>
 800f7d4:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f7d6:	2501      	movs	r5, #1
 800f7d8:	6823      	ldr	r3, [r4, #0]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	421d      	tst	r5, r3
 800f7de:	d121      	bne.n	800f824 <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f7e0:	f7ff ff48 	bl	800f674 <HAL_GetTick>
 800f7e4:	1b80      	subs	r0, r0, r6
 800f7e6:	2802      	cmp	r0, #2
 800f7e8:	d9f6      	bls.n	800f7d8 <ADC_Enable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f7ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f7ec:	2210      	movs	r2, #16
 800f7ee:	4313      	orrs	r3, r2
 800f7f0:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f7f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f7f4:	3a0f      	subs	r2, #15
 800f7f6:	4313      	orrs	r3, r2
 800f7f8:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f7fa:	2001      	movs	r0, #1
 800f7fc:	e010      	b.n	800f820 <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f7fe:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800f800:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f802:	07d2      	lsls	r2, r2, #31
 800f804:	d40c      	bmi.n	800f820 <ADC_Enable+0x94>
 800f806:	68da      	ldr	r2, [r3, #12]
 800f808:	0412      	lsls	r2, r2, #16
 800f80a:	d5ca      	bpl.n	800f7a2 <ADC_Enable+0x16>
 800f80c:	e008      	b.n	800f820 <ADC_Enable+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f80e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f810:	2210      	movs	r2, #16
 800f812:	4313      	orrs	r3, r2
 800f814:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f816:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f818:	3a0f      	subs	r2, #15
 800f81a:	4313      	orrs	r3, r2
 800f81c:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800f81e:	2001      	movs	r0, #1
}
 800f820:	b002      	add	sp, #8
 800f822:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800f824:	2000      	movs	r0, #0
 800f826:	e7fb      	b.n	800f820 <ADC_Enable+0x94>
 800f828:	80000017 	.word	0x80000017
 800f82c:	20000090 	.word	0x20000090
 800f830:	000f4240 	.word	0x000f4240

0800f834 <HAL_ADC_Init>:
{
 800f834:	b570      	push	{r4, r5, r6, lr}
 800f836:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800f838:	d100      	bne.n	800f83c <HAL_ADC_Init+0x8>
 800f83a:	e09b      	b.n	800f974 <HAL_ADC_Init+0x140>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f83c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d073      	beq.n	800f92a <HAL_ADC_Init+0xf6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f842:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f844:	06db      	lsls	r3, r3, #27
 800f846:	d500      	bpl.n	800f84a <HAL_ADC_Init+0x16>
 800f848:	e08e      	b.n	800f968 <HAL_ADC_Init+0x134>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800f84a:	6822      	ldr	r2, [r4, #0]
 800f84c:	6893      	ldr	r3, [r2, #8]
 800f84e:	2104      	movs	r1, #4
 800f850:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 800f852:	d000      	beq.n	800f856 <HAL_ADC_Init+0x22>
 800f854:	e088      	b.n	800f968 <HAL_ADC_Init+0x134>
    ADC_STATE_CLR_SET(hadc->State,
 800f856:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f858:	4847      	ldr	r0, [pc, #284]	; (800f978 <HAL_ADC_Init+0x144>)
 800f85a:	4003      	ands	r3, r0
 800f85c:	3006      	adds	r0, #6
 800f85e:	30ff      	adds	r0, #255	; 0xff
 800f860:	4303      	orrs	r3, r0
 800f862:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f864:	6890      	ldr	r0, [r2, #8]
 800f866:	2303      	movs	r3, #3
 800f868:	4003      	ands	r3, r0
 800f86a:	2b01      	cmp	r3, #1
 800f86c:	d063      	beq.n	800f936 <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR1,
 800f86e:	68d3      	ldr	r3, [r2, #12]
 800f870:	2018      	movs	r0, #24
 800f872:	4383      	bics	r3, r0
 800f874:	68a0      	ldr	r0, [r4, #8]
 800f876:	4303      	orrs	r3, r0
 800f878:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800f87a:	6822      	ldr	r2, [r4, #0]
 800f87c:	6913      	ldr	r3, [r2, #16]
 800f87e:	009b      	lsls	r3, r3, #2
 800f880:	089b      	lsrs	r3, r3, #2
 800f882:	6860      	ldr	r0, [r4, #4]
 800f884:	4303      	orrs	r3, r0
 800f886:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f888:	6822      	ldr	r2, [r4, #0]
 800f88a:	68d3      	ldr	r3, [r2, #12]
 800f88c:	483b      	ldr	r0, [pc, #236]	; (800f97c <HAL_ADC_Init+0x148>)
 800f88e:	4003      	ands	r3, r0
 800f890:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f892:	69a3      	ldr	r3, [r4, #24]
 800f894:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800f896:	69e3      	ldr	r3, [r4, #28]
 800f898:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f89a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f89c:	6a20      	ldr	r0, [r4, #32]
 800f89e:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800f8a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8a2:	000e      	movs	r6, r1
 800f8a4:	2b01      	cmp	r3, #1
 800f8a6:	d001      	beq.n	800f8ac <HAL_ADC_Init+0x78>
 800f8a8:	2680      	movs	r6, #128	; 0x80
 800f8aa:	0176      	lsls	r6, r6, #5
 800f8ac:	68e3      	ldr	r3, [r4, #12]
 800f8ae:	431a      	orrs	r2, r3
 800f8b0:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f8b2:	6923      	ldr	r3, [r4, #16]
 800f8b4:	2b02      	cmp	r3, #2
 800f8b6:	d045      	beq.n	800f944 <HAL_ADC_Init+0x110>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800f8b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f8ba:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f8bc:	4313      	orrs	r3, r2
 800f8be:	4333      	orrs	r3, r6
 800f8c0:	430b      	orrs	r3, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f8c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f8c4:	2a01      	cmp	r2, #1
 800f8c6:	d03f      	beq.n	800f948 <HAL_ADC_Init+0x114>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f8c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800f8ca:	21c2      	movs	r1, #194	; 0xc2
 800f8cc:	31ff      	adds	r1, #255	; 0xff
 800f8ce:	428a      	cmp	r2, r1
 800f8d0:	d002      	beq.n	800f8d8 <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800f8d2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f8d4:	430a      	orrs	r2, r1
 800f8d6:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800f8d8:	6821      	ldr	r1, [r4, #0]
 800f8da:	68ca      	ldr	r2, [r1, #12]
 800f8dc:	431a      	orrs	r2, r3
 800f8de:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800f8e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800f8e2:	2180      	movs	r1, #128	; 0x80
 800f8e4:	0549      	lsls	r1, r1, #21
 800f8e6:	428a      	cmp	r2, r1
 800f8e8:	d002      	beq.n	800f8f0 <HAL_ADC_Init+0xbc>
 800f8ea:	3a01      	subs	r2, #1
 800f8ec:	2a06      	cmp	r2, #6
 800f8ee:	d80a      	bhi.n	800f906 <HAL_ADC_Init+0xd2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800f8f0:	6820      	ldr	r0, [r4, #0]
 800f8f2:	6941      	ldr	r1, [r0, #20]
 800f8f4:	2207      	movs	r2, #7
 800f8f6:	4391      	bics	r1, r2
 800f8f8:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800f8fa:	6821      	ldr	r1, [r4, #0]
 800f8fc:	6948      	ldr	r0, [r1, #20]
 800f8fe:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800f900:	402a      	ands	r2, r5
 800f902:	4302      	orrs	r2, r0
 800f904:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800f906:	6822      	ldr	r2, [r4, #0]
 800f908:	68d2      	ldr	r2, [r2, #12]
 800f90a:	491d      	ldr	r1, [pc, #116]	; (800f980 <HAL_ADC_Init+0x14c>)
 800f90c:	400a      	ands	r2, r1
 800f90e:	429a      	cmp	r2, r3
 800f910:	d020      	beq.n	800f954 <HAL_ADC_Init+0x120>
      ADC_STATE_CLR_SET(hadc->State,
 800f912:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f914:	2212      	movs	r2, #18
 800f916:	4393      	bics	r3, r2
 800f918:	3a02      	subs	r2, #2
 800f91a:	4313      	orrs	r3, r2
 800f91c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f91e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f920:	3a0f      	subs	r2, #15
 800f922:	4313      	orrs	r3, r2
 800f924:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 800f926:	2001      	movs	r0, #1
 800f928:	e023      	b.n	800f972 <HAL_ADC_Init+0x13e>
    ADC_CLEAR_ERRORCODE(hadc);
 800f92a:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800f92c:	2240      	movs	r2, #64	; 0x40
 800f92e:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800f930:	f7f8 feb0 	bl	8008694 <HAL_ADC_MspInit>
 800f934:	e785      	b.n	800f842 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f936:	6813      	ldr	r3, [r2, #0]
 800f938:	07db      	lsls	r3, r3, #31
 800f93a:	d4a5      	bmi.n	800f888 <HAL_ADC_Init+0x54>
 800f93c:	68d3      	ldr	r3, [r2, #12]
 800f93e:	041b      	lsls	r3, r3, #16
 800f940:	d4a2      	bmi.n	800f888 <HAL_ADC_Init+0x54>
 800f942:	e794      	b.n	800f86e <HAL_ADC_Init+0x3a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f944:	2104      	movs	r1, #4
 800f946:	e7b7      	b.n	800f8b8 <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f948:	2800      	cmp	r0, #0
 800f94a:	d1bd      	bne.n	800f8c8 <HAL_ADC_Init+0x94>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800f94c:	2280      	movs	r2, #128	; 0x80
 800f94e:	0252      	lsls	r2, r2, #9
 800f950:	4313      	orrs	r3, r2
 800f952:	e7b9      	b.n	800f8c8 <HAL_ADC_Init+0x94>
      ADC_CLEAR_ERRORCODE(hadc);
 800f954:	2300      	movs	r3, #0
 800f956:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800f958:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f95a:	2203      	movs	r2, #3
 800f95c:	4393      	bics	r3, r2
 800f95e:	3a02      	subs	r2, #2
 800f960:	4313      	orrs	r3, r2
 800f962:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f964:	2000      	movs	r0, #0
 800f966:	e004      	b.n	800f972 <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f968:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f96a:	2210      	movs	r2, #16
 800f96c:	4313      	orrs	r3, r2
 800f96e:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800f970:	2001      	movs	r0, #1
}
 800f972:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800f974:	2001      	movs	r0, #1
 800f976:	e7fc      	b.n	800f972 <HAL_ADC_Init+0x13e>
 800f978:	fffffefd 	.word	0xfffffefd
 800f97c:	fffe0219 	.word	0xfffe0219
 800f980:	833fffe7 	.word	0x833fffe7

0800f984 <HAL_ADC_Start>:
{
 800f984:	b510      	push	{r4, lr}
 800f986:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f988:	6803      	ldr	r3, [r0, #0]
 800f98a:	689b      	ldr	r3, [r3, #8]
 800f98c:	075b      	lsls	r3, r3, #29
 800f98e:	d423      	bmi.n	800f9d8 <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 800f990:	2340      	movs	r3, #64	; 0x40
 800f992:	5cc3      	ldrb	r3, [r0, r3]
 800f994:	2b01      	cmp	r3, #1
 800f996:	d021      	beq.n	800f9dc <HAL_ADC_Start+0x58>
 800f998:	2340      	movs	r3, #64	; 0x40
 800f99a:	2201      	movs	r2, #1
 800f99c:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f99e:	69c3      	ldr	r3, [r0, #28]
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	d114      	bne.n	800f9ce <HAL_ADC_Start+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 800f9a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f9a6:	4a0e      	ldr	r2, [pc, #56]	; (800f9e0 <HAL_ADC_Start+0x5c>)
 800f9a8:	401a      	ands	r2, r3
 800f9aa:	2380      	movs	r3, #128	; 0x80
 800f9ac:	005b      	lsls	r3, r3, #1
 800f9ae:	4313      	orrs	r3, r2
 800f9b0:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800f9b6:	2240      	movs	r2, #64	; 0x40
 800f9b8:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f9ba:	6823      	ldr	r3, [r4, #0]
 800f9bc:	3a24      	subs	r2, #36	; 0x24
 800f9be:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f9c0:	6822      	ldr	r2, [r4, #0]
 800f9c2:	6893      	ldr	r3, [r2, #8]
 800f9c4:	2104      	movs	r1, #4
 800f9c6:	430b      	orrs	r3, r1
 800f9c8:	6093      	str	r3, [r2, #8]
 800f9ca:	2000      	movs	r0, #0
}
 800f9cc:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800f9ce:	f7ff fedd 	bl	800f78c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	d0e6      	beq.n	800f9a4 <HAL_ADC_Start+0x20>
 800f9d6:	e7f9      	b.n	800f9cc <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 800f9d8:	2002      	movs	r0, #2
 800f9da:	e7f7      	b.n	800f9cc <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 800f9dc:	2002      	movs	r0, #2
 800f9de:	e7f5      	b.n	800f9cc <HAL_ADC_Start+0x48>
 800f9e0:	fffff0fe 	.word	0xfffff0fe

0800f9e4 <HAL_ADC_Stop>:
{ 
 800f9e4:	b510      	push	{r4, lr}
 800f9e6:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800f9e8:	2340      	movs	r3, #64	; 0x40
 800f9ea:	5cc3      	ldrb	r3, [r0, r3]
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d017      	beq.n	800fa20 <HAL_ADC_Stop+0x3c>
 800f9f0:	2340      	movs	r3, #64	; 0x40
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800f9f6:	f7ff fe5f 	bl	800f6b8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800f9fa:	2800      	cmp	r0, #0
 800f9fc:	d003      	beq.n	800fa06 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 800f9fe:	2340      	movs	r3, #64	; 0x40
 800fa00:	2200      	movs	r2, #0
 800fa02:	54e2      	strb	r2, [r4, r3]
}
 800fa04:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800fa06:	0020      	movs	r0, r4
 800fa08:	f7ff fe80 	bl	800f70c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800fa0c:	2800      	cmp	r0, #0
 800fa0e:	d1f6      	bne.n	800f9fe <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 800fa10:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fa12:	4a04      	ldr	r2, [pc, #16]	; (800fa24 <HAL_ADC_Stop+0x40>)
 800fa14:	4013      	ands	r3, r2
 800fa16:	3204      	adds	r2, #4
 800fa18:	32ff      	adds	r2, #255	; 0xff
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	6463      	str	r3, [r4, #68]	; 0x44
 800fa1e:	e7ee      	b.n	800f9fe <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 800fa20:	2002      	movs	r0, #2
 800fa22:	e7ef      	b.n	800fa04 <HAL_ADC_Stop+0x20>
 800fa24:	fffffefe 	.word	0xfffffefe

0800fa28 <HAL_ADC_PollForConversion>:
{
 800fa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa2a:	0006      	movs	r6, r0
 800fa2c:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800fa2e:	6943      	ldr	r3, [r0, #20]
 800fa30:	2b08      	cmp	r3, #8
 800fa32:	d026      	beq.n	800fa82 <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800fa34:	6803      	ldr	r3, [r0, #0]
 800fa36:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800fa38:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800fa3a:	07db      	lsls	r3, r3, #31
 800fa3c:	d418      	bmi.n	800fa70 <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 800fa3e:	f7ff fe19 	bl	800f674 <HAL_GetTick>
 800fa42:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800fa44:	6832      	ldr	r2, [r6, #0]
 800fa46:	6813      	ldr	r3, [r2, #0]
 800fa48:	421d      	tst	r5, r3
 800fa4a:	d11c      	bne.n	800fa86 <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 800fa4c:	1c63      	adds	r3, r4, #1
 800fa4e:	d0fa      	beq.n	800fa46 <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800fa50:	2c00      	cmp	r4, #0
 800fa52:	d004      	beq.n	800fa5e <HAL_ADC_PollForConversion+0x36>
 800fa54:	f7ff fe0e 	bl	800f674 <HAL_GetTick>
 800fa58:	1bc0      	subs	r0, r0, r7
 800fa5a:	42a0      	cmp	r0, r4
 800fa5c:	d9f2      	bls.n	800fa44 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800fa5e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800fa60:	2204      	movs	r2, #4
 800fa62:	4313      	orrs	r3, r2
 800fa64:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800fa66:	2340      	movs	r3, #64	; 0x40
 800fa68:	2200      	movs	r2, #0
 800fa6a:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800fa6c:	2003      	movs	r0, #3
 800fa6e:	e007      	b.n	800fa80 <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fa70:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fa72:	2220      	movs	r2, #32
 800fa74:	4313      	orrs	r3, r2
 800fa76:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800fa78:	2340      	movs	r3, #64	; 0x40
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 800fa7e:	2001      	movs	r0, #1
}
 800fa80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800fa82:	2508      	movs	r5, #8
 800fa84:	e7db      	b.n	800fa3e <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800fa86:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800fa88:	2380      	movs	r3, #128	; 0x80
 800fa8a:	009b      	lsls	r3, r3, #2
 800fa8c:	430b      	orrs	r3, r1
 800fa8e:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800fa90:	68d1      	ldr	r1, [r2, #12]
 800fa92:	23c0      	movs	r3, #192	; 0xc0
 800fa94:	011b      	lsls	r3, r3, #4
 800fa96:	4219      	tst	r1, r3
 800fa98:	d113      	bne.n	800fac2 <HAL_ADC_PollForConversion+0x9a>
 800fa9a:	6a33      	ldr	r3, [r6, #32]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d110      	bne.n	800fac2 <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800faa0:	6813      	ldr	r3, [r2, #0]
 800faa2:	071b      	lsls	r3, r3, #28
 800faa4:	d50d      	bpl.n	800fac2 <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800faa6:	6893      	ldr	r3, [r2, #8]
 800faa8:	075b      	lsls	r3, r3, #29
 800faaa:	d412      	bmi.n	800fad2 <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800faac:	6853      	ldr	r3, [r2, #4]
 800faae:	210c      	movs	r1, #12
 800fab0:	438b      	bics	r3, r1
 800fab2:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800fab4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800fab6:	4a0b      	ldr	r2, [pc, #44]	; (800fae4 <HAL_ADC_PollForConversion+0xbc>)
 800fab8:	4013      	ands	r3, r2
 800faba:	3204      	adds	r2, #4
 800fabc:	32ff      	adds	r2, #255	; 0xff
 800fabe:	4313      	orrs	r3, r2
 800fac0:	6473      	str	r3, [r6, #68]	; 0x44
  return HAL_OK;
 800fac2:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800fac4:	69b3      	ldr	r3, [r6, #24]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d1da      	bne.n	800fa80 <HAL_ADC_PollForConversion+0x58>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800faca:	6833      	ldr	r3, [r6, #0]
 800facc:	220c      	movs	r2, #12
 800face:	601a      	str	r2, [r3, #0]
 800fad0:	e7d6      	b.n	800fa80 <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fad2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800fad4:	2220      	movs	r2, #32
 800fad6:	4313      	orrs	r3, r2
 800fad8:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fada:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800fadc:	3a1f      	subs	r2, #31
 800fade:	4313      	orrs	r3, r2
 800fae0:	64b3      	str	r3, [r6, #72]	; 0x48
 800fae2:	e7ee      	b.n	800fac2 <HAL_ADC_PollForConversion+0x9a>
 800fae4:	fffffefe 	.word	0xfffffefe

0800fae8 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800fae8:	6803      	ldr	r3, [r0, #0]
 800faea:	2208      	movs	r2, #8
 800faec:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 800faee:	6803      	ldr	r3, [r0, #0]
 800faf0:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800faf2:	4770      	bx	lr

0800faf4 <HAL_ADC_ConfigChannel>:
{
 800faf4:	b530      	push	{r4, r5, lr}
 800faf6:	b083      	sub	sp, #12
 800faf8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 800fafa:	2300      	movs	r3, #0
 800fafc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800fafe:	3340      	adds	r3, #64	; 0x40
 800fb00:	5cc3      	ldrb	r3, [r0, r3]
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d100      	bne.n	800fb08 <HAL_ADC_ConfigChannel+0x14>
 800fb06:	e088      	b.n	800fc1a <HAL_ADC_ConfigChannel+0x126>
 800fb08:	2340      	movs	r3, #64	; 0x40
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fb0e:	6803      	ldr	r3, [r0, #0]
 800fb10:	689a      	ldr	r2, [r3, #8]
 800fb12:	0752      	lsls	r2, r2, #29
 800fb14:	d475      	bmi.n	800fc02 <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 800fb16:	4a42      	ldr	r2, [pc, #264]	; (800fc20 <HAL_ADC_ConfigChannel+0x12c>)
 800fb18:	6848      	ldr	r0, [r1, #4]
 800fb1a:	4290      	cmp	r0, r2
 800fb1c:	d050      	beq.n	800fbc0 <HAL_ADC_ConfigChannel+0xcc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fb1e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fb20:	2201      	movs	r2, #1
 800fb22:	680d      	ldr	r5, [r1, #0]
 800fb24:	40aa      	lsls	r2, r5
 800fb26:	4302      	orrs	r2, r0
 800fb28:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fb2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fb2c:	2280      	movs	r2, #128	; 0x80
 800fb2e:	0552      	lsls	r2, r2, #21
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d013      	beq.n	800fb5c <HAL_ADC_ConfigChannel+0x68>
 800fb34:	3b01      	subs	r3, #1
 800fb36:	2b06      	cmp	r3, #6
 800fb38:	d910      	bls.n	800fb5c <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800fb3a:	6822      	ldr	r2, [r4, #0]
 800fb3c:	6950      	ldr	r0, [r2, #20]
 800fb3e:	2307      	movs	r3, #7
 800fb40:	4003      	ands	r3, r0
 800fb42:	6888      	ldr	r0, [r1, #8]
 800fb44:	4298      	cmp	r0, r3
 800fb46:	d009      	beq.n	800fb5c <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800fb48:	6950      	ldr	r0, [r2, #20]
 800fb4a:	2307      	movs	r3, #7
 800fb4c:	4398      	bics	r0, r3
 800fb4e:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800fb50:	6822      	ldr	r2, [r4, #0]
 800fb52:	6950      	ldr	r0, [r2, #20]
 800fb54:	688d      	ldr	r5, [r1, #8]
 800fb56:	402b      	ands	r3, r5
 800fb58:	4303      	orrs	r3, r0
 800fb5a:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fb5c:	680b      	ldr	r3, [r1, #0]
 800fb5e:	001a      	movs	r2, r3
 800fb60:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fb62:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fb64:	2a02      	cmp	r2, #2
 800fb66:	d851      	bhi.n	800fc0c <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fb68:	4a2e      	ldr	r2, [pc, #184]	; (800fc24 <HAL_ADC_ConfigChannel+0x130>)
 800fb6a:	6810      	ldr	r0, [r2, #0]
 800fb6c:	2b10      	cmp	r3, #16
 800fb6e:	d024      	beq.n	800fbba <HAL_ADC_ConfigChannel+0xc6>
 800fb70:	3b11      	subs	r3, #17
 800fb72:	425a      	negs	r2, r3
 800fb74:	415a      	adcs	r2, r3
 800fb76:	4253      	negs	r3, r2
 800fb78:	4a2b      	ldr	r2, [pc, #172]	; (800fc28 <HAL_ADC_ConfigChannel+0x134>)
 800fb7a:	4013      	ands	r3, r2
 800fb7c:	2280      	movs	r2, #128	; 0x80
 800fb7e:	0452      	lsls	r2, r2, #17
 800fb80:	4694      	mov	ip, r2
 800fb82:	4463      	add	r3, ip
 800fb84:	4303      	orrs	r3, r0
 800fb86:	4a27      	ldr	r2, [pc, #156]	; (800fc24 <HAL_ADC_ConfigChannel+0x130>)
 800fb88:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800fb8a:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fb8c:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800fb8e:	2b10      	cmp	r3, #16
 800fb90:	d13c      	bne.n	800fc0c <HAL_ADC_ConfigChannel+0x118>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800fb92:	4b26      	ldr	r3, [pc, #152]	; (800fc2c <HAL_ADC_ConfigChannel+0x138>)
 800fb94:	6818      	ldr	r0, [r3, #0]
 800fb96:	4926      	ldr	r1, [pc, #152]	; (800fc30 <HAL_ADC_ConfigChannel+0x13c>)
 800fb98:	f7f0 fada 	bl	8000150 <__udivsi3>
 800fb9c:	0083      	lsls	r3, r0, #2
 800fb9e:	1818      	adds	r0, r3, r0
 800fba0:	0040      	lsls	r0, r0, #1
 800fba2:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 800fba4:	9b01      	ldr	r3, [sp, #4]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d035      	beq.n	800fc16 <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 800fbaa:	9b01      	ldr	r3, [sp, #4]
 800fbac:	3b01      	subs	r3, #1
 800fbae:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800fbb0:	9b01      	ldr	r3, [sp, #4]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d1f9      	bne.n	800fbaa <HAL_ADC_ConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fbb6:	2000      	movs	r0, #0
 800fbb8:	e028      	b.n	800fc0c <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fbba:	2380      	movs	r3, #128	; 0x80
 800fbbc:	041b      	lsls	r3, r3, #16
 800fbbe:	e7e1      	b.n	800fb84 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fbc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fbc2:	2001      	movs	r0, #1
 800fbc4:	680d      	ldr	r5, [r1, #0]
 800fbc6:	40a8      	lsls	r0, r5
 800fbc8:	4382      	bics	r2, r0
 800fbca:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fbcc:	680b      	ldr	r3, [r1, #0]
 800fbce:	001a      	movs	r2, r3
 800fbd0:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fbd2:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fbd4:	2a02      	cmp	r2, #2
 800fbd6:	d819      	bhi.n	800fc0c <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fbd8:	4a12      	ldr	r2, [pc, #72]	; (800fc24 <HAL_ADC_ConfigChannel+0x130>)
 800fbda:	6811      	ldr	r1, [r2, #0]
 800fbdc:	2b10      	cmp	r3, #16
 800fbde:	d00e      	beq.n	800fbfe <HAL_ADC_ConfigChannel+0x10a>
 800fbe0:	3b11      	subs	r3, #17
 800fbe2:	425a      	negs	r2, r3
 800fbe4:	415a      	adcs	r2, r3
 800fbe6:	4252      	negs	r2, r2
 800fbe8:	23c0      	movs	r3, #192	; 0xc0
 800fbea:	041b      	lsls	r3, r3, #16
 800fbec:	4013      	ands	r3, r2
 800fbee:	4a11      	ldr	r2, [pc, #68]	; (800fc34 <HAL_ADC_ConfigChannel+0x140>)
 800fbf0:	4694      	mov	ip, r2
 800fbf2:	4463      	add	r3, ip
 800fbf4:	400b      	ands	r3, r1
 800fbf6:	4a0b      	ldr	r2, [pc, #44]	; (800fc24 <HAL_ADC_ConfigChannel+0x130>)
 800fbf8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fbfa:	2000      	movs	r0, #0
 800fbfc:	e006      	b.n	800fc0c <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fbfe:	4b0e      	ldr	r3, [pc, #56]	; (800fc38 <HAL_ADC_ConfigChannel+0x144>)
 800fc00:	e7f8      	b.n	800fbf4 <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fc02:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fc04:	2220      	movs	r2, #32
 800fc06:	4313      	orrs	r3, r2
 800fc08:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800fc0a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800fc0c:	2340      	movs	r3, #64	; 0x40
 800fc0e:	2200      	movs	r2, #0
 800fc10:	54e2      	strb	r2, [r4, r3]
}
 800fc12:	b003      	add	sp, #12
 800fc14:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fc16:	2000      	movs	r0, #0
 800fc18:	e7f8      	b.n	800fc0c <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 800fc1a:	2002      	movs	r0, #2
 800fc1c:	e7f9      	b.n	800fc12 <HAL_ADC_ConfigChannel+0x11e>
 800fc1e:	46c0      	nop			; (mov r8, r8)
 800fc20:	00001001 	.word	0x00001001
 800fc24:	40012708 	.word	0x40012708
 800fc28:	ff400000 	.word	0xff400000
 800fc2c:	20000090 	.word	0x20000090
 800fc30:	000f4240 	.word	0x000f4240
 800fc34:	feffffff 	.word	0xfeffffff
 800fc38:	ff7fffff 	.word	0xff7fffff

0800fc3c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800fc3c:	b570      	push	{r4, r5, r6, lr}
 800fc3e:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800fc40:	2340      	movs	r3, #64	; 0x40
 800fc42:	5cc3      	ldrb	r3, [r0, r3]
 800fc44:	2b01      	cmp	r3, #1
 800fc46:	d042      	beq.n	800fcce <HAL_ADCEx_Calibration_Start+0x92>
 800fc48:	2340      	movs	r3, #64	; 0x40
 800fc4a:	2201      	movs	r2, #1
 800fc4c:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fc4e:	6802      	ldr	r2, [r0, #0]
 800fc50:	6891      	ldr	r1, [r2, #8]
 800fc52:	3b3d      	subs	r3, #61	; 0x3d
 800fc54:	400b      	ands	r3, r1
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d105      	bne.n	800fc66 <HAL_ADCEx_Calibration_Start+0x2a>
 800fc5a:	6813      	ldr	r3, [r2, #0]
 800fc5c:	07db      	lsls	r3, r3, #31
 800fc5e:	d42d      	bmi.n	800fcbc <HAL_ADCEx_Calibration_Start+0x80>
 800fc60:	68d3      	ldr	r3, [r2, #12]
 800fc62:	041b      	lsls	r3, r3, #16
 800fc64:	d42a      	bmi.n	800fcbc <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800fc66:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fc68:	491a      	ldr	r1, [pc, #104]	; (800fcd4 <HAL_ADCEx_Calibration_Start+0x98>)
 800fc6a:	400b      	ands	r3, r1
 800fc6c:	3106      	adds	r1, #6
 800fc6e:	31ff      	adds	r1, #255	; 0xff
 800fc70:	430b      	orrs	r3, r1
 800fc72:	6463      	str	r3, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800fc74:	6891      	ldr	r1, [r2, #8]
 800fc76:	2380      	movs	r3, #128	; 0x80
 800fc78:	061b      	lsls	r3, r3, #24
 800fc7a:	430b      	orrs	r3, r1
 800fc7c:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();  
 800fc7e:	f7ff fcf9 	bl	800f674 <HAL_GetTick>
 800fc82:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800fc84:	6823      	ldr	r3, [r4, #0]
 800fc86:	689b      	ldr	r3, [r3, #8]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	da0f      	bge.n	800fcac <HAL_ADCEx_Calibration_Start+0x70>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800fc8c:	f7ff fcf2 	bl	800f674 <HAL_GetTick>
 800fc90:	1b40      	subs	r0, r0, r5
 800fc92:	2802      	cmp	r0, #2
 800fc94:	d9f6      	bls.n	800fc84 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800fc96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fc98:	2212      	movs	r2, #18
 800fc9a:	4393      	bics	r3, r2
 800fc9c:	3a02      	subs	r2, #2
 800fc9e:	4313      	orrs	r3, r2
 800fca0:	6463      	str	r3, [r4, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800fca2:	2340      	movs	r3, #64	; 0x40
 800fca4:	2200      	movs	r2, #0
 800fca6:	54e2      	strb	r2, [r4, r3]
        
        return HAL_ERROR;
 800fca8:	2001      	movs	r0, #1
 800fcaa:	e00f      	b.n	800fccc <HAL_ADCEx_Calibration_Start+0x90>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fcac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fcae:	2203      	movs	r2, #3
 800fcb0:	4393      	bics	r3, r2
 800fcb2:	3a02      	subs	r2, #2
 800fcb4:	4313      	orrs	r3, r2
 800fcb6:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fcb8:	2000      	movs	r0, #0
 800fcba:	e004      	b.n	800fcc6 <HAL_ADCEx_Calibration_Start+0x8a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fcbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fcbe:	2220      	movs	r2, #32
 800fcc0:	4313      	orrs	r3, r2
 800fcc2:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 800fcc4:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800fcc6:	2340      	movs	r3, #64	; 0x40
 800fcc8:	2200      	movs	r2, #0
 800fcca:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 800fccc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 800fcce:	2002      	movs	r0, #2
 800fcd0:	e7fc      	b.n	800fccc <HAL_ADCEx_Calibration_Start+0x90>
 800fcd2:	46c0      	nop			; (mov r8, r8)
 800fcd4:	fffffefd 	.word	0xfffffefd

0800fcd8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fcd8:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	db14      	blt.n	800fd08 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fcde:	0883      	lsrs	r3, r0, #2
 800fce0:	009b      	lsls	r3, r3, #2
 800fce2:	4a15      	ldr	r2, [pc, #84]	; (800fd38 <HAL_NVIC_SetPriority+0x60>)
 800fce4:	4694      	mov	ip, r2
 800fce6:	4463      	add	r3, ip
 800fce8:	26c0      	movs	r6, #192	; 0xc0
 800fcea:	00b6      	lsls	r6, r6, #2
 800fcec:	599d      	ldr	r5, [r3, r6]
 800fcee:	2403      	movs	r4, #3
 800fcf0:	4020      	ands	r0, r4
 800fcf2:	00c0      	lsls	r0, r0, #3
 800fcf4:	22ff      	movs	r2, #255	; 0xff
 800fcf6:	0014      	movs	r4, r2
 800fcf8:	4084      	lsls	r4, r0
 800fcfa:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fcfc:	0189      	lsls	r1, r1, #6
 800fcfe:	400a      	ands	r2, r1
 800fd00:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fd02:	432a      	orrs	r2, r5
 800fd04:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800fd06:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fd08:	b2c0      	uxtb	r0, r0
 800fd0a:	230f      	movs	r3, #15
 800fd0c:	4003      	ands	r3, r0
 800fd0e:	3b08      	subs	r3, #8
 800fd10:	089b      	lsrs	r3, r3, #2
 800fd12:	009b      	lsls	r3, r3, #2
 800fd14:	4a09      	ldr	r2, [pc, #36]	; (800fd3c <HAL_NVIC_SetPriority+0x64>)
 800fd16:	4694      	mov	ip, r2
 800fd18:	4463      	add	r3, ip
 800fd1a:	69dd      	ldr	r5, [r3, #28]
 800fd1c:	2203      	movs	r2, #3
 800fd1e:	4010      	ands	r0, r2
 800fd20:	00c0      	lsls	r0, r0, #3
 800fd22:	24ff      	movs	r4, #255	; 0xff
 800fd24:	0022      	movs	r2, r4
 800fd26:	4082      	lsls	r2, r0
 800fd28:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fd2a:	0189      	lsls	r1, r1, #6
 800fd2c:	400c      	ands	r4, r1
 800fd2e:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fd30:	432c      	orrs	r4, r5
 800fd32:	61dc      	str	r4, [r3, #28]
 800fd34:	e7e7      	b.n	800fd06 <HAL_NVIC_SetPriority+0x2e>
 800fd36:	46c0      	nop			; (mov r8, r8)
 800fd38:	e000e100 	.word	0xe000e100
 800fd3c:	e000ed00 	.word	0xe000ed00

0800fd40 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fd40:	231f      	movs	r3, #31
 800fd42:	4018      	ands	r0, r3
 800fd44:	3b1e      	subs	r3, #30
 800fd46:	4083      	lsls	r3, r0
 800fd48:	4a01      	ldr	r2, [pc, #4]	; (800fd50 <HAL_NVIC_EnableIRQ+0x10>)
 800fd4a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800fd4c:	4770      	bx	lr
 800fd4e:	46c0      	nop			; (mov r8, r8)
 800fd50:	e000e100 	.word	0xe000e100

0800fd54 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fd54:	231f      	movs	r3, #31
 800fd56:	4018      	ands	r0, r3
 800fd58:	3b1e      	subs	r3, #30
 800fd5a:	4083      	lsls	r3, r0
 800fd5c:	4901      	ldr	r1, [pc, #4]	; (800fd64 <HAL_NVIC_DisableIRQ+0x10>)
 800fd5e:	2280      	movs	r2, #128	; 0x80
 800fd60:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800fd62:	4770      	bx	lr
 800fd64:	e000e100 	.word	0xe000e100

0800fd68 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800fd68:	1e43      	subs	r3, r0, #1
 800fd6a:	4a0a      	ldr	r2, [pc, #40]	; (800fd94 <HAL_SYSTICK_Config+0x2c>)
 800fd6c:	2001      	movs	r0, #1
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d80e      	bhi.n	800fd90 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fd72:	4a09      	ldr	r2, [pc, #36]	; (800fd98 <HAL_SYSTICK_Config+0x30>)
 800fd74:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fd76:	4809      	ldr	r0, [pc, #36]	; (800fd9c <HAL_SYSTICK_Config+0x34>)
 800fd78:	6a03      	ldr	r3, [r0, #32]
 800fd7a:	021b      	lsls	r3, r3, #8
 800fd7c:	0a1b      	lsrs	r3, r3, #8
 800fd7e:	21c0      	movs	r1, #192	; 0xc0
 800fd80:	0609      	lsls	r1, r1, #24
 800fd82:	430b      	orrs	r3, r1
 800fd84:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fd86:	2300      	movs	r3, #0
 800fd88:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fd8a:	3307      	adds	r3, #7
 800fd8c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fd8e:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800fd90:	4770      	bx	lr
 800fd92:	46c0      	nop			; (mov r8, r8)
 800fd94:	00ffffff 	.word	0x00ffffff
 800fd98:	e000e010 	.word	0xe000e010
 800fd9c:	e000ed00 	.word	0xe000ed00

0800fda0 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800fda0:	2804      	cmp	r0, #4
 800fda2:	d005      	beq.n	800fdb0 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800fda4:	4a05      	ldr	r2, [pc, #20]	; (800fdbc <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800fda6:	6813      	ldr	r3, [r2, #0]
 800fda8:	2104      	movs	r1, #4
 800fdaa:	438b      	bics	r3, r1
 800fdac:	6013      	str	r3, [r2, #0]
  }
}
 800fdae:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800fdb0:	4a02      	ldr	r2, [pc, #8]	; (800fdbc <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800fdb2:	6813      	ldr	r3, [r2, #0]
 800fdb4:	2104      	movs	r1, #4
 800fdb6:	430b      	orrs	r3, r1
 800fdb8:	6013      	str	r3, [r2, #0]
 800fdba:	e7f8      	b.n	800fdae <HAL_SYSTICK_CLKSourceConfig+0xe>
 800fdbc:	e000e010 	.word	0xe000e010

0800fdc0 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800fdc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdc2:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800fdc4:	0891      	lsrs	r1, r2, #2
 800fdc6:	d013      	beq.n	800fdf0 <CRC_Handle_8+0x30>
 800fdc8:	0034      	movs	r4, r6
 800fdca:	2303      	movs	r3, #3
 800fdcc:	0017      	movs	r7, r2
 800fdce:	439f      	bics	r7, r3
 800fdd0:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800fdd2:	7823      	ldrb	r3, [r4, #0]
 800fdd4:	061b      	lsls	r3, r3, #24
 800fdd6:	7865      	ldrb	r5, [r4, #1]
 800fdd8:	042d      	lsls	r5, r5, #16
 800fdda:	432b      	orrs	r3, r5
 800fddc:	78e5      	ldrb	r5, [r4, #3]
 800fdde:	432b      	orrs	r3, r5
 800fde0:	78a5      	ldrb	r5, [r4, #2]
 800fde2:	022d      	lsls	r5, r5, #8
 800fde4:	432b      	orrs	r3, r5
 800fde6:	6805      	ldr	r5, [r0, #0]
 800fde8:	602b      	str	r3, [r5, #0]
 800fdea:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 800fdec:	42bc      	cmp	r4, r7
 800fdee:	d1f0      	bne.n	800fdd2 <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800fdf0:	2303      	movs	r3, #3
 800fdf2:	401a      	ands	r2, r3
 800fdf4:	d01e      	beq.n	800fe34 <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 800fdf6:	2a01      	cmp	r2, #1
 800fdf8:	d00a      	beq.n	800fe10 <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 800fdfa:	2a02      	cmp	r2, #2
 800fdfc:	d10d      	bne.n	800fe1a <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800fdfe:	0089      	lsls	r1, r1, #2
 800fe00:	5c72      	ldrb	r2, [r6, r1]
 800fe02:	0212      	lsls	r2, r2, #8
 800fe04:	1871      	adds	r1, r6, r1
 800fe06:	784b      	ldrb	r3, [r1, #1]
 800fe08:	4313      	orrs	r3, r2
 800fe0a:	6802      	ldr	r2, [r0, #0]
 800fe0c:	8013      	strh	r3, [r2, #0]
 800fe0e:	e011      	b.n	800fe34 <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800fe10:	0089      	lsls	r1, r1, #2
 800fe12:	5d8b      	ldrb	r3, [r1, r6]
 800fe14:	6802      	ldr	r2, [r0, #0]
 800fe16:	7013      	strb	r3, [r2, #0]
 800fe18:	e00c      	b.n	800fe34 <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 800fe1a:	2a03      	cmp	r2, #3
 800fe1c:	d10a      	bne.n	800fe34 <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800fe1e:	0089      	lsls	r1, r1, #2
 800fe20:	5c72      	ldrb	r2, [r6, r1]
 800fe22:	0212      	lsls	r2, r2, #8
 800fe24:	1871      	adds	r1, r6, r1
 800fe26:	784b      	ldrb	r3, [r1, #1]
 800fe28:	4313      	orrs	r3, r2
 800fe2a:	6802      	ldr	r2, [r0, #0]
 800fe2c:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800fe2e:	788b      	ldrb	r3, [r1, #2]
 800fe30:	6802      	ldr	r2, [r0, #0]
 800fe32:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800fe34:	6803      	ldr	r3, [r0, #0]
 800fe36:	6818      	ldr	r0, [r3, #0]
}
 800fe38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe3a <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800fe3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe3c:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800fe3e:	0852      	lsrs	r2, r2, #1
 800fe40:	d00b      	beq.n	800fe5a <CRC_Handle_16+0x20>
 800fe42:	000c      	movs	r4, r1
 800fe44:	0097      	lsls	r7, r2, #2
 800fe46:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800fe48:	8823      	ldrh	r3, [r4, #0]
 800fe4a:	041b      	lsls	r3, r3, #16
 800fe4c:	8866      	ldrh	r6, [r4, #2]
 800fe4e:	4333      	orrs	r3, r6
 800fe50:	6806      	ldr	r6, [r0, #0]
 800fe52:	6033      	str	r3, [r6, #0]
 800fe54:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 800fe56:	42bc      	cmp	r4, r7
 800fe58:	d1f6      	bne.n	800fe48 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 800fe5a:	07eb      	lsls	r3, r5, #31
 800fe5c:	d503      	bpl.n	800fe66 <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800fe5e:	0092      	lsls	r2, r2, #2
 800fe60:	5a53      	ldrh	r3, [r2, r1]
 800fe62:	6802      	ldr	r2, [r0, #0]
 800fe64:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800fe66:	6803      	ldr	r3, [r0, #0]
 800fe68:	6818      	ldr	r0, [r3, #0]
}
 800fe6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe6c <HAL_CRC_Init>:
{
 800fe6c:	b510      	push	{r4, lr}
 800fe6e:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800fe70:	d029      	beq.n	800fec6 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800fe72:	7f43      	ldrb	r3, [r0, #29]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d01e      	beq.n	800feb6 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800fe78:	2302      	movs	r3, #2
 800fe7a:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800fe7c:	0020      	movs	r0, r4
 800fe7e:	f000 f8b1 	bl	800ffe4 <HAL_CRCEx_Init>
 800fe82:	2800      	cmp	r0, #0
 800fe84:	d121      	bne.n	800feca <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800fe86:	7963      	ldrb	r3, [r4, #5]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d118      	bne.n	800febe <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800fe8c:	6823      	ldr	r3, [r4, #0]
 800fe8e:	2201      	movs	r2, #1
 800fe90:	4252      	negs	r2, r2
 800fe92:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800fe94:	6822      	ldr	r2, [r4, #0]
 800fe96:	6893      	ldr	r3, [r2, #8]
 800fe98:	2160      	movs	r1, #96	; 0x60
 800fe9a:	438b      	bics	r3, r1
 800fe9c:	6961      	ldr	r1, [r4, #20]
 800fe9e:	430b      	orrs	r3, r1
 800fea0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800fea2:	6822      	ldr	r2, [r4, #0]
 800fea4:	6893      	ldr	r3, [r2, #8]
 800fea6:	2180      	movs	r1, #128	; 0x80
 800fea8:	438b      	bics	r3, r1
 800feaa:	69a1      	ldr	r1, [r4, #24]
 800feac:	430b      	orrs	r3, r1
 800feae:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800feb0:	2301      	movs	r3, #1
 800feb2:	7763      	strb	r3, [r4, #29]
}
 800feb4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800feb6:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800feb8:	f7fc fc74 	bl	800c7a4 <HAL_CRC_MspInit>
 800febc:	e7dc      	b.n	800fe78 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800febe:	6823      	ldr	r3, [r4, #0]
 800fec0:	6922      	ldr	r2, [r4, #16]
 800fec2:	611a      	str	r2, [r3, #16]
 800fec4:	e7e6      	b.n	800fe94 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 800fec6:	2001      	movs	r0, #1
 800fec8:	e7f4      	b.n	800feb4 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800feca:	2001      	movs	r0, #1
 800fecc:	e7f2      	b.n	800feb4 <HAL_CRC_Init+0x48>

0800fece <HAL_CRC_Accumulate>:
{
 800fece:	b510      	push	{r4, lr}
 800fed0:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800fed2:	7f03      	ldrb	r3, [r0, #28]
 800fed4:	2b01      	cmp	r3, #1
 800fed6:	d024      	beq.n	800ff22 <HAL_CRC_Accumulate+0x54>
 800fed8:	2301      	movs	r3, #1
 800feda:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800fedc:	3301      	adds	r3, #1
 800fede:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800fee0:	6a03      	ldr	r3, [r0, #32]
 800fee2:	2b02      	cmp	r3, #2
 800fee4:	d01a      	beq.n	800ff1c <HAL_CRC_Accumulate+0x4e>
 800fee6:	2b03      	cmp	r3, #3
 800fee8:	d007      	beq.n	800fefa <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800feea:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800feec:	2b01      	cmp	r3, #1
 800feee:	d011      	beq.n	800ff14 <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 800fef0:	2301      	movs	r3, #1
 800fef2:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800fef4:	2300      	movs	r3, #0
 800fef6:	7723      	strb	r3, [r4, #28]
}
 800fef8:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 800fefa:	2a00      	cmp	r2, #0
 800fefc:	d007      	beq.n	800ff0e <HAL_CRC_Accumulate+0x40>
 800fefe:	000b      	movs	r3, r1
 800ff00:	0092      	lsls	r2, r2, #2
 800ff02:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800ff04:	6822      	ldr	r2, [r4, #0]
 800ff06:	cb01      	ldmia	r3!, {r0}
 800ff08:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 800ff0a:	428b      	cmp	r3, r1
 800ff0c:	d1fa      	bne.n	800ff04 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 800ff0e:	6823      	ldr	r3, [r4, #0]
 800ff10:	6818      	ldr	r0, [r3, #0]
      break;
 800ff12:	e7ed      	b.n	800fef0 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800ff14:	0020      	movs	r0, r4
 800ff16:	f7ff ff53 	bl	800fdc0 <CRC_Handle_8>
      break;
 800ff1a:	e7e9      	b.n	800fef0 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800ff1c:	f7ff ff8d 	bl	800fe3a <CRC_Handle_16>
      break;
 800ff20:	e7e6      	b.n	800fef0 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 800ff22:	2002      	movs	r0, #2
 800ff24:	e7e8      	b.n	800fef8 <HAL_CRC_Accumulate+0x2a>

0800ff26 <HAL_CRC_Calculate>:
{
 800ff26:	b570      	push	{r4, r5, r6, lr}
 800ff28:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800ff2a:	7f03      	ldrb	r3, [r0, #28]
 800ff2c:	2b01      	cmp	r3, #1
 800ff2e:	d029      	beq.n	800ff84 <HAL_CRC_Calculate+0x5e>
 800ff30:	2501      	movs	r5, #1
 800ff32:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ff34:	2302      	movs	r3, #2
 800ff36:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800ff38:	6800      	ldr	r0, [r0, #0]
 800ff3a:	6883      	ldr	r3, [r0, #8]
 800ff3c:	432b      	orrs	r3, r5
 800ff3e:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 800ff40:	6a23      	ldr	r3, [r4, #32]
 800ff42:	2b02      	cmp	r3, #2
 800ff44:	d01a      	beq.n	800ff7c <HAL_CRC_Calculate+0x56>
 800ff46:	2b03      	cmp	r3, #3
 800ff48:	d007      	beq.n	800ff5a <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800ff4a:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800ff4c:	2b01      	cmp	r3, #1
 800ff4e:	d011      	beq.n	800ff74 <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 800ff50:	2301      	movs	r3, #1
 800ff52:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800ff54:	2300      	movs	r3, #0
 800ff56:	7723      	strb	r3, [r4, #28]
}
 800ff58:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800ff5a:	2a00      	cmp	r2, #0
 800ff5c:	d007      	beq.n	800ff6e <HAL_CRC_Calculate+0x48>
 800ff5e:	000b      	movs	r3, r1
 800ff60:	0092      	lsls	r2, r2, #2
 800ff62:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800ff64:	6820      	ldr	r0, [r4, #0]
 800ff66:	cb20      	ldmia	r3!, {r5}
 800ff68:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800ff6a:	428b      	cmp	r3, r1
 800ff6c:	d1fa      	bne.n	800ff64 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 800ff6e:	6823      	ldr	r3, [r4, #0]
 800ff70:	6818      	ldr	r0, [r3, #0]
      break;
 800ff72:	e7ed      	b.n	800ff50 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800ff74:	0020      	movs	r0, r4
 800ff76:	f7ff ff23 	bl	800fdc0 <CRC_Handle_8>
      break;
 800ff7a:	e7e9      	b.n	800ff50 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800ff7c:	0020      	movs	r0, r4
 800ff7e:	f7ff ff5c 	bl	800fe3a <CRC_Handle_16>
      break;
 800ff82:	e7e5      	b.n	800ff50 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 800ff84:	2002      	movs	r0, #2
 800ff86:	e7e7      	b.n	800ff58 <HAL_CRC_Calculate+0x32>

0800ff88 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800ff88:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800ff8a:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 800ff8c:	2501      	movs	r5, #1
 800ff8e:	002c      	movs	r4, r5
 800ff90:	409c      	lsls	r4, r3
 800ff92:	4221      	tst	r1, r4
 800ff94:	d10b      	bne.n	800ffae <HAL_CRCEx_Polynomial_Set+0x26>
 800ff96:	3b01      	subs	r3, #1
 800ff98:	d2f9      	bcs.n	800ff8e <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 800ff9a:	2a10      	cmp	r2, #16
 800ff9c:	d01c      	beq.n	800ffd8 <HAL_CRCEx_Polynomial_Set+0x50>
 800ff9e:	2a18      	cmp	r2, #24
 800ffa0:	d01e      	beq.n	800ffe0 <HAL_CRCEx_Polynomial_Set+0x58>
 800ffa2:	2a08      	cmp	r2, #8
 800ffa4:	d109      	bne.n	800ffba <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 800ffa6:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 800ffa8:	2b0f      	cmp	r3, #15
 800ffaa:	d906      	bls.n	800ffba <HAL_CRCEx_Polynomial_Set+0x32>
 800ffac:	e00e      	b.n	800ffcc <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 800ffae:	2a10      	cmp	r2, #16
 800ffb0:	d012      	beq.n	800ffd8 <HAL_CRCEx_Polynomial_Set+0x50>
 800ffb2:	2a18      	cmp	r2, #24
 800ffb4:	d00c      	beq.n	800ffd0 <HAL_CRCEx_Polynomial_Set+0x48>
 800ffb6:	2a08      	cmp	r2, #8
 800ffb8:	d0f5      	beq.n	800ffa6 <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800ffba:	6803      	ldr	r3, [r0, #0]
 800ffbc:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800ffbe:	6801      	ldr	r1, [r0, #0]
 800ffc0:	688b      	ldr	r3, [r1, #8]
 800ffc2:	2018      	movs	r0, #24
 800ffc4:	4383      	bics	r3, r0
 800ffc6:	431a      	orrs	r2, r3
 800ffc8:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 800ffca:	2400      	movs	r4, #0
}
 800ffcc:	0020      	movs	r0, r4
 800ffce:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 800ffd0:	2b06      	cmp	r3, #6
 800ffd2:	d9f2      	bls.n	800ffba <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 800ffd4:	2401      	movs	r4, #1
 800ffd6:	e7f9      	b.n	800ffcc <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 800ffd8:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 800ffda:	2b07      	cmp	r3, #7
 800ffdc:	d9ed      	bls.n	800ffba <HAL_CRCEx_Polynomial_Set+0x32>
 800ffde:	e7f5      	b.n	800ffcc <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 800ffe0:	2401      	movs	r4, #1
 800ffe2:	e7f3      	b.n	800ffcc <HAL_CRCEx_Polynomial_Set+0x44>

0800ffe4 <HAL_CRCEx_Init>:
{
 800ffe4:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800ffe6:	7903      	ldrb	r3, [r0, #4]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d109      	bne.n	8010000 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800ffec:	6803      	ldr	r3, [r0, #0]
 800ffee:	4a08      	ldr	r2, [pc, #32]	; (8010010 <HAL_CRCEx_Init+0x2c>)
 800fff0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800fff2:	6802      	ldr	r2, [r0, #0]
 800fff4:	6893      	ldr	r3, [r2, #8]
 800fff6:	2118      	movs	r1, #24
 800fff8:	438b      	bics	r3, r1
 800fffa:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 800fffc:	2000      	movs	r0, #0
}
 800fffe:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8010000:	68c2      	ldr	r2, [r0, #12]
 8010002:	6881      	ldr	r1, [r0, #8]
 8010004:	f7ff ffc0 	bl	800ff88 <HAL_CRCEx_Polynomial_Set>
 8010008:	1e43      	subs	r3, r0, #1
 801000a:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 801000c:	b2c0      	uxtb	r0, r0
 801000e:	e7f6      	b.n	800fffe <HAL_CRCEx_Init+0x1a>
 8010010:	04c11db7 	.word	0x04c11db7

08010014 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8010014:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8010016:	2800      	cmp	r0, #0
 8010018:	d022      	beq.n	8010060 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 801001a:	2321      	movs	r3, #33	; 0x21
 801001c:	5cc3      	ldrb	r3, [r0, r3]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d102      	bne.n	8010028 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8010022:	3320      	adds	r3, #32
 8010024:	2200      	movs	r2, #0
 8010026:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010028:	2121      	movs	r1, #33	; 0x21
 801002a:	2302      	movs	r3, #2
 801002c:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801002e:	6804      	ldr	r4, [r0, #0]
 8010030:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010032:	4a0c      	ldr	r2, [pc, #48]	; (8010064 <HAL_DMA_Init+0x50>)
 8010034:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8010036:	6843      	ldr	r3, [r0, #4]
 8010038:	6885      	ldr	r5, [r0, #8]
 801003a:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801003c:	68c5      	ldr	r5, [r0, #12]
 801003e:	432b      	orrs	r3, r5
 8010040:	6905      	ldr	r5, [r0, #16]
 8010042:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010044:	6945      	ldr	r5, [r0, #20]
 8010046:	432b      	orrs	r3, r5
 8010048:	6985      	ldr	r5, [r0, #24]
 801004a:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 801004c:	69c5      	ldr	r5, [r0, #28]
 801004e:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8010050:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8010052:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010054:	2300      	movs	r3, #0
 8010056:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8010058:	3301      	adds	r3, #1
 801005a:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 801005c:	2000      	movs	r0, #0
}  
 801005e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8010060:	2001      	movs	r0, #1
 8010062:	e7fc      	b.n	801005e <HAL_DMA_Init+0x4a>
 8010064:	ffffc00f 	.word	0xffffc00f

08010068 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010068:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 801006a:	2420      	movs	r4, #32
 801006c:	5d04      	ldrb	r4, [r0, r4]
 801006e:	2c01      	cmp	r4, #1
 8010070:	d02d      	beq.n	80100ce <HAL_DMA_Start_IT+0x66>
 8010072:	2601      	movs	r6, #1
 8010074:	2420      	movs	r4, #32
 8010076:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010078:	3401      	adds	r4, #1
 801007a:	2502      	movs	r5, #2
 801007c:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801007e:	6805      	ldr	r5, [r0, #0]
 8010080:	682c      	ldr	r4, [r5, #0]
 8010082:	43b4      	bics	r4, r6
 8010084:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010086:	6804      	ldr	r4, [r0, #0]
 8010088:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801008a:	6843      	ldr	r3, [r0, #4]
 801008c:	2b10      	cmp	r3, #16
 801008e:	d019      	beq.n	80100c4 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8010090:	6803      	ldr	r3, [r0, #0]
 8010092:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8010094:	6803      	ldr	r3, [r0, #0]
 8010096:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010098:	6802      	ldr	r2, [r0, #0]
 801009a:	6813      	ldr	r3, [r2, #0]
 801009c:	2102      	movs	r1, #2
 801009e:	430b      	orrs	r3, r1
 80100a0:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 80100a2:	6802      	ldr	r2, [r0, #0]
 80100a4:	6813      	ldr	r3, [r2, #0]
 80100a6:	3102      	adds	r1, #2
 80100a8:	430b      	orrs	r3, r1
 80100aa:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 80100ac:	6802      	ldr	r2, [r0, #0]
 80100ae:	6813      	ldr	r3, [r2, #0]
 80100b0:	3104      	adds	r1, #4
 80100b2:	430b      	orrs	r3, r1
 80100b4:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 80100b6:	6802      	ldr	r2, [r0, #0]
 80100b8:	6813      	ldr	r3, [r2, #0]
 80100ba:	3907      	subs	r1, #7
 80100bc:	430b      	orrs	r3, r1
 80100be:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 80100c0:	2000      	movs	r0, #0
} 
 80100c2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 80100c4:	6803      	ldr	r3, [r0, #0]
 80100c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80100c8:	6803      	ldr	r3, [r0, #0]
 80100ca:	60d9      	str	r1, [r3, #12]
 80100cc:	e7e4      	b.n	8010098 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 80100ce:	2002      	movs	r0, #2
 80100d0:	e7f7      	b.n	80100c2 <HAL_DMA_Start_IT+0x5a>

080100d2 <HAL_DMA_Abort>:
{
 80100d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100d4:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80100d6:	6802      	ldr	r2, [r0, #0]
 80100d8:	6813      	ldr	r3, [r2, #0]
 80100da:	2101      	movs	r1, #1
 80100dc:	438b      	bics	r3, r1
 80100de:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80100e0:	f7ff fac8 	bl	800f674 <HAL_GetTick>
 80100e4:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80100e6:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80100e8:	26fa      	movs	r6, #250	; 0xfa
 80100ea:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80100ec:	6823      	ldr	r3, [r4, #0]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	421d      	tst	r5, r3
 80100f2:	d00f      	beq.n	8010114 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80100f4:	f7ff fabe 	bl	800f674 <HAL_GetTick>
 80100f8:	1bc0      	subs	r0, r0, r7
 80100fa:	42b0      	cmp	r0, r6
 80100fc:	d9f6      	bls.n	80100ec <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 80100fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010100:	2220      	movs	r2, #32
 8010102:	4313      	orrs	r3, r2
 8010104:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010106:	2321      	movs	r3, #33	; 0x21
 8010108:	2103      	movs	r1, #3
 801010a:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 801010c:	2300      	movs	r3, #0
 801010e:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8010110:	2003      	movs	r0, #3
 8010112:	e006      	b.n	8010122 <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 8010114:	2321      	movs	r3, #33	; 0x21
 8010116:	2201      	movs	r2, #1
 8010118:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 801011a:	3b01      	subs	r3, #1
 801011c:	2200      	movs	r2, #0
 801011e:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8010120:	2000      	movs	r0, #0
}
 8010122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010124 <HAL_DMA_IRQHandler>:
{        
 8010124:	b510      	push	{r4, lr}
 8010126:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010128:	6803      	ldr	r3, [r0, #0]
 801012a:	4ab4      	ldr	r2, [pc, #720]	; (80103fc <HAL_DMA_IRQHandler+0x2d8>)
 801012c:	4293      	cmp	r3, r2
 801012e:	d94d      	bls.n	80101cc <HAL_DMA_IRQHandler+0xa8>
 8010130:	4ab3      	ldr	r2, [pc, #716]	; (8010400 <HAL_DMA_IRQHandler+0x2dc>)
 8010132:	6811      	ldr	r1, [r2, #0]
 8010134:	4ab3      	ldr	r2, [pc, #716]	; (8010404 <HAL_DMA_IRQHandler+0x2e0>)
 8010136:	4293      	cmp	r3, r2
 8010138:	d026      	beq.n	8010188 <HAL_DMA_IRQHandler+0x64>
 801013a:	4ab3      	ldr	r2, [pc, #716]	; (8010408 <HAL_DMA_IRQHandler+0x2e4>)
 801013c:	4293      	cmp	r3, r2
 801013e:	d02d      	beq.n	801019c <HAL_DMA_IRQHandler+0x78>
 8010140:	4ab2      	ldr	r2, [pc, #712]	; (801040c <HAL_DMA_IRQHandler+0x2e8>)
 8010142:	4293      	cmp	r3, r2
 8010144:	d02c      	beq.n	80101a0 <HAL_DMA_IRQHandler+0x7c>
 8010146:	4ab2      	ldr	r2, [pc, #712]	; (8010410 <HAL_DMA_IRQHandler+0x2ec>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d02c      	beq.n	80101a6 <HAL_DMA_IRQHandler+0x82>
 801014c:	4ab1      	ldr	r2, [pc, #708]	; (8010414 <HAL_DMA_IRQHandler+0x2f0>)
 801014e:	4293      	cmp	r3, r2
 8010150:	d02c      	beq.n	80101ac <HAL_DMA_IRQHandler+0x88>
 8010152:	4ab1      	ldr	r2, [pc, #708]	; (8010418 <HAL_DMA_IRQHandler+0x2f4>)
 8010154:	4293      	cmp	r3, r2
 8010156:	d02c      	beq.n	80101b2 <HAL_DMA_IRQHandler+0x8e>
 8010158:	4aa8      	ldr	r2, [pc, #672]	; (80103fc <HAL_DMA_IRQHandler+0x2d8>)
 801015a:	4293      	cmp	r3, r2
 801015c:	d02c      	beq.n	80101b8 <HAL_DMA_IRQHandler+0x94>
 801015e:	4aaf      	ldr	r2, [pc, #700]	; (801041c <HAL_DMA_IRQHandler+0x2f8>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d02c      	beq.n	80101be <HAL_DMA_IRQHandler+0x9a>
 8010164:	4aae      	ldr	r2, [pc, #696]	; (8010420 <HAL_DMA_IRQHandler+0x2fc>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d02b      	beq.n	80101c2 <HAL_DMA_IRQHandler+0x9e>
 801016a:	4aae      	ldr	r2, [pc, #696]	; (8010424 <HAL_DMA_IRQHandler+0x300>)
 801016c:	4293      	cmp	r3, r2
 801016e:	d02a      	beq.n	80101c6 <HAL_DMA_IRQHandler+0xa2>
 8010170:	4aad      	ldr	r2, [pc, #692]	; (8010428 <HAL_DMA_IRQHandler+0x304>)
 8010172:	189a      	adds	r2, r3, r2
 8010174:	4250      	negs	r0, r2
 8010176:	4142      	adcs	r2, r0
 8010178:	4252      	negs	r2, r2
 801017a:	48ac      	ldr	r0, [pc, #688]	; (801042c <HAL_DMA_IRQHandler+0x308>)
 801017c:	4002      	ands	r2, r0
 801017e:	2080      	movs	r0, #128	; 0x80
 8010180:	0300      	lsls	r0, r0, #12
 8010182:	4684      	mov	ip, r0
 8010184:	4462      	add	r2, ip
 8010186:	e000      	b.n	801018a <HAL_DMA_IRQHandler+0x66>
 8010188:	2208      	movs	r2, #8
 801018a:	420a      	tst	r2, r1
 801018c:	d100      	bne.n	8010190 <HAL_DMA_IRQHandler+0x6c>
 801018e:	e0e6      	b.n	801035e <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010190:	681a      	ldr	r2, [r3, #0]
 8010192:	0712      	lsls	r2, r2, #28
 8010194:	d500      	bpl.n	8010198 <HAL_DMA_IRQHandler+0x74>
 8010196:	e097      	b.n	80102c8 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010198:	6823      	ldr	r3, [r4, #0]
 801019a:	e0e0      	b.n	801035e <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801019c:	2280      	movs	r2, #128	; 0x80
 801019e:	e7f4      	b.n	801018a <HAL_DMA_IRQHandler+0x66>
 80101a0:	2280      	movs	r2, #128	; 0x80
 80101a2:	0112      	lsls	r2, r2, #4
 80101a4:	e7f1      	b.n	801018a <HAL_DMA_IRQHandler+0x66>
 80101a6:	2280      	movs	r2, #128	; 0x80
 80101a8:	0212      	lsls	r2, r2, #8
 80101aa:	e7ee      	b.n	801018a <HAL_DMA_IRQHandler+0x66>
 80101ac:	2280      	movs	r2, #128	; 0x80
 80101ae:	0312      	lsls	r2, r2, #12
 80101b0:	e7eb      	b.n	801018a <HAL_DMA_IRQHandler+0x66>
 80101b2:	2280      	movs	r2, #128	; 0x80
 80101b4:	0412      	lsls	r2, r2, #16
 80101b6:	e7e8      	b.n	801018a <HAL_DMA_IRQHandler+0x66>
 80101b8:	2280      	movs	r2, #128	; 0x80
 80101ba:	0512      	lsls	r2, r2, #20
 80101bc:	e7e5      	b.n	801018a <HAL_DMA_IRQHandler+0x66>
 80101be:	2208      	movs	r2, #8
 80101c0:	e7e3      	b.n	801018a <HAL_DMA_IRQHandler+0x66>
 80101c2:	2280      	movs	r2, #128	; 0x80
 80101c4:	e7e1      	b.n	801018a <HAL_DMA_IRQHandler+0x66>
 80101c6:	2280      	movs	r2, #128	; 0x80
 80101c8:	0112      	lsls	r2, r2, #4
 80101ca:	e7de      	b.n	801018a <HAL_DMA_IRQHandler+0x66>
 80101cc:	4a98      	ldr	r2, [pc, #608]	; (8010430 <HAL_DMA_IRQHandler+0x30c>)
 80101ce:	6811      	ldr	r1, [r2, #0]
 80101d0:	4a8c      	ldr	r2, [pc, #560]	; (8010404 <HAL_DMA_IRQHandler+0x2e0>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d026      	beq.n	8010224 <HAL_DMA_IRQHandler+0x100>
 80101d6:	4a8c      	ldr	r2, [pc, #560]	; (8010408 <HAL_DMA_IRQHandler+0x2e4>)
 80101d8:	4293      	cmp	r3, r2
 80101da:	d05d      	beq.n	8010298 <HAL_DMA_IRQHandler+0x174>
 80101dc:	4a8b      	ldr	r2, [pc, #556]	; (801040c <HAL_DMA_IRQHandler+0x2e8>)
 80101de:	4293      	cmp	r3, r2
 80101e0:	d05c      	beq.n	801029c <HAL_DMA_IRQHandler+0x178>
 80101e2:	4a8b      	ldr	r2, [pc, #556]	; (8010410 <HAL_DMA_IRQHandler+0x2ec>)
 80101e4:	4293      	cmp	r3, r2
 80101e6:	d05c      	beq.n	80102a2 <HAL_DMA_IRQHandler+0x17e>
 80101e8:	4a8a      	ldr	r2, [pc, #552]	; (8010414 <HAL_DMA_IRQHandler+0x2f0>)
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d05c      	beq.n	80102a8 <HAL_DMA_IRQHandler+0x184>
 80101ee:	4a8a      	ldr	r2, [pc, #552]	; (8010418 <HAL_DMA_IRQHandler+0x2f4>)
 80101f0:	4293      	cmp	r3, r2
 80101f2:	d05c      	beq.n	80102ae <HAL_DMA_IRQHandler+0x18a>
 80101f4:	4a81      	ldr	r2, [pc, #516]	; (80103fc <HAL_DMA_IRQHandler+0x2d8>)
 80101f6:	4293      	cmp	r3, r2
 80101f8:	d05c      	beq.n	80102b4 <HAL_DMA_IRQHandler+0x190>
 80101fa:	4a88      	ldr	r2, [pc, #544]	; (801041c <HAL_DMA_IRQHandler+0x2f8>)
 80101fc:	4293      	cmp	r3, r2
 80101fe:	d05c      	beq.n	80102ba <HAL_DMA_IRQHandler+0x196>
 8010200:	4a87      	ldr	r2, [pc, #540]	; (8010420 <HAL_DMA_IRQHandler+0x2fc>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d05b      	beq.n	80102be <HAL_DMA_IRQHandler+0x19a>
 8010206:	4a87      	ldr	r2, [pc, #540]	; (8010424 <HAL_DMA_IRQHandler+0x300>)
 8010208:	4293      	cmp	r3, r2
 801020a:	d05a      	beq.n	80102c2 <HAL_DMA_IRQHandler+0x19e>
 801020c:	4a86      	ldr	r2, [pc, #536]	; (8010428 <HAL_DMA_IRQHandler+0x304>)
 801020e:	189a      	adds	r2, r3, r2
 8010210:	4250      	negs	r0, r2
 8010212:	4142      	adcs	r2, r0
 8010214:	4252      	negs	r2, r2
 8010216:	4885      	ldr	r0, [pc, #532]	; (801042c <HAL_DMA_IRQHandler+0x308>)
 8010218:	4002      	ands	r2, r0
 801021a:	2080      	movs	r0, #128	; 0x80
 801021c:	0300      	lsls	r0, r0, #12
 801021e:	4684      	mov	ip, r0
 8010220:	4462      	add	r2, ip
 8010222:	e000      	b.n	8010226 <HAL_DMA_IRQHandler+0x102>
 8010224:	2208      	movs	r2, #8
 8010226:	420a      	tst	r2, r1
 8010228:	d000      	beq.n	801022c <HAL_DMA_IRQHandler+0x108>
 801022a:	e3ad      	b.n	8010988 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801022c:	4a80      	ldr	r2, [pc, #512]	; (8010430 <HAL_DMA_IRQHandler+0x30c>)
 801022e:	6811      	ldr	r1, [r2, #0]
 8010230:	4a74      	ldr	r2, [pc, #464]	; (8010404 <HAL_DMA_IRQHandler+0x2e0>)
 8010232:	4293      	cmp	r3, r2
 8010234:	d100      	bne.n	8010238 <HAL_DMA_IRQHandler+0x114>
 8010236:	e198      	b.n	801056a <HAL_DMA_IRQHandler+0x446>
 8010238:	4a73      	ldr	r2, [pc, #460]	; (8010408 <HAL_DMA_IRQHandler+0x2e4>)
 801023a:	4293      	cmp	r3, r2
 801023c:	d100      	bne.n	8010240 <HAL_DMA_IRQHandler+0x11c>
 801023e:	e1da      	b.n	80105f6 <HAL_DMA_IRQHandler+0x4d2>
 8010240:	4a72      	ldr	r2, [pc, #456]	; (801040c <HAL_DMA_IRQHandler+0x2e8>)
 8010242:	4293      	cmp	r3, r2
 8010244:	d100      	bne.n	8010248 <HAL_DMA_IRQHandler+0x124>
 8010246:	e1d8      	b.n	80105fa <HAL_DMA_IRQHandler+0x4d6>
 8010248:	4a71      	ldr	r2, [pc, #452]	; (8010410 <HAL_DMA_IRQHandler+0x2ec>)
 801024a:	4293      	cmp	r3, r2
 801024c:	d100      	bne.n	8010250 <HAL_DMA_IRQHandler+0x12c>
 801024e:	e1d7      	b.n	8010600 <HAL_DMA_IRQHandler+0x4dc>
 8010250:	4a70      	ldr	r2, [pc, #448]	; (8010414 <HAL_DMA_IRQHandler+0x2f0>)
 8010252:	4293      	cmp	r3, r2
 8010254:	d100      	bne.n	8010258 <HAL_DMA_IRQHandler+0x134>
 8010256:	e1d6      	b.n	8010606 <HAL_DMA_IRQHandler+0x4e2>
 8010258:	4a6f      	ldr	r2, [pc, #444]	; (8010418 <HAL_DMA_IRQHandler+0x2f4>)
 801025a:	4293      	cmp	r3, r2
 801025c:	d100      	bne.n	8010260 <HAL_DMA_IRQHandler+0x13c>
 801025e:	e1d5      	b.n	801060c <HAL_DMA_IRQHandler+0x4e8>
 8010260:	4a66      	ldr	r2, [pc, #408]	; (80103fc <HAL_DMA_IRQHandler+0x2d8>)
 8010262:	4293      	cmp	r3, r2
 8010264:	d100      	bne.n	8010268 <HAL_DMA_IRQHandler+0x144>
 8010266:	e1d4      	b.n	8010612 <HAL_DMA_IRQHandler+0x4ee>
 8010268:	4a6c      	ldr	r2, [pc, #432]	; (801041c <HAL_DMA_IRQHandler+0x2f8>)
 801026a:	4293      	cmp	r3, r2
 801026c:	d100      	bne.n	8010270 <HAL_DMA_IRQHandler+0x14c>
 801026e:	e1d3      	b.n	8010618 <HAL_DMA_IRQHandler+0x4f4>
 8010270:	4a6b      	ldr	r2, [pc, #428]	; (8010420 <HAL_DMA_IRQHandler+0x2fc>)
 8010272:	4293      	cmp	r3, r2
 8010274:	d100      	bne.n	8010278 <HAL_DMA_IRQHandler+0x154>
 8010276:	e1d1      	b.n	801061c <HAL_DMA_IRQHandler+0x4f8>
 8010278:	4a6a      	ldr	r2, [pc, #424]	; (8010424 <HAL_DMA_IRQHandler+0x300>)
 801027a:	4293      	cmp	r3, r2
 801027c:	d100      	bne.n	8010280 <HAL_DMA_IRQHandler+0x15c>
 801027e:	e1cf      	b.n	8010620 <HAL_DMA_IRQHandler+0x4fc>
 8010280:	4a69      	ldr	r2, [pc, #420]	; (8010428 <HAL_DMA_IRQHandler+0x304>)
 8010282:	189a      	adds	r2, r3, r2
 8010284:	4250      	negs	r0, r2
 8010286:	4142      	adcs	r2, r0
 8010288:	4252      	negs	r2, r2
 801028a:	486a      	ldr	r0, [pc, #424]	; (8010434 <HAL_DMA_IRQHandler+0x310>)
 801028c:	4002      	ands	r2, r0
 801028e:	2080      	movs	r0, #128	; 0x80
 8010290:	02c0      	lsls	r0, r0, #11
 8010292:	4684      	mov	ip, r0
 8010294:	4462      	add	r2, ip
 8010296:	e169      	b.n	801056c <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010298:	2280      	movs	r2, #128	; 0x80
 801029a:	e7c4      	b.n	8010226 <HAL_DMA_IRQHandler+0x102>
 801029c:	2280      	movs	r2, #128	; 0x80
 801029e:	0112      	lsls	r2, r2, #4
 80102a0:	e7c1      	b.n	8010226 <HAL_DMA_IRQHandler+0x102>
 80102a2:	2280      	movs	r2, #128	; 0x80
 80102a4:	0212      	lsls	r2, r2, #8
 80102a6:	e7be      	b.n	8010226 <HAL_DMA_IRQHandler+0x102>
 80102a8:	2280      	movs	r2, #128	; 0x80
 80102aa:	0312      	lsls	r2, r2, #12
 80102ac:	e7bb      	b.n	8010226 <HAL_DMA_IRQHandler+0x102>
 80102ae:	2280      	movs	r2, #128	; 0x80
 80102b0:	0412      	lsls	r2, r2, #16
 80102b2:	e7b8      	b.n	8010226 <HAL_DMA_IRQHandler+0x102>
 80102b4:	2280      	movs	r2, #128	; 0x80
 80102b6:	0512      	lsls	r2, r2, #20
 80102b8:	e7b5      	b.n	8010226 <HAL_DMA_IRQHandler+0x102>
 80102ba:	2208      	movs	r2, #8
 80102bc:	e7b3      	b.n	8010226 <HAL_DMA_IRQHandler+0x102>
 80102be:	2280      	movs	r2, #128	; 0x80
 80102c0:	e7b1      	b.n	8010226 <HAL_DMA_IRQHandler+0x102>
 80102c2:	2280      	movs	r2, #128	; 0x80
 80102c4:	0112      	lsls	r2, r2, #4
 80102c6:	e7ae      	b.n	8010226 <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80102c8:	681a      	ldr	r2, [r3, #0]
 80102ca:	2108      	movs	r1, #8
 80102cc:	438a      	bics	r2, r1
 80102ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80102d0:	6823      	ldr	r3, [r4, #0]
 80102d2:	4a4a      	ldr	r2, [pc, #296]	; (80103fc <HAL_DMA_IRQHandler+0x2d8>)
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d800      	bhi.n	80102da <HAL_DMA_IRQHandler+0x1b6>
 80102d8:	e0ae      	b.n	8010438 <HAL_DMA_IRQHandler+0x314>
 80102da:	4a4a      	ldr	r2, [pc, #296]	; (8010404 <HAL_DMA_IRQHandler+0x2e0>)
 80102dc:	4293      	cmp	r3, r2
 80102de:	d027      	beq.n	8010330 <HAL_DMA_IRQHandler+0x20c>
 80102e0:	4a49      	ldr	r2, [pc, #292]	; (8010408 <HAL_DMA_IRQHandler+0x2e4>)
 80102e2:	4293      	cmp	r3, r2
 80102e4:	d071      	beq.n	80103ca <HAL_DMA_IRQHandler+0x2a6>
 80102e6:	4a49      	ldr	r2, [pc, #292]	; (801040c <HAL_DMA_IRQHandler+0x2e8>)
 80102e8:	4293      	cmp	r3, r2
 80102ea:	d070      	beq.n	80103ce <HAL_DMA_IRQHandler+0x2aa>
 80102ec:	4a48      	ldr	r2, [pc, #288]	; (8010410 <HAL_DMA_IRQHandler+0x2ec>)
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d070      	beq.n	80103d4 <HAL_DMA_IRQHandler+0x2b0>
 80102f2:	4a48      	ldr	r2, [pc, #288]	; (8010414 <HAL_DMA_IRQHandler+0x2f0>)
 80102f4:	4293      	cmp	r3, r2
 80102f6:	d070      	beq.n	80103da <HAL_DMA_IRQHandler+0x2b6>
 80102f8:	4a47      	ldr	r2, [pc, #284]	; (8010418 <HAL_DMA_IRQHandler+0x2f4>)
 80102fa:	4293      	cmp	r3, r2
 80102fc:	d070      	beq.n	80103e0 <HAL_DMA_IRQHandler+0x2bc>
 80102fe:	4a3f      	ldr	r2, [pc, #252]	; (80103fc <HAL_DMA_IRQHandler+0x2d8>)
 8010300:	4293      	cmp	r3, r2
 8010302:	d070      	beq.n	80103e6 <HAL_DMA_IRQHandler+0x2c2>
 8010304:	4a45      	ldr	r2, [pc, #276]	; (801041c <HAL_DMA_IRQHandler+0x2f8>)
 8010306:	4293      	cmp	r3, r2
 8010308:	d070      	beq.n	80103ec <HAL_DMA_IRQHandler+0x2c8>
 801030a:	4a45      	ldr	r2, [pc, #276]	; (8010420 <HAL_DMA_IRQHandler+0x2fc>)
 801030c:	4293      	cmp	r3, r2
 801030e:	d06f      	beq.n	80103f0 <HAL_DMA_IRQHandler+0x2cc>
 8010310:	4a44      	ldr	r2, [pc, #272]	; (8010424 <HAL_DMA_IRQHandler+0x300>)
 8010312:	4293      	cmp	r3, r2
 8010314:	d06e      	beq.n	80103f4 <HAL_DMA_IRQHandler+0x2d0>
 8010316:	4a44      	ldr	r2, [pc, #272]	; (8010428 <HAL_DMA_IRQHandler+0x304>)
 8010318:	4694      	mov	ip, r2
 801031a:	4463      	add	r3, ip
 801031c:	425a      	negs	r2, r3
 801031e:	4153      	adcs	r3, r2
 8010320:	425b      	negs	r3, r3
 8010322:	4a42      	ldr	r2, [pc, #264]	; (801042c <HAL_DMA_IRQHandler+0x308>)
 8010324:	4013      	ands	r3, r2
 8010326:	2280      	movs	r2, #128	; 0x80
 8010328:	0312      	lsls	r2, r2, #12
 801032a:	4694      	mov	ip, r2
 801032c:	4463      	add	r3, ip
 801032e:	e000      	b.n	8010332 <HAL_DMA_IRQHandler+0x20e>
 8010330:	2308      	movs	r3, #8
 8010332:	4a33      	ldr	r2, [pc, #204]	; (8010400 <HAL_DMA_IRQHandler+0x2dc>)
 8010334:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010336:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010338:	2201      	movs	r2, #1
 801033a:	4313      	orrs	r3, r2
 801033c:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801033e:	2321      	movs	r3, #33	; 0x21
 8010340:	3203      	adds	r2, #3
 8010342:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8010344:	3b01      	subs	r3, #1
 8010346:	2200      	movs	r2, #0
 8010348:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801034a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801034c:	2b00      	cmp	r3, #0
 801034e:	d001      	beq.n	8010354 <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 8010350:	0020      	movs	r0, r4
 8010352:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010354:	6823      	ldr	r3, [r4, #0]
 8010356:	4a29      	ldr	r2, [pc, #164]	; (80103fc <HAL_DMA_IRQHandler+0x2d8>)
 8010358:	4293      	cmp	r3, r2
 801035a:	d800      	bhi.n	801035e <HAL_DMA_IRQHandler+0x23a>
 801035c:	e766      	b.n	801022c <HAL_DMA_IRQHandler+0x108>
 801035e:	4a28      	ldr	r2, [pc, #160]	; (8010400 <HAL_DMA_IRQHandler+0x2dc>)
 8010360:	6811      	ldr	r1, [r2, #0]
 8010362:	4a28      	ldr	r2, [pc, #160]	; (8010404 <HAL_DMA_IRQHandler+0x2e0>)
 8010364:	4293      	cmp	r3, r2
 8010366:	d100      	bne.n	801036a <HAL_DMA_IRQHandler+0x246>
 8010368:	e0ad      	b.n	80104c6 <HAL_DMA_IRQHandler+0x3a2>
 801036a:	4a27      	ldr	r2, [pc, #156]	; (8010408 <HAL_DMA_IRQHandler+0x2e4>)
 801036c:	4293      	cmp	r3, r2
 801036e:	d100      	bne.n	8010372 <HAL_DMA_IRQHandler+0x24e>
 8010370:	e0e3      	b.n	801053a <HAL_DMA_IRQHandler+0x416>
 8010372:	4a26      	ldr	r2, [pc, #152]	; (801040c <HAL_DMA_IRQHandler+0x2e8>)
 8010374:	4293      	cmp	r3, r2
 8010376:	d100      	bne.n	801037a <HAL_DMA_IRQHandler+0x256>
 8010378:	e0e1      	b.n	801053e <HAL_DMA_IRQHandler+0x41a>
 801037a:	4a25      	ldr	r2, [pc, #148]	; (8010410 <HAL_DMA_IRQHandler+0x2ec>)
 801037c:	4293      	cmp	r3, r2
 801037e:	d100      	bne.n	8010382 <HAL_DMA_IRQHandler+0x25e>
 8010380:	e0e0      	b.n	8010544 <HAL_DMA_IRQHandler+0x420>
 8010382:	4a24      	ldr	r2, [pc, #144]	; (8010414 <HAL_DMA_IRQHandler+0x2f0>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d100      	bne.n	801038a <HAL_DMA_IRQHandler+0x266>
 8010388:	e0df      	b.n	801054a <HAL_DMA_IRQHandler+0x426>
 801038a:	4a23      	ldr	r2, [pc, #140]	; (8010418 <HAL_DMA_IRQHandler+0x2f4>)
 801038c:	4293      	cmp	r3, r2
 801038e:	d100      	bne.n	8010392 <HAL_DMA_IRQHandler+0x26e>
 8010390:	e0de      	b.n	8010550 <HAL_DMA_IRQHandler+0x42c>
 8010392:	4a1a      	ldr	r2, [pc, #104]	; (80103fc <HAL_DMA_IRQHandler+0x2d8>)
 8010394:	4293      	cmp	r3, r2
 8010396:	d100      	bne.n	801039a <HAL_DMA_IRQHandler+0x276>
 8010398:	e0dd      	b.n	8010556 <HAL_DMA_IRQHandler+0x432>
 801039a:	4a20      	ldr	r2, [pc, #128]	; (801041c <HAL_DMA_IRQHandler+0x2f8>)
 801039c:	4293      	cmp	r3, r2
 801039e:	d100      	bne.n	80103a2 <HAL_DMA_IRQHandler+0x27e>
 80103a0:	e0dc      	b.n	801055c <HAL_DMA_IRQHandler+0x438>
 80103a2:	4a1f      	ldr	r2, [pc, #124]	; (8010420 <HAL_DMA_IRQHandler+0x2fc>)
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d100      	bne.n	80103aa <HAL_DMA_IRQHandler+0x286>
 80103a8:	e0da      	b.n	8010560 <HAL_DMA_IRQHandler+0x43c>
 80103aa:	4a1e      	ldr	r2, [pc, #120]	; (8010424 <HAL_DMA_IRQHandler+0x300>)
 80103ac:	4293      	cmp	r3, r2
 80103ae:	d100      	bne.n	80103b2 <HAL_DMA_IRQHandler+0x28e>
 80103b0:	e0d8      	b.n	8010564 <HAL_DMA_IRQHandler+0x440>
 80103b2:	4a1d      	ldr	r2, [pc, #116]	; (8010428 <HAL_DMA_IRQHandler+0x304>)
 80103b4:	189a      	adds	r2, r3, r2
 80103b6:	4250      	negs	r0, r2
 80103b8:	4142      	adcs	r2, r0
 80103ba:	4252      	negs	r2, r2
 80103bc:	481d      	ldr	r0, [pc, #116]	; (8010434 <HAL_DMA_IRQHandler+0x310>)
 80103be:	4002      	ands	r2, r0
 80103c0:	2080      	movs	r0, #128	; 0x80
 80103c2:	02c0      	lsls	r0, r0, #11
 80103c4:	4684      	mov	ip, r0
 80103c6:	4462      	add	r2, ip
 80103c8:	e07e      	b.n	80104c8 <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80103ca:	2380      	movs	r3, #128	; 0x80
 80103cc:	e7b1      	b.n	8010332 <HAL_DMA_IRQHandler+0x20e>
 80103ce:	2380      	movs	r3, #128	; 0x80
 80103d0:	011b      	lsls	r3, r3, #4
 80103d2:	e7ae      	b.n	8010332 <HAL_DMA_IRQHandler+0x20e>
 80103d4:	2380      	movs	r3, #128	; 0x80
 80103d6:	021b      	lsls	r3, r3, #8
 80103d8:	e7ab      	b.n	8010332 <HAL_DMA_IRQHandler+0x20e>
 80103da:	2380      	movs	r3, #128	; 0x80
 80103dc:	031b      	lsls	r3, r3, #12
 80103de:	e7a8      	b.n	8010332 <HAL_DMA_IRQHandler+0x20e>
 80103e0:	2380      	movs	r3, #128	; 0x80
 80103e2:	041b      	lsls	r3, r3, #16
 80103e4:	e7a5      	b.n	8010332 <HAL_DMA_IRQHandler+0x20e>
 80103e6:	2380      	movs	r3, #128	; 0x80
 80103e8:	051b      	lsls	r3, r3, #20
 80103ea:	e7a2      	b.n	8010332 <HAL_DMA_IRQHandler+0x20e>
 80103ec:	2308      	movs	r3, #8
 80103ee:	e7a0      	b.n	8010332 <HAL_DMA_IRQHandler+0x20e>
 80103f0:	2380      	movs	r3, #128	; 0x80
 80103f2:	e79e      	b.n	8010332 <HAL_DMA_IRQHandler+0x20e>
 80103f4:	2380      	movs	r3, #128	; 0x80
 80103f6:	011b      	lsls	r3, r3, #4
 80103f8:	e79b      	b.n	8010332 <HAL_DMA_IRQHandler+0x20e>
 80103fa:	46c0      	nop			; (mov r8, r8)
 80103fc:	40020080 	.word	0x40020080
 8010400:	40020400 	.word	0x40020400
 8010404:	40020008 	.word	0x40020008
 8010408:	4002001c 	.word	0x4002001c
 801040c:	40020030 	.word	0x40020030
 8010410:	40020044 	.word	0x40020044
 8010414:	40020058 	.word	0x40020058
 8010418:	4002006c 	.word	0x4002006c
 801041c:	40020408 	.word	0x40020408
 8010420:	4002041c 	.word	0x4002041c
 8010424:	40020430 	.word	0x40020430
 8010428:	bffdfbbc 	.word	0xbffdfbbc
 801042c:	fff88000 	.word	0xfff88000
 8010430:	40020000 	.word	0x40020000
 8010434:	fffc4000 	.word	0xfffc4000
 8010438:	4aaa      	ldr	r2, [pc, #680]	; (80106e4 <HAL_DMA_IRQHandler+0x5c0>)
 801043a:	4293      	cmp	r3, r2
 801043c:	d027      	beq.n	801048e <HAL_DMA_IRQHandler+0x36a>
 801043e:	4aaa      	ldr	r2, [pc, #680]	; (80106e8 <HAL_DMA_IRQHandler+0x5c4>)
 8010440:	4293      	cmp	r3, r2
 8010442:	d028      	beq.n	8010496 <HAL_DMA_IRQHandler+0x372>
 8010444:	4aa9      	ldr	r2, [pc, #676]	; (80106ec <HAL_DMA_IRQHandler+0x5c8>)
 8010446:	4293      	cmp	r3, r2
 8010448:	d027      	beq.n	801049a <HAL_DMA_IRQHandler+0x376>
 801044a:	4aa9      	ldr	r2, [pc, #676]	; (80106f0 <HAL_DMA_IRQHandler+0x5cc>)
 801044c:	4293      	cmp	r3, r2
 801044e:	d027      	beq.n	80104a0 <HAL_DMA_IRQHandler+0x37c>
 8010450:	4aa8      	ldr	r2, [pc, #672]	; (80106f4 <HAL_DMA_IRQHandler+0x5d0>)
 8010452:	4293      	cmp	r3, r2
 8010454:	d027      	beq.n	80104a6 <HAL_DMA_IRQHandler+0x382>
 8010456:	4aa8      	ldr	r2, [pc, #672]	; (80106f8 <HAL_DMA_IRQHandler+0x5d4>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d027      	beq.n	80104ac <HAL_DMA_IRQHandler+0x388>
 801045c:	4aa7      	ldr	r2, [pc, #668]	; (80106fc <HAL_DMA_IRQHandler+0x5d8>)
 801045e:	4293      	cmp	r3, r2
 8010460:	d027      	beq.n	80104b2 <HAL_DMA_IRQHandler+0x38e>
 8010462:	4aa7      	ldr	r2, [pc, #668]	; (8010700 <HAL_DMA_IRQHandler+0x5dc>)
 8010464:	4293      	cmp	r3, r2
 8010466:	d027      	beq.n	80104b8 <HAL_DMA_IRQHandler+0x394>
 8010468:	4aa6      	ldr	r2, [pc, #664]	; (8010704 <HAL_DMA_IRQHandler+0x5e0>)
 801046a:	4293      	cmp	r3, r2
 801046c:	d026      	beq.n	80104bc <HAL_DMA_IRQHandler+0x398>
 801046e:	4aa6      	ldr	r2, [pc, #664]	; (8010708 <HAL_DMA_IRQHandler+0x5e4>)
 8010470:	4293      	cmp	r3, r2
 8010472:	d025      	beq.n	80104c0 <HAL_DMA_IRQHandler+0x39c>
 8010474:	4aa5      	ldr	r2, [pc, #660]	; (801070c <HAL_DMA_IRQHandler+0x5e8>)
 8010476:	4694      	mov	ip, r2
 8010478:	4463      	add	r3, ip
 801047a:	425a      	negs	r2, r3
 801047c:	4153      	adcs	r3, r2
 801047e:	425b      	negs	r3, r3
 8010480:	4aa3      	ldr	r2, [pc, #652]	; (8010710 <HAL_DMA_IRQHandler+0x5ec>)
 8010482:	4013      	ands	r3, r2
 8010484:	2280      	movs	r2, #128	; 0x80
 8010486:	0312      	lsls	r2, r2, #12
 8010488:	4694      	mov	ip, r2
 801048a:	4463      	add	r3, ip
 801048c:	e000      	b.n	8010490 <HAL_DMA_IRQHandler+0x36c>
 801048e:	2308      	movs	r3, #8
 8010490:	4aa0      	ldr	r2, [pc, #640]	; (8010714 <HAL_DMA_IRQHandler+0x5f0>)
 8010492:	6053      	str	r3, [r2, #4]
 8010494:	e74f      	b.n	8010336 <HAL_DMA_IRQHandler+0x212>
 8010496:	2380      	movs	r3, #128	; 0x80
 8010498:	e7fa      	b.n	8010490 <HAL_DMA_IRQHandler+0x36c>
 801049a:	2380      	movs	r3, #128	; 0x80
 801049c:	011b      	lsls	r3, r3, #4
 801049e:	e7f7      	b.n	8010490 <HAL_DMA_IRQHandler+0x36c>
 80104a0:	2380      	movs	r3, #128	; 0x80
 80104a2:	021b      	lsls	r3, r3, #8
 80104a4:	e7f4      	b.n	8010490 <HAL_DMA_IRQHandler+0x36c>
 80104a6:	2380      	movs	r3, #128	; 0x80
 80104a8:	031b      	lsls	r3, r3, #12
 80104aa:	e7f1      	b.n	8010490 <HAL_DMA_IRQHandler+0x36c>
 80104ac:	2380      	movs	r3, #128	; 0x80
 80104ae:	041b      	lsls	r3, r3, #16
 80104b0:	e7ee      	b.n	8010490 <HAL_DMA_IRQHandler+0x36c>
 80104b2:	2380      	movs	r3, #128	; 0x80
 80104b4:	051b      	lsls	r3, r3, #20
 80104b6:	e7eb      	b.n	8010490 <HAL_DMA_IRQHandler+0x36c>
 80104b8:	2308      	movs	r3, #8
 80104ba:	e7e9      	b.n	8010490 <HAL_DMA_IRQHandler+0x36c>
 80104bc:	2380      	movs	r3, #128	; 0x80
 80104be:	e7e7      	b.n	8010490 <HAL_DMA_IRQHandler+0x36c>
 80104c0:	2380      	movs	r3, #128	; 0x80
 80104c2:	011b      	lsls	r3, r3, #4
 80104c4:	e7e4      	b.n	8010490 <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80104c6:	2204      	movs	r2, #4
 80104c8:	420a      	tst	r2, r1
 80104ca:	d152      	bne.n	8010572 <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80104cc:	6821      	ldr	r1, [r4, #0]
 80104ce:	4b92      	ldr	r3, [pc, #584]	; (8010718 <HAL_DMA_IRQHandler+0x5f4>)
 80104d0:	6818      	ldr	r0, [r3, #0]
 80104d2:	4a84      	ldr	r2, [pc, #528]	; (80106e4 <HAL_DMA_IRQHandler+0x5c0>)
 80104d4:	4291      	cmp	r1, r2
 80104d6:	d100      	bne.n	80104da <HAL_DMA_IRQHandler+0x3b6>
 80104d8:	e16b      	b.n	80107b2 <HAL_DMA_IRQHandler+0x68e>
 80104da:	4a83      	ldr	r2, [pc, #524]	; (80106e8 <HAL_DMA_IRQHandler+0x5c4>)
 80104dc:	4291      	cmp	r1, r2
 80104de:	d100      	bne.n	80104e2 <HAL_DMA_IRQHandler+0x3be>
 80104e0:	e1aa      	b.n	8010838 <HAL_DMA_IRQHandler+0x714>
 80104e2:	4a82      	ldr	r2, [pc, #520]	; (80106ec <HAL_DMA_IRQHandler+0x5c8>)
 80104e4:	4291      	cmp	r1, r2
 80104e6:	d100      	bne.n	80104ea <HAL_DMA_IRQHandler+0x3c6>
 80104e8:	e1a8      	b.n	801083c <HAL_DMA_IRQHandler+0x718>
 80104ea:	4a81      	ldr	r2, [pc, #516]	; (80106f0 <HAL_DMA_IRQHandler+0x5cc>)
 80104ec:	4291      	cmp	r1, r2
 80104ee:	d100      	bne.n	80104f2 <HAL_DMA_IRQHandler+0x3ce>
 80104f0:	e1a7      	b.n	8010842 <HAL_DMA_IRQHandler+0x71e>
 80104f2:	4b80      	ldr	r3, [pc, #512]	; (80106f4 <HAL_DMA_IRQHandler+0x5d0>)
 80104f4:	4299      	cmp	r1, r3
 80104f6:	d100      	bne.n	80104fa <HAL_DMA_IRQHandler+0x3d6>
 80104f8:	e1a6      	b.n	8010848 <HAL_DMA_IRQHandler+0x724>
 80104fa:	4b7f      	ldr	r3, [pc, #508]	; (80106f8 <HAL_DMA_IRQHandler+0x5d4>)
 80104fc:	4299      	cmp	r1, r3
 80104fe:	d100      	bne.n	8010502 <HAL_DMA_IRQHandler+0x3de>
 8010500:	e1a5      	b.n	801084e <HAL_DMA_IRQHandler+0x72a>
 8010502:	4b7e      	ldr	r3, [pc, #504]	; (80106fc <HAL_DMA_IRQHandler+0x5d8>)
 8010504:	4299      	cmp	r1, r3
 8010506:	d100      	bne.n	801050a <HAL_DMA_IRQHandler+0x3e6>
 8010508:	e1a4      	b.n	8010854 <HAL_DMA_IRQHandler+0x730>
 801050a:	4b7d      	ldr	r3, [pc, #500]	; (8010700 <HAL_DMA_IRQHandler+0x5dc>)
 801050c:	4299      	cmp	r1, r3
 801050e:	d100      	bne.n	8010512 <HAL_DMA_IRQHandler+0x3ee>
 8010510:	e1a3      	b.n	801085a <HAL_DMA_IRQHandler+0x736>
 8010512:	4b7c      	ldr	r3, [pc, #496]	; (8010704 <HAL_DMA_IRQHandler+0x5e0>)
 8010514:	4299      	cmp	r1, r3
 8010516:	d100      	bne.n	801051a <HAL_DMA_IRQHandler+0x3f6>
 8010518:	e1a1      	b.n	801085e <HAL_DMA_IRQHandler+0x73a>
 801051a:	4b7b      	ldr	r3, [pc, #492]	; (8010708 <HAL_DMA_IRQHandler+0x5e4>)
 801051c:	4299      	cmp	r1, r3
 801051e:	d100      	bne.n	8010522 <HAL_DMA_IRQHandler+0x3fe>
 8010520:	e19f      	b.n	8010862 <HAL_DMA_IRQHandler+0x73e>
 8010522:	4b7a      	ldr	r3, [pc, #488]	; (801070c <HAL_DMA_IRQHandler+0x5e8>)
 8010524:	18ca      	adds	r2, r1, r3
 8010526:	4253      	negs	r3, r2
 8010528:	415a      	adcs	r2, r3
 801052a:	4252      	negs	r2, r2
 801052c:	4b7b      	ldr	r3, [pc, #492]	; (801071c <HAL_DMA_IRQHandler+0x5f8>)
 801052e:	4013      	ands	r3, r2
 8010530:	2280      	movs	r2, #128	; 0x80
 8010532:	0292      	lsls	r2, r2, #10
 8010534:	4694      	mov	ip, r2
 8010536:	4463      	add	r3, ip
 8010538:	e13c      	b.n	80107b4 <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801053a:	2240      	movs	r2, #64	; 0x40
 801053c:	e7c4      	b.n	80104c8 <HAL_DMA_IRQHandler+0x3a4>
 801053e:	2280      	movs	r2, #128	; 0x80
 8010540:	00d2      	lsls	r2, r2, #3
 8010542:	e7c1      	b.n	80104c8 <HAL_DMA_IRQHandler+0x3a4>
 8010544:	2280      	movs	r2, #128	; 0x80
 8010546:	01d2      	lsls	r2, r2, #7
 8010548:	e7be      	b.n	80104c8 <HAL_DMA_IRQHandler+0x3a4>
 801054a:	2280      	movs	r2, #128	; 0x80
 801054c:	02d2      	lsls	r2, r2, #11
 801054e:	e7bb      	b.n	80104c8 <HAL_DMA_IRQHandler+0x3a4>
 8010550:	2280      	movs	r2, #128	; 0x80
 8010552:	03d2      	lsls	r2, r2, #15
 8010554:	e7b8      	b.n	80104c8 <HAL_DMA_IRQHandler+0x3a4>
 8010556:	2280      	movs	r2, #128	; 0x80
 8010558:	04d2      	lsls	r2, r2, #19
 801055a:	e7b5      	b.n	80104c8 <HAL_DMA_IRQHandler+0x3a4>
 801055c:	2204      	movs	r2, #4
 801055e:	e7b3      	b.n	80104c8 <HAL_DMA_IRQHandler+0x3a4>
 8010560:	2240      	movs	r2, #64	; 0x40
 8010562:	e7b1      	b.n	80104c8 <HAL_DMA_IRQHandler+0x3a4>
 8010564:	2280      	movs	r2, #128	; 0x80
 8010566:	00d2      	lsls	r2, r2, #3
 8010568:	e7ae      	b.n	80104c8 <HAL_DMA_IRQHandler+0x3a4>
 801056a:	2204      	movs	r2, #4
 801056c:	420a      	tst	r2, r1
 801056e:	d100      	bne.n	8010572 <HAL_DMA_IRQHandler+0x44e>
 8010570:	e208      	b.n	8010984 <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010572:	681a      	ldr	r2, [r3, #0]
 8010574:	0752      	lsls	r2, r2, #29
 8010576:	d561      	bpl.n	801063c <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010578:	681a      	ldr	r2, [r3, #0]
 801057a:	0692      	lsls	r2, r2, #26
 801057c:	d403      	bmi.n	8010586 <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801057e:	681a      	ldr	r2, [r3, #0]
 8010580:	2104      	movs	r1, #4
 8010582:	438a      	bics	r2, r1
 8010584:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010586:	6823      	ldr	r3, [r4, #0]
 8010588:	4a5c      	ldr	r2, [pc, #368]	; (80106fc <HAL_DMA_IRQHandler+0x5d8>)
 801058a:	4293      	cmp	r3, r2
 801058c:	d800      	bhi.n	8010590 <HAL_DMA_IRQHandler+0x46c>
 801058e:	e0c9      	b.n	8010724 <HAL_DMA_IRQHandler+0x600>
 8010590:	4a54      	ldr	r2, [pc, #336]	; (80106e4 <HAL_DMA_IRQHandler+0x5c0>)
 8010592:	4293      	cmp	r3, r2
 8010594:	d047      	beq.n	8010626 <HAL_DMA_IRQHandler+0x502>
 8010596:	4a54      	ldr	r2, [pc, #336]	; (80106e8 <HAL_DMA_IRQHandler+0x5c4>)
 8010598:	4293      	cmp	r3, r2
 801059a:	d100      	bne.n	801059e <HAL_DMA_IRQHandler+0x47a>
 801059c:	e089      	b.n	80106b2 <HAL_DMA_IRQHandler+0x58e>
 801059e:	4a53      	ldr	r2, [pc, #332]	; (80106ec <HAL_DMA_IRQHandler+0x5c8>)
 80105a0:	4293      	cmp	r3, r2
 80105a2:	d100      	bne.n	80105a6 <HAL_DMA_IRQHandler+0x482>
 80105a4:	e087      	b.n	80106b6 <HAL_DMA_IRQHandler+0x592>
 80105a6:	4a52      	ldr	r2, [pc, #328]	; (80106f0 <HAL_DMA_IRQHandler+0x5cc>)
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d100      	bne.n	80105ae <HAL_DMA_IRQHandler+0x48a>
 80105ac:	e086      	b.n	80106bc <HAL_DMA_IRQHandler+0x598>
 80105ae:	4a51      	ldr	r2, [pc, #324]	; (80106f4 <HAL_DMA_IRQHandler+0x5d0>)
 80105b0:	4293      	cmp	r3, r2
 80105b2:	d100      	bne.n	80105b6 <HAL_DMA_IRQHandler+0x492>
 80105b4:	e085      	b.n	80106c2 <HAL_DMA_IRQHandler+0x59e>
 80105b6:	4a50      	ldr	r2, [pc, #320]	; (80106f8 <HAL_DMA_IRQHandler+0x5d4>)
 80105b8:	4293      	cmp	r3, r2
 80105ba:	d100      	bne.n	80105be <HAL_DMA_IRQHandler+0x49a>
 80105bc:	e084      	b.n	80106c8 <HAL_DMA_IRQHandler+0x5a4>
 80105be:	4a4f      	ldr	r2, [pc, #316]	; (80106fc <HAL_DMA_IRQHandler+0x5d8>)
 80105c0:	4293      	cmp	r3, r2
 80105c2:	d100      	bne.n	80105c6 <HAL_DMA_IRQHandler+0x4a2>
 80105c4:	e083      	b.n	80106ce <HAL_DMA_IRQHandler+0x5aa>
 80105c6:	4a4e      	ldr	r2, [pc, #312]	; (8010700 <HAL_DMA_IRQHandler+0x5dc>)
 80105c8:	4293      	cmp	r3, r2
 80105ca:	d100      	bne.n	80105ce <HAL_DMA_IRQHandler+0x4aa>
 80105cc:	e082      	b.n	80106d4 <HAL_DMA_IRQHandler+0x5b0>
 80105ce:	4a4d      	ldr	r2, [pc, #308]	; (8010704 <HAL_DMA_IRQHandler+0x5e0>)
 80105d0:	4293      	cmp	r3, r2
 80105d2:	d100      	bne.n	80105d6 <HAL_DMA_IRQHandler+0x4b2>
 80105d4:	e080      	b.n	80106d8 <HAL_DMA_IRQHandler+0x5b4>
 80105d6:	4a4c      	ldr	r2, [pc, #304]	; (8010708 <HAL_DMA_IRQHandler+0x5e4>)
 80105d8:	4293      	cmp	r3, r2
 80105da:	d07f      	beq.n	80106dc <HAL_DMA_IRQHandler+0x5b8>
 80105dc:	4a4b      	ldr	r2, [pc, #300]	; (801070c <HAL_DMA_IRQHandler+0x5e8>)
 80105de:	4694      	mov	ip, r2
 80105e0:	4463      	add	r3, ip
 80105e2:	425a      	negs	r2, r3
 80105e4:	4153      	adcs	r3, r2
 80105e6:	425b      	negs	r3, r3
 80105e8:	4a4d      	ldr	r2, [pc, #308]	; (8010720 <HAL_DMA_IRQHandler+0x5fc>)
 80105ea:	4013      	ands	r3, r2
 80105ec:	2280      	movs	r2, #128	; 0x80
 80105ee:	02d2      	lsls	r2, r2, #11
 80105f0:	4694      	mov	ip, r2
 80105f2:	4463      	add	r3, ip
 80105f4:	e018      	b.n	8010628 <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80105f6:	2240      	movs	r2, #64	; 0x40
 80105f8:	e7b8      	b.n	801056c <HAL_DMA_IRQHandler+0x448>
 80105fa:	2280      	movs	r2, #128	; 0x80
 80105fc:	00d2      	lsls	r2, r2, #3
 80105fe:	e7b5      	b.n	801056c <HAL_DMA_IRQHandler+0x448>
 8010600:	2280      	movs	r2, #128	; 0x80
 8010602:	01d2      	lsls	r2, r2, #7
 8010604:	e7b2      	b.n	801056c <HAL_DMA_IRQHandler+0x448>
 8010606:	2280      	movs	r2, #128	; 0x80
 8010608:	02d2      	lsls	r2, r2, #11
 801060a:	e7af      	b.n	801056c <HAL_DMA_IRQHandler+0x448>
 801060c:	2280      	movs	r2, #128	; 0x80
 801060e:	03d2      	lsls	r2, r2, #15
 8010610:	e7ac      	b.n	801056c <HAL_DMA_IRQHandler+0x448>
 8010612:	2280      	movs	r2, #128	; 0x80
 8010614:	04d2      	lsls	r2, r2, #19
 8010616:	e7a9      	b.n	801056c <HAL_DMA_IRQHandler+0x448>
 8010618:	2204      	movs	r2, #4
 801061a:	e7a7      	b.n	801056c <HAL_DMA_IRQHandler+0x448>
 801061c:	2240      	movs	r2, #64	; 0x40
 801061e:	e7a5      	b.n	801056c <HAL_DMA_IRQHandler+0x448>
 8010620:	2280      	movs	r2, #128	; 0x80
 8010622:	00d2      	lsls	r2, r2, #3
 8010624:	e7a2      	b.n	801056c <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010626:	2304      	movs	r3, #4
 8010628:	4a3b      	ldr	r2, [pc, #236]	; (8010718 <HAL_DMA_IRQHandler+0x5f4>)
 801062a:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 801062c:	2321      	movs	r3, #33	; 0x21
 801062e:	2211      	movs	r2, #17
 8010630:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010632:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010634:	2b00      	cmp	r3, #0
 8010636:	d001      	beq.n	801063c <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 8010638:	0020      	movs	r0, r4
 801063a:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801063c:	6821      	ldr	r1, [r4, #0]
 801063e:	4b2f      	ldr	r3, [pc, #188]	; (80106fc <HAL_DMA_IRQHandler+0x5d8>)
 8010640:	4299      	cmp	r1, r3
 8010642:	d900      	bls.n	8010646 <HAL_DMA_IRQHandler+0x522>
 8010644:	e743      	b.n	80104ce <HAL_DMA_IRQHandler+0x3aa>
 8010646:	4b33      	ldr	r3, [pc, #204]	; (8010714 <HAL_DMA_IRQHandler+0x5f0>)
 8010648:	6818      	ldr	r0, [r3, #0]
 801064a:	4a26      	ldr	r2, [pc, #152]	; (80106e4 <HAL_DMA_IRQHandler+0x5c0>)
 801064c:	4291      	cmp	r1, r2
 801064e:	d100      	bne.n	8010652 <HAL_DMA_IRQHandler+0x52e>
 8010650:	e10a      	b.n	8010868 <HAL_DMA_IRQHandler+0x744>
 8010652:	4a25      	ldr	r2, [pc, #148]	; (80106e8 <HAL_DMA_IRQHandler+0x5c4>)
 8010654:	4291      	cmp	r1, r2
 8010656:	d100      	bne.n	801065a <HAL_DMA_IRQHandler+0x536>
 8010658:	e10c      	b.n	8010874 <HAL_DMA_IRQHandler+0x750>
 801065a:	4a24      	ldr	r2, [pc, #144]	; (80106ec <HAL_DMA_IRQHandler+0x5c8>)
 801065c:	4291      	cmp	r1, r2
 801065e:	d100      	bne.n	8010662 <HAL_DMA_IRQHandler+0x53e>
 8010660:	e10a      	b.n	8010878 <HAL_DMA_IRQHandler+0x754>
 8010662:	4a23      	ldr	r2, [pc, #140]	; (80106f0 <HAL_DMA_IRQHandler+0x5cc>)
 8010664:	4291      	cmp	r1, r2
 8010666:	d100      	bne.n	801066a <HAL_DMA_IRQHandler+0x546>
 8010668:	e109      	b.n	801087e <HAL_DMA_IRQHandler+0x75a>
 801066a:	4b22      	ldr	r3, [pc, #136]	; (80106f4 <HAL_DMA_IRQHandler+0x5d0>)
 801066c:	4299      	cmp	r1, r3
 801066e:	d100      	bne.n	8010672 <HAL_DMA_IRQHandler+0x54e>
 8010670:	e108      	b.n	8010884 <HAL_DMA_IRQHandler+0x760>
 8010672:	4b21      	ldr	r3, [pc, #132]	; (80106f8 <HAL_DMA_IRQHandler+0x5d4>)
 8010674:	4299      	cmp	r1, r3
 8010676:	d100      	bne.n	801067a <HAL_DMA_IRQHandler+0x556>
 8010678:	e107      	b.n	801088a <HAL_DMA_IRQHandler+0x766>
 801067a:	4b20      	ldr	r3, [pc, #128]	; (80106fc <HAL_DMA_IRQHandler+0x5d8>)
 801067c:	4299      	cmp	r1, r3
 801067e:	d100      	bne.n	8010682 <HAL_DMA_IRQHandler+0x55e>
 8010680:	e106      	b.n	8010890 <HAL_DMA_IRQHandler+0x76c>
 8010682:	4b1f      	ldr	r3, [pc, #124]	; (8010700 <HAL_DMA_IRQHandler+0x5dc>)
 8010684:	4299      	cmp	r1, r3
 8010686:	d100      	bne.n	801068a <HAL_DMA_IRQHandler+0x566>
 8010688:	e105      	b.n	8010896 <HAL_DMA_IRQHandler+0x772>
 801068a:	4b1e      	ldr	r3, [pc, #120]	; (8010704 <HAL_DMA_IRQHandler+0x5e0>)
 801068c:	4299      	cmp	r1, r3
 801068e:	d100      	bne.n	8010692 <HAL_DMA_IRQHandler+0x56e>
 8010690:	e103      	b.n	801089a <HAL_DMA_IRQHandler+0x776>
 8010692:	4b1d      	ldr	r3, [pc, #116]	; (8010708 <HAL_DMA_IRQHandler+0x5e4>)
 8010694:	4299      	cmp	r1, r3
 8010696:	d100      	bne.n	801069a <HAL_DMA_IRQHandler+0x576>
 8010698:	e101      	b.n	801089e <HAL_DMA_IRQHandler+0x77a>
 801069a:	4b1c      	ldr	r3, [pc, #112]	; (801070c <HAL_DMA_IRQHandler+0x5e8>)
 801069c:	18ca      	adds	r2, r1, r3
 801069e:	4253      	negs	r3, r2
 80106a0:	415a      	adcs	r2, r3
 80106a2:	4252      	negs	r2, r2
 80106a4:	4b1d      	ldr	r3, [pc, #116]	; (801071c <HAL_DMA_IRQHandler+0x5f8>)
 80106a6:	4013      	ands	r3, r2
 80106a8:	2280      	movs	r2, #128	; 0x80
 80106aa:	0292      	lsls	r2, r2, #10
 80106ac:	4694      	mov	ip, r2
 80106ae:	4463      	add	r3, ip
 80106b0:	e0db      	b.n	801086a <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80106b2:	2340      	movs	r3, #64	; 0x40
 80106b4:	e7b8      	b.n	8010628 <HAL_DMA_IRQHandler+0x504>
 80106b6:	2380      	movs	r3, #128	; 0x80
 80106b8:	00db      	lsls	r3, r3, #3
 80106ba:	e7b5      	b.n	8010628 <HAL_DMA_IRQHandler+0x504>
 80106bc:	2380      	movs	r3, #128	; 0x80
 80106be:	01db      	lsls	r3, r3, #7
 80106c0:	e7b2      	b.n	8010628 <HAL_DMA_IRQHandler+0x504>
 80106c2:	2380      	movs	r3, #128	; 0x80
 80106c4:	02db      	lsls	r3, r3, #11
 80106c6:	e7af      	b.n	8010628 <HAL_DMA_IRQHandler+0x504>
 80106c8:	2380      	movs	r3, #128	; 0x80
 80106ca:	03db      	lsls	r3, r3, #15
 80106cc:	e7ac      	b.n	8010628 <HAL_DMA_IRQHandler+0x504>
 80106ce:	2380      	movs	r3, #128	; 0x80
 80106d0:	04db      	lsls	r3, r3, #19
 80106d2:	e7a9      	b.n	8010628 <HAL_DMA_IRQHandler+0x504>
 80106d4:	2304      	movs	r3, #4
 80106d6:	e7a7      	b.n	8010628 <HAL_DMA_IRQHandler+0x504>
 80106d8:	2340      	movs	r3, #64	; 0x40
 80106da:	e7a5      	b.n	8010628 <HAL_DMA_IRQHandler+0x504>
 80106dc:	2380      	movs	r3, #128	; 0x80
 80106de:	00db      	lsls	r3, r3, #3
 80106e0:	e7a2      	b.n	8010628 <HAL_DMA_IRQHandler+0x504>
 80106e2:	46c0      	nop			; (mov r8, r8)
 80106e4:	40020008 	.word	0x40020008
 80106e8:	4002001c 	.word	0x4002001c
 80106ec:	40020030 	.word	0x40020030
 80106f0:	40020044 	.word	0x40020044
 80106f4:	40020058 	.word	0x40020058
 80106f8:	4002006c 	.word	0x4002006c
 80106fc:	40020080 	.word	0x40020080
 8010700:	40020408 	.word	0x40020408
 8010704:	4002041c 	.word	0x4002041c
 8010708:	40020430 	.word	0x40020430
 801070c:	bffdfbbc 	.word	0xbffdfbbc
 8010710:	fff88000 	.word	0xfff88000
 8010714:	40020000 	.word	0x40020000
 8010718:	40020400 	.word	0x40020400
 801071c:	fffe2000 	.word	0xfffe2000
 8010720:	fffc4000 	.word	0xfffc4000
 8010724:	4a9b      	ldr	r2, [pc, #620]	; (8010994 <HAL_DMA_IRQHandler+0x870>)
 8010726:	4293      	cmp	r3, r2
 8010728:	d027      	beq.n	801077a <HAL_DMA_IRQHandler+0x656>
 801072a:	4a9b      	ldr	r2, [pc, #620]	; (8010998 <HAL_DMA_IRQHandler+0x874>)
 801072c:	4293      	cmp	r3, r2
 801072e:	d028      	beq.n	8010782 <HAL_DMA_IRQHandler+0x65e>
 8010730:	4a9a      	ldr	r2, [pc, #616]	; (801099c <HAL_DMA_IRQHandler+0x878>)
 8010732:	4293      	cmp	r3, r2
 8010734:	d027      	beq.n	8010786 <HAL_DMA_IRQHandler+0x662>
 8010736:	4a9a      	ldr	r2, [pc, #616]	; (80109a0 <HAL_DMA_IRQHandler+0x87c>)
 8010738:	4293      	cmp	r3, r2
 801073a:	d027      	beq.n	801078c <HAL_DMA_IRQHandler+0x668>
 801073c:	4a99      	ldr	r2, [pc, #612]	; (80109a4 <HAL_DMA_IRQHandler+0x880>)
 801073e:	4293      	cmp	r3, r2
 8010740:	d027      	beq.n	8010792 <HAL_DMA_IRQHandler+0x66e>
 8010742:	4a99      	ldr	r2, [pc, #612]	; (80109a8 <HAL_DMA_IRQHandler+0x884>)
 8010744:	4293      	cmp	r3, r2
 8010746:	d027      	beq.n	8010798 <HAL_DMA_IRQHandler+0x674>
 8010748:	4a98      	ldr	r2, [pc, #608]	; (80109ac <HAL_DMA_IRQHandler+0x888>)
 801074a:	4293      	cmp	r3, r2
 801074c:	d027      	beq.n	801079e <HAL_DMA_IRQHandler+0x67a>
 801074e:	4a98      	ldr	r2, [pc, #608]	; (80109b0 <HAL_DMA_IRQHandler+0x88c>)
 8010750:	4293      	cmp	r3, r2
 8010752:	d027      	beq.n	80107a4 <HAL_DMA_IRQHandler+0x680>
 8010754:	4a97      	ldr	r2, [pc, #604]	; (80109b4 <HAL_DMA_IRQHandler+0x890>)
 8010756:	4293      	cmp	r3, r2
 8010758:	d026      	beq.n	80107a8 <HAL_DMA_IRQHandler+0x684>
 801075a:	4a97      	ldr	r2, [pc, #604]	; (80109b8 <HAL_DMA_IRQHandler+0x894>)
 801075c:	4293      	cmp	r3, r2
 801075e:	d025      	beq.n	80107ac <HAL_DMA_IRQHandler+0x688>
 8010760:	4a96      	ldr	r2, [pc, #600]	; (80109bc <HAL_DMA_IRQHandler+0x898>)
 8010762:	4694      	mov	ip, r2
 8010764:	4463      	add	r3, ip
 8010766:	425a      	negs	r2, r3
 8010768:	4153      	adcs	r3, r2
 801076a:	425b      	negs	r3, r3
 801076c:	4a94      	ldr	r2, [pc, #592]	; (80109c0 <HAL_DMA_IRQHandler+0x89c>)
 801076e:	4013      	ands	r3, r2
 8010770:	2280      	movs	r2, #128	; 0x80
 8010772:	02d2      	lsls	r2, r2, #11
 8010774:	4694      	mov	ip, r2
 8010776:	4463      	add	r3, ip
 8010778:	e000      	b.n	801077c <HAL_DMA_IRQHandler+0x658>
 801077a:	2304      	movs	r3, #4
 801077c:	4a91      	ldr	r2, [pc, #580]	; (80109c4 <HAL_DMA_IRQHandler+0x8a0>)
 801077e:	6053      	str	r3, [r2, #4]
 8010780:	e754      	b.n	801062c <HAL_DMA_IRQHandler+0x508>
 8010782:	2340      	movs	r3, #64	; 0x40
 8010784:	e7fa      	b.n	801077c <HAL_DMA_IRQHandler+0x658>
 8010786:	2380      	movs	r3, #128	; 0x80
 8010788:	00db      	lsls	r3, r3, #3
 801078a:	e7f7      	b.n	801077c <HAL_DMA_IRQHandler+0x658>
 801078c:	2380      	movs	r3, #128	; 0x80
 801078e:	01db      	lsls	r3, r3, #7
 8010790:	e7f4      	b.n	801077c <HAL_DMA_IRQHandler+0x658>
 8010792:	2380      	movs	r3, #128	; 0x80
 8010794:	02db      	lsls	r3, r3, #11
 8010796:	e7f1      	b.n	801077c <HAL_DMA_IRQHandler+0x658>
 8010798:	2380      	movs	r3, #128	; 0x80
 801079a:	03db      	lsls	r3, r3, #15
 801079c:	e7ee      	b.n	801077c <HAL_DMA_IRQHandler+0x658>
 801079e:	2380      	movs	r3, #128	; 0x80
 80107a0:	04db      	lsls	r3, r3, #19
 80107a2:	e7eb      	b.n	801077c <HAL_DMA_IRQHandler+0x658>
 80107a4:	2304      	movs	r3, #4
 80107a6:	e7e9      	b.n	801077c <HAL_DMA_IRQHandler+0x658>
 80107a8:	2340      	movs	r3, #64	; 0x40
 80107aa:	e7e7      	b.n	801077c <HAL_DMA_IRQHandler+0x658>
 80107ac:	2380      	movs	r3, #128	; 0x80
 80107ae:	00db      	lsls	r3, r3, #3
 80107b0:	e7e4      	b.n	801077c <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80107b2:	2302      	movs	r3, #2
 80107b4:	4003      	ands	r3, r0
 80107b6:	1e5a      	subs	r2, r3, #1
 80107b8:	4193      	sbcs	r3, r2
 80107ba:	b2db      	uxtb	r3, r3
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d100      	bne.n	80107c2 <HAL_DMA_IRQHandler+0x69e>
 80107c0:	e080      	b.n	80108c4 <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80107c2:	680b      	ldr	r3, [r1, #0]
 80107c4:	079b      	lsls	r3, r3, #30
 80107c6:	d57d      	bpl.n	80108c4 <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80107c8:	680b      	ldr	r3, [r1, #0]
 80107ca:	069b      	lsls	r3, r3, #26
 80107cc:	d403      	bmi.n	80107d6 <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80107ce:	680b      	ldr	r3, [r1, #0]
 80107d0:	2202      	movs	r2, #2
 80107d2:	4393      	bics	r3, r2
 80107d4:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80107d6:	6823      	ldr	r3, [r4, #0]
 80107d8:	4a74      	ldr	r2, [pc, #464]	; (80109ac <HAL_DMA_IRQHandler+0x888>)
 80107da:	4293      	cmp	r3, r2
 80107dc:	d800      	bhi.n	80107e0 <HAL_DMA_IRQHandler+0x6bc>
 80107de:	e08a      	b.n	80108f6 <HAL_DMA_IRQHandler+0x7d2>
 80107e0:	4a6c      	ldr	r2, [pc, #432]	; (8010994 <HAL_DMA_IRQHandler+0x870>)
 80107e2:	4293      	cmp	r3, r2
 80107e4:	d05e      	beq.n	80108a4 <HAL_DMA_IRQHandler+0x780>
 80107e6:	4a6c      	ldr	r2, [pc, #432]	; (8010998 <HAL_DMA_IRQHandler+0x874>)
 80107e8:	4293      	cmp	r3, r2
 80107ea:	d100      	bne.n	80107ee <HAL_DMA_IRQHandler+0x6ca>
 80107ec:	e06b      	b.n	80108c6 <HAL_DMA_IRQHandler+0x7a2>
 80107ee:	4a6b      	ldr	r2, [pc, #428]	; (801099c <HAL_DMA_IRQHandler+0x878>)
 80107f0:	4293      	cmp	r3, r2
 80107f2:	d06a      	beq.n	80108ca <HAL_DMA_IRQHandler+0x7a6>
 80107f4:	4a6a      	ldr	r2, [pc, #424]	; (80109a0 <HAL_DMA_IRQHandler+0x87c>)
 80107f6:	4293      	cmp	r3, r2
 80107f8:	d06a      	beq.n	80108d0 <HAL_DMA_IRQHandler+0x7ac>
 80107fa:	4a6a      	ldr	r2, [pc, #424]	; (80109a4 <HAL_DMA_IRQHandler+0x880>)
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d06a      	beq.n	80108d6 <HAL_DMA_IRQHandler+0x7b2>
 8010800:	4a69      	ldr	r2, [pc, #420]	; (80109a8 <HAL_DMA_IRQHandler+0x884>)
 8010802:	4293      	cmp	r3, r2
 8010804:	d06a      	beq.n	80108dc <HAL_DMA_IRQHandler+0x7b8>
 8010806:	4a69      	ldr	r2, [pc, #420]	; (80109ac <HAL_DMA_IRQHandler+0x888>)
 8010808:	4293      	cmp	r3, r2
 801080a:	d06a      	beq.n	80108e2 <HAL_DMA_IRQHandler+0x7be>
 801080c:	4a68      	ldr	r2, [pc, #416]	; (80109b0 <HAL_DMA_IRQHandler+0x88c>)
 801080e:	4293      	cmp	r3, r2
 8010810:	d06a      	beq.n	80108e8 <HAL_DMA_IRQHandler+0x7c4>
 8010812:	4a68      	ldr	r2, [pc, #416]	; (80109b4 <HAL_DMA_IRQHandler+0x890>)
 8010814:	4293      	cmp	r3, r2
 8010816:	d069      	beq.n	80108ec <HAL_DMA_IRQHandler+0x7c8>
 8010818:	4a67      	ldr	r2, [pc, #412]	; (80109b8 <HAL_DMA_IRQHandler+0x894>)
 801081a:	4293      	cmp	r3, r2
 801081c:	d068      	beq.n	80108f0 <HAL_DMA_IRQHandler+0x7cc>
 801081e:	4a67      	ldr	r2, [pc, #412]	; (80109bc <HAL_DMA_IRQHandler+0x898>)
 8010820:	4694      	mov	ip, r2
 8010822:	4463      	add	r3, ip
 8010824:	425a      	negs	r2, r3
 8010826:	4153      	adcs	r3, r2
 8010828:	425b      	negs	r3, r3
 801082a:	4a67      	ldr	r2, [pc, #412]	; (80109c8 <HAL_DMA_IRQHandler+0x8a4>)
 801082c:	4013      	ands	r3, r2
 801082e:	2280      	movs	r2, #128	; 0x80
 8010830:	0292      	lsls	r2, r2, #10
 8010832:	4694      	mov	ip, r2
 8010834:	4463      	add	r3, ip
 8010836:	e036      	b.n	80108a6 <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010838:	2320      	movs	r3, #32
 801083a:	e7bb      	b.n	80107b4 <HAL_DMA_IRQHandler+0x690>
 801083c:	2380      	movs	r3, #128	; 0x80
 801083e:	009b      	lsls	r3, r3, #2
 8010840:	e7b8      	b.n	80107b4 <HAL_DMA_IRQHandler+0x690>
 8010842:	2380      	movs	r3, #128	; 0x80
 8010844:	019b      	lsls	r3, r3, #6
 8010846:	e7b5      	b.n	80107b4 <HAL_DMA_IRQHandler+0x690>
 8010848:	2380      	movs	r3, #128	; 0x80
 801084a:	029b      	lsls	r3, r3, #10
 801084c:	e7b2      	b.n	80107b4 <HAL_DMA_IRQHandler+0x690>
 801084e:	2380      	movs	r3, #128	; 0x80
 8010850:	039b      	lsls	r3, r3, #14
 8010852:	e7af      	b.n	80107b4 <HAL_DMA_IRQHandler+0x690>
 8010854:	2380      	movs	r3, #128	; 0x80
 8010856:	049b      	lsls	r3, r3, #18
 8010858:	e7ac      	b.n	80107b4 <HAL_DMA_IRQHandler+0x690>
 801085a:	2302      	movs	r3, #2
 801085c:	e7aa      	b.n	80107b4 <HAL_DMA_IRQHandler+0x690>
 801085e:	2320      	movs	r3, #32
 8010860:	e7a8      	b.n	80107b4 <HAL_DMA_IRQHandler+0x690>
 8010862:	2380      	movs	r3, #128	; 0x80
 8010864:	009b      	lsls	r3, r3, #2
 8010866:	e7a5      	b.n	80107b4 <HAL_DMA_IRQHandler+0x690>
 8010868:	2302      	movs	r3, #2
 801086a:	4003      	ands	r3, r0
 801086c:	1e5a      	subs	r2, r3, #1
 801086e:	4193      	sbcs	r3, r2
 8010870:	b2db      	uxtb	r3, r3
 8010872:	e7a3      	b.n	80107bc <HAL_DMA_IRQHandler+0x698>
 8010874:	2320      	movs	r3, #32
 8010876:	e7f8      	b.n	801086a <HAL_DMA_IRQHandler+0x746>
 8010878:	2380      	movs	r3, #128	; 0x80
 801087a:	009b      	lsls	r3, r3, #2
 801087c:	e7f5      	b.n	801086a <HAL_DMA_IRQHandler+0x746>
 801087e:	2380      	movs	r3, #128	; 0x80
 8010880:	019b      	lsls	r3, r3, #6
 8010882:	e7f2      	b.n	801086a <HAL_DMA_IRQHandler+0x746>
 8010884:	2380      	movs	r3, #128	; 0x80
 8010886:	029b      	lsls	r3, r3, #10
 8010888:	e7ef      	b.n	801086a <HAL_DMA_IRQHandler+0x746>
 801088a:	2380      	movs	r3, #128	; 0x80
 801088c:	039b      	lsls	r3, r3, #14
 801088e:	e7ec      	b.n	801086a <HAL_DMA_IRQHandler+0x746>
 8010890:	2380      	movs	r3, #128	; 0x80
 8010892:	049b      	lsls	r3, r3, #18
 8010894:	e7e9      	b.n	801086a <HAL_DMA_IRQHandler+0x746>
 8010896:	2302      	movs	r3, #2
 8010898:	e7e7      	b.n	801086a <HAL_DMA_IRQHandler+0x746>
 801089a:	2320      	movs	r3, #32
 801089c:	e7e5      	b.n	801086a <HAL_DMA_IRQHandler+0x746>
 801089e:	2380      	movs	r3, #128	; 0x80
 80108a0:	009b      	lsls	r3, r3, #2
 80108a2:	e7e2      	b.n	801086a <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80108a4:	2302      	movs	r3, #2
 80108a6:	4a49      	ldr	r2, [pc, #292]	; (80109cc <HAL_DMA_IRQHandler+0x8a8>)
 80108a8:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80108aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108ac:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 80108ae:	2321      	movs	r3, #33	; 0x21
 80108b0:	2201      	movs	r2, #1
 80108b2:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 80108b4:	3b01      	subs	r3, #1
 80108b6:	2200      	movs	r2, #0
 80108b8:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80108ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d001      	beq.n	80108c4 <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 80108c0:	0020      	movs	r0, r4
 80108c2:	4798      	blx	r3
}  
 80108c4:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80108c6:	2320      	movs	r3, #32
 80108c8:	e7ed      	b.n	80108a6 <HAL_DMA_IRQHandler+0x782>
 80108ca:	2380      	movs	r3, #128	; 0x80
 80108cc:	009b      	lsls	r3, r3, #2
 80108ce:	e7ea      	b.n	80108a6 <HAL_DMA_IRQHandler+0x782>
 80108d0:	2380      	movs	r3, #128	; 0x80
 80108d2:	019b      	lsls	r3, r3, #6
 80108d4:	e7e7      	b.n	80108a6 <HAL_DMA_IRQHandler+0x782>
 80108d6:	2380      	movs	r3, #128	; 0x80
 80108d8:	029b      	lsls	r3, r3, #10
 80108da:	e7e4      	b.n	80108a6 <HAL_DMA_IRQHandler+0x782>
 80108dc:	2380      	movs	r3, #128	; 0x80
 80108de:	039b      	lsls	r3, r3, #14
 80108e0:	e7e1      	b.n	80108a6 <HAL_DMA_IRQHandler+0x782>
 80108e2:	2380      	movs	r3, #128	; 0x80
 80108e4:	049b      	lsls	r3, r3, #18
 80108e6:	e7de      	b.n	80108a6 <HAL_DMA_IRQHandler+0x782>
 80108e8:	2302      	movs	r3, #2
 80108ea:	e7dc      	b.n	80108a6 <HAL_DMA_IRQHandler+0x782>
 80108ec:	2320      	movs	r3, #32
 80108ee:	e7da      	b.n	80108a6 <HAL_DMA_IRQHandler+0x782>
 80108f0:	2380      	movs	r3, #128	; 0x80
 80108f2:	009b      	lsls	r3, r3, #2
 80108f4:	e7d7      	b.n	80108a6 <HAL_DMA_IRQHandler+0x782>
 80108f6:	4a27      	ldr	r2, [pc, #156]	; (8010994 <HAL_DMA_IRQHandler+0x870>)
 80108f8:	4293      	cmp	r3, r2
 80108fa:	d027      	beq.n	801094c <HAL_DMA_IRQHandler+0x828>
 80108fc:	4a26      	ldr	r2, [pc, #152]	; (8010998 <HAL_DMA_IRQHandler+0x874>)
 80108fe:	4293      	cmp	r3, r2
 8010900:	d028      	beq.n	8010954 <HAL_DMA_IRQHandler+0x830>
 8010902:	4a26      	ldr	r2, [pc, #152]	; (801099c <HAL_DMA_IRQHandler+0x878>)
 8010904:	4293      	cmp	r3, r2
 8010906:	d027      	beq.n	8010958 <HAL_DMA_IRQHandler+0x834>
 8010908:	4a25      	ldr	r2, [pc, #148]	; (80109a0 <HAL_DMA_IRQHandler+0x87c>)
 801090a:	4293      	cmp	r3, r2
 801090c:	d027      	beq.n	801095e <HAL_DMA_IRQHandler+0x83a>
 801090e:	4a25      	ldr	r2, [pc, #148]	; (80109a4 <HAL_DMA_IRQHandler+0x880>)
 8010910:	4293      	cmp	r3, r2
 8010912:	d027      	beq.n	8010964 <HAL_DMA_IRQHandler+0x840>
 8010914:	4a24      	ldr	r2, [pc, #144]	; (80109a8 <HAL_DMA_IRQHandler+0x884>)
 8010916:	4293      	cmp	r3, r2
 8010918:	d027      	beq.n	801096a <HAL_DMA_IRQHandler+0x846>
 801091a:	4a24      	ldr	r2, [pc, #144]	; (80109ac <HAL_DMA_IRQHandler+0x888>)
 801091c:	4293      	cmp	r3, r2
 801091e:	d027      	beq.n	8010970 <HAL_DMA_IRQHandler+0x84c>
 8010920:	4a23      	ldr	r2, [pc, #140]	; (80109b0 <HAL_DMA_IRQHandler+0x88c>)
 8010922:	4293      	cmp	r3, r2
 8010924:	d027      	beq.n	8010976 <HAL_DMA_IRQHandler+0x852>
 8010926:	4a23      	ldr	r2, [pc, #140]	; (80109b4 <HAL_DMA_IRQHandler+0x890>)
 8010928:	4293      	cmp	r3, r2
 801092a:	d026      	beq.n	801097a <HAL_DMA_IRQHandler+0x856>
 801092c:	4a22      	ldr	r2, [pc, #136]	; (80109b8 <HAL_DMA_IRQHandler+0x894>)
 801092e:	4293      	cmp	r3, r2
 8010930:	d025      	beq.n	801097e <HAL_DMA_IRQHandler+0x85a>
 8010932:	4a22      	ldr	r2, [pc, #136]	; (80109bc <HAL_DMA_IRQHandler+0x898>)
 8010934:	4694      	mov	ip, r2
 8010936:	4463      	add	r3, ip
 8010938:	425a      	negs	r2, r3
 801093a:	4153      	adcs	r3, r2
 801093c:	425b      	negs	r3, r3
 801093e:	4a22      	ldr	r2, [pc, #136]	; (80109c8 <HAL_DMA_IRQHandler+0x8a4>)
 8010940:	4013      	ands	r3, r2
 8010942:	2280      	movs	r2, #128	; 0x80
 8010944:	0292      	lsls	r2, r2, #10
 8010946:	4694      	mov	ip, r2
 8010948:	4463      	add	r3, ip
 801094a:	e000      	b.n	801094e <HAL_DMA_IRQHandler+0x82a>
 801094c:	2302      	movs	r3, #2
 801094e:	4a1d      	ldr	r2, [pc, #116]	; (80109c4 <HAL_DMA_IRQHandler+0x8a0>)
 8010950:	6053      	str	r3, [r2, #4]
 8010952:	e7aa      	b.n	80108aa <HAL_DMA_IRQHandler+0x786>
 8010954:	2320      	movs	r3, #32
 8010956:	e7fa      	b.n	801094e <HAL_DMA_IRQHandler+0x82a>
 8010958:	2380      	movs	r3, #128	; 0x80
 801095a:	009b      	lsls	r3, r3, #2
 801095c:	e7f7      	b.n	801094e <HAL_DMA_IRQHandler+0x82a>
 801095e:	2380      	movs	r3, #128	; 0x80
 8010960:	019b      	lsls	r3, r3, #6
 8010962:	e7f4      	b.n	801094e <HAL_DMA_IRQHandler+0x82a>
 8010964:	2380      	movs	r3, #128	; 0x80
 8010966:	029b      	lsls	r3, r3, #10
 8010968:	e7f1      	b.n	801094e <HAL_DMA_IRQHandler+0x82a>
 801096a:	2380      	movs	r3, #128	; 0x80
 801096c:	039b      	lsls	r3, r3, #14
 801096e:	e7ee      	b.n	801094e <HAL_DMA_IRQHandler+0x82a>
 8010970:	2380      	movs	r3, #128	; 0x80
 8010972:	049b      	lsls	r3, r3, #18
 8010974:	e7eb      	b.n	801094e <HAL_DMA_IRQHandler+0x82a>
 8010976:	2302      	movs	r3, #2
 8010978:	e7e9      	b.n	801094e <HAL_DMA_IRQHandler+0x82a>
 801097a:	2320      	movs	r3, #32
 801097c:	e7e7      	b.n	801094e <HAL_DMA_IRQHandler+0x82a>
 801097e:	2380      	movs	r3, #128	; 0x80
 8010980:	009b      	lsls	r3, r3, #2
 8010982:	e7e4      	b.n	801094e <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010984:	6821      	ldr	r1, [r4, #0]
 8010986:	e65e      	b.n	8010646 <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010988:	681a      	ldr	r2, [r3, #0]
 801098a:	0712      	lsls	r2, r2, #28
 801098c:	d500      	bpl.n	8010990 <HAL_DMA_IRQHandler+0x86c>
 801098e:	e49b      	b.n	80102c8 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010990:	6823      	ldr	r3, [r4, #0]
 8010992:	e44b      	b.n	801022c <HAL_DMA_IRQHandler+0x108>
 8010994:	40020008 	.word	0x40020008
 8010998:	4002001c 	.word	0x4002001c
 801099c:	40020030 	.word	0x40020030
 80109a0:	40020044 	.word	0x40020044
 80109a4:	40020058 	.word	0x40020058
 80109a8:	4002006c 	.word	0x4002006c
 80109ac:	40020080 	.word	0x40020080
 80109b0:	40020408 	.word	0x40020408
 80109b4:	4002041c 	.word	0x4002041c
 80109b8:	40020430 	.word	0x40020430
 80109bc:	bffdfbbc 	.word	0xbffdfbbc
 80109c0:	fffc4000 	.word	0xfffc4000
 80109c4:	40020000 	.word	0x40020000
 80109c8:	fffe2000 	.word	0xfffe2000
 80109cc:	40020400 	.word	0x40020400

080109d0 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80109d0:	4b0a      	ldr	r3, [pc, #40]	; (80109fc <FLASH_SetErrorCode+0x2c>)
 80109d2:	68db      	ldr	r3, [r3, #12]
 80109d4:	06db      	lsls	r3, r3, #27
 80109d6:	d504      	bpl.n	80109e2 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80109d8:	4a09      	ldr	r2, [pc, #36]	; (8010a00 <FLASH_SetErrorCode+0x30>)
 80109da:	69d3      	ldr	r3, [r2, #28]
 80109dc:	2102      	movs	r1, #2
 80109de:	430b      	orrs	r3, r1
 80109e0:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80109e2:	4b06      	ldr	r3, [pc, #24]	; (80109fc <FLASH_SetErrorCode+0x2c>)
 80109e4:	68db      	ldr	r3, [r3, #12]
 80109e6:	075b      	lsls	r3, r3, #29
 80109e8:	d504      	bpl.n	80109f4 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80109ea:	4a05      	ldr	r2, [pc, #20]	; (8010a00 <FLASH_SetErrorCode+0x30>)
 80109ec:	69d3      	ldr	r3, [r2, #28]
 80109ee:	2101      	movs	r1, #1
 80109f0:	430b      	orrs	r3, r1
 80109f2:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 80109f4:	4b01      	ldr	r3, [pc, #4]	; (80109fc <FLASH_SetErrorCode+0x2c>)
 80109f6:	2214      	movs	r2, #20
 80109f8:	60da      	str	r2, [r3, #12]
}  
 80109fa:	4770      	bx	lr
 80109fc:	40022000 	.word	0x40022000
 8010a00:	20006eb8 	.word	0x20006eb8

08010a04 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010a04:	4b05      	ldr	r3, [pc, #20]	; (8010a1c <HAL_FLASH_Unlock+0x18>)
 8010a06:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 8010a08:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010a0a:	061b      	lsls	r3, r3, #24
 8010a0c:	d505      	bpl.n	8010a1a <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010a0e:	4b03      	ldr	r3, [pc, #12]	; (8010a1c <HAL_FLASH_Unlock+0x18>)
 8010a10:	4a03      	ldr	r2, [pc, #12]	; (8010a20 <HAL_FLASH_Unlock+0x1c>)
 8010a12:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010a14:	4a03      	ldr	r2, [pc, #12]	; (8010a24 <HAL_FLASH_Unlock+0x20>)
 8010a16:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8010a18:	2000      	movs	r0, #0
}
 8010a1a:	4770      	bx	lr
 8010a1c:	40022000 	.word	0x40022000
 8010a20:	45670123 	.word	0x45670123
 8010a24:	cdef89ab 	.word	0xcdef89ab

08010a28 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010a28:	4a03      	ldr	r2, [pc, #12]	; (8010a38 <HAL_FLASH_Lock+0x10>)
 8010a2a:	6913      	ldr	r3, [r2, #16]
 8010a2c:	2180      	movs	r1, #128	; 0x80
 8010a2e:	430b      	orrs	r3, r1
 8010a30:	6113      	str	r3, [r2, #16]
}
 8010a32:	2000      	movs	r0, #0
 8010a34:	4770      	bx	lr
 8010a36:	46c0      	nop			; (mov r8, r8)
 8010a38:	40022000 	.word	0x40022000

08010a3c <FLASH_WaitForLastOperation>:
{
 8010a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a3e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8010a40:	f7fe fe18 	bl	800f674 <HAL_GetTick>
 8010a44:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010a46:	4e13      	ldr	r6, [pc, #76]	; (8010a94 <FLASH_WaitForLastOperation+0x58>)
 8010a48:	2501      	movs	r5, #1
 8010a4a:	68f3      	ldr	r3, [r6, #12]
 8010a4c:	421d      	tst	r5, r3
 8010a4e:	d00a      	beq.n	8010a66 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8010a50:	1c63      	adds	r3, r4, #1
 8010a52:	d0fa      	beq.n	8010a4a <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010a54:	2c00      	cmp	r4, #0
 8010a56:	d01a      	beq.n	8010a8e <FLASH_WaitForLastOperation+0x52>
 8010a58:	f7fe fe0c 	bl	800f674 <HAL_GetTick>
 8010a5c:	1bc0      	subs	r0, r0, r7
 8010a5e:	42a0      	cmp	r0, r4
 8010a60:	d9f3      	bls.n	8010a4a <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8010a62:	2003      	movs	r0, #3
 8010a64:	e012      	b.n	8010a8c <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8010a66:	4b0b      	ldr	r3, [pc, #44]	; (8010a94 <FLASH_WaitForLastOperation+0x58>)
 8010a68:	68db      	ldr	r3, [r3, #12]
 8010a6a:	069b      	lsls	r3, r3, #26
 8010a6c:	d502      	bpl.n	8010a74 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010a6e:	4b09      	ldr	r3, [pc, #36]	; (8010a94 <FLASH_WaitForLastOperation+0x58>)
 8010a70:	2220      	movs	r2, #32
 8010a72:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010a74:	4b07      	ldr	r3, [pc, #28]	; (8010a94 <FLASH_WaitForLastOperation+0x58>)
 8010a76:	68db      	ldr	r3, [r3, #12]
 8010a78:	06db      	lsls	r3, r3, #27
 8010a7a:	d404      	bmi.n	8010a86 <FLASH_WaitForLastOperation+0x4a>
 8010a7c:	4b05      	ldr	r3, [pc, #20]	; (8010a94 <FLASH_WaitForLastOperation+0x58>)
 8010a7e:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8010a80:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010a82:	075b      	lsls	r3, r3, #29
 8010a84:	d502      	bpl.n	8010a8c <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 8010a86:	f7ff ffa3 	bl	80109d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8010a8a:	2001      	movs	r0, #1
}
 8010a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8010a8e:	2003      	movs	r0, #3
 8010a90:	e7fc      	b.n	8010a8c <FLASH_WaitForLastOperation+0x50>
 8010a92:	46c0      	nop			; (mov r8, r8)
 8010a94:	40022000 	.word	0x40022000

08010a98 <HAL_FLASH_Program>:
{
 8010a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a9a:	46de      	mov	lr, fp
 8010a9c:	4657      	mov	r7, sl
 8010a9e:	464e      	mov	r6, r9
 8010aa0:	4645      	mov	r5, r8
 8010aa2:	b5e0      	push	{r5, r6, r7, lr}
 8010aa4:	b083      	sub	sp, #12
 8010aa6:	0004      	movs	r4, r0
 8010aa8:	000e      	movs	r6, r1
 8010aaa:	9201      	str	r2, [sp, #4]
 8010aac:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8010aae:	4b2a      	ldr	r3, [pc, #168]	; (8010b58 <HAL_FLASH_Program+0xc0>)
 8010ab0:	7e1b      	ldrb	r3, [r3, #24]
 8010ab2:	2b01      	cmp	r3, #1
 8010ab4:	d04b      	beq.n	8010b4e <HAL_FLASH_Program+0xb6>
 8010ab6:	4b28      	ldr	r3, [pc, #160]	; (8010b58 <HAL_FLASH_Program+0xc0>)
 8010ab8:	2201      	movs	r2, #1
 8010aba:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010abc:	4827      	ldr	r0, [pc, #156]	; (8010b5c <HAL_FLASH_Program+0xc4>)
 8010abe:	f7ff ffbd 	bl	8010a3c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8010ac2:	2800      	cmp	r0, #0
 8010ac4:	d139      	bne.n	8010b3a <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010ac6:	2c01      	cmp	r4, #1
 8010ac8:	d043      	beq.n	8010b52 <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 8010aca:	3c02      	subs	r4, #2
 8010acc:	4263      	negs	r3, r4
 8010ace:	415c      	adcs	r4, r3
 8010ad0:	4264      	negs	r4, r4
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	439c      	bics	r4, r3
 8010ad6:	46a0      	mov	r8, r4
 8010ad8:	3303      	adds	r3, #3
 8010ada:	469c      	mov	ip, r3
 8010adc:	44e0      	add	r8, ip
{
 8010ade:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010ae0:	4b1d      	ldr	r3, [pc, #116]	; (8010b58 <HAL_FLASH_Program+0xc0>)
 8010ae2:	469b      	mov	fp, r3
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010ae8:	4c1d      	ldr	r4, [pc, #116]	; (8010b60 <HAL_FLASH_Program+0xc8>)
 8010aea:	e01e      	b.n	8010b2a <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010aec:	2220      	movs	r2, #32
 8010aee:	1ad2      	subs	r2, r2, r3
 8010af0:	4649      	mov	r1, r9
 8010af2:	4091      	lsls	r1, r2
 8010af4:	000a      	movs	r2, r1
 8010af6:	9901      	ldr	r1, [sp, #4]
 8010af8:	40d9      	lsrs	r1, r3
 8010afa:	000b      	movs	r3, r1
 8010afc:	4313      	orrs	r3, r2
 8010afe:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010b00:	465a      	mov	r2, fp
 8010b02:	4651      	mov	r1, sl
 8010b04:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010b06:	6922      	ldr	r2, [r4, #16]
 8010b08:	2701      	movs	r7, #1
 8010b0a:	433a      	orrs	r2, r7
 8010b0c:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8010b0e:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010b10:	4812      	ldr	r0, [pc, #72]	; (8010b5c <HAL_FLASH_Program+0xc4>)
 8010b12:	f7ff ff93 	bl	8010a3c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8010b16:	6923      	ldr	r3, [r4, #16]
 8010b18:	43bb      	bics	r3, r7
 8010b1a:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8010b1c:	2800      	cmp	r0, #0
 8010b1e:	d10c      	bne.n	8010b3a <HAL_FLASH_Program+0xa2>
 8010b20:	3501      	adds	r5, #1
 8010b22:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 8010b24:	b2eb      	uxtb	r3, r5
 8010b26:	4598      	cmp	r8, r3
 8010b28:	d907      	bls.n	8010b3a <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010b2a:	012b      	lsls	r3, r5, #4
 8010b2c:	2220      	movs	r2, #32
 8010b2e:	4252      	negs	r2, r2
 8010b30:	189a      	adds	r2, r3, r2
 8010b32:	d4db      	bmi.n	8010aec <HAL_FLASH_Program+0x54>
 8010b34:	464b      	mov	r3, r9
 8010b36:	40d3      	lsrs	r3, r2
 8010b38:	e7e1      	b.n	8010afe <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 8010b3a:	4b07      	ldr	r3, [pc, #28]	; (8010b58 <HAL_FLASH_Program+0xc0>)
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	761a      	strb	r2, [r3, #24]
}
 8010b40:	b003      	add	sp, #12
 8010b42:	bc3c      	pop	{r2, r3, r4, r5}
 8010b44:	4690      	mov	r8, r2
 8010b46:	4699      	mov	r9, r3
 8010b48:	46a2      	mov	sl, r4
 8010b4a:	46ab      	mov	fp, r5
 8010b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8010b4e:	2002      	movs	r0, #2
 8010b50:	e7f6      	b.n	8010b40 <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 8010b52:	2301      	movs	r3, #1
 8010b54:	4698      	mov	r8, r3
 8010b56:	e7c2      	b.n	8010ade <HAL_FLASH_Program+0x46>
 8010b58:	20006eb8 	.word	0x20006eb8
 8010b5c:	0000c350 	.word	0x0000c350
 8010b60:	40022000 	.word	0x40022000

08010b64 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010b64:	4b06      	ldr	r3, [pc, #24]	; (8010b80 <FLASH_MassErase+0x1c>)
 8010b66:	2200      	movs	r2, #0
 8010b68:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010b6a:	4b06      	ldr	r3, [pc, #24]	; (8010b84 <FLASH_MassErase+0x20>)
 8010b6c:	691a      	ldr	r2, [r3, #16]
 8010b6e:	2104      	movs	r1, #4
 8010b70:	430a      	orrs	r2, r1
 8010b72:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010b74:	691a      	ldr	r2, [r3, #16]
 8010b76:	313c      	adds	r1, #60	; 0x3c
 8010b78:	430a      	orrs	r2, r1
 8010b7a:	611a      	str	r2, [r3, #16]
}
 8010b7c:	4770      	bx	lr
 8010b7e:	46c0      	nop			; (mov r8, r8)
 8010b80:	20006eb8 	.word	0x20006eb8
 8010b84:	40022000 	.word	0x40022000

08010b88 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010b88:	4b06      	ldr	r3, [pc, #24]	; (8010ba4 <FLASH_PageErase+0x1c>)
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010b8e:	4b06      	ldr	r3, [pc, #24]	; (8010ba8 <FLASH_PageErase+0x20>)
 8010b90:	691a      	ldr	r2, [r3, #16]
 8010b92:	2102      	movs	r1, #2
 8010b94:	430a      	orrs	r2, r1
 8010b96:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010b98:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010b9a:	691a      	ldr	r2, [r3, #16]
 8010b9c:	313e      	adds	r1, #62	; 0x3e
 8010b9e:	430a      	orrs	r2, r1
 8010ba0:	611a      	str	r2, [r3, #16]
}
 8010ba2:	4770      	bx	lr
 8010ba4:	20006eb8 	.word	0x20006eb8
 8010ba8:	40022000 	.word	0x40022000

08010bac <HAL_FLASHEx_Erase>:
{
 8010bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bae:	46c6      	mov	lr, r8
 8010bb0:	b500      	push	{lr}
 8010bb2:	0006      	movs	r6, r0
 8010bb4:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8010bb6:	4b2a      	ldr	r3, [pc, #168]	; (8010c60 <HAL_FLASHEx_Erase+0xb4>)
 8010bb8:	7e1b      	ldrb	r3, [r3, #24]
 8010bba:	2b01      	cmp	r3, #1
 8010bbc:	d04d      	beq.n	8010c5a <HAL_FLASHEx_Erase+0xae>
 8010bbe:	4b28      	ldr	r3, [pc, #160]	; (8010c60 <HAL_FLASHEx_Erase+0xb4>)
 8010bc0:	2201      	movs	r2, #1
 8010bc2:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010bc4:	6803      	ldr	r3, [r0, #0]
 8010bc6:	2b01      	cmp	r3, #1
 8010bc8:	d029      	beq.n	8010c1e <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010bca:	4826      	ldr	r0, [pc, #152]	; (8010c64 <HAL_FLASHEx_Erase+0xb8>)
 8010bcc:	f7ff ff36 	bl	8010a3c <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010bd0:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010bd2:	2800      	cmp	r0, #0
 8010bd4:	d129      	bne.n	8010c2a <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	425b      	negs	r3, r3
 8010bda:	4642      	mov	r2, r8
 8010bdc:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8010bde:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010be0:	68b3      	ldr	r3, [r6, #8]
 8010be2:	02db      	lsls	r3, r3, #11
 8010be4:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 8010be6:	429c      	cmp	r4, r3
 8010be8:	d235      	bcs.n	8010c56 <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010bea:	4f1f      	ldr	r7, [pc, #124]	; (8010c68 <HAL_FLASHEx_Erase+0xbc>)
 8010bec:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 8010bee:	0020      	movs	r0, r4
 8010bf0:	f7ff ffca 	bl	8010b88 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010bf4:	481b      	ldr	r0, [pc, #108]	; (8010c64 <HAL_FLASHEx_Erase+0xb8>)
 8010bf6:	f7ff ff21 	bl	8010a3c <FLASH_WaitForLastOperation>
 8010bfa:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	43ab      	bics	r3, r5
 8010c00:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 8010c02:	2800      	cmp	r0, #0
 8010c04:	d124      	bne.n	8010c50 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 8010c06:	2380      	movs	r3, #128	; 0x80
 8010c08:	011b      	lsls	r3, r3, #4
 8010c0a:	469c      	mov	ip, r3
 8010c0c:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010c0e:	68b3      	ldr	r3, [r6, #8]
 8010c10:	02db      	lsls	r3, r3, #11
 8010c12:	6871      	ldr	r1, [r6, #4]
 8010c14:	468c      	mov	ip, r1
 8010c16:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8010c18:	42a3      	cmp	r3, r4
 8010c1a:	d8e8      	bhi.n	8010bee <HAL_FLASHEx_Erase+0x42>
 8010c1c:	e005      	b.n	8010c2a <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010c1e:	4811      	ldr	r0, [pc, #68]	; (8010c64 <HAL_FLASHEx_Erase+0xb8>)
 8010c20:	f7ff ff0c 	bl	8010a3c <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010c24:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010c26:	2800      	cmp	r0, #0
 8010c28:	d006      	beq.n	8010c38 <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 8010c2a:	4b0d      	ldr	r3, [pc, #52]	; (8010c60 <HAL_FLASHEx_Erase+0xb4>)
 8010c2c:	2100      	movs	r1, #0
 8010c2e:	7619      	strb	r1, [r3, #24]
}
 8010c30:	0010      	movs	r0, r2
 8010c32:	bc04      	pop	{r2}
 8010c34:	4690      	mov	r8, r2
 8010c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8010c38:	f7ff ff94 	bl	8010b64 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010c3c:	4809      	ldr	r0, [pc, #36]	; (8010c64 <HAL_FLASHEx_Erase+0xb8>)
 8010c3e:	f7ff fefd 	bl	8010a3c <FLASH_WaitForLastOperation>
 8010c42:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8010c44:	4908      	ldr	r1, [pc, #32]	; (8010c68 <HAL_FLASHEx_Erase+0xbc>)
 8010c46:	690b      	ldr	r3, [r1, #16]
 8010c48:	2004      	movs	r0, #4
 8010c4a:	4383      	bics	r3, r0
 8010c4c:	610b      	str	r3, [r1, #16]
 8010c4e:	e7ec      	b.n	8010c2a <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8010c50:	4643      	mov	r3, r8
 8010c52:	601c      	str	r4, [r3, #0]
            break;
 8010c54:	e7e9      	b.n	8010c2a <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010c56:	2201      	movs	r2, #1
 8010c58:	e7e7      	b.n	8010c2a <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 8010c5a:	2202      	movs	r2, #2
 8010c5c:	e7e8      	b.n	8010c30 <HAL_FLASHEx_Erase+0x84>
 8010c5e:	46c0      	nop			; (mov r8, r8)
 8010c60:	20006eb8 	.word	0x20006eb8
 8010c64:	0000c350 	.word	0x0000c350
 8010c68:	40022000 	.word	0x40022000

08010c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8010c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c6e:	46de      	mov	lr, fp
 8010c70:	4657      	mov	r7, sl
 8010c72:	464e      	mov	r6, r9
 8010c74:	4645      	mov	r5, r8
 8010c76:	b5e0      	push	{r5, r6, r7, lr}
 8010c78:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8010c7a:	680a      	ldr	r2, [r1, #0]
 8010c7c:	2a00      	cmp	r2, #0
 8010c7e:	d100      	bne.n	8010c82 <HAL_GPIO_Init+0x16>
 8010c80:	e0bf      	b.n	8010e02 <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 8010c82:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010c84:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010c86:	2410      	movs	r4, #16
 8010c88:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010c8a:	3c0d      	subs	r4, #13
 8010c8c:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010c8e:	2480      	movs	r4, #128	; 0x80
 8010c90:	0564      	lsls	r4, r4, #21
 8010c92:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010c94:	4c5e      	ldr	r4, [pc, #376]	; (8010e10 <HAL_GPIO_Init+0x1a4>)
 8010c96:	1904      	adds	r4, r0, r4
 8010c98:	1e65      	subs	r5, r4, #1
 8010c9a:	41ac      	sbcs	r4, r5
 8010c9c:	3404      	adds	r4, #4
 8010c9e:	46a1      	mov	r9, r4
 8010ca0:	e03b      	b.n	8010d1a <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 8010ca2:	08dc      	lsrs	r4, r3, #3
 8010ca4:	00a4      	lsls	r4, r4, #2
 8010ca6:	1904      	adds	r4, r0, r4
 8010ca8:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8010caa:	2507      	movs	r5, #7
 8010cac:	401d      	ands	r5, r3
 8010cae:	00ad      	lsls	r5, r5, #2
 8010cb0:	220f      	movs	r2, #15
 8010cb2:	40aa      	lsls	r2, r5
 8010cb4:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8010cb6:	690a      	ldr	r2, [r1, #16]
 8010cb8:	40aa      	lsls	r2, r5
 8010cba:	0015      	movs	r5, r2
 8010cbc:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8010cbe:	6225      	str	r5, [r4, #32]
 8010cc0:	e035      	b.n	8010d2e <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010cc2:	2500      	movs	r5, #0
 8010cc4:	465a      	mov	r2, fp
 8010cc6:	4095      	lsls	r5, r2
 8010cc8:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8010cca:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010ccc:	4c51      	ldr	r4, [pc, #324]	; (8010e14 <HAL_GPIO_Init+0x1a8>)
 8010cce:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010cd0:	9a01      	ldr	r2, [sp, #4]
 8010cd2:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010cd4:	684a      	ldr	r2, [r1, #4]
 8010cd6:	03d2      	lsls	r2, r2, #15
 8010cd8:	d500      	bpl.n	8010cdc <HAL_GPIO_Init+0x70>
 8010cda:	e086      	b.n	8010dea <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8010cdc:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8010cde:	4f4d      	ldr	r7, [pc, #308]	; (8010e14 <HAL_GPIO_Init+0x1a8>)
 8010ce0:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 8010ce2:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010ce4:	684a      	ldr	r2, [r1, #4]
 8010ce6:	0392      	lsls	r2, r2, #14
 8010ce8:	d500      	bpl.n	8010cec <HAL_GPIO_Init+0x80>
 8010cea:	e081      	b.n	8010df0 <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8010cec:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8010cee:	4f49      	ldr	r7, [pc, #292]	; (8010e14 <HAL_GPIO_Init+0x1a8>)
 8010cf0:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010cf2:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010cf4:	684a      	ldr	r2, [r1, #4]
 8010cf6:	02d2      	lsls	r2, r2, #11
 8010cf8:	d47d      	bmi.n	8010df6 <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010cfa:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8010cfc:	4f45      	ldr	r7, [pc, #276]	; (8010e14 <HAL_GPIO_Init+0x1a8>)
 8010cfe:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 8010d00:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010d02:	684a      	ldr	r2, [r1, #4]
 8010d04:	0292      	lsls	r2, r2, #10
 8010d06:	d479      	bmi.n	8010dfc <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8010d08:	0022      	movs	r2, r4
 8010d0a:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8010d0c:	4c41      	ldr	r4, [pc, #260]	; (8010e14 <HAL_GPIO_Init+0x1a8>)
 8010d0e:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 8010d10:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8010d12:	680a      	ldr	r2, [r1, #0]
 8010d14:	0014      	movs	r4, r2
 8010d16:	40dc      	lsrs	r4, r3
 8010d18:	d073      	beq.n	8010e02 <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010d1a:	0034      	movs	r4, r6
 8010d1c:	409c      	lsls	r4, r3
 8010d1e:	4022      	ands	r2, r4
 8010d20:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 8010d22:	d0f5      	beq.n	8010d10 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010d24:	684c      	ldr	r4, [r1, #4]
 8010d26:	4642      	mov	r2, r8
 8010d28:	4394      	bics	r4, r2
 8010d2a:	2c02      	cmp	r4, #2
 8010d2c:	d0b9      	beq.n	8010ca2 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8010d2e:	6804      	ldr	r4, [r0, #0]
 8010d30:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010d32:	4665      	mov	r5, ip
 8010d34:	40bd      	lsls	r5, r7
 8010d36:	43ed      	mvns	r5, r5
 8010d38:	402c      	ands	r4, r5
 8010d3a:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010d3c:	684c      	ldr	r4, [r1, #4]
 8010d3e:	4662      	mov	r2, ip
 8010d40:	4014      	ands	r4, r2
 8010d42:	40bc      	lsls	r4, r7
 8010d44:	465a      	mov	r2, fp
 8010d46:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8010d48:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010d4a:	684c      	ldr	r4, [r1, #4]
 8010d4c:	4642      	mov	r2, r8
 8010d4e:	4394      	bics	r4, r2
 8010d50:	3c01      	subs	r4, #1
 8010d52:	2c01      	cmp	r4, #1
 8010d54:	d813      	bhi.n	8010d7e <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8010d56:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010d58:	402c      	ands	r4, r5
 8010d5a:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8010d5c:	68cc      	ldr	r4, [r1, #12]
 8010d5e:	40bc      	lsls	r4, r7
 8010d60:	465a      	mov	r2, fp
 8010d62:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 8010d64:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8010d66:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8010d68:	0032      	movs	r2, r6
 8010d6a:	409a      	lsls	r2, r3
 8010d6c:	4394      	bics	r4, r2
 8010d6e:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8010d70:	684a      	ldr	r2, [r1, #4]
 8010d72:	0914      	lsrs	r4, r2, #4
 8010d74:	4034      	ands	r4, r6
 8010d76:	409c      	lsls	r4, r3
 8010d78:	465a      	mov	r2, fp
 8010d7a:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8010d7c:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8010d7e:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010d80:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010d82:	688d      	ldr	r5, [r1, #8]
 8010d84:	40bd      	lsls	r5, r7
 8010d86:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8010d88:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010d8a:	684a      	ldr	r2, [r1, #4]
 8010d8c:	4654      	mov	r4, sl
 8010d8e:	4222      	tst	r2, r4
 8010d90:	d0be      	beq.n	8010d10 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010d92:	4c21      	ldr	r4, [pc, #132]	; (8010e18 <HAL_GPIO_Init+0x1ac>)
 8010d94:	69a5      	ldr	r5, [r4, #24]
 8010d96:	4335      	orrs	r5, r6
 8010d98:	61a5      	str	r5, [r4, #24]
 8010d9a:	69a4      	ldr	r4, [r4, #24]
 8010d9c:	4034      	ands	r4, r6
 8010d9e:	9403      	str	r4, [sp, #12]
 8010da0:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8010da2:	089c      	lsrs	r4, r3, #2
 8010da4:	00a4      	lsls	r4, r4, #2
 8010da6:	4a1d      	ldr	r2, [pc, #116]	; (8010e1c <HAL_GPIO_Init+0x1b0>)
 8010da8:	4693      	mov	fp, r2
 8010daa:	445c      	add	r4, fp
 8010dac:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010dae:	4667      	mov	r7, ip
 8010db0:	401f      	ands	r7, r3
 8010db2:	00ba      	lsls	r2, r7, #2
 8010db4:	4693      	mov	fp, r2
 8010db6:	270f      	movs	r7, #15
 8010db8:	4097      	lsls	r7, r2
 8010dba:	43bd      	bics	r5, r7
 8010dbc:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010dbe:	2590      	movs	r5, #144	; 0x90
 8010dc0:	05ed      	lsls	r5, r5, #23
 8010dc2:	42a8      	cmp	r0, r5
 8010dc4:	d100      	bne.n	8010dc8 <HAL_GPIO_Init+0x15c>
 8010dc6:	e77c      	b.n	8010cc2 <HAL_GPIO_Init+0x56>
 8010dc8:	4d15      	ldr	r5, [pc, #84]	; (8010e20 <HAL_GPIO_Init+0x1b4>)
 8010dca:	42a8      	cmp	r0, r5
 8010dcc:	d007      	beq.n	8010dde <HAL_GPIO_Init+0x172>
 8010dce:	4d15      	ldr	r5, [pc, #84]	; (8010e24 <HAL_GPIO_Init+0x1b8>)
 8010dd0:	42a8      	cmp	r0, r5
 8010dd2:	d006      	beq.n	8010de2 <HAL_GPIO_Init+0x176>
 8010dd4:	4d14      	ldr	r5, [pc, #80]	; (8010e28 <HAL_GPIO_Init+0x1bc>)
 8010dd6:	42a8      	cmp	r0, r5
 8010dd8:	d005      	beq.n	8010de6 <HAL_GPIO_Init+0x17a>
 8010dda:	464d      	mov	r5, r9
 8010ddc:	e772      	b.n	8010cc4 <HAL_GPIO_Init+0x58>
 8010dde:	0035      	movs	r5, r6
 8010de0:	e770      	b.n	8010cc4 <HAL_GPIO_Init+0x58>
 8010de2:	2502      	movs	r5, #2
 8010de4:	e76e      	b.n	8010cc4 <HAL_GPIO_Init+0x58>
 8010de6:	4665      	mov	r5, ip
 8010de8:	e76c      	b.n	8010cc4 <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 8010dea:	9a01      	ldr	r2, [sp, #4]
 8010dec:	4314      	orrs	r4, r2
 8010dee:	e776      	b.n	8010cde <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 8010df0:	9a01      	ldr	r2, [sp, #4]
 8010df2:	4314      	orrs	r4, r2
 8010df4:	e77b      	b.n	8010cee <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 8010df6:	9a01      	ldr	r2, [sp, #4]
 8010df8:	4314      	orrs	r4, r2
 8010dfa:	e77f      	b.n	8010cfc <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 8010dfc:	9a01      	ldr	r2, [sp, #4]
 8010dfe:	4322      	orrs	r2, r4
 8010e00:	e784      	b.n	8010d0c <HAL_GPIO_Init+0xa0>
  } 
}
 8010e02:	b005      	add	sp, #20
 8010e04:	bc3c      	pop	{r2, r3, r4, r5}
 8010e06:	4690      	mov	r8, r2
 8010e08:	4699      	mov	r9, r3
 8010e0a:	46a2      	mov	sl, r4
 8010e0c:	46ab      	mov	fp, r5
 8010e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e10:	b7fff000 	.word	0xb7fff000
 8010e14:	40010400 	.word	0x40010400
 8010e18:	40021000 	.word	0x40021000
 8010e1c:	40010000 	.word	0x40010000
 8010e20:	48000400 	.word	0x48000400
 8010e24:	48000800 	.word	0x48000800
 8010e28:	48000c00 	.word	0x48000c00

08010e2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e2e:	46de      	mov	lr, fp
 8010e30:	4657      	mov	r7, sl
 8010e32:	464e      	mov	r6, r9
 8010e34:	4645      	mov	r5, r8
 8010e36:	b5e0      	push	{r5, r6, r7, lr}
 8010e38:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8010e3a:	2900      	cmp	r1, #0
 8010e3c:	d071      	beq.n	8010f22 <HAL_GPIO_DeInit+0xf6>
  uint32_t position = 0x00;
 8010e3e:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8010e40:	2201      	movs	r2, #1
 8010e42:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010e44:	3202      	adds	r2, #2
 8010e46:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010e48:	3204      	adds	r2, #4
 8010e4a:	4693      	mov	fp, r2
 8010e4c:	3208      	adds	r2, #8
 8010e4e:	4692      	mov	sl, r2
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010e50:	4a37      	ldr	r2, [pc, #220]	; (8010f30 <HAL_GPIO_DeInit+0x104>)
 8010e52:	1882      	adds	r2, r0, r2
 8010e54:	1e54      	subs	r4, r2, #1
 8010e56:	41a2      	sbcs	r2, r4
 8010e58:	3204      	adds	r2, #4
 8010e5a:	9201      	str	r2, [sp, #4]
 8010e5c:	9100      	str	r1, [sp, #0]
 8010e5e:	e009      	b.n	8010e74 <HAL_GPIO_DeInit+0x48>
 8010e60:	2100      	movs	r1, #0
 8010e62:	4689      	mov	r9, r1
 8010e64:	4649      	mov	r1, r9
 8010e66:	40a9      	lsls	r1, r5
 8010e68:	42b1      	cmp	r1, r6
 8010e6a:	d048      	beq.n	8010efe <HAL_GPIO_DeInit+0xd2>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8010e6c:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8010e6e:	9a00      	ldr	r2, [sp, #0]
 8010e70:	40da      	lsrs	r2, r3
 8010e72:	d056      	beq.n	8010f22 <HAL_GPIO_DeInit+0xf6>
    iocurrent = (GPIO_Pin) & (1 << position);
 8010e74:	4662      	mov	r2, ip
 8010e76:	409a      	lsls	r2, r3
 8010e78:	9900      	ldr	r1, [sp, #0]
 8010e7a:	400a      	ands	r2, r1
    if (iocurrent)
 8010e7c:	d0f6      	beq.n	8010e6c <HAL_GPIO_DeInit+0x40>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8010e7e:	6804      	ldr	r4, [r0, #0]
 8010e80:	005d      	lsls	r5, r3, #1
 8010e82:	4646      	mov	r6, r8
 8010e84:	40ae      	lsls	r6, r5
 8010e86:	43f5      	mvns	r5, r6
 8010e88:	402c      	ands	r4, r5
 8010e8a:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010e8c:	08dc      	lsrs	r4, r3, #3
 8010e8e:	00a4      	lsls	r4, r4, #2
 8010e90:	1904      	adds	r4, r0, r4
 8010e92:	6a26      	ldr	r6, [r4, #32]
 8010e94:	465f      	mov	r7, fp
 8010e96:	401f      	ands	r7, r3
 8010e98:	00bf      	lsls	r7, r7, #2
 8010e9a:	4651      	mov	r1, sl
 8010e9c:	40b9      	lsls	r1, r7
 8010e9e:	438e      	bics	r6, r1
 8010ea0:	6226      	str	r6, [r4, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010ea2:	6884      	ldr	r4, [r0, #8]
 8010ea4:	402c      	ands	r4, r5
 8010ea6:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8010ea8:	6844      	ldr	r4, [r0, #4]
 8010eaa:	4666      	mov	r6, ip
 8010eac:	409e      	lsls	r6, r3
 8010eae:	43b4      	bics	r4, r6
 8010eb0:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010eb2:	68c4      	ldr	r4, [r0, #12]
 8010eb4:	4025      	ands	r5, r4
 8010eb6:	60c5      	str	r5, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8010eb8:	089c      	lsrs	r4, r3, #2
 8010eba:	00a4      	lsls	r4, r4, #2
 8010ebc:	491d      	ldr	r1, [pc, #116]	; (8010f34 <HAL_GPIO_DeInit+0x108>)
 8010ebe:	4689      	mov	r9, r1
 8010ec0:	444c      	add	r4, r9
 8010ec2:	68a6      	ldr	r6, [r4, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010ec4:	4645      	mov	r5, r8
 8010ec6:	401d      	ands	r5, r3
 8010ec8:	00ad      	lsls	r5, r5, #2
 8010eca:	4657      	mov	r7, sl
 8010ecc:	40af      	lsls	r7, r5
 8010ece:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8010ed0:	2190      	movs	r1, #144	; 0x90
 8010ed2:	05c9      	lsls	r1, r1, #23
 8010ed4:	4288      	cmp	r0, r1
 8010ed6:	d0c3      	beq.n	8010e60 <HAL_GPIO_DeInit+0x34>
 8010ed8:	4917      	ldr	r1, [pc, #92]	; (8010f38 <HAL_GPIO_DeInit+0x10c>)
 8010eda:	4288      	cmp	r0, r1
 8010edc:	d008      	beq.n	8010ef0 <HAL_GPIO_DeInit+0xc4>
 8010ede:	4917      	ldr	r1, [pc, #92]	; (8010f3c <HAL_GPIO_DeInit+0x110>)
 8010ee0:	4288      	cmp	r0, r1
 8010ee2:	d007      	beq.n	8010ef4 <HAL_GPIO_DeInit+0xc8>
 8010ee4:	4916      	ldr	r1, [pc, #88]	; (8010f40 <HAL_GPIO_DeInit+0x114>)
 8010ee6:	4288      	cmp	r0, r1
 8010ee8:	d007      	beq.n	8010efa <HAL_GPIO_DeInit+0xce>
 8010eea:	9901      	ldr	r1, [sp, #4]
 8010eec:	4689      	mov	r9, r1
 8010eee:	e7b9      	b.n	8010e64 <HAL_GPIO_DeInit+0x38>
 8010ef0:	46e1      	mov	r9, ip
 8010ef2:	e7b7      	b.n	8010e64 <HAL_GPIO_DeInit+0x38>
 8010ef4:	2102      	movs	r1, #2
 8010ef6:	4689      	mov	r9, r1
 8010ef8:	e7b4      	b.n	8010e64 <HAL_GPIO_DeInit+0x38>
 8010efa:	46c1      	mov	r9, r8
 8010efc:	e7b2      	b.n	8010e64 <HAL_GPIO_DeInit+0x38>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8010efe:	68a5      	ldr	r5, [r4, #8]
 8010f00:	43bd      	bics	r5, r7
 8010f02:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8010f04:	4c0f      	ldr	r4, [pc, #60]	; (8010f44 <HAL_GPIO_DeInit+0x118>)
 8010f06:	6825      	ldr	r5, [r4, #0]
 8010f08:	43d2      	mvns	r2, r2
 8010f0a:	4015      	ands	r5, r2
 8010f0c:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8010f0e:	6865      	ldr	r5, [r4, #4]
 8010f10:	4015      	ands	r5, r2
 8010f12:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8010f14:	68a5      	ldr	r5, [r4, #8]
 8010f16:	4015      	ands	r5, r2
 8010f18:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8010f1a:	68e5      	ldr	r5, [r4, #12]
 8010f1c:	402a      	ands	r2, r5
 8010f1e:	60e2      	str	r2, [r4, #12]
 8010f20:	e7a4      	b.n	8010e6c <HAL_GPIO_DeInit+0x40>
  }
}
 8010f22:	b003      	add	sp, #12
 8010f24:	bc3c      	pop	{r2, r3, r4, r5}
 8010f26:	4690      	mov	r8, r2
 8010f28:	4699      	mov	r9, r3
 8010f2a:	46a2      	mov	sl, r4
 8010f2c:	46ab      	mov	fp, r5
 8010f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f30:	b7fff000 	.word	0xb7fff000
 8010f34:	40010000 	.word	0x40010000
 8010f38:	48000400 	.word	0x48000400
 8010f3c:	48000800 	.word	0x48000800
 8010f40:	48000c00 	.word	0x48000c00
 8010f44:	40010400 	.word	0x40010400

08010f48 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010f48:	6900      	ldr	r0, [r0, #16]
 8010f4a:	4008      	ands	r0, r1
 8010f4c:	1e41      	subs	r1, r0, #1
 8010f4e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8010f50:	b2c0      	uxtb	r0, r0
  }
 8010f52:	4770      	bx	lr

08010f54 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010f54:	2a00      	cmp	r2, #0
 8010f56:	d101      	bne.n	8010f5c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8010f58:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8010f5a:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8010f5c:	6181      	str	r1, [r0, #24]
 8010f5e:	e7fc      	b.n	8010f5a <HAL_GPIO_WritePin+0x6>

08010f60 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8010f60:	6943      	ldr	r3, [r0, #20]
 8010f62:	4059      	eors	r1, r3
 8010f64:	6141      	str	r1, [r0, #20]
}
 8010f66:	4770      	bx	lr

08010f68 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8010f68:	4770      	bx	lr
	...

08010f6c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8010f6c:	4a03      	ldr	r2, [pc, #12]	; (8010f7c <HAL_PWR_EnableBkUpAccess+0x10>)
 8010f6e:	6811      	ldr	r1, [r2, #0]
 8010f70:	2380      	movs	r3, #128	; 0x80
 8010f72:	005b      	lsls	r3, r3, #1
 8010f74:	430b      	orrs	r3, r1
 8010f76:	6013      	str	r3, [r2, #0]
}
 8010f78:	4770      	bx	lr
 8010f7a:	46c0      	nop			; (mov r8, r8)
 8010f7c:	40007000 	.word	0x40007000

08010f80 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f82:	46c6      	mov	lr, r8
 8010f84:	b500      	push	{lr}
 8010f86:	b082      	sub	sp, #8
 8010f88:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010f8a:	6803      	ldr	r3, [r0, #0]
 8010f8c:	07db      	lsls	r3, r3, #31
 8010f8e:	d538      	bpl.n	8011002 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8010f90:	4bbd      	ldr	r3, [pc, #756]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 8010f92:	685a      	ldr	r2, [r3, #4]
 8010f94:	230c      	movs	r3, #12
 8010f96:	4013      	ands	r3, r2
 8010f98:	2b04      	cmp	r3, #4
 8010f9a:	d02a      	beq.n	8010ff2 <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8010f9c:	4bba      	ldr	r3, [pc, #744]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 8010f9e:	685a      	ldr	r2, [r3, #4]
 8010fa0:	230c      	movs	r3, #12
 8010fa2:	4013      	ands	r3, r2
 8010fa4:	2b08      	cmp	r3, #8
 8010fa6:	d108      	bne.n	8010fba <HAL_RCC_OscConfig+0x3a>
 8010fa8:	4bb7      	ldr	r3, [pc, #732]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 8010faa:	685b      	ldr	r3, [r3, #4]
 8010fac:	22c0      	movs	r2, #192	; 0xc0
 8010fae:	0252      	lsls	r2, r2, #9
 8010fb0:	4013      	ands	r3, r2
 8010fb2:	2280      	movs	r2, #128	; 0x80
 8010fb4:	0252      	lsls	r2, r2, #9
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d01b      	beq.n	8010ff2 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8010fba:	4bb3      	ldr	r3, [pc, #716]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 8010fbc:	681a      	ldr	r2, [r3, #0]
 8010fbe:	49b3      	ldr	r1, [pc, #716]	; (801128c <HAL_RCC_OscConfig+0x30c>)
 8010fc0:	400a      	ands	r2, r1
 8010fc2:	601a      	str	r2, [r3, #0]
 8010fc4:	681a      	ldr	r2, [r3, #0]
 8010fc6:	49b2      	ldr	r1, [pc, #712]	; (8011290 <HAL_RCC_OscConfig+0x310>)
 8010fc8:	400a      	ands	r2, r1
 8010fca:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010fcc:	f7fe fb52 	bl	800f674 <HAL_GetTick>
 8010fd0:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010fd2:	4ead      	ldr	r6, [pc, #692]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 8010fd4:	2580      	movs	r5, #128	; 0x80
 8010fd6:	02ad      	lsls	r5, r5, #10
 8010fd8:	6833      	ldr	r3, [r6, #0]
 8010fda:	422b      	tst	r3, r5
 8010fdc:	d039      	beq.n	8011052 <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010fde:	f7fe fb49 	bl	800f674 <HAL_GetTick>
 8010fe2:	1bc0      	subs	r0, r0, r7
 8010fe4:	2864      	cmp	r0, #100	; 0x64
 8010fe6:	d9f7      	bls.n	8010fd8 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 8010fe8:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8010fea:	b002      	add	sp, #8
 8010fec:	bc04      	pop	{r2}
 8010fee:	4690      	mov	r8, r2
 8010ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010ff2:	4ba5      	ldr	r3, [pc, #660]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	039b      	lsls	r3, r3, #14
 8010ff8:	d503      	bpl.n	8011002 <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 8010ffa:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010ffc:	6863      	ldr	r3, [r4, #4]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d0f3      	beq.n	8010fea <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011002:	6823      	ldr	r3, [r4, #0]
 8011004:	079b      	lsls	r3, r3, #30
 8011006:	d400      	bmi.n	801100a <HAL_RCC_OscConfig+0x8a>
 8011008:	e08d      	b.n	8011126 <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 801100a:	4b9f      	ldr	r3, [pc, #636]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	220c      	movs	r2, #12
 8011010:	421a      	tst	r2, r3
 8011012:	d077      	beq.n	8011104 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011014:	4b9c      	ldr	r3, [pc, #624]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 8011016:	685a      	ldr	r2, [r3, #4]
 8011018:	230c      	movs	r3, #12
 801101a:	4013      	ands	r3, r2
 801101c:	2b08      	cmp	r3, #8
 801101e:	d068      	beq.n	80110f2 <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011020:	68e3      	ldr	r3, [r4, #12]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d100      	bne.n	8011028 <HAL_RCC_OscConfig+0xa8>
 8011026:	e0a1      	b.n	801116c <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8011028:	4a97      	ldr	r2, [pc, #604]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 801102a:	6813      	ldr	r3, [r2, #0]
 801102c:	2101      	movs	r1, #1
 801102e:	430b      	orrs	r3, r1
 8011030:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011032:	f7fe fb1f 	bl	800f674 <HAL_GetTick>
 8011036:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011038:	4e93      	ldr	r6, [pc, #588]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 801103a:	2502      	movs	r5, #2
 801103c:	6833      	ldr	r3, [r6, #0]
 801103e:	421d      	tst	r5, r3
 8011040:	d000      	beq.n	8011044 <HAL_RCC_OscConfig+0xc4>
 8011042:	e08a      	b.n	801115a <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011044:	f7fe fb16 	bl	800f674 <HAL_GetTick>
 8011048:	1bc0      	subs	r0, r0, r7
 801104a:	2864      	cmp	r0, #100	; 0x64
 801104c:	d9f6      	bls.n	801103c <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 801104e:	2003      	movs	r0, #3
 8011050:	e7cb      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011052:	6863      	ldr	r3, [r4, #4]
 8011054:	2b01      	cmp	r3, #1
 8011056:	d00b      	beq.n	8011070 <HAL_RCC_OscConfig+0xf0>
 8011058:	2b00      	cmp	r3, #0
 801105a:	d122      	bne.n	80110a2 <HAL_RCC_OscConfig+0x122>
 801105c:	4b8a      	ldr	r3, [pc, #552]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 801105e:	681a      	ldr	r2, [r3, #0]
 8011060:	498a      	ldr	r1, [pc, #552]	; (801128c <HAL_RCC_OscConfig+0x30c>)
 8011062:	400a      	ands	r2, r1
 8011064:	601a      	str	r2, [r3, #0]
 8011066:	681a      	ldr	r2, [r3, #0]
 8011068:	4989      	ldr	r1, [pc, #548]	; (8011290 <HAL_RCC_OscConfig+0x310>)
 801106a:	400a      	ands	r2, r1
 801106c:	601a      	str	r2, [r3, #0]
 801106e:	e005      	b.n	801107c <HAL_RCC_OscConfig+0xfc>
 8011070:	4a85      	ldr	r2, [pc, #532]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 8011072:	6811      	ldr	r1, [r2, #0]
 8011074:	2380      	movs	r3, #128	; 0x80
 8011076:	025b      	lsls	r3, r3, #9
 8011078:	430b      	orrs	r3, r1
 801107a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801107c:	6863      	ldr	r3, [r4, #4]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d027      	beq.n	80110d2 <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 8011082:	f7fe faf7 	bl	800f674 <HAL_GetTick>
 8011086:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011088:	4e7f      	ldr	r6, [pc, #508]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 801108a:	2580      	movs	r5, #128	; 0x80
 801108c:	02ad      	lsls	r5, r5, #10
 801108e:	6833      	ldr	r3, [r6, #0]
 8011090:	422b      	tst	r3, r5
 8011092:	d1b6      	bne.n	8011002 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011094:	f7fe faee 	bl	800f674 <HAL_GetTick>
 8011098:	1bc0      	subs	r0, r0, r7
 801109a:	2864      	cmp	r0, #100	; 0x64
 801109c:	d9f7      	bls.n	801108e <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 801109e:	2003      	movs	r0, #3
 80110a0:	e7a3      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80110a2:	2b05      	cmp	r3, #5
 80110a4:	d009      	beq.n	80110ba <HAL_RCC_OscConfig+0x13a>
 80110a6:	4b78      	ldr	r3, [pc, #480]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 80110a8:	681a      	ldr	r2, [r3, #0]
 80110aa:	4978      	ldr	r1, [pc, #480]	; (801128c <HAL_RCC_OscConfig+0x30c>)
 80110ac:	400a      	ands	r2, r1
 80110ae:	601a      	str	r2, [r3, #0]
 80110b0:	681a      	ldr	r2, [r3, #0]
 80110b2:	4977      	ldr	r1, [pc, #476]	; (8011290 <HAL_RCC_OscConfig+0x310>)
 80110b4:	400a      	ands	r2, r1
 80110b6:	601a      	str	r2, [r3, #0]
 80110b8:	e7e0      	b.n	801107c <HAL_RCC_OscConfig+0xfc>
 80110ba:	4b73      	ldr	r3, [pc, #460]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 80110bc:	6819      	ldr	r1, [r3, #0]
 80110be:	2280      	movs	r2, #128	; 0x80
 80110c0:	02d2      	lsls	r2, r2, #11
 80110c2:	430a      	orrs	r2, r1
 80110c4:	601a      	str	r2, [r3, #0]
 80110c6:	6819      	ldr	r1, [r3, #0]
 80110c8:	2280      	movs	r2, #128	; 0x80
 80110ca:	0252      	lsls	r2, r2, #9
 80110cc:	430a      	orrs	r2, r1
 80110ce:	601a      	str	r2, [r3, #0]
 80110d0:	e7d4      	b.n	801107c <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 80110d2:	f7fe facf 	bl	800f674 <HAL_GetTick>
 80110d6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80110d8:	4e6b      	ldr	r6, [pc, #428]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 80110da:	2580      	movs	r5, #128	; 0x80
 80110dc:	02ad      	lsls	r5, r5, #10
 80110de:	6833      	ldr	r3, [r6, #0]
 80110e0:	422b      	tst	r3, r5
 80110e2:	d08e      	beq.n	8011002 <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80110e4:	f7fe fac6 	bl	800f674 <HAL_GetTick>
 80110e8:	1bc0      	subs	r0, r0, r7
 80110ea:	2864      	cmp	r0, #100	; 0x64
 80110ec:	d9f7      	bls.n	80110de <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 80110ee:	2003      	movs	r0, #3
 80110f0:	e77b      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80110f2:	4b65      	ldr	r3, [pc, #404]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 80110f4:	685b      	ldr	r3, [r3, #4]
 80110f6:	22c0      	movs	r2, #192	; 0xc0
 80110f8:	0252      	lsls	r2, r2, #9
 80110fa:	4013      	ands	r3, r2
 80110fc:	2280      	movs	r2, #128	; 0x80
 80110fe:	0212      	lsls	r2, r2, #8
 8011100:	4293      	cmp	r3, r2
 8011102:	d18d      	bne.n	8011020 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011104:	4b60      	ldr	r3, [pc, #384]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	079b      	lsls	r3, r3, #30
 801110a:	d504      	bpl.n	8011116 <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 801110c:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801110e:	68e3      	ldr	r3, [r4, #12]
 8011110:	2b01      	cmp	r3, #1
 8011112:	d000      	beq.n	8011116 <HAL_RCC_OscConfig+0x196>
 8011114:	e769      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011116:	495c      	ldr	r1, [pc, #368]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 8011118:	680a      	ldr	r2, [r1, #0]
 801111a:	6923      	ldr	r3, [r4, #16]
 801111c:	00db      	lsls	r3, r3, #3
 801111e:	20f8      	movs	r0, #248	; 0xf8
 8011120:	4382      	bics	r2, r0
 8011122:	4313      	orrs	r3, r2
 8011124:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011126:	6823      	ldr	r3, [r4, #0]
 8011128:	071b      	lsls	r3, r3, #28
 801112a:	d547      	bpl.n	80111bc <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801112c:	6a23      	ldr	r3, [r4, #32]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d030      	beq.n	8011194 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8011132:	4a55      	ldr	r2, [pc, #340]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 8011134:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011136:	2101      	movs	r1, #1
 8011138:	430b      	orrs	r3, r1
 801113a:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 801113c:	f7fe fa9a 	bl	800f674 <HAL_GetTick>
 8011140:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011142:	4e51      	ldr	r6, [pc, #324]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 8011144:	2502      	movs	r5, #2
 8011146:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011148:	421d      	tst	r5, r3
 801114a:	d137      	bne.n	80111bc <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801114c:	f7fe fa92 	bl	800f674 <HAL_GetTick>
 8011150:	1bc0      	subs	r0, r0, r7
 8011152:	2864      	cmp	r0, #100	; 0x64
 8011154:	d9f7      	bls.n	8011146 <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 8011156:	2003      	movs	r0, #3
 8011158:	e747      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801115a:	494b      	ldr	r1, [pc, #300]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 801115c:	680a      	ldr	r2, [r1, #0]
 801115e:	6923      	ldr	r3, [r4, #16]
 8011160:	00db      	lsls	r3, r3, #3
 8011162:	20f8      	movs	r0, #248	; 0xf8
 8011164:	4382      	bics	r2, r0
 8011166:	4313      	orrs	r3, r2
 8011168:	600b      	str	r3, [r1, #0]
 801116a:	e7dc      	b.n	8011126 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 801116c:	4a46      	ldr	r2, [pc, #280]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 801116e:	6813      	ldr	r3, [r2, #0]
 8011170:	2101      	movs	r1, #1
 8011172:	438b      	bics	r3, r1
 8011174:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011176:	f7fe fa7d 	bl	800f674 <HAL_GetTick>
 801117a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801117c:	4e42      	ldr	r6, [pc, #264]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 801117e:	2502      	movs	r5, #2
 8011180:	6833      	ldr	r3, [r6, #0]
 8011182:	421d      	tst	r5, r3
 8011184:	d0cf      	beq.n	8011126 <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011186:	f7fe fa75 	bl	800f674 <HAL_GetTick>
 801118a:	1bc0      	subs	r0, r0, r7
 801118c:	2864      	cmp	r0, #100	; 0x64
 801118e:	d9f7      	bls.n	8011180 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 8011190:	2003      	movs	r0, #3
 8011192:	e72a      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 8011194:	4a3c      	ldr	r2, [pc, #240]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 8011196:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011198:	2101      	movs	r1, #1
 801119a:	438b      	bics	r3, r1
 801119c:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 801119e:	f7fe fa69 	bl	800f674 <HAL_GetTick>
 80111a2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80111a4:	4e38      	ldr	r6, [pc, #224]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 80111a6:	2502      	movs	r5, #2
 80111a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80111aa:	421d      	tst	r5, r3
 80111ac:	d006      	beq.n	80111bc <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80111ae:	f7fe fa61 	bl	800f674 <HAL_GetTick>
 80111b2:	1bc0      	subs	r0, r0, r7
 80111b4:	2864      	cmp	r0, #100	; 0x64
 80111b6:	d9f7      	bls.n	80111a8 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 80111b8:	2003      	movs	r0, #3
 80111ba:	e716      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80111bc:	6823      	ldr	r3, [r4, #0]
 80111be:	075b      	lsls	r3, r3, #29
 80111c0:	d442      	bmi.n	8011248 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80111c2:	6823      	ldr	r3, [r4, #0]
 80111c4:	06db      	lsls	r3, r3, #27
 80111c6:	d512      	bpl.n	80111ee <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80111c8:	6963      	ldr	r3, [r4, #20]
 80111ca:	2b01      	cmp	r3, #1
 80111cc:	d100      	bne.n	80111d0 <HAL_RCC_OscConfig+0x250>
 80111ce:	e0ce      	b.n	801136e <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80111d0:	3305      	adds	r3, #5
 80111d2:	d000      	beq.n	80111d6 <HAL_RCC_OscConfig+0x256>
 80111d4:	e0ec      	b.n	80113b0 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 80111d6:	4a2c      	ldr	r2, [pc, #176]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 80111d8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80111da:	2104      	movs	r1, #4
 80111dc:	438b      	bics	r3, r1
 80111de:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80111e0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80111e2:	69a3      	ldr	r3, [r4, #24]
 80111e4:	00db      	lsls	r3, r3, #3
 80111e6:	20f8      	movs	r0, #248	; 0xf8
 80111e8:	4381      	bics	r1, r0
 80111ea:	430b      	orrs	r3, r1
 80111ec:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80111ee:	6823      	ldr	r3, [r4, #0]
 80111f0:	069b      	lsls	r3, r3, #26
 80111f2:	d400      	bmi.n	80111f6 <HAL_RCC_OscConfig+0x276>
 80111f4:	e106      	b.n	8011404 <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80111f6:	4b24      	ldr	r3, [pc, #144]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 80111f8:	685a      	ldr	r2, [r3, #4]
 80111fa:	230c      	movs	r3, #12
 80111fc:	4013      	ands	r3, r2
 80111fe:	2b0c      	cmp	r3, #12
 8011200:	d100      	bne.n	8011204 <HAL_RCC_OscConfig+0x284>
 8011202:	e0f6      	b.n	80113f2 <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011204:	4b20      	ldr	r3, [pc, #128]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 8011206:	685a      	ldr	r2, [r3, #4]
 8011208:	230c      	movs	r3, #12
 801120a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801120c:	2b08      	cmp	r3, #8
 801120e:	d100      	bne.n	8011212 <HAL_RCC_OscConfig+0x292>
 8011210:	e0e7      	b.n	80113e2 <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011212:	69e3      	ldr	r3, [r4, #28]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d100      	bne.n	801121a <HAL_RCC_OscConfig+0x29a>
 8011218:	e116      	b.n	8011448 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 801121a:	4a1b      	ldr	r2, [pc, #108]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 801121c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801121e:	2380      	movs	r3, #128	; 0x80
 8011220:	025b      	lsls	r3, r3, #9
 8011222:	430b      	orrs	r3, r1
 8011224:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011226:	f7fe fa25 	bl	800f674 <HAL_GetTick>
 801122a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801122c:	4e16      	ldr	r6, [pc, #88]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 801122e:	2580      	movs	r5, #128	; 0x80
 8011230:	026d      	lsls	r5, r5, #9
 8011232:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8011234:	422b      	tst	r3, r5
 8011236:	d000      	beq.n	801123a <HAL_RCC_OscConfig+0x2ba>
 8011238:	e0e4      	b.n	8011404 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801123a:	f7fe fa1b 	bl	800f674 <HAL_GetTick>
 801123e:	1bc0      	subs	r0, r0, r7
 8011240:	2864      	cmp	r0, #100	; 0x64
 8011242:	d9f6      	bls.n	8011232 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8011244:	2003      	movs	r0, #3
 8011246:	e6d0      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8011248:	4a0f      	ldr	r2, [pc, #60]	; (8011288 <HAL_RCC_OscConfig+0x308>)
 801124a:	69d1      	ldr	r1, [r2, #28]
 801124c:	2080      	movs	r0, #128	; 0x80
 801124e:	0540      	lsls	r0, r0, #21
 8011250:	4301      	orrs	r1, r0
 8011252:	61d1      	str	r1, [r2, #28]
 8011254:	69d3      	ldr	r3, [r2, #28]
 8011256:	4003      	ands	r3, r0
 8011258:	9301      	str	r3, [sp, #4]
 801125a:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801125c:	4a0d      	ldr	r2, [pc, #52]	; (8011294 <HAL_RCC_OscConfig+0x314>)
 801125e:	6811      	ldr	r1, [r2, #0]
 8011260:	2380      	movs	r3, #128	; 0x80
 8011262:	005b      	lsls	r3, r3, #1
 8011264:	430b      	orrs	r3, r1
 8011266:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8011268:	f7fe fa04 	bl	800f674 <HAL_GetTick>
 801126c:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801126e:	4e09      	ldr	r6, [pc, #36]	; (8011294 <HAL_RCC_OscConfig+0x314>)
 8011270:	2580      	movs	r5, #128	; 0x80
 8011272:	006d      	lsls	r5, r5, #1
 8011274:	6833      	ldr	r3, [r6, #0]
 8011276:	422b      	tst	r3, r5
 8011278:	d10e      	bne.n	8011298 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801127a:	f7fe f9fb 	bl	800f674 <HAL_GetTick>
 801127e:	1bc0      	subs	r0, r0, r7
 8011280:	2864      	cmp	r0, #100	; 0x64
 8011282:	d9f7      	bls.n	8011274 <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 8011284:	2003      	movs	r0, #3
 8011286:	e6b0      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
 8011288:	40021000 	.word	0x40021000
 801128c:	fffeffff 	.word	0xfffeffff
 8011290:	fffbffff 	.word	0xfffbffff
 8011294:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8011298:	4b95      	ldr	r3, [pc, #596]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 801129a:	6a1a      	ldr	r2, [r3, #32]
 801129c:	2101      	movs	r1, #1
 801129e:	438a      	bics	r2, r1
 80112a0:	621a      	str	r2, [r3, #32]
 80112a2:	6a1a      	ldr	r2, [r3, #32]
 80112a4:	3103      	adds	r1, #3
 80112a6:	438a      	bics	r2, r1
 80112a8:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 80112aa:	f7fe f9e3 	bl	800f674 <HAL_GetTick>
 80112ae:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80112b0:	4e8f      	ldr	r6, [pc, #572]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 80112b2:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80112b4:	4f8f      	ldr	r7, [pc, #572]	; (80114f4 <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80112b6:	6a33      	ldr	r3, [r6, #32]
 80112b8:	421d      	tst	r5, r3
 80112ba:	d007      	beq.n	80112cc <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80112bc:	f7fe f9da 	bl	800f674 <HAL_GetTick>
 80112c0:	4643      	mov	r3, r8
 80112c2:	1ac0      	subs	r0, r0, r3
 80112c4:	42b8      	cmp	r0, r7
 80112c6:	d9f6      	bls.n	80112b6 <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 80112c8:	2003      	movs	r0, #3
 80112ca:	e68e      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80112cc:	68a3      	ldr	r3, [r4, #8]
 80112ce:	2b01      	cmp	r3, #1
 80112d0:	d00b      	beq.n	80112ea <HAL_RCC_OscConfig+0x36a>
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d123      	bne.n	801131e <HAL_RCC_OscConfig+0x39e>
 80112d6:	4b86      	ldr	r3, [pc, #536]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 80112d8:	6a1a      	ldr	r2, [r3, #32]
 80112da:	2101      	movs	r1, #1
 80112dc:	438a      	bics	r2, r1
 80112de:	621a      	str	r2, [r3, #32]
 80112e0:	6a1a      	ldr	r2, [r3, #32]
 80112e2:	3103      	adds	r1, #3
 80112e4:	438a      	bics	r2, r1
 80112e6:	621a      	str	r2, [r3, #32]
 80112e8:	e004      	b.n	80112f4 <HAL_RCC_OscConfig+0x374>
 80112ea:	4a81      	ldr	r2, [pc, #516]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 80112ec:	6a13      	ldr	r3, [r2, #32]
 80112ee:	2101      	movs	r1, #1
 80112f0:	430b      	orrs	r3, r1
 80112f2:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80112f4:	68a3      	ldr	r3, [r4, #8]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d027      	beq.n	801134a <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 80112fa:	f7fe f9bb 	bl	800f674 <HAL_GetTick>
 80112fe:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011300:	4e7b      	ldr	r6, [pc, #492]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 8011302:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011304:	4f7b      	ldr	r7, [pc, #492]	; (80114f4 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011306:	6a33      	ldr	r3, [r6, #32]
 8011308:	421d      	tst	r5, r3
 801130a:	d000      	beq.n	801130e <HAL_RCC_OscConfig+0x38e>
 801130c:	e759      	b.n	80111c2 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801130e:	f7fe f9b1 	bl	800f674 <HAL_GetTick>
 8011312:	4643      	mov	r3, r8
 8011314:	1ac0      	subs	r0, r0, r3
 8011316:	42b8      	cmp	r0, r7
 8011318:	d9f5      	bls.n	8011306 <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 801131a:	2003      	movs	r0, #3
 801131c:	e665      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801131e:	2b05      	cmp	r3, #5
 8011320:	d009      	beq.n	8011336 <HAL_RCC_OscConfig+0x3b6>
 8011322:	4b73      	ldr	r3, [pc, #460]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 8011324:	6a1a      	ldr	r2, [r3, #32]
 8011326:	2101      	movs	r1, #1
 8011328:	438a      	bics	r2, r1
 801132a:	621a      	str	r2, [r3, #32]
 801132c:	6a1a      	ldr	r2, [r3, #32]
 801132e:	3103      	adds	r1, #3
 8011330:	438a      	bics	r2, r1
 8011332:	621a      	str	r2, [r3, #32]
 8011334:	e7de      	b.n	80112f4 <HAL_RCC_OscConfig+0x374>
 8011336:	4b6e      	ldr	r3, [pc, #440]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 8011338:	6a1a      	ldr	r2, [r3, #32]
 801133a:	2104      	movs	r1, #4
 801133c:	430a      	orrs	r2, r1
 801133e:	621a      	str	r2, [r3, #32]
 8011340:	6a1a      	ldr	r2, [r3, #32]
 8011342:	3903      	subs	r1, #3
 8011344:	430a      	orrs	r2, r1
 8011346:	621a      	str	r2, [r3, #32]
 8011348:	e7d4      	b.n	80112f4 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 801134a:	f7fe f993 	bl	800f674 <HAL_GetTick>
 801134e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011350:	4e67      	ldr	r6, [pc, #412]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 8011352:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011354:	4f67      	ldr	r7, [pc, #412]	; (80114f4 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011356:	6a33      	ldr	r3, [r6, #32]
 8011358:	421d      	tst	r5, r3
 801135a:	d100      	bne.n	801135e <HAL_RCC_OscConfig+0x3de>
 801135c:	e731      	b.n	80111c2 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801135e:	f7fe f989 	bl	800f674 <HAL_GetTick>
 8011362:	4643      	mov	r3, r8
 8011364:	1ac0      	subs	r0, r0, r3
 8011366:	42b8      	cmp	r0, r7
 8011368:	d9f5      	bls.n	8011356 <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 801136a:	2003      	movs	r0, #3
 801136c:	e63d      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 801136e:	4b60      	ldr	r3, [pc, #384]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 8011370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011372:	2104      	movs	r1, #4
 8011374:	430a      	orrs	r2, r1
 8011376:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8011378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801137a:	3903      	subs	r1, #3
 801137c:	430a      	orrs	r2, r1
 801137e:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011380:	f7fe f978 	bl	800f674 <HAL_GetTick>
 8011384:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011386:	4e5a      	ldr	r6, [pc, #360]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 8011388:	2502      	movs	r5, #2
 801138a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801138c:	421d      	tst	r5, r3
 801138e:	d106      	bne.n	801139e <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011390:	f7fe f970 	bl	800f674 <HAL_GetTick>
 8011394:	1bc0      	subs	r0, r0, r7
 8011396:	2864      	cmp	r0, #100	; 0x64
 8011398:	d9f7      	bls.n	801138a <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 801139a:	2003      	movs	r0, #3
 801139c:	e625      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 801139e:	4954      	ldr	r1, [pc, #336]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 80113a0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80113a2:	69a3      	ldr	r3, [r4, #24]
 80113a4:	00db      	lsls	r3, r3, #3
 80113a6:	20f8      	movs	r0, #248	; 0xf8
 80113a8:	4382      	bics	r2, r0
 80113aa:	4313      	orrs	r3, r2
 80113ac:	634b      	str	r3, [r1, #52]	; 0x34
 80113ae:	e71e      	b.n	80111ee <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 80113b0:	4b4f      	ldr	r3, [pc, #316]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 80113b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113b4:	2104      	movs	r1, #4
 80113b6:	430a      	orrs	r2, r1
 80113b8:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80113ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113bc:	3903      	subs	r1, #3
 80113be:	438a      	bics	r2, r1
 80113c0:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80113c2:	f7fe f957 	bl	800f674 <HAL_GetTick>
 80113c6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80113c8:	4e49      	ldr	r6, [pc, #292]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 80113ca:	2502      	movs	r5, #2
 80113cc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80113ce:	421d      	tst	r5, r3
 80113d0:	d100      	bne.n	80113d4 <HAL_RCC_OscConfig+0x454>
 80113d2:	e70c      	b.n	80111ee <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80113d4:	f7fe f94e 	bl	800f674 <HAL_GetTick>
 80113d8:	1bc0      	subs	r0, r0, r7
 80113da:	2864      	cmp	r0, #100	; 0x64
 80113dc:	d9f6      	bls.n	80113cc <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 80113de:	2003      	movs	r0, #3
 80113e0:	e603      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80113e2:	4b43      	ldr	r3, [pc, #268]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	22c0      	movs	r2, #192	; 0xc0
 80113e8:	0252      	lsls	r2, r2, #9
 80113ea:	4013      	ands	r3, r2
 80113ec:	4293      	cmp	r3, r2
 80113ee:	d000      	beq.n	80113f2 <HAL_RCC_OscConfig+0x472>
 80113f0:	e70f      	b.n	8011212 <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80113f2:	4b3f      	ldr	r3, [pc, #252]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 80113f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113f6:	03db      	lsls	r3, r3, #15
 80113f8:	d504      	bpl.n	8011404 <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 80113fa:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80113fc:	69e3      	ldr	r3, [r4, #28]
 80113fe:	2b01      	cmp	r3, #1
 8011400:	d000      	beq.n	8011404 <HAL_RCC_OscConfig+0x484>
 8011402:	e5f2      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011404:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 8011406:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011408:	2b00      	cmp	r3, #0
 801140a:	d100      	bne.n	801140e <HAL_RCC_OscConfig+0x48e>
 801140c:	e5ed      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801140e:	4a38      	ldr	r2, [pc, #224]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 8011410:	6851      	ldr	r1, [r2, #4]
 8011412:	220c      	movs	r2, #12
 8011414:	400a      	ands	r2, r1
 8011416:	2a08      	cmp	r2, #8
 8011418:	d068      	beq.n	80114ec <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801141a:	2b02      	cmp	r3, #2
 801141c:	d029      	beq.n	8011472 <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 801141e:	4a34      	ldr	r2, [pc, #208]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 8011420:	6813      	ldr	r3, [r2, #0]
 8011422:	4935      	ldr	r1, [pc, #212]	; (80114f8 <HAL_RCC_OscConfig+0x578>)
 8011424:	400b      	ands	r3, r1
 8011426:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011428:	f7fe f924 	bl	800f674 <HAL_GetTick>
 801142c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801142e:	4d30      	ldr	r5, [pc, #192]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 8011430:	2480      	movs	r4, #128	; 0x80
 8011432:	04a4      	lsls	r4, r4, #18
 8011434:	682b      	ldr	r3, [r5, #0]
 8011436:	4223      	tst	r3, r4
 8011438:	d056      	beq.n	80114e8 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801143a:	f7fe f91b 	bl	800f674 <HAL_GetTick>
 801143e:	1b80      	subs	r0, r0, r6
 8011440:	2864      	cmp	r0, #100	; 0x64
 8011442:	d9f7      	bls.n	8011434 <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8011444:	2003      	movs	r0, #3
 8011446:	e5d0      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8011448:	4a29      	ldr	r2, [pc, #164]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 801144a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801144c:	492b      	ldr	r1, [pc, #172]	; (80114fc <HAL_RCC_OscConfig+0x57c>)
 801144e:	400b      	ands	r3, r1
 8011450:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011452:	f7fe f90f 	bl	800f674 <HAL_GetTick>
 8011456:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011458:	4e25      	ldr	r6, [pc, #148]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 801145a:	2580      	movs	r5, #128	; 0x80
 801145c:	026d      	lsls	r5, r5, #9
 801145e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8011460:	422b      	tst	r3, r5
 8011462:	d0cf      	beq.n	8011404 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011464:	f7fe f906 	bl	800f674 <HAL_GetTick>
 8011468:	1bc0      	subs	r0, r0, r7
 801146a:	2864      	cmp	r0, #100	; 0x64
 801146c:	d9f7      	bls.n	801145e <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 801146e:	2003      	movs	r0, #3
 8011470:	e5bb      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 8011472:	4a1f      	ldr	r2, [pc, #124]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 8011474:	6813      	ldr	r3, [r2, #0]
 8011476:	4920      	ldr	r1, [pc, #128]	; (80114f8 <HAL_RCC_OscConfig+0x578>)
 8011478:	400b      	ands	r3, r1
 801147a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801147c:	f7fe f8fa 	bl	800f674 <HAL_GetTick>
 8011480:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011482:	4e1b      	ldr	r6, [pc, #108]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 8011484:	2580      	movs	r5, #128	; 0x80
 8011486:	04ad      	lsls	r5, r5, #18
 8011488:	6833      	ldr	r3, [r6, #0]
 801148a:	422b      	tst	r3, r5
 801148c:	d006      	beq.n	801149c <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801148e:	f7fe f8f1 	bl	800f674 <HAL_GetTick>
 8011492:	1bc0      	subs	r0, r0, r7
 8011494:	2864      	cmp	r0, #100	; 0x64
 8011496:	d9f7      	bls.n	8011488 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 8011498:	2003      	movs	r0, #3
 801149a:	e5a6      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801149c:	4b14      	ldr	r3, [pc, #80]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 801149e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114a0:	210f      	movs	r1, #15
 80114a2:	438a      	bics	r2, r1
 80114a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80114a6:	430a      	orrs	r2, r1
 80114a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80114aa:	6859      	ldr	r1, [r3, #4]
 80114ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80114ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80114b0:	4302      	orrs	r2, r0
 80114b2:	4813      	ldr	r0, [pc, #76]	; (8011500 <HAL_RCC_OscConfig+0x580>)
 80114b4:	4001      	ands	r1, r0
 80114b6:	430a      	orrs	r2, r1
 80114b8:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80114ba:	6819      	ldr	r1, [r3, #0]
 80114bc:	2280      	movs	r2, #128	; 0x80
 80114be:	0452      	lsls	r2, r2, #17
 80114c0:	430a      	orrs	r2, r1
 80114c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80114c4:	f7fe f8d6 	bl	800f674 <HAL_GetTick>
 80114c8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80114ca:	4d09      	ldr	r5, [pc, #36]	; (80114f0 <HAL_RCC_OscConfig+0x570>)
 80114cc:	2480      	movs	r4, #128	; 0x80
 80114ce:	04a4      	lsls	r4, r4, #18
 80114d0:	682b      	ldr	r3, [r5, #0]
 80114d2:	4223      	tst	r3, r4
 80114d4:	d106      	bne.n	80114e4 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80114d6:	f7fe f8cd 	bl	800f674 <HAL_GetTick>
 80114da:	1b80      	subs	r0, r0, r6
 80114dc:	2864      	cmp	r0, #100	; 0x64
 80114de:	d9f7      	bls.n	80114d0 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 80114e0:	2003      	movs	r0, #3
 80114e2:	e582      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 80114e4:	2000      	movs	r0, #0
 80114e6:	e580      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
 80114e8:	2000      	movs	r0, #0
 80114ea:	e57e      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 80114ec:	2001      	movs	r0, #1
 80114ee:	e57c      	b.n	8010fea <HAL_RCC_OscConfig+0x6a>
 80114f0:	40021000 	.word	0x40021000
 80114f4:	00001388 	.word	0x00001388
 80114f8:	feffffff 	.word	0xfeffffff
 80114fc:	fffeffff 	.word	0xfffeffff
 8011500:	ffc27fff 	.word	0xffc27fff

08011504 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011506:	46ce      	mov	lr, r9
 8011508:	4647      	mov	r7, r8
 801150a:	b580      	push	{r7, lr}
 801150c:	0005      	movs	r5, r0
 801150e:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011510:	4b95      	ldr	r3, [pc, #596]	; (8011768 <HAL_RCC_ClockConfig+0x264>)
 8011512:	681a      	ldr	r2, [r3, #0]
 8011514:	2301      	movs	r3, #1
 8011516:	4013      	ands	r3, r2
 8011518:	428b      	cmp	r3, r1
 801151a:	d300      	bcc.n	801151e <HAL_RCC_ClockConfig+0x1a>
 801151c:	e089      	b.n	8011632 <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801151e:	4992      	ldr	r1, [pc, #584]	; (8011768 <HAL_RCC_ClockConfig+0x264>)
 8011520:	680b      	ldr	r3, [r1, #0]
 8011522:	2201      	movs	r2, #1
 8011524:	4393      	bics	r3, r2
 8011526:	4323      	orrs	r3, r4
 8011528:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801152a:	680b      	ldr	r3, [r1, #0]
 801152c:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 801152e:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011530:	42a2      	cmp	r2, r4
 8011532:	d003      	beq.n	801153c <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8011534:	bc0c      	pop	{r2, r3}
 8011536:	4690      	mov	r8, r2
 8011538:	4699      	mov	r9, r3
 801153a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801153c:	682b      	ldr	r3, [r5, #0]
 801153e:	079b      	lsls	r3, r3, #30
 8011540:	d506      	bpl.n	8011550 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011542:	4a8a      	ldr	r2, [pc, #552]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 8011544:	6853      	ldr	r3, [r2, #4]
 8011546:	21f0      	movs	r1, #240	; 0xf0
 8011548:	438b      	bics	r3, r1
 801154a:	68a9      	ldr	r1, [r5, #8]
 801154c:	430b      	orrs	r3, r1
 801154e:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011550:	682b      	ldr	r3, [r5, #0]
 8011552:	07db      	lsls	r3, r3, #31
 8011554:	d400      	bmi.n	8011558 <HAL_RCC_ClockConfig+0x54>
 8011556:	e0f7      	b.n	8011748 <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011558:	686b      	ldr	r3, [r5, #4]
 801155a:	2b01      	cmp	r3, #1
 801155c:	d009      	beq.n	8011572 <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801155e:	2b02      	cmp	r3, #2
 8011560:	d02b      	beq.n	80115ba <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011562:	2b03      	cmp	r3, #3
 8011564:	d02f      	beq.n	80115c6 <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011566:	4a81      	ldr	r2, [pc, #516]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 8011568:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801156a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801156c:	0792      	lsls	r2, r2, #30
 801156e:	d405      	bmi.n	801157c <HAL_RCC_ClockConfig+0x78>
 8011570:	e7e0      	b.n	8011534 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011572:	4a7e      	ldr	r2, [pc, #504]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 8011574:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8011576:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011578:	0392      	lsls	r2, r2, #14
 801157a:	d5db      	bpl.n	8011534 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801157c:	497b      	ldr	r1, [pc, #492]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 801157e:	684a      	ldr	r2, [r1, #4]
 8011580:	2003      	movs	r0, #3
 8011582:	4382      	bics	r2, r0
 8011584:	4313      	orrs	r3, r2
 8011586:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8011588:	f7fe f874 	bl	800f674 <HAL_GetTick>
 801158c:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801158e:	686b      	ldr	r3, [r5, #4]
 8011590:	2b01      	cmp	r3, #1
 8011592:	d01e      	beq.n	80115d2 <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011594:	2b02      	cmp	r3, #2
 8011596:	d02c      	beq.n	80115f2 <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011598:	2b03      	cmp	r3, #3
 801159a:	d03a      	beq.n	8011612 <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801159c:	4f73      	ldr	r7, [pc, #460]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 801159e:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80115a0:	4b73      	ldr	r3, [pc, #460]	; (8011770 <HAL_RCC_ClockConfig+0x26c>)
 80115a2:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	421e      	tst	r6, r3
 80115a8:	d100      	bne.n	80115ac <HAL_RCC_ClockConfig+0xa8>
 80115aa:	e0cd      	b.n	8011748 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80115ac:	f7fe f862 	bl	800f674 <HAL_GetTick>
 80115b0:	1b00      	subs	r0, r0, r4
 80115b2:	4540      	cmp	r0, r8
 80115b4:	d9f6      	bls.n	80115a4 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 80115b6:	2003      	movs	r0, #3
 80115b8:	e7bc      	b.n	8011534 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80115ba:	4a6c      	ldr	r2, [pc, #432]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 80115bc:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80115be:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80115c0:	0192      	lsls	r2, r2, #6
 80115c2:	d4db      	bmi.n	801157c <HAL_RCC_ClockConfig+0x78>
 80115c4:	e7b6      	b.n	8011534 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80115c6:	4a69      	ldr	r2, [pc, #420]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 80115c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 80115ca:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80115cc:	03d2      	lsls	r2, r2, #15
 80115ce:	d4d5      	bmi.n	801157c <HAL_RCC_ClockConfig+0x78>
 80115d0:	e7b0      	b.n	8011534 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80115d2:	4f66      	ldr	r7, [pc, #408]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 80115d4:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80115d6:	4b66      	ldr	r3, [pc, #408]	; (8011770 <HAL_RCC_ClockConfig+0x26c>)
 80115d8:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	4033      	ands	r3, r6
 80115de:	2b04      	cmp	r3, #4
 80115e0:	d100      	bne.n	80115e4 <HAL_RCC_ClockConfig+0xe0>
 80115e2:	e0b1      	b.n	8011748 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80115e4:	f7fe f846 	bl	800f674 <HAL_GetTick>
 80115e8:	1b00      	subs	r0, r0, r4
 80115ea:	4540      	cmp	r0, r8
 80115ec:	d9f5      	bls.n	80115da <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 80115ee:	2003      	movs	r0, #3
 80115f0:	e7a0      	b.n	8011534 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80115f2:	4f5e      	ldr	r7, [pc, #376]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 80115f4:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80115f6:	4b5e      	ldr	r3, [pc, #376]	; (8011770 <HAL_RCC_ClockConfig+0x26c>)
 80115f8:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	4033      	ands	r3, r6
 80115fe:	2b08      	cmp	r3, #8
 8011600:	d100      	bne.n	8011604 <HAL_RCC_ClockConfig+0x100>
 8011602:	e0a1      	b.n	8011748 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011604:	f7fe f836 	bl	800f674 <HAL_GetTick>
 8011608:	1b00      	subs	r0, r0, r4
 801160a:	4540      	cmp	r0, r8
 801160c:	d9f5      	bls.n	80115fa <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 801160e:	2003      	movs	r0, #3
 8011610:	e790      	b.n	8011534 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011612:	4f56      	ldr	r7, [pc, #344]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 8011614:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011616:	4b56      	ldr	r3, [pc, #344]	; (8011770 <HAL_RCC_ClockConfig+0x26c>)
 8011618:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	4033      	ands	r3, r6
 801161e:	2b0c      	cmp	r3, #12
 8011620:	d100      	bne.n	8011624 <HAL_RCC_ClockConfig+0x120>
 8011622:	e091      	b.n	8011748 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011624:	f7fe f826 	bl	800f674 <HAL_GetTick>
 8011628:	1b00      	subs	r0, r0, r4
 801162a:	4540      	cmp	r0, r8
 801162c:	d9f5      	bls.n	801161a <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 801162e:	2003      	movs	r0, #3
 8011630:	e780      	b.n	8011534 <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011632:	6803      	ldr	r3, [r0, #0]
 8011634:	079b      	lsls	r3, r3, #30
 8011636:	d506      	bpl.n	8011646 <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011638:	4a4c      	ldr	r2, [pc, #304]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 801163a:	6853      	ldr	r3, [r2, #4]
 801163c:	21f0      	movs	r1, #240	; 0xf0
 801163e:	438b      	bics	r3, r1
 8011640:	6881      	ldr	r1, [r0, #8]
 8011642:	430b      	orrs	r3, r1
 8011644:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011646:	682b      	ldr	r3, [r5, #0]
 8011648:	07db      	lsls	r3, r3, #31
 801164a:	d571      	bpl.n	8011730 <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801164c:	686b      	ldr	r3, [r5, #4]
 801164e:	2b01      	cmp	r3, #1
 8011650:	d009      	beq.n	8011666 <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011652:	2b02      	cmp	r3, #2
 8011654:	d02d      	beq.n	80116b2 <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011656:	2b03      	cmp	r3, #3
 8011658:	d031      	beq.n	80116be <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801165a:	4a44      	ldr	r2, [pc, #272]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 801165c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801165e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011660:	0792      	lsls	r2, r2, #30
 8011662:	d406      	bmi.n	8011672 <HAL_RCC_ClockConfig+0x16e>
 8011664:	e766      	b.n	8011534 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011666:	4a41      	ldr	r2, [pc, #260]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 8011668:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801166a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801166c:	0392      	lsls	r2, r2, #14
 801166e:	d400      	bmi.n	8011672 <HAL_RCC_ClockConfig+0x16e>
 8011670:	e760      	b.n	8011534 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011672:	493e      	ldr	r1, [pc, #248]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 8011674:	684a      	ldr	r2, [r1, #4]
 8011676:	2003      	movs	r0, #3
 8011678:	4382      	bics	r2, r0
 801167a:	4313      	orrs	r3, r2
 801167c:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 801167e:	f7fd fff9 	bl	800f674 <HAL_GetTick>
 8011682:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011684:	686b      	ldr	r3, [r5, #4]
 8011686:	2b01      	cmp	r3, #1
 8011688:	d01f      	beq.n	80116ca <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801168a:	2b02      	cmp	r3, #2
 801168c:	d02e      	beq.n	80116ec <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801168e:	2b03      	cmp	r3, #3
 8011690:	d03d      	beq.n	801170e <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011692:	4b36      	ldr	r3, [pc, #216]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 8011694:	4698      	mov	r8, r3
 8011696:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011698:	4b35      	ldr	r3, [pc, #212]	; (8011770 <HAL_RCC_ClockConfig+0x26c>)
 801169a:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801169c:	4643      	mov	r3, r8
 801169e:	685b      	ldr	r3, [r3, #4]
 80116a0:	421f      	tst	r7, r3
 80116a2:	d045      	beq.n	8011730 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80116a4:	f7fd ffe6 	bl	800f674 <HAL_GetTick>
 80116a8:	1b80      	subs	r0, r0, r6
 80116aa:	4548      	cmp	r0, r9
 80116ac:	d9f6      	bls.n	801169c <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 80116ae:	2003      	movs	r0, #3
 80116b0:	e740      	b.n	8011534 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80116b2:	4a2e      	ldr	r2, [pc, #184]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 80116b4:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80116b6:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80116b8:	0192      	lsls	r2, r2, #6
 80116ba:	d4da      	bmi.n	8011672 <HAL_RCC_ClockConfig+0x16e>
 80116bc:	e73a      	b.n	8011534 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80116be:	4a2b      	ldr	r2, [pc, #172]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 80116c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 80116c2:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80116c4:	03d2      	lsls	r2, r2, #15
 80116c6:	d4d4      	bmi.n	8011672 <HAL_RCC_ClockConfig+0x16e>
 80116c8:	e734      	b.n	8011534 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80116ca:	4b28      	ldr	r3, [pc, #160]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 80116cc:	4698      	mov	r8, r3
 80116ce:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80116d0:	4b27      	ldr	r3, [pc, #156]	; (8011770 <HAL_RCC_ClockConfig+0x26c>)
 80116d2:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80116d4:	4643      	mov	r3, r8
 80116d6:	685b      	ldr	r3, [r3, #4]
 80116d8:	403b      	ands	r3, r7
 80116da:	2b04      	cmp	r3, #4
 80116dc:	d028      	beq.n	8011730 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80116de:	f7fd ffc9 	bl	800f674 <HAL_GetTick>
 80116e2:	1b80      	subs	r0, r0, r6
 80116e4:	4548      	cmp	r0, r9
 80116e6:	d9f5      	bls.n	80116d4 <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 80116e8:	2003      	movs	r0, #3
 80116ea:	e723      	b.n	8011534 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80116ec:	4b1f      	ldr	r3, [pc, #124]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 80116ee:	4698      	mov	r8, r3
 80116f0:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80116f2:	4b1f      	ldr	r3, [pc, #124]	; (8011770 <HAL_RCC_ClockConfig+0x26c>)
 80116f4:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80116f6:	4643      	mov	r3, r8
 80116f8:	685b      	ldr	r3, [r3, #4]
 80116fa:	403b      	ands	r3, r7
 80116fc:	2b08      	cmp	r3, #8
 80116fe:	d017      	beq.n	8011730 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011700:	f7fd ffb8 	bl	800f674 <HAL_GetTick>
 8011704:	1b80      	subs	r0, r0, r6
 8011706:	4548      	cmp	r0, r9
 8011708:	d9f5      	bls.n	80116f6 <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 801170a:	2003      	movs	r0, #3
 801170c:	e712      	b.n	8011534 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801170e:	4b17      	ldr	r3, [pc, #92]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 8011710:	4698      	mov	r8, r3
 8011712:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011714:	4b16      	ldr	r3, [pc, #88]	; (8011770 <HAL_RCC_ClockConfig+0x26c>)
 8011716:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011718:	4643      	mov	r3, r8
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	403b      	ands	r3, r7
 801171e:	2b0c      	cmp	r3, #12
 8011720:	d006      	beq.n	8011730 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011722:	f7fd ffa7 	bl	800f674 <HAL_GetTick>
 8011726:	1b80      	subs	r0, r0, r6
 8011728:	4548      	cmp	r0, r9
 801172a:	d9f5      	bls.n	8011718 <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 801172c:	2003      	movs	r0, #3
 801172e:	e701      	b.n	8011534 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011730:	490d      	ldr	r1, [pc, #52]	; (8011768 <HAL_RCC_ClockConfig+0x264>)
 8011732:	680b      	ldr	r3, [r1, #0]
 8011734:	2201      	movs	r2, #1
 8011736:	4393      	bics	r3, r2
 8011738:	4323      	orrs	r3, r4
 801173a:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801173c:	680b      	ldr	r3, [r1, #0]
 801173e:	401a      	ands	r2, r3
      return HAL_ERROR;
 8011740:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011742:	42a2      	cmp	r2, r4
 8011744:	d000      	beq.n	8011748 <HAL_RCC_ClockConfig+0x244>
 8011746:	e6f5      	b.n	8011534 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011748:	682b      	ldr	r3, [r5, #0]
 801174a:	075b      	lsls	r3, r3, #29
 801174c:	d506      	bpl.n	801175c <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 801174e:	4a07      	ldr	r2, [pc, #28]	; (801176c <HAL_RCC_ClockConfig+0x268>)
 8011750:	6853      	ldr	r3, [r2, #4]
 8011752:	4908      	ldr	r1, [pc, #32]	; (8011774 <HAL_RCC_ClockConfig+0x270>)
 8011754:	400b      	ands	r3, r1
 8011756:	68e9      	ldr	r1, [r5, #12]
 8011758:	430b      	orrs	r3, r1
 801175a:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 801175c:	2000      	movs	r0, #0
 801175e:	f7fd ff5f 	bl	800f620 <HAL_InitTick>
  return HAL_OK;
 8011762:	2000      	movs	r0, #0
 8011764:	e6e6      	b.n	8011534 <HAL_RCC_ClockConfig+0x30>
 8011766:	46c0      	nop			; (mov r8, r8)
 8011768:	40022000 	.word	0x40022000
 801176c:	40021000 	.word	0x40021000
 8011770:	00001388 	.word	0x00001388
 8011774:	fffff8ff 	.word	0xfffff8ff

08011778 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011778:	b530      	push	{r4, r5, lr}
 801177a:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 801177c:	aa04      	add	r2, sp, #16
 801177e:	4b21      	ldr	r3, [pc, #132]	; (8011804 <HAL_RCC_GetSysClockFreq+0x8c>)
 8011780:	0018      	movs	r0, r3
 8011782:	c832      	ldmia	r0!, {r1, r4, r5}
 8011784:	c232      	stmia	r2!, {r1, r4, r5}
 8011786:	0011      	movs	r1, r2
 8011788:	6802      	ldr	r2, [r0, #0]
 801178a:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 801178c:	466a      	mov	r2, sp
 801178e:	3310      	adds	r3, #16
 8011790:	cb13      	ldmia	r3!, {r0, r1, r4}
 8011792:	c213      	stmia	r2!, {r0, r1, r4}
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8011798:	4b1b      	ldr	r3, [pc, #108]	; (8011808 <HAL_RCC_GetSysClockFreq+0x90>)
 801179a:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801179c:	200c      	movs	r0, #12
 801179e:	4018      	ands	r0, r3
 80117a0:	2808      	cmp	r0, #8
 80117a2:	d00a      	beq.n	80117ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80117a4:	380c      	subs	r0, #12
 80117a6:	4243      	negs	r3, r0
 80117a8:	4158      	adcs	r0, r3
 80117aa:	4240      	negs	r0, r0
 80117ac:	4b17      	ldr	r3, [pc, #92]	; (801180c <HAL_RCC_GetSysClockFreq+0x94>)
 80117ae:	4018      	ands	r0, r3
 80117b0:	4b17      	ldr	r3, [pc, #92]	; (8011810 <HAL_RCC_GetSysClockFreq+0x98>)
 80117b2:	469c      	mov	ip, r3
 80117b4:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80117b6:	b009      	add	sp, #36	; 0x24
 80117b8:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80117ba:	0c99      	lsrs	r1, r3, #18
 80117bc:	220f      	movs	r2, #15
 80117be:	4011      	ands	r1, r2
 80117c0:	a804      	add	r0, sp, #16
 80117c2:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80117c4:	4910      	ldr	r1, [pc, #64]	; (8011808 <HAL_RCC_GetSysClockFreq+0x90>)
 80117c6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80117c8:	400a      	ands	r2, r1
 80117ca:	4669      	mov	r1, sp
 80117cc:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80117ce:	22c0      	movs	r2, #192	; 0xc0
 80117d0:	0252      	lsls	r2, r2, #9
 80117d2:	4013      	ands	r3, r2
 80117d4:	2280      	movs	r2, #128	; 0x80
 80117d6:	0252      	lsls	r2, r2, #9
 80117d8:	4293      	cmp	r3, r2
 80117da:	d008      	beq.n	80117ee <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80117dc:	22c0      	movs	r2, #192	; 0xc0
 80117de:	0252      	lsls	r2, r2, #9
 80117e0:	4293      	cmp	r3, r2
 80117e2:	d009      	beq.n	80117f8 <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 80117e4:	480a      	ldr	r0, [pc, #40]	; (8011810 <HAL_RCC_GetSysClockFreq+0x98>)
 80117e6:	f7ee fcb3 	bl	8000150 <__udivsi3>
 80117ea:	4360      	muls	r0, r4
 80117ec:	e7e3      	b.n	80117b6 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 80117ee:	4808      	ldr	r0, [pc, #32]	; (8011810 <HAL_RCC_GetSysClockFreq+0x98>)
 80117f0:	f7ee fcae 	bl	8000150 <__udivsi3>
 80117f4:	4360      	muls	r0, r4
 80117f6:	e7de      	b.n	80117b6 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 80117f8:	4806      	ldr	r0, [pc, #24]	; (8011814 <HAL_RCC_GetSysClockFreq+0x9c>)
 80117fa:	f7ee fca9 	bl	8000150 <__udivsi3>
 80117fe:	4360      	muls	r0, r4
 8011800:	e7d9      	b.n	80117b6 <HAL_RCC_GetSysClockFreq+0x3e>
 8011802:	46c0      	nop			; (mov r8, r8)
 8011804:	080177b4 	.word	0x080177b4
 8011808:	40021000 	.word	0x40021000
 801180c:	02625a00 	.word	0x02625a00
 8011810:	007a1200 	.word	0x007a1200
 8011814:	02dc6c00 	.word	0x02dc6c00

08011818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011818:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 801181a:	f7ff ffad 	bl	8011778 <HAL_RCC_GetSysClockFreq>
 801181e:	4b05      	ldr	r3, [pc, #20]	; (8011834 <HAL_RCC_GetHCLKFreq+0x1c>)
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	061b      	lsls	r3, r3, #24
 8011824:	0f1b      	lsrs	r3, r3, #28
 8011826:	4a04      	ldr	r2, [pc, #16]	; (8011838 <HAL_RCC_GetHCLKFreq+0x20>)
 8011828:	5cd3      	ldrb	r3, [r2, r3]
 801182a:	40d8      	lsrs	r0, r3
 801182c:	4b03      	ldr	r3, [pc, #12]	; (801183c <HAL_RCC_GetHCLKFreq+0x24>)
 801182e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8011830:	bd10      	pop	{r4, pc}
 8011832:	46c0      	nop			; (mov r8, r8)
 8011834:	40021000 	.word	0x40021000
 8011838:	0801a628 	.word	0x0801a628
 801183c:	20000090 	.word	0x20000090

08011840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011840:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8011842:	f7ff ffe9 	bl	8011818 <HAL_RCC_GetHCLKFreq>
 8011846:	4b04      	ldr	r3, [pc, #16]	; (8011858 <HAL_RCC_GetPCLK1Freq+0x18>)
 8011848:	685b      	ldr	r3, [r3, #4]
 801184a:	055b      	lsls	r3, r3, #21
 801184c:	0f5b      	lsrs	r3, r3, #29
 801184e:	4a03      	ldr	r2, [pc, #12]	; (801185c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8011850:	5cd3      	ldrb	r3, [r2, r3]
 8011852:	40d8      	lsrs	r0, r3
}    
 8011854:	bd10      	pop	{r4, pc}
 8011856:	46c0      	nop			; (mov r8, r8)
 8011858:	40021000 	.word	0x40021000
 801185c:	0801a628 	.word	0x0801a628

08011860 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011862:	46c6      	mov	lr, r8
 8011864:	b500      	push	{lr}
 8011866:	b082      	sub	sp, #8
 8011868:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801186a:	6803      	ldr	r3, [r0, #0]
 801186c:	03db      	lsls	r3, r3, #15
 801186e:	d507      	bpl.n	8011880 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011870:	4b43      	ldr	r3, [pc, #268]	; (8011980 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011872:	6a1b      	ldr	r3, [r3, #32]
 8011874:	6842      	ldr	r2, [r0, #4]
 8011876:	4053      	eors	r3, r2
 8011878:	22c0      	movs	r2, #192	; 0xc0
 801187a:	0092      	lsls	r2, r2, #2
 801187c:	4213      	tst	r3, r2
 801187e:	d136      	bne.n	80118ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011880:	6823      	ldr	r3, [r4, #0]
 8011882:	07db      	lsls	r3, r3, #31
 8011884:	d506      	bpl.n	8011894 <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011886:	4a3e      	ldr	r2, [pc, #248]	; (8011980 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011888:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801188a:	2103      	movs	r1, #3
 801188c:	438b      	bics	r3, r1
 801188e:	68a1      	ldr	r1, [r4, #8]
 8011890:	430b      	orrs	r3, r1
 8011892:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011894:	6823      	ldr	r3, [r4, #0]
 8011896:	079b      	lsls	r3, r3, #30
 8011898:	d506      	bpl.n	80118a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801189a:	4a39      	ldr	r2, [pc, #228]	; (8011980 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801189c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801189e:	4939      	ldr	r1, [pc, #228]	; (8011984 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80118a0:	400b      	ands	r3, r1
 80118a2:	68e1      	ldr	r1, [r4, #12]
 80118a4:	430b      	orrs	r3, r1
 80118a6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80118a8:	6823      	ldr	r3, [r4, #0]
 80118aa:	035b      	lsls	r3, r3, #13
 80118ac:	d506      	bpl.n	80118bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80118ae:	4a34      	ldr	r2, [pc, #208]	; (8011980 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80118b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80118b2:	4935      	ldr	r1, [pc, #212]	; (8011988 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80118b4:	400b      	ands	r3, r1
 80118b6:	6921      	ldr	r1, [r4, #16]
 80118b8:	430b      	orrs	r3, r1
 80118ba:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80118bc:	6823      	ldr	r3, [r4, #0]
 80118be:	069b      	lsls	r3, r3, #26
 80118c0:	d506      	bpl.n	80118d0 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80118c2:	4a2f      	ldr	r2, [pc, #188]	; (8011980 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80118c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80118c6:	2110      	movs	r1, #16
 80118c8:	438b      	bics	r3, r1
 80118ca:	6961      	ldr	r1, [r4, #20]
 80118cc:	430b      	orrs	r3, r1
 80118ce:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80118d0:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80118d2:	6823      	ldr	r3, [r4, #0]
 80118d4:	055b      	lsls	r3, r3, #21
 80118d6:	d506      	bpl.n	80118e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80118d8:	4a29      	ldr	r2, [pc, #164]	; (8011980 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80118da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80118dc:	2140      	movs	r1, #64	; 0x40
 80118de:	438b      	bics	r3, r1
 80118e0:	69a1      	ldr	r1, [r4, #24]
 80118e2:	430b      	orrs	r3, r1
 80118e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80118e6:	b002      	add	sp, #8
 80118e8:	bc04      	pop	{r2}
 80118ea:	4690      	mov	r8, r2
 80118ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80118ee:	4a24      	ldr	r2, [pc, #144]	; (8011980 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80118f0:	69d1      	ldr	r1, [r2, #28]
 80118f2:	2080      	movs	r0, #128	; 0x80
 80118f4:	0540      	lsls	r0, r0, #21
 80118f6:	4301      	orrs	r1, r0
 80118f8:	61d1      	str	r1, [r2, #28]
 80118fa:	69d3      	ldr	r3, [r2, #28]
 80118fc:	4003      	ands	r3, r0
 80118fe:	9301      	str	r3, [sp, #4]
 8011900:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011902:	4a22      	ldr	r2, [pc, #136]	; (801198c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8011904:	6811      	ldr	r1, [r2, #0]
 8011906:	2380      	movs	r3, #128	; 0x80
 8011908:	005b      	lsls	r3, r3, #1
 801190a:	430b      	orrs	r3, r1
 801190c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 801190e:	f7fd feb1 	bl	800f674 <HAL_GetTick>
 8011912:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8011914:	4e1d      	ldr	r6, [pc, #116]	; (801198c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8011916:	2580      	movs	r5, #128	; 0x80
 8011918:	006d      	lsls	r5, r5, #1
 801191a:	6833      	ldr	r3, [r6, #0]
 801191c:	422b      	tst	r3, r5
 801191e:	d106      	bne.n	801192e <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011920:	f7fd fea8 	bl	800f674 <HAL_GetTick>
 8011924:	1bc0      	subs	r0, r0, r7
 8011926:	2864      	cmp	r0, #100	; 0x64
 8011928:	d9f7      	bls.n	801191a <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 801192a:	2003      	movs	r0, #3
 801192c:	e7db      	b.n	80118e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801192e:	4b14      	ldr	r3, [pc, #80]	; (8011980 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011930:	6a18      	ldr	r0, [r3, #32]
 8011932:	4a17      	ldr	r2, [pc, #92]	; (8011990 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8011934:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8011936:	6a1d      	ldr	r5, [r3, #32]
 8011938:	2180      	movs	r1, #128	; 0x80
 801193a:	0249      	lsls	r1, r1, #9
 801193c:	4329      	orrs	r1, r5
 801193e:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011940:	6a19      	ldr	r1, [r3, #32]
 8011942:	4d14      	ldr	r5, [pc, #80]	; (8011994 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8011944:	4029      	ands	r1, r5
 8011946:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8011948:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 801194a:	0783      	lsls	r3, r0, #30
 801194c:	d407      	bmi.n	801195e <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 801194e:	4a0c      	ldr	r2, [pc, #48]	; (8011980 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011950:	6a13      	ldr	r3, [r2, #32]
 8011952:	490f      	ldr	r1, [pc, #60]	; (8011990 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8011954:	400b      	ands	r3, r1
 8011956:	6861      	ldr	r1, [r4, #4]
 8011958:	430b      	orrs	r3, r1
 801195a:	6213      	str	r3, [r2, #32]
 801195c:	e790      	b.n	8011880 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 801195e:	f7fd fe89 	bl	800f674 <HAL_GetTick>
 8011962:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011964:	4e06      	ldr	r6, [pc, #24]	; (8011980 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8011966:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011968:	4f0b      	ldr	r7, [pc, #44]	; (8011998 <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801196a:	6a33      	ldr	r3, [r6, #32]
 801196c:	421d      	tst	r5, r3
 801196e:	d1ee      	bne.n	801194e <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011970:	f7fd fe80 	bl	800f674 <HAL_GetTick>
 8011974:	4643      	mov	r3, r8
 8011976:	1ac0      	subs	r0, r0, r3
 8011978:	42b8      	cmp	r0, r7
 801197a:	d9f6      	bls.n	801196a <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 801197c:	2003      	movs	r0, #3
 801197e:	e7b2      	b.n	80118e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8011980:	40021000 	.word	0x40021000
 8011984:	fffcffff 	.word	0xfffcffff
 8011988:	fff3ffff 	.word	0xfff3ffff
 801198c:	40007000 	.word	0x40007000
 8011990:	fffffcff 	.word	0xfffffcff
 8011994:	fffeffff 	.word	0xfffeffff
 8011998:	00001388 	.word	0x00001388

0801199c <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 801199c:	4770      	bx	lr

0801199e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 801199e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119a0:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80119a2:	6802      	ldr	r2, [r0, #0]
 80119a4:	68d3      	ldr	r3, [r2, #12]
 80119a6:	21a0      	movs	r1, #160	; 0xa0
 80119a8:	438b      	bics	r3, r1
 80119aa:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80119ac:	f7fd fe62 	bl	800f674 <HAL_GetTick>
 80119b0:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80119b2:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80119b4:	26fa      	movs	r6, #250	; 0xfa
 80119b6:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80119b8:	6823      	ldr	r3, [r4, #0]
 80119ba:	68db      	ldr	r3, [r3, #12]
 80119bc:	421d      	tst	r5, r3
 80119be:	d106      	bne.n	80119ce <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80119c0:	f7fd fe58 	bl	800f674 <HAL_GetTick>
 80119c4:	1bc0      	subs	r0, r0, r7
 80119c6:	42b0      	cmp	r0, r6
 80119c8:	d9f6      	bls.n	80119b8 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 80119ca:	2003      	movs	r0, #3
 80119cc:	e000      	b.n	80119d0 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 80119ce:	2000      	movs	r0, #0
}
 80119d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080119d2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80119d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119d4:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80119d6:	6803      	ldr	r3, [r0, #0]
 80119d8:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80119da:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80119dc:	0652      	lsls	r2, r2, #25
 80119de:	d500      	bpl.n	80119e2 <RTC_EnterInitMode+0x10>
}
 80119e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80119e2:	2201      	movs	r2, #1
 80119e4:	4252      	negs	r2, r2
 80119e6:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80119e8:	f7fd fe44 	bl	800f674 <HAL_GetTick>
 80119ec:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80119ee:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80119f0:	26fa      	movs	r6, #250	; 0xfa
 80119f2:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80119f4:	6823      	ldr	r3, [r4, #0]
 80119f6:	68db      	ldr	r3, [r3, #12]
 80119f8:	421d      	tst	r5, r3
 80119fa:	d106      	bne.n	8011a0a <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80119fc:	f7fd fe3a 	bl	800f674 <HAL_GetTick>
 8011a00:	1bc0      	subs	r0, r0, r7
 8011a02:	42b0      	cmp	r0, r6
 8011a04:	d9f6      	bls.n	80119f4 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8011a06:	2003      	movs	r0, #3
 8011a08:	e7ea      	b.n	80119e0 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8011a0a:	2000      	movs	r0, #0
 8011a0c:	e7e8      	b.n	80119e0 <RTC_EnterInitMode+0xe>
	...

08011a10 <HAL_RTC_Init>:
{
 8011a10:	b570      	push	{r4, r5, r6, lr}
 8011a12:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8011a14:	d046      	beq.n	8011aa4 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8011a16:	7f43      	ldrb	r3, [r0, #29]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d038      	beq.n	8011a8e <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011a1c:	2302      	movs	r3, #2
 8011a1e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011a20:	6823      	ldr	r3, [r4, #0]
 8011a22:	22ca      	movs	r2, #202	; 0xca
 8011a24:	625a      	str	r2, [r3, #36]	; 0x24
 8011a26:	6823      	ldr	r3, [r4, #0]
 8011a28:	3a77      	subs	r2, #119	; 0x77
 8011a2a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011a2c:	0020      	movs	r0, r4
 8011a2e:	f7ff ffd0 	bl	80119d2 <RTC_EnterInitMode>
 8011a32:	2800      	cmp	r0, #0
 8011a34:	d12f      	bne.n	8011a96 <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011a36:	6822      	ldr	r2, [r4, #0]
 8011a38:	6893      	ldr	r3, [r2, #8]
 8011a3a:	491b      	ldr	r1, [pc, #108]	; (8011aa8 <HAL_RTC_Init+0x98>)
 8011a3c:	400b      	ands	r3, r1
 8011a3e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011a40:	6822      	ldr	r2, [r4, #0]
 8011a42:	6891      	ldr	r1, [r2, #8]
 8011a44:	6863      	ldr	r3, [r4, #4]
 8011a46:	6925      	ldr	r5, [r4, #16]
 8011a48:	432b      	orrs	r3, r5
 8011a4a:	6965      	ldr	r5, [r4, #20]
 8011a4c:	432b      	orrs	r3, r5
 8011a4e:	430b      	orrs	r3, r1
 8011a50:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8011a52:	6823      	ldr	r3, [r4, #0]
 8011a54:	68e2      	ldr	r2, [r4, #12]
 8011a56:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011a58:	6822      	ldr	r2, [r4, #0]
 8011a5a:	6911      	ldr	r1, [r2, #16]
 8011a5c:	68a3      	ldr	r3, [r4, #8]
 8011a5e:	041b      	lsls	r3, r3, #16
 8011a60:	430b      	orrs	r3, r1
 8011a62:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011a64:	6822      	ldr	r2, [r4, #0]
 8011a66:	68d3      	ldr	r3, [r2, #12]
 8011a68:	2180      	movs	r1, #128	; 0x80
 8011a6a:	438b      	bics	r3, r1
 8011a6c:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8011a6e:	6822      	ldr	r2, [r4, #0]
 8011a70:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011a72:	490e      	ldr	r1, [pc, #56]	; (8011aac <HAL_RTC_Init+0x9c>)
 8011a74:	400b      	ands	r3, r1
 8011a76:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8011a78:	6822      	ldr	r2, [r4, #0]
 8011a7a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011a7c:	69a1      	ldr	r1, [r4, #24]
 8011a7e:	430b      	orrs	r3, r1
 8011a80:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011a82:	6823      	ldr	r3, [r4, #0]
 8011a84:	22ff      	movs	r2, #255	; 0xff
 8011a86:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8011a88:	2301      	movs	r3, #1
 8011a8a:	7763      	strb	r3, [r4, #29]
}
 8011a8c:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8011a8e:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8011a90:	f7ff ff84 	bl	801199c <HAL_RTC_MspInit>
 8011a94:	e7c2      	b.n	8011a1c <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011a96:	6823      	ldr	r3, [r4, #0]
 8011a98:	22ff      	movs	r2, #255	; 0xff
 8011a9a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011a9c:	2304      	movs	r3, #4
 8011a9e:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8011aa0:	2001      	movs	r0, #1
 8011aa2:	e7f3      	b.n	8011a8c <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 8011aa4:	2001      	movs	r0, #1
 8011aa6:	e7f1      	b.n	8011a8c <HAL_RTC_Init+0x7c>
 8011aa8:	ff8fffbf 	.word	0xff8fffbf
 8011aac:	fffbffff 	.word	0xfffbffff

08011ab0 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8011ab0:	2809      	cmp	r0, #9
 8011ab2:	d909      	bls.n	8011ac8 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 8011ab4:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8011ab6:	3301      	adds	r3, #1
    Value -= 10;
 8011ab8:	380a      	subs	r0, #10
 8011aba:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8011abc:	2809      	cmp	r0, #9
 8011abe:	d8fa      	bhi.n	8011ab6 <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8011ac0:	011b      	lsls	r3, r3, #4
 8011ac2:	4318      	orrs	r0, r3
 8011ac4:	b2c0      	uxtb	r0, r0
}
 8011ac6:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	e7f9      	b.n	8011ac0 <RTC_ByteToBcd2+0x10>

08011acc <HAL_RTC_SetTime>:
{
 8011acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ace:	46c6      	mov	lr, r8
 8011ad0:	b500      	push	{lr}
 8011ad2:	0004      	movs	r4, r0
 8011ad4:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8011ad6:	7f03      	ldrb	r3, [r0, #28]
 8011ad8:	2b01      	cmp	r3, #1
 8011ada:	d100      	bne.n	8011ade <HAL_RTC_SetTime+0x12>
 8011adc:	e075      	b.n	8011bca <HAL_RTC_SetTime+0xfe>
 8011ade:	2301      	movs	r3, #1
 8011ae0:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011ae2:	3301      	adds	r3, #1
 8011ae4:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8011ae6:	2a00      	cmp	r2, #0
 8011ae8:	d144      	bne.n	8011b74 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011aea:	6803      	ldr	r3, [r0, #0]
 8011aec:	689b      	ldr	r3, [r3, #8]
 8011aee:	065b      	lsls	r3, r3, #25
 8011af0:	d401      	bmi.n	8011af6 <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 8011af2:	2300      	movs	r3, #0
 8011af4:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011af6:	7830      	ldrb	r0, [r6, #0]
 8011af8:	f7ff ffda 	bl	8011ab0 <RTC_ByteToBcd2>
 8011afc:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011afe:	7870      	ldrb	r0, [r6, #1]
 8011b00:	f7ff ffd6 	bl	8011ab0 <RTC_ByteToBcd2>
 8011b04:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011b06:	78b0      	ldrb	r0, [r6, #2]
 8011b08:	f7ff ffd2 	bl	8011ab0 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8011b0c:	7a35      	ldrb	r5, [r6, #8]
 8011b0e:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011b10:	4305      	orrs	r5, r0
 8011b12:	4643      	mov	r3, r8
 8011b14:	0418      	lsls	r0, r3, #16
 8011b16:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011b18:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011b1a:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b1c:	6823      	ldr	r3, [r4, #0]
 8011b1e:	22ca      	movs	r2, #202	; 0xca
 8011b20:	625a      	str	r2, [r3, #36]	; 0x24
 8011b22:	6823      	ldr	r3, [r4, #0]
 8011b24:	3a77      	subs	r2, #119	; 0x77
 8011b26:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011b28:	0020      	movs	r0, r4
 8011b2a:	f7ff ff52 	bl	80119d2 <RTC_EnterInitMode>
 8011b2e:	1e07      	subs	r7, r0, #0
 8011b30:	d131      	bne.n	8011b96 <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011b32:	6823      	ldr	r3, [r4, #0]
 8011b34:	4826      	ldr	r0, [pc, #152]	; (8011bd0 <HAL_RTC_SetTime+0x104>)
 8011b36:	4005      	ands	r5, r0
 8011b38:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011b3a:	6822      	ldr	r2, [r4, #0]
 8011b3c:	6893      	ldr	r3, [r2, #8]
 8011b3e:	4925      	ldr	r1, [pc, #148]	; (8011bd4 <HAL_RTC_SetTime+0x108>)
 8011b40:	400b      	ands	r3, r1
 8011b42:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011b44:	6822      	ldr	r2, [r4, #0]
 8011b46:	6891      	ldr	r1, [r2, #8]
 8011b48:	68f3      	ldr	r3, [r6, #12]
 8011b4a:	6930      	ldr	r0, [r6, #16]
 8011b4c:	4303      	orrs	r3, r0
 8011b4e:	430b      	orrs	r3, r1
 8011b50:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011b52:	6822      	ldr	r2, [r4, #0]
 8011b54:	68d3      	ldr	r3, [r2, #12]
 8011b56:	2180      	movs	r1, #128	; 0x80
 8011b58:	438b      	bics	r3, r1
 8011b5a:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011b5c:	6823      	ldr	r3, [r4, #0]
 8011b5e:	689b      	ldr	r3, [r3, #8]
 8011b60:	069b      	lsls	r3, r3, #26
 8011b62:	d524      	bpl.n	8011bae <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011b64:	6823      	ldr	r3, [r4, #0]
 8011b66:	22ff      	movs	r2, #255	; 0xff
 8011b68:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8011b6e:	2300      	movs	r3, #0
 8011b70:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8011b72:	e018      	b.n	8011ba6 <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011b74:	6803      	ldr	r3, [r0, #0]
 8011b76:	689b      	ldr	r3, [r3, #8]
 8011b78:	065b      	lsls	r3, r3, #25
 8011b7a:	d401      	bmi.n	8011b80 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011b80:	7835      	ldrb	r5, [r6, #0]
 8011b82:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011b84:	7870      	ldrb	r0, [r6, #1]
 8011b86:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011b88:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8011b8a:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011b8c:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8011b8e:	7a30      	ldrb	r0, [r6, #8]
 8011b90:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011b92:	4305      	orrs	r5, r0
 8011b94:	e7c2      	b.n	8011b1c <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011b96:	6823      	ldr	r3, [r4, #0]
 8011b98:	22ff      	movs	r2, #255	; 0xff
 8011b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011b9c:	2304      	movs	r3, #4
 8011b9e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011ba4:	2701      	movs	r7, #1
}
 8011ba6:	0038      	movs	r0, r7
 8011ba8:	bc04      	pop	{r2}
 8011baa:	4690      	mov	r8, r2
 8011bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011bae:	0020      	movs	r0, r4
 8011bb0:	f7ff fef5 	bl	801199e <HAL_RTC_WaitForSynchro>
 8011bb4:	2800      	cmp	r0, #0
 8011bb6:	d0d5      	beq.n	8011b64 <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011bb8:	6823      	ldr	r3, [r4, #0]
 8011bba:	22ff      	movs	r2, #255	; 0xff
 8011bbc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011bbe:	2304      	movs	r3, #4
 8011bc0:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8011bc6:	2701      	movs	r7, #1
 8011bc8:	e7ed      	b.n	8011ba6 <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 8011bca:	2702      	movs	r7, #2
 8011bcc:	e7eb      	b.n	8011ba6 <HAL_RTC_SetTime+0xda>
 8011bce:	46c0      	nop			; (mov r8, r8)
 8011bd0:	007f7f7f 	.word	0x007f7f7f
 8011bd4:	fffbffff 	.word	0xfffbffff

08011bd8 <HAL_RTC_SetDate>:
{
 8011bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bda:	46c6      	mov	lr, r8
 8011bdc:	b500      	push	{lr}
 8011bde:	0004      	movs	r4, r0
 8011be0:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8011be2:	7f03      	ldrb	r3, [r0, #28]
 8011be4:	2b01      	cmp	r3, #1
 8011be6:	d03a      	beq.n	8011c5e <HAL_RTC_SetDate+0x86>
 8011be8:	2301      	movs	r3, #1
 8011bea:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8011bec:	3301      	adds	r3, #1
 8011bee:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011bf0:	2a00      	cmp	r2, #0
 8011bf2:	d136      	bne.n	8011c62 <HAL_RTC_SetDate+0x8a>
 8011bf4:	784b      	ldrb	r3, [r1, #1]
 8011bf6:	06da      	lsls	r2, r3, #27
 8011bf8:	d503      	bpl.n	8011c02 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8011bfa:	2210      	movs	r2, #16
 8011bfc:	4393      	bics	r3, r2
 8011bfe:	330a      	adds	r3, #10
 8011c00:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011c02:	78f0      	ldrb	r0, [r6, #3]
 8011c04:	f7ff ff54 	bl	8011ab0 <RTC_ByteToBcd2>
 8011c08:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011c0a:	7870      	ldrb	r0, [r6, #1]
 8011c0c:	f7ff ff50 	bl	8011ab0 <RTC_ByteToBcd2>
 8011c10:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8011c12:	78b0      	ldrb	r0, [r6, #2]
 8011c14:	f7ff ff4c 	bl	8011ab0 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8011c18:	7835      	ldrb	r5, [r6, #0]
 8011c1a:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011c1c:	4305      	orrs	r5, r0
 8011c1e:	4643      	mov	r3, r8
 8011c20:	0418      	lsls	r0, r3, #16
 8011c22:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011c24:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011c26:	433d      	orrs	r5, r7
 8011c28:	e025      	b.n	8011c76 <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011c2a:	6823      	ldr	r3, [r4, #0]
 8011c2c:	22ff      	movs	r2, #255	; 0xff
 8011c2e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011c30:	2304      	movs	r3, #4
 8011c32:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011c34:	2300      	movs	r3, #0
 8011c36:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8011c38:	2601      	movs	r6, #1
}
 8011c3a:	0030      	movs	r0, r6
 8011c3c:	bc04      	pop	{r2}
 8011c3e:	4690      	mov	r8, r2
 8011c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011c42:	0020      	movs	r0, r4
 8011c44:	f7ff feab 	bl	801199e <HAL_RTC_WaitForSynchro>
 8011c48:	2800      	cmp	r0, #0
 8011c4a:	d02c      	beq.n	8011ca6 <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011c4c:	6823      	ldr	r3, [r4, #0]
 8011c4e:	22ff      	movs	r2, #255	; 0xff
 8011c50:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011c52:	2304      	movs	r3, #4
 8011c54:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8011c56:	2300      	movs	r3, #0
 8011c58:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8011c5a:	2601      	movs	r6, #1
 8011c5c:	e7ed      	b.n	8011c3a <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8011c5e:	2602      	movs	r6, #2
 8011c60:	e7eb      	b.n	8011c3a <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011c62:	78cd      	ldrb	r5, [r1, #3]
 8011c64:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8011c66:	7848      	ldrb	r0, [r1, #1]
 8011c68:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011c6a:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8011c6c:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8011c6e:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8011c70:	7808      	ldrb	r0, [r1, #0]
 8011c72:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011c74:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011c76:	6823      	ldr	r3, [r4, #0]
 8011c78:	22ca      	movs	r2, #202	; 0xca
 8011c7a:	625a      	str	r2, [r3, #36]	; 0x24
 8011c7c:	6823      	ldr	r3, [r4, #0]
 8011c7e:	3a77      	subs	r2, #119	; 0x77
 8011c80:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8011c82:	0020      	movs	r0, r4
 8011c84:	f7ff fea5 	bl	80119d2 <RTC_EnterInitMode>
 8011c88:	1e06      	subs	r6, r0, #0
 8011c8a:	d1ce      	bne.n	8011c2a <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011c8c:	6823      	ldr	r3, [r4, #0]
 8011c8e:	480a      	ldr	r0, [pc, #40]	; (8011cb8 <HAL_RTC_SetDate+0xe0>)
 8011c90:	4005      	ands	r5, r0
 8011c92:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011c94:	6822      	ldr	r2, [r4, #0]
 8011c96:	68d3      	ldr	r3, [r2, #12]
 8011c98:	2180      	movs	r1, #128	; 0x80
 8011c9a:	438b      	bics	r3, r1
 8011c9c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011c9e:	6823      	ldr	r3, [r4, #0]
 8011ca0:	689b      	ldr	r3, [r3, #8]
 8011ca2:	069b      	lsls	r3, r3, #26
 8011ca4:	d5cd      	bpl.n	8011c42 <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011ca6:	6823      	ldr	r3, [r4, #0]
 8011ca8:	22ff      	movs	r2, #255	; 0xff
 8011caa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8011cac:	2301      	movs	r3, #1
 8011cae:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8011cb4:	e7c1      	b.n	8011c3a <HAL_RTC_SetDate+0x62>
 8011cb6:	46c0      	nop			; (mov r8, r8)
 8011cb8:	00ffff3f 	.word	0x00ffff3f

08011cbc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011cbc:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011cbe:	0900      	lsrs	r0, r0, #4
 8011cc0:	0083      	lsls	r3, r0, #2
 8011cc2:	181b      	adds	r3, r3, r0
 8011cc4:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011cc6:	200f      	movs	r0, #15
 8011cc8:	4010      	ands	r0, r2
 8011cca:	1818      	adds	r0, r3, r0
 8011ccc:	b2c0      	uxtb	r0, r0
}
 8011cce:	4770      	bx	lr

08011cd0 <HAL_RTC_GetTime>:
{
 8011cd0:	b570      	push	{r4, r5, r6, lr}
 8011cd2:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011cd4:	6803      	ldr	r3, [r0, #0]
 8011cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cd8:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8011cda:	6803      	ldr	r3, [r0, #0]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	490e      	ldr	r1, [pc, #56]	; (8011d18 <HAL_RTC_GetTime+0x48>)
 8011ce0:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011ce2:	0c19      	lsrs	r1, r3, #16
 8011ce4:	203f      	movs	r0, #63	; 0x3f
 8011ce6:	4008      	ands	r0, r1
 8011ce8:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011cea:	0a1e      	lsrs	r6, r3, #8
 8011cec:	b2f6      	uxtb	r6, r6
 8011cee:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8011cf0:	b2dc      	uxtb	r4, r3
 8011cf2:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011cf4:	2340      	movs	r3, #64	; 0x40
 8011cf6:	400b      	ands	r3, r1
 8011cf8:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 8011cfa:	2a00      	cmp	r2, #0
 8011cfc:	d10a      	bne.n	8011d14 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011cfe:	f7ff ffdd 	bl	8011cbc <RTC_Bcd2ToByte>
 8011d02:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011d04:	0030      	movs	r0, r6
 8011d06:	f7ff ffd9 	bl	8011cbc <RTC_Bcd2ToByte>
 8011d0a:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8011d0c:	0020      	movs	r0, r4
 8011d0e:	f7ff ffd5 	bl	8011cbc <RTC_Bcd2ToByte>
 8011d12:	70a8      	strb	r0, [r5, #2]
}
 8011d14:	2000      	movs	r0, #0
 8011d16:	bd70      	pop	{r4, r5, r6, pc}
 8011d18:	007f7f7f 	.word	0x007f7f7f

08011d1c <HAL_RTC_GetDate>:
{
 8011d1c:	b570      	push	{r4, r5, r6, lr}
 8011d1e:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8011d20:	6803      	ldr	r3, [r0, #0]
 8011d22:	685b      	ldr	r3, [r3, #4]
 8011d24:	490d      	ldr	r1, [pc, #52]	; (8011d5c <HAL_RTC_GetDate+0x40>)
 8011d26:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8011d28:	0c18      	lsrs	r0, r3, #16
 8011d2a:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011d2c:	04dd      	lsls	r5, r3, #19
 8011d2e:	0eed      	lsrs	r5, r5, #27
 8011d30:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8011d32:	b2de      	uxtb	r6, r3
 8011d34:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8011d36:	041b      	lsls	r3, r3, #16
 8011d38:	0f5b      	lsrs	r3, r3, #29
 8011d3a:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8011d3c:	2a00      	cmp	r2, #0
 8011d3e:	d10a      	bne.n	8011d56 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011d40:	f7ff ffbc 	bl	8011cbc <RTC_Bcd2ToByte>
 8011d44:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011d46:	0028      	movs	r0, r5
 8011d48:	f7ff ffb8 	bl	8011cbc <RTC_Bcd2ToByte>
 8011d4c:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8011d4e:	0030      	movs	r0, r6
 8011d50:	f7ff ffb4 	bl	8011cbc <RTC_Bcd2ToByte>
 8011d54:	70a0      	strb	r0, [r4, #2]
}
 8011d56:	2000      	movs	r0, #0
 8011d58:	bd70      	pop	{r4, r5, r6, pc}
 8011d5a:	46c0      	nop			; (mov r8, r8)
 8011d5c:	00ffff3f 	.word	0x00ffff3f

08011d60 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011d60:	6803      	ldr	r3, [r0, #0]
 8011d62:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011d64:	0089      	lsls	r1, r1, #2
 8011d66:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8011d68:	600a      	str	r2, [r1, #0]
}
 8011d6a:	4770      	bx	lr

08011d6c <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8011d6c:	6803      	ldr	r3, [r0, #0]
 8011d6e:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8011d70:	0089      	lsls	r1, r1, #2
 8011d72:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8011d74:	6808      	ldr	r0, [r1, #0]
}
 8011d76:	4770      	bx	lr

08011d78 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8011d78:	4770      	bx	lr

08011d7a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8011d7a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8011d7c:	2239      	movs	r2, #57	; 0x39
 8011d7e:	2302      	movs	r3, #2
 8011d80:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8011d82:	6804      	ldr	r4, [r0, #0]
 8011d84:	6823      	ldr	r3, [r4, #0]
 8011d86:	2101      	movs	r1, #1
 8011d88:	430b      	orrs	r3, r1
 8011d8a:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8011d8c:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8011d8e:	2000      	movs	r0, #0
 8011d90:	bd10      	pop	{r4, pc}
	...

08011d94 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8011d94:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011d96:	4a36      	ldr	r2, [pc, #216]	; (8011e70 <TIM_Base_SetConfig+0xdc>)
 8011d98:	4290      	cmp	r0, r2
 8011d9a:	d022      	beq.n	8011de2 <TIM_Base_SetConfig+0x4e>
 8011d9c:	2280      	movs	r2, #128	; 0x80
 8011d9e:	05d2      	lsls	r2, r2, #23
 8011da0:	4290      	cmp	r0, r2
 8011da2:	d014      	beq.n	8011dce <TIM_Base_SetConfig+0x3a>
 8011da4:	4a33      	ldr	r2, [pc, #204]	; (8011e74 <TIM_Base_SetConfig+0xe0>)
 8011da6:	4290      	cmp	r0, r2
 8011da8:	d016      	beq.n	8011dd8 <TIM_Base_SetConfig+0x44>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011daa:	4a33      	ldr	r2, [pc, #204]	; (8011e78 <TIM_Base_SetConfig+0xe4>)
 8011dac:	4290      	cmp	r0, r2
 8011dae:	d040      	beq.n	8011e32 <TIM_Base_SetConfig+0x9e>
 8011db0:	4a32      	ldr	r2, [pc, #200]	; (8011e7c <TIM_Base_SetConfig+0xe8>)
 8011db2:	4290      	cmp	r0, r2
 8011db4:	d047      	beq.n	8011e46 <TIM_Base_SetConfig+0xb2>
 8011db6:	4a32      	ldr	r2, [pc, #200]	; (8011e80 <TIM_Base_SetConfig+0xec>)
 8011db8:	4290      	cmp	r0, r2
 8011dba:	d04e      	beq.n	8011e5a <TIM_Base_SetConfig+0xc6>
 8011dbc:	4a31      	ldr	r2, [pc, #196]	; (8011e84 <TIM_Base_SetConfig+0xf0>)
 8011dbe:	4290      	cmp	r0, r2
 8011dc0:	d02d      	beq.n	8011e1e <TIM_Base_SetConfig+0x8a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8011dc2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011dc4:	688b      	ldr	r3, [r1, #8]
 8011dc6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011dc8:	680b      	ldr	r3, [r1, #0]
 8011dca:	6283      	str	r3, [r0, #40]	; 0x28
 8011dcc:	e024      	b.n	8011e18 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011dce:	2270      	movs	r2, #112	; 0x70
 8011dd0:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011dd2:	684a      	ldr	r2, [r1, #4]
 8011dd4:	4313      	orrs	r3, r2
 8011dd6:	e008      	b.n	8011dea <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011dd8:	2270      	movs	r2, #112	; 0x70
 8011dda:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011ddc:	684a      	ldr	r2, [r1, #4]
 8011dde:	4313      	orrs	r3, r2
 8011de0:	e003      	b.n	8011dea <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011de2:	2270      	movs	r2, #112	; 0x70
 8011de4:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8011de6:	684a      	ldr	r2, [r1, #4]
 8011de8:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8011dea:	4a27      	ldr	r2, [pc, #156]	; (8011e88 <TIM_Base_SetConfig+0xf4>)
 8011dec:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011dee:	68ca      	ldr	r2, [r1, #12]
 8011df0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011df2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011df4:	688b      	ldr	r3, [r1, #8]
 8011df6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011df8:	680b      	ldr	r3, [r1, #0]
 8011dfa:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011dfc:	4b1c      	ldr	r3, [pc, #112]	; (8011e70 <TIM_Base_SetConfig+0xdc>)
 8011dfe:	4298      	cmp	r0, r3
 8011e00:	d008      	beq.n	8011e14 <TIM_Base_SetConfig+0x80>
 8011e02:	4b1e      	ldr	r3, [pc, #120]	; (8011e7c <TIM_Base_SetConfig+0xe8>)
 8011e04:	4298      	cmp	r0, r3
 8011e06:	d005      	beq.n	8011e14 <TIM_Base_SetConfig+0x80>
 8011e08:	4b1d      	ldr	r3, [pc, #116]	; (8011e80 <TIM_Base_SetConfig+0xec>)
 8011e0a:	4298      	cmp	r0, r3
 8011e0c:	d002      	beq.n	8011e14 <TIM_Base_SetConfig+0x80>
 8011e0e:	4b1d      	ldr	r3, [pc, #116]	; (8011e84 <TIM_Base_SetConfig+0xf0>)
 8011e10:	4298      	cmp	r0, r3
 8011e12:	d101      	bne.n	8011e18 <TIM_Base_SetConfig+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011e14:	690b      	ldr	r3, [r1, #16]
 8011e16:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8011e18:	2301      	movs	r3, #1
 8011e1a:	6143      	str	r3, [r0, #20]
}
 8011e1c:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 8011e1e:	4a1a      	ldr	r2, [pc, #104]	; (8011e88 <TIM_Base_SetConfig+0xf4>)
 8011e20:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011e22:	68ca      	ldr	r2, [r1, #12]
 8011e24:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011e26:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011e28:	688b      	ldr	r3, [r1, #8]
 8011e2a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011e2c:	680b      	ldr	r3, [r1, #0]
 8011e2e:	6283      	str	r3, [r0, #40]	; 0x28
 8011e30:	e7f0      	b.n	8011e14 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011e32:	4a15      	ldr	r2, [pc, #84]	; (8011e88 <TIM_Base_SetConfig+0xf4>)
 8011e34:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011e36:	68ca      	ldr	r2, [r1, #12]
 8011e38:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011e3a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011e3c:	688b      	ldr	r3, [r1, #8]
 8011e3e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011e40:	680b      	ldr	r3, [r1, #0]
 8011e42:	6283      	str	r3, [r0, #40]	; 0x28
 8011e44:	e7e8      	b.n	8011e18 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011e46:	4a10      	ldr	r2, [pc, #64]	; (8011e88 <TIM_Base_SetConfig+0xf4>)
 8011e48:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011e4a:	68ca      	ldr	r2, [r1, #12]
 8011e4c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011e4e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011e50:	688b      	ldr	r3, [r1, #8]
 8011e52:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011e54:	680b      	ldr	r3, [r1, #0]
 8011e56:	6283      	str	r3, [r0, #40]	; 0x28
 8011e58:	e7dc      	b.n	8011e14 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8011e5a:	4a0b      	ldr	r2, [pc, #44]	; (8011e88 <TIM_Base_SetConfig+0xf4>)
 8011e5c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011e5e:	68ca      	ldr	r2, [r1, #12]
 8011e60:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8011e62:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011e64:	688b      	ldr	r3, [r1, #8]
 8011e66:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8011e68:	680b      	ldr	r3, [r1, #0]
 8011e6a:	6283      	str	r3, [r0, #40]	; 0x28
 8011e6c:	e7d2      	b.n	8011e14 <TIM_Base_SetConfig+0x80>
 8011e6e:	46c0      	nop			; (mov r8, r8)
 8011e70:	40012c00 	.word	0x40012c00
 8011e74:	40000400 	.word	0x40000400
 8011e78:	40002000 	.word	0x40002000
 8011e7c:	40014000 	.word	0x40014000
 8011e80:	40014400 	.word	0x40014400
 8011e84:	40014800 	.word	0x40014800
 8011e88:	fffffcff 	.word	0xfffffcff

08011e8c <HAL_TIM_Base_Init>:
{
 8011e8c:	b570      	push	{r4, r5, r6, lr}
 8011e8e:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8011e90:	d014      	beq.n	8011ebc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8011e92:	2339      	movs	r3, #57	; 0x39
 8011e94:	5cc3      	ldrb	r3, [r0, r3]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d00a      	beq.n	8011eb0 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8011e9a:	2539      	movs	r5, #57	; 0x39
 8011e9c:	2302      	movs	r3, #2
 8011e9e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011ea0:	1d21      	adds	r1, r4, #4
 8011ea2:	6820      	ldr	r0, [r4, #0]
 8011ea4:	f7ff ff76 	bl	8011d94 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8011ea8:	2301      	movs	r3, #1
 8011eaa:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8011eac:	2000      	movs	r0, #0
}
 8011eae:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8011eb0:	3338      	adds	r3, #56	; 0x38
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8011eb6:	f7ff ff5f 	bl	8011d78 <HAL_TIM_Base_MspInit>
 8011eba:	e7ee      	b.n	8011e9a <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8011ebc:	2001      	movs	r0, #1
 8011ebe:	e7f6      	b.n	8011eae <HAL_TIM_Base_Init+0x22>

08011ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8011ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8011ec2:	2338      	movs	r3, #56	; 0x38
 8011ec4:	5cc3      	ldrb	r3, [r0, r3]
 8011ec6:	2b01      	cmp	r3, #1
 8011ec8:	d01e      	beq.n	8011f08 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8011eca:	2238      	movs	r2, #56	; 0x38
 8011ecc:	2501      	movs	r5, #1
 8011ece:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8011ed0:	2439      	movs	r4, #57	; 0x39
 8011ed2:	2302      	movs	r3, #2
 8011ed4:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8011ed6:	6806      	ldr	r6, [r0, #0]
 8011ed8:	6873      	ldr	r3, [r6, #4]
 8011eda:	2770      	movs	r7, #112	; 0x70
 8011edc:	43bb      	bics	r3, r7
 8011ede:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8011ee0:	6806      	ldr	r6, [r0, #0]
 8011ee2:	6873      	ldr	r3, [r6, #4]
 8011ee4:	680f      	ldr	r7, [r1, #0]
 8011ee6:	433b      	orrs	r3, r7
 8011ee8:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8011eea:	6806      	ldr	r6, [r0, #0]
 8011eec:	68b3      	ldr	r3, [r6, #8]
 8011eee:	2780      	movs	r7, #128	; 0x80
 8011ef0:	43bb      	bics	r3, r7
 8011ef2:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8011ef4:	6806      	ldr	r6, [r0, #0]
 8011ef6:	68b3      	ldr	r3, [r6, #8]
 8011ef8:	6849      	ldr	r1, [r1, #4]
 8011efa:	430b      	orrs	r3, r1
 8011efc:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8011efe:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8011f00:	2300      	movs	r3, #0
 8011f02:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8011f04:	2000      	movs	r0, #0
}
 8011f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8011f08:	2002      	movs	r0, #2
 8011f0a:	e7fc      	b.n	8011f06 <HAL_TIMEx_MasterConfigSynchronization+0x46>

08011f0c <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8011f0c:	4770      	bx	lr

08011f0e <HAL_UART_DeInit>:
{
 8011f0e:	b570      	push	{r4, r5, r6, lr}
 8011f10:	0004      	movs	r4, r0
    return HAL_ERROR;
 8011f12:	2001      	movs	r0, #1
  if(huart == NULL)
 8011f14:	2c00      	cmp	r4, #0
 8011f16:	d016      	beq.n	8011f46 <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 8011f18:	2669      	movs	r6, #105	; 0x69
 8011f1a:	2302      	movs	r3, #2
 8011f1c:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8011f1e:	6822      	ldr	r2, [r4, #0]
 8011f20:	6813      	ldr	r3, [r2, #0]
 8011f22:	2101      	movs	r1, #1
 8011f24:	438b      	bics	r3, r1
 8011f26:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8011f28:	6823      	ldr	r3, [r4, #0]
 8011f2a:	2500      	movs	r5, #0
 8011f2c:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8011f2e:	6823      	ldr	r3, [r4, #0]
 8011f30:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8011f32:	6823      	ldr	r3, [r4, #0]
 8011f34:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8011f36:	0020      	movs	r0, r4
 8011f38:	f7ff ffe8 	bl	8011f0c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f3c:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8011f3e:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8011f40:	2368      	movs	r3, #104	; 0x68
 8011f42:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8011f44:	2000      	movs	r0, #0
}
 8011f46:	bd70      	pop	{r4, r5, r6, pc}

08011f48 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011f48:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011f4a:	2369      	movs	r3, #105	; 0x69
 8011f4c:	5cc3      	ldrb	r3, [r0, r3]
 8011f4e:	2b01      	cmp	r3, #1
 8011f50:	d004      	beq.n	8011f5c <HAL_UART_Transmit_IT+0x14>
 8011f52:	2369      	movs	r3, #105	; 0x69
 8011f54:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011f56:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011f58:	2c22      	cmp	r4, #34	; 0x22
 8011f5a:	d127      	bne.n	8011fac <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 8011f5c:	2900      	cmp	r1, #0
 8011f5e:	d02b      	beq.n	8011fb8 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8011f60:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8011f62:	2a00      	cmp	r2, #0
 8011f64:	d022      	beq.n	8011fac <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8011f66:	3367      	adds	r3, #103	; 0x67
 8011f68:	5cc3      	ldrb	r3, [r0, r3]
 8011f6a:	2b01      	cmp	r3, #1
 8011f6c:	d026      	beq.n	8011fbc <HAL_UART_Transmit_IT+0x74>
 8011f6e:	2368      	movs	r3, #104	; 0x68
 8011f70:	2401      	movs	r4, #1
 8011f72:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 8011f74:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8011f76:	3b18      	subs	r3, #24
 8011f78:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8011f7a:	3302      	adds	r3, #2
 8011f7c:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011f82:	3369      	adds	r3, #105	; 0x69
 8011f84:	5cc3      	ldrb	r3, [r0, r3]
 8011f86:	2b22      	cmp	r3, #34	; 0x22
 8011f88:	d012      	beq.n	8011fb0 <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8011f8a:	2369      	movs	r3, #105	; 0x69
 8011f8c:	2212      	movs	r2, #18
 8011f8e:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011f90:	6802      	ldr	r2, [r0, #0]
 8011f92:	6893      	ldr	r3, [r2, #8]
 8011f94:	2101      	movs	r1, #1
 8011f96:	430b      	orrs	r3, r1
 8011f98:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8011f9a:	2368      	movs	r3, #104	; 0x68
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8011fa0:	6802      	ldr	r2, [r0, #0]
 8011fa2:	6813      	ldr	r3, [r2, #0]
 8011fa4:	317f      	adds	r1, #127	; 0x7f
 8011fa6:	430b      	orrs	r3, r1
 8011fa8:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8011faa:	2300      	movs	r3, #0
  }
}
 8011fac:	0018      	movs	r0, r3
 8011fae:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8011fb0:	3347      	adds	r3, #71	; 0x47
 8011fb2:	2232      	movs	r2, #50	; 0x32
 8011fb4:	54c2      	strb	r2, [r0, r3]
 8011fb6:	e7eb      	b.n	8011f90 <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 8011fb8:	2301      	movs	r3, #1
 8011fba:	e7f7      	b.n	8011fac <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8011fbc:	2302      	movs	r3, #2
 8011fbe:	e7f5      	b.n	8011fac <HAL_UART_Transmit_IT+0x64>

08011fc0 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011fc0:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011fc2:	2369      	movs	r3, #105	; 0x69
 8011fc4:	5cc3      	ldrb	r3, [r0, r3]
 8011fc6:	2b01      	cmp	r3, #1
 8011fc8:	d004      	beq.n	8011fd4 <HAL_UART_Receive_IT+0x14>
 8011fca:	2369      	movs	r3, #105	; 0x69
 8011fcc:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8011fce:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8011fd0:	2c12      	cmp	r4, #18
 8011fd2:	d14e      	bne.n	8012072 <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 8011fd4:	2900      	cmp	r1, #0
 8011fd6:	d05d      	beq.n	8012094 <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 8011fd8:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8011fda:	2a00      	cmp	r2, #0
 8011fdc:	d049      	beq.n	8012072 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8011fde:	3367      	adds	r3, #103	; 0x67
 8011fe0:	5cc3      	ldrb	r3, [r0, r3]
 8011fe2:	2b01      	cmp	r3, #1
 8011fe4:	d058      	beq.n	8012098 <HAL_UART_Receive_IT+0xd8>
 8011fe6:	2368      	movs	r3, #104	; 0x68
 8011fe8:	2401      	movs	r4, #1
 8011fea:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 8011fec:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8011fee:	3b10      	subs	r3, #16
 8011ff0:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8011ff2:	3302      	adds	r3, #2
 8011ff4:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 8011ff6:	6883      	ldr	r3, [r0, #8]
 8011ff8:	2280      	movs	r2, #128	; 0x80
 8011ffa:	0152      	lsls	r2, r2, #5
 8011ffc:	4293      	cmp	r3, r2
 8011ffe:	d008      	beq.n	8012012 <HAL_UART_Receive_IT+0x52>
 8012000:	2b00      	cmp	r3, #0
 8012002:	d115      	bne.n	8012030 <HAL_UART_Receive_IT+0x70>
 8012004:	6903      	ldr	r3, [r0, #16]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d10e      	bne.n	8012028 <HAL_UART_Receive_IT+0x68>
 801200a:	335c      	adds	r3, #92	; 0x5c
 801200c:	22ff      	movs	r2, #255	; 0xff
 801200e:	52c2      	strh	r2, [r0, r3]
 8012010:	e012      	b.n	8012038 <HAL_UART_Receive_IT+0x78>
 8012012:	6903      	ldr	r3, [r0, #16]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d103      	bne.n	8012020 <HAL_UART_Receive_IT+0x60>
 8012018:	335c      	adds	r3, #92	; 0x5c
 801201a:	4a20      	ldr	r2, [pc, #128]	; (801209c <HAL_UART_Receive_IT+0xdc>)
 801201c:	52c2      	strh	r2, [r0, r3]
 801201e:	e00b      	b.n	8012038 <HAL_UART_Receive_IT+0x78>
 8012020:	235c      	movs	r3, #92	; 0x5c
 8012022:	22ff      	movs	r2, #255	; 0xff
 8012024:	52c2      	strh	r2, [r0, r3]
 8012026:	e007      	b.n	8012038 <HAL_UART_Receive_IT+0x78>
 8012028:	235c      	movs	r3, #92	; 0x5c
 801202a:	227f      	movs	r2, #127	; 0x7f
 801202c:	52c2      	strh	r2, [r0, r3]
 801202e:	e003      	b.n	8012038 <HAL_UART_Receive_IT+0x78>
 8012030:	2280      	movs	r2, #128	; 0x80
 8012032:	0552      	lsls	r2, r2, #21
 8012034:	4293      	cmp	r3, r2
 8012036:	d01e      	beq.n	8012076 <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012038:	2300      	movs	r3, #0
 801203a:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 801203c:	3369      	adds	r3, #105	; 0x69
 801203e:	5cc3      	ldrb	r3, [r0, r3]
 8012040:	2b12      	cmp	r3, #18
 8012042:	d023      	beq.n	801208c <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012044:	2369      	movs	r3, #105	; 0x69
 8012046:	2222      	movs	r2, #34	; 0x22
 8012048:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801204a:	6802      	ldr	r2, [r0, #0]
 801204c:	6811      	ldr	r1, [r2, #0]
 801204e:	2380      	movs	r3, #128	; 0x80
 8012050:	005b      	lsls	r3, r3, #1
 8012052:	430b      	orrs	r3, r1
 8012054:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012056:	6802      	ldr	r2, [r0, #0]
 8012058:	6893      	ldr	r3, [r2, #8]
 801205a:	2101      	movs	r1, #1
 801205c:	430b      	orrs	r3, r1
 801205e:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8012060:	2368      	movs	r3, #104	; 0x68
 8012062:	2200      	movs	r2, #0
 8012064:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012066:	6802      	ldr	r2, [r0, #0]
 8012068:	6813      	ldr	r3, [r2, #0]
 801206a:	311f      	adds	r1, #31
 801206c:	430b      	orrs	r3, r1
 801206e:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8012070:	2300      	movs	r3, #0
  }
}
 8012072:	0018      	movs	r0, r3
 8012074:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8012076:	6903      	ldr	r3, [r0, #16]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d103      	bne.n	8012084 <HAL_UART_Receive_IT+0xc4>
 801207c:	335c      	adds	r3, #92	; 0x5c
 801207e:	227f      	movs	r2, #127	; 0x7f
 8012080:	52c2      	strh	r2, [r0, r3]
 8012082:	e7d9      	b.n	8012038 <HAL_UART_Receive_IT+0x78>
 8012084:	235c      	movs	r3, #92	; 0x5c
 8012086:	223f      	movs	r2, #63	; 0x3f
 8012088:	52c2      	strh	r2, [r0, r3]
 801208a:	e7d5      	b.n	8012038 <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801208c:	3357      	adds	r3, #87	; 0x57
 801208e:	2232      	movs	r2, #50	; 0x32
 8012090:	54c2      	strb	r2, [r0, r3]
 8012092:	e7da      	b.n	801204a <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 8012094:	2301      	movs	r3, #1
 8012096:	e7ec      	b.n	8012072 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8012098:	2302      	movs	r3, #2
 801209a:	e7ea      	b.n	8012072 <HAL_UART_Receive_IT+0xb2>
 801209c:	000001ff 	.word	0x000001ff

080120a0 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80120a0:	b510      	push	{r4, lr}
 80120a2:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80120a4:	2369      	movs	r3, #105	; 0x69
 80120a6:	5cc3      	ldrb	r3, [r0, r3]
 80120a8:	2b01      	cmp	r3, #1
 80120aa:	d004      	beq.n	80120b6 <HAL_UART_Transmit_DMA+0x16>
 80120ac:	2369      	movs	r3, #105	; 0x69
 80120ae:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80120b0:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80120b2:	2b22      	cmp	r3, #34	; 0x22
 80120b4:	d134      	bne.n	8012120 <HAL_UART_Transmit_DMA+0x80>
    if((pData == NULL ) || (Size == 0))
 80120b6:	2900      	cmp	r1, #0
 80120b8:	d037      	beq.n	801212a <HAL_UART_Transmit_DMA+0x8a>
      return HAL_ERROR;
 80120ba:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80120bc:	2a00      	cmp	r2, #0
 80120be:	d02f      	beq.n	8012120 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 80120c0:	2368      	movs	r3, #104	; 0x68
 80120c2:	5ce3      	ldrb	r3, [r4, r3]
 80120c4:	2b01      	cmp	r3, #1
 80120c6:	d032      	beq.n	801212e <HAL_UART_Transmit_DMA+0x8e>
 80120c8:	2368      	movs	r3, #104	; 0x68
 80120ca:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr = pData;
 80120cc:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 80120ce:	3b18      	subs	r3, #24
 80120d0:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80120d2:	3302      	adds	r3, #2
 80120d4:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120d6:	2300      	movs	r3, #0
 80120d8:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80120da:	3369      	adds	r3, #105	; 0x69
 80120dc:	5ce3      	ldrb	r3, [r4, r3]
 80120de:	2b22      	cmp	r3, #34	; 0x22
 80120e0:	d01f      	beq.n	8012122 <HAL_UART_Transmit_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80120e2:	2369      	movs	r3, #105	; 0x69
 80120e4:	2012      	movs	r0, #18
 80120e6:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80120e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80120ea:	4812      	ldr	r0, [pc, #72]	; (8012134 <HAL_UART_Transmit_DMA+0x94>)
 80120ec:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80120ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80120f0:	4811      	ldr	r0, [pc, #68]	; (8012138 <HAL_UART_Transmit_DMA+0x98>)
 80120f2:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80120f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80120f6:	4811      	ldr	r0, [pc, #68]	; (801213c <HAL_UART_Transmit_DMA+0x9c>)
 80120f8:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 80120fa:	6820      	ldr	r0, [r4, #0]
 80120fc:	3028      	adds	r0, #40	; 0x28
 80120fe:	0013      	movs	r3, r2
 8012100:	0002      	movs	r2, r0
 8012102:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8012104:	f7fd ffb0 	bl	8010068 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012108:	6823      	ldr	r3, [r4, #0]
 801210a:	2240      	movs	r2, #64	; 0x40
 801210c:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 801210e:	6822      	ldr	r2, [r4, #0]
 8012110:	6893      	ldr	r3, [r2, #8]
 8012112:	2180      	movs	r1, #128	; 0x80
 8012114:	430b      	orrs	r3, r1
 8012116:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8012118:	2368      	movs	r3, #104	; 0x68
 801211a:	2200      	movs	r2, #0
 801211c:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 801211e:	2000      	movs	r0, #0
  }
}
 8012120:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012122:	3347      	adds	r3, #71	; 0x47
 8012124:	3031      	adds	r0, #49	; 0x31
 8012126:	54e0      	strb	r0, [r4, r3]
 8012128:	e7de      	b.n	80120e8 <HAL_UART_Transmit_DMA+0x48>
      return HAL_ERROR;
 801212a:	2001      	movs	r0, #1
 801212c:	e7f8      	b.n	8012120 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 801212e:	2002      	movs	r0, #2
 8012130:	e7f6      	b.n	8012120 <HAL_UART_Transmit_DMA+0x80>
 8012132:	46c0      	nop			; (mov r8, r8)
 8012134:	080121d9 	.word	0x080121d9
 8012138:	0801220b 	.word	0x0801220b
 801213c:	0801225b 	.word	0x0801225b

08012140 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012140:	b510      	push	{r4, lr}
 8012142:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012144:	2069      	movs	r0, #105	; 0x69
 8012146:	5c20      	ldrb	r0, [r4, r0]
 8012148:	2801      	cmp	r0, #1
 801214a:	d004      	beq.n	8012156 <HAL_UART_Receive_DMA+0x16>
 801214c:	2369      	movs	r3, #105	; 0x69
 801214e:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012150:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012152:	2b12      	cmp	r3, #18
 8012154:	d130      	bne.n	80121b8 <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 8012156:	2900      	cmp	r1, #0
 8012158:	d033      	beq.n	80121c2 <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 801215a:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 801215c:	2a00      	cmp	r2, #0
 801215e:	d02b      	beq.n	80121b8 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8012160:	2368      	movs	r3, #104	; 0x68
 8012162:	5ce3      	ldrb	r3, [r4, r3]
 8012164:	2b01      	cmp	r3, #1
 8012166:	d02e      	beq.n	80121c6 <HAL_UART_Receive_DMA+0x86>
 8012168:	2368      	movs	r3, #104	; 0x68
 801216a:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 801216c:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 801216e:	3b10      	subs	r3, #16
 8012170:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012172:	2300      	movs	r3, #0
 8012174:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012176:	3369      	adds	r3, #105	; 0x69
 8012178:	5ce3      	ldrb	r3, [r4, r3]
 801217a:	2b12      	cmp	r3, #18
 801217c:	d01d      	beq.n	80121ba <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801217e:	2369      	movs	r3, #105	; 0x69
 8012180:	2022      	movs	r0, #34	; 0x22
 8012182:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012186:	4811      	ldr	r0, [pc, #68]	; (80121cc <HAL_UART_Receive_DMA+0x8c>)
 8012188:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801218a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801218c:	4810      	ldr	r0, [pc, #64]	; (80121d0 <HAL_UART_Receive_DMA+0x90>)
 801218e:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012190:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012192:	4810      	ldr	r0, [pc, #64]	; (80121d4 <HAL_UART_Receive_DMA+0x94>)
 8012194:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012196:	6820      	ldr	r0, [r4, #0]
 8012198:	3024      	adds	r0, #36	; 0x24
 801219a:	0013      	movs	r3, r2
 801219c:	000a      	movs	r2, r1
 801219e:	0001      	movs	r1, r0
 80121a0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80121a2:	f7fd ff61 	bl	8010068 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80121a6:	6822      	ldr	r2, [r4, #0]
 80121a8:	6893      	ldr	r3, [r2, #8]
 80121aa:	2140      	movs	r1, #64	; 0x40
 80121ac:	430b      	orrs	r3, r1
 80121ae:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 80121b0:	2368      	movs	r3, #104	; 0x68
 80121b2:	2200      	movs	r2, #0
 80121b4:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80121b6:	2000      	movs	r0, #0
  }
}
 80121b8:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80121ba:	3357      	adds	r3, #87	; 0x57
 80121bc:	3031      	adds	r0, #49	; 0x31
 80121be:	54e0      	strb	r0, [r4, r3]
 80121c0:	e7e0      	b.n	8012184 <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 80121c2:	2001      	movs	r0, #1
 80121c4:	e7f8      	b.n	80121b8 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 80121c6:	2002      	movs	r0, #2
 80121c8:	e7f6      	b.n	80121b8 <HAL_UART_Receive_DMA+0x78>
 80121ca:	46c0      	nop			; (mov r8, r8)
 80121cc:	08012215 	.word	0x08012215
 80121d0:	08012251 	.word	0x08012251
 80121d4:	0801225b 	.word	0x0801225b

080121d8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80121d8:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80121da:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80121dc:	6802      	ldr	r2, [r0, #0]
 80121de:	6812      	ldr	r2, [r2, #0]
 80121e0:	0692      	lsls	r2, r2, #26
 80121e2:	d40d      	bmi.n	8012200 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 80121e4:	2252      	movs	r2, #82	; 0x52
 80121e6:	2100      	movs	r1, #0
 80121e8:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 80121ea:	6819      	ldr	r1, [r3, #0]
 80121ec:	688a      	ldr	r2, [r1, #8]
 80121ee:	2080      	movs	r0, #128	; 0x80
 80121f0:	4382      	bics	r2, r0
 80121f2:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80121f4:	681a      	ldr	r2, [r3, #0]
 80121f6:	6813      	ldr	r3, [r2, #0]
 80121f8:	2140      	movs	r1, #64	; 0x40
 80121fa:	430b      	orrs	r3, r1
 80121fc:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 80121fe:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8012200:	0018      	movs	r0, r3
 8012202:	f7fa fcb1 	bl	800cb68 <HAL_UART_TxCpltCallback>
}
 8012206:	e7fa      	b.n	80121fe <UART_DMATransmitCplt+0x26>

08012208 <HAL_UART_TxHalfCpltCallback>:
}
 8012208:	4770      	bx	lr

0801220a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801220a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 801220c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801220e:	f7ff fffb 	bl	8012208 <HAL_UART_TxHalfCpltCallback>
}
 8012212:	bd10      	pop	{r4, pc}

08012214 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012214:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012216:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012218:	6802      	ldr	r2, [r0, #0]
 801221a:	6812      	ldr	r2, [r2, #0]
 801221c:	0692      	lsls	r2, r2, #26
 801221e:	d40e      	bmi.n	801223e <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8012220:	225a      	movs	r2, #90	; 0x5a
 8012222:	2100      	movs	r1, #0
 8012224:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012226:	6819      	ldr	r1, [r3, #0]
 8012228:	688a      	ldr	r2, [r1, #8]
 801222a:	2040      	movs	r0, #64	; 0x40
 801222c:	4382      	bics	r2, r0
 801222e:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012230:	2269      	movs	r2, #105	; 0x69
 8012232:	5c9a      	ldrb	r2, [r3, r2]
 8012234:	2a32      	cmp	r2, #50	; 0x32
 8012236:	d006      	beq.n	8012246 <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012238:	2269      	movs	r2, #105	; 0x69
 801223a:	2101      	movs	r1, #1
 801223c:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 801223e:	0018      	movs	r0, r3
 8012240:	f7fa fcd0 	bl	800cbe4 <HAL_UART_RxCpltCallback>
}
 8012244:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012246:	3237      	adds	r2, #55	; 0x37
 8012248:	2112      	movs	r1, #18
 801224a:	5499      	strb	r1, [r3, r2]
 801224c:	e7f7      	b.n	801223e <UART_DMAReceiveCplt+0x2a>

0801224e <HAL_UART_RxHalfCpltCallback>:
}
 801224e:	4770      	bx	lr

08012250 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012250:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8012252:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012254:	f7ff fffb 	bl	801224e <HAL_UART_RxHalfCpltCallback>
}
 8012258:	bd10      	pop	{r4, pc}

0801225a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801225a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801225c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 801225e:	2300      	movs	r3, #0
 8012260:	225a      	movs	r2, #90	; 0x5a
 8012262:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8012264:	3a08      	subs	r2, #8
 8012266:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8012268:	3369      	adds	r3, #105	; 0x69
 801226a:	3a51      	subs	r2, #81	; 0x51
 801226c:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801226e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012270:	320f      	adds	r2, #15
 8012272:	4313      	orrs	r3, r2
 8012274:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8012276:	f7fa fc8f 	bl	800cb98 <HAL_UART_ErrorCallback>
}
 801227a:	bd10      	pop	{r4, pc}

0801227c <UART_SetConfig>:
{
 801227c:	b570      	push	{r4, r5, r6, lr}
 801227e:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012280:	6801      	ldr	r1, [r0, #0]
 8012282:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012284:	6883      	ldr	r3, [r0, #8]
 8012286:	6900      	ldr	r0, [r0, #16]
 8012288:	4303      	orrs	r3, r0
 801228a:	6960      	ldr	r0, [r4, #20]
 801228c:	4303      	orrs	r3, r0
 801228e:	69e0      	ldr	r0, [r4, #28]
 8012290:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012292:	487e      	ldr	r0, [pc, #504]	; (801248c <UART_SetConfig+0x210>)
 8012294:	4002      	ands	r2, r0
 8012296:	4313      	orrs	r3, r2
 8012298:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801229a:	6822      	ldr	r2, [r4, #0]
 801229c:	6853      	ldr	r3, [r2, #4]
 801229e:	497c      	ldr	r1, [pc, #496]	; (8012490 <UART_SetConfig+0x214>)
 80122a0:	400b      	ands	r3, r1
 80122a2:	68e1      	ldr	r1, [r4, #12]
 80122a4:	430b      	orrs	r3, r1
 80122a6:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80122a8:	6821      	ldr	r1, [r4, #0]
 80122aa:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80122ac:	69a3      	ldr	r3, [r4, #24]
 80122ae:	6a20      	ldr	r0, [r4, #32]
 80122b0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80122b2:	4878      	ldr	r0, [pc, #480]	; (8012494 <UART_SetConfig+0x218>)
 80122b4:	4002      	ands	r2, r0
 80122b6:	4313      	orrs	r3, r2
 80122b8:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80122ba:	6825      	ldr	r5, [r4, #0]
 80122bc:	4b76      	ldr	r3, [pc, #472]	; (8012498 <UART_SetConfig+0x21c>)
 80122be:	429d      	cmp	r5, r3
 80122c0:	d022      	beq.n	8012308 <UART_SetConfig+0x8c>
 80122c2:	4b76      	ldr	r3, [pc, #472]	; (801249c <UART_SetConfig+0x220>)
 80122c4:	429d      	cmp	r5, r3
 80122c6:	d034      	beq.n	8012332 <UART_SetConfig+0xb6>
 80122c8:	4b75      	ldr	r3, [pc, #468]	; (80124a0 <UART_SetConfig+0x224>)
 80122ca:	429d      	cmp	r5, r3
 80122cc:	d100      	bne.n	80122d0 <UART_SetConfig+0x54>
 80122ce:	e06b      	b.n	80123a8 <UART_SetConfig+0x12c>
 80122d0:	4b74      	ldr	r3, [pc, #464]	; (80124a4 <UART_SetConfig+0x228>)
 80122d2:	429d      	cmp	r5, r3
 80122d4:	d100      	bne.n	80122d8 <UART_SetConfig+0x5c>
 80122d6:	e08e      	b.n	80123f6 <UART_SetConfig+0x17a>
 80122d8:	4b73      	ldr	r3, [pc, #460]	; (80124a8 <UART_SetConfig+0x22c>)
 80122da:	429d      	cmp	r5, r3
 80122dc:	d100      	bne.n	80122e0 <UART_SetConfig+0x64>
 80122de:	e08a      	b.n	80123f6 <UART_SetConfig+0x17a>
 80122e0:	4b72      	ldr	r3, [pc, #456]	; (80124ac <UART_SetConfig+0x230>)
 80122e2:	429d      	cmp	r5, r3
 80122e4:	d100      	bne.n	80122e8 <UART_SetConfig+0x6c>
 80122e6:	e086      	b.n	80123f6 <UART_SetConfig+0x17a>
 80122e8:	4b71      	ldr	r3, [pc, #452]	; (80124b0 <UART_SetConfig+0x234>)
 80122ea:	429d      	cmp	r5, r3
 80122ec:	d100      	bne.n	80122f0 <UART_SetConfig+0x74>
 80122ee:	e082      	b.n	80123f6 <UART_SetConfig+0x17a>
 80122f0:	4b70      	ldr	r3, [pc, #448]	; (80124b4 <UART_SetConfig+0x238>)
 80122f2:	429d      	cmp	r5, r3
 80122f4:	d100      	bne.n	80122f8 <UART_SetConfig+0x7c>
 80122f6:	e07e      	b.n	80123f6 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80122f8:	2380      	movs	r3, #128	; 0x80
 80122fa:	021b      	lsls	r3, r3, #8
 80122fc:	69e2      	ldr	r2, [r4, #28]
 80122fe:	429a      	cmp	r2, r3
 8012300:	d100      	bne.n	8012304 <UART_SetConfig+0x88>
 8012302:	e072      	b.n	80123ea <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 8012304:	2001      	movs	r0, #1
 8012306:	e04e      	b.n	80123a6 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012308:	4b6b      	ldr	r3, [pc, #428]	; (80124b8 <UART_SetConfig+0x23c>)
 801230a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801230c:	2303      	movs	r3, #3
 801230e:	4013      	ands	r3, r2
 8012310:	2b01      	cmp	r3, #1
 8012312:	d100      	bne.n	8012316 <UART_SetConfig+0x9a>
 8012314:	e09a      	b.n	801244c <UART_SetConfig+0x1d0>
 8012316:	2b00      	cmp	r3, #0
 8012318:	d02f      	beq.n	801237a <UART_SetConfig+0xfe>
 801231a:	2b02      	cmp	r3, #2
 801231c:	d100      	bne.n	8012320 <UART_SetConfig+0xa4>
 801231e:	e0a5      	b.n	801246c <UART_SetConfig+0x1f0>
 8012320:	2b03      	cmp	r3, #3
 8012322:	d01a      	beq.n	801235a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012324:	2380      	movs	r3, #128	; 0x80
 8012326:	021b      	lsls	r3, r3, #8
 8012328:	69e2      	ldr	r2, [r4, #28]
 801232a:	429a      	cmp	r2, r3
 801232c:	d060      	beq.n	80123f0 <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 801232e:	2001      	movs	r0, #1
 8012330:	e039      	b.n	80123a6 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012332:	4b61      	ldr	r3, [pc, #388]	; (80124b8 <UART_SetConfig+0x23c>)
 8012334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012336:	22c0      	movs	r2, #192	; 0xc0
 8012338:	0292      	lsls	r2, r2, #10
 801233a:	4013      	ands	r3, r2
 801233c:	2280      	movs	r2, #128	; 0x80
 801233e:	0252      	lsls	r2, r2, #9
 8012340:	4293      	cmp	r3, r2
 8012342:	d100      	bne.n	8012346 <UART_SetConfig+0xca>
 8012344:	e082      	b.n	801244c <UART_SetConfig+0x1d0>
 8012346:	d916      	bls.n	8012376 <UART_SetConfig+0xfa>
 8012348:	2280      	movs	r2, #128	; 0x80
 801234a:	0292      	lsls	r2, r2, #10
 801234c:	4293      	cmp	r3, r2
 801234e:	d100      	bne.n	8012352 <UART_SetConfig+0xd6>
 8012350:	e08c      	b.n	801246c <UART_SetConfig+0x1f0>
 8012352:	22c0      	movs	r2, #192	; 0xc0
 8012354:	0292      	lsls	r2, r2, #10
 8012356:	4293      	cmp	r3, r2
 8012358:	d1e4      	bne.n	8012324 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801235a:	2380      	movs	r3, #128	; 0x80
 801235c:	021b      	lsls	r3, r3, #8
 801235e:	69e2      	ldr	r2, [r4, #28]
 8012360:	429a      	cmp	r2, r3
 8012362:	d038      	beq.n	80123d6 <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8012364:	6861      	ldr	r1, [r4, #4]
 8012366:	4855      	ldr	r0, [pc, #340]	; (80124bc <UART_SetConfig+0x240>)
 8012368:	f7ed fef2 	bl	8000150 <__udivsi3>
 801236c:	0400      	lsls	r0, r0, #16
 801236e:	0c00      	lsrs	r0, r0, #16
 8012370:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012372:	2000      	movs	r0, #0
        break;
 8012374:	e017      	b.n	80123a6 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012376:	2b00      	cmp	r3, #0
 8012378:	d1d4      	bne.n	8012324 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801237a:	2380      	movs	r3, #128	; 0x80
 801237c:	021b      	lsls	r3, r3, #8
 801237e:	69e2      	ldr	r2, [r4, #28]
 8012380:	429a      	cmp	r2, r3
 8012382:	d13d      	bne.n	8012400 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012384:	f7ff fa5c 	bl	8011840 <HAL_RCC_GetPCLK1Freq>
 8012388:	0040      	lsls	r0, r0, #1
 801238a:	6861      	ldr	r1, [r4, #4]
 801238c:	f7ed fee0 	bl	8000150 <__udivsi3>
 8012390:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012392:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 8012394:	220f      	movs	r2, #15
 8012396:	0019      	movs	r1, r3
 8012398:	4391      	bics	r1, r2
 801239a:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 801239c:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 801239e:	071b      	lsls	r3, r3, #28
 80123a0:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80123a2:	4313      	orrs	r3, r2
 80123a4:	60cb      	str	r3, [r1, #12]
}
 80123a6:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80123a8:	4b43      	ldr	r3, [pc, #268]	; (80124b8 <UART_SetConfig+0x23c>)
 80123aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123ac:	22c0      	movs	r2, #192	; 0xc0
 80123ae:	0312      	lsls	r2, r2, #12
 80123b0:	4013      	ands	r3, r2
 80123b2:	2280      	movs	r2, #128	; 0x80
 80123b4:	02d2      	lsls	r2, r2, #11
 80123b6:	4293      	cmp	r3, r2
 80123b8:	d02d      	beq.n	8012416 <UART_SetConfig+0x19a>
 80123ba:	d913      	bls.n	80123e4 <UART_SetConfig+0x168>
 80123bc:	2280      	movs	r2, #128	; 0x80
 80123be:	0312      	lsls	r2, r2, #12
 80123c0:	4293      	cmp	r3, r2
 80123c2:	d036      	beq.n	8012432 <UART_SetConfig+0x1b6>
 80123c4:	22c0      	movs	r2, #192	; 0xc0
 80123c6:	0312      	lsls	r2, r2, #12
 80123c8:	4293      	cmp	r3, r2
 80123ca:	d1ab      	bne.n	8012324 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80123cc:	2380      	movs	r3, #128	; 0x80
 80123ce:	021b      	lsls	r3, r3, #8
 80123d0:	69e2      	ldr	r2, [r4, #28]
 80123d2:	429a      	cmp	r2, r3
 80123d4:	d1c6      	bne.n	8012364 <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80123d6:	6861      	ldr	r1, [r4, #4]
 80123d8:	4839      	ldr	r0, [pc, #228]	; (80124c0 <UART_SetConfig+0x244>)
 80123da:	f7ed feb9 	bl	8000150 <__udivsi3>
 80123de:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80123e0:	2000      	movs	r0, #0
        break;
 80123e2:	e7d7      	b.n	8012394 <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d0c8      	beq.n	801237a <UART_SetConfig+0xfe>
 80123e8:	e79c      	b.n	8012324 <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 80123ea:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80123ec:	2300      	movs	r3, #0
 80123ee:	e7d1      	b.n	8012394 <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 80123f0:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80123f2:	2300      	movs	r3, #0
 80123f4:	e7ce      	b.n	8012394 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80123f6:	2380      	movs	r3, #128	; 0x80
 80123f8:	021b      	lsls	r3, r3, #8
 80123fa:	69e2      	ldr	r2, [r4, #28]
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d0c1      	beq.n	8012384 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012400:	f7ff fa1e 	bl	8011840 <HAL_RCC_GetPCLK1Freq>
 8012404:	6825      	ldr	r5, [r4, #0]
 8012406:	6861      	ldr	r1, [r4, #4]
 8012408:	f7ed fea2 	bl	8000150 <__udivsi3>
 801240c:	0400      	lsls	r0, r0, #16
 801240e:	0c00      	lsrs	r0, r0, #16
 8012410:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012412:	2000      	movs	r0, #0
  return ret;
 8012414:	e7c7      	b.n	80123a6 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012416:	2380      	movs	r3, #128	; 0x80
 8012418:	021b      	lsls	r3, r3, #8
 801241a:	69e2      	ldr	r2, [r4, #28]
 801241c:	429a      	cmp	r2, r3
 801241e:	d11a      	bne.n	8012456 <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012420:	f7ff f9aa 	bl	8011778 <HAL_RCC_GetSysClockFreq>
 8012424:	0040      	lsls	r0, r0, #1
 8012426:	6861      	ldr	r1, [r4, #4]
 8012428:	f7ed fe92 	bl	8000150 <__udivsi3>
 801242c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801242e:	2000      	movs	r0, #0
        break;
 8012430:	e7b0      	b.n	8012394 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012432:	2380      	movs	r3, #128	; 0x80
 8012434:	021b      	lsls	r3, r3, #8
 8012436:	69e2      	ldr	r2, [r4, #28]
 8012438:	429a      	cmp	r2, r3
 801243a:	d11c      	bne.n	8012476 <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 801243c:	6861      	ldr	r1, [r4, #4]
 801243e:	2080      	movs	r0, #128	; 0x80
 8012440:	0240      	lsls	r0, r0, #9
 8012442:	f7ed fe85 	bl	8000150 <__udivsi3>
 8012446:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012448:	2000      	movs	r0, #0
        break;
 801244a:	e7a3      	b.n	8012394 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801244c:	2380      	movs	r3, #128	; 0x80
 801244e:	021b      	lsls	r3, r3, #8
 8012450:	69e2      	ldr	r2, [r4, #28]
 8012452:	429a      	cmp	r2, r3
 8012454:	d0e4      	beq.n	8012420 <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012456:	f7ff f98f 	bl	8011778 <HAL_RCC_GetSysClockFreq>
 801245a:	6825      	ldr	r5, [r4, #0]
 801245c:	6861      	ldr	r1, [r4, #4]
 801245e:	f7ed fe77 	bl	8000150 <__udivsi3>
 8012462:	0400      	lsls	r0, r0, #16
 8012464:	0c00      	lsrs	r0, r0, #16
 8012466:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012468:	2000      	movs	r0, #0
        break;
 801246a:	e79c      	b.n	80123a6 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801246c:	2380      	movs	r3, #128	; 0x80
 801246e:	021b      	lsls	r3, r3, #8
 8012470:	69e2      	ldr	r2, [r4, #28]
 8012472:	429a      	cmp	r2, r3
 8012474:	d0e2      	beq.n	801243c <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8012476:	6861      	ldr	r1, [r4, #4]
 8012478:	2080      	movs	r0, #128	; 0x80
 801247a:	0200      	lsls	r0, r0, #8
 801247c:	f7ed fe68 	bl	8000150 <__udivsi3>
 8012480:	0400      	lsls	r0, r0, #16
 8012482:	0c00      	lsrs	r0, r0, #16
 8012484:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012486:	2000      	movs	r0, #0
        break;
 8012488:	e78d      	b.n	80123a6 <UART_SetConfig+0x12a>
 801248a:	46c0      	nop			; (mov r8, r8)
 801248c:	efff69f3 	.word	0xefff69f3
 8012490:	ffffcfff 	.word	0xffffcfff
 8012494:	fffff4ff 	.word	0xfffff4ff
 8012498:	40013800 	.word	0x40013800
 801249c:	40004400 	.word	0x40004400
 80124a0:	40004800 	.word	0x40004800
 80124a4:	40004c00 	.word	0x40004c00
 80124a8:	40005000 	.word	0x40005000
 80124ac:	40011400 	.word	0x40011400
 80124b0:	40011800 	.word	0x40011800
 80124b4:	40011c00 	.word	0x40011c00
 80124b8:	40021000 	.word	0x40021000
 80124bc:	007a1200 	.word	0x007a1200
 80124c0:	00f42400 	.word	0x00f42400

080124c4 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80124c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80124c6:	07db      	lsls	r3, r3, #31
 80124c8:	d506      	bpl.n	80124d8 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80124ca:	6802      	ldr	r2, [r0, #0]
 80124cc:	6853      	ldr	r3, [r2, #4]
 80124ce:	492c      	ldr	r1, [pc, #176]	; (8012580 <UART_AdvFeatureConfig+0xbc>)
 80124d0:	400b      	ands	r3, r1
 80124d2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80124d4:	430b      	orrs	r3, r1
 80124d6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80124d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80124da:	079b      	lsls	r3, r3, #30
 80124dc:	d506      	bpl.n	80124ec <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80124de:	6802      	ldr	r2, [r0, #0]
 80124e0:	6853      	ldr	r3, [r2, #4]
 80124e2:	4928      	ldr	r1, [pc, #160]	; (8012584 <UART_AdvFeatureConfig+0xc0>)
 80124e4:	400b      	ands	r3, r1
 80124e6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80124e8:	430b      	orrs	r3, r1
 80124ea:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80124ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80124ee:	075b      	lsls	r3, r3, #29
 80124f0:	d506      	bpl.n	8012500 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80124f2:	6802      	ldr	r2, [r0, #0]
 80124f4:	6853      	ldr	r3, [r2, #4]
 80124f6:	4924      	ldr	r1, [pc, #144]	; (8012588 <UART_AdvFeatureConfig+0xc4>)
 80124f8:	400b      	ands	r3, r1
 80124fa:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80124fc:	430b      	orrs	r3, r1
 80124fe:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012500:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012502:	071b      	lsls	r3, r3, #28
 8012504:	d506      	bpl.n	8012514 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012506:	6802      	ldr	r2, [r0, #0]
 8012508:	6853      	ldr	r3, [r2, #4]
 801250a:	4920      	ldr	r1, [pc, #128]	; (801258c <UART_AdvFeatureConfig+0xc8>)
 801250c:	400b      	ands	r3, r1
 801250e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8012510:	430b      	orrs	r3, r1
 8012512:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012514:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012516:	06db      	lsls	r3, r3, #27
 8012518:	d506      	bpl.n	8012528 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801251a:	6802      	ldr	r2, [r0, #0]
 801251c:	6893      	ldr	r3, [r2, #8]
 801251e:	491c      	ldr	r1, [pc, #112]	; (8012590 <UART_AdvFeatureConfig+0xcc>)
 8012520:	400b      	ands	r3, r1
 8012522:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8012524:	430b      	orrs	r3, r1
 8012526:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012528:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801252a:	069b      	lsls	r3, r3, #26
 801252c:	d506      	bpl.n	801253c <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801252e:	6802      	ldr	r2, [r0, #0]
 8012530:	6893      	ldr	r3, [r2, #8]
 8012532:	4918      	ldr	r1, [pc, #96]	; (8012594 <UART_AdvFeatureConfig+0xd0>)
 8012534:	400b      	ands	r3, r1
 8012536:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8012538:	430b      	orrs	r3, r1
 801253a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801253c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801253e:	065b      	lsls	r3, r3, #25
 8012540:	d50b      	bpl.n	801255a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012542:	6802      	ldr	r2, [r0, #0]
 8012544:	6853      	ldr	r3, [r2, #4]
 8012546:	4914      	ldr	r1, [pc, #80]	; (8012598 <UART_AdvFeatureConfig+0xd4>)
 8012548:	400b      	ands	r3, r1
 801254a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801254c:	430b      	orrs	r3, r1
 801254e:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012550:	2380      	movs	r3, #128	; 0x80
 8012552:	035b      	lsls	r3, r3, #13
 8012554:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012556:	429a      	cmp	r2, r3
 8012558:	d00a      	beq.n	8012570 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801255a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801255c:	061b      	lsls	r3, r3, #24
 801255e:	d506      	bpl.n	801256e <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012560:	6802      	ldr	r2, [r0, #0]
 8012562:	6853      	ldr	r3, [r2, #4]
 8012564:	490d      	ldr	r1, [pc, #52]	; (801259c <UART_AdvFeatureConfig+0xd8>)
 8012566:	400b      	ands	r3, r1
 8012568:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801256a:	430b      	orrs	r3, r1
 801256c:	6053      	str	r3, [r2, #4]
}
 801256e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012570:	6802      	ldr	r2, [r0, #0]
 8012572:	6853      	ldr	r3, [r2, #4]
 8012574:	490a      	ldr	r1, [pc, #40]	; (80125a0 <UART_AdvFeatureConfig+0xdc>)
 8012576:	400b      	ands	r3, r1
 8012578:	6c41      	ldr	r1, [r0, #68]	; 0x44
 801257a:	430b      	orrs	r3, r1
 801257c:	6053      	str	r3, [r2, #4]
 801257e:	e7ec      	b.n	801255a <UART_AdvFeatureConfig+0x96>
 8012580:	fffdffff 	.word	0xfffdffff
 8012584:	fffeffff 	.word	0xfffeffff
 8012588:	fffbffff 	.word	0xfffbffff
 801258c:	ffff7fff 	.word	0xffff7fff
 8012590:	ffffefff 	.word	0xffffefff
 8012594:	ffffdfff 	.word	0xffffdfff
 8012598:	ffefffff 	.word	0xffefffff
 801259c:	fff7ffff 	.word	0xfff7ffff
 80125a0:	ff9fffff 	.word	0xff9fffff

080125a4 <UART_WaitOnFlagUntilTimeout>:
{
 80125a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125a6:	46c6      	mov	lr, r8
 80125a8:	b500      	push	{lr}
 80125aa:	0006      	movs	r6, r0
 80125ac:	000c      	movs	r4, r1
 80125ae:	0017      	movs	r7, r2
 80125b0:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80125b2:	f7fd f85f 	bl	800f674 <HAL_GetTick>
 80125b6:	4680      	mov	r8, r0
  if(Status == RESET)
 80125b8:	2f00      	cmp	r7, #0
 80125ba:	d029      	beq.n	8012610 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80125bc:	6832      	ldr	r2, [r6, #0]
 80125be:	69d3      	ldr	r3, [r2, #28]
 80125c0:	4023      	ands	r3, r4
 80125c2:	42a3      	cmp	r3, r4
 80125c4:	d152      	bne.n	801266c <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 80125c6:	1c6b      	adds	r3, r5, #1
 80125c8:	d0f9      	beq.n	80125be <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80125ca:	2d00      	cmp	r5, #0
 80125cc:	d005      	beq.n	80125da <UART_WaitOnFlagUntilTimeout+0x36>
 80125ce:	f7fd f851 	bl	800f674 <HAL_GetTick>
 80125d2:	4643      	mov	r3, r8
 80125d4:	1ac0      	subs	r0, r0, r3
 80125d6:	42a8      	cmp	r0, r5
 80125d8:	d9f0      	bls.n	80125bc <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80125da:	6832      	ldr	r2, [r6, #0]
 80125dc:	6813      	ldr	r3, [r2, #0]
 80125de:	2180      	movs	r1, #128	; 0x80
 80125e0:	438b      	bics	r3, r1
 80125e2:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80125e4:	6832      	ldr	r2, [r6, #0]
 80125e6:	6813      	ldr	r3, [r2, #0]
 80125e8:	3960      	subs	r1, #96	; 0x60
 80125ea:	438b      	bics	r3, r1
 80125ec:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80125ee:	6832      	ldr	r2, [r6, #0]
 80125f0:	6813      	ldr	r3, [r2, #0]
 80125f2:	491f      	ldr	r1, [pc, #124]	; (8012670 <UART_WaitOnFlagUntilTimeout+0xcc>)
 80125f4:	400b      	ands	r3, r1
 80125f6:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80125f8:	6831      	ldr	r1, [r6, #0]
 80125fa:	688b      	ldr	r3, [r1, #8]
 80125fc:	2201      	movs	r2, #1
 80125fe:	4393      	bics	r3, r2
 8012600:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8012602:	2369      	movs	r3, #105	; 0x69
 8012604:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8012606:	3b01      	subs	r3, #1
 8012608:	2200      	movs	r2, #0
 801260a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 801260c:	2003      	movs	r0, #3
 801260e:	e02a      	b.n	8012666 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8012610:	6832      	ldr	r2, [r6, #0]
 8012612:	69d3      	ldr	r3, [r2, #28]
 8012614:	4023      	ands	r3, r4
 8012616:	42a3      	cmp	r3, r4
 8012618:	d024      	beq.n	8012664 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 801261a:	1c6b      	adds	r3, r5, #1
 801261c:	d0f9      	beq.n	8012612 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801261e:	2d00      	cmp	r5, #0
 8012620:	d005      	beq.n	801262e <UART_WaitOnFlagUntilTimeout+0x8a>
 8012622:	f7fd f827 	bl	800f674 <HAL_GetTick>
 8012626:	4643      	mov	r3, r8
 8012628:	1ac0      	subs	r0, r0, r3
 801262a:	42a8      	cmp	r0, r5
 801262c:	d9f0      	bls.n	8012610 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801262e:	6832      	ldr	r2, [r6, #0]
 8012630:	6813      	ldr	r3, [r2, #0]
 8012632:	2180      	movs	r1, #128	; 0x80
 8012634:	438b      	bics	r3, r1
 8012636:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012638:	6832      	ldr	r2, [r6, #0]
 801263a:	6813      	ldr	r3, [r2, #0]
 801263c:	3960      	subs	r1, #96	; 0x60
 801263e:	438b      	bics	r3, r1
 8012640:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012642:	6832      	ldr	r2, [r6, #0]
 8012644:	6813      	ldr	r3, [r2, #0]
 8012646:	490a      	ldr	r1, [pc, #40]	; (8012670 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012648:	400b      	ands	r3, r1
 801264a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801264c:	6831      	ldr	r1, [r6, #0]
 801264e:	688b      	ldr	r3, [r1, #8]
 8012650:	2201      	movs	r2, #1
 8012652:	4393      	bics	r3, r2
 8012654:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8012656:	2369      	movs	r3, #105	; 0x69
 8012658:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 801265a:	3b01      	subs	r3, #1
 801265c:	2200      	movs	r2, #0
 801265e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8012660:	2003      	movs	r0, #3
 8012662:	e000      	b.n	8012666 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8012664:	2000      	movs	r0, #0
}
 8012666:	bc04      	pop	{r2}
 8012668:	4690      	mov	r8, r2
 801266a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 801266c:	2000      	movs	r0, #0
 801266e:	e7fa      	b.n	8012666 <UART_WaitOnFlagUntilTimeout+0xc2>
 8012670:	fffffeff 	.word	0xfffffeff

08012674 <HAL_UART_Transmit>:
{
 8012674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012676:	b083      	sub	sp, #12
 8012678:	0004      	movs	r4, r0
 801267a:	000e      	movs	r6, r1
 801267c:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801267e:	2369      	movs	r3, #105	; 0x69
 8012680:	5cc3      	ldrb	r3, [r0, r3]
 8012682:	2b01      	cmp	r3, #1
 8012684:	d004      	beq.n	8012690 <HAL_UART_Transmit+0x1c>
 8012686:	2369      	movs	r3, #105	; 0x69
 8012688:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 801268a:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801268c:	2b22      	cmp	r3, #34	; 0x22
 801268e:	d153      	bne.n	8012738 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 8012690:	2e00      	cmp	r6, #0
 8012692:	d050      	beq.n	8012736 <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 8012694:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012696:	2a00      	cmp	r2, #0
 8012698:	d04e      	beq.n	8012738 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 801269a:	2368      	movs	r3, #104	; 0x68
 801269c:	5ce3      	ldrb	r3, [r4, r3]
 801269e:	2b01      	cmp	r3, #1
 80126a0:	d04c      	beq.n	801273c <HAL_UART_Transmit+0xc8>
 80126a2:	2368      	movs	r3, #104	; 0x68
 80126a4:	2101      	movs	r1, #1
 80126a6:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80126a8:	2300      	movs	r3, #0
 80126aa:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80126ac:	3369      	adds	r3, #105	; 0x69
 80126ae:	5ce3      	ldrb	r3, [r4, r3]
 80126b0:	2b22      	cmp	r3, #34	; 0x22
 80126b2:	d008      	beq.n	80126c6 <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80126b4:	2369      	movs	r3, #105	; 0x69
 80126b6:	2112      	movs	r1, #18
 80126b8:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80126ba:	2350      	movs	r3, #80	; 0x50
 80126bc:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 80126be:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80126c0:	2580      	movs	r5, #128	; 0x80
 80126c2:	016d      	lsls	r5, r5, #5
 80126c4:	e00a      	b.n	80126dc <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80126c6:	3347      	adds	r3, #71	; 0x47
 80126c8:	3131      	adds	r1, #49	; 0x31
 80126ca:	54e1      	strb	r1, [r4, r3]
 80126cc:	e7f5      	b.n	80126ba <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80126ce:	7833      	ldrb	r3, [r6, #0]
 80126d0:	6822      	ldr	r2, [r4, #0]
 80126d2:	8513      	strh	r3, [r2, #40]	; 0x28
 80126d4:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 80126d6:	5be2      	ldrh	r2, [r4, r7]
 80126d8:	2a00      	cmp	r2, #0
 80126da:	d016      	beq.n	801270a <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 80126dc:	3a01      	subs	r2, #1
 80126de:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80126e0:	9b01      	ldr	r3, [sp, #4]
 80126e2:	2200      	movs	r2, #0
 80126e4:	2180      	movs	r1, #128	; 0x80
 80126e6:	0020      	movs	r0, r4
 80126e8:	f7ff ff5c 	bl	80125a4 <UART_WaitOnFlagUntilTimeout>
 80126ec:	2800      	cmp	r0, #0
 80126ee:	d127      	bne.n	8012740 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80126f0:	68a3      	ldr	r3, [r4, #8]
 80126f2:	42ab      	cmp	r3, r5
 80126f4:	d1eb      	bne.n	80126ce <HAL_UART_Transmit+0x5a>
 80126f6:	6923      	ldr	r3, [r4, #16]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d1e8      	bne.n	80126ce <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80126fc:	8833      	ldrh	r3, [r6, #0]
 80126fe:	05db      	lsls	r3, r3, #23
 8012700:	0ddb      	lsrs	r3, r3, #23
 8012702:	6822      	ldr	r2, [r4, #0]
 8012704:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8012706:	3602      	adds	r6, #2
 8012708:	e7e5      	b.n	80126d6 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 801270a:	9b01      	ldr	r3, [sp, #4]
 801270c:	2140      	movs	r1, #64	; 0x40
 801270e:	0020      	movs	r0, r4
 8012710:	f7ff ff48 	bl	80125a4 <UART_WaitOnFlagUntilTimeout>
 8012714:	2800      	cmp	r0, #0
 8012716:	d115      	bne.n	8012744 <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012718:	2369      	movs	r3, #105	; 0x69
 801271a:	5ce3      	ldrb	r3, [r4, r3]
 801271c:	2b32      	cmp	r3, #50	; 0x32
 801271e:	d006      	beq.n	801272e <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8012720:	2369      	movs	r3, #105	; 0x69
 8012722:	2201      	movs	r2, #1
 8012724:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8012726:	2368      	movs	r3, #104	; 0x68
 8012728:	2200      	movs	r2, #0
 801272a:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 801272c:	e004      	b.n	8012738 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801272e:	3337      	adds	r3, #55	; 0x37
 8012730:	2222      	movs	r2, #34	; 0x22
 8012732:	54e2      	strb	r2, [r4, r3]
 8012734:	e7f7      	b.n	8012726 <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 8012736:	2001      	movs	r0, #1
}
 8012738:	b003      	add	sp, #12
 801273a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 801273c:	2002      	movs	r0, #2
 801273e:	e7fb      	b.n	8012738 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8012740:	2003      	movs	r0, #3
 8012742:	e7f9      	b.n	8012738 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8012744:	2003      	movs	r0, #3
 8012746:	e7f7      	b.n	8012738 <HAL_UART_Transmit+0xc4>

08012748 <UART_CheckIdleState>:
{
 8012748:	b510      	push	{r4, lr}
 801274a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801274c:	2300      	movs	r3, #0
 801274e:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8012750:	6803      	ldr	r3, [r0, #0]
 8012752:	4a18      	ldr	r2, [pc, #96]	; (80127b4 <UART_CheckIdleState+0x6c>)
 8012754:	4293      	cmp	r3, r2
 8012756:	d005      	beq.n	8012764 <UART_CheckIdleState+0x1c>
 8012758:	4a17      	ldr	r2, [pc, #92]	; (80127b8 <UART_CheckIdleState+0x70>)
 801275a:	4293      	cmp	r3, r2
 801275c:	d002      	beq.n	8012764 <UART_CheckIdleState+0x1c>
 801275e:	4a17      	ldr	r2, [pc, #92]	; (80127bc <UART_CheckIdleState+0x74>)
 8012760:	4293      	cmp	r3, r2
 8012762:	d106      	bne.n	8012772 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	071b      	lsls	r3, r3, #28
 8012768:	d40b      	bmi.n	8012782 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801276a:	6823      	ldr	r3, [r4, #0]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	075b      	lsls	r3, r3, #29
 8012770:	d413      	bmi.n	801279a <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8012772:	2369      	movs	r3, #105	; 0x69
 8012774:	2201      	movs	r2, #1
 8012776:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8012778:	3b01      	subs	r3, #1
 801277a:	2200      	movs	r2, #0
 801277c:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 801277e:	2000      	movs	r0, #0
}
 8012780:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012782:	23fa      	movs	r3, #250	; 0xfa
 8012784:	2180      	movs	r1, #128	; 0x80
 8012786:	009b      	lsls	r3, r3, #2
 8012788:	2200      	movs	r2, #0
 801278a:	0389      	lsls	r1, r1, #14
 801278c:	0020      	movs	r0, r4
 801278e:	f7ff ff09 	bl	80125a4 <UART_WaitOnFlagUntilTimeout>
 8012792:	2800      	cmp	r0, #0
 8012794:	d0e9      	beq.n	801276a <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8012796:	2003      	movs	r0, #3
 8012798:	e7f2      	b.n	8012780 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801279a:	23fa      	movs	r3, #250	; 0xfa
 801279c:	2180      	movs	r1, #128	; 0x80
 801279e:	009b      	lsls	r3, r3, #2
 80127a0:	2200      	movs	r2, #0
 80127a2:	03c9      	lsls	r1, r1, #15
 80127a4:	0020      	movs	r0, r4
 80127a6:	f7ff fefd 	bl	80125a4 <UART_WaitOnFlagUntilTimeout>
 80127aa:	2800      	cmp	r0, #0
 80127ac:	d0e1      	beq.n	8012772 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 80127ae:	2003      	movs	r0, #3
 80127b0:	e7e6      	b.n	8012780 <UART_CheckIdleState+0x38>
 80127b2:	46c0      	nop			; (mov r8, r8)
 80127b4:	40013800 	.word	0x40013800
 80127b8:	40004400 	.word	0x40004400
 80127bc:	40004800 	.word	0x40004800

080127c0 <HAL_UART_Init>:
{
 80127c0:	b510      	push	{r4, lr}
 80127c2:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80127c4:	d030      	beq.n	8012828 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 80127c6:	2369      	movs	r3, #105	; 0x69
 80127c8:	5cc3      	ldrb	r3, [r0, r3]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d022      	beq.n	8012814 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 80127ce:	2369      	movs	r3, #105	; 0x69
 80127d0:	2202      	movs	r2, #2
 80127d2:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80127d4:	6822      	ldr	r2, [r4, #0]
 80127d6:	6813      	ldr	r3, [r2, #0]
 80127d8:	2101      	movs	r1, #1
 80127da:	438b      	bics	r3, r1
 80127dc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80127de:	0020      	movs	r0, r4
 80127e0:	f7ff fd4c 	bl	801227c <UART_SetConfig>
 80127e4:	2801      	cmp	r0, #1
 80127e6:	d014      	beq.n	8012812 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80127e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d118      	bne.n	8012820 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80127ee:	6822      	ldr	r2, [r4, #0]
 80127f0:	6853      	ldr	r3, [r2, #4]
 80127f2:	490e      	ldr	r1, [pc, #56]	; (801282c <HAL_UART_Init+0x6c>)
 80127f4:	400b      	ands	r3, r1
 80127f6:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80127f8:	6822      	ldr	r2, [r4, #0]
 80127fa:	6893      	ldr	r3, [r2, #8]
 80127fc:	212a      	movs	r1, #42	; 0x2a
 80127fe:	438b      	bics	r3, r1
 8012800:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8012802:	6822      	ldr	r2, [r4, #0]
 8012804:	6813      	ldr	r3, [r2, #0]
 8012806:	3929      	subs	r1, #41	; 0x29
 8012808:	430b      	orrs	r3, r1
 801280a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 801280c:	0020      	movs	r0, r4
 801280e:	f7ff ff9b 	bl	8012748 <UART_CheckIdleState>
}
 8012812:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8012814:	3368      	adds	r3, #104	; 0x68
 8012816:	2200      	movs	r2, #0
 8012818:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 801281a:	f7fa fc7f 	bl	800d11c <HAL_UART_MspInit>
 801281e:	e7d6      	b.n	80127ce <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8012820:	0020      	movs	r0, r4
 8012822:	f7ff fe4f 	bl	80124c4 <UART_AdvFeatureConfig>
 8012826:	e7e2      	b.n	80127ee <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8012828:	2001      	movs	r0, #1
 801282a:	e7f2      	b.n	8012812 <HAL_UART_Init+0x52>
 801282c:	ffffb7ff 	.word	0xffffb7ff

08012830 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012830:	2369      	movs	r3, #105	; 0x69
 8012832:	5cc3      	ldrb	r3, [r0, r3]
 8012834:	2b12      	cmp	r3, #18
 8012836:	d004      	beq.n	8012842 <UART_Transmit_IT+0x12>
 8012838:	2369      	movs	r3, #105	; 0x69
 801283a:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 801283c:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801283e:	2a32      	cmp	r2, #50	; 0x32
 8012840:	d113      	bne.n	801286a <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8012842:	2352      	movs	r3, #82	; 0x52
 8012844:	5ac3      	ldrh	r3, [r0, r3]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d011      	beq.n	801286e <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801284a:	2380      	movs	r3, #128	; 0x80
 801284c:	015b      	lsls	r3, r3, #5
 801284e:	6882      	ldr	r2, [r0, #8]
 8012850:	429a      	cmp	r2, r3
 8012852:	d018      	beq.n	8012886 <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8012854:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012856:	1c5a      	adds	r2, r3, #1
 8012858:	64c2      	str	r2, [r0, #76]	; 0x4c
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	6802      	ldr	r2, [r0, #0]
 801285e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8012860:	2252      	movs	r2, #82	; 0x52
 8012862:	5a83      	ldrh	r3, [r0, r2]
 8012864:	3b01      	subs	r3, #1
 8012866:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8012868:	2300      	movs	r3, #0
  }
}
 801286a:	0018      	movs	r0, r3
 801286c:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801286e:	6802      	ldr	r2, [r0, #0]
 8012870:	6813      	ldr	r3, [r2, #0]
 8012872:	2180      	movs	r1, #128	; 0x80
 8012874:	438b      	bics	r3, r1
 8012876:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012878:	6802      	ldr	r2, [r0, #0]
 801287a:	6813      	ldr	r3, [r2, #0]
 801287c:	3940      	subs	r1, #64	; 0x40
 801287e:	430b      	orrs	r3, r1
 8012880:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8012882:	2300      	movs	r3, #0
 8012884:	e7f1      	b.n	801286a <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012886:	6903      	ldr	r3, [r0, #16]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d1e3      	bne.n	8012854 <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 801288c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801288e:	881b      	ldrh	r3, [r3, #0]
 8012890:	05db      	lsls	r3, r3, #23
 8012892:	0ddb      	lsrs	r3, r3, #23
 8012894:	6802      	ldr	r2, [r0, #0]
 8012896:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8012898:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801289a:	3302      	adds	r3, #2
 801289c:	64c3      	str	r3, [r0, #76]	; 0x4c
 801289e:	e7df      	b.n	8012860 <UART_Transmit_IT+0x30>

080128a0 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80128a0:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80128a2:	6802      	ldr	r2, [r0, #0]
 80128a4:	6813      	ldr	r3, [r2, #0]
 80128a6:	2140      	movs	r1, #64	; 0x40
 80128a8:	438b      	bics	r3, r1
 80128aa:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80128ac:	2369      	movs	r3, #105	; 0x69
 80128ae:	5cc3      	ldrb	r3, [r0, r3]
 80128b0:	2b32      	cmp	r3, #50	; 0x32
 80128b2:	d00a      	beq.n	80128ca <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80128b4:	6801      	ldr	r1, [r0, #0]
 80128b6:	688b      	ldr	r3, [r1, #8]
 80128b8:	2201      	movs	r2, #1
 80128ba:	4393      	bics	r3, r2
 80128bc:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 80128be:	2369      	movs	r3, #105	; 0x69
 80128c0:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 80128c2:	f7fa f951 	bl	800cb68 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80128c6:	2000      	movs	r0, #0
 80128c8:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 80128ca:	3337      	adds	r3, #55	; 0x37
 80128cc:	2222      	movs	r2, #34	; 0x22
 80128ce:	54c2      	strb	r2, [r0, r3]
 80128d0:	e7f7      	b.n	80128c2 <UART_EndTransmit_IT+0x22>
	...

080128d4 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80128d4:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80128d6:	2369      	movs	r3, #105	; 0x69
 80128d8:	5cc3      	ldrb	r3, [r0, r3]
 80128da:	2b22      	cmp	r3, #34	; 0x22
 80128dc:	d004      	beq.n	80128e8 <UART_Receive_IT+0x14>
 80128de:	2369      	movs	r3, #105	; 0x69
 80128e0:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80128e2:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80128e4:	2b32      	cmp	r3, #50	; 0x32
 80128e6:	d12d      	bne.n	8012944 <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 80128e8:	235c      	movs	r3, #92	; 0x5c
 80128ea:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80128ec:	2280      	movs	r2, #128	; 0x80
 80128ee:	0152      	lsls	r2, r2, #5
 80128f0:	6883      	ldr	r3, [r0, #8]
 80128f2:	4293      	cmp	r3, r2
 80128f4:	d028      	beq.n	8012948 <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80128f6:	6803      	ldr	r3, [r0, #0]
 80128f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80128fa:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80128fc:	1c54      	adds	r4, r2, #1
 80128fe:	6544      	str	r4, [r0, #84]	; 0x54
 8012900:	400b      	ands	r3, r1
 8012902:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8012904:	225a      	movs	r2, #90	; 0x5a
 8012906:	5a83      	ldrh	r3, [r0, r2]
 8012908:	3b01      	subs	r3, #1
 801290a:	b29b      	uxth	r3, r3
 801290c:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 801290e:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8012910:	2b00      	cmp	r3, #0
 8012912:	d117      	bne.n	8012944 <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012914:	6802      	ldr	r2, [r0, #0]
 8012916:	6813      	ldr	r3, [r2, #0]
 8012918:	2120      	movs	r1, #32
 801291a:	438b      	bics	r3, r1
 801291c:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801291e:	2369      	movs	r3, #105	; 0x69
 8012920:	5cc3      	ldrb	r3, [r0, r3]
 8012922:	2b32      	cmp	r3, #50	; 0x32
 8012924:	d01c      	beq.n	8012960 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012926:	6802      	ldr	r2, [r0, #0]
 8012928:	6813      	ldr	r3, [r2, #0]
 801292a:	490f      	ldr	r1, [pc, #60]	; (8012968 <UART_Receive_IT+0x94>)
 801292c:	400b      	ands	r3, r1
 801292e:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012930:	6801      	ldr	r1, [r0, #0]
 8012932:	688b      	ldr	r3, [r1, #8]
 8012934:	2201      	movs	r2, #1
 8012936:	4393      	bics	r3, r2
 8012938:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 801293a:	2369      	movs	r3, #105	; 0x69
 801293c:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 801293e:	f7fa f951 	bl	800cbe4 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8012942:	2200      	movs	r2, #0
  }
}
 8012944:	0010      	movs	r0, r2
 8012946:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012948:	6903      	ldr	r3, [r0, #16]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d1d3      	bne.n	80128f6 <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 801294e:	6803      	ldr	r3, [r0, #0]
 8012950:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012952:	400b      	ands	r3, r1
 8012954:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8012956:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8012958:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801295a:	3302      	adds	r3, #2
 801295c:	6543      	str	r3, [r0, #84]	; 0x54
 801295e:	e7d1      	b.n	8012904 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8012960:	3337      	adds	r3, #55	; 0x37
 8012962:	2212      	movs	r2, #18
 8012964:	54c2      	strb	r2, [r0, r3]
 8012966:	e7ea      	b.n	801293e <UART_Receive_IT+0x6a>
 8012968:	fffffeff 	.word	0xfffffeff

0801296c <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 801296c:	4770      	bx	lr

0801296e <HAL_UART_IRQHandler>:
{
 801296e:	b510      	push	{r4, lr}
 8012970:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8012972:	6803      	ldr	r3, [r0, #0]
 8012974:	69da      	ldr	r2, [r3, #28]
 8012976:	07d2      	lsls	r2, r2, #31
 8012978:	d509      	bpl.n	801298e <HAL_UART_IRQHandler+0x20>
 801297a:	681a      	ldr	r2, [r3, #0]
 801297c:	05d2      	lsls	r2, r2, #23
 801297e:	d506      	bpl.n	801298e <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8012980:	2201      	movs	r2, #1
 8012982:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012984:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012986:	4313      	orrs	r3, r2
 8012988:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801298a:	2369      	movs	r3, #105	; 0x69
 801298c:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 801298e:	6823      	ldr	r3, [r4, #0]
 8012990:	69da      	ldr	r2, [r3, #28]
 8012992:	0792      	lsls	r2, r2, #30
 8012994:	d50b      	bpl.n	80129ae <HAL_UART_IRQHandler+0x40>
 8012996:	689a      	ldr	r2, [r3, #8]
 8012998:	07d2      	lsls	r2, r2, #31
 801299a:	d508      	bpl.n	80129ae <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 801299c:	2202      	movs	r2, #2
 801299e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80129a0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80129a2:	3202      	adds	r2, #2
 80129a4:	4313      	orrs	r3, r2
 80129a6:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80129a8:	2369      	movs	r3, #105	; 0x69
 80129aa:	3a03      	subs	r2, #3
 80129ac:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80129ae:	6823      	ldr	r3, [r4, #0]
 80129b0:	69da      	ldr	r2, [r3, #28]
 80129b2:	0752      	lsls	r2, r2, #29
 80129b4:	d50b      	bpl.n	80129ce <HAL_UART_IRQHandler+0x60>
 80129b6:	689a      	ldr	r2, [r3, #8]
 80129b8:	07d2      	lsls	r2, r2, #31
 80129ba:	d508      	bpl.n	80129ce <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80129bc:	2204      	movs	r2, #4
 80129be:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80129c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80129c2:	3a02      	subs	r2, #2
 80129c4:	4313      	orrs	r3, r2
 80129c6:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80129c8:	2369      	movs	r3, #105	; 0x69
 80129ca:	3a01      	subs	r2, #1
 80129cc:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80129ce:	6823      	ldr	r3, [r4, #0]
 80129d0:	69da      	ldr	r2, [r3, #28]
 80129d2:	0712      	lsls	r2, r2, #28
 80129d4:	d50a      	bpl.n	80129ec <HAL_UART_IRQHandler+0x7e>
 80129d6:	689a      	ldr	r2, [r3, #8]
 80129d8:	07d2      	lsls	r2, r2, #31
 80129da:	d507      	bpl.n	80129ec <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80129dc:	2208      	movs	r2, #8
 80129de:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80129e0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80129e2:	4313      	orrs	r3, r2
 80129e4:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80129e6:	2369      	movs	r3, #105	; 0x69
 80129e8:	3a07      	subs	r2, #7
 80129ea:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80129ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d11c      	bne.n	8012a2c <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 80129f2:	6823      	ldr	r3, [r4, #0]
 80129f4:	69da      	ldr	r2, [r3, #28]
 80129f6:	02d2      	lsls	r2, r2, #11
 80129f8:	d502      	bpl.n	8012a00 <HAL_UART_IRQHandler+0x92>
 80129fa:	689a      	ldr	r2, [r3, #8]
 80129fc:	0252      	lsls	r2, r2, #9
 80129fe:	d419      	bmi.n	8012a34 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8012a00:	6823      	ldr	r3, [r4, #0]
 8012a02:	69da      	ldr	r2, [r3, #28]
 8012a04:	0692      	lsls	r2, r2, #26
 8012a06:	d502      	bpl.n	8012a0e <HAL_UART_IRQHandler+0xa0>
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	069b      	lsls	r3, r3, #26
 8012a0c:	d41c      	bmi.n	8012a48 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8012a0e:	6823      	ldr	r3, [r4, #0]
 8012a10:	69da      	ldr	r2, [r3, #28]
 8012a12:	0612      	lsls	r2, r2, #24
 8012a14:	d502      	bpl.n	8012a1c <HAL_UART_IRQHandler+0xae>
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	061b      	lsls	r3, r3, #24
 8012a1a:	d41e      	bmi.n	8012a5a <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8012a1c:	6823      	ldr	r3, [r4, #0]
 8012a1e:	69da      	ldr	r2, [r3, #28]
 8012a20:	0652      	lsls	r2, r2, #25
 8012a22:	d502      	bpl.n	8012a2a <HAL_UART_IRQHandler+0xbc>
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	065b      	lsls	r3, r3, #25
 8012a28:	d41b      	bmi.n	8012a62 <HAL_UART_IRQHandler+0xf4>
}
 8012a2a:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8012a2c:	0020      	movs	r0, r4
 8012a2e:	f7fa f8b3 	bl	800cb98 <HAL_UART_ErrorCallback>
 8012a32:	e7de      	b.n	80129f2 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8012a34:	2280      	movs	r2, #128	; 0x80
 8012a36:	0352      	lsls	r2, r2, #13
 8012a38:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8012a3a:	2369      	movs	r3, #105	; 0x69
 8012a3c:	2201      	movs	r2, #1
 8012a3e:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8012a40:	0020      	movs	r0, r4
 8012a42:	f7ff ff93 	bl	801296c <HAL_UARTEx_WakeupCallback>
 8012a46:	e7db      	b.n	8012a00 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8012a48:	0020      	movs	r0, r4
 8012a4a:	f7ff ff43 	bl	80128d4 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012a4e:	6822      	ldr	r2, [r4, #0]
 8012a50:	6993      	ldr	r3, [r2, #24]
 8012a52:	2108      	movs	r1, #8
 8012a54:	430b      	orrs	r3, r1
 8012a56:	6193      	str	r3, [r2, #24]
 8012a58:	e7d9      	b.n	8012a0e <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8012a5a:	0020      	movs	r0, r4
 8012a5c:	f7ff fee8 	bl	8012830 <UART_Transmit_IT>
 8012a60:	e7dc      	b.n	8012a1c <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8012a62:	0020      	movs	r0, r4
 8012a64:	f7ff ff1c 	bl	80128a0 <UART_EndTransmit_IT>
}
 8012a68:	e7df      	b.n	8012a2a <HAL_UART_IRQHandler+0xbc>

08012a6a <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8012a6a:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8012a6c:	f7f1 fdfe 	bl	800466c <Module_Init>
 8012a70:	e7fe      	b.n	8012a70 <main+0x6>

08012a72 <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8012a72:	e7fe      	b.n	8012a72 <UserTask>

08012a74 <atof>:
 8012a74:	b510      	push	{r4, lr}
 8012a76:	2100      	movs	r1, #0
 8012a78:	f001 fb3e 	bl	80140f8 <strtod>
 8012a7c:	bd10      	pop	{r4, pc}

08012a7e <atoi>:
 8012a7e:	b510      	push	{r4, lr}
 8012a80:	220a      	movs	r2, #10
 8012a82:	2100      	movs	r1, #0
 8012a84:	f001 fc04 	bl	8014290 <strtol>
 8012a88:	bd10      	pop	{r4, pc}

08012a8a <atol>:
 8012a8a:	b510      	push	{r4, lr}
 8012a8c:	220a      	movs	r2, #10
 8012a8e:	2100      	movs	r1, #0
 8012a90:	f001 fbfe 	bl	8014290 <strtol>
 8012a94:	bd10      	pop	{r4, pc}
	...

08012a98 <__libc_init_array>:
 8012a98:	b570      	push	{r4, r5, r6, lr}
 8012a9a:	2600      	movs	r6, #0
 8012a9c:	4d0c      	ldr	r5, [pc, #48]	; (8012ad0 <__libc_init_array+0x38>)
 8012a9e:	4c0d      	ldr	r4, [pc, #52]	; (8012ad4 <__libc_init_array+0x3c>)
 8012aa0:	1b64      	subs	r4, r4, r5
 8012aa2:	10a4      	asrs	r4, r4, #2
 8012aa4:	42a6      	cmp	r6, r4
 8012aa6:	d109      	bne.n	8012abc <__libc_init_array+0x24>
 8012aa8:	2600      	movs	r6, #0
 8012aaa:	f004 fe6d 	bl	8017788 <_init>
 8012aae:	4d0a      	ldr	r5, [pc, #40]	; (8012ad8 <__libc_init_array+0x40>)
 8012ab0:	4c0a      	ldr	r4, [pc, #40]	; (8012adc <__libc_init_array+0x44>)
 8012ab2:	1b64      	subs	r4, r4, r5
 8012ab4:	10a4      	asrs	r4, r4, #2
 8012ab6:	42a6      	cmp	r6, r4
 8012ab8:	d105      	bne.n	8012ac6 <__libc_init_array+0x2e>
 8012aba:	bd70      	pop	{r4, r5, r6, pc}
 8012abc:	00b3      	lsls	r3, r6, #2
 8012abe:	58eb      	ldr	r3, [r5, r3]
 8012ac0:	4798      	blx	r3
 8012ac2:	3601      	adds	r6, #1
 8012ac4:	e7ee      	b.n	8012aa4 <__libc_init_array+0xc>
 8012ac6:	00b3      	lsls	r3, r6, #2
 8012ac8:	58eb      	ldr	r3, [r5, r3]
 8012aca:	4798      	blx	r3
 8012acc:	3601      	adds	r6, #1
 8012ace:	e7f2      	b.n	8012ab6 <__libc_init_array+0x1e>
 8012ad0:	0801a904 	.word	0x0801a904
 8012ad4:	0801a904 	.word	0x0801a904
 8012ad8:	0801a904 	.word	0x0801a904
 8012adc:	0801a90c 	.word	0x0801a90c

08012ae0 <__locale_ctype_ptr_l>:
 8012ae0:	30ec      	adds	r0, #236	; 0xec
 8012ae2:	6800      	ldr	r0, [r0, #0]
 8012ae4:	4770      	bx	lr
	...

08012ae8 <__locale_ctype_ptr>:
 8012ae8:	4b04      	ldr	r3, [pc, #16]	; (8012afc <__locale_ctype_ptr+0x14>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d100      	bne.n	8012af4 <__locale_ctype_ptr+0xc>
 8012af2:	4b03      	ldr	r3, [pc, #12]	; (8012b00 <__locale_ctype_ptr+0x18>)
 8012af4:	33ec      	adds	r3, #236	; 0xec
 8012af6:	6818      	ldr	r0, [r3, #0]
 8012af8:	4770      	bx	lr
 8012afa:	46c0      	nop			; (mov r8, r8)
 8012afc:	200000a8 	.word	0x200000a8
 8012b00:	200004d8 	.word	0x200004d8

08012b04 <malloc>:
 8012b04:	b510      	push	{r4, lr}
 8012b06:	4b03      	ldr	r3, [pc, #12]	; (8012b14 <malloc+0x10>)
 8012b08:	0001      	movs	r1, r0
 8012b0a:	6818      	ldr	r0, [r3, #0]
 8012b0c:	f000 f80e 	bl	8012b2c <_malloc_r>
 8012b10:	bd10      	pop	{r4, pc}
 8012b12:	46c0      	nop			; (mov r8, r8)
 8012b14:	200000a8 	.word	0x200000a8

08012b18 <free>:
 8012b18:	b510      	push	{r4, lr}
 8012b1a:	4b03      	ldr	r3, [pc, #12]	; (8012b28 <free+0x10>)
 8012b1c:	0001      	movs	r1, r0
 8012b1e:	6818      	ldr	r0, [r3, #0]
 8012b20:	f003 fd10 	bl	8016544 <_free_r>
 8012b24:	bd10      	pop	{r4, pc}
 8012b26:	46c0      	nop			; (mov r8, r8)
 8012b28:	200000a8 	.word	0x200000a8

08012b2c <_malloc_r>:
 8012b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b2e:	000d      	movs	r5, r1
 8012b30:	b085      	sub	sp, #20
 8012b32:	350b      	adds	r5, #11
 8012b34:	9001      	str	r0, [sp, #4]
 8012b36:	2d16      	cmp	r5, #22
 8012b38:	d908      	bls.n	8012b4c <_malloc_r+0x20>
 8012b3a:	2307      	movs	r3, #7
 8012b3c:	439d      	bics	r5, r3
 8012b3e:	d506      	bpl.n	8012b4e <_malloc_r+0x22>
 8012b40:	230c      	movs	r3, #12
 8012b42:	9a01      	ldr	r2, [sp, #4]
 8012b44:	6013      	str	r3, [r2, #0]
 8012b46:	2000      	movs	r0, #0
 8012b48:	b005      	add	sp, #20
 8012b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b4c:	2510      	movs	r5, #16
 8012b4e:	428d      	cmp	r5, r1
 8012b50:	d3f6      	bcc.n	8012b40 <_malloc_r+0x14>
 8012b52:	9801      	ldr	r0, [sp, #4]
 8012b54:	f000 fa34 	bl	8012fc0 <__malloc_lock>
 8012b58:	23f8      	movs	r3, #248	; 0xf8
 8012b5a:	33ff      	adds	r3, #255	; 0xff
 8012b5c:	4ac4      	ldr	r2, [pc, #784]	; (8012e70 <_malloc_r+0x344>)
 8012b5e:	429d      	cmp	r5, r3
 8012b60:	d820      	bhi.n	8012ba4 <_malloc_r+0x78>
 8012b62:	0029      	movs	r1, r5
 8012b64:	3108      	adds	r1, #8
 8012b66:	1851      	adds	r1, r2, r1
 8012b68:	0008      	movs	r0, r1
 8012b6a:	684c      	ldr	r4, [r1, #4]
 8012b6c:	3808      	subs	r0, #8
 8012b6e:	08eb      	lsrs	r3, r5, #3
 8012b70:	4284      	cmp	r4, r0
 8012b72:	d104      	bne.n	8012b7e <_malloc_r+0x52>
 8012b74:	68cc      	ldr	r4, [r1, #12]
 8012b76:	3302      	adds	r3, #2
 8012b78:	469c      	mov	ip, r3
 8012b7a:	42a1      	cmp	r1, r4
 8012b7c:	d02a      	beq.n	8012bd4 <_malloc_r+0xa8>
 8012b7e:	2303      	movs	r3, #3
 8012b80:	6862      	ldr	r2, [r4, #4]
 8012b82:	68a1      	ldr	r1, [r4, #8]
 8012b84:	439a      	bics	r2, r3
 8012b86:	0013      	movs	r3, r2
 8012b88:	68e2      	ldr	r2, [r4, #12]
 8012b8a:	18e3      	adds	r3, r4, r3
 8012b8c:	60ca      	str	r2, [r1, #12]
 8012b8e:	6091      	str	r1, [r2, #8]
 8012b90:	2201      	movs	r2, #1
 8012b92:	6859      	ldr	r1, [r3, #4]
 8012b94:	430a      	orrs	r2, r1
 8012b96:	605a      	str	r2, [r3, #4]
 8012b98:	9801      	ldr	r0, [sp, #4]
 8012b9a:	f000 fa19 	bl	8012fd0 <__malloc_unlock>
 8012b9e:	0020      	movs	r0, r4
 8012ba0:	3008      	adds	r0, #8
 8012ba2:	e7d1      	b.n	8012b48 <_malloc_r+0x1c>
 8012ba4:	0a69      	lsrs	r1, r5, #9
 8012ba6:	233f      	movs	r3, #63	; 0x3f
 8012ba8:	2900      	cmp	r1, #0
 8012baa:	d003      	beq.n	8012bb4 <_malloc_r+0x88>
 8012bac:	2904      	cmp	r1, #4
 8012bae:	d828      	bhi.n	8012c02 <_malloc_r+0xd6>
 8012bb0:	09ab      	lsrs	r3, r5, #6
 8012bb2:	3338      	adds	r3, #56	; 0x38
 8012bb4:	2103      	movs	r1, #3
 8012bb6:	468c      	mov	ip, r1
 8012bb8:	00d8      	lsls	r0, r3, #3
 8012bba:	1880      	adds	r0, r0, r2
 8012bbc:	68c4      	ldr	r4, [r0, #12]
 8012bbe:	4284      	cmp	r4, r0
 8012bc0:	d006      	beq.n	8012bd0 <_malloc_r+0xa4>
 8012bc2:	4666      	mov	r6, ip
 8012bc4:	6861      	ldr	r1, [r4, #4]
 8012bc6:	43b1      	bics	r1, r6
 8012bc8:	1b4f      	subs	r7, r1, r5
 8012bca:	2f0f      	cmp	r7, #15
 8012bcc:	dd31      	ble.n	8012c32 <_malloc_r+0x106>
 8012bce:	3b01      	subs	r3, #1
 8012bd0:	3301      	adds	r3, #1
 8012bd2:	469c      	mov	ip, r3
 8012bd4:	6914      	ldr	r4, [r2, #16]
 8012bd6:	49a7      	ldr	r1, [pc, #668]	; (8012e74 <_malloc_r+0x348>)
 8012bd8:	428c      	cmp	r4, r1
 8012bda:	d055      	beq.n	8012c88 <_malloc_r+0x15c>
 8012bdc:	2303      	movs	r3, #3
 8012bde:	6860      	ldr	r0, [r4, #4]
 8012be0:	4398      	bics	r0, r3
 8012be2:	0003      	movs	r3, r0
 8012be4:	1b46      	subs	r6, r0, r5
 8012be6:	2e0f      	cmp	r6, #15
 8012be8:	dd31      	ble.n	8012c4e <_malloc_r+0x122>
 8012bea:	2701      	movs	r7, #1
 8012bec:	1960      	adds	r0, r4, r5
 8012bee:	433d      	orrs	r5, r7
 8012bf0:	4337      	orrs	r7, r6
 8012bf2:	6065      	str	r5, [r4, #4]
 8012bf4:	6150      	str	r0, [r2, #20]
 8012bf6:	6110      	str	r0, [r2, #16]
 8012bf8:	60c1      	str	r1, [r0, #12]
 8012bfa:	6081      	str	r1, [r0, #8]
 8012bfc:	6047      	str	r7, [r0, #4]
 8012bfe:	50e6      	str	r6, [r4, r3]
 8012c00:	e7ca      	b.n	8012b98 <_malloc_r+0x6c>
 8012c02:	2914      	cmp	r1, #20
 8012c04:	d802      	bhi.n	8012c0c <_malloc_r+0xe0>
 8012c06:	000b      	movs	r3, r1
 8012c08:	335b      	adds	r3, #91	; 0x5b
 8012c0a:	e7d3      	b.n	8012bb4 <_malloc_r+0x88>
 8012c0c:	2954      	cmp	r1, #84	; 0x54
 8012c0e:	d802      	bhi.n	8012c16 <_malloc_r+0xea>
 8012c10:	0b2b      	lsrs	r3, r5, #12
 8012c12:	336e      	adds	r3, #110	; 0x6e
 8012c14:	e7ce      	b.n	8012bb4 <_malloc_r+0x88>
 8012c16:	23aa      	movs	r3, #170	; 0xaa
 8012c18:	005b      	lsls	r3, r3, #1
 8012c1a:	4299      	cmp	r1, r3
 8012c1c:	d802      	bhi.n	8012c24 <_malloc_r+0xf8>
 8012c1e:	0beb      	lsrs	r3, r5, #15
 8012c20:	3377      	adds	r3, #119	; 0x77
 8012c22:	e7c7      	b.n	8012bb4 <_malloc_r+0x88>
 8012c24:	4894      	ldr	r0, [pc, #592]	; (8012e78 <_malloc_r+0x34c>)
 8012c26:	237e      	movs	r3, #126	; 0x7e
 8012c28:	4281      	cmp	r1, r0
 8012c2a:	d8c3      	bhi.n	8012bb4 <_malloc_r+0x88>
 8012c2c:	0cab      	lsrs	r3, r5, #18
 8012c2e:	337c      	adds	r3, #124	; 0x7c
 8012c30:	e7c0      	b.n	8012bb4 <_malloc_r+0x88>
 8012c32:	68e6      	ldr	r6, [r4, #12]
 8012c34:	2f00      	cmp	r7, #0
 8012c36:	db08      	blt.n	8012c4a <_malloc_r+0x11e>
 8012c38:	68a3      	ldr	r3, [r4, #8]
 8012c3a:	1861      	adds	r1, r4, r1
 8012c3c:	60de      	str	r6, [r3, #12]
 8012c3e:	60b3      	str	r3, [r6, #8]
 8012c40:	2301      	movs	r3, #1
 8012c42:	684a      	ldr	r2, [r1, #4]
 8012c44:	4313      	orrs	r3, r2
 8012c46:	604b      	str	r3, [r1, #4]
 8012c48:	e7a6      	b.n	8012b98 <_malloc_r+0x6c>
 8012c4a:	0034      	movs	r4, r6
 8012c4c:	e7b7      	b.n	8012bbe <_malloc_r+0x92>
 8012c4e:	6151      	str	r1, [r2, #20]
 8012c50:	6111      	str	r1, [r2, #16]
 8012c52:	2e00      	cmp	r6, #0
 8012c54:	db05      	blt.n	8012c62 <_malloc_r+0x136>
 8012c56:	2101      	movs	r1, #1
 8012c58:	1823      	adds	r3, r4, r0
 8012c5a:	685a      	ldr	r2, [r3, #4]
 8012c5c:	4311      	orrs	r1, r2
 8012c5e:	6059      	str	r1, [r3, #4]
 8012c60:	e79a      	b.n	8012b98 <_malloc_r+0x6c>
 8012c62:	4986      	ldr	r1, [pc, #536]	; (8012e7c <_malloc_r+0x350>)
 8012c64:	6857      	ldr	r7, [r2, #4]
 8012c66:	4288      	cmp	r0, r1
 8012c68:	d900      	bls.n	8012c6c <_malloc_r+0x140>
 8012c6a:	e090      	b.n	8012d8e <_malloc_r+0x262>
 8012c6c:	08c3      	lsrs	r3, r0, #3
 8012c6e:	39ff      	subs	r1, #255	; 0xff
 8012c70:	1098      	asrs	r0, r3, #2
 8012c72:	39ff      	subs	r1, #255	; 0xff
 8012c74:	4081      	lsls	r1, r0
 8012c76:	00db      	lsls	r3, r3, #3
 8012c78:	4339      	orrs	r1, r7
 8012c7a:	6051      	str	r1, [r2, #4]
 8012c7c:	189a      	adds	r2, r3, r2
 8012c7e:	6893      	ldr	r3, [r2, #8]
 8012c80:	60e2      	str	r2, [r4, #12]
 8012c82:	60a3      	str	r3, [r4, #8]
 8012c84:	6094      	str	r4, [r2, #8]
 8012c86:	60dc      	str	r4, [r3, #12]
 8012c88:	4663      	mov	r3, ip
 8012c8a:	2201      	movs	r2, #1
 8012c8c:	4978      	ldr	r1, [pc, #480]	; (8012e70 <_malloc_r+0x344>)
 8012c8e:	109b      	asrs	r3, r3, #2
 8012c90:	6848      	ldr	r0, [r1, #4]
 8012c92:	409a      	lsls	r2, r3
 8012c94:	4290      	cmp	r0, r2
 8012c96:	d32d      	bcc.n	8012cf4 <_malloc_r+0x1c8>
 8012c98:	4202      	tst	r2, r0
 8012c9a:	d109      	bne.n	8012cb0 <_malloc_r+0x184>
 8012c9c:	2303      	movs	r3, #3
 8012c9e:	4664      	mov	r4, ip
 8012ca0:	439c      	bics	r4, r3
 8012ca2:	0023      	movs	r3, r4
 8012ca4:	3304      	adds	r3, #4
 8012ca6:	469c      	mov	ip, r3
 8012ca8:	0052      	lsls	r2, r2, #1
 8012caa:	4202      	tst	r2, r0
 8012cac:	d100      	bne.n	8012cb0 <_malloc_r+0x184>
 8012cae:	e0a4      	b.n	8012dfa <_malloc_r+0x2ce>
 8012cb0:	4663      	mov	r3, ip
 8012cb2:	00db      	lsls	r3, r3, #3
 8012cb4:	18cb      	adds	r3, r1, r3
 8012cb6:	9303      	str	r3, [sp, #12]
 8012cb8:	001f      	movs	r7, r3
 8012cba:	4663      	mov	r3, ip
 8012cbc:	9302      	str	r3, [sp, #8]
 8012cbe:	68fc      	ldr	r4, [r7, #12]
 8012cc0:	42bc      	cmp	r4, r7
 8012cc2:	d000      	beq.n	8012cc6 <_malloc_r+0x19a>
 8012cc4:	e09c      	b.n	8012e00 <_malloc_r+0x2d4>
 8012cc6:	2003      	movs	r0, #3
 8012cc8:	9b02      	ldr	r3, [sp, #8]
 8012cca:	3708      	adds	r7, #8
 8012ccc:	3301      	adds	r3, #1
 8012cce:	9302      	str	r3, [sp, #8]
 8012cd0:	4203      	tst	r3, r0
 8012cd2:	d1f4      	bne.n	8012cbe <_malloc_r+0x192>
 8012cd4:	4663      	mov	r3, ip
 8012cd6:	2003      	movs	r0, #3
 8012cd8:	4203      	tst	r3, r0
 8012cda:	d000      	beq.n	8012cde <_malloc_r+0x1b2>
 8012cdc:	e0b3      	b.n	8012e46 <_malloc_r+0x31a>
 8012cde:	684b      	ldr	r3, [r1, #4]
 8012ce0:	4393      	bics	r3, r2
 8012ce2:	604b      	str	r3, [r1, #4]
 8012ce4:	4b62      	ldr	r3, [pc, #392]	; (8012e70 <_malloc_r+0x344>)
 8012ce6:	0052      	lsls	r2, r2, #1
 8012ce8:	685b      	ldr	r3, [r3, #4]
 8012cea:	4293      	cmp	r3, r2
 8012cec:	d302      	bcc.n	8012cf4 <_malloc_r+0x1c8>
 8012cee:	2a00      	cmp	r2, #0
 8012cf0:	d000      	beq.n	8012cf4 <_malloc_r+0x1c8>
 8012cf2:	e0b9      	b.n	8012e68 <_malloc_r+0x33c>
 8012cf4:	2303      	movs	r3, #3
 8012cf6:	688f      	ldr	r7, [r1, #8]
 8012cf8:	687a      	ldr	r2, [r7, #4]
 8012cfa:	439a      	bics	r2, r3
 8012cfc:	9202      	str	r2, [sp, #8]
 8012cfe:	42aa      	cmp	r2, r5
 8012d00:	d303      	bcc.n	8012d0a <_malloc_r+0x1de>
 8012d02:	1b52      	subs	r2, r2, r5
 8012d04:	2a0f      	cmp	r2, #15
 8012d06:	dd00      	ble.n	8012d0a <_malloc_r+0x1de>
 8012d08:	e116      	b.n	8012f38 <_malloc_r+0x40c>
 8012d0a:	4b5d      	ldr	r3, [pc, #372]	; (8012e80 <_malloc_r+0x354>)
 8012d0c:	2008      	movs	r0, #8
 8012d0e:	681e      	ldr	r6, [r3, #0]
 8012d10:	f002 fd26 	bl	8015760 <sysconf>
 8012d14:	4b5b      	ldr	r3, [pc, #364]	; (8012e84 <_malloc_r+0x358>)
 8012d16:	3610      	adds	r6, #16
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	1976      	adds	r6, r6, r5
 8012d1c:	9003      	str	r0, [sp, #12]
 8012d1e:	3301      	adds	r3, #1
 8012d20:	d003      	beq.n	8012d2a <_malloc_r+0x1fe>
 8012d22:	3e01      	subs	r6, #1
 8012d24:	1836      	adds	r6, r6, r0
 8012d26:	4243      	negs	r3, r0
 8012d28:	401e      	ands	r6, r3
 8012d2a:	0031      	movs	r1, r6
 8012d2c:	9801      	ldr	r0, [sp, #4]
 8012d2e:	f000 fb27 	bl	8013380 <_sbrk_r>
 8012d32:	0004      	movs	r4, r0
 8012d34:	1c43      	adds	r3, r0, #1
 8012d36:	d100      	bne.n	8012d3a <_malloc_r+0x20e>
 8012d38:	e0d6      	b.n	8012ee8 <_malloc_r+0x3bc>
 8012d3a:	9b02      	ldr	r3, [sp, #8]
 8012d3c:	18fb      	adds	r3, r7, r3
 8012d3e:	4283      	cmp	r3, r0
 8012d40:	d903      	bls.n	8012d4a <_malloc_r+0x21e>
 8012d42:	4a4b      	ldr	r2, [pc, #300]	; (8012e70 <_malloc_r+0x344>)
 8012d44:	4297      	cmp	r7, r2
 8012d46:	d000      	beq.n	8012d4a <_malloc_r+0x21e>
 8012d48:	e0ce      	b.n	8012ee8 <_malloc_r+0x3bc>
 8012d4a:	494f      	ldr	r1, [pc, #316]	; (8012e88 <_malloc_r+0x35c>)
 8012d4c:	680a      	ldr	r2, [r1, #0]
 8012d4e:	18b2      	adds	r2, r6, r2
 8012d50:	600a      	str	r2, [r1, #0]
 8012d52:	9903      	ldr	r1, [sp, #12]
 8012d54:	4694      	mov	ip, r2
 8012d56:	1e48      	subs	r0, r1, #1
 8012d58:	42a3      	cmp	r3, r4
 8012d5a:	d000      	beq.n	8012d5e <_malloc_r+0x232>
 8012d5c:	e09a      	b.n	8012e94 <_malloc_r+0x368>
 8012d5e:	4203      	tst	r3, r0
 8012d60:	d000      	beq.n	8012d64 <_malloc_r+0x238>
 8012d62:	e097      	b.n	8012e94 <_malloc_r+0x368>
 8012d64:	9a02      	ldr	r2, [sp, #8]
 8012d66:	4b42      	ldr	r3, [pc, #264]	; (8012e70 <_malloc_r+0x344>)
 8012d68:	1992      	adds	r2, r2, r6
 8012d6a:	2601      	movs	r6, #1
 8012d6c:	689b      	ldr	r3, [r3, #8]
 8012d6e:	4316      	orrs	r6, r2
 8012d70:	605e      	str	r6, [r3, #4]
 8012d72:	4b45      	ldr	r3, [pc, #276]	; (8012e88 <_malloc_r+0x35c>)
 8012d74:	4a45      	ldr	r2, [pc, #276]	; (8012e8c <_malloc_r+0x360>)
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	6811      	ldr	r1, [r2, #0]
 8012d7a:	428b      	cmp	r3, r1
 8012d7c:	d900      	bls.n	8012d80 <_malloc_r+0x254>
 8012d7e:	6013      	str	r3, [r2, #0]
 8012d80:	4a43      	ldr	r2, [pc, #268]	; (8012e90 <_malloc_r+0x364>)
 8012d82:	6811      	ldr	r1, [r2, #0]
 8012d84:	428b      	cmp	r3, r1
 8012d86:	d800      	bhi.n	8012d8a <_malloc_r+0x25e>
 8012d88:	e0ae      	b.n	8012ee8 <_malloc_r+0x3bc>
 8012d8a:	6013      	str	r3, [r2, #0]
 8012d8c:	e0ac      	b.n	8012ee8 <_malloc_r+0x3bc>
 8012d8e:	0a40      	lsrs	r0, r0, #9
 8012d90:	2804      	cmp	r0, #4
 8012d92:	d810      	bhi.n	8012db6 <_malloc_r+0x28a>
 8012d94:	0999      	lsrs	r1, r3, #6
 8012d96:	3138      	adds	r1, #56	; 0x38
 8012d98:	00ce      	lsls	r6, r1, #3
 8012d9a:	18b6      	adds	r6, r6, r2
 8012d9c:	68b0      	ldr	r0, [r6, #8]
 8012d9e:	4286      	cmp	r6, r0
 8012da0:	d124      	bne.n	8012dec <_malloc_r+0x2c0>
 8012da2:	2301      	movs	r3, #1
 8012da4:	1089      	asrs	r1, r1, #2
 8012da6:	408b      	lsls	r3, r1
 8012da8:	433b      	orrs	r3, r7
 8012daa:	6053      	str	r3, [r2, #4]
 8012dac:	60e6      	str	r6, [r4, #12]
 8012dae:	60a0      	str	r0, [r4, #8]
 8012db0:	60b4      	str	r4, [r6, #8]
 8012db2:	60c4      	str	r4, [r0, #12]
 8012db4:	e768      	b.n	8012c88 <_malloc_r+0x15c>
 8012db6:	2814      	cmp	r0, #20
 8012db8:	d802      	bhi.n	8012dc0 <_malloc_r+0x294>
 8012dba:	0001      	movs	r1, r0
 8012dbc:	315b      	adds	r1, #91	; 0x5b
 8012dbe:	e7eb      	b.n	8012d98 <_malloc_r+0x26c>
 8012dc0:	2854      	cmp	r0, #84	; 0x54
 8012dc2:	d802      	bhi.n	8012dca <_malloc_r+0x29e>
 8012dc4:	0b19      	lsrs	r1, r3, #12
 8012dc6:	316e      	adds	r1, #110	; 0x6e
 8012dc8:	e7e6      	b.n	8012d98 <_malloc_r+0x26c>
 8012dca:	21aa      	movs	r1, #170	; 0xaa
 8012dcc:	0049      	lsls	r1, r1, #1
 8012dce:	4288      	cmp	r0, r1
 8012dd0:	d802      	bhi.n	8012dd8 <_malloc_r+0x2ac>
 8012dd2:	0bd9      	lsrs	r1, r3, #15
 8012dd4:	3177      	adds	r1, #119	; 0x77
 8012dd6:	e7df      	b.n	8012d98 <_malloc_r+0x26c>
 8012dd8:	4e27      	ldr	r6, [pc, #156]	; (8012e78 <_malloc_r+0x34c>)
 8012dda:	217e      	movs	r1, #126	; 0x7e
 8012ddc:	42b0      	cmp	r0, r6
 8012dde:	d8db      	bhi.n	8012d98 <_malloc_r+0x26c>
 8012de0:	0c99      	lsrs	r1, r3, #18
 8012de2:	317c      	adds	r1, #124	; 0x7c
 8012de4:	e7d8      	b.n	8012d98 <_malloc_r+0x26c>
 8012de6:	6880      	ldr	r0, [r0, #8]
 8012de8:	4286      	cmp	r6, r0
 8012dea:	d004      	beq.n	8012df6 <_malloc_r+0x2ca>
 8012dec:	2103      	movs	r1, #3
 8012dee:	6842      	ldr	r2, [r0, #4]
 8012df0:	438a      	bics	r2, r1
 8012df2:	429a      	cmp	r2, r3
 8012df4:	d8f7      	bhi.n	8012de6 <_malloc_r+0x2ba>
 8012df6:	68c6      	ldr	r6, [r0, #12]
 8012df8:	e7d8      	b.n	8012dac <_malloc_r+0x280>
 8012dfa:	2304      	movs	r3, #4
 8012dfc:	449c      	add	ip, r3
 8012dfe:	e753      	b.n	8012ca8 <_malloc_r+0x17c>
 8012e00:	2003      	movs	r0, #3
 8012e02:	6863      	ldr	r3, [r4, #4]
 8012e04:	4383      	bics	r3, r0
 8012e06:	1b5e      	subs	r6, r3, r5
 8012e08:	68e0      	ldr	r0, [r4, #12]
 8012e0a:	2e0f      	cmp	r6, #15
 8012e0c:	dd0e      	ble.n	8012e2c <_malloc_r+0x300>
 8012e0e:	2701      	movs	r7, #1
 8012e10:	1962      	adds	r2, r4, r5
 8012e12:	433d      	orrs	r5, r7
 8012e14:	6065      	str	r5, [r4, #4]
 8012e16:	68a5      	ldr	r5, [r4, #8]
 8012e18:	4337      	orrs	r7, r6
 8012e1a:	60e8      	str	r0, [r5, #12]
 8012e1c:	6085      	str	r5, [r0, #8]
 8012e1e:	614a      	str	r2, [r1, #20]
 8012e20:	610a      	str	r2, [r1, #16]
 8012e22:	4914      	ldr	r1, [pc, #80]	; (8012e74 <_malloc_r+0x348>)
 8012e24:	6057      	str	r7, [r2, #4]
 8012e26:	60d1      	str	r1, [r2, #12]
 8012e28:	6091      	str	r1, [r2, #8]
 8012e2a:	e6e8      	b.n	8012bfe <_malloc_r+0xd2>
 8012e2c:	2e00      	cmp	r6, #0
 8012e2e:	db08      	blt.n	8012e42 <_malloc_r+0x316>
 8012e30:	2201      	movs	r2, #1
 8012e32:	18e3      	adds	r3, r4, r3
 8012e34:	6859      	ldr	r1, [r3, #4]
 8012e36:	430a      	orrs	r2, r1
 8012e38:	605a      	str	r2, [r3, #4]
 8012e3a:	68a3      	ldr	r3, [r4, #8]
 8012e3c:	60d8      	str	r0, [r3, #12]
 8012e3e:	6083      	str	r3, [r0, #8]
 8012e40:	e6aa      	b.n	8012b98 <_malloc_r+0x6c>
 8012e42:	0004      	movs	r4, r0
 8012e44:	e73c      	b.n	8012cc0 <_malloc_r+0x194>
 8012e46:	2301      	movs	r3, #1
 8012e48:	425b      	negs	r3, r3
 8012e4a:	449c      	add	ip, r3
 8012e4c:	9b03      	ldr	r3, [sp, #12]
 8012e4e:	6818      	ldr	r0, [r3, #0]
 8012e50:	3b08      	subs	r3, #8
 8012e52:	9003      	str	r0, [sp, #12]
 8012e54:	4298      	cmp	r0, r3
 8012e56:	d100      	bne.n	8012e5a <_malloc_r+0x32e>
 8012e58:	e73c      	b.n	8012cd4 <_malloc_r+0x1a8>
 8012e5a:	e743      	b.n	8012ce4 <_malloc_r+0x1b8>
 8012e5c:	2004      	movs	r0, #4
 8012e5e:	0052      	lsls	r2, r2, #1
 8012e60:	4484      	add	ip, r0
 8012e62:	421a      	tst	r2, r3
 8012e64:	d0fa      	beq.n	8012e5c <_malloc_r+0x330>
 8012e66:	e723      	b.n	8012cb0 <_malloc_r+0x184>
 8012e68:	9802      	ldr	r0, [sp, #8]
 8012e6a:	4684      	mov	ip, r0
 8012e6c:	e7f9      	b.n	8012e62 <_malloc_r+0x336>
 8012e6e:	46c0      	nop			; (mov r8, r8)
 8012e70:	20000644 	.word	0x20000644
 8012e74:	2000064c 	.word	0x2000064c
 8012e78:	00000554 	.word	0x00000554
 8012e7c:	000001ff 	.word	0x000001ff
 8012e80:	20006940 	.word	0x20006940
 8012e84:	20000a4c 	.word	0x20000a4c
 8012e88:	20006910 	.word	0x20006910
 8012e8c:	20006938 	.word	0x20006938
 8012e90:	2000693c 	.word	0x2000693c
 8012e94:	492e      	ldr	r1, [pc, #184]	; (8012f50 <_malloc_r+0x424>)
 8012e96:	680a      	ldr	r2, [r1, #0]
 8012e98:	3201      	adds	r2, #1
 8012e9a:	d133      	bne.n	8012f04 <_malloc_r+0x3d8>
 8012e9c:	600c      	str	r4, [r1, #0]
 8012e9e:	2307      	movs	r3, #7
 8012ea0:	4023      	ands	r3, r4
 8012ea2:	d002      	beq.n	8012eaa <_malloc_r+0x37e>
 8012ea4:	2208      	movs	r2, #8
 8012ea6:	1ad3      	subs	r3, r2, r3
 8012ea8:	18e4      	adds	r4, r4, r3
 8012eaa:	9a03      	ldr	r2, [sp, #12]
 8012eac:	19a6      	adds	r6, r4, r6
 8012eae:	18d3      	adds	r3, r2, r3
 8012eb0:	4006      	ands	r6, r0
 8012eb2:	1b9e      	subs	r6, r3, r6
 8012eb4:	0031      	movs	r1, r6
 8012eb6:	9801      	ldr	r0, [sp, #4]
 8012eb8:	f000 fa62 	bl	8013380 <_sbrk_r>
 8012ebc:	1c43      	adds	r3, r0, #1
 8012ebe:	d101      	bne.n	8012ec4 <_malloc_r+0x398>
 8012ec0:	0020      	movs	r0, r4
 8012ec2:	2600      	movs	r6, #0
 8012ec4:	4a23      	ldr	r2, [pc, #140]	; (8012f54 <_malloc_r+0x428>)
 8012ec6:	1b00      	subs	r0, r0, r4
 8012ec8:	6813      	ldr	r3, [r2, #0]
 8012eca:	199b      	adds	r3, r3, r6
 8012ecc:	6013      	str	r3, [r2, #0]
 8012ece:	2301      	movs	r3, #1
 8012ed0:	4a21      	ldr	r2, [pc, #132]	; (8012f58 <_malloc_r+0x42c>)
 8012ed2:	1986      	adds	r6, r0, r6
 8012ed4:	431e      	orrs	r6, r3
 8012ed6:	6094      	str	r4, [r2, #8]
 8012ed8:	6066      	str	r6, [r4, #4]
 8012eda:	4297      	cmp	r7, r2
 8012edc:	d100      	bne.n	8012ee0 <_malloc_r+0x3b4>
 8012ede:	e748      	b.n	8012d72 <_malloc_r+0x246>
 8012ee0:	9a02      	ldr	r2, [sp, #8]
 8012ee2:	2a0f      	cmp	r2, #15
 8012ee4:	d813      	bhi.n	8012f0e <_malloc_r+0x3e2>
 8012ee6:	6063      	str	r3, [r4, #4]
 8012ee8:	2203      	movs	r2, #3
 8012eea:	4b1b      	ldr	r3, [pc, #108]	; (8012f58 <_malloc_r+0x42c>)
 8012eec:	689b      	ldr	r3, [r3, #8]
 8012eee:	685b      	ldr	r3, [r3, #4]
 8012ef0:	4393      	bics	r3, r2
 8012ef2:	1b5a      	subs	r2, r3, r5
 8012ef4:	42ab      	cmp	r3, r5
 8012ef6:	d301      	bcc.n	8012efc <_malloc_r+0x3d0>
 8012ef8:	2a0f      	cmp	r2, #15
 8012efa:	dc1d      	bgt.n	8012f38 <_malloc_r+0x40c>
 8012efc:	9801      	ldr	r0, [sp, #4]
 8012efe:	f000 f867 	bl	8012fd0 <__malloc_unlock>
 8012f02:	e620      	b.n	8012b46 <_malloc_r+0x1a>
 8012f04:	1ae3      	subs	r3, r4, r3
 8012f06:	4a13      	ldr	r2, [pc, #76]	; (8012f54 <_malloc_r+0x428>)
 8012f08:	4463      	add	r3, ip
 8012f0a:	6013      	str	r3, [r2, #0]
 8012f0c:	e7c7      	b.n	8012e9e <_malloc_r+0x372>
 8012f0e:	2207      	movs	r2, #7
 8012f10:	9e02      	ldr	r6, [sp, #8]
 8012f12:	3e0c      	subs	r6, #12
 8012f14:	4396      	bics	r6, r2
 8012f16:	687a      	ldr	r2, [r7, #4]
 8012f18:	4013      	ands	r3, r2
 8012f1a:	2205      	movs	r2, #5
 8012f1c:	4333      	orrs	r3, r6
 8012f1e:	607b      	str	r3, [r7, #4]
 8012f20:	19bb      	adds	r3, r7, r6
 8012f22:	605a      	str	r2, [r3, #4]
 8012f24:	609a      	str	r2, [r3, #8]
 8012f26:	2e0f      	cmp	r6, #15
 8012f28:	d800      	bhi.n	8012f2c <_malloc_r+0x400>
 8012f2a:	e722      	b.n	8012d72 <_malloc_r+0x246>
 8012f2c:	0039      	movs	r1, r7
 8012f2e:	9801      	ldr	r0, [sp, #4]
 8012f30:	3108      	adds	r1, #8
 8012f32:	f003 fb07 	bl	8016544 <_free_r>
 8012f36:	e71c      	b.n	8012d72 <_malloc_r+0x246>
 8012f38:	2301      	movs	r3, #1
 8012f3a:	0018      	movs	r0, r3
 8012f3c:	4906      	ldr	r1, [pc, #24]	; (8012f58 <_malloc_r+0x42c>)
 8012f3e:	4328      	orrs	r0, r5
 8012f40:	688c      	ldr	r4, [r1, #8]
 8012f42:	4313      	orrs	r3, r2
 8012f44:	1965      	adds	r5, r4, r5
 8012f46:	6060      	str	r0, [r4, #4]
 8012f48:	608d      	str	r5, [r1, #8]
 8012f4a:	606b      	str	r3, [r5, #4]
 8012f4c:	e624      	b.n	8012b98 <_malloc_r+0x6c>
 8012f4e:	46c0      	nop			; (mov r8, r8)
 8012f50:	20000a4c 	.word	0x20000a4c
 8012f54:	20006910 	.word	0x20006910
 8012f58:	20000644 	.word	0x20000644

08012f5c <__ascii_mbtowc>:
 8012f5c:	b082      	sub	sp, #8
 8012f5e:	2900      	cmp	r1, #0
 8012f60:	d100      	bne.n	8012f64 <__ascii_mbtowc+0x8>
 8012f62:	a901      	add	r1, sp, #4
 8012f64:	1e10      	subs	r0, r2, #0
 8012f66:	d006      	beq.n	8012f76 <__ascii_mbtowc+0x1a>
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d006      	beq.n	8012f7a <__ascii_mbtowc+0x1e>
 8012f6c:	7813      	ldrb	r3, [r2, #0]
 8012f6e:	600b      	str	r3, [r1, #0]
 8012f70:	7810      	ldrb	r0, [r2, #0]
 8012f72:	1e43      	subs	r3, r0, #1
 8012f74:	4198      	sbcs	r0, r3
 8012f76:	b002      	add	sp, #8
 8012f78:	4770      	bx	lr
 8012f7a:	2002      	movs	r0, #2
 8012f7c:	4240      	negs	r0, r0
 8012f7e:	e7fa      	b.n	8012f76 <__ascii_mbtowc+0x1a>

08012f80 <memcmp>:
 8012f80:	b530      	push	{r4, r5, lr}
 8012f82:	2400      	movs	r4, #0
 8012f84:	42a2      	cmp	r2, r4
 8012f86:	d101      	bne.n	8012f8c <memcmp+0xc>
 8012f88:	2000      	movs	r0, #0
 8012f8a:	e005      	b.n	8012f98 <memcmp+0x18>
 8012f8c:	5d03      	ldrb	r3, [r0, r4]
 8012f8e:	1c65      	adds	r5, r4, #1
 8012f90:	5d0c      	ldrb	r4, [r1, r4]
 8012f92:	42a3      	cmp	r3, r4
 8012f94:	d001      	beq.n	8012f9a <memcmp+0x1a>
 8012f96:	1b18      	subs	r0, r3, r4
 8012f98:	bd30      	pop	{r4, r5, pc}
 8012f9a:	002c      	movs	r4, r5
 8012f9c:	e7f2      	b.n	8012f84 <memcmp+0x4>

08012f9e <memcpy>:
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	b510      	push	{r4, lr}
 8012fa2:	429a      	cmp	r2, r3
 8012fa4:	d100      	bne.n	8012fa8 <memcpy+0xa>
 8012fa6:	bd10      	pop	{r4, pc}
 8012fa8:	5ccc      	ldrb	r4, [r1, r3]
 8012faa:	54c4      	strb	r4, [r0, r3]
 8012fac:	3301      	adds	r3, #1
 8012fae:	e7f8      	b.n	8012fa2 <memcpy+0x4>

08012fb0 <memset>:
 8012fb0:	0003      	movs	r3, r0
 8012fb2:	1812      	adds	r2, r2, r0
 8012fb4:	4293      	cmp	r3, r2
 8012fb6:	d100      	bne.n	8012fba <memset+0xa>
 8012fb8:	4770      	bx	lr
 8012fba:	7019      	strb	r1, [r3, #0]
 8012fbc:	3301      	adds	r3, #1
 8012fbe:	e7f9      	b.n	8012fb4 <memset+0x4>

08012fc0 <__malloc_lock>:
 8012fc0:	b510      	push	{r4, lr}
 8012fc2:	4802      	ldr	r0, [pc, #8]	; (8012fcc <__malloc_lock+0xc>)
 8012fc4:	f003 feb2 	bl	8016d2c <__retarget_lock_acquire_recursive>
 8012fc8:	bd10      	pop	{r4, pc}
 8012fca:	46c0      	nop			; (mov r8, r8)
 8012fcc:	20006edc 	.word	0x20006edc

08012fd0 <__malloc_unlock>:
 8012fd0:	b510      	push	{r4, lr}
 8012fd2:	4802      	ldr	r0, [pc, #8]	; (8012fdc <__malloc_unlock+0xc>)
 8012fd4:	f003 feab 	bl	8016d2e <__retarget_lock_release_recursive>
 8012fd8:	bd10      	pop	{r4, pc}
 8012fda:	46c0      	nop			; (mov r8, r8)
 8012fdc:	20006edc 	.word	0x20006edc

08012fe0 <rand>:
 8012fe0:	4b09      	ldr	r3, [pc, #36]	; (8013008 <rand+0x28>)
 8012fe2:	b510      	push	{r4, lr}
 8012fe4:	681c      	ldr	r4, [r3, #0]
 8012fe6:	4a09      	ldr	r2, [pc, #36]	; (801300c <rand+0x2c>)
 8012fe8:	34a8      	adds	r4, #168	; 0xa8
 8012fea:	6820      	ldr	r0, [r4, #0]
 8012fec:	6861      	ldr	r1, [r4, #4]
 8012fee:	4b08      	ldr	r3, [pc, #32]	; (8013010 <rand+0x30>)
 8012ff0:	f7ed fabc 	bl	800056c <__aeabi_lmul>
 8012ff4:	2201      	movs	r2, #1
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	1880      	adds	r0, r0, r2
 8012ffa:	4159      	adcs	r1, r3
 8012ffc:	6020      	str	r0, [r4, #0]
 8012ffe:	6061      	str	r1, [r4, #4]
 8013000:	0048      	lsls	r0, r1, #1
 8013002:	0840      	lsrs	r0, r0, #1
 8013004:	bd10      	pop	{r4, pc}
 8013006:	46c0      	nop			; (mov r8, r8)
 8013008:	200000a8 	.word	0x200000a8
 801300c:	4c957f2d 	.word	0x4c957f2d
 8013010:	5851f42d 	.word	0x5851f42d

08013014 <realloc>:
 8013014:	b510      	push	{r4, lr}
 8013016:	4b03      	ldr	r3, [pc, #12]	; (8013024 <realloc+0x10>)
 8013018:	000a      	movs	r2, r1
 801301a:	0001      	movs	r1, r0
 801301c:	6818      	ldr	r0, [r3, #0]
 801301e:	f000 f803 	bl	8013028 <_realloc_r>
 8013022:	bd10      	pop	{r4, pc}
 8013024:	200000a8 	.word	0x200000a8

08013028 <_realloc_r>:
 8013028:	b5f0      	push	{r4, r5, r6, r7, lr}
 801302a:	b087      	sub	sp, #28
 801302c:	9003      	str	r0, [sp, #12]
 801302e:	1e0c      	subs	r4, r1, #0
 8013030:	9205      	str	r2, [sp, #20]
 8013032:	d106      	bne.n	8013042 <_realloc_r+0x1a>
 8013034:	0011      	movs	r1, r2
 8013036:	f7ff fd79 	bl	8012b2c <_malloc_r>
 801303a:	0007      	movs	r7, r0
 801303c:	0038      	movs	r0, r7
 801303e:	b007      	add	sp, #28
 8013040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013042:	9803      	ldr	r0, [sp, #12]
 8013044:	f7ff ffbc 	bl	8012fc0 <__malloc_lock>
 8013048:	0023      	movs	r3, r4
 801304a:	3b08      	subs	r3, #8
 801304c:	685f      	ldr	r7, [r3, #4]
 801304e:	9302      	str	r3, [sp, #8]
 8013050:	003a      	movs	r2, r7
 8013052:	2303      	movs	r3, #3
 8013054:	9e05      	ldr	r6, [sp, #20]
 8013056:	439a      	bics	r2, r3
 8013058:	360b      	adds	r6, #11
 801305a:	9204      	str	r2, [sp, #16]
 801305c:	2e16      	cmp	r6, #22
 801305e:	d908      	bls.n	8013072 <_realloc_r+0x4a>
 8013060:	3304      	adds	r3, #4
 8013062:	439e      	bics	r6, r3
 8013064:	9601      	str	r6, [sp, #4]
 8013066:	d506      	bpl.n	8013076 <_realloc_r+0x4e>
 8013068:	230c      	movs	r3, #12
 801306a:	9a03      	ldr	r2, [sp, #12]
 801306c:	2700      	movs	r7, #0
 801306e:	6013      	str	r3, [r2, #0]
 8013070:	e7e4      	b.n	801303c <_realloc_r+0x14>
 8013072:	2310      	movs	r3, #16
 8013074:	9301      	str	r3, [sp, #4]
 8013076:	9b01      	ldr	r3, [sp, #4]
 8013078:	9a05      	ldr	r2, [sp, #20]
 801307a:	4293      	cmp	r3, r2
 801307c:	d3f4      	bcc.n	8013068 <_realloc_r+0x40>
 801307e:	9b01      	ldr	r3, [sp, #4]
 8013080:	9a04      	ldr	r2, [sp, #16]
 8013082:	4293      	cmp	r3, r2
 8013084:	dc00      	bgt.n	8013088 <_realloc_r+0x60>
 8013086:	e16f      	b.n	8013368 <_realloc_r+0x340>
 8013088:	9b02      	ldr	r3, [sp, #8]
 801308a:	48bc      	ldr	r0, [pc, #752]	; (801337c <_realloc_r+0x354>)
 801308c:	189b      	adds	r3, r3, r2
 801308e:	6882      	ldr	r2, [r0, #8]
 8013090:	4694      	mov	ip, r2
 8013092:	685a      	ldr	r2, [r3, #4]
 8013094:	459c      	cmp	ip, r3
 8013096:	d006      	beq.n	80130a6 <_realloc_r+0x7e>
 8013098:	2501      	movs	r5, #1
 801309a:	0011      	movs	r1, r2
 801309c:	43a9      	bics	r1, r5
 801309e:	1859      	adds	r1, r3, r1
 80130a0:	6849      	ldr	r1, [r1, #4]
 80130a2:	4229      	tst	r1, r5
 80130a4:	d146      	bne.n	8013134 <_realloc_r+0x10c>
 80130a6:	2103      	movs	r1, #3
 80130a8:	438a      	bics	r2, r1
 80130aa:	9904      	ldr	r1, [sp, #16]
 80130ac:	188e      	adds	r6, r1, r2
 80130ae:	9901      	ldr	r1, [sp, #4]
 80130b0:	459c      	cmp	ip, r3
 80130b2:	d117      	bne.n	80130e4 <_realloc_r+0xbc>
 80130b4:	3110      	adds	r1, #16
 80130b6:	42b1      	cmp	r1, r6
 80130b8:	dc3e      	bgt.n	8013138 <_realloc_r+0x110>
 80130ba:	9901      	ldr	r1, [sp, #4]
 80130bc:	9b02      	ldr	r3, [sp, #8]
 80130be:	468c      	mov	ip, r1
 80130c0:	4463      	add	r3, ip
 80130c2:	6083      	str	r3, [r0, #8]
 80130c4:	001a      	movs	r2, r3
 80130c6:	1a73      	subs	r3, r6, r1
 80130c8:	2601      	movs	r6, #1
 80130ca:	4333      	orrs	r3, r6
 80130cc:	6053      	str	r3, [r2, #4]
 80130ce:	0023      	movs	r3, r4
 80130d0:	3b08      	subs	r3, #8
 80130d2:	685a      	ldr	r2, [r3, #4]
 80130d4:	9803      	ldr	r0, [sp, #12]
 80130d6:	4016      	ands	r6, r2
 80130d8:	430e      	orrs	r6, r1
 80130da:	605e      	str	r6, [r3, #4]
 80130dc:	f7ff ff78 	bl	8012fd0 <__malloc_unlock>
 80130e0:	0027      	movs	r7, r4
 80130e2:	e7ab      	b.n	801303c <_realloc_r+0x14>
 80130e4:	42b1      	cmp	r1, r6
 80130e6:	dc27      	bgt.n	8013138 <_realloc_r+0x110>
 80130e8:	68da      	ldr	r2, [r3, #12]
 80130ea:	689b      	ldr	r3, [r3, #8]
 80130ec:	60da      	str	r2, [r3, #12]
 80130ee:	6093      	str	r3, [r2, #8]
 80130f0:	9b01      	ldr	r3, [sp, #4]
 80130f2:	9a02      	ldr	r2, [sp, #8]
 80130f4:	1af4      	subs	r4, r6, r3
 80130f6:	9b02      	ldr	r3, [sp, #8]
 80130f8:	1992      	adds	r2, r2, r6
 80130fa:	685b      	ldr	r3, [r3, #4]
 80130fc:	9304      	str	r3, [sp, #16]
 80130fe:	2301      	movs	r3, #1
 8013100:	9804      	ldr	r0, [sp, #16]
 8013102:	4018      	ands	r0, r3
 8013104:	2c0f      	cmp	r4, #15
 8013106:	d800      	bhi.n	801310a <_realloc_r+0xe2>
 8013108:	e130      	b.n	801336c <_realloc_r+0x344>
 801310a:	9d01      	ldr	r5, [sp, #4]
 801310c:	9902      	ldr	r1, [sp, #8]
 801310e:	4328      	orrs	r0, r5
 8013110:	1949      	adds	r1, r1, r5
 8013112:	9d02      	ldr	r5, [sp, #8]
 8013114:	431c      	orrs	r4, r3
 8013116:	6068      	str	r0, [r5, #4]
 8013118:	604c      	str	r4, [r1, #4]
 801311a:	6850      	ldr	r0, [r2, #4]
 801311c:	3108      	adds	r1, #8
 801311e:	4303      	orrs	r3, r0
 8013120:	6053      	str	r3, [r2, #4]
 8013122:	9803      	ldr	r0, [sp, #12]
 8013124:	f003 fa0e 	bl	8016544 <_free_r>
 8013128:	9803      	ldr	r0, [sp, #12]
 801312a:	f7ff ff51 	bl	8012fd0 <__malloc_unlock>
 801312e:	9f02      	ldr	r7, [sp, #8]
 8013130:	3708      	adds	r7, #8
 8013132:	e783      	b.n	801303c <_realloc_r+0x14>
 8013134:	2200      	movs	r2, #0
 8013136:	0013      	movs	r3, r2
 8013138:	07f9      	lsls	r1, r7, #31
 801313a:	d500      	bpl.n	801313e <_realloc_r+0x116>
 801313c:	e0c6      	b.n	80132cc <_realloc_r+0x2a4>
 801313e:	0021      	movs	r1, r4
 8013140:	3908      	subs	r1, #8
 8013142:	680d      	ldr	r5, [r1, #0]
 8013144:	9902      	ldr	r1, [sp, #8]
 8013146:	1b4d      	subs	r5, r1, r5
 8013148:	2103      	movs	r1, #3
 801314a:	686f      	ldr	r7, [r5, #4]
 801314c:	438f      	bics	r7, r1
 801314e:	9904      	ldr	r1, [sp, #16]
 8013150:	187f      	adds	r7, r7, r1
 8013152:	2b00      	cmp	r3, #0
 8013154:	d100      	bne.n	8013158 <_realloc_r+0x130>
 8013156:	e084      	b.n	8013262 <_realloc_r+0x23a>
 8013158:	19d6      	adds	r6, r2, r7
 801315a:	459c      	cmp	ip, r3
 801315c:	d148      	bne.n	80131f0 <_realloc_r+0x1c8>
 801315e:	9b01      	ldr	r3, [sp, #4]
 8013160:	3310      	adds	r3, #16
 8013162:	42b3      	cmp	r3, r6
 8013164:	dc7d      	bgt.n	8013262 <_realloc_r+0x23a>
 8013166:	68aa      	ldr	r2, [r5, #8]
 8013168:	68eb      	ldr	r3, [r5, #12]
 801316a:	002f      	movs	r7, r5
 801316c:	60d3      	str	r3, [r2, #12]
 801316e:	609a      	str	r2, [r3, #8]
 8013170:	000a      	movs	r2, r1
 8013172:	3a04      	subs	r2, #4
 8013174:	3708      	adds	r7, #8
 8013176:	2a24      	cmp	r2, #36	; 0x24
 8013178:	d835      	bhi.n	80131e6 <_realloc_r+0x1be>
 801317a:	003b      	movs	r3, r7
 801317c:	2a13      	cmp	r2, #19
 801317e:	d908      	bls.n	8013192 <_realloc_r+0x16a>
 8013180:	6823      	ldr	r3, [r4, #0]
 8013182:	60ab      	str	r3, [r5, #8]
 8013184:	6863      	ldr	r3, [r4, #4]
 8013186:	60eb      	str	r3, [r5, #12]
 8013188:	2a1b      	cmp	r2, #27
 801318a:	d81a      	bhi.n	80131c2 <_realloc_r+0x19a>
 801318c:	002b      	movs	r3, r5
 801318e:	3408      	adds	r4, #8
 8013190:	3310      	adds	r3, #16
 8013192:	6822      	ldr	r2, [r4, #0]
 8013194:	601a      	str	r2, [r3, #0]
 8013196:	6862      	ldr	r2, [r4, #4]
 8013198:	605a      	str	r2, [r3, #4]
 801319a:	68a2      	ldr	r2, [r4, #8]
 801319c:	609a      	str	r2, [r3, #8]
 801319e:	9b01      	ldr	r3, [sp, #4]
 80131a0:	18ea      	adds	r2, r5, r3
 80131a2:	4b76      	ldr	r3, [pc, #472]	; (801337c <_realloc_r+0x354>)
 80131a4:	609a      	str	r2, [r3, #8]
 80131a6:	9b01      	ldr	r3, [sp, #4]
 80131a8:	1af3      	subs	r3, r6, r3
 80131aa:	2601      	movs	r6, #1
 80131ac:	4333      	orrs	r3, r6
 80131ae:	6053      	str	r3, [r2, #4]
 80131b0:	686b      	ldr	r3, [r5, #4]
 80131b2:	401e      	ands	r6, r3
 80131b4:	9b01      	ldr	r3, [sp, #4]
 80131b6:	431e      	orrs	r6, r3
 80131b8:	606e      	str	r6, [r5, #4]
 80131ba:	9803      	ldr	r0, [sp, #12]
 80131bc:	f7ff ff08 	bl	8012fd0 <__malloc_unlock>
 80131c0:	e73c      	b.n	801303c <_realloc_r+0x14>
 80131c2:	68a3      	ldr	r3, [r4, #8]
 80131c4:	612b      	str	r3, [r5, #16]
 80131c6:	68e3      	ldr	r3, [r4, #12]
 80131c8:	616b      	str	r3, [r5, #20]
 80131ca:	2a24      	cmp	r2, #36	; 0x24
 80131cc:	d003      	beq.n	80131d6 <_realloc_r+0x1ae>
 80131ce:	002b      	movs	r3, r5
 80131d0:	3410      	adds	r4, #16
 80131d2:	3318      	adds	r3, #24
 80131d4:	e7dd      	b.n	8013192 <_realloc_r+0x16a>
 80131d6:	6923      	ldr	r3, [r4, #16]
 80131d8:	61ab      	str	r3, [r5, #24]
 80131da:	002b      	movs	r3, r5
 80131dc:	6962      	ldr	r2, [r4, #20]
 80131de:	3320      	adds	r3, #32
 80131e0:	61ea      	str	r2, [r5, #28]
 80131e2:	3418      	adds	r4, #24
 80131e4:	e7d5      	b.n	8013192 <_realloc_r+0x16a>
 80131e6:	0021      	movs	r1, r4
 80131e8:	0038      	movs	r0, r7
 80131ea:	f003 fdac 	bl	8016d46 <memmove>
 80131ee:	e7d6      	b.n	801319e <_realloc_r+0x176>
 80131f0:	9a01      	ldr	r2, [sp, #4]
 80131f2:	42b2      	cmp	r2, r6
 80131f4:	dc35      	bgt.n	8013262 <_realloc_r+0x23a>
 80131f6:	0028      	movs	r0, r5
 80131f8:	68da      	ldr	r2, [r3, #12]
 80131fa:	689b      	ldr	r3, [r3, #8]
 80131fc:	3008      	adds	r0, #8
 80131fe:	60da      	str	r2, [r3, #12]
 8013200:	6093      	str	r3, [r2, #8]
 8013202:	68aa      	ldr	r2, [r5, #8]
 8013204:	68eb      	ldr	r3, [r5, #12]
 8013206:	60d3      	str	r3, [r2, #12]
 8013208:	609a      	str	r2, [r3, #8]
 801320a:	9a04      	ldr	r2, [sp, #16]
 801320c:	3a04      	subs	r2, #4
 801320e:	2a24      	cmp	r2, #36	; 0x24
 8013210:	d823      	bhi.n	801325a <_realloc_r+0x232>
 8013212:	2a13      	cmp	r2, #19
 8013214:	d907      	bls.n	8013226 <_realloc_r+0x1fe>
 8013216:	6823      	ldr	r3, [r4, #0]
 8013218:	60ab      	str	r3, [r5, #8]
 801321a:	6863      	ldr	r3, [r4, #4]
 801321c:	60eb      	str	r3, [r5, #12]
 801321e:	2a1b      	cmp	r2, #27
 8013220:	d809      	bhi.n	8013236 <_realloc_r+0x20e>
 8013222:	3408      	adds	r4, #8
 8013224:	3008      	adds	r0, #8
 8013226:	6823      	ldr	r3, [r4, #0]
 8013228:	6003      	str	r3, [r0, #0]
 801322a:	6863      	ldr	r3, [r4, #4]
 801322c:	6043      	str	r3, [r0, #4]
 801322e:	68a3      	ldr	r3, [r4, #8]
 8013230:	6083      	str	r3, [r0, #8]
 8013232:	9502      	str	r5, [sp, #8]
 8013234:	e75c      	b.n	80130f0 <_realloc_r+0xc8>
 8013236:	68a3      	ldr	r3, [r4, #8]
 8013238:	612b      	str	r3, [r5, #16]
 801323a:	68e3      	ldr	r3, [r4, #12]
 801323c:	616b      	str	r3, [r5, #20]
 801323e:	2a24      	cmp	r2, #36	; 0x24
 8013240:	d003      	beq.n	801324a <_realloc_r+0x222>
 8013242:	0028      	movs	r0, r5
 8013244:	3410      	adds	r4, #16
 8013246:	3018      	adds	r0, #24
 8013248:	e7ed      	b.n	8013226 <_realloc_r+0x1fe>
 801324a:	0028      	movs	r0, r5
 801324c:	6923      	ldr	r3, [r4, #16]
 801324e:	3020      	adds	r0, #32
 8013250:	61ab      	str	r3, [r5, #24]
 8013252:	6963      	ldr	r3, [r4, #20]
 8013254:	3418      	adds	r4, #24
 8013256:	61eb      	str	r3, [r5, #28]
 8013258:	e7e5      	b.n	8013226 <_realloc_r+0x1fe>
 801325a:	0021      	movs	r1, r4
 801325c:	f003 fd73 	bl	8016d46 <memmove>
 8013260:	e7e7      	b.n	8013232 <_realloc_r+0x20a>
 8013262:	9b01      	ldr	r3, [sp, #4]
 8013264:	42bb      	cmp	r3, r7
 8013266:	dc31      	bgt.n	80132cc <_realloc_r+0x2a4>
 8013268:	0028      	movs	r0, r5
 801326a:	68aa      	ldr	r2, [r5, #8]
 801326c:	68eb      	ldr	r3, [r5, #12]
 801326e:	3008      	adds	r0, #8
 8013270:	60d3      	str	r3, [r2, #12]
 8013272:	609a      	str	r2, [r3, #8]
 8013274:	9a04      	ldr	r2, [sp, #16]
 8013276:	3a04      	subs	r2, #4
 8013278:	2a24      	cmp	r2, #36	; 0x24
 801327a:	d823      	bhi.n	80132c4 <_realloc_r+0x29c>
 801327c:	2a13      	cmp	r2, #19
 801327e:	d907      	bls.n	8013290 <_realloc_r+0x268>
 8013280:	6823      	ldr	r3, [r4, #0]
 8013282:	60ab      	str	r3, [r5, #8]
 8013284:	6863      	ldr	r3, [r4, #4]
 8013286:	60eb      	str	r3, [r5, #12]
 8013288:	2a1b      	cmp	r2, #27
 801328a:	d809      	bhi.n	80132a0 <_realloc_r+0x278>
 801328c:	3408      	adds	r4, #8
 801328e:	3008      	adds	r0, #8
 8013290:	6823      	ldr	r3, [r4, #0]
 8013292:	6003      	str	r3, [r0, #0]
 8013294:	6863      	ldr	r3, [r4, #4]
 8013296:	6043      	str	r3, [r0, #4]
 8013298:	68a3      	ldr	r3, [r4, #8]
 801329a:	6083      	str	r3, [r0, #8]
 801329c:	003e      	movs	r6, r7
 801329e:	e7c8      	b.n	8013232 <_realloc_r+0x20a>
 80132a0:	68a3      	ldr	r3, [r4, #8]
 80132a2:	612b      	str	r3, [r5, #16]
 80132a4:	68e3      	ldr	r3, [r4, #12]
 80132a6:	616b      	str	r3, [r5, #20]
 80132a8:	2a24      	cmp	r2, #36	; 0x24
 80132aa:	d003      	beq.n	80132b4 <_realloc_r+0x28c>
 80132ac:	0028      	movs	r0, r5
 80132ae:	3410      	adds	r4, #16
 80132b0:	3018      	adds	r0, #24
 80132b2:	e7ed      	b.n	8013290 <_realloc_r+0x268>
 80132b4:	0028      	movs	r0, r5
 80132b6:	6923      	ldr	r3, [r4, #16]
 80132b8:	3020      	adds	r0, #32
 80132ba:	61ab      	str	r3, [r5, #24]
 80132bc:	6963      	ldr	r3, [r4, #20]
 80132be:	3418      	adds	r4, #24
 80132c0:	61eb      	str	r3, [r5, #28]
 80132c2:	e7e5      	b.n	8013290 <_realloc_r+0x268>
 80132c4:	0021      	movs	r1, r4
 80132c6:	f003 fd3e 	bl	8016d46 <memmove>
 80132ca:	e7e7      	b.n	801329c <_realloc_r+0x274>
 80132cc:	9905      	ldr	r1, [sp, #20]
 80132ce:	9803      	ldr	r0, [sp, #12]
 80132d0:	f7ff fc2c 	bl	8012b2c <_malloc_r>
 80132d4:	1e07      	subs	r7, r0, #0
 80132d6:	d100      	bne.n	80132da <_realloc_r+0x2b2>
 80132d8:	e76f      	b.n	80131ba <_realloc_r+0x192>
 80132da:	0023      	movs	r3, r4
 80132dc:	2201      	movs	r2, #1
 80132de:	3b08      	subs	r3, #8
 80132e0:	685b      	ldr	r3, [r3, #4]
 80132e2:	4393      	bics	r3, r2
 80132e4:	9a02      	ldr	r2, [sp, #8]
 80132e6:	18d3      	adds	r3, r2, r3
 80132e8:	0002      	movs	r2, r0
 80132ea:	3a08      	subs	r2, #8
 80132ec:	4293      	cmp	r3, r2
 80132ee:	d105      	bne.n	80132fc <_realloc_r+0x2d4>
 80132f0:	685e      	ldr	r6, [r3, #4]
 80132f2:	2303      	movs	r3, #3
 80132f4:	439e      	bics	r6, r3
 80132f6:	9b04      	ldr	r3, [sp, #16]
 80132f8:	18f6      	adds	r6, r6, r3
 80132fa:	e6f9      	b.n	80130f0 <_realloc_r+0xc8>
 80132fc:	9a04      	ldr	r2, [sp, #16]
 80132fe:	3a04      	subs	r2, #4
 8013300:	2a24      	cmp	r2, #36	; 0x24
 8013302:	d82d      	bhi.n	8013360 <_realloc_r+0x338>
 8013304:	2a13      	cmp	r2, #19
 8013306:	d928      	bls.n	801335a <_realloc_r+0x332>
 8013308:	6823      	ldr	r3, [r4, #0]
 801330a:	6003      	str	r3, [r0, #0]
 801330c:	6863      	ldr	r3, [r4, #4]
 801330e:	6043      	str	r3, [r0, #4]
 8013310:	2a1b      	cmp	r2, #27
 8013312:	d80e      	bhi.n	8013332 <_realloc_r+0x30a>
 8013314:	0022      	movs	r2, r4
 8013316:	0003      	movs	r3, r0
 8013318:	3208      	adds	r2, #8
 801331a:	3308      	adds	r3, #8
 801331c:	6811      	ldr	r1, [r2, #0]
 801331e:	6019      	str	r1, [r3, #0]
 8013320:	6851      	ldr	r1, [r2, #4]
 8013322:	6059      	str	r1, [r3, #4]
 8013324:	6892      	ldr	r2, [r2, #8]
 8013326:	609a      	str	r2, [r3, #8]
 8013328:	0021      	movs	r1, r4
 801332a:	9803      	ldr	r0, [sp, #12]
 801332c:	f003 f90a 	bl	8016544 <_free_r>
 8013330:	e743      	b.n	80131ba <_realloc_r+0x192>
 8013332:	68a3      	ldr	r3, [r4, #8]
 8013334:	6083      	str	r3, [r0, #8]
 8013336:	68e3      	ldr	r3, [r4, #12]
 8013338:	60c3      	str	r3, [r0, #12]
 801333a:	2a24      	cmp	r2, #36	; 0x24
 801333c:	d004      	beq.n	8013348 <_realloc_r+0x320>
 801333e:	0022      	movs	r2, r4
 8013340:	0003      	movs	r3, r0
 8013342:	3210      	adds	r2, #16
 8013344:	3310      	adds	r3, #16
 8013346:	e7e9      	b.n	801331c <_realloc_r+0x2f4>
 8013348:	6923      	ldr	r3, [r4, #16]
 801334a:	0022      	movs	r2, r4
 801334c:	6103      	str	r3, [r0, #16]
 801334e:	0003      	movs	r3, r0
 8013350:	6961      	ldr	r1, [r4, #20]
 8013352:	3218      	adds	r2, #24
 8013354:	3318      	adds	r3, #24
 8013356:	6141      	str	r1, [r0, #20]
 8013358:	e7e0      	b.n	801331c <_realloc_r+0x2f4>
 801335a:	0003      	movs	r3, r0
 801335c:	0022      	movs	r2, r4
 801335e:	e7dd      	b.n	801331c <_realloc_r+0x2f4>
 8013360:	0021      	movs	r1, r4
 8013362:	f003 fcf0 	bl	8016d46 <memmove>
 8013366:	e7df      	b.n	8013328 <_realloc_r+0x300>
 8013368:	9e04      	ldr	r6, [sp, #16]
 801336a:	e6c1      	b.n	80130f0 <_realloc_r+0xc8>
 801336c:	9902      	ldr	r1, [sp, #8]
 801336e:	4306      	orrs	r6, r0
 8013370:	604e      	str	r6, [r1, #4]
 8013372:	6851      	ldr	r1, [r2, #4]
 8013374:	430b      	orrs	r3, r1
 8013376:	6053      	str	r3, [r2, #4]
 8013378:	e6d6      	b.n	8013128 <_realloc_r+0x100>
 801337a:	46c0      	nop			; (mov r8, r8)
 801337c:	20000644 	.word	0x20000644

08013380 <_sbrk_r>:
 8013380:	2300      	movs	r3, #0
 8013382:	b570      	push	{r4, r5, r6, lr}
 8013384:	4c06      	ldr	r4, [pc, #24]	; (80133a0 <_sbrk_r+0x20>)
 8013386:	0005      	movs	r5, r0
 8013388:	0008      	movs	r0, r1
 801338a:	6023      	str	r3, [r4, #0]
 801338c:	f004 f9ec 	bl	8017768 <_sbrk>
 8013390:	1c43      	adds	r3, r0, #1
 8013392:	d103      	bne.n	801339c <_sbrk_r+0x1c>
 8013394:	6823      	ldr	r3, [r4, #0]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d000      	beq.n	801339c <_sbrk_r+0x1c>
 801339a:	602b      	str	r3, [r5, #0]
 801339c:	bd70      	pop	{r4, r5, r6, pc}
 801339e:	46c0      	nop			; (mov r8, r8)
 80133a0:	20006ee4 	.word	0x20006ee4

080133a4 <sprintf>:
 80133a4:	b40e      	push	{r1, r2, r3}
 80133a6:	b500      	push	{lr}
 80133a8:	490b      	ldr	r1, [pc, #44]	; (80133d8 <sprintf+0x34>)
 80133aa:	b09c      	sub	sp, #112	; 0x70
 80133ac:	ab1d      	add	r3, sp, #116	; 0x74
 80133ae:	9002      	str	r0, [sp, #8]
 80133b0:	9006      	str	r0, [sp, #24]
 80133b2:	9107      	str	r1, [sp, #28]
 80133b4:	9104      	str	r1, [sp, #16]
 80133b6:	4809      	ldr	r0, [pc, #36]	; (80133dc <sprintf+0x38>)
 80133b8:	4909      	ldr	r1, [pc, #36]	; (80133e0 <sprintf+0x3c>)
 80133ba:	cb04      	ldmia	r3!, {r2}
 80133bc:	9105      	str	r1, [sp, #20]
 80133be:	6800      	ldr	r0, [r0, #0]
 80133c0:	a902      	add	r1, sp, #8
 80133c2:	9301      	str	r3, [sp, #4]
 80133c4:	f000 ff78 	bl	80142b8 <_svfprintf_r>
 80133c8:	2300      	movs	r3, #0
 80133ca:	9a02      	ldr	r2, [sp, #8]
 80133cc:	7013      	strb	r3, [r2, #0]
 80133ce:	b01c      	add	sp, #112	; 0x70
 80133d0:	bc08      	pop	{r3}
 80133d2:	b003      	add	sp, #12
 80133d4:	4718      	bx	r3
 80133d6:	46c0      	nop			; (mov r8, r8)
 80133d8:	7fffffff 	.word	0x7fffffff
 80133dc:	200000a8 	.word	0x200000a8
 80133e0:	ffff0208 	.word	0xffff0208

080133e4 <strcat>:
 80133e4:	0002      	movs	r2, r0
 80133e6:	b510      	push	{r4, lr}
 80133e8:	7813      	ldrb	r3, [r2, #0]
 80133ea:	1c54      	adds	r4, r2, #1
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d105      	bne.n	80133fc <strcat+0x18>
 80133f0:	5ccc      	ldrb	r4, [r1, r3]
 80133f2:	54d4      	strb	r4, [r2, r3]
 80133f4:	3301      	adds	r3, #1
 80133f6:	2c00      	cmp	r4, #0
 80133f8:	d1fa      	bne.n	80133f0 <strcat+0xc>
 80133fa:	bd10      	pop	{r4, pc}
 80133fc:	0022      	movs	r2, r4
 80133fe:	e7f3      	b.n	80133e8 <strcat+0x4>

08013400 <strchr>:
 8013400:	b2c9      	uxtb	r1, r1
 8013402:	7803      	ldrb	r3, [r0, #0]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d004      	beq.n	8013412 <strchr+0x12>
 8013408:	428b      	cmp	r3, r1
 801340a:	d100      	bne.n	801340e <strchr+0xe>
 801340c:	4770      	bx	lr
 801340e:	3001      	adds	r0, #1
 8013410:	e7f7      	b.n	8013402 <strchr+0x2>
 8013412:	424b      	negs	r3, r1
 8013414:	4159      	adcs	r1, r3
 8013416:	4249      	negs	r1, r1
 8013418:	4008      	ands	r0, r1
 801341a:	e7f7      	b.n	801340c <strchr+0xc>

0801341c <strcpy>:
 801341c:	0003      	movs	r3, r0
 801341e:	780a      	ldrb	r2, [r1, #0]
 8013420:	3101      	adds	r1, #1
 8013422:	701a      	strb	r2, [r3, #0]
 8013424:	3301      	adds	r3, #1
 8013426:	2a00      	cmp	r2, #0
 8013428:	d1f9      	bne.n	801341e <strcpy+0x2>
 801342a:	4770      	bx	lr

0801342c <strncmp>:
 801342c:	2300      	movs	r3, #0
 801342e:	b530      	push	{r4, r5, lr}
 8013430:	429a      	cmp	r2, r3
 8013432:	d00a      	beq.n	801344a <strncmp+0x1e>
 8013434:	3a01      	subs	r2, #1
 8013436:	5cc4      	ldrb	r4, [r0, r3]
 8013438:	5ccd      	ldrb	r5, [r1, r3]
 801343a:	42ac      	cmp	r4, r5
 801343c:	d104      	bne.n	8013448 <strncmp+0x1c>
 801343e:	4293      	cmp	r3, r2
 8013440:	d002      	beq.n	8013448 <strncmp+0x1c>
 8013442:	3301      	adds	r3, #1
 8013444:	2c00      	cmp	r4, #0
 8013446:	d1f6      	bne.n	8013436 <strncmp+0xa>
 8013448:	1b63      	subs	r3, r4, r5
 801344a:	0018      	movs	r0, r3
 801344c:	bd30      	pop	{r4, r5, pc}

0801344e <strncpy>:
 801344e:	b530      	push	{r4, r5, lr}
 8013450:	0005      	movs	r5, r0
 8013452:	2a00      	cmp	r2, #0
 8013454:	d100      	bne.n	8013458 <strncpy+0xa>
 8013456:	bd30      	pop	{r4, r5, pc}
 8013458:	780c      	ldrb	r4, [r1, #0]
 801345a:	3a01      	subs	r2, #1
 801345c:	1c6b      	adds	r3, r5, #1
 801345e:	702c      	strb	r4, [r5, #0]
 8013460:	3101      	adds	r1, #1
 8013462:	2c00      	cmp	r4, #0
 8013464:	d105      	bne.n	8013472 <strncpy+0x24>
 8013466:	189a      	adds	r2, r3, r2
 8013468:	429a      	cmp	r2, r3
 801346a:	d0f4      	beq.n	8013456 <strncpy+0x8>
 801346c:	701c      	strb	r4, [r3, #0]
 801346e:	3301      	adds	r3, #1
 8013470:	e7fa      	b.n	8013468 <strncpy+0x1a>
 8013472:	001d      	movs	r5, r3
 8013474:	e7ed      	b.n	8013452 <strncpy+0x4>
	...

08013478 <sulp>:
 8013478:	b570      	push	{r4, r5, r6, lr}
 801347a:	0016      	movs	r6, r2
 801347c:	000d      	movs	r5, r1
 801347e:	f003 ff17 	bl	80172b0 <__ulp>
 8013482:	2e00      	cmp	r6, #0
 8013484:	d00d      	beq.n	80134a2 <sulp+0x2a>
 8013486:	236b      	movs	r3, #107	; 0x6b
 8013488:	006a      	lsls	r2, r5, #1
 801348a:	0d52      	lsrs	r2, r2, #21
 801348c:	1a9b      	subs	r3, r3, r2
 801348e:	2b00      	cmp	r3, #0
 8013490:	dd07      	ble.n	80134a2 <sulp+0x2a>
 8013492:	2400      	movs	r4, #0
 8013494:	4a03      	ldr	r2, [pc, #12]	; (80134a4 <sulp+0x2c>)
 8013496:	051b      	lsls	r3, r3, #20
 8013498:	189d      	adds	r5, r3, r2
 801349a:	002b      	movs	r3, r5
 801349c:	0022      	movs	r2, r4
 801349e:	f7ee fcc9 	bl	8001e34 <__aeabi_dmul>
 80134a2:	bd70      	pop	{r4, r5, r6, pc}
 80134a4:	3ff00000 	.word	0x3ff00000

080134a8 <_strtod_l>:
 80134a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134aa:	b0a7      	sub	sp, #156	; 0x9c
 80134ac:	9307      	str	r3, [sp, #28]
 80134ae:	2300      	movs	r3, #0
 80134b0:	9004      	str	r0, [sp, #16]
 80134b2:	9807      	ldr	r0, [sp, #28]
 80134b4:	9322      	str	r3, [sp, #136]	; 0x88
 80134b6:	9106      	str	r1, [sp, #24]
 80134b8:	921d      	str	r2, [sp, #116]	; 0x74
 80134ba:	f003 fc28 	bl	8016d0e <__localeconv_l>
 80134be:	0005      	movs	r5, r0
 80134c0:	6800      	ldr	r0, [r0, #0]
 80134c2:	f7ec fe29 	bl	8000118 <strlen>
 80134c6:	2600      	movs	r6, #0
 80134c8:	2700      	movs	r7, #0
 80134ca:	9b06      	ldr	r3, [sp, #24]
 80134cc:	9005      	str	r0, [sp, #20]
 80134ce:	9321      	str	r3, [sp, #132]	; 0x84
 80134d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134d2:	781a      	ldrb	r2, [r3, #0]
 80134d4:	2a0d      	cmp	r2, #13
 80134d6:	d839      	bhi.n	801354c <_strtod_l+0xa4>
 80134d8:	2a09      	cmp	r2, #9
 80134da:	d23d      	bcs.n	8013558 <_strtod_l+0xb0>
 80134dc:	2a00      	cmp	r2, #0
 80134de:	d044      	beq.n	801356a <_strtod_l+0xc2>
 80134e0:	2300      	movs	r3, #0
 80134e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80134e4:	2200      	movs	r2, #0
 80134e6:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80134e8:	920c      	str	r2, [sp, #48]	; 0x30
 80134ea:	7823      	ldrb	r3, [r4, #0]
 80134ec:	2b30      	cmp	r3, #48	; 0x30
 80134ee:	d000      	beq.n	80134f2 <_strtod_l+0x4a>
 80134f0:	e07e      	b.n	80135f0 <_strtod_l+0x148>
 80134f2:	7863      	ldrb	r3, [r4, #1]
 80134f4:	2b58      	cmp	r3, #88	; 0x58
 80134f6:	d002      	beq.n	80134fe <_strtod_l+0x56>
 80134f8:	2b78      	cmp	r3, #120	; 0x78
 80134fa:	d000      	beq.n	80134fe <_strtod_l+0x56>
 80134fc:	e06e      	b.n	80135dc <_strtod_l+0x134>
 80134fe:	9b07      	ldr	r3, [sp, #28]
 8013500:	4a96      	ldr	r2, [pc, #600]	; (801375c <_strtod_l+0x2b4>)
 8013502:	9302      	str	r3, [sp, #8]
 8013504:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013506:	a921      	add	r1, sp, #132	; 0x84
 8013508:	9301      	str	r3, [sp, #4]
 801350a:	ab22      	add	r3, sp, #136	; 0x88
 801350c:	9300      	str	r3, [sp, #0]
 801350e:	9804      	ldr	r0, [sp, #16]
 8013510:	ab23      	add	r3, sp, #140	; 0x8c
 8013512:	f003 f914 	bl	801673e <__gethex>
 8013516:	2507      	movs	r5, #7
 8013518:	9005      	str	r0, [sp, #20]
 801351a:	4005      	ands	r5, r0
 801351c:	d005      	beq.n	801352a <_strtod_l+0x82>
 801351e:	2d06      	cmp	r5, #6
 8013520:	d12f      	bne.n	8013582 <_strtod_l+0xda>
 8013522:	2300      	movs	r3, #0
 8013524:	3401      	adds	r4, #1
 8013526:	9421      	str	r4, [sp, #132]	; 0x84
 8013528:	9313      	str	r3, [sp, #76]	; 0x4c
 801352a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801352c:	2b00      	cmp	r3, #0
 801352e:	d002      	beq.n	8013536 <_strtod_l+0x8e>
 8013530:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013532:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013534:	601a      	str	r2, [r3, #0]
 8013536:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013538:	2b00      	cmp	r3, #0
 801353a:	d01d      	beq.n	8013578 <_strtod_l+0xd0>
 801353c:	2380      	movs	r3, #128	; 0x80
 801353e:	0032      	movs	r2, r6
 8013540:	061b      	lsls	r3, r3, #24
 8013542:	18fb      	adds	r3, r7, r3
 8013544:	0010      	movs	r0, r2
 8013546:	0019      	movs	r1, r3
 8013548:	b027      	add	sp, #156	; 0x9c
 801354a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801354c:	2a2b      	cmp	r2, #43	; 0x2b
 801354e:	d016      	beq.n	801357e <_strtod_l+0xd6>
 8013550:	2a2d      	cmp	r2, #45	; 0x2d
 8013552:	d003      	beq.n	801355c <_strtod_l+0xb4>
 8013554:	2a20      	cmp	r2, #32
 8013556:	d1c3      	bne.n	80134e0 <_strtod_l+0x38>
 8013558:	3301      	adds	r3, #1
 801355a:	e7b8      	b.n	80134ce <_strtod_l+0x26>
 801355c:	2201      	movs	r2, #1
 801355e:	9213      	str	r2, [sp, #76]	; 0x4c
 8013560:	1c5a      	adds	r2, r3, #1
 8013562:	9221      	str	r2, [sp, #132]	; 0x84
 8013564:	785b      	ldrb	r3, [r3, #1]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d1bc      	bne.n	80134e4 <_strtod_l+0x3c>
 801356a:	9b06      	ldr	r3, [sp, #24]
 801356c:	9321      	str	r3, [sp, #132]	; 0x84
 801356e:	2300      	movs	r3, #0
 8013570:	9313      	str	r3, [sp, #76]	; 0x4c
 8013572:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013574:	2b00      	cmp	r3, #0
 8013576:	d1db      	bne.n	8013530 <_strtod_l+0x88>
 8013578:	0032      	movs	r2, r6
 801357a:	003b      	movs	r3, r7
 801357c:	e7e2      	b.n	8013544 <_strtod_l+0x9c>
 801357e:	2200      	movs	r2, #0
 8013580:	e7ed      	b.n	801355e <_strtod_l+0xb6>
 8013582:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013584:	2a00      	cmp	r2, #0
 8013586:	d007      	beq.n	8013598 <_strtod_l+0xf0>
 8013588:	2135      	movs	r1, #53	; 0x35
 801358a:	a824      	add	r0, sp, #144	; 0x90
 801358c:	f003 ff7d 	bl	801748a <__copybits>
 8013590:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013592:	9804      	ldr	r0, [sp, #16]
 8013594:	f003 fc12 	bl	8016dbc <_Bfree>
 8013598:	1e68      	subs	r0, r5, #1
 801359a:	2804      	cmp	r0, #4
 801359c:	d806      	bhi.n	80135ac <_strtod_l+0x104>
 801359e:	f7ec fdc3 	bl	8000128 <__gnu_thumb1_case_uqi>
 80135a2:	030c      	.short	0x030c
 80135a4:	1917      	.short	0x1917
 80135a6:	0c          	.byte	0x0c
 80135a7:	00          	.byte	0x00
 80135a8:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80135aa:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80135ac:	9b05      	ldr	r3, [sp, #20]
 80135ae:	071b      	lsls	r3, r3, #28
 80135b0:	d5bb      	bpl.n	801352a <_strtod_l+0x82>
 80135b2:	2380      	movs	r3, #128	; 0x80
 80135b4:	061b      	lsls	r3, r3, #24
 80135b6:	431f      	orrs	r7, r3
 80135b8:	e7b7      	b.n	801352a <_strtod_l+0x82>
 80135ba:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80135bc:	4a68      	ldr	r2, [pc, #416]	; (8013760 <_strtod_l+0x2b8>)
 80135be:	4969      	ldr	r1, [pc, #420]	; (8013764 <_strtod_l+0x2bc>)
 80135c0:	401a      	ands	r2, r3
 80135c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80135c4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80135c6:	185b      	adds	r3, r3, r1
 80135c8:	051b      	lsls	r3, r3, #20
 80135ca:	431a      	orrs	r2, r3
 80135cc:	0017      	movs	r7, r2
 80135ce:	e7ed      	b.n	80135ac <_strtod_l+0x104>
 80135d0:	4f65      	ldr	r7, [pc, #404]	; (8013768 <_strtod_l+0x2c0>)
 80135d2:	e7eb      	b.n	80135ac <_strtod_l+0x104>
 80135d4:	2601      	movs	r6, #1
 80135d6:	4f65      	ldr	r7, [pc, #404]	; (801376c <_strtod_l+0x2c4>)
 80135d8:	4276      	negs	r6, r6
 80135da:	e7e7      	b.n	80135ac <_strtod_l+0x104>
 80135dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135de:	1c5a      	adds	r2, r3, #1
 80135e0:	9221      	str	r2, [sp, #132]	; 0x84
 80135e2:	785b      	ldrb	r3, [r3, #1]
 80135e4:	2b30      	cmp	r3, #48	; 0x30
 80135e6:	d0f9      	beq.n	80135dc <_strtod_l+0x134>
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d09e      	beq.n	801352a <_strtod_l+0x82>
 80135ec:	2301      	movs	r3, #1
 80135ee:	930c      	str	r3, [sp, #48]	; 0x30
 80135f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135f2:	220a      	movs	r2, #10
 80135f4:	9312      	str	r3, [sp, #72]	; 0x48
 80135f6:	2300      	movs	r3, #0
 80135f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80135fa:	9308      	str	r3, [sp, #32]
 80135fc:	930a      	str	r3, [sp, #40]	; 0x28
 80135fe:	9821      	ldr	r0, [sp, #132]	; 0x84
 8013600:	7804      	ldrb	r4, [r0, #0]
 8013602:	0023      	movs	r3, r4
 8013604:	3b30      	subs	r3, #48	; 0x30
 8013606:	b2d9      	uxtb	r1, r3
 8013608:	2909      	cmp	r1, #9
 801360a:	d934      	bls.n	8013676 <_strtod_l+0x1ce>
 801360c:	9a05      	ldr	r2, [sp, #20]
 801360e:	6829      	ldr	r1, [r5, #0]
 8013610:	f7ff ff0c 	bl	801342c <strncmp>
 8013614:	2800      	cmp	r0, #0
 8013616:	d040      	beq.n	801369a <_strtod_l+0x1f2>
 8013618:	2000      	movs	r0, #0
 801361a:	0023      	movs	r3, r4
 801361c:	4684      	mov	ip, r0
 801361e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013620:	9007      	str	r0, [sp, #28]
 8013622:	9205      	str	r2, [sp, #20]
 8013624:	2220      	movs	r2, #32
 8013626:	0019      	movs	r1, r3
 8013628:	4391      	bics	r1, r2
 801362a:	000a      	movs	r2, r1
 801362c:	2100      	movs	r1, #0
 801362e:	2a45      	cmp	r2, #69	; 0x45
 8013630:	d000      	beq.n	8013634 <_strtod_l+0x18c>
 8013632:	e0bf      	b.n	80137b4 <_strtod_l+0x30c>
 8013634:	9b05      	ldr	r3, [sp, #20]
 8013636:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013638:	4303      	orrs	r3, r0
 801363a:	4313      	orrs	r3, r2
 801363c:	428b      	cmp	r3, r1
 801363e:	d094      	beq.n	801356a <_strtod_l+0xc2>
 8013640:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013642:	9306      	str	r3, [sp, #24]
 8013644:	3301      	adds	r3, #1
 8013646:	9321      	str	r3, [sp, #132]	; 0x84
 8013648:	9b06      	ldr	r3, [sp, #24]
 801364a:	785b      	ldrb	r3, [r3, #1]
 801364c:	2b2b      	cmp	r3, #43	; 0x2b
 801364e:	d100      	bne.n	8013652 <_strtod_l+0x1aa>
 8013650:	e082      	b.n	8013758 <_strtod_l+0x2b0>
 8013652:	000c      	movs	r4, r1
 8013654:	2b2d      	cmp	r3, #45	; 0x2d
 8013656:	d105      	bne.n	8013664 <_strtod_l+0x1bc>
 8013658:	2401      	movs	r4, #1
 801365a:	9b06      	ldr	r3, [sp, #24]
 801365c:	3302      	adds	r3, #2
 801365e:	9321      	str	r3, [sp, #132]	; 0x84
 8013660:	9b06      	ldr	r3, [sp, #24]
 8013662:	789b      	ldrb	r3, [r3, #2]
 8013664:	001a      	movs	r2, r3
 8013666:	3a30      	subs	r2, #48	; 0x30
 8013668:	2a09      	cmp	r2, #9
 801366a:	d800      	bhi.n	801366e <_strtod_l+0x1c6>
 801366c:	e084      	b.n	8013778 <_strtod_l+0x2d0>
 801366e:	9a06      	ldr	r2, [sp, #24]
 8013670:	2100      	movs	r1, #0
 8013672:	9221      	str	r2, [sp, #132]	; 0x84
 8013674:	e09e      	b.n	80137b4 <_strtod_l+0x30c>
 8013676:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013678:	2908      	cmp	r1, #8
 801367a:	dc09      	bgt.n	8013690 <_strtod_l+0x1e8>
 801367c:	9908      	ldr	r1, [sp, #32]
 801367e:	4351      	muls	r1, r2
 8013680:	18cb      	adds	r3, r1, r3
 8013682:	9308      	str	r3, [sp, #32]
 8013684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013686:	3001      	adds	r0, #1
 8013688:	3301      	adds	r3, #1
 801368a:	930a      	str	r3, [sp, #40]	; 0x28
 801368c:	9021      	str	r0, [sp, #132]	; 0x84
 801368e:	e7b6      	b.n	80135fe <_strtod_l+0x156>
 8013690:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013692:	4351      	muls	r1, r2
 8013694:	18cb      	adds	r3, r1, r3
 8013696:	930b      	str	r3, [sp, #44]	; 0x2c
 8013698:	e7f4      	b.n	8013684 <_strtod_l+0x1dc>
 801369a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801369c:	9b05      	ldr	r3, [sp, #20]
 801369e:	4694      	mov	ip, r2
 80136a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136a2:	4463      	add	r3, ip
 80136a4:	9321      	str	r3, [sp, #132]	; 0x84
 80136a6:	781b      	ldrb	r3, [r3, #0]
 80136a8:	2a00      	cmp	r2, #0
 80136aa:	d036      	beq.n	801371a <_strtod_l+0x272>
 80136ac:	4684      	mov	ip, r0
 80136ae:	9205      	str	r2, [sp, #20]
 80136b0:	001a      	movs	r2, r3
 80136b2:	3a30      	subs	r2, #48	; 0x30
 80136b4:	2a09      	cmp	r2, #9
 80136b6:	d912      	bls.n	80136de <_strtod_l+0x236>
 80136b8:	2201      	movs	r2, #1
 80136ba:	9207      	str	r2, [sp, #28]
 80136bc:	e7b2      	b.n	8013624 <_strtod_l+0x17c>
 80136be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80136c0:	3001      	adds	r0, #1
 80136c2:	1c5a      	adds	r2, r3, #1
 80136c4:	9221      	str	r2, [sp, #132]	; 0x84
 80136c6:	785b      	ldrb	r3, [r3, #1]
 80136c8:	2b30      	cmp	r3, #48	; 0x30
 80136ca:	d0f8      	beq.n	80136be <_strtod_l+0x216>
 80136cc:	001a      	movs	r2, r3
 80136ce:	3a31      	subs	r2, #49	; 0x31
 80136d0:	2a08      	cmp	r2, #8
 80136d2:	d83c      	bhi.n	801374e <_strtod_l+0x2a6>
 80136d4:	4684      	mov	ip, r0
 80136d6:	2000      	movs	r0, #0
 80136d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80136da:	9005      	str	r0, [sp, #20]
 80136dc:	9212      	str	r2, [sp, #72]	; 0x48
 80136de:	3b30      	subs	r3, #48	; 0x30
 80136e0:	1c42      	adds	r2, r0, #1
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d013      	beq.n	801370e <_strtod_l+0x266>
 80136e6:	210a      	movs	r1, #10
 80136e8:	4494      	add	ip, r2
 80136ea:	9a05      	ldr	r2, [sp, #20]
 80136ec:	1885      	adds	r5, r0, r2
 80136ee:	42aa      	cmp	r2, r5
 80136f0:	d115      	bne.n	801371e <_strtod_l+0x276>
 80136f2:	9905      	ldr	r1, [sp, #20]
 80136f4:	9a05      	ldr	r2, [sp, #20]
 80136f6:	3101      	adds	r1, #1
 80136f8:	1809      	adds	r1, r1, r0
 80136fa:	1812      	adds	r2, r2, r0
 80136fc:	9105      	str	r1, [sp, #20]
 80136fe:	2a08      	cmp	r2, #8
 8013700:	dc1b      	bgt.n	801373a <_strtod_l+0x292>
 8013702:	220a      	movs	r2, #10
 8013704:	9908      	ldr	r1, [sp, #32]
 8013706:	434a      	muls	r2, r1
 8013708:	189b      	adds	r3, r3, r2
 801370a:	2200      	movs	r2, #0
 801370c:	9308      	str	r3, [sp, #32]
 801370e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013710:	0010      	movs	r0, r2
 8013712:	1c59      	adds	r1, r3, #1
 8013714:	9121      	str	r1, [sp, #132]	; 0x84
 8013716:	785b      	ldrb	r3, [r3, #1]
 8013718:	e7ca      	b.n	80136b0 <_strtod_l+0x208>
 801371a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801371c:	e7d4      	b.n	80136c8 <_strtod_l+0x220>
 801371e:	1c54      	adds	r4, r2, #1
 8013720:	2a08      	cmp	r2, #8
 8013722:	dc04      	bgt.n	801372e <_strtod_l+0x286>
 8013724:	9a08      	ldr	r2, [sp, #32]
 8013726:	434a      	muls	r2, r1
 8013728:	9208      	str	r2, [sp, #32]
 801372a:	0022      	movs	r2, r4
 801372c:	e7df      	b.n	80136ee <_strtod_l+0x246>
 801372e:	2c10      	cmp	r4, #16
 8013730:	dcfb      	bgt.n	801372a <_strtod_l+0x282>
 8013732:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013734:	434a      	muls	r2, r1
 8013736:	920b      	str	r2, [sp, #44]	; 0x2c
 8013738:	e7f7      	b.n	801372a <_strtod_l+0x282>
 801373a:	9905      	ldr	r1, [sp, #20]
 801373c:	2200      	movs	r2, #0
 801373e:	2910      	cmp	r1, #16
 8013740:	dce5      	bgt.n	801370e <_strtod_l+0x266>
 8013742:	210a      	movs	r1, #10
 8013744:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013746:	4341      	muls	r1, r0
 8013748:	185b      	adds	r3, r3, r1
 801374a:	930b      	str	r3, [sp, #44]	; 0x2c
 801374c:	e7df      	b.n	801370e <_strtod_l+0x266>
 801374e:	2200      	movs	r2, #0
 8013750:	4694      	mov	ip, r2
 8013752:	9205      	str	r2, [sp, #20]
 8013754:	3201      	adds	r2, #1
 8013756:	e7b0      	b.n	80136ba <_strtod_l+0x212>
 8013758:	000c      	movs	r4, r1
 801375a:	e77e      	b.n	801365a <_strtod_l+0x1b2>
 801375c:	0801a648 	.word	0x0801a648
 8013760:	ffefffff 	.word	0xffefffff
 8013764:	00000433 	.word	0x00000433
 8013768:	7ff00000 	.word	0x7ff00000
 801376c:	7fffffff 	.word	0x7fffffff
 8013770:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013772:	1c5a      	adds	r2, r3, #1
 8013774:	9221      	str	r2, [sp, #132]	; 0x84
 8013776:	785b      	ldrb	r3, [r3, #1]
 8013778:	2b30      	cmp	r3, #48	; 0x30
 801377a:	d0f9      	beq.n	8013770 <_strtod_l+0x2c8>
 801377c:	001a      	movs	r2, r3
 801377e:	3a31      	subs	r2, #49	; 0x31
 8013780:	2100      	movs	r1, #0
 8013782:	2a08      	cmp	r2, #8
 8013784:	d816      	bhi.n	80137b4 <_strtod_l+0x30c>
 8013786:	3b30      	subs	r3, #48	; 0x30
 8013788:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801378a:	930e      	str	r3, [sp, #56]	; 0x38
 801378c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801378e:	1c59      	adds	r1, r3, #1
 8013790:	9121      	str	r1, [sp, #132]	; 0x84
 8013792:	785b      	ldrb	r3, [r3, #1]
 8013794:	001a      	movs	r2, r3
 8013796:	3a30      	subs	r2, #48	; 0x30
 8013798:	2a09      	cmp	r2, #9
 801379a:	d932      	bls.n	8013802 <_strtod_l+0x35a>
 801379c:	1b4a      	subs	r2, r1, r5
 801379e:	4dad      	ldr	r5, [pc, #692]	; (8013a54 <_strtod_l+0x5ac>)
 80137a0:	0029      	movs	r1, r5
 80137a2:	2a08      	cmp	r2, #8
 80137a4:	dc03      	bgt.n	80137ae <_strtod_l+0x306>
 80137a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80137a8:	42a9      	cmp	r1, r5
 80137aa:	dd00      	ble.n	80137ae <_strtod_l+0x306>
 80137ac:	0029      	movs	r1, r5
 80137ae:	2c00      	cmp	r4, #0
 80137b0:	d000      	beq.n	80137b4 <_strtod_l+0x30c>
 80137b2:	4249      	negs	r1, r1
 80137b4:	9a05      	ldr	r2, [sp, #20]
 80137b6:	2a00      	cmp	r2, #0
 80137b8:	d149      	bne.n	801384e <_strtod_l+0x3a6>
 80137ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80137bc:	4310      	orrs	r0, r2
 80137be:	d000      	beq.n	80137c2 <_strtod_l+0x31a>
 80137c0:	e6b3      	b.n	801352a <_strtod_l+0x82>
 80137c2:	9a07      	ldr	r2, [sp, #28]
 80137c4:	2a00      	cmp	r2, #0
 80137c6:	d000      	beq.n	80137ca <_strtod_l+0x322>
 80137c8:	e6cf      	b.n	801356a <_strtod_l+0xc2>
 80137ca:	2b4e      	cmp	r3, #78	; 0x4e
 80137cc:	d025      	beq.n	801381a <_strtod_l+0x372>
 80137ce:	dc1f      	bgt.n	8013810 <_strtod_l+0x368>
 80137d0:	2b49      	cmp	r3, #73	; 0x49
 80137d2:	d000      	beq.n	80137d6 <_strtod_l+0x32e>
 80137d4:	e6c9      	b.n	801356a <_strtod_l+0xc2>
 80137d6:	49a0      	ldr	r1, [pc, #640]	; (8013a58 <_strtod_l+0x5b0>)
 80137d8:	a821      	add	r0, sp, #132	; 0x84
 80137da:	f003 f9ed 	bl	8016bb8 <__match>
 80137de:	2800      	cmp	r0, #0
 80137e0:	d100      	bne.n	80137e4 <_strtod_l+0x33c>
 80137e2:	e6c2      	b.n	801356a <_strtod_l+0xc2>
 80137e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137e6:	499d      	ldr	r1, [pc, #628]	; (8013a5c <_strtod_l+0x5b4>)
 80137e8:	3b01      	subs	r3, #1
 80137ea:	a821      	add	r0, sp, #132	; 0x84
 80137ec:	9321      	str	r3, [sp, #132]	; 0x84
 80137ee:	f003 f9e3 	bl	8016bb8 <__match>
 80137f2:	2800      	cmp	r0, #0
 80137f4:	d102      	bne.n	80137fc <_strtod_l+0x354>
 80137f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137f8:	3301      	adds	r3, #1
 80137fa:	9321      	str	r3, [sp, #132]	; 0x84
 80137fc:	4f98      	ldr	r7, [pc, #608]	; (8013a60 <_strtod_l+0x5b8>)
 80137fe:	2600      	movs	r6, #0
 8013800:	e693      	b.n	801352a <_strtod_l+0x82>
 8013802:	220a      	movs	r2, #10
 8013804:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013806:	434a      	muls	r2, r1
 8013808:	18d2      	adds	r2, r2, r3
 801380a:	3a30      	subs	r2, #48	; 0x30
 801380c:	920e      	str	r2, [sp, #56]	; 0x38
 801380e:	e7bd      	b.n	801378c <_strtod_l+0x2e4>
 8013810:	2b69      	cmp	r3, #105	; 0x69
 8013812:	d0e0      	beq.n	80137d6 <_strtod_l+0x32e>
 8013814:	2b6e      	cmp	r3, #110	; 0x6e
 8013816:	d000      	beq.n	801381a <_strtod_l+0x372>
 8013818:	e6a7      	b.n	801356a <_strtod_l+0xc2>
 801381a:	4992      	ldr	r1, [pc, #584]	; (8013a64 <_strtod_l+0x5bc>)
 801381c:	a821      	add	r0, sp, #132	; 0x84
 801381e:	f003 f9cb 	bl	8016bb8 <__match>
 8013822:	2800      	cmp	r0, #0
 8013824:	d100      	bne.n	8013828 <_strtod_l+0x380>
 8013826:	e6a0      	b.n	801356a <_strtod_l+0xc2>
 8013828:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801382a:	781b      	ldrb	r3, [r3, #0]
 801382c:	2b28      	cmp	r3, #40	; 0x28
 801382e:	d10c      	bne.n	801384a <_strtod_l+0x3a2>
 8013830:	aa24      	add	r2, sp, #144	; 0x90
 8013832:	498d      	ldr	r1, [pc, #564]	; (8013a68 <_strtod_l+0x5c0>)
 8013834:	a821      	add	r0, sp, #132	; 0x84
 8013836:	f003 f9d3 	bl	8016be0 <__hexnan>
 801383a:	2805      	cmp	r0, #5
 801383c:	d105      	bne.n	801384a <_strtod_l+0x3a2>
 801383e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013840:	4a87      	ldr	r2, [pc, #540]	; (8013a60 <_strtod_l+0x5b8>)
 8013842:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013844:	431a      	orrs	r2, r3
 8013846:	0017      	movs	r7, r2
 8013848:	e66f      	b.n	801352a <_strtod_l+0x82>
 801384a:	4f88      	ldr	r7, [pc, #544]	; (8013a6c <_strtod_l+0x5c4>)
 801384c:	e7d7      	b.n	80137fe <_strtod_l+0x356>
 801384e:	4663      	mov	r3, ip
 8013850:	1acb      	subs	r3, r1, r3
 8013852:	9307      	str	r3, [sp, #28]
 8013854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013856:	2b00      	cmp	r3, #0
 8013858:	d101      	bne.n	801385e <_strtod_l+0x3b6>
 801385a:	9b05      	ldr	r3, [sp, #20]
 801385c:	930a      	str	r3, [sp, #40]	; 0x28
 801385e:	9c05      	ldr	r4, [sp, #20]
 8013860:	2c10      	cmp	r4, #16
 8013862:	dd00      	ble.n	8013866 <_strtod_l+0x3be>
 8013864:	2410      	movs	r4, #16
 8013866:	9808      	ldr	r0, [sp, #32]
 8013868:	f7ef f92a 	bl	8002ac0 <__aeabi_ui2d>
 801386c:	9b05      	ldr	r3, [sp, #20]
 801386e:	0006      	movs	r6, r0
 8013870:	000f      	movs	r7, r1
 8013872:	2b09      	cmp	r3, #9
 8013874:	dc15      	bgt.n	80138a2 <_strtod_l+0x3fa>
 8013876:	9b07      	ldr	r3, [sp, #28]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d100      	bne.n	801387e <_strtod_l+0x3d6>
 801387c:	e655      	b.n	801352a <_strtod_l+0x82>
 801387e:	9b07      	ldr	r3, [sp, #28]
 8013880:	2b00      	cmp	r3, #0
 8013882:	dc00      	bgt.n	8013886 <_strtod_l+0x3de>
 8013884:	e07d      	b.n	8013982 <_strtod_l+0x4da>
 8013886:	2b16      	cmp	r3, #22
 8013888:	dc62      	bgt.n	8013950 <_strtod_l+0x4a8>
 801388a:	00dc      	lsls	r4, r3, #3
 801388c:	4b78      	ldr	r3, [pc, #480]	; (8013a70 <_strtod_l+0x5c8>)
 801388e:	0032      	movs	r2, r6
 8013890:	1919      	adds	r1, r3, r4
 8013892:	003b      	movs	r3, r7
 8013894:	6808      	ldr	r0, [r1, #0]
 8013896:	6849      	ldr	r1, [r1, #4]
 8013898:	f7ee facc 	bl	8001e34 <__aeabi_dmul>
 801389c:	0006      	movs	r6, r0
 801389e:	000f      	movs	r7, r1
 80138a0:	e643      	b.n	801352a <_strtod_l+0x82>
 80138a2:	0022      	movs	r2, r4
 80138a4:	4b72      	ldr	r3, [pc, #456]	; (8013a70 <_strtod_l+0x5c8>)
 80138a6:	3a09      	subs	r2, #9
 80138a8:	00d2      	lsls	r2, r2, #3
 80138aa:	189b      	adds	r3, r3, r2
 80138ac:	681a      	ldr	r2, [r3, #0]
 80138ae:	685b      	ldr	r3, [r3, #4]
 80138b0:	f7ee fac0 	bl	8001e34 <__aeabi_dmul>
 80138b4:	0006      	movs	r6, r0
 80138b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80138b8:	000f      	movs	r7, r1
 80138ba:	f7ef f901 	bl	8002ac0 <__aeabi_ui2d>
 80138be:	000b      	movs	r3, r1
 80138c0:	0002      	movs	r2, r0
 80138c2:	0039      	movs	r1, r7
 80138c4:	0030      	movs	r0, r6
 80138c6:	f7ed fb8f 	bl	8000fe8 <__aeabi_dadd>
 80138ca:	9b05      	ldr	r3, [sp, #20]
 80138cc:	0006      	movs	r6, r0
 80138ce:	000f      	movs	r7, r1
 80138d0:	2b0f      	cmp	r3, #15
 80138d2:	ddd0      	ble.n	8013876 <_strtod_l+0x3ce>
 80138d4:	9b05      	ldr	r3, [sp, #20]
 80138d6:	1b1c      	subs	r4, r3, r4
 80138d8:	9b07      	ldr	r3, [sp, #28]
 80138da:	18e4      	adds	r4, r4, r3
 80138dc:	2c00      	cmp	r4, #0
 80138de:	dc00      	bgt.n	80138e2 <_strtod_l+0x43a>
 80138e0:	e094      	b.n	8013a0c <_strtod_l+0x564>
 80138e2:	230f      	movs	r3, #15
 80138e4:	4023      	ands	r3, r4
 80138e6:	d00a      	beq.n	80138fe <_strtod_l+0x456>
 80138e8:	4961      	ldr	r1, [pc, #388]	; (8013a70 <_strtod_l+0x5c8>)
 80138ea:	00db      	lsls	r3, r3, #3
 80138ec:	18c9      	adds	r1, r1, r3
 80138ee:	0032      	movs	r2, r6
 80138f0:	6808      	ldr	r0, [r1, #0]
 80138f2:	6849      	ldr	r1, [r1, #4]
 80138f4:	003b      	movs	r3, r7
 80138f6:	f7ee fa9d 	bl	8001e34 <__aeabi_dmul>
 80138fa:	0006      	movs	r6, r0
 80138fc:	000f      	movs	r7, r1
 80138fe:	230f      	movs	r3, #15
 8013900:	439c      	bics	r4, r3
 8013902:	d06e      	beq.n	80139e2 <_strtod_l+0x53a>
 8013904:	3326      	adds	r3, #38	; 0x26
 8013906:	33ff      	adds	r3, #255	; 0xff
 8013908:	429c      	cmp	r4, r3
 801390a:	dd48      	ble.n	801399e <_strtod_l+0x4f6>
 801390c:	2400      	movs	r4, #0
 801390e:	9405      	str	r4, [sp, #20]
 8013910:	940b      	str	r4, [sp, #44]	; 0x2c
 8013912:	940a      	str	r4, [sp, #40]	; 0x28
 8013914:	2322      	movs	r3, #34	; 0x22
 8013916:	2600      	movs	r6, #0
 8013918:	9a04      	ldr	r2, [sp, #16]
 801391a:	4f51      	ldr	r7, [pc, #324]	; (8013a60 <_strtod_l+0x5b8>)
 801391c:	6013      	str	r3, [r2, #0]
 801391e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013920:	42b3      	cmp	r3, r6
 8013922:	d100      	bne.n	8013926 <_strtod_l+0x47e>
 8013924:	e601      	b.n	801352a <_strtod_l+0x82>
 8013926:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013928:	9804      	ldr	r0, [sp, #16]
 801392a:	f003 fa47 	bl	8016dbc <_Bfree>
 801392e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013930:	9804      	ldr	r0, [sp, #16]
 8013932:	f003 fa43 	bl	8016dbc <_Bfree>
 8013936:	9905      	ldr	r1, [sp, #20]
 8013938:	9804      	ldr	r0, [sp, #16]
 801393a:	f003 fa3f 	bl	8016dbc <_Bfree>
 801393e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013940:	9804      	ldr	r0, [sp, #16]
 8013942:	f003 fa3b 	bl	8016dbc <_Bfree>
 8013946:	0021      	movs	r1, r4
 8013948:	9804      	ldr	r0, [sp, #16]
 801394a:	f003 fa37 	bl	8016dbc <_Bfree>
 801394e:	e5ec      	b.n	801352a <_strtod_l+0x82>
 8013950:	2325      	movs	r3, #37	; 0x25
 8013952:	9a05      	ldr	r2, [sp, #20]
 8013954:	1a9b      	subs	r3, r3, r2
 8013956:	9a07      	ldr	r2, [sp, #28]
 8013958:	4293      	cmp	r3, r2
 801395a:	dbbb      	blt.n	80138d4 <_strtod_l+0x42c>
 801395c:	230f      	movs	r3, #15
 801395e:	9a05      	ldr	r2, [sp, #20]
 8013960:	4c43      	ldr	r4, [pc, #268]	; (8013a70 <_strtod_l+0x5c8>)
 8013962:	1a9d      	subs	r5, r3, r2
 8013964:	00e9      	lsls	r1, r5, #3
 8013966:	1861      	adds	r1, r4, r1
 8013968:	0032      	movs	r2, r6
 801396a:	6808      	ldr	r0, [r1, #0]
 801396c:	6849      	ldr	r1, [r1, #4]
 801396e:	003b      	movs	r3, r7
 8013970:	f7ee fa60 	bl	8001e34 <__aeabi_dmul>
 8013974:	9b07      	ldr	r3, [sp, #28]
 8013976:	1b5e      	subs	r6, r3, r5
 8013978:	00f6      	lsls	r6, r6, #3
 801397a:	19a6      	adds	r6, r4, r6
 801397c:	6832      	ldr	r2, [r6, #0]
 801397e:	6873      	ldr	r3, [r6, #4]
 8013980:	e78a      	b.n	8013898 <_strtod_l+0x3f0>
 8013982:	9b07      	ldr	r3, [sp, #28]
 8013984:	3316      	adds	r3, #22
 8013986:	dba5      	blt.n	80138d4 <_strtod_l+0x42c>
 8013988:	9b07      	ldr	r3, [sp, #28]
 801398a:	0030      	movs	r0, r6
 801398c:	00da      	lsls	r2, r3, #3
 801398e:	4b38      	ldr	r3, [pc, #224]	; (8013a70 <_strtod_l+0x5c8>)
 8013990:	0039      	movs	r1, r7
 8013992:	1a9b      	subs	r3, r3, r2
 8013994:	681a      	ldr	r2, [r3, #0]
 8013996:	685b      	ldr	r3, [r3, #4]
 8013998:	f7ed fe42 	bl	8001620 <__aeabi_ddiv>
 801399c:	e77e      	b.n	801389c <_strtod_l+0x3f4>
 801399e:	2300      	movs	r3, #0
 80139a0:	0030      	movs	r0, r6
 80139a2:	0039      	movs	r1, r7
 80139a4:	001d      	movs	r5, r3
 80139a6:	1124      	asrs	r4, r4, #4
 80139a8:	2c01      	cmp	r4, #1
 80139aa:	dc1d      	bgt.n	80139e8 <_strtod_l+0x540>
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d001      	beq.n	80139b4 <_strtod_l+0x50c>
 80139b0:	0006      	movs	r6, r0
 80139b2:	000f      	movs	r7, r1
 80139b4:	4b2f      	ldr	r3, [pc, #188]	; (8013a74 <_strtod_l+0x5cc>)
 80139b6:	00ed      	lsls	r5, r5, #3
 80139b8:	18ff      	adds	r7, r7, r3
 80139ba:	4b2f      	ldr	r3, [pc, #188]	; (8013a78 <_strtod_l+0x5d0>)
 80139bc:	0032      	movs	r2, r6
 80139be:	195d      	adds	r5, r3, r5
 80139c0:	6828      	ldr	r0, [r5, #0]
 80139c2:	6869      	ldr	r1, [r5, #4]
 80139c4:	003b      	movs	r3, r7
 80139c6:	f7ee fa35 	bl	8001e34 <__aeabi_dmul>
 80139ca:	4b25      	ldr	r3, [pc, #148]	; (8013a60 <_strtod_l+0x5b8>)
 80139cc:	4a2b      	ldr	r2, [pc, #172]	; (8013a7c <_strtod_l+0x5d4>)
 80139ce:	0006      	movs	r6, r0
 80139d0:	400b      	ands	r3, r1
 80139d2:	4293      	cmp	r3, r2
 80139d4:	d89a      	bhi.n	801390c <_strtod_l+0x464>
 80139d6:	4a2a      	ldr	r2, [pc, #168]	; (8013a80 <_strtod_l+0x5d8>)
 80139d8:	4293      	cmp	r3, r2
 80139da:	d913      	bls.n	8013a04 <_strtod_l+0x55c>
 80139dc:	2601      	movs	r6, #1
 80139de:	4f29      	ldr	r7, [pc, #164]	; (8013a84 <_strtod_l+0x5dc>)
 80139e0:	4276      	negs	r6, r6
 80139e2:	2300      	movs	r3, #0
 80139e4:	9306      	str	r3, [sp, #24]
 80139e6:	e07b      	b.n	8013ae0 <_strtod_l+0x638>
 80139e8:	2201      	movs	r2, #1
 80139ea:	4214      	tst	r4, r2
 80139ec:	d007      	beq.n	80139fe <_strtod_l+0x556>
 80139ee:	4a22      	ldr	r2, [pc, #136]	; (8013a78 <_strtod_l+0x5d0>)
 80139f0:	00eb      	lsls	r3, r5, #3
 80139f2:	189b      	adds	r3, r3, r2
 80139f4:	681a      	ldr	r2, [r3, #0]
 80139f6:	685b      	ldr	r3, [r3, #4]
 80139f8:	f7ee fa1c 	bl	8001e34 <__aeabi_dmul>
 80139fc:	2301      	movs	r3, #1
 80139fe:	3501      	adds	r5, #1
 8013a00:	1064      	asrs	r4, r4, #1
 8013a02:	e7d1      	b.n	80139a8 <_strtod_l+0x500>
 8013a04:	23d4      	movs	r3, #212	; 0xd4
 8013a06:	049b      	lsls	r3, r3, #18
 8013a08:	18cf      	adds	r7, r1, r3
 8013a0a:	e7ea      	b.n	80139e2 <_strtod_l+0x53a>
 8013a0c:	2c00      	cmp	r4, #0
 8013a0e:	d0e8      	beq.n	80139e2 <_strtod_l+0x53a>
 8013a10:	230f      	movs	r3, #15
 8013a12:	4264      	negs	r4, r4
 8013a14:	4023      	ands	r3, r4
 8013a16:	d00a      	beq.n	8013a2e <_strtod_l+0x586>
 8013a18:	4a15      	ldr	r2, [pc, #84]	; (8013a70 <_strtod_l+0x5c8>)
 8013a1a:	00db      	lsls	r3, r3, #3
 8013a1c:	18d3      	adds	r3, r2, r3
 8013a1e:	0030      	movs	r0, r6
 8013a20:	681a      	ldr	r2, [r3, #0]
 8013a22:	685b      	ldr	r3, [r3, #4]
 8013a24:	0039      	movs	r1, r7
 8013a26:	f7ed fdfb 	bl	8001620 <__aeabi_ddiv>
 8013a2a:	0006      	movs	r6, r0
 8013a2c:	000f      	movs	r7, r1
 8013a2e:	1124      	asrs	r4, r4, #4
 8013a30:	d0d7      	beq.n	80139e2 <_strtod_l+0x53a>
 8013a32:	2c1f      	cmp	r4, #31
 8013a34:	dd28      	ble.n	8013a88 <_strtod_l+0x5e0>
 8013a36:	2400      	movs	r4, #0
 8013a38:	9405      	str	r4, [sp, #20]
 8013a3a:	940b      	str	r4, [sp, #44]	; 0x2c
 8013a3c:	940a      	str	r4, [sp, #40]	; 0x28
 8013a3e:	2322      	movs	r3, #34	; 0x22
 8013a40:	9a04      	ldr	r2, [sp, #16]
 8013a42:	2600      	movs	r6, #0
 8013a44:	6013      	str	r3, [r2, #0]
 8013a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a48:	2700      	movs	r7, #0
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d000      	beq.n	8013a50 <_strtod_l+0x5a8>
 8013a4e:	e76a      	b.n	8013926 <_strtod_l+0x47e>
 8013a50:	e56b      	b.n	801352a <_strtod_l+0x82>
 8013a52:	46c0      	nop			; (mov r8, r8)
 8013a54:	00004e1f 	.word	0x00004e1f
 8013a58:	0801a69d 	.word	0x0801a69d
 8013a5c:	0801a7f0 	.word	0x0801a7f0
 8013a60:	7ff00000 	.word	0x7ff00000
 8013a64:	0801a6a5 	.word	0x0801a6a5
 8013a68:	0801a65c 	.word	0x0801a65c
 8013a6c:	fff80000 	.word	0xfff80000
 8013a70:	0801a828 	.word	0x0801a828
 8013a74:	fcb00000 	.word	0xfcb00000
 8013a78:	0801a800 	.word	0x0801a800
 8013a7c:	7ca00000 	.word	0x7ca00000
 8013a80:	7c900000 	.word	0x7c900000
 8013a84:	7fefffff 	.word	0x7fefffff
 8013a88:	2310      	movs	r3, #16
 8013a8a:	4023      	ands	r3, r4
 8013a8c:	9306      	str	r3, [sp, #24]
 8013a8e:	d001      	beq.n	8013a94 <_strtod_l+0x5ec>
 8013a90:	236a      	movs	r3, #106	; 0x6a
 8013a92:	9306      	str	r3, [sp, #24]
 8013a94:	2300      	movs	r3, #0
 8013a96:	0030      	movs	r0, r6
 8013a98:	0039      	movs	r1, r7
 8013a9a:	001d      	movs	r5, r3
 8013a9c:	2c00      	cmp	r4, #0
 8013a9e:	dd00      	ble.n	8013aa2 <_strtod_l+0x5fa>
 8013aa0:	e10e      	b.n	8013cc0 <_strtod_l+0x818>
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d001      	beq.n	8013aaa <_strtod_l+0x602>
 8013aa6:	0006      	movs	r6, r0
 8013aa8:	000f      	movs	r7, r1
 8013aaa:	9b06      	ldr	r3, [sp, #24]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d00f      	beq.n	8013ad0 <_strtod_l+0x628>
 8013ab0:	236b      	movs	r3, #107	; 0x6b
 8013ab2:	0079      	lsls	r1, r7, #1
 8013ab4:	0d49      	lsrs	r1, r1, #21
 8013ab6:	003a      	movs	r2, r7
 8013ab8:	1a5b      	subs	r3, r3, r1
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	dd08      	ble.n	8013ad0 <_strtod_l+0x628>
 8013abe:	2b1f      	cmp	r3, #31
 8013ac0:	dc00      	bgt.n	8013ac4 <_strtod_l+0x61c>
 8013ac2:	e112      	b.n	8013cea <_strtod_l+0x842>
 8013ac4:	2600      	movs	r6, #0
 8013ac6:	2b34      	cmp	r3, #52	; 0x34
 8013ac8:	dc00      	bgt.n	8013acc <_strtod_l+0x624>
 8013aca:	e107      	b.n	8013cdc <_strtod_l+0x834>
 8013acc:	27dc      	movs	r7, #220	; 0xdc
 8013ace:	04bf      	lsls	r7, r7, #18
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	0030      	movs	r0, r6
 8013ad6:	0039      	movs	r1, r7
 8013ad8:	f7ec fcc0 	bl	800045c <__aeabi_dcmpeq>
 8013adc:	2800      	cmp	r0, #0
 8013ade:	d1aa      	bne.n	8013a36 <_strtod_l+0x58e>
 8013ae0:	9b08      	ldr	r3, [sp, #32]
 8013ae2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ae4:	9300      	str	r3, [sp, #0]
 8013ae6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013ae8:	9b05      	ldr	r3, [sp, #20]
 8013aea:	9804      	ldr	r0, [sp, #16]
 8013aec:	f003 f9ae 	bl	8016e4c <__s2b>
 8013af0:	900b      	str	r0, [sp, #44]	; 0x2c
 8013af2:	2800      	cmp	r0, #0
 8013af4:	d100      	bne.n	8013af8 <_strtod_l+0x650>
 8013af6:	e709      	b.n	801390c <_strtod_l+0x464>
 8013af8:	9b07      	ldr	r3, [sp, #28]
 8013afa:	9a07      	ldr	r2, [sp, #28]
 8013afc:	17db      	asrs	r3, r3, #31
 8013afe:	4252      	negs	r2, r2
 8013b00:	4013      	ands	r3, r2
 8013b02:	9315      	str	r3, [sp, #84]	; 0x54
 8013b04:	9b07      	ldr	r3, [sp, #28]
 8013b06:	2400      	movs	r4, #0
 8013b08:	43db      	mvns	r3, r3
 8013b0a:	9a07      	ldr	r2, [sp, #28]
 8013b0c:	17db      	asrs	r3, r3, #31
 8013b0e:	401a      	ands	r2, r3
 8013b10:	921c      	str	r2, [sp, #112]	; 0x70
 8013b12:	9405      	str	r4, [sp, #20]
 8013b14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b16:	9804      	ldr	r0, [sp, #16]
 8013b18:	6859      	ldr	r1, [r3, #4]
 8013b1a:	f003 f927 	bl	8016d6c <_Balloc>
 8013b1e:	900a      	str	r0, [sp, #40]	; 0x28
 8013b20:	2800      	cmp	r0, #0
 8013b22:	d100      	bne.n	8013b26 <_strtod_l+0x67e>
 8013b24:	e6f6      	b.n	8013914 <_strtod_l+0x46c>
 8013b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013b2a:	691b      	ldr	r3, [r3, #16]
 8013b2c:	310c      	adds	r1, #12
 8013b2e:	1c9a      	adds	r2, r3, #2
 8013b30:	0092      	lsls	r2, r2, #2
 8013b32:	300c      	adds	r0, #12
 8013b34:	9308      	str	r3, [sp, #32]
 8013b36:	f7ff fa32 	bl	8012f9e <memcpy>
 8013b3a:	ab24      	add	r3, sp, #144	; 0x90
 8013b3c:	9301      	str	r3, [sp, #4]
 8013b3e:	ab23      	add	r3, sp, #140	; 0x8c
 8013b40:	9300      	str	r3, [sp, #0]
 8013b42:	0032      	movs	r2, r6
 8013b44:	003b      	movs	r3, r7
 8013b46:	9804      	ldr	r0, [sp, #16]
 8013b48:	960e      	str	r6, [sp, #56]	; 0x38
 8013b4a:	970f      	str	r7, [sp, #60]	; 0x3c
 8013b4c:	f003 fc22 	bl	8017394 <__d2b>
 8013b50:	9022      	str	r0, [sp, #136]	; 0x88
 8013b52:	2800      	cmp	r0, #0
 8013b54:	d100      	bne.n	8013b58 <_strtod_l+0x6b0>
 8013b56:	e6dd      	b.n	8013914 <_strtod_l+0x46c>
 8013b58:	2101      	movs	r1, #1
 8013b5a:	9804      	ldr	r0, [sp, #16]
 8013b5c:	f003 f9fd 	bl	8016f5a <__i2b>
 8013b60:	9005      	str	r0, [sp, #20]
 8013b62:	2800      	cmp	r0, #0
 8013b64:	d100      	bne.n	8013b68 <_strtod_l+0x6c0>
 8013b66:	e6d5      	b.n	8013914 <_strtod_l+0x46c>
 8013b68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	da00      	bge.n	8013b70 <_strtod_l+0x6c8>
 8013b6e:	e0c1      	b.n	8013cf4 <_strtod_l+0x84c>
 8013b70:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013b72:	189d      	adds	r5, r3, r2
 8013b74:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013b76:	4694      	mov	ip, r2
 8013b78:	9906      	ldr	r1, [sp, #24]
 8013b7a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013b7c:	1a5b      	subs	r3, r3, r1
 8013b7e:	2136      	movs	r1, #54	; 0x36
 8013b80:	189b      	adds	r3, r3, r2
 8013b82:	1a8a      	subs	r2, r1, r2
 8013b84:	49b2      	ldr	r1, [pc, #712]	; (8013e50 <_strtod_l+0x9a8>)
 8013b86:	3b01      	subs	r3, #1
 8013b88:	2001      	movs	r0, #1
 8013b8a:	428b      	cmp	r3, r1
 8013b8c:	db00      	blt.n	8013b90 <_strtod_l+0x6e8>
 8013b8e:	e0bd      	b.n	8013d0c <_strtod_l+0x864>
 8013b90:	1ac9      	subs	r1, r1, r3
 8013b92:	1a52      	subs	r2, r2, r1
 8013b94:	291f      	cmp	r1, #31
 8013b96:	dd00      	ble.n	8013b9a <_strtod_l+0x6f2>
 8013b98:	e0b1      	b.n	8013cfe <_strtod_l+0x856>
 8013b9a:	4088      	lsls	r0, r1
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	9014      	str	r0, [sp, #80]	; 0x50
 8013ba0:	9310      	str	r3, [sp, #64]	; 0x40
 8013ba2:	18ab      	adds	r3, r5, r2
 8013ba4:	9308      	str	r3, [sp, #32]
 8013ba6:	0013      	movs	r3, r2
 8013ba8:	9a06      	ldr	r2, [sp, #24]
 8013baa:	4463      	add	r3, ip
 8013bac:	18d3      	adds	r3, r2, r3
 8013bae:	9a08      	ldr	r2, [sp, #32]
 8013bb0:	930c      	str	r3, [sp, #48]	; 0x30
 8013bb2:	002b      	movs	r3, r5
 8013bb4:	4295      	cmp	r5, r2
 8013bb6:	dd00      	ble.n	8013bba <_strtod_l+0x712>
 8013bb8:	0013      	movs	r3, r2
 8013bba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bbc:	4293      	cmp	r3, r2
 8013bbe:	dd00      	ble.n	8013bc2 <_strtod_l+0x71a>
 8013bc0:	0013      	movs	r3, r2
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	dd06      	ble.n	8013bd4 <_strtod_l+0x72c>
 8013bc6:	9a08      	ldr	r2, [sp, #32]
 8013bc8:	1aed      	subs	r5, r5, r3
 8013bca:	1ad2      	subs	r2, r2, r3
 8013bcc:	9208      	str	r2, [sp, #32]
 8013bce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bd0:	1ad2      	subs	r2, r2, r3
 8013bd2:	920c      	str	r2, [sp, #48]	; 0x30
 8013bd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d017      	beq.n	8013c0a <_strtod_l+0x762>
 8013bda:	001a      	movs	r2, r3
 8013bdc:	9905      	ldr	r1, [sp, #20]
 8013bde:	9804      	ldr	r0, [sp, #16]
 8013be0:	f003 fa54 	bl	801708c <__pow5mult>
 8013be4:	9005      	str	r0, [sp, #20]
 8013be6:	2800      	cmp	r0, #0
 8013be8:	d100      	bne.n	8013bec <_strtod_l+0x744>
 8013bea:	e693      	b.n	8013914 <_strtod_l+0x46c>
 8013bec:	0001      	movs	r1, r0
 8013bee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013bf0:	9804      	ldr	r0, [sp, #16]
 8013bf2:	f003 f9bb 	bl	8016f6c <__multiply>
 8013bf6:	9012      	str	r0, [sp, #72]	; 0x48
 8013bf8:	2800      	cmp	r0, #0
 8013bfa:	d100      	bne.n	8013bfe <_strtod_l+0x756>
 8013bfc:	e68a      	b.n	8013914 <_strtod_l+0x46c>
 8013bfe:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013c00:	9804      	ldr	r0, [sp, #16]
 8013c02:	f003 f8db 	bl	8016dbc <_Bfree>
 8013c06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c08:	9322      	str	r3, [sp, #136]	; 0x88
 8013c0a:	9b08      	ldr	r3, [sp, #32]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	dd00      	ble.n	8013c12 <_strtod_l+0x76a>
 8013c10:	e07f      	b.n	8013d12 <_strtod_l+0x86a>
 8013c12:	9b07      	ldr	r3, [sp, #28]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	dd08      	ble.n	8013c2a <_strtod_l+0x782>
 8013c18:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013c1a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013c1c:	9804      	ldr	r0, [sp, #16]
 8013c1e:	f003 fa35 	bl	801708c <__pow5mult>
 8013c22:	900a      	str	r0, [sp, #40]	; 0x28
 8013c24:	2800      	cmp	r0, #0
 8013c26:	d100      	bne.n	8013c2a <_strtod_l+0x782>
 8013c28:	e674      	b.n	8013914 <_strtod_l+0x46c>
 8013c2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	dd08      	ble.n	8013c42 <_strtod_l+0x79a>
 8013c30:	001a      	movs	r2, r3
 8013c32:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013c34:	9804      	ldr	r0, [sp, #16]
 8013c36:	f003 fa6b 	bl	8017110 <__lshift>
 8013c3a:	900a      	str	r0, [sp, #40]	; 0x28
 8013c3c:	2800      	cmp	r0, #0
 8013c3e:	d100      	bne.n	8013c42 <_strtod_l+0x79a>
 8013c40:	e668      	b.n	8013914 <_strtod_l+0x46c>
 8013c42:	2d00      	cmp	r5, #0
 8013c44:	dd08      	ble.n	8013c58 <_strtod_l+0x7b0>
 8013c46:	002a      	movs	r2, r5
 8013c48:	9905      	ldr	r1, [sp, #20]
 8013c4a:	9804      	ldr	r0, [sp, #16]
 8013c4c:	f003 fa60 	bl	8017110 <__lshift>
 8013c50:	9005      	str	r0, [sp, #20]
 8013c52:	2800      	cmp	r0, #0
 8013c54:	d100      	bne.n	8013c58 <_strtod_l+0x7b0>
 8013c56:	e65d      	b.n	8013914 <_strtod_l+0x46c>
 8013c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c5a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013c5c:	9804      	ldr	r0, [sp, #16]
 8013c5e:	f003 fac3 	bl	80171e8 <__mdiff>
 8013c62:	1e04      	subs	r4, r0, #0
 8013c64:	d100      	bne.n	8013c68 <_strtod_l+0x7c0>
 8013c66:	e655      	b.n	8013914 <_strtod_l+0x46c>
 8013c68:	2500      	movs	r5, #0
 8013c6a:	68c3      	ldr	r3, [r0, #12]
 8013c6c:	9905      	ldr	r1, [sp, #20]
 8013c6e:	60c5      	str	r5, [r0, #12]
 8013c70:	9312      	str	r3, [sp, #72]	; 0x48
 8013c72:	f003 fa9f 	bl	80171b4 <__mcmp>
 8013c76:	42a8      	cmp	r0, r5
 8013c78:	da55      	bge.n	8013d26 <_strtod_l+0x87e>
 8013c7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c7c:	42ab      	cmp	r3, r5
 8013c7e:	d11b      	bne.n	8013cb8 <_strtod_l+0x810>
 8013c80:	42ae      	cmp	r6, r5
 8013c82:	d119      	bne.n	8013cb8 <_strtod_l+0x810>
 8013c84:	033b      	lsls	r3, r7, #12
 8013c86:	42ab      	cmp	r3, r5
 8013c88:	d116      	bne.n	8013cb8 <_strtod_l+0x810>
 8013c8a:	22d6      	movs	r2, #214	; 0xd6
 8013c8c:	4b71      	ldr	r3, [pc, #452]	; (8013e54 <_strtod_l+0x9ac>)
 8013c8e:	04d2      	lsls	r2, r2, #19
 8013c90:	403b      	ands	r3, r7
 8013c92:	4293      	cmp	r3, r2
 8013c94:	d910      	bls.n	8013cb8 <_strtod_l+0x810>
 8013c96:	6963      	ldr	r3, [r4, #20]
 8013c98:	42ab      	cmp	r3, r5
 8013c9a:	d102      	bne.n	8013ca2 <_strtod_l+0x7fa>
 8013c9c:	6923      	ldr	r3, [r4, #16]
 8013c9e:	2b01      	cmp	r3, #1
 8013ca0:	dd0a      	ble.n	8013cb8 <_strtod_l+0x810>
 8013ca2:	0021      	movs	r1, r4
 8013ca4:	2201      	movs	r2, #1
 8013ca6:	9804      	ldr	r0, [sp, #16]
 8013ca8:	f003 fa32 	bl	8017110 <__lshift>
 8013cac:	9905      	ldr	r1, [sp, #20]
 8013cae:	0004      	movs	r4, r0
 8013cb0:	f003 fa80 	bl	80171b4 <__mcmp>
 8013cb4:	2800      	cmp	r0, #0
 8013cb6:	dc6b      	bgt.n	8013d90 <_strtod_l+0x8e8>
 8013cb8:	9b06      	ldr	r3, [sp, #24]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d178      	bne.n	8013db0 <_strtod_l+0x908>
 8013cbe:	e632      	b.n	8013926 <_strtod_l+0x47e>
 8013cc0:	2201      	movs	r2, #1
 8013cc2:	4214      	tst	r4, r2
 8013cc4:	d007      	beq.n	8013cd6 <_strtod_l+0x82e>
 8013cc6:	4a64      	ldr	r2, [pc, #400]	; (8013e58 <_strtod_l+0x9b0>)
 8013cc8:	00eb      	lsls	r3, r5, #3
 8013cca:	18d3      	adds	r3, r2, r3
 8013ccc:	681a      	ldr	r2, [r3, #0]
 8013cce:	685b      	ldr	r3, [r3, #4]
 8013cd0:	f7ee f8b0 	bl	8001e34 <__aeabi_dmul>
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	3501      	adds	r5, #1
 8013cd8:	1064      	asrs	r4, r4, #1
 8013cda:	e6df      	b.n	8013a9c <_strtod_l+0x5f4>
 8013cdc:	2101      	movs	r1, #1
 8013cde:	3b20      	subs	r3, #32
 8013ce0:	4249      	negs	r1, r1
 8013ce2:	4099      	lsls	r1, r3
 8013ce4:	400a      	ands	r2, r1
 8013ce6:	0017      	movs	r7, r2
 8013ce8:	e6f2      	b.n	8013ad0 <_strtod_l+0x628>
 8013cea:	2201      	movs	r2, #1
 8013cec:	4252      	negs	r2, r2
 8013cee:	409a      	lsls	r2, r3
 8013cf0:	4016      	ands	r6, r2
 8013cf2:	e6ed      	b.n	8013ad0 <_strtod_l+0x628>
 8013cf4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013cf6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013cf8:	1ad2      	subs	r2, r2, r3
 8013cfa:	4694      	mov	ip, r2
 8013cfc:	e73c      	b.n	8013b78 <_strtod_l+0x6d0>
 8013cfe:	4957      	ldr	r1, [pc, #348]	; (8013e5c <_strtod_l+0x9b4>)
 8013d00:	1acb      	subs	r3, r1, r3
 8013d02:	0001      	movs	r1, r0
 8013d04:	4099      	lsls	r1, r3
 8013d06:	9110      	str	r1, [sp, #64]	; 0x40
 8013d08:	9014      	str	r0, [sp, #80]	; 0x50
 8013d0a:	e74a      	b.n	8013ba2 <_strtod_l+0x6fa>
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	9310      	str	r3, [sp, #64]	; 0x40
 8013d10:	e7fa      	b.n	8013d08 <_strtod_l+0x860>
 8013d12:	9a08      	ldr	r2, [sp, #32]
 8013d14:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013d16:	9804      	ldr	r0, [sp, #16]
 8013d18:	f003 f9fa 	bl	8017110 <__lshift>
 8013d1c:	9022      	str	r0, [sp, #136]	; 0x88
 8013d1e:	2800      	cmp	r0, #0
 8013d20:	d000      	beq.n	8013d24 <_strtod_l+0x87c>
 8013d22:	e776      	b.n	8013c12 <_strtod_l+0x76a>
 8013d24:	e5f6      	b.n	8013914 <_strtod_l+0x46c>
 8013d26:	970c      	str	r7, [sp, #48]	; 0x30
 8013d28:	2800      	cmp	r0, #0
 8013d2a:	d000      	beq.n	8013d2e <_strtod_l+0x886>
 8013d2c:	e0a0      	b.n	8013e70 <_strtod_l+0x9c8>
 8013d2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013d30:	033b      	lsls	r3, r7, #12
 8013d32:	0b1b      	lsrs	r3, r3, #12
 8013d34:	2a00      	cmp	r2, #0
 8013d36:	d027      	beq.n	8013d88 <_strtod_l+0x8e0>
 8013d38:	4a49      	ldr	r2, [pc, #292]	; (8013e60 <_strtod_l+0x9b8>)
 8013d3a:	4293      	cmp	r3, r2
 8013d3c:	d157      	bne.n	8013dee <_strtod_l+0x946>
 8013d3e:	2201      	movs	r2, #1
 8013d40:	9b06      	ldr	r3, [sp, #24]
 8013d42:	4252      	negs	r2, r2
 8013d44:	0031      	movs	r1, r6
 8013d46:	0010      	movs	r0, r2
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d00b      	beq.n	8013d64 <_strtod_l+0x8bc>
 8013d4c:	25d4      	movs	r5, #212	; 0xd4
 8013d4e:	4b41      	ldr	r3, [pc, #260]	; (8013e54 <_strtod_l+0x9ac>)
 8013d50:	04ed      	lsls	r5, r5, #19
 8013d52:	403b      	ands	r3, r7
 8013d54:	0010      	movs	r0, r2
 8013d56:	42ab      	cmp	r3, r5
 8013d58:	d804      	bhi.n	8013d64 <_strtod_l+0x8bc>
 8013d5a:	306c      	adds	r0, #108	; 0x6c
 8013d5c:	0d1b      	lsrs	r3, r3, #20
 8013d5e:	1ac3      	subs	r3, r0, r3
 8013d60:	409a      	lsls	r2, r3
 8013d62:	0010      	movs	r0, r2
 8013d64:	4281      	cmp	r1, r0
 8013d66:	d142      	bne.n	8013dee <_strtod_l+0x946>
 8013d68:	4b3e      	ldr	r3, [pc, #248]	; (8013e64 <_strtod_l+0x9bc>)
 8013d6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	d102      	bne.n	8013d76 <_strtod_l+0x8ce>
 8013d70:	1c4b      	adds	r3, r1, #1
 8013d72:	d100      	bne.n	8013d76 <_strtod_l+0x8ce>
 8013d74:	e5ce      	b.n	8013914 <_strtod_l+0x46c>
 8013d76:	4b37      	ldr	r3, [pc, #220]	; (8013e54 <_strtod_l+0x9ac>)
 8013d78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d7a:	2600      	movs	r6, #0
 8013d7c:	401a      	ands	r2, r3
 8013d7e:	0013      	movs	r3, r2
 8013d80:	2280      	movs	r2, #128	; 0x80
 8013d82:	0352      	lsls	r2, r2, #13
 8013d84:	189f      	adds	r7, r3, r2
 8013d86:	e797      	b.n	8013cb8 <_strtod_l+0x810>
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d130      	bne.n	8013dee <_strtod_l+0x946>
 8013d8c:	2e00      	cmp	r6, #0
 8013d8e:	d12e      	bne.n	8013dee <_strtod_l+0x946>
 8013d90:	9906      	ldr	r1, [sp, #24]
 8013d92:	003b      	movs	r3, r7
 8013d94:	4a2f      	ldr	r2, [pc, #188]	; (8013e54 <_strtod_l+0x9ac>)
 8013d96:	2900      	cmp	r1, #0
 8013d98:	d020      	beq.n	8013ddc <_strtod_l+0x934>
 8013d9a:	0011      	movs	r1, r2
 8013d9c:	20d6      	movs	r0, #214	; 0xd6
 8013d9e:	4039      	ands	r1, r7
 8013da0:	04c0      	lsls	r0, r0, #19
 8013da2:	4281      	cmp	r1, r0
 8013da4:	dc1a      	bgt.n	8013ddc <_strtod_l+0x934>
 8013da6:	23dc      	movs	r3, #220	; 0xdc
 8013da8:	049b      	lsls	r3, r3, #18
 8013daa:	4299      	cmp	r1, r3
 8013dac:	dc00      	bgt.n	8013db0 <_strtod_l+0x908>
 8013dae:	e646      	b.n	8013a3e <_strtod_l+0x596>
 8013db0:	4b2d      	ldr	r3, [pc, #180]	; (8013e68 <_strtod_l+0x9c0>)
 8013db2:	0030      	movs	r0, r6
 8013db4:	931b      	str	r3, [sp, #108]	; 0x6c
 8013db6:	2300      	movs	r3, #0
 8013db8:	931a      	str	r3, [sp, #104]	; 0x68
 8013dba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013dbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013dbe:	0039      	movs	r1, r7
 8013dc0:	f7ee f838 	bl	8001e34 <__aeabi_dmul>
 8013dc4:	0006      	movs	r6, r0
 8013dc6:	000f      	movs	r7, r1
 8013dc8:	1e0b      	subs	r3, r1, #0
 8013dca:	d000      	beq.n	8013dce <_strtod_l+0x926>
 8013dcc:	e5ab      	b.n	8013926 <_strtod_l+0x47e>
 8013dce:	2800      	cmp	r0, #0
 8013dd0:	d000      	beq.n	8013dd4 <_strtod_l+0x92c>
 8013dd2:	e5a8      	b.n	8013926 <_strtod_l+0x47e>
 8013dd4:	9a04      	ldr	r2, [sp, #16]
 8013dd6:	3322      	adds	r3, #34	; 0x22
 8013dd8:	6013      	str	r3, [r2, #0]
 8013dda:	e5a4      	b.n	8013926 <_strtod_l+0x47e>
 8013ddc:	2601      	movs	r6, #1
 8013dde:	4013      	ands	r3, r2
 8013de0:	4a22      	ldr	r2, [pc, #136]	; (8013e6c <_strtod_l+0x9c4>)
 8013de2:	4276      	negs	r6, r6
 8013de4:	189b      	adds	r3, r3, r2
 8013de6:	4a1e      	ldr	r2, [pc, #120]	; (8013e60 <_strtod_l+0x9b8>)
 8013de8:	431a      	orrs	r2, r3
 8013dea:	0017      	movs	r7, r2
 8013dec:	e764      	b.n	8013cb8 <_strtod_l+0x810>
 8013dee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d015      	beq.n	8013e20 <_strtod_l+0x978>
 8013df4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013df6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013df8:	4213      	tst	r3, r2
 8013dfa:	d100      	bne.n	8013dfe <_strtod_l+0x956>
 8013dfc:	e75c      	b.n	8013cb8 <_strtod_l+0x810>
 8013dfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e00:	9a06      	ldr	r2, [sp, #24]
 8013e02:	0030      	movs	r0, r6
 8013e04:	0039      	movs	r1, r7
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d00f      	beq.n	8013e2a <_strtod_l+0x982>
 8013e0a:	f7ff fb35 	bl	8013478 <sulp>
 8013e0e:	0002      	movs	r2, r0
 8013e10:	000b      	movs	r3, r1
 8013e12:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013e14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013e16:	f7ed f8e7 	bl	8000fe8 <__aeabi_dadd>
 8013e1a:	0006      	movs	r6, r0
 8013e1c:	000f      	movs	r7, r1
 8013e1e:	e74b      	b.n	8013cb8 <_strtod_l+0x810>
 8013e20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013e22:	4233      	tst	r3, r6
 8013e24:	d100      	bne.n	8013e28 <_strtod_l+0x980>
 8013e26:	e747      	b.n	8013cb8 <_strtod_l+0x810>
 8013e28:	e7e9      	b.n	8013dfe <_strtod_l+0x956>
 8013e2a:	f7ff fb25 	bl	8013478 <sulp>
 8013e2e:	0002      	movs	r2, r0
 8013e30:	000b      	movs	r3, r1
 8013e32:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013e34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013e36:	f7ee fa6f 	bl	8002318 <__aeabi_dsub>
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	0006      	movs	r6, r0
 8013e40:	000f      	movs	r7, r1
 8013e42:	f7ec fb0b 	bl	800045c <__aeabi_dcmpeq>
 8013e46:	2800      	cmp	r0, #0
 8013e48:	d000      	beq.n	8013e4c <_strtod_l+0x9a4>
 8013e4a:	e5f8      	b.n	8013a3e <_strtod_l+0x596>
 8013e4c:	e734      	b.n	8013cb8 <_strtod_l+0x810>
 8013e4e:	46c0      	nop			; (mov r8, r8)
 8013e50:	fffffc02 	.word	0xfffffc02
 8013e54:	7ff00000 	.word	0x7ff00000
 8013e58:	0801a670 	.word	0x0801a670
 8013e5c:	fffffbe2 	.word	0xfffffbe2
 8013e60:	000fffff 	.word	0x000fffff
 8013e64:	7fefffff 	.word	0x7fefffff
 8013e68:	39500000 	.word	0x39500000
 8013e6c:	fff00000 	.word	0xfff00000
 8013e70:	9905      	ldr	r1, [sp, #20]
 8013e72:	0020      	movs	r0, r4
 8013e74:	f003 fae2 	bl	801743c <__ratio>
 8013e78:	2380      	movs	r3, #128	; 0x80
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	05db      	lsls	r3, r3, #23
 8013e7e:	9008      	str	r0, [sp, #32]
 8013e80:	9109      	str	r1, [sp, #36]	; 0x24
 8013e82:	f7ec fafb 	bl	800047c <__aeabi_dcmple>
 8013e86:	2800      	cmp	r0, #0
 8013e88:	d100      	bne.n	8013e8c <_strtod_l+0x9e4>
 8013e8a:	e07f      	b.n	8013f8c <_strtod_l+0xae4>
 8013e8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d04b      	beq.n	8013f2a <_strtod_l+0xa82>
 8013e92:	2200      	movs	r2, #0
 8013e94:	4b8a      	ldr	r3, [pc, #552]	; (80140c0 <_strtod_l+0xc18>)
 8013e96:	9210      	str	r2, [sp, #64]	; 0x40
 8013e98:	9311      	str	r3, [sp, #68]	; 0x44
 8013e9a:	4b89      	ldr	r3, [pc, #548]	; (80140c0 <_strtod_l+0xc18>)
 8013e9c:	9308      	str	r3, [sp, #32]
 8013e9e:	4a89      	ldr	r2, [pc, #548]	; (80140c4 <_strtod_l+0xc1c>)
 8013ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ea2:	4013      	ands	r3, r2
 8013ea4:	9314      	str	r3, [sp, #80]	; 0x50
 8013ea6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013ea8:	4b87      	ldr	r3, [pc, #540]	; (80140c8 <_strtod_l+0xc20>)
 8013eaa:	429a      	cmp	r2, r3
 8013eac:	d000      	beq.n	8013eb0 <_strtod_l+0xa08>
 8013eae:	e0ba      	b.n	8014026 <_strtod_l+0xb7e>
 8013eb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013eb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013eb4:	921a      	str	r2, [sp, #104]	; 0x68
 8013eb6:	931b      	str	r3, [sp, #108]	; 0x6c
 8013eb8:	4a84      	ldr	r2, [pc, #528]	; (80140cc <_strtod_l+0xc24>)
 8013eba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ebc:	4694      	mov	ip, r2
 8013ebe:	4463      	add	r3, ip
 8013ec0:	001f      	movs	r7, r3
 8013ec2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013ec4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ec6:	0030      	movs	r0, r6
 8013ec8:	0039      	movs	r1, r7
 8013eca:	920c      	str	r2, [sp, #48]	; 0x30
 8013ecc:	930d      	str	r3, [sp, #52]	; 0x34
 8013ece:	f003 f9ef 	bl	80172b0 <__ulp>
 8013ed2:	0002      	movs	r2, r0
 8013ed4:	000b      	movs	r3, r1
 8013ed6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013ed8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013eda:	f7ed ffab 	bl	8001e34 <__aeabi_dmul>
 8013ede:	0032      	movs	r2, r6
 8013ee0:	003b      	movs	r3, r7
 8013ee2:	f7ed f881 	bl	8000fe8 <__aeabi_dadd>
 8013ee6:	4a77      	ldr	r2, [pc, #476]	; (80140c4 <_strtod_l+0xc1c>)
 8013ee8:	4b79      	ldr	r3, [pc, #484]	; (80140d0 <_strtod_l+0xc28>)
 8013eea:	0006      	movs	r6, r0
 8013eec:	400a      	ands	r2, r1
 8013eee:	429a      	cmp	r2, r3
 8013ef0:	d964      	bls.n	8013fbc <_strtod_l+0xb14>
 8013ef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ef4:	4a77      	ldr	r2, [pc, #476]	; (80140d4 <_strtod_l+0xc2c>)
 8013ef6:	4293      	cmp	r3, r2
 8013ef8:	d103      	bne.n	8013f02 <_strtod_l+0xa5a>
 8013efa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013efc:	3301      	adds	r3, #1
 8013efe:	d100      	bne.n	8013f02 <_strtod_l+0xa5a>
 8013f00:	e508      	b.n	8013914 <_strtod_l+0x46c>
 8013f02:	2601      	movs	r6, #1
 8013f04:	4f73      	ldr	r7, [pc, #460]	; (80140d4 <_strtod_l+0xc2c>)
 8013f06:	4276      	negs	r6, r6
 8013f08:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013f0a:	9804      	ldr	r0, [sp, #16]
 8013f0c:	f002 ff56 	bl	8016dbc <_Bfree>
 8013f10:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f12:	9804      	ldr	r0, [sp, #16]
 8013f14:	f002 ff52 	bl	8016dbc <_Bfree>
 8013f18:	9905      	ldr	r1, [sp, #20]
 8013f1a:	9804      	ldr	r0, [sp, #16]
 8013f1c:	f002 ff4e 	bl	8016dbc <_Bfree>
 8013f20:	0021      	movs	r1, r4
 8013f22:	9804      	ldr	r0, [sp, #16]
 8013f24:	f002 ff4a 	bl	8016dbc <_Bfree>
 8013f28:	e5f4      	b.n	8013b14 <_strtod_l+0x66c>
 8013f2a:	2e00      	cmp	r6, #0
 8013f2c:	d11e      	bne.n	8013f6c <_strtod_l+0xac4>
 8013f2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f30:	031b      	lsls	r3, r3, #12
 8013f32:	d121      	bne.n	8013f78 <_strtod_l+0xad0>
 8013f34:	9808      	ldr	r0, [sp, #32]
 8013f36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f38:	2200      	movs	r2, #0
 8013f3a:	4b61      	ldr	r3, [pc, #388]	; (80140c0 <_strtod_l+0xc18>)
 8013f3c:	f7ec fa94 	bl	8000468 <__aeabi_dcmplt>
 8013f40:	2800      	cmp	r0, #0
 8013f42:	d11f      	bne.n	8013f84 <_strtod_l+0xadc>
 8013f44:	9808      	ldr	r0, [sp, #32]
 8013f46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f48:	2200      	movs	r2, #0
 8013f4a:	4b63      	ldr	r3, [pc, #396]	; (80140d8 <_strtod_l+0xc30>)
 8013f4c:	f7ed ff72 	bl	8001e34 <__aeabi_dmul>
 8013f50:	0005      	movs	r5, r0
 8013f52:	9108      	str	r1, [sp, #32]
 8013f54:	2280      	movs	r2, #128	; 0x80
 8013f56:	0612      	lsls	r2, r2, #24
 8013f58:	4694      	mov	ip, r2
 8013f5a:	9b08      	ldr	r3, [sp, #32]
 8013f5c:	951e      	str	r5, [sp, #120]	; 0x78
 8013f5e:	4463      	add	r3, ip
 8013f60:	931f      	str	r3, [sp, #124]	; 0x7c
 8013f62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013f64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013f66:	9210      	str	r2, [sp, #64]	; 0x40
 8013f68:	9311      	str	r3, [sp, #68]	; 0x44
 8013f6a:	e798      	b.n	8013e9e <_strtod_l+0x9f6>
 8013f6c:	2e01      	cmp	r6, #1
 8013f6e:	d103      	bne.n	8013f78 <_strtod_l+0xad0>
 8013f70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d100      	bne.n	8013f78 <_strtod_l+0xad0>
 8013f76:	e562      	b.n	8013a3e <_strtod_l+0x596>
 8013f78:	2200      	movs	r2, #0
 8013f7a:	4b58      	ldr	r3, [pc, #352]	; (80140dc <_strtod_l+0xc34>)
 8013f7c:	2500      	movs	r5, #0
 8013f7e:	9210      	str	r2, [sp, #64]	; 0x40
 8013f80:	9311      	str	r3, [sp, #68]	; 0x44
 8013f82:	e78a      	b.n	8013e9a <_strtod_l+0x9f2>
 8013f84:	4b54      	ldr	r3, [pc, #336]	; (80140d8 <_strtod_l+0xc30>)
 8013f86:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013f88:	9308      	str	r3, [sp, #32]
 8013f8a:	e7e3      	b.n	8013f54 <_strtod_l+0xaac>
 8013f8c:	4b52      	ldr	r3, [pc, #328]	; (80140d8 <_strtod_l+0xc30>)
 8013f8e:	9808      	ldr	r0, [sp, #32]
 8013f90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f92:	2200      	movs	r2, #0
 8013f94:	f7ed ff4e 	bl	8001e34 <__aeabi_dmul>
 8013f98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013f9a:	0005      	movs	r5, r0
 8013f9c:	9108      	str	r1, [sp, #32]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d107      	bne.n	8013fb2 <_strtod_l+0xb0a>
 8013fa2:	2380      	movs	r3, #128	; 0x80
 8013fa4:	061b      	lsls	r3, r3, #24
 8013fa6:	18cb      	adds	r3, r1, r3
 8013fa8:	9016      	str	r0, [sp, #88]	; 0x58
 8013faa:	9317      	str	r3, [sp, #92]	; 0x5c
 8013fac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013fae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013fb0:	e7d9      	b.n	8013f66 <_strtod_l+0xabe>
 8013fb2:	0002      	movs	r2, r0
 8013fb4:	9b08      	ldr	r3, [sp, #32]
 8013fb6:	9216      	str	r2, [sp, #88]	; 0x58
 8013fb8:	9317      	str	r3, [sp, #92]	; 0x5c
 8013fba:	e7f7      	b.n	8013fac <_strtod_l+0xb04>
 8013fbc:	23d4      	movs	r3, #212	; 0xd4
 8013fbe:	049b      	lsls	r3, r3, #18
 8013fc0:	18cf      	adds	r7, r1, r3
 8013fc2:	9b06      	ldr	r3, [sp, #24]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d19f      	bne.n	8013f08 <_strtod_l+0xa60>
 8013fc8:	4b3e      	ldr	r3, [pc, #248]	; (80140c4 <_strtod_l+0xc1c>)
 8013fca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013fcc:	970c      	str	r7, [sp, #48]	; 0x30
 8013fce:	403b      	ands	r3, r7
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	d199      	bne.n	8013f08 <_strtod_l+0xa60>
 8013fd4:	9908      	ldr	r1, [sp, #32]
 8013fd6:	0028      	movs	r0, r5
 8013fd8:	f7ee fd02 	bl	80029e0 <__aeabi_d2iz>
 8013fdc:	f7ee fd36 	bl	8002a4c <__aeabi_i2d>
 8013fe0:	000b      	movs	r3, r1
 8013fe2:	0002      	movs	r2, r0
 8013fe4:	9908      	ldr	r1, [sp, #32]
 8013fe6:	0028      	movs	r0, r5
 8013fe8:	f7ee f996 	bl	8002318 <__aeabi_dsub>
 8013fec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013fee:	9008      	str	r0, [sp, #32]
 8013ff0:	9109      	str	r1, [sp, #36]	; 0x24
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d104      	bne.n	8014000 <_strtod_l+0xb58>
 8013ff6:	2e00      	cmp	r6, #0
 8013ff8:	d102      	bne.n	8014000 <_strtod_l+0xb58>
 8013ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ffc:	031b      	lsls	r3, r3, #12
 8013ffe:	d058      	beq.n	80140b2 <_strtod_l+0xc0a>
 8014000:	9808      	ldr	r0, [sp, #32]
 8014002:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014004:	4a36      	ldr	r2, [pc, #216]	; (80140e0 <_strtod_l+0xc38>)
 8014006:	4b37      	ldr	r3, [pc, #220]	; (80140e4 <_strtod_l+0xc3c>)
 8014008:	f7ec fa2e 	bl	8000468 <__aeabi_dcmplt>
 801400c:	2800      	cmp	r0, #0
 801400e:	d000      	beq.n	8014012 <_strtod_l+0xb6a>
 8014010:	e489      	b.n	8013926 <_strtod_l+0x47e>
 8014012:	9808      	ldr	r0, [sp, #32]
 8014014:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014016:	4a34      	ldr	r2, [pc, #208]	; (80140e8 <_strtod_l+0xc40>)
 8014018:	4b2f      	ldr	r3, [pc, #188]	; (80140d8 <_strtod_l+0xc30>)
 801401a:	f7ec fa39 	bl	8000490 <__aeabi_dcmpgt>
 801401e:	2800      	cmp	r0, #0
 8014020:	d100      	bne.n	8014024 <_strtod_l+0xb7c>
 8014022:	e771      	b.n	8013f08 <_strtod_l+0xa60>
 8014024:	e47f      	b.n	8013926 <_strtod_l+0x47e>
 8014026:	9b06      	ldr	r3, [sp, #24]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d02a      	beq.n	8014082 <_strtod_l+0xbda>
 801402c:	23d4      	movs	r3, #212	; 0xd4
 801402e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014030:	04db      	lsls	r3, r3, #19
 8014032:	429a      	cmp	r2, r3
 8014034:	d825      	bhi.n	8014082 <_strtod_l+0xbda>
 8014036:	4a2d      	ldr	r2, [pc, #180]	; (80140ec <_strtod_l+0xc44>)
 8014038:	4b2d      	ldr	r3, [pc, #180]	; (80140f0 <_strtod_l+0xc48>)
 801403a:	0028      	movs	r0, r5
 801403c:	9908      	ldr	r1, [sp, #32]
 801403e:	f7ec fa1d 	bl	800047c <__aeabi_dcmple>
 8014042:	2800      	cmp	r0, #0
 8014044:	d016      	beq.n	8014074 <_strtod_l+0xbcc>
 8014046:	0028      	movs	r0, r5
 8014048:	9908      	ldr	r1, [sp, #32]
 801404a:	f7ec fad1 	bl	80005f0 <__aeabi_d2uiz>
 801404e:	2800      	cmp	r0, #0
 8014050:	d100      	bne.n	8014054 <_strtod_l+0xbac>
 8014052:	3001      	adds	r0, #1
 8014054:	f7ee fd34 	bl	8002ac0 <__aeabi_ui2d>
 8014058:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801405a:	0005      	movs	r5, r0
 801405c:	9108      	str	r1, [sp, #32]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d122      	bne.n	80140a8 <_strtod_l+0xc00>
 8014062:	2380      	movs	r3, #128	; 0x80
 8014064:	061b      	lsls	r3, r3, #24
 8014066:	18cb      	adds	r3, r1, r3
 8014068:	9018      	str	r0, [sp, #96]	; 0x60
 801406a:	9319      	str	r3, [sp, #100]	; 0x64
 801406c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801406e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014070:	9210      	str	r2, [sp, #64]	; 0x40
 8014072:	9311      	str	r3, [sp, #68]	; 0x44
 8014074:	22d6      	movs	r2, #214	; 0xd6
 8014076:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014078:	04d2      	lsls	r2, r2, #19
 801407a:	189b      	adds	r3, r3, r2
 801407c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801407e:	1a9b      	subs	r3, r3, r2
 8014080:	9311      	str	r3, [sp, #68]	; 0x44
 8014082:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014084:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014086:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014088:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801408a:	f003 f911 	bl	80172b0 <__ulp>
 801408e:	0002      	movs	r2, r0
 8014090:	000b      	movs	r3, r1
 8014092:	0030      	movs	r0, r6
 8014094:	0039      	movs	r1, r7
 8014096:	f7ed fecd 	bl	8001e34 <__aeabi_dmul>
 801409a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801409c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801409e:	f7ec ffa3 	bl	8000fe8 <__aeabi_dadd>
 80140a2:	0006      	movs	r6, r0
 80140a4:	000f      	movs	r7, r1
 80140a6:	e78c      	b.n	8013fc2 <_strtod_l+0xb1a>
 80140a8:	0002      	movs	r2, r0
 80140aa:	9b08      	ldr	r3, [sp, #32]
 80140ac:	9218      	str	r2, [sp, #96]	; 0x60
 80140ae:	9319      	str	r3, [sp, #100]	; 0x64
 80140b0:	e7dc      	b.n	801406c <_strtod_l+0xbc4>
 80140b2:	4a0b      	ldr	r2, [pc, #44]	; (80140e0 <_strtod_l+0xc38>)
 80140b4:	4b0f      	ldr	r3, [pc, #60]	; (80140f4 <_strtod_l+0xc4c>)
 80140b6:	9808      	ldr	r0, [sp, #32]
 80140b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140ba:	f7ec f9d5 	bl	8000468 <__aeabi_dcmplt>
 80140be:	e7ae      	b.n	801401e <_strtod_l+0xb76>
 80140c0:	3ff00000 	.word	0x3ff00000
 80140c4:	7ff00000 	.word	0x7ff00000
 80140c8:	7fe00000 	.word	0x7fe00000
 80140cc:	fcb00000 	.word	0xfcb00000
 80140d0:	7c9fffff 	.word	0x7c9fffff
 80140d4:	7fefffff 	.word	0x7fefffff
 80140d8:	3fe00000 	.word	0x3fe00000
 80140dc:	bff00000 	.word	0xbff00000
 80140e0:	94a03595 	.word	0x94a03595
 80140e4:	3fdfffff 	.word	0x3fdfffff
 80140e8:	35afe535 	.word	0x35afe535
 80140ec:	ffc00000 	.word	0xffc00000
 80140f0:	41dfffff 	.word	0x41dfffff
 80140f4:	3fcfffff 	.word	0x3fcfffff

080140f8 <strtod>:
 80140f8:	4b06      	ldr	r3, [pc, #24]	; (8014114 <strtod+0x1c>)
 80140fa:	b510      	push	{r4, lr}
 80140fc:	0004      	movs	r4, r0
 80140fe:	6818      	ldr	r0, [r3, #0]
 8014100:	000a      	movs	r2, r1
 8014102:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014104:	2b00      	cmp	r3, #0
 8014106:	d100      	bne.n	801410a <strtod+0x12>
 8014108:	4b03      	ldr	r3, [pc, #12]	; (8014118 <strtod+0x20>)
 801410a:	0021      	movs	r1, r4
 801410c:	f7ff f9cc 	bl	80134a8 <_strtod_l>
 8014110:	bd10      	pop	{r4, pc}
 8014112:	46c0      	nop			; (mov r8, r8)
 8014114:	200000a8 	.word	0x200000a8
 8014118:	200004d8 	.word	0x200004d8

0801411c <strtok>:
 801411c:	4b03      	ldr	r3, [pc, #12]	; (801412c <strtok+0x10>)
 801411e:	b510      	push	{r4, lr}
 8014120:	681a      	ldr	r2, [r3, #0]
 8014122:	2301      	movs	r3, #1
 8014124:	325c      	adds	r2, #92	; 0x5c
 8014126:	f000 f803 	bl	8014130 <__strtok_r>
 801412a:	bd10      	pop	{r4, pc}
 801412c:	200000a8 	.word	0x200000a8

08014130 <__strtok_r>:
 8014130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014132:	2800      	cmp	r0, #0
 8014134:	d104      	bne.n	8014140 <__strtok_r+0x10>
 8014136:	6810      	ldr	r0, [r2, #0]
 8014138:	2800      	cmp	r0, #0
 801413a:	d101      	bne.n	8014140 <__strtok_r+0x10>
 801413c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801413e:	0020      	movs	r0, r4
 8014140:	000e      	movs	r6, r1
 8014142:	7805      	ldrb	r5, [r0, #0]
 8014144:	1c44      	adds	r4, r0, #1
 8014146:	7837      	ldrb	r7, [r6, #0]
 8014148:	2f00      	cmp	r7, #0
 801414a:	d104      	bne.n	8014156 <__strtok_r+0x26>
 801414c:	2d00      	cmp	r5, #0
 801414e:	d110      	bne.n	8014172 <__strtok_r+0x42>
 8014150:	6015      	str	r5, [r2, #0]
 8014152:	0028      	movs	r0, r5
 8014154:	e7f2      	b.n	801413c <__strtok_r+0xc>
 8014156:	3601      	adds	r6, #1
 8014158:	42bd      	cmp	r5, r7
 801415a:	d1f4      	bne.n	8014146 <__strtok_r+0x16>
 801415c:	2b00      	cmp	r3, #0
 801415e:	d1ee      	bne.n	801413e <__strtok_r+0xe>
 8014160:	6014      	str	r4, [r2, #0]
 8014162:	7003      	strb	r3, [r0, #0]
 8014164:	e7ea      	b.n	801413c <__strtok_r+0xc>
 8014166:	0033      	movs	r3, r6
 8014168:	e00d      	b.n	8014186 <__strtok_r+0x56>
 801416a:	3501      	adds	r5, #1
 801416c:	2f00      	cmp	r7, #0
 801416e:	d103      	bne.n	8014178 <__strtok_r+0x48>
 8014170:	001c      	movs	r4, r3
 8014172:	000d      	movs	r5, r1
 8014174:	7826      	ldrb	r6, [r4, #0]
 8014176:	1c63      	adds	r3, r4, #1
 8014178:	782f      	ldrb	r7, [r5, #0]
 801417a:	42be      	cmp	r6, r7
 801417c:	d1f5      	bne.n	801416a <__strtok_r+0x3a>
 801417e:	2e00      	cmp	r6, #0
 8014180:	d0f1      	beq.n	8014166 <__strtok_r+0x36>
 8014182:	2100      	movs	r1, #0
 8014184:	7021      	strb	r1, [r4, #0]
 8014186:	6013      	str	r3, [r2, #0]
 8014188:	e7d8      	b.n	801413c <__strtok_r+0xc>
	...

0801418c <_strtol_l.isra.0>:
 801418c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801418e:	001f      	movs	r7, r3
 8014190:	000e      	movs	r6, r1
 8014192:	b087      	sub	sp, #28
 8014194:	9005      	str	r0, [sp, #20]
 8014196:	9101      	str	r1, [sp, #4]
 8014198:	9202      	str	r2, [sp, #8]
 801419a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801419c:	7834      	ldrb	r4, [r6, #0]
 801419e:	f7fe fc9f 	bl	8012ae0 <__locale_ctype_ptr_l>
 80141a2:	2208      	movs	r2, #8
 80141a4:	1900      	adds	r0, r0, r4
 80141a6:	7843      	ldrb	r3, [r0, #1]
 80141a8:	1c75      	adds	r5, r6, #1
 80141aa:	4013      	ands	r3, r2
 80141ac:	d136      	bne.n	801421c <_strtol_l.isra.0+0x90>
 80141ae:	2c2d      	cmp	r4, #45	; 0x2d
 80141b0:	d136      	bne.n	8014220 <_strtol_l.isra.0+0x94>
 80141b2:	1cb5      	adds	r5, r6, #2
 80141b4:	7874      	ldrb	r4, [r6, #1]
 80141b6:	2601      	movs	r6, #1
 80141b8:	2f00      	cmp	r7, #0
 80141ba:	d062      	beq.n	8014282 <_strtol_l.isra.0+0xf6>
 80141bc:	2f10      	cmp	r7, #16
 80141be:	d109      	bne.n	80141d4 <_strtol_l.isra.0+0x48>
 80141c0:	2c30      	cmp	r4, #48	; 0x30
 80141c2:	d107      	bne.n	80141d4 <_strtol_l.isra.0+0x48>
 80141c4:	2220      	movs	r2, #32
 80141c6:	782b      	ldrb	r3, [r5, #0]
 80141c8:	4393      	bics	r3, r2
 80141ca:	2b58      	cmp	r3, #88	; 0x58
 80141cc:	d154      	bne.n	8014278 <_strtol_l.isra.0+0xec>
 80141ce:	2710      	movs	r7, #16
 80141d0:	786c      	ldrb	r4, [r5, #1]
 80141d2:	3502      	adds	r5, #2
 80141d4:	4b2d      	ldr	r3, [pc, #180]	; (801428c <_strtol_l.isra.0+0x100>)
 80141d6:	0039      	movs	r1, r7
 80141d8:	18f3      	adds	r3, r6, r3
 80141da:	0018      	movs	r0, r3
 80141dc:	9303      	str	r3, [sp, #12]
 80141de:	f7ec f83d 	bl	800025c <__aeabi_uidivmod>
 80141e2:	9104      	str	r1, [sp, #16]
 80141e4:	2101      	movs	r1, #1
 80141e6:	2300      	movs	r3, #0
 80141e8:	4249      	negs	r1, r1
 80141ea:	0002      	movs	r2, r0
 80141ec:	468c      	mov	ip, r1
 80141ee:	0018      	movs	r0, r3
 80141f0:	0021      	movs	r1, r4
 80141f2:	3930      	subs	r1, #48	; 0x30
 80141f4:	2909      	cmp	r1, #9
 80141f6:	d81a      	bhi.n	801422e <_strtol_l.isra.0+0xa2>
 80141f8:	000c      	movs	r4, r1
 80141fa:	42a7      	cmp	r7, r4
 80141fc:	dd23      	ble.n	8014246 <_strtol_l.isra.0+0xba>
 80141fe:	1c59      	adds	r1, r3, #1
 8014200:	d009      	beq.n	8014216 <_strtol_l.isra.0+0x8a>
 8014202:	4663      	mov	r3, ip
 8014204:	4282      	cmp	r2, r0
 8014206:	d306      	bcc.n	8014216 <_strtol_l.isra.0+0x8a>
 8014208:	d102      	bne.n	8014210 <_strtol_l.isra.0+0x84>
 801420a:	9904      	ldr	r1, [sp, #16]
 801420c:	42a1      	cmp	r1, r4
 801420e:	db02      	blt.n	8014216 <_strtol_l.isra.0+0x8a>
 8014210:	2301      	movs	r3, #1
 8014212:	4378      	muls	r0, r7
 8014214:	1820      	adds	r0, r4, r0
 8014216:	782c      	ldrb	r4, [r5, #0]
 8014218:	3501      	adds	r5, #1
 801421a:	e7e9      	b.n	80141f0 <_strtol_l.isra.0+0x64>
 801421c:	002e      	movs	r6, r5
 801421e:	e7bc      	b.n	801419a <_strtol_l.isra.0+0xe>
 8014220:	2c2b      	cmp	r4, #43	; 0x2b
 8014222:	d001      	beq.n	8014228 <_strtol_l.isra.0+0x9c>
 8014224:	001e      	movs	r6, r3
 8014226:	e7c7      	b.n	80141b8 <_strtol_l.isra.0+0x2c>
 8014228:	1cb5      	adds	r5, r6, #2
 801422a:	7874      	ldrb	r4, [r6, #1]
 801422c:	e7fa      	b.n	8014224 <_strtol_l.isra.0+0x98>
 801422e:	0021      	movs	r1, r4
 8014230:	3941      	subs	r1, #65	; 0x41
 8014232:	2919      	cmp	r1, #25
 8014234:	d801      	bhi.n	801423a <_strtol_l.isra.0+0xae>
 8014236:	3c37      	subs	r4, #55	; 0x37
 8014238:	e7df      	b.n	80141fa <_strtol_l.isra.0+0x6e>
 801423a:	0021      	movs	r1, r4
 801423c:	3961      	subs	r1, #97	; 0x61
 801423e:	2919      	cmp	r1, #25
 8014240:	d801      	bhi.n	8014246 <_strtol_l.isra.0+0xba>
 8014242:	3c57      	subs	r4, #87	; 0x57
 8014244:	e7d9      	b.n	80141fa <_strtol_l.isra.0+0x6e>
 8014246:	1c5a      	adds	r2, r3, #1
 8014248:	d108      	bne.n	801425c <_strtol_l.isra.0+0xd0>
 801424a:	9a05      	ldr	r2, [sp, #20]
 801424c:	3323      	adds	r3, #35	; 0x23
 801424e:	6013      	str	r3, [r2, #0]
 8014250:	9b02      	ldr	r3, [sp, #8]
 8014252:	9803      	ldr	r0, [sp, #12]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d109      	bne.n	801426c <_strtol_l.isra.0+0xe0>
 8014258:	b007      	add	sp, #28
 801425a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801425c:	2e00      	cmp	r6, #0
 801425e:	d000      	beq.n	8014262 <_strtol_l.isra.0+0xd6>
 8014260:	4240      	negs	r0, r0
 8014262:	9a02      	ldr	r2, [sp, #8]
 8014264:	2a00      	cmp	r2, #0
 8014266:	d0f7      	beq.n	8014258 <_strtol_l.isra.0+0xcc>
 8014268:	2b00      	cmp	r3, #0
 801426a:	d001      	beq.n	8014270 <_strtol_l.isra.0+0xe4>
 801426c:	1e6b      	subs	r3, r5, #1
 801426e:	9301      	str	r3, [sp, #4]
 8014270:	9b02      	ldr	r3, [sp, #8]
 8014272:	9a01      	ldr	r2, [sp, #4]
 8014274:	601a      	str	r2, [r3, #0]
 8014276:	e7ef      	b.n	8014258 <_strtol_l.isra.0+0xcc>
 8014278:	2430      	movs	r4, #48	; 0x30
 801427a:	2f00      	cmp	r7, #0
 801427c:	d1aa      	bne.n	80141d4 <_strtol_l.isra.0+0x48>
 801427e:	2708      	movs	r7, #8
 8014280:	e7a8      	b.n	80141d4 <_strtol_l.isra.0+0x48>
 8014282:	2c30      	cmp	r4, #48	; 0x30
 8014284:	d09e      	beq.n	80141c4 <_strtol_l.isra.0+0x38>
 8014286:	270a      	movs	r7, #10
 8014288:	e7a4      	b.n	80141d4 <_strtol_l.isra.0+0x48>
 801428a:	46c0      	nop			; (mov r8, r8)
 801428c:	7fffffff 	.word	0x7fffffff

08014290 <strtol>:
 8014290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014292:	0013      	movs	r3, r2
 8014294:	4a06      	ldr	r2, [pc, #24]	; (80142b0 <strtol+0x20>)
 8014296:	0005      	movs	r5, r0
 8014298:	6810      	ldr	r0, [r2, #0]
 801429a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 801429c:	2c00      	cmp	r4, #0
 801429e:	d100      	bne.n	80142a2 <strtol+0x12>
 80142a0:	4c04      	ldr	r4, [pc, #16]	; (80142b4 <strtol+0x24>)
 80142a2:	000a      	movs	r2, r1
 80142a4:	9400      	str	r4, [sp, #0]
 80142a6:	0029      	movs	r1, r5
 80142a8:	f7ff ff70 	bl	801418c <_strtol_l.isra.0>
 80142ac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80142ae:	46c0      	nop			; (mov r8, r8)
 80142b0:	200000a8 	.word	0x200000a8
 80142b4:	200004d8 	.word	0x200004d8

080142b8 <_svfprintf_r>:
 80142b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142ba:	b0d9      	sub	sp, #356	; 0x164
 80142bc:	910b      	str	r1, [sp, #44]	; 0x2c
 80142be:	9209      	str	r2, [sp, #36]	; 0x24
 80142c0:	001c      	movs	r4, r3
 80142c2:	900a      	str	r0, [sp, #40]	; 0x28
 80142c4:	f002 fd26 	bl	8016d14 <_localeconv_r>
 80142c8:	6803      	ldr	r3, [r0, #0]
 80142ca:	0018      	movs	r0, r3
 80142cc:	931c      	str	r3, [sp, #112]	; 0x70
 80142ce:	f7eb ff23 	bl	8000118 <strlen>
 80142d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142d4:	9014      	str	r0, [sp, #80]	; 0x50
 80142d6:	899b      	ldrh	r3, [r3, #12]
 80142d8:	061b      	lsls	r3, r3, #24
 80142da:	d518      	bpl.n	801430e <_svfprintf_r+0x56>
 80142dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142de:	691b      	ldr	r3, [r3, #16]
 80142e0:	9308      	str	r3, [sp, #32]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d113      	bne.n	801430e <_svfprintf_r+0x56>
 80142e6:	2140      	movs	r1, #64	; 0x40
 80142e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80142ea:	f7fe fc1f 	bl	8012b2c <_malloc_r>
 80142ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142f0:	6018      	str	r0, [r3, #0]
 80142f2:	6118      	str	r0, [r3, #16]
 80142f4:	2800      	cmp	r0, #0
 80142f6:	d107      	bne.n	8014308 <_svfprintf_r+0x50>
 80142f8:	230c      	movs	r3, #12
 80142fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80142fc:	6013      	str	r3, [r2, #0]
 80142fe:	3b0d      	subs	r3, #13
 8014300:	9315      	str	r3, [sp, #84]	; 0x54
 8014302:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014304:	b059      	add	sp, #356	; 0x164
 8014306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014308:	2340      	movs	r3, #64	; 0x40
 801430a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801430c:	6153      	str	r3, [r2, #20]
 801430e:	2600      	movs	r6, #0
 8014310:	af2f      	add	r7, sp, #188	; 0xbc
 8014312:	972c      	str	r7, [sp, #176]	; 0xb0
 8014314:	962e      	str	r6, [sp, #184]	; 0xb8
 8014316:	962d      	str	r6, [sp, #180]	; 0xb4
 8014318:	960d      	str	r6, [sp, #52]	; 0x34
 801431a:	961a      	str	r6, [sp, #104]	; 0x68
 801431c:	9619      	str	r6, [sp, #100]	; 0x64
 801431e:	961e      	str	r6, [sp, #120]	; 0x78
 8014320:	961d      	str	r6, [sp, #116]	; 0x74
 8014322:	9613      	str	r6, [sp, #76]	; 0x4c
 8014324:	961b      	str	r6, [sp, #108]	; 0x6c
 8014326:	961f      	str	r6, [sp, #124]	; 0x7c
 8014328:	9615      	str	r6, [sp, #84]	; 0x54
 801432a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801432c:	782b      	ldrb	r3, [r5, #0]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d002      	beq.n	8014338 <_svfprintf_r+0x80>
 8014332:	2b25      	cmp	r3, #37	; 0x25
 8014334:	d000      	beq.n	8014338 <_svfprintf_r+0x80>
 8014336:	e095      	b.n	8014464 <_svfprintf_r+0x1ac>
 8014338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801433a:	1aee      	subs	r6, r5, r3
 801433c:	d017      	beq.n	801436e <_svfprintf_r+0xb6>
 801433e:	603b      	str	r3, [r7, #0]
 8014340:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014342:	607e      	str	r6, [r7, #4]
 8014344:	199b      	adds	r3, r3, r6
 8014346:	932e      	str	r3, [sp, #184]	; 0xb8
 8014348:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801434a:	3708      	adds	r7, #8
 801434c:	9308      	str	r3, [sp, #32]
 801434e:	3301      	adds	r3, #1
 8014350:	932d      	str	r3, [sp, #180]	; 0xb4
 8014352:	2b07      	cmp	r3, #7
 8014354:	dd08      	ble.n	8014368 <_svfprintf_r+0xb0>
 8014356:	aa2c      	add	r2, sp, #176	; 0xb0
 8014358:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801435a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801435c:	f003 f900 	bl	8017560 <__ssprint_r>
 8014360:	2800      	cmp	r0, #0
 8014362:	d000      	beq.n	8014366 <_svfprintf_r+0xae>
 8014364:	e2d9      	b.n	801491a <_svfprintf_r+0x662>
 8014366:	af2f      	add	r7, sp, #188	; 0xbc
 8014368:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801436a:	199b      	adds	r3, r3, r6
 801436c:	9315      	str	r3, [sp, #84]	; 0x54
 801436e:	782b      	ldrb	r3, [r5, #0]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d101      	bne.n	8014378 <_svfprintf_r+0xc0>
 8014374:	f001 f9e5 	bl	8015742 <_svfprintf_r+0x148a>
 8014378:	1c6b      	adds	r3, r5, #1
 801437a:	221b      	movs	r2, #27
 801437c:	9311      	str	r3, [sp, #68]	; 0x44
 801437e:	2300      	movs	r3, #0
 8014380:	a91e      	add	r1, sp, #120	; 0x78
 8014382:	1852      	adds	r2, r2, r1
 8014384:	7013      	strb	r3, [r2, #0]
 8014386:	2201      	movs	r2, #1
 8014388:	001e      	movs	r6, r3
 801438a:	2520      	movs	r5, #32
 801438c:	4252      	negs	r2, r2
 801438e:	9208      	str	r2, [sp, #32]
 8014390:	9316      	str	r3, [sp, #88]	; 0x58
 8014392:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014394:	781b      	ldrb	r3, [r3, #0]
 8014396:	930e      	str	r3, [sp, #56]	; 0x38
 8014398:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801439a:	3301      	adds	r3, #1
 801439c:	9311      	str	r3, [sp, #68]	; 0x44
 801439e:	980e      	ldr	r0, [sp, #56]	; 0x38
 80143a0:	3820      	subs	r0, #32
 80143a2:	285a      	cmp	r0, #90	; 0x5a
 80143a4:	d901      	bls.n	80143aa <_svfprintf_r+0xf2>
 80143a6:	f000 fe3d 	bl	8015024 <_svfprintf_r+0xd6c>
 80143aa:	f7eb fec7 	bl	800013c <__gnu_thumb1_case_shi>
 80143ae:	009e      	.short	0x009e
 80143b0:	063b063b 	.word	0x063b063b
 80143b4:	063b00a7 	.word	0x063b00a7
 80143b8:	063b063b 	.word	0x063b063b
 80143bc:	063b0080 	.word	0x063b0080
 80143c0:	00a9063b 	.word	0x00a9063b
 80143c4:	063b00b3 	.word	0x063b00b3
 80143c8:	00b900b1 	.word	0x00b900b1
 80143cc:	00dd063b 	.word	0x00dd063b
 80143d0:	00df00df 	.word	0x00df00df
 80143d4:	00df00df 	.word	0x00df00df
 80143d8:	00df00df 	.word	0x00df00df
 80143dc:	00df00df 	.word	0x00df00df
 80143e0:	063b00df 	.word	0x063b00df
 80143e4:	063b063b 	.word	0x063b063b
 80143e8:	063b063b 	.word	0x063b063b
 80143ec:	063b063b 	.word	0x063b063b
 80143f0:	063b0240 	.word	0x063b0240
 80143f4:	01fd010a 	.word	0x01fd010a
 80143f8:	02400240 	.word	0x02400240
 80143fc:	063b0240 	.word	0x063b0240
 8014400:	063b063b 	.word	0x063b063b
 8014404:	00f1063b 	.word	0x00f1063b
 8014408:	063b063b 	.word	0x063b063b
 801440c:	063b04e2 	.word	0x063b04e2
 8014410:	063b063b 	.word	0x063b063b
 8014414:	063b0537 	.word	0x063b0537
 8014418:	063b0557 	.word	0x063b0557
 801441c:	005d063b 	.word	0x005d063b
 8014420:	063b063b 	.word	0x063b063b
 8014424:	063b063b 	.word	0x063b063b
 8014428:	063b063b 	.word	0x063b063b
 801442c:	063b063b 	.word	0x063b063b
 8014430:	063b0240 	.word	0x063b0240
 8014434:	01ff010a 	.word	0x01ff010a
 8014438:	02400240 	.word	0x02400240
 801443c:	00f30240 	.word	0x00f30240
 8014440:	010601ff 	.word	0x010601ff
 8014444:	00ff063b 	.word	0x00ff063b
 8014448:	04c5063b 	.word	0x04c5063b
 801444c:	052704e4 	.word	0x052704e4
 8014450:	063b0106 	.word	0x063b0106
 8014454:	fff20537 	.word	0xfff20537
 8014458:	063b0559 	.word	0x063b0559
 801445c:	0582063b 	.word	0x0582063b
 8014460:	fff2063b 	.word	0xfff2063b
 8014464:	3501      	adds	r5, #1
 8014466:	e761      	b.n	801432c <_svfprintf_r+0x74>
 8014468:	4bcb      	ldr	r3, [pc, #812]	; (8014798 <_svfprintf_r+0x4e0>)
 801446a:	2220      	movs	r2, #32
 801446c:	931e      	str	r3, [sp, #120]	; 0x78
 801446e:	4032      	ands	r2, r6
 8014470:	d101      	bne.n	8014476 <_svfprintf_r+0x1be>
 8014472:	f000 fd21 	bl	8014eb8 <_svfprintf_r+0xc00>
 8014476:	2307      	movs	r3, #7
 8014478:	3407      	adds	r4, #7
 801447a:	439c      	bics	r4, r3
 801447c:	0023      	movs	r3, r4
 801447e:	3308      	adds	r3, #8
 8014480:	9312      	str	r3, [sp, #72]	; 0x48
 8014482:	6823      	ldr	r3, [r4, #0]
 8014484:	6864      	ldr	r4, [r4, #4]
 8014486:	9306      	str	r3, [sp, #24]
 8014488:	9407      	str	r4, [sp, #28]
 801448a:	07f3      	lsls	r3, r6, #31
 801448c:	d50a      	bpl.n	80144a4 <_svfprintf_r+0x1ec>
 801448e:	9b06      	ldr	r3, [sp, #24]
 8014490:	9a07      	ldr	r2, [sp, #28]
 8014492:	4313      	orrs	r3, r2
 8014494:	d006      	beq.n	80144a4 <_svfprintf_r+0x1ec>
 8014496:	2230      	movs	r2, #48	; 0x30
 8014498:	ab25      	add	r3, sp, #148	; 0x94
 801449a:	701a      	strb	r2, [r3, #0]
 801449c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801449e:	705a      	strb	r2, [r3, #1]
 80144a0:	2302      	movs	r3, #2
 80144a2:	431e      	orrs	r6, r3
 80144a4:	4bbd      	ldr	r3, [pc, #756]	; (801479c <_svfprintf_r+0x4e4>)
 80144a6:	401e      	ands	r6, r3
 80144a8:	2302      	movs	r3, #2
 80144aa:	f000 fc74 	bl	8014d96 <_svfprintf_r+0xade>
 80144ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144b0:	f002 fc30 	bl	8016d14 <_localeconv_r>
 80144b4:	6843      	ldr	r3, [r0, #4]
 80144b6:	0018      	movs	r0, r3
 80144b8:	931f      	str	r3, [sp, #124]	; 0x7c
 80144ba:	f7eb fe2d 	bl	8000118 <strlen>
 80144be:	901b      	str	r0, [sp, #108]	; 0x6c
 80144c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144c2:	f002 fc27 	bl	8016d14 <_localeconv_r>
 80144c6:	6883      	ldr	r3, [r0, #8]
 80144c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80144ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d100      	bne.n	80144d2 <_svfprintf_r+0x21a>
 80144d0:	e75f      	b.n	8014392 <_svfprintf_r+0xda>
 80144d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d100      	bne.n	80144da <_svfprintf_r+0x222>
 80144d8:	e75b      	b.n	8014392 <_svfprintf_r+0xda>
 80144da:	781b      	ldrb	r3, [r3, #0]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d100      	bne.n	80144e2 <_svfprintf_r+0x22a>
 80144e0:	e757      	b.n	8014392 <_svfprintf_r+0xda>
 80144e2:	2380      	movs	r3, #128	; 0x80
 80144e4:	00db      	lsls	r3, r3, #3
 80144e6:	431e      	orrs	r6, r3
 80144e8:	e753      	b.n	8014392 <_svfprintf_r+0xda>
 80144ea:	231b      	movs	r3, #27
 80144ec:	aa1e      	add	r2, sp, #120	; 0x78
 80144ee:	189b      	adds	r3, r3, r2
 80144f0:	781a      	ldrb	r2, [r3, #0]
 80144f2:	2a00      	cmp	r2, #0
 80144f4:	d000      	beq.n	80144f8 <_svfprintf_r+0x240>
 80144f6:	e74c      	b.n	8014392 <_svfprintf_r+0xda>
 80144f8:	701d      	strb	r5, [r3, #0]
 80144fa:	e74a      	b.n	8014392 <_svfprintf_r+0xda>
 80144fc:	2301      	movs	r3, #1
 80144fe:	e7f2      	b.n	80144e6 <_svfprintf_r+0x22e>
 8014500:	6823      	ldr	r3, [r4, #0]
 8014502:	3404      	adds	r4, #4
 8014504:	9316      	str	r3, [sp, #88]	; 0x58
 8014506:	2b00      	cmp	r3, #0
 8014508:	db00      	blt.n	801450c <_svfprintf_r+0x254>
 801450a:	e742      	b.n	8014392 <_svfprintf_r+0xda>
 801450c:	425b      	negs	r3, r3
 801450e:	9316      	str	r3, [sp, #88]	; 0x58
 8014510:	2304      	movs	r3, #4
 8014512:	e7e8      	b.n	80144e6 <_svfprintf_r+0x22e>
 8014514:	231b      	movs	r3, #27
 8014516:	aa1e      	add	r2, sp, #120	; 0x78
 8014518:	189b      	adds	r3, r3, r2
 801451a:	222b      	movs	r2, #43	; 0x2b
 801451c:	701a      	strb	r2, [r3, #0]
 801451e:	e738      	b.n	8014392 <_svfprintf_r+0xda>
 8014520:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014522:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014524:	7812      	ldrb	r2, [r2, #0]
 8014526:	3301      	adds	r3, #1
 8014528:	920e      	str	r2, [sp, #56]	; 0x38
 801452a:	2a2a      	cmp	r2, #42	; 0x2a
 801452c:	d008      	beq.n	8014540 <_svfprintf_r+0x288>
 801452e:	2200      	movs	r2, #0
 8014530:	9208      	str	r2, [sp, #32]
 8014532:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014534:	001a      	movs	r2, r3
 8014536:	3930      	subs	r1, #48	; 0x30
 8014538:	2909      	cmp	r1, #9
 801453a:	d90c      	bls.n	8014556 <_svfprintf_r+0x29e>
 801453c:	9211      	str	r2, [sp, #68]	; 0x44
 801453e:	e72e      	b.n	801439e <_svfprintf_r+0xe6>
 8014540:	6821      	ldr	r1, [r4, #0]
 8014542:	1d22      	adds	r2, r4, #4
 8014544:	9108      	str	r1, [sp, #32]
 8014546:	2900      	cmp	r1, #0
 8014548:	da02      	bge.n	8014550 <_svfprintf_r+0x298>
 801454a:	2101      	movs	r1, #1
 801454c:	4249      	negs	r1, r1
 801454e:	9108      	str	r1, [sp, #32]
 8014550:	0014      	movs	r4, r2
 8014552:	9311      	str	r3, [sp, #68]	; 0x44
 8014554:	e71d      	b.n	8014392 <_svfprintf_r+0xda>
 8014556:	200a      	movs	r0, #10
 8014558:	9a08      	ldr	r2, [sp, #32]
 801455a:	4342      	muls	r2, r0
 801455c:	1852      	adds	r2, r2, r1
 801455e:	9208      	str	r2, [sp, #32]
 8014560:	781a      	ldrb	r2, [r3, #0]
 8014562:	3301      	adds	r3, #1
 8014564:	920e      	str	r2, [sp, #56]	; 0x38
 8014566:	e7e4      	b.n	8014532 <_svfprintf_r+0x27a>
 8014568:	2380      	movs	r3, #128	; 0x80
 801456a:	e7bc      	b.n	80144e6 <_svfprintf_r+0x22e>
 801456c:	2300      	movs	r3, #0
 801456e:	9316      	str	r3, [sp, #88]	; 0x58
 8014570:	220a      	movs	r2, #10
 8014572:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014574:	4353      	muls	r3, r2
 8014576:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014578:	3a30      	subs	r2, #48	; 0x30
 801457a:	18d3      	adds	r3, r2, r3
 801457c:	9316      	str	r3, [sp, #88]	; 0x58
 801457e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014580:	1c5a      	adds	r2, r3, #1
 8014582:	781b      	ldrb	r3, [r3, #0]
 8014584:	9211      	str	r2, [sp, #68]	; 0x44
 8014586:	930e      	str	r3, [sp, #56]	; 0x38
 8014588:	3b30      	subs	r3, #48	; 0x30
 801458a:	2b09      	cmp	r3, #9
 801458c:	d9f0      	bls.n	8014570 <_svfprintf_r+0x2b8>
 801458e:	e7d5      	b.n	801453c <_svfprintf_r+0x284>
 8014590:	2308      	movs	r3, #8
 8014592:	e7a8      	b.n	80144e6 <_svfprintf_r+0x22e>
 8014594:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014596:	781b      	ldrb	r3, [r3, #0]
 8014598:	2b68      	cmp	r3, #104	; 0x68
 801459a:	d105      	bne.n	80145a8 <_svfprintf_r+0x2f0>
 801459c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801459e:	3301      	adds	r3, #1
 80145a0:	9311      	str	r3, [sp, #68]	; 0x44
 80145a2:	2380      	movs	r3, #128	; 0x80
 80145a4:	009b      	lsls	r3, r3, #2
 80145a6:	e79e      	b.n	80144e6 <_svfprintf_r+0x22e>
 80145a8:	2340      	movs	r3, #64	; 0x40
 80145aa:	e79c      	b.n	80144e6 <_svfprintf_r+0x22e>
 80145ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80145ae:	781b      	ldrb	r3, [r3, #0]
 80145b0:	2b6c      	cmp	r3, #108	; 0x6c
 80145b2:	d104      	bne.n	80145be <_svfprintf_r+0x306>
 80145b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80145b6:	3301      	adds	r3, #1
 80145b8:	9311      	str	r3, [sp, #68]	; 0x44
 80145ba:	432e      	orrs	r6, r5
 80145bc:	e6e9      	b.n	8014392 <_svfprintf_r+0xda>
 80145be:	2310      	movs	r3, #16
 80145c0:	e791      	b.n	80144e6 <_svfprintf_r+0x22e>
 80145c2:	1d23      	adds	r3, r4, #4
 80145c4:	6822      	ldr	r2, [r4, #0]
 80145c6:	9312      	str	r3, [sp, #72]	; 0x48
 80145c8:	ab3f      	add	r3, sp, #252	; 0xfc
 80145ca:	701a      	strb	r2, [r3, #0]
 80145cc:	221b      	movs	r2, #27
 80145ce:	2000      	movs	r0, #0
 80145d0:	a91e      	add	r1, sp, #120	; 0x78
 80145d2:	1852      	adds	r2, r2, r1
 80145d4:	7010      	strb	r0, [r2, #0]
 80145d6:	2201      	movs	r2, #1
 80145d8:	0005      	movs	r5, r0
 80145da:	900c      	str	r0, [sp, #48]	; 0x30
 80145dc:	9208      	str	r2, [sp, #32]
 80145de:	9017      	str	r0, [sp, #92]	; 0x5c
 80145e0:	9010      	str	r0, [sp, #64]	; 0x40
 80145e2:	900f      	str	r0, [sp, #60]	; 0x3c
 80145e4:	9309      	str	r3, [sp, #36]	; 0x24
 80145e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80145e8:	9a08      	ldr	r2, [sp, #32]
 80145ea:	9318      	str	r3, [sp, #96]	; 0x60
 80145ec:	4293      	cmp	r3, r2
 80145ee:	da00      	bge.n	80145f2 <_svfprintf_r+0x33a>
 80145f0:	9218      	str	r2, [sp, #96]	; 0x60
 80145f2:	231b      	movs	r3, #27
 80145f4:	aa1e      	add	r2, sp, #120	; 0x78
 80145f6:	189b      	adds	r3, r3, r2
 80145f8:	781b      	ldrb	r3, [r3, #0]
 80145fa:	1e5a      	subs	r2, r3, #1
 80145fc:	4193      	sbcs	r3, r2
 80145fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014600:	18d3      	adds	r3, r2, r3
 8014602:	9318      	str	r3, [sp, #96]	; 0x60
 8014604:	2302      	movs	r3, #2
 8014606:	4033      	ands	r3, r6
 8014608:	9320      	str	r3, [sp, #128]	; 0x80
 801460a:	d002      	beq.n	8014612 <_svfprintf_r+0x35a>
 801460c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801460e:	3302      	adds	r3, #2
 8014610:	9318      	str	r3, [sp, #96]	; 0x60
 8014612:	2384      	movs	r3, #132	; 0x84
 8014614:	4033      	ands	r3, r6
 8014616:	9321      	str	r3, [sp, #132]	; 0x84
 8014618:	d121      	bne.n	801465e <_svfprintf_r+0x3a6>
 801461a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801461c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801461e:	1a9c      	subs	r4, r3, r2
 8014620:	2c00      	cmp	r4, #0
 8014622:	dd1c      	ble.n	801465e <_svfprintf_r+0x3a6>
 8014624:	0039      	movs	r1, r7
 8014626:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014628:	485d      	ldr	r0, [pc, #372]	; (80147a0 <_svfprintf_r+0x4e8>)
 801462a:	9322      	str	r3, [sp, #136]	; 0x88
 801462c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801462e:	3301      	adds	r3, #1
 8014630:	3108      	adds	r1, #8
 8014632:	6038      	str	r0, [r7, #0]
 8014634:	2c10      	cmp	r4, #16
 8014636:	dd01      	ble.n	801463c <_svfprintf_r+0x384>
 8014638:	f000 fd08 	bl	801504c <_svfprintf_r+0xd94>
 801463c:	607c      	str	r4, [r7, #4]
 801463e:	18a4      	adds	r4, r4, r2
 8014640:	942e      	str	r4, [sp, #184]	; 0xb8
 8014642:	932d      	str	r3, [sp, #180]	; 0xb4
 8014644:	000f      	movs	r7, r1
 8014646:	2b07      	cmp	r3, #7
 8014648:	dd09      	ble.n	801465e <_svfprintf_r+0x3a6>
 801464a:	aa2c      	add	r2, sp, #176	; 0xb0
 801464c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801464e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014650:	f002 ff86 	bl	8017560 <__ssprint_r>
 8014654:	2800      	cmp	r0, #0
 8014656:	d001      	beq.n	801465c <_svfprintf_r+0x3a4>
 8014658:	f001 f852 	bl	8015700 <_svfprintf_r+0x1448>
 801465c:	af2f      	add	r7, sp, #188	; 0xbc
 801465e:	231b      	movs	r3, #27
 8014660:	aa1e      	add	r2, sp, #120	; 0x78
 8014662:	189b      	adds	r3, r3, r2
 8014664:	781a      	ldrb	r2, [r3, #0]
 8014666:	2a00      	cmp	r2, #0
 8014668:	d017      	beq.n	801469a <_svfprintf_r+0x3e2>
 801466a:	603b      	str	r3, [r7, #0]
 801466c:	2301      	movs	r3, #1
 801466e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014670:	607b      	str	r3, [r7, #4]
 8014672:	0013      	movs	r3, r2
 8014674:	3301      	adds	r3, #1
 8014676:	932e      	str	r3, [sp, #184]	; 0xb8
 8014678:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801467a:	3708      	adds	r7, #8
 801467c:	9322      	str	r3, [sp, #136]	; 0x88
 801467e:	3301      	adds	r3, #1
 8014680:	932d      	str	r3, [sp, #180]	; 0xb4
 8014682:	2b07      	cmp	r3, #7
 8014684:	dd09      	ble.n	801469a <_svfprintf_r+0x3e2>
 8014686:	aa2c      	add	r2, sp, #176	; 0xb0
 8014688:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801468a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801468c:	f002 ff68 	bl	8017560 <__ssprint_r>
 8014690:	2800      	cmp	r0, #0
 8014692:	d001      	beq.n	8014698 <_svfprintf_r+0x3e0>
 8014694:	f001 f834 	bl	8015700 <_svfprintf_r+0x1448>
 8014698:	af2f      	add	r7, sp, #188	; 0xbc
 801469a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801469c:	2b00      	cmp	r3, #0
 801469e:	d019      	beq.n	80146d4 <_svfprintf_r+0x41c>
 80146a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80146a2:	9320      	str	r3, [sp, #128]	; 0x80
 80146a4:	ab25      	add	r3, sp, #148	; 0x94
 80146a6:	603b      	str	r3, [r7, #0]
 80146a8:	2302      	movs	r3, #2
 80146aa:	607b      	str	r3, [r7, #4]
 80146ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80146ae:	3708      	adds	r7, #8
 80146b0:	3302      	adds	r3, #2
 80146b2:	932e      	str	r3, [sp, #184]	; 0xb8
 80146b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80146b6:	9320      	str	r3, [sp, #128]	; 0x80
 80146b8:	3301      	adds	r3, #1
 80146ba:	932d      	str	r3, [sp, #180]	; 0xb4
 80146bc:	2b07      	cmp	r3, #7
 80146be:	dd09      	ble.n	80146d4 <_svfprintf_r+0x41c>
 80146c0:	aa2c      	add	r2, sp, #176	; 0xb0
 80146c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80146c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80146c6:	f002 ff4b 	bl	8017560 <__ssprint_r>
 80146ca:	2800      	cmp	r0, #0
 80146cc:	d001      	beq.n	80146d2 <_svfprintf_r+0x41a>
 80146ce:	f001 f817 	bl	8015700 <_svfprintf_r+0x1448>
 80146d2:	af2f      	add	r7, sp, #188	; 0xbc
 80146d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146d6:	2b80      	cmp	r3, #128	; 0x80
 80146d8:	d121      	bne.n	801471e <_svfprintf_r+0x466>
 80146da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80146dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80146de:	1a9c      	subs	r4, r3, r2
 80146e0:	2c00      	cmp	r4, #0
 80146e2:	dd1c      	ble.n	801471e <_svfprintf_r+0x466>
 80146e4:	0039      	movs	r1, r7
 80146e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80146e8:	482e      	ldr	r0, [pc, #184]	; (80147a4 <_svfprintf_r+0x4ec>)
 80146ea:	9320      	str	r3, [sp, #128]	; 0x80
 80146ec:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80146ee:	3301      	adds	r3, #1
 80146f0:	3108      	adds	r1, #8
 80146f2:	6038      	str	r0, [r7, #0]
 80146f4:	2c10      	cmp	r4, #16
 80146f6:	dd01      	ble.n	80146fc <_svfprintf_r+0x444>
 80146f8:	f000 fcbc 	bl	8015074 <_svfprintf_r+0xdbc>
 80146fc:	607c      	str	r4, [r7, #4]
 80146fe:	18a4      	adds	r4, r4, r2
 8014700:	942e      	str	r4, [sp, #184]	; 0xb8
 8014702:	932d      	str	r3, [sp, #180]	; 0xb4
 8014704:	000f      	movs	r7, r1
 8014706:	2b07      	cmp	r3, #7
 8014708:	dd09      	ble.n	801471e <_svfprintf_r+0x466>
 801470a:	aa2c      	add	r2, sp, #176	; 0xb0
 801470c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801470e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014710:	f002 ff26 	bl	8017560 <__ssprint_r>
 8014714:	2800      	cmp	r0, #0
 8014716:	d001      	beq.n	801471c <_svfprintf_r+0x464>
 8014718:	f000 fff2 	bl	8015700 <_svfprintf_r+0x1448>
 801471c:	af2f      	add	r7, sp, #188	; 0xbc
 801471e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014720:	9a08      	ldr	r2, [sp, #32]
 8014722:	1a9c      	subs	r4, r3, r2
 8014724:	2c00      	cmp	r4, #0
 8014726:	dd1c      	ble.n	8014762 <_svfprintf_r+0x4aa>
 8014728:	0039      	movs	r1, r7
 801472a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801472c:	481d      	ldr	r0, [pc, #116]	; (80147a4 <_svfprintf_r+0x4ec>)
 801472e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014730:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014732:	3301      	adds	r3, #1
 8014734:	3108      	adds	r1, #8
 8014736:	6038      	str	r0, [r7, #0]
 8014738:	2c10      	cmp	r4, #16
 801473a:	dd01      	ble.n	8014740 <_svfprintf_r+0x488>
 801473c:	f000 fcb4 	bl	80150a8 <_svfprintf_r+0xdf0>
 8014740:	18a2      	adds	r2, r4, r2
 8014742:	607c      	str	r4, [r7, #4]
 8014744:	922e      	str	r2, [sp, #184]	; 0xb8
 8014746:	932d      	str	r3, [sp, #180]	; 0xb4
 8014748:	000f      	movs	r7, r1
 801474a:	2b07      	cmp	r3, #7
 801474c:	dd09      	ble.n	8014762 <_svfprintf_r+0x4aa>
 801474e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014750:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014752:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014754:	f002 ff04 	bl	8017560 <__ssprint_r>
 8014758:	2800      	cmp	r0, #0
 801475a:	d001      	beq.n	8014760 <_svfprintf_r+0x4a8>
 801475c:	f000 ffd0 	bl	8015700 <_svfprintf_r+0x1448>
 8014760:	af2f      	add	r7, sp, #188	; 0xbc
 8014762:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014764:	9317      	str	r3, [sp, #92]	; 0x5c
 8014766:	05f3      	lsls	r3, r6, #23
 8014768:	d501      	bpl.n	801476e <_svfprintf_r+0x4b6>
 801476a:	f000 fcb1 	bl	80150d0 <_svfprintf_r+0xe18>
 801476e:	9a08      	ldr	r2, [sp, #32]
 8014770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014772:	4694      	mov	ip, r2
 8014774:	603b      	str	r3, [r7, #0]
 8014776:	9b08      	ldr	r3, [sp, #32]
 8014778:	607b      	str	r3, [r7, #4]
 801477a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801477c:	4463      	add	r3, ip
 801477e:	932e      	str	r3, [sp, #184]	; 0xb8
 8014780:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014782:	9308      	str	r3, [sp, #32]
 8014784:	3301      	adds	r3, #1
 8014786:	932d      	str	r3, [sp, #180]	; 0xb4
 8014788:	2b07      	cmp	r3, #7
 801478a:	dd01      	ble.n	8014790 <_svfprintf_r+0x4d8>
 801478c:	f000 fd94 	bl	80152b8 <_svfprintf_r+0x1000>
 8014790:	3708      	adds	r7, #8
 8014792:	f000 fce4 	bl	801515e <_svfprintf_r+0xea6>
 8014796:	46c0      	nop			; (mov r8, r8)
 8014798:	0801a6b9 	.word	0x0801a6b9
 801479c:	fffffbff 	.word	0xfffffbff
 80147a0:	0801a6cc 	.word	0x0801a6cc
 80147a4:	0801a6dc 	.word	0x0801a6dc
 80147a8:	2310      	movs	r3, #16
 80147aa:	431e      	orrs	r6, r3
 80147ac:	06b3      	lsls	r3, r6, #26
 80147ae:	d52c      	bpl.n	801480a <_svfprintf_r+0x552>
 80147b0:	2307      	movs	r3, #7
 80147b2:	3407      	adds	r4, #7
 80147b4:	439c      	bics	r4, r3
 80147b6:	0023      	movs	r3, r4
 80147b8:	3308      	adds	r3, #8
 80147ba:	9312      	str	r3, [sp, #72]	; 0x48
 80147bc:	6823      	ldr	r3, [r4, #0]
 80147be:	6864      	ldr	r4, [r4, #4]
 80147c0:	9306      	str	r3, [sp, #24]
 80147c2:	9407      	str	r4, [sp, #28]
 80147c4:	9b07      	ldr	r3, [sp, #28]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	da0b      	bge.n	80147e2 <_svfprintf_r+0x52a>
 80147ca:	9906      	ldr	r1, [sp, #24]
 80147cc:	9a07      	ldr	r2, [sp, #28]
 80147ce:	2400      	movs	r4, #0
 80147d0:	424b      	negs	r3, r1
 80147d2:	4194      	sbcs	r4, r2
 80147d4:	9306      	str	r3, [sp, #24]
 80147d6:	9407      	str	r4, [sp, #28]
 80147d8:	231b      	movs	r3, #27
 80147da:	aa1e      	add	r2, sp, #120	; 0x78
 80147dc:	189b      	adds	r3, r3, r2
 80147de:	222d      	movs	r2, #45	; 0x2d
 80147e0:	701a      	strb	r2, [r3, #0]
 80147e2:	9b08      	ldr	r3, [sp, #32]
 80147e4:	3301      	adds	r3, #1
 80147e6:	d000      	beq.n	80147ea <_svfprintf_r+0x532>
 80147e8:	e382      	b.n	8014ef0 <_svfprintf_r+0xc38>
 80147ea:	9b07      	ldr	r3, [sp, #28]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d000      	beq.n	80147f2 <_svfprintf_r+0x53a>
 80147f0:	e3b0      	b.n	8014f54 <_svfprintf_r+0xc9c>
 80147f2:	9b06      	ldr	r3, [sp, #24]
 80147f4:	2b09      	cmp	r3, #9
 80147f6:	d900      	bls.n	80147fa <_svfprintf_r+0x542>
 80147f8:	e3ac      	b.n	8014f54 <_svfprintf_r+0xc9c>
 80147fa:	23e7      	movs	r3, #231	; 0xe7
 80147fc:	aa1e      	add	r2, sp, #120	; 0x78
 80147fe:	189b      	adds	r3, r3, r2
 8014800:	9a06      	ldr	r2, [sp, #24]
 8014802:	3230      	adds	r2, #48	; 0x30
 8014804:	701a      	strb	r2, [r3, #0]
 8014806:	9309      	str	r3, [sp, #36]	; 0x24
 8014808:	e395      	b.n	8014f36 <_svfprintf_r+0xc7e>
 801480a:	1d23      	adds	r3, r4, #4
 801480c:	9312      	str	r3, [sp, #72]	; 0x48
 801480e:	06f3      	lsls	r3, r6, #27
 8014810:	d504      	bpl.n	801481c <_svfprintf_r+0x564>
 8014812:	6823      	ldr	r3, [r4, #0]
 8014814:	9306      	str	r3, [sp, #24]
 8014816:	17db      	asrs	r3, r3, #31
 8014818:	9307      	str	r3, [sp, #28]
 801481a:	e7d3      	b.n	80147c4 <_svfprintf_r+0x50c>
 801481c:	6823      	ldr	r3, [r4, #0]
 801481e:	0672      	lsls	r2, r6, #25
 8014820:	d501      	bpl.n	8014826 <_svfprintf_r+0x56e>
 8014822:	b21b      	sxth	r3, r3
 8014824:	e7f6      	b.n	8014814 <_svfprintf_r+0x55c>
 8014826:	05b2      	lsls	r2, r6, #22
 8014828:	d5f4      	bpl.n	8014814 <_svfprintf_r+0x55c>
 801482a:	b25b      	sxtb	r3, r3
 801482c:	e7f2      	b.n	8014814 <_svfprintf_r+0x55c>
 801482e:	2307      	movs	r3, #7
 8014830:	3407      	adds	r4, #7
 8014832:	439c      	bics	r4, r3
 8014834:	0023      	movs	r3, r4
 8014836:	2201      	movs	r2, #1
 8014838:	3308      	adds	r3, #8
 801483a:	9312      	str	r3, [sp, #72]	; 0x48
 801483c:	6823      	ldr	r3, [r4, #0]
 801483e:	4252      	negs	r2, r2
 8014840:	931a      	str	r3, [sp, #104]	; 0x68
 8014842:	6863      	ldr	r3, [r4, #4]
 8014844:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8014846:	005c      	lsls	r4, r3, #1
 8014848:	0864      	lsrs	r4, r4, #1
 801484a:	9319      	str	r3, [sp, #100]	; 0x64
 801484c:	0028      	movs	r0, r5
 801484e:	4bcf      	ldr	r3, [pc, #828]	; (8014b8c <_svfprintf_r+0x8d4>)
 8014850:	0021      	movs	r1, r4
 8014852:	f7ee f8a9 	bl	80029a8 <__aeabi_dcmpun>
 8014856:	2800      	cmp	r0, #0
 8014858:	d125      	bne.n	80148a6 <_svfprintf_r+0x5ee>
 801485a:	2201      	movs	r2, #1
 801485c:	4bcb      	ldr	r3, [pc, #812]	; (8014b8c <_svfprintf_r+0x8d4>)
 801485e:	4252      	negs	r2, r2
 8014860:	0028      	movs	r0, r5
 8014862:	0021      	movs	r1, r4
 8014864:	f7eb fe0a 	bl	800047c <__aeabi_dcmple>
 8014868:	2800      	cmp	r0, #0
 801486a:	d11c      	bne.n	80148a6 <_svfprintf_r+0x5ee>
 801486c:	2200      	movs	r2, #0
 801486e:	2300      	movs	r3, #0
 8014870:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014872:	9919      	ldr	r1, [sp, #100]	; 0x64
 8014874:	f7eb fdf8 	bl	8000468 <__aeabi_dcmplt>
 8014878:	2800      	cmp	r0, #0
 801487a:	d004      	beq.n	8014886 <_svfprintf_r+0x5ce>
 801487c:	231b      	movs	r3, #27
 801487e:	aa1e      	add	r2, sp, #120	; 0x78
 8014880:	189b      	adds	r3, r3, r2
 8014882:	222d      	movs	r2, #45	; 0x2d
 8014884:	701a      	strb	r2, [r3, #0]
 8014886:	4bc2      	ldr	r3, [pc, #776]	; (8014b90 <_svfprintf_r+0x8d8>)
 8014888:	9309      	str	r3, [sp, #36]	; 0x24
 801488a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801488c:	2b47      	cmp	r3, #71	; 0x47
 801488e:	dc01      	bgt.n	8014894 <_svfprintf_r+0x5dc>
 8014890:	4bc0      	ldr	r3, [pc, #768]	; (8014b94 <_svfprintf_r+0x8dc>)
 8014892:	9309      	str	r3, [sp, #36]	; 0x24
 8014894:	2380      	movs	r3, #128	; 0x80
 8014896:	439e      	bics	r6, r3
 8014898:	2300      	movs	r3, #0
 801489a:	930c      	str	r3, [sp, #48]	; 0x30
 801489c:	3303      	adds	r3, #3
 801489e:	9308      	str	r3, [sp, #32]
 80148a0:	2300      	movs	r3, #0
 80148a2:	9317      	str	r3, [sp, #92]	; 0x5c
 80148a4:	e34f      	b.n	8014f46 <_svfprintf_r+0xc8e>
 80148a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80148a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80148aa:	981a      	ldr	r0, [sp, #104]	; 0x68
 80148ac:	9919      	ldr	r1, [sp, #100]	; 0x64
 80148ae:	f7ee f87b 	bl	80029a8 <__aeabi_dcmpun>
 80148b2:	2800      	cmp	r0, #0
 80148b4:	d00e      	beq.n	80148d4 <_svfprintf_r+0x61c>
 80148b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	da04      	bge.n	80148c6 <_svfprintf_r+0x60e>
 80148bc:	231b      	movs	r3, #27
 80148be:	aa1e      	add	r2, sp, #120	; 0x78
 80148c0:	189b      	adds	r3, r3, r2
 80148c2:	222d      	movs	r2, #45	; 0x2d
 80148c4:	701a      	strb	r2, [r3, #0]
 80148c6:	4bb4      	ldr	r3, [pc, #720]	; (8014b98 <_svfprintf_r+0x8e0>)
 80148c8:	9309      	str	r3, [sp, #36]	; 0x24
 80148ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80148cc:	2b47      	cmp	r3, #71	; 0x47
 80148ce:	dce1      	bgt.n	8014894 <_svfprintf_r+0x5dc>
 80148d0:	4bb2      	ldr	r3, [pc, #712]	; (8014b9c <_svfprintf_r+0x8e4>)
 80148d2:	e7de      	b.n	8014892 <_svfprintf_r+0x5da>
 80148d4:	2320      	movs	r3, #32
 80148d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80148d8:	439a      	bics	r2, r3
 80148da:	920f      	str	r2, [sp, #60]	; 0x3c
 80148dc:	2a41      	cmp	r2, #65	; 0x41
 80148de:	d124      	bne.n	801492a <_svfprintf_r+0x672>
 80148e0:	2230      	movs	r2, #48	; 0x30
 80148e2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80148e4:	ab25      	add	r3, sp, #148	; 0x94
 80148e6:	701a      	strb	r2, [r3, #0]
 80148e8:	3228      	adds	r2, #40	; 0x28
 80148ea:	2961      	cmp	r1, #97	; 0x61
 80148ec:	d100      	bne.n	80148f0 <_svfprintf_r+0x638>
 80148ee:	3220      	adds	r2, #32
 80148f0:	705a      	strb	r2, [r3, #1]
 80148f2:	2302      	movs	r3, #2
 80148f4:	431e      	orrs	r6, r3
 80148f6:	9b08      	ldr	r3, [sp, #32]
 80148f8:	2b63      	cmp	r3, #99	; 0x63
 80148fa:	dc00      	bgt.n	80148fe <_svfprintf_r+0x646>
 80148fc:	e09e      	b.n	8014a3c <_svfprintf_r+0x784>
 80148fe:	1c59      	adds	r1, r3, #1
 8014900:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014902:	f7fe f913 	bl	8012b2c <_malloc_r>
 8014906:	9009      	str	r0, [sp, #36]	; 0x24
 8014908:	2800      	cmp	r0, #0
 801490a:	d000      	beq.n	801490e <_svfprintf_r+0x656>
 801490c:	e09b      	b.n	8014a46 <_svfprintf_r+0x78e>
 801490e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014910:	899a      	ldrh	r2, [r3, #12]
 8014912:	2340      	movs	r3, #64	; 0x40
 8014914:	4313      	orrs	r3, r2
 8014916:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014918:	8193      	strh	r3, [r2, #12]
 801491a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801491c:	899b      	ldrh	r3, [r3, #12]
 801491e:	065b      	lsls	r3, r3, #25
 8014920:	d400      	bmi.n	8014924 <_svfprintf_r+0x66c>
 8014922:	e4ee      	b.n	8014302 <_svfprintf_r+0x4a>
 8014924:	2301      	movs	r3, #1
 8014926:	425b      	negs	r3, r3
 8014928:	e4ea      	b.n	8014300 <_svfprintf_r+0x48>
 801492a:	9b08      	ldr	r3, [sp, #32]
 801492c:	900c      	str	r0, [sp, #48]	; 0x30
 801492e:	3301      	adds	r3, #1
 8014930:	d100      	bne.n	8014934 <_svfprintf_r+0x67c>
 8014932:	e08b      	b.n	8014a4c <_svfprintf_r+0x794>
 8014934:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014936:	2b47      	cmp	r3, #71	; 0x47
 8014938:	d103      	bne.n	8014942 <_svfprintf_r+0x68a>
 801493a:	9b08      	ldr	r3, [sp, #32]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d100      	bne.n	8014942 <_svfprintf_r+0x68a>
 8014940:	e087      	b.n	8014a52 <_svfprintf_r+0x79a>
 8014942:	2380      	movs	r3, #128	; 0x80
 8014944:	005b      	lsls	r3, r3, #1
 8014946:	4333      	orrs	r3, r6
 8014948:	9320      	str	r3, [sp, #128]	; 0x80
 801494a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801494c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801494e:	2b00      	cmp	r3, #0
 8014950:	db00      	blt.n	8014954 <_svfprintf_r+0x69c>
 8014952:	e082      	b.n	8014a5a <_svfprintf_r+0x7a2>
 8014954:	2280      	movs	r2, #128	; 0x80
 8014956:	0612      	lsls	r2, r2, #24
 8014958:	4694      	mov	ip, r2
 801495a:	4463      	add	r3, ip
 801495c:	930d      	str	r3, [sp, #52]	; 0x34
 801495e:	232d      	movs	r3, #45	; 0x2d
 8014960:	9322      	str	r3, [sp, #136]	; 0x88
 8014962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014964:	2b41      	cmp	r3, #65	; 0x41
 8014966:	d000      	beq.n	801496a <_svfprintf_r+0x6b2>
 8014968:	e105      	b.n	8014b76 <_svfprintf_r+0x8be>
 801496a:	aa26      	add	r2, sp, #152	; 0x98
 801496c:	0020      	movs	r0, r4
 801496e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014970:	f002 fdc4 	bl	80174fc <frexp>
 8014974:	23ff      	movs	r3, #255	; 0xff
 8014976:	2200      	movs	r2, #0
 8014978:	059b      	lsls	r3, r3, #22
 801497a:	f7ed fa5b 	bl	8001e34 <__aeabi_dmul>
 801497e:	2200      	movs	r2, #0
 8014980:	2300      	movs	r3, #0
 8014982:	0004      	movs	r4, r0
 8014984:	000d      	movs	r5, r1
 8014986:	f7eb fd69 	bl	800045c <__aeabi_dcmpeq>
 801498a:	2800      	cmp	r0, #0
 801498c:	d001      	beq.n	8014992 <_svfprintf_r+0x6da>
 801498e:	2301      	movs	r3, #1
 8014990:	9326      	str	r3, [sp, #152]	; 0x98
 8014992:	4b83      	ldr	r3, [pc, #524]	; (8014ba0 <_svfprintf_r+0x8e8>)
 8014994:	9317      	str	r3, [sp, #92]	; 0x5c
 8014996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014998:	2b61      	cmp	r3, #97	; 0x61
 801499a:	d101      	bne.n	80149a0 <_svfprintf_r+0x6e8>
 801499c:	4b81      	ldr	r3, [pc, #516]	; (8014ba4 <_svfprintf_r+0x8ec>)
 801499e:	9317      	str	r3, [sp, #92]	; 0x5c
 80149a0:	9b08      	ldr	r3, [sp, #32]
 80149a2:	3b01      	subs	r3, #1
 80149a4:	9310      	str	r3, [sp, #64]	; 0x40
 80149a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149a8:	9318      	str	r3, [sp, #96]	; 0x60
 80149aa:	2200      	movs	r2, #0
 80149ac:	4b7e      	ldr	r3, [pc, #504]	; (8014ba8 <_svfprintf_r+0x8f0>)
 80149ae:	0020      	movs	r0, r4
 80149b0:	0029      	movs	r1, r5
 80149b2:	f7ed fa3f 	bl	8001e34 <__aeabi_dmul>
 80149b6:	000d      	movs	r5, r1
 80149b8:	0004      	movs	r4, r0
 80149ba:	f7ee f811 	bl	80029e0 <__aeabi_d2iz>
 80149be:	9021      	str	r0, [sp, #132]	; 0x84
 80149c0:	f7ee f844 	bl	8002a4c <__aeabi_i2d>
 80149c4:	0002      	movs	r2, r0
 80149c6:	000b      	movs	r3, r1
 80149c8:	0020      	movs	r0, r4
 80149ca:	0029      	movs	r1, r5
 80149cc:	f7ed fca4 	bl	8002318 <__aeabi_dsub>
 80149d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80149d2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80149d4:	3301      	adds	r3, #1
 80149d6:	930d      	str	r3, [sp, #52]	; 0x34
 80149d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80149da:	0004      	movs	r4, r0
 80149dc:	5c9b      	ldrb	r3, [r3, r2]
 80149de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80149e0:	000d      	movs	r5, r1
 80149e2:	7013      	strb	r3, [r2, #0]
 80149e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80149e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80149e8:	3301      	adds	r3, #1
 80149ea:	d00a      	beq.n	8014a02 <_svfprintf_r+0x74a>
 80149ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80149ee:	2200      	movs	r2, #0
 80149f0:	3b01      	subs	r3, #1
 80149f2:	9310      	str	r3, [sp, #64]	; 0x40
 80149f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149f6:	9318      	str	r3, [sp, #96]	; 0x60
 80149f8:	2300      	movs	r3, #0
 80149fa:	f7eb fd2f 	bl	800045c <__aeabi_dcmpeq>
 80149fe:	2800      	cmp	r0, #0
 8014a00:	d0d3      	beq.n	80149aa <_svfprintf_r+0x6f2>
 8014a02:	2200      	movs	r2, #0
 8014a04:	4b69      	ldr	r3, [pc, #420]	; (8014bac <_svfprintf_r+0x8f4>)
 8014a06:	0020      	movs	r0, r4
 8014a08:	0029      	movs	r1, r5
 8014a0a:	f7eb fd41 	bl	8000490 <__aeabi_dcmpgt>
 8014a0e:	2800      	cmp	r0, #0
 8014a10:	d126      	bne.n	8014a60 <_svfprintf_r+0x7a8>
 8014a12:	2200      	movs	r2, #0
 8014a14:	4b65      	ldr	r3, [pc, #404]	; (8014bac <_svfprintf_r+0x8f4>)
 8014a16:	0020      	movs	r0, r4
 8014a18:	0029      	movs	r1, r5
 8014a1a:	f7eb fd1f 	bl	800045c <__aeabi_dcmpeq>
 8014a1e:	2800      	cmp	r0, #0
 8014a20:	d002      	beq.n	8014a28 <_svfprintf_r+0x770>
 8014a22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a24:	07db      	lsls	r3, r3, #31
 8014a26:	d41b      	bmi.n	8014a60 <_svfprintf_r+0x7a8>
 8014a28:	2130      	movs	r1, #48	; 0x30
 8014a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a2c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8014a2e:	1898      	adds	r0, r3, r2
 8014a30:	930d      	str	r3, [sp, #52]	; 0x34
 8014a32:	1ac2      	subs	r2, r0, r3
 8014a34:	d426      	bmi.n	8014a84 <_svfprintf_r+0x7cc>
 8014a36:	7019      	strb	r1, [r3, #0]
 8014a38:	3301      	adds	r3, #1
 8014a3a:	e7f9      	b.n	8014a30 <_svfprintf_r+0x778>
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	930c      	str	r3, [sp, #48]	; 0x30
 8014a40:	ab3f      	add	r3, sp, #252	; 0xfc
 8014a42:	9309      	str	r3, [sp, #36]	; 0x24
 8014a44:	e77d      	b.n	8014942 <_svfprintf_r+0x68a>
 8014a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a48:	930c      	str	r3, [sp, #48]	; 0x30
 8014a4a:	e77a      	b.n	8014942 <_svfprintf_r+0x68a>
 8014a4c:	2306      	movs	r3, #6
 8014a4e:	9308      	str	r3, [sp, #32]
 8014a50:	e777      	b.n	8014942 <_svfprintf_r+0x68a>
 8014a52:	9b08      	ldr	r3, [sp, #32]
 8014a54:	930c      	str	r3, [sp, #48]	; 0x30
 8014a56:	2301      	movs	r3, #1
 8014a58:	e7f9      	b.n	8014a4e <_svfprintf_r+0x796>
 8014a5a:	930d      	str	r3, [sp, #52]	; 0x34
 8014a5c:	2300      	movs	r3, #0
 8014a5e:	e77f      	b.n	8014960 <_svfprintf_r+0x6a8>
 8014a60:	2030      	movs	r0, #48	; 0x30
 8014a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a64:	932a      	str	r3, [sp, #168]	; 0xa8
 8014a66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014a68:	7bda      	ldrb	r2, [r3, #15]
 8014a6a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014a6c:	3b01      	subs	r3, #1
 8014a6e:	932a      	str	r3, [sp, #168]	; 0xa8
 8014a70:	7819      	ldrb	r1, [r3, #0]
 8014a72:	4291      	cmp	r1, r2
 8014a74:	d07d      	beq.n	8014b72 <_svfprintf_r+0x8ba>
 8014a76:	1c4a      	adds	r2, r1, #1
 8014a78:	b2d2      	uxtb	r2, r2
 8014a7a:	2939      	cmp	r1, #57	; 0x39
 8014a7c:	d101      	bne.n	8014a82 <_svfprintf_r+0x7ca>
 8014a7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014a80:	7a92      	ldrb	r2, [r2, #10]
 8014a82:	701a      	strb	r2, [r3, #0]
 8014a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a88:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8014a8a:	1a9b      	subs	r3, r3, r2
 8014a8c:	930d      	str	r3, [sp, #52]	; 0x34
 8014a8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a90:	2b47      	cmp	r3, #71	; 0x47
 8014a92:	d000      	beq.n	8014a96 <_svfprintf_r+0x7de>
 8014a94:	e0d2      	b.n	8014c3c <_svfprintf_r+0x984>
 8014a96:	1ceb      	adds	r3, r5, #3
 8014a98:	db03      	blt.n	8014aa2 <_svfprintf_r+0x7ea>
 8014a9a:	9b08      	ldr	r3, [sp, #32]
 8014a9c:	42ab      	cmp	r3, r5
 8014a9e:	db00      	blt.n	8014aa2 <_svfprintf_r+0x7ea>
 8014aa0:	e0fd      	b.n	8014c9e <_svfprintf_r+0x9e6>
 8014aa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014aa4:	3b02      	subs	r3, #2
 8014aa6:	930e      	str	r3, [sp, #56]	; 0x38
 8014aa8:	2238      	movs	r2, #56	; 0x38
 8014aaa:	466b      	mov	r3, sp
 8014aac:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014aae:	189b      	adds	r3, r3, r2
 8014ab0:	3a18      	subs	r2, #24
 8014ab2:	4391      	bics	r1, r2
 8014ab4:	1e6c      	subs	r4, r5, #1
 8014ab6:	000a      	movs	r2, r1
 8014ab8:	9426      	str	r4, [sp, #152]	; 0x98
 8014aba:	781b      	ldrb	r3, [r3, #0]
 8014abc:	2100      	movs	r1, #0
 8014abe:	2a41      	cmp	r2, #65	; 0x41
 8014ac0:	d102      	bne.n	8014ac8 <_svfprintf_r+0x810>
 8014ac2:	330f      	adds	r3, #15
 8014ac4:	b2db      	uxtb	r3, r3
 8014ac6:	3101      	adds	r1, #1
 8014ac8:	aa28      	add	r2, sp, #160	; 0xa0
 8014aca:	7013      	strb	r3, [r2, #0]
 8014acc:	232b      	movs	r3, #43	; 0x2b
 8014ace:	2c00      	cmp	r4, #0
 8014ad0:	da02      	bge.n	8014ad8 <_svfprintf_r+0x820>
 8014ad2:	2401      	movs	r4, #1
 8014ad4:	232d      	movs	r3, #45	; 0x2d
 8014ad6:	1b64      	subs	r4, r4, r5
 8014ad8:	7053      	strb	r3, [r2, #1]
 8014ada:	2c09      	cmp	r4, #9
 8014adc:	dc00      	bgt.n	8014ae0 <_svfprintf_r+0x828>
 8014ade:	e0c7      	b.n	8014c70 <_svfprintf_r+0x9b8>
 8014ae0:	2537      	movs	r5, #55	; 0x37
 8014ae2:	ab1e      	add	r3, sp, #120	; 0x78
 8014ae4:	18ed      	adds	r5, r5, r3
 8014ae6:	1e6b      	subs	r3, r5, #1
 8014ae8:	0020      	movs	r0, r4
 8014aea:	210a      	movs	r1, #10
 8014aec:	9308      	str	r3, [sp, #32]
 8014aee:	f7eb fc9f 	bl	8000430 <__aeabi_idivmod>
 8014af2:	1e6b      	subs	r3, r5, #1
 8014af4:	3130      	adds	r1, #48	; 0x30
 8014af6:	7019      	strb	r1, [r3, #0]
 8014af8:	0020      	movs	r0, r4
 8014afa:	210a      	movs	r1, #10
 8014afc:	f7eb fbb2 	bl	8000264 <__divsi3>
 8014b00:	0004      	movs	r4, r0
 8014b02:	2809      	cmp	r0, #9
 8014b04:	dd00      	ble.n	8014b08 <_svfprintf_r+0x850>
 8014b06:	e0ac      	b.n	8014c62 <_svfprintf_r+0x9aa>
 8014b08:	232a      	movs	r3, #42	; 0x2a
 8014b0a:	2137      	movs	r1, #55	; 0x37
 8014b0c:	aa1e      	add	r2, sp, #120	; 0x78
 8014b0e:	3d02      	subs	r5, #2
 8014b10:	3430      	adds	r4, #48	; 0x30
 8014b12:	702c      	strb	r4, [r5, #0]
 8014b14:	189b      	adds	r3, r3, r2
 8014b16:	1889      	adds	r1, r1, r2
 8014b18:	001a      	movs	r2, r3
 8014b1a:	428d      	cmp	r5, r1
 8014b1c:	d200      	bcs.n	8014b20 <_svfprintf_r+0x868>
 8014b1e:	e0a2      	b.n	8014c66 <_svfprintf_r+0x9ae>
 8014b20:	ab28      	add	r3, sp, #160	; 0xa0
 8014b22:	1ad3      	subs	r3, r2, r3
 8014b24:	931d      	str	r3, [sp, #116]	; 0x74
 8014b26:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014b28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b2a:	4694      	mov	ip, r2
 8014b2c:	4463      	add	r3, ip
 8014b2e:	9308      	str	r3, [sp, #32]
 8014b30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b32:	2b01      	cmp	r3, #1
 8014b34:	dc01      	bgt.n	8014b3a <_svfprintf_r+0x882>
 8014b36:	07f3      	lsls	r3, r6, #31
 8014b38:	d504      	bpl.n	8014b44 <_svfprintf_r+0x88c>
 8014b3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014b3c:	9b08      	ldr	r3, [sp, #32]
 8014b3e:	4694      	mov	ip, r2
 8014b40:	4463      	add	r3, ip
 8014b42:	9308      	str	r3, [sp, #32]
 8014b44:	2280      	movs	r2, #128	; 0x80
 8014b46:	4b1a      	ldr	r3, [pc, #104]	; (8014bb0 <_svfprintf_r+0x8f8>)
 8014b48:	0052      	lsls	r2, r2, #1
 8014b4a:	4033      	ands	r3, r6
 8014b4c:	431a      	orrs	r2, r3
 8014b4e:	2300      	movs	r3, #0
 8014b50:	001d      	movs	r5, r3
 8014b52:	9220      	str	r2, [sp, #128]	; 0x80
 8014b54:	9310      	str	r3, [sp, #64]	; 0x40
 8014b56:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d100      	bne.n	8014b60 <_svfprintf_r+0x8a8>
 8014b5e:	e270      	b.n	8015042 <_svfprintf_r+0xd8a>
 8014b60:	231b      	movs	r3, #27
 8014b62:	aa1e      	add	r2, sp, #120	; 0x78
 8014b64:	189b      	adds	r3, r3, r2
 8014b66:	222d      	movs	r2, #45	; 0x2d
 8014b68:	701a      	strb	r2, [r3, #0]
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014b6e:	9317      	str	r3, [sp, #92]	; 0x5c
 8014b70:	e539      	b.n	80145e6 <_svfprintf_r+0x32e>
 8014b72:	7018      	strb	r0, [r3, #0]
 8014b74:	e779      	b.n	8014a6a <_svfprintf_r+0x7b2>
 8014b76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b78:	2b46      	cmp	r3, #70	; 0x46
 8014b7a:	d01b      	beq.n	8014bb4 <_svfprintf_r+0x8fc>
 8014b7c:	9d08      	ldr	r5, [sp, #32]
 8014b7e:	2b45      	cmp	r3, #69	; 0x45
 8014b80:	d101      	bne.n	8014b86 <_svfprintf_r+0x8ce>
 8014b82:	9b08      	ldr	r3, [sp, #32]
 8014b84:	1c5d      	adds	r5, r3, #1
 8014b86:	2302      	movs	r3, #2
 8014b88:	e016      	b.n	8014bb8 <_svfprintf_r+0x900>
 8014b8a:	46c0      	nop			; (mov r8, r8)
 8014b8c:	7fefffff 	.word	0x7fefffff
 8014b90:	0801a69c 	.word	0x0801a69c
 8014b94:	0801a698 	.word	0x0801a698
 8014b98:	0801a6a4 	.word	0x0801a6a4
 8014b9c:	0801a6a0 	.word	0x0801a6a0
 8014ba0:	0801a6b9 	.word	0x0801a6b9
 8014ba4:	0801a6a8 	.word	0x0801a6a8
 8014ba8:	40300000 	.word	0x40300000
 8014bac:	3fe00000 	.word	0x3fe00000
 8014bb0:	fffffbff 	.word	0xfffffbff
 8014bb4:	2303      	movs	r3, #3
 8014bb6:	9d08      	ldr	r5, [sp, #32]
 8014bb8:	aa2a      	add	r2, sp, #168	; 0xa8
 8014bba:	9204      	str	r2, [sp, #16]
 8014bbc:	aa27      	add	r2, sp, #156	; 0x9c
 8014bbe:	9203      	str	r2, [sp, #12]
 8014bc0:	aa26      	add	r2, sp, #152	; 0x98
 8014bc2:	9202      	str	r2, [sp, #8]
 8014bc4:	9300      	str	r3, [sp, #0]
 8014bc6:	9501      	str	r5, [sp, #4]
 8014bc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bca:	0022      	movs	r2, r4
 8014bcc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014bce:	f000 fe79 	bl	80158c4 <_dtoa_r>
 8014bd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014bd4:	9009      	str	r0, [sp, #36]	; 0x24
 8014bd6:	2b47      	cmp	r3, #71	; 0x47
 8014bd8:	d101      	bne.n	8014bde <_svfprintf_r+0x926>
 8014bda:	07f3      	lsls	r3, r6, #31
 8014bdc:	d524      	bpl.n	8014c28 <_svfprintf_r+0x970>
 8014bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014be0:	195b      	adds	r3, r3, r5
 8014be2:	9310      	str	r3, [sp, #64]	; 0x40
 8014be4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014be6:	2b46      	cmp	r3, #70	; 0x46
 8014be8:	d113      	bne.n	8014c12 <_svfprintf_r+0x95a>
 8014bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bec:	781b      	ldrb	r3, [r3, #0]
 8014bee:	2b30      	cmp	r3, #48	; 0x30
 8014bf0:	d10a      	bne.n	8014c08 <_svfprintf_r+0x950>
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	0020      	movs	r0, r4
 8014bf8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014bfa:	f7eb fc2f 	bl	800045c <__aeabi_dcmpeq>
 8014bfe:	2800      	cmp	r0, #0
 8014c00:	d102      	bne.n	8014c08 <_svfprintf_r+0x950>
 8014c02:	2301      	movs	r3, #1
 8014c04:	1b5d      	subs	r5, r3, r5
 8014c06:	9526      	str	r5, [sp, #152]	; 0x98
 8014c08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014c0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c0c:	4694      	mov	ip, r2
 8014c0e:	4463      	add	r3, ip
 8014c10:	9310      	str	r3, [sp, #64]	; 0x40
 8014c12:	2200      	movs	r2, #0
 8014c14:	2300      	movs	r3, #0
 8014c16:	0020      	movs	r0, r4
 8014c18:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014c1a:	f7eb fc1f 	bl	800045c <__aeabi_dcmpeq>
 8014c1e:	2230      	movs	r2, #48	; 0x30
 8014c20:	2800      	cmp	r0, #0
 8014c22:	d006      	beq.n	8014c32 <_svfprintf_r+0x97a>
 8014c24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c26:	932a      	str	r3, [sp, #168]	; 0xa8
 8014c28:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014c2a:	e72c      	b.n	8014a86 <_svfprintf_r+0x7ce>
 8014c2c:	1c59      	adds	r1, r3, #1
 8014c2e:	912a      	str	r1, [sp, #168]	; 0xa8
 8014c30:	701a      	strb	r2, [r3, #0]
 8014c32:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014c34:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014c36:	4299      	cmp	r1, r3
 8014c38:	d8f8      	bhi.n	8014c2c <_svfprintf_r+0x974>
 8014c3a:	e7f5      	b.n	8014c28 <_svfprintf_r+0x970>
 8014c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c3e:	2b46      	cmp	r3, #70	; 0x46
 8014c40:	d000      	beq.n	8014c44 <_svfprintf_r+0x98c>
 8014c42:	e731      	b.n	8014aa8 <_svfprintf_r+0x7f0>
 8014c44:	9b08      	ldr	r3, [sp, #32]
 8014c46:	2d00      	cmp	r5, #0
 8014c48:	dd21      	ble.n	8014c8e <_svfprintf_r+0x9d6>
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d101      	bne.n	8014c52 <_svfprintf_r+0x99a>
 8014c4e:	07f3      	lsls	r3, r6, #31
 8014c50:	d54a      	bpl.n	8014ce8 <_svfprintf_r+0xa30>
 8014c52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014c54:	18eb      	adds	r3, r5, r3
 8014c56:	9a08      	ldr	r2, [sp, #32]
 8014c58:	18d3      	adds	r3, r2, r3
 8014c5a:	9308      	str	r3, [sp, #32]
 8014c5c:	2366      	movs	r3, #102	; 0x66
 8014c5e:	930e      	str	r3, [sp, #56]	; 0x38
 8014c60:	e034      	b.n	8014ccc <_svfprintf_r+0xa14>
 8014c62:	9d08      	ldr	r5, [sp, #32]
 8014c64:	e73f      	b.n	8014ae6 <_svfprintf_r+0x82e>
 8014c66:	782a      	ldrb	r2, [r5, #0]
 8014c68:	3501      	adds	r5, #1
 8014c6a:	701a      	strb	r2, [r3, #0]
 8014c6c:	3301      	adds	r3, #1
 8014c6e:	e753      	b.n	8014b18 <_svfprintf_r+0x860>
 8014c70:	232a      	movs	r3, #42	; 0x2a
 8014c72:	aa1e      	add	r2, sp, #120	; 0x78
 8014c74:	189b      	adds	r3, r3, r2
 8014c76:	2900      	cmp	r1, #0
 8014c78:	d105      	bne.n	8014c86 <_svfprintf_r+0x9ce>
 8014c7a:	2230      	movs	r2, #48	; 0x30
 8014c7c:	ab28      	add	r3, sp, #160	; 0xa0
 8014c7e:	709a      	strb	r2, [r3, #2]
 8014c80:	232b      	movs	r3, #43	; 0x2b
 8014c82:	aa1e      	add	r2, sp, #120	; 0x78
 8014c84:	189b      	adds	r3, r3, r2
 8014c86:	3430      	adds	r4, #48	; 0x30
 8014c88:	1c5a      	adds	r2, r3, #1
 8014c8a:	701c      	strb	r4, [r3, #0]
 8014c8c:	e748      	b.n	8014b20 <_svfprintf_r+0x868>
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d102      	bne.n	8014c98 <_svfprintf_r+0x9e0>
 8014c92:	3301      	adds	r3, #1
 8014c94:	421e      	tst	r6, r3
 8014c96:	d029      	beq.n	8014cec <_svfprintf_r+0xa34>
 8014c98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014c9a:	3301      	adds	r3, #1
 8014c9c:	e7db      	b.n	8014c56 <_svfprintf_r+0x99e>
 8014c9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ca0:	42ab      	cmp	r3, r5
 8014ca2:	dc06      	bgt.n	8014cb2 <_svfprintf_r+0x9fa>
 8014ca4:	07f3      	lsls	r3, r6, #31
 8014ca6:	d524      	bpl.n	8014cf2 <_svfprintf_r+0xa3a>
 8014ca8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014caa:	18eb      	adds	r3, r5, r3
 8014cac:	9308      	str	r3, [sp, #32]
 8014cae:	2367      	movs	r3, #103	; 0x67
 8014cb0:	e7d5      	b.n	8014c5e <_svfprintf_r+0x9a6>
 8014cb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014cb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cb6:	4694      	mov	ip, r2
 8014cb8:	4463      	add	r3, ip
 8014cba:	9308      	str	r3, [sp, #32]
 8014cbc:	2367      	movs	r3, #103	; 0x67
 8014cbe:	930e      	str	r3, [sp, #56]	; 0x38
 8014cc0:	2d00      	cmp	r5, #0
 8014cc2:	dc03      	bgt.n	8014ccc <_svfprintf_r+0xa14>
 8014cc4:	9b08      	ldr	r3, [sp, #32]
 8014cc6:	1b5b      	subs	r3, r3, r5
 8014cc8:	3301      	adds	r3, #1
 8014cca:	9308      	str	r3, [sp, #32]
 8014ccc:	2380      	movs	r3, #128	; 0x80
 8014cce:	00db      	lsls	r3, r3, #3
 8014cd0:	401e      	ands	r6, r3
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	960f      	str	r6, [sp, #60]	; 0x3c
 8014cd6:	9310      	str	r3, [sp, #64]	; 0x40
 8014cd8:	2e00      	cmp	r6, #0
 8014cda:	d100      	bne.n	8014cde <_svfprintf_r+0xa26>
 8014cdc:	e73c      	b.n	8014b58 <_svfprintf_r+0x8a0>
 8014cde:	2d00      	cmp	r5, #0
 8014ce0:	dc27      	bgt.n	8014d32 <_svfprintf_r+0xa7a>
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	930f      	str	r3, [sp, #60]	; 0x3c
 8014ce6:	e737      	b.n	8014b58 <_svfprintf_r+0x8a0>
 8014ce8:	9508      	str	r5, [sp, #32]
 8014cea:	e7b7      	b.n	8014c5c <_svfprintf_r+0x9a4>
 8014cec:	2266      	movs	r2, #102	; 0x66
 8014cee:	920e      	str	r2, [sp, #56]	; 0x38
 8014cf0:	e7eb      	b.n	8014cca <_svfprintf_r+0xa12>
 8014cf2:	9508      	str	r5, [sp, #32]
 8014cf4:	e7db      	b.n	8014cae <_svfprintf_r+0x9f6>
 8014cf6:	42ab      	cmp	r3, r5
 8014cf8:	da0e      	bge.n	8014d18 <_svfprintf_r+0xa60>
 8014cfa:	1aed      	subs	r5, r5, r3
 8014cfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014cfe:	785b      	ldrb	r3, [r3, #1]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d012      	beq.n	8014d2a <_svfprintf_r+0xa72>
 8014d04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d06:	3301      	adds	r3, #1
 8014d08:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d0c:	3301      	adds	r3, #1
 8014d0e:	9313      	str	r3, [sp, #76]	; 0x4c
 8014d10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d12:	781b      	ldrb	r3, [r3, #0]
 8014d14:	2bff      	cmp	r3, #255	; 0xff
 8014d16:	d1ee      	bne.n	8014cf6 <_svfprintf_r+0xa3e>
 8014d18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014d1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d1c:	189b      	adds	r3, r3, r2
 8014d1e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014d20:	4353      	muls	r3, r2
 8014d22:	9a08      	ldr	r2, [sp, #32]
 8014d24:	189b      	adds	r3, r3, r2
 8014d26:	9308      	str	r3, [sp, #32]
 8014d28:	e716      	b.n	8014b58 <_svfprintf_r+0x8a0>
 8014d2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d2c:	3301      	adds	r3, #1
 8014d2e:	9310      	str	r3, [sp, #64]	; 0x40
 8014d30:	e7ee      	b.n	8014d10 <_svfprintf_r+0xa58>
 8014d32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d34:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d36:	e7eb      	b.n	8014d10 <_svfprintf_r+0xa58>
 8014d38:	0022      	movs	r2, r4
 8014d3a:	ca08      	ldmia	r2!, {r3}
 8014d3c:	9212      	str	r2, [sp, #72]	; 0x48
 8014d3e:	06b2      	lsls	r2, r6, #26
 8014d40:	d508      	bpl.n	8014d54 <_svfprintf_r+0xa9c>
 8014d42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d44:	601a      	str	r2, [r3, #0]
 8014d46:	17d2      	asrs	r2, r2, #31
 8014d48:	605a      	str	r2, [r3, #4]
 8014d4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d4c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8014d50:	f7ff faeb 	bl	801432a <_svfprintf_r+0x72>
 8014d54:	06f2      	lsls	r2, r6, #27
 8014d56:	d502      	bpl.n	8014d5e <_svfprintf_r+0xaa6>
 8014d58:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d5a:	601a      	str	r2, [r3, #0]
 8014d5c:	e7f5      	b.n	8014d4a <_svfprintf_r+0xa92>
 8014d5e:	0672      	lsls	r2, r6, #25
 8014d60:	d502      	bpl.n	8014d68 <_svfprintf_r+0xab0>
 8014d62:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d64:	801a      	strh	r2, [r3, #0]
 8014d66:	e7f0      	b.n	8014d4a <_svfprintf_r+0xa92>
 8014d68:	05b2      	lsls	r2, r6, #22
 8014d6a:	d5f5      	bpl.n	8014d58 <_svfprintf_r+0xaa0>
 8014d6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d6e:	701a      	strb	r2, [r3, #0]
 8014d70:	e7eb      	b.n	8014d4a <_svfprintf_r+0xa92>
 8014d72:	2310      	movs	r3, #16
 8014d74:	431e      	orrs	r6, r3
 8014d76:	2220      	movs	r2, #32
 8014d78:	4032      	ands	r2, r6
 8014d7a:	d025      	beq.n	8014dc8 <_svfprintf_r+0xb10>
 8014d7c:	2307      	movs	r3, #7
 8014d7e:	3407      	adds	r4, #7
 8014d80:	439c      	bics	r4, r3
 8014d82:	0023      	movs	r3, r4
 8014d84:	3308      	adds	r3, #8
 8014d86:	9312      	str	r3, [sp, #72]	; 0x48
 8014d88:	6823      	ldr	r3, [r4, #0]
 8014d8a:	6864      	ldr	r4, [r4, #4]
 8014d8c:	9306      	str	r3, [sp, #24]
 8014d8e:	9407      	str	r4, [sp, #28]
 8014d90:	4bc2      	ldr	r3, [pc, #776]	; (801509c <_svfprintf_r+0xde4>)
 8014d92:	401e      	ands	r6, r3
 8014d94:	2300      	movs	r3, #0
 8014d96:	221b      	movs	r2, #27
 8014d98:	a91e      	add	r1, sp, #120	; 0x78
 8014d9a:	1852      	adds	r2, r2, r1
 8014d9c:	2100      	movs	r1, #0
 8014d9e:	7011      	strb	r1, [r2, #0]
 8014da0:	9a08      	ldr	r2, [sp, #32]
 8014da2:	3201      	adds	r2, #1
 8014da4:	d100      	bne.n	8014da8 <_svfprintf_r+0xaf0>
 8014da6:	e0a6      	b.n	8014ef6 <_svfprintf_r+0xc3e>
 8014da8:	0032      	movs	r2, r6
 8014daa:	2180      	movs	r1, #128	; 0x80
 8014dac:	9807      	ldr	r0, [sp, #28]
 8014dae:	438e      	bics	r6, r1
 8014db0:	9906      	ldr	r1, [sp, #24]
 8014db2:	4301      	orrs	r1, r0
 8014db4:	d000      	beq.n	8014db8 <_svfprintf_r+0xb00>
 8014db6:	e09e      	b.n	8014ef6 <_svfprintf_r+0xc3e>
 8014db8:	9908      	ldr	r1, [sp, #32]
 8014dba:	2900      	cmp	r1, #0
 8014dbc:	d100      	bne.n	8014dc0 <_svfprintf_r+0xb08>
 8014dbe:	e125      	b.n	801500c <_svfprintf_r+0xd54>
 8014dc0:	2b01      	cmp	r3, #1
 8014dc2:	d000      	beq.n	8014dc6 <_svfprintf_r+0xb0e>
 8014dc4:	e09a      	b.n	8014efc <_svfprintf_r+0xc44>
 8014dc6:	e518      	b.n	80147fa <_svfprintf_r+0x542>
 8014dc8:	1d23      	adds	r3, r4, #4
 8014dca:	9312      	str	r3, [sp, #72]	; 0x48
 8014dcc:	2310      	movs	r3, #16
 8014dce:	4033      	ands	r3, r6
 8014dd0:	d003      	beq.n	8014dda <_svfprintf_r+0xb22>
 8014dd2:	6823      	ldr	r3, [r4, #0]
 8014dd4:	9306      	str	r3, [sp, #24]
 8014dd6:	9207      	str	r2, [sp, #28]
 8014dd8:	e7da      	b.n	8014d90 <_svfprintf_r+0xad8>
 8014dda:	2240      	movs	r2, #64	; 0x40
 8014ddc:	4032      	ands	r2, r6
 8014dde:	d004      	beq.n	8014dea <_svfprintf_r+0xb32>
 8014de0:	6822      	ldr	r2, [r4, #0]
 8014de2:	b292      	uxth	r2, r2
 8014de4:	9206      	str	r2, [sp, #24]
 8014de6:	9307      	str	r3, [sp, #28]
 8014de8:	e7d2      	b.n	8014d90 <_svfprintf_r+0xad8>
 8014dea:	2380      	movs	r3, #128	; 0x80
 8014dec:	009b      	lsls	r3, r3, #2
 8014dee:	4033      	ands	r3, r6
 8014df0:	d002      	beq.n	8014df8 <_svfprintf_r+0xb40>
 8014df2:	6823      	ldr	r3, [r4, #0]
 8014df4:	b2db      	uxtb	r3, r3
 8014df6:	e7ed      	b.n	8014dd4 <_svfprintf_r+0xb1c>
 8014df8:	6822      	ldr	r2, [r4, #0]
 8014dfa:	e7f3      	b.n	8014de4 <_svfprintf_r+0xb2c>
 8014dfc:	1d23      	adds	r3, r4, #4
 8014dfe:	49a8      	ldr	r1, [pc, #672]	; (80150a0 <_svfprintf_r+0xde8>)
 8014e00:	aa25      	add	r2, sp, #148	; 0x94
 8014e02:	9312      	str	r3, [sp, #72]	; 0x48
 8014e04:	6823      	ldr	r3, [r4, #0]
 8014e06:	8011      	strh	r1, [r2, #0]
 8014e08:	4aa6      	ldr	r2, [pc, #664]	; (80150a4 <_svfprintf_r+0xdec>)
 8014e0a:	9306      	str	r3, [sp, #24]
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	921e      	str	r2, [sp, #120]	; 0x78
 8014e10:	2278      	movs	r2, #120	; 0x78
 8014e12:	9307      	str	r3, [sp, #28]
 8014e14:	3302      	adds	r3, #2
 8014e16:	431e      	orrs	r6, r3
 8014e18:	920e      	str	r2, [sp, #56]	; 0x38
 8014e1a:	e7bc      	b.n	8014d96 <_svfprintf_r+0xade>
 8014e1c:	1d23      	adds	r3, r4, #4
 8014e1e:	9312      	str	r3, [sp, #72]	; 0x48
 8014e20:	6823      	ldr	r3, [r4, #0]
 8014e22:	2400      	movs	r4, #0
 8014e24:	9309      	str	r3, [sp, #36]	; 0x24
 8014e26:	231b      	movs	r3, #27
 8014e28:	aa1e      	add	r2, sp, #120	; 0x78
 8014e2a:	189b      	adds	r3, r3, r2
 8014e2c:	701c      	strb	r4, [r3, #0]
 8014e2e:	9b08      	ldr	r3, [sp, #32]
 8014e30:	3301      	adds	r3, #1
 8014e32:	d00e      	beq.n	8014e52 <_svfprintf_r+0xb9a>
 8014e34:	9a08      	ldr	r2, [sp, #32]
 8014e36:	0021      	movs	r1, r4
 8014e38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e3a:	f001 ff79 	bl	8016d30 <memchr>
 8014e3e:	900c      	str	r0, [sp, #48]	; 0x30
 8014e40:	42a0      	cmp	r0, r4
 8014e42:	d100      	bne.n	8014e46 <_svfprintf_r+0xb8e>
 8014e44:	e100      	b.n	8015048 <_svfprintf_r+0xd90>
 8014e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e48:	1a83      	subs	r3, r0, r2
 8014e4a:	9308      	str	r3, [sp, #32]
 8014e4c:	940c      	str	r4, [sp, #48]	; 0x30
 8014e4e:	0023      	movs	r3, r4
 8014e50:	e527      	b.n	80148a2 <_svfprintf_r+0x5ea>
 8014e52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e54:	f7eb f960 	bl	8000118 <strlen>
 8014e58:	9008      	str	r0, [sp, #32]
 8014e5a:	e7f7      	b.n	8014e4c <_svfprintf_r+0xb94>
 8014e5c:	2310      	movs	r3, #16
 8014e5e:	431e      	orrs	r6, r3
 8014e60:	2220      	movs	r2, #32
 8014e62:	4032      	ands	r2, r6
 8014e64:	d00b      	beq.n	8014e7e <_svfprintf_r+0xbc6>
 8014e66:	2307      	movs	r3, #7
 8014e68:	3407      	adds	r4, #7
 8014e6a:	439c      	bics	r4, r3
 8014e6c:	0023      	movs	r3, r4
 8014e6e:	3308      	adds	r3, #8
 8014e70:	9312      	str	r3, [sp, #72]	; 0x48
 8014e72:	6823      	ldr	r3, [r4, #0]
 8014e74:	6864      	ldr	r4, [r4, #4]
 8014e76:	9306      	str	r3, [sp, #24]
 8014e78:	9407      	str	r4, [sp, #28]
 8014e7a:	2301      	movs	r3, #1
 8014e7c:	e78b      	b.n	8014d96 <_svfprintf_r+0xade>
 8014e7e:	1d23      	adds	r3, r4, #4
 8014e80:	9312      	str	r3, [sp, #72]	; 0x48
 8014e82:	2310      	movs	r3, #16
 8014e84:	4033      	ands	r3, r6
 8014e86:	d003      	beq.n	8014e90 <_svfprintf_r+0xbd8>
 8014e88:	6823      	ldr	r3, [r4, #0]
 8014e8a:	9306      	str	r3, [sp, #24]
 8014e8c:	9207      	str	r2, [sp, #28]
 8014e8e:	e7f4      	b.n	8014e7a <_svfprintf_r+0xbc2>
 8014e90:	2240      	movs	r2, #64	; 0x40
 8014e92:	4032      	ands	r2, r6
 8014e94:	d004      	beq.n	8014ea0 <_svfprintf_r+0xbe8>
 8014e96:	6822      	ldr	r2, [r4, #0]
 8014e98:	b292      	uxth	r2, r2
 8014e9a:	9206      	str	r2, [sp, #24]
 8014e9c:	9307      	str	r3, [sp, #28]
 8014e9e:	e7ec      	b.n	8014e7a <_svfprintf_r+0xbc2>
 8014ea0:	2380      	movs	r3, #128	; 0x80
 8014ea2:	009b      	lsls	r3, r3, #2
 8014ea4:	4033      	ands	r3, r6
 8014ea6:	d002      	beq.n	8014eae <_svfprintf_r+0xbf6>
 8014ea8:	6823      	ldr	r3, [r4, #0]
 8014eaa:	b2db      	uxtb	r3, r3
 8014eac:	e7ed      	b.n	8014e8a <_svfprintf_r+0xbd2>
 8014eae:	6822      	ldr	r2, [r4, #0]
 8014eb0:	e7f3      	b.n	8014e9a <_svfprintf_r+0xbe2>
 8014eb2:	4b7c      	ldr	r3, [pc, #496]	; (80150a4 <_svfprintf_r+0xdec>)
 8014eb4:	f7ff fad9 	bl	801446a <_svfprintf_r+0x1b2>
 8014eb8:	1d23      	adds	r3, r4, #4
 8014eba:	9312      	str	r3, [sp, #72]	; 0x48
 8014ebc:	2310      	movs	r3, #16
 8014ebe:	4033      	ands	r3, r6
 8014ec0:	d004      	beq.n	8014ecc <_svfprintf_r+0xc14>
 8014ec2:	6823      	ldr	r3, [r4, #0]
 8014ec4:	9306      	str	r3, [sp, #24]
 8014ec6:	9207      	str	r2, [sp, #28]
 8014ec8:	f7ff fadf 	bl	801448a <_svfprintf_r+0x1d2>
 8014ecc:	2240      	movs	r2, #64	; 0x40
 8014ece:	4032      	ands	r2, r6
 8014ed0:	d005      	beq.n	8014ede <_svfprintf_r+0xc26>
 8014ed2:	6822      	ldr	r2, [r4, #0]
 8014ed4:	b292      	uxth	r2, r2
 8014ed6:	9206      	str	r2, [sp, #24]
 8014ed8:	9307      	str	r3, [sp, #28]
 8014eda:	f7ff fad6 	bl	801448a <_svfprintf_r+0x1d2>
 8014ede:	2380      	movs	r3, #128	; 0x80
 8014ee0:	009b      	lsls	r3, r3, #2
 8014ee2:	4033      	ands	r3, r6
 8014ee4:	d002      	beq.n	8014eec <_svfprintf_r+0xc34>
 8014ee6:	6823      	ldr	r3, [r4, #0]
 8014ee8:	b2db      	uxtb	r3, r3
 8014eea:	e7eb      	b.n	8014ec4 <_svfprintf_r+0xc0c>
 8014eec:	6822      	ldr	r2, [r4, #0]
 8014eee:	e7f2      	b.n	8014ed6 <_svfprintf_r+0xc1e>
 8014ef0:	0032      	movs	r2, r6
 8014ef2:	2301      	movs	r3, #1
 8014ef4:	e759      	b.n	8014daa <_svfprintf_r+0xaf2>
 8014ef6:	2b01      	cmp	r3, #1
 8014ef8:	d100      	bne.n	8014efc <_svfprintf_r+0xc44>
 8014efa:	e476      	b.n	80147ea <_svfprintf_r+0x532>
 8014efc:	2b02      	cmp	r3, #2
 8014efe:	d06b      	beq.n	8014fd8 <_svfprintf_r+0xd20>
 8014f00:	2507      	movs	r5, #7
 8014f02:	ab58      	add	r3, sp, #352	; 0x160
 8014f04:	1e5a      	subs	r2, r3, #1
 8014f06:	9209      	str	r2, [sp, #36]	; 0x24
 8014f08:	9a06      	ldr	r2, [sp, #24]
 8014f0a:	1e59      	subs	r1, r3, #1
 8014f0c:	402a      	ands	r2, r5
 8014f0e:	3230      	adds	r2, #48	; 0x30
 8014f10:	700a      	strb	r2, [r1, #0]
 8014f12:	9907      	ldr	r1, [sp, #28]
 8014f14:	074c      	lsls	r4, r1, #29
 8014f16:	9906      	ldr	r1, [sp, #24]
 8014f18:	08c8      	lsrs	r0, r1, #3
 8014f1a:	9907      	ldr	r1, [sp, #28]
 8014f1c:	4304      	orrs	r4, r0
 8014f1e:	08c9      	lsrs	r1, r1, #3
 8014f20:	9107      	str	r1, [sp, #28]
 8014f22:	0021      	movs	r1, r4
 8014f24:	9807      	ldr	r0, [sp, #28]
 8014f26:	9406      	str	r4, [sp, #24]
 8014f28:	4301      	orrs	r1, r0
 8014f2a:	d111      	bne.n	8014f50 <_svfprintf_r+0xc98>
 8014f2c:	07f1      	lsls	r1, r6, #31
 8014f2e:	d502      	bpl.n	8014f36 <_svfprintf_r+0xc7e>
 8014f30:	3b02      	subs	r3, #2
 8014f32:	2a30      	cmp	r2, #48	; 0x30
 8014f34:	d173      	bne.n	801501e <_svfprintf_r+0xd66>
 8014f36:	9b08      	ldr	r3, [sp, #32]
 8014f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f3a:	9317      	str	r3, [sp, #92]	; 0x5c
 8014f3c:	ab58      	add	r3, sp, #352	; 0x160
 8014f3e:	1a9b      	subs	r3, r3, r2
 8014f40:	9308      	str	r3, [sp, #32]
 8014f42:	2300      	movs	r3, #0
 8014f44:	930c      	str	r3, [sp, #48]	; 0x30
 8014f46:	9310      	str	r3, [sp, #64]	; 0x40
 8014f48:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f4a:	001d      	movs	r5, r3
 8014f4c:	f7ff fb4b 	bl	80145e6 <_svfprintf_r+0x32e>
 8014f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f52:	e7d7      	b.n	8014f04 <_svfprintf_r+0xc4c>
 8014f54:	2480      	movs	r4, #128	; 0x80
 8014f56:	2300      	movs	r3, #0
 8014f58:	00e4      	lsls	r4, r4, #3
 8014f5a:	930d      	str	r3, [sp, #52]	; 0x34
 8014f5c:	4034      	ands	r4, r6
 8014f5e:	ab58      	add	r3, sp, #352	; 0x160
 8014f60:	3b01      	subs	r3, #1
 8014f62:	9309      	str	r3, [sp, #36]	; 0x24
 8014f64:	220a      	movs	r2, #10
 8014f66:	9806      	ldr	r0, [sp, #24]
 8014f68:	9907      	ldr	r1, [sp, #28]
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	f7eb fade 	bl	800052c <__aeabi_uldivmod>
 8014f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f72:	3230      	adds	r2, #48	; 0x30
 8014f74:	701a      	strb	r2, [r3, #0]
 8014f76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f78:	3301      	adds	r3, #1
 8014f7a:	930d      	str	r3, [sp, #52]	; 0x34
 8014f7c:	2c00      	cmp	r4, #0
 8014f7e:	d01d      	beq.n	8014fbc <_svfprintf_r+0xd04>
 8014f80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014f84:	781b      	ldrb	r3, [r3, #0]
 8014f86:	429a      	cmp	r2, r3
 8014f88:	d118      	bne.n	8014fbc <_svfprintf_r+0xd04>
 8014f8a:	2aff      	cmp	r2, #255	; 0xff
 8014f8c:	d016      	beq.n	8014fbc <_svfprintf_r+0xd04>
 8014f8e:	9b07      	ldr	r3, [sp, #28]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d102      	bne.n	8014f9a <_svfprintf_r+0xce2>
 8014f94:	9b06      	ldr	r3, [sp, #24]
 8014f96:	2b09      	cmp	r3, #9
 8014f98:	d910      	bls.n	8014fbc <_svfprintf_r+0xd04>
 8014f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014f9e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8014fa0:	1a9b      	subs	r3, r3, r2
 8014fa2:	0018      	movs	r0, r3
 8014fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8014fa6:	f7fe fa52 	bl	801344e <strncpy>
 8014faa:	2200      	movs	r2, #0
 8014fac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014fae:	920d      	str	r2, [sp, #52]	; 0x34
 8014fb0:	785b      	ldrb	r3, [r3, #1]
 8014fb2:	1e5a      	subs	r2, r3, #1
 8014fb4:	4193      	sbcs	r3, r2
 8014fb6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014fb8:	18d3      	adds	r3, r2, r3
 8014fba:	9313      	str	r3, [sp, #76]	; 0x4c
 8014fbc:	220a      	movs	r2, #10
 8014fbe:	9806      	ldr	r0, [sp, #24]
 8014fc0:	9907      	ldr	r1, [sp, #28]
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	f7eb fab2 	bl	800052c <__aeabi_uldivmod>
 8014fc8:	9006      	str	r0, [sp, #24]
 8014fca:	9107      	str	r1, [sp, #28]
 8014fcc:	9b06      	ldr	r3, [sp, #24]
 8014fce:	9a07      	ldr	r2, [sp, #28]
 8014fd0:	4313      	orrs	r3, r2
 8014fd2:	d0b0      	beq.n	8014f36 <_svfprintf_r+0xc7e>
 8014fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fd6:	e7c3      	b.n	8014f60 <_svfprintf_r+0xca8>
 8014fd8:	200f      	movs	r0, #15
 8014fda:	ab58      	add	r3, sp, #352	; 0x160
 8014fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8014fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fe0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014fe2:	3b01      	subs	r3, #1
 8014fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8014fe6:	9b06      	ldr	r3, [sp, #24]
 8014fe8:	4003      	ands	r3, r0
 8014fea:	5cd3      	ldrb	r3, [r2, r3]
 8014fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fee:	7013      	strb	r3, [r2, #0]
 8014ff0:	9b07      	ldr	r3, [sp, #28]
 8014ff2:	0719      	lsls	r1, r3, #28
 8014ff4:	9b06      	ldr	r3, [sp, #24]
 8014ff6:	091a      	lsrs	r2, r3, #4
 8014ff8:	9b07      	ldr	r3, [sp, #28]
 8014ffa:	4311      	orrs	r1, r2
 8014ffc:	091b      	lsrs	r3, r3, #4
 8014ffe:	9307      	str	r3, [sp, #28]
 8015000:	000b      	movs	r3, r1
 8015002:	9a07      	ldr	r2, [sp, #28]
 8015004:	9106      	str	r1, [sp, #24]
 8015006:	4313      	orrs	r3, r2
 8015008:	d1e9      	bne.n	8014fde <_svfprintf_r+0xd26>
 801500a:	e794      	b.n	8014f36 <_svfprintf_r+0xc7e>
 801500c:	a958      	add	r1, sp, #352	; 0x160
 801500e:	9109      	str	r1, [sp, #36]	; 0x24
 8015010:	2b00      	cmp	r3, #0
 8015012:	d190      	bne.n	8014f36 <_svfprintf_r+0xc7e>
 8015014:	07d3      	lsls	r3, r2, #31
 8015016:	d58e      	bpl.n	8014f36 <_svfprintf_r+0xc7e>
 8015018:	23e7      	movs	r3, #231	; 0xe7
 801501a:	aa1e      	add	r2, sp, #120	; 0x78
 801501c:	189b      	adds	r3, r3, r2
 801501e:	2230      	movs	r2, #48	; 0x30
 8015020:	f7ff fbf0 	bl	8014804 <_svfprintf_r+0x54c>
 8015024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015026:	2b00      	cmp	r3, #0
 8015028:	d100      	bne.n	801502c <_svfprintf_r+0xd74>
 801502a:	e38a      	b.n	8015742 <_svfprintf_r+0x148a>
 801502c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801502e:	ab3f      	add	r3, sp, #252	; 0xfc
 8015030:	701a      	strb	r2, [r3, #0]
 8015032:	221b      	movs	r2, #27
 8015034:	2000      	movs	r0, #0
 8015036:	a91e      	add	r1, sp, #120	; 0x78
 8015038:	1852      	adds	r2, r2, r1
 801503a:	7010      	strb	r0, [r2, #0]
 801503c:	9412      	str	r4, [sp, #72]	; 0x48
 801503e:	f7ff faca 	bl	80145d6 <_svfprintf_r+0x31e>
 8015042:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015044:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015046:	e592      	b.n	8014b6e <_svfprintf_r+0x8b6>
 8015048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801504a:	e42a      	b.n	80148a2 <_svfprintf_r+0x5ea>
 801504c:	2010      	movs	r0, #16
 801504e:	1812      	adds	r2, r2, r0
 8015050:	6078      	str	r0, [r7, #4]
 8015052:	922e      	str	r2, [sp, #184]	; 0xb8
 8015054:	932d      	str	r3, [sp, #180]	; 0xb4
 8015056:	2b07      	cmp	r3, #7
 8015058:	dd08      	ble.n	801506c <_svfprintf_r+0xdb4>
 801505a:	aa2c      	add	r2, sp, #176	; 0xb0
 801505c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801505e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015060:	f002 fa7e 	bl	8017560 <__ssprint_r>
 8015064:	2800      	cmp	r0, #0
 8015066:	d000      	beq.n	801506a <_svfprintf_r+0xdb2>
 8015068:	e34a      	b.n	8015700 <_svfprintf_r+0x1448>
 801506a:	a92f      	add	r1, sp, #188	; 0xbc
 801506c:	3c10      	subs	r4, #16
 801506e:	000f      	movs	r7, r1
 8015070:	f7ff fad8 	bl	8014624 <_svfprintf_r+0x36c>
 8015074:	2010      	movs	r0, #16
 8015076:	1812      	adds	r2, r2, r0
 8015078:	6078      	str	r0, [r7, #4]
 801507a:	922e      	str	r2, [sp, #184]	; 0xb8
 801507c:	932d      	str	r3, [sp, #180]	; 0xb4
 801507e:	2b07      	cmp	r3, #7
 8015080:	dd08      	ble.n	8015094 <_svfprintf_r+0xddc>
 8015082:	aa2c      	add	r2, sp, #176	; 0xb0
 8015084:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015086:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015088:	f002 fa6a 	bl	8017560 <__ssprint_r>
 801508c:	2800      	cmp	r0, #0
 801508e:	d000      	beq.n	8015092 <_svfprintf_r+0xdda>
 8015090:	e336      	b.n	8015700 <_svfprintf_r+0x1448>
 8015092:	a92f      	add	r1, sp, #188	; 0xbc
 8015094:	3c10      	subs	r4, #16
 8015096:	000f      	movs	r7, r1
 8015098:	f7ff fb24 	bl	80146e4 <_svfprintf_r+0x42c>
 801509c:	fffffbff 	.word	0xfffffbff
 80150a0:	00007830 	.word	0x00007830
 80150a4:	0801a6a8 	.word	0x0801a6a8
 80150a8:	2010      	movs	r0, #16
 80150aa:	1812      	adds	r2, r2, r0
 80150ac:	6078      	str	r0, [r7, #4]
 80150ae:	922e      	str	r2, [sp, #184]	; 0xb8
 80150b0:	932d      	str	r3, [sp, #180]	; 0xb4
 80150b2:	2b07      	cmp	r3, #7
 80150b4:	dd08      	ble.n	80150c8 <_svfprintf_r+0xe10>
 80150b6:	aa2c      	add	r2, sp, #176	; 0xb0
 80150b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80150bc:	f002 fa50 	bl	8017560 <__ssprint_r>
 80150c0:	2800      	cmp	r0, #0
 80150c2:	d000      	beq.n	80150c6 <_svfprintf_r+0xe0e>
 80150c4:	e31c      	b.n	8015700 <_svfprintf_r+0x1448>
 80150c6:	a92f      	add	r1, sp, #188	; 0xbc
 80150c8:	3c10      	subs	r4, #16
 80150ca:	000f      	movs	r7, r1
 80150cc:	f7ff fb2c 	bl	8014728 <_svfprintf_r+0x470>
 80150d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150d2:	2b65      	cmp	r3, #101	; 0x65
 80150d4:	dc00      	bgt.n	80150d8 <_svfprintf_r+0xe20>
 80150d6:	e259      	b.n	801558c <_svfprintf_r+0x12d4>
 80150d8:	2200      	movs	r2, #0
 80150da:	2300      	movs	r3, #0
 80150dc:	981a      	ldr	r0, [sp, #104]	; 0x68
 80150de:	9919      	ldr	r1, [sp, #100]	; 0x64
 80150e0:	f7eb f9bc 	bl	800045c <__aeabi_dcmpeq>
 80150e4:	2800      	cmp	r0, #0
 80150e6:	d07c      	beq.n	80151e2 <_svfprintf_r+0xf2a>
 80150e8:	4b81      	ldr	r3, [pc, #516]	; (80152f0 <_svfprintf_r+0x1038>)
 80150ea:	603b      	str	r3, [r7, #0]
 80150ec:	2301      	movs	r3, #1
 80150ee:	607b      	str	r3, [r7, #4]
 80150f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80150f2:	3708      	adds	r7, #8
 80150f4:	3301      	adds	r3, #1
 80150f6:	932e      	str	r3, [sp, #184]	; 0xb8
 80150f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80150fa:	9308      	str	r3, [sp, #32]
 80150fc:	3301      	adds	r3, #1
 80150fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8015100:	2b07      	cmp	r3, #7
 8015102:	dd08      	ble.n	8015116 <_svfprintf_r+0xe5e>
 8015104:	aa2c      	add	r2, sp, #176	; 0xb0
 8015106:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015108:	980a      	ldr	r0, [sp, #40]	; 0x28
 801510a:	f002 fa29 	bl	8017560 <__ssprint_r>
 801510e:	2800      	cmp	r0, #0
 8015110:	d000      	beq.n	8015114 <_svfprintf_r+0xe5c>
 8015112:	e2f5      	b.n	8015700 <_svfprintf_r+0x1448>
 8015114:	af2f      	add	r7, sp, #188	; 0xbc
 8015116:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015118:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801511a:	4293      	cmp	r3, r2
 801511c:	db01      	blt.n	8015122 <_svfprintf_r+0xe6a>
 801511e:	07f3      	lsls	r3, r6, #31
 8015120:	d51d      	bpl.n	801515e <_svfprintf_r+0xea6>
 8015122:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015124:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015126:	4694      	mov	ip, r2
 8015128:	603b      	str	r3, [r7, #0]
 801512a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801512c:	607b      	str	r3, [r7, #4]
 801512e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015130:	3708      	adds	r7, #8
 8015132:	4463      	add	r3, ip
 8015134:	932e      	str	r3, [sp, #184]	; 0xb8
 8015136:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015138:	9308      	str	r3, [sp, #32]
 801513a:	3301      	adds	r3, #1
 801513c:	932d      	str	r3, [sp, #180]	; 0xb4
 801513e:	2b07      	cmp	r3, #7
 8015140:	dd08      	ble.n	8015154 <_svfprintf_r+0xe9c>
 8015142:	aa2c      	add	r2, sp, #176	; 0xb0
 8015144:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015146:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015148:	f002 fa0a 	bl	8017560 <__ssprint_r>
 801514c:	2800      	cmp	r0, #0
 801514e:	d000      	beq.n	8015152 <_svfprintf_r+0xe9a>
 8015150:	e2d6      	b.n	8015700 <_svfprintf_r+0x1448>
 8015152:	af2f      	add	r7, sp, #188	; 0xbc
 8015154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015156:	2510      	movs	r5, #16
 8015158:	1e5c      	subs	r4, r3, #1
 801515a:	2c00      	cmp	r4, #0
 801515c:	dc2f      	bgt.n	80151be <_svfprintf_r+0xf06>
 801515e:	0773      	lsls	r3, r6, #29
 8015160:	d500      	bpl.n	8015164 <_svfprintf_r+0xeac>
 8015162:	e2af      	b.n	80156c4 <_svfprintf_r+0x140c>
 8015164:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015166:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015168:	4293      	cmp	r3, r2
 801516a:	da00      	bge.n	801516e <_svfprintf_r+0xeb6>
 801516c:	0013      	movs	r3, r2
 801516e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015170:	18d3      	adds	r3, r2, r3
 8015172:	9315      	str	r3, [sp, #84]	; 0x54
 8015174:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015176:	9308      	str	r3, [sp, #32]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d007      	beq.n	801518c <_svfprintf_r+0xed4>
 801517c:	aa2c      	add	r2, sp, #176	; 0xb0
 801517e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015180:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015182:	f002 f9ed 	bl	8017560 <__ssprint_r>
 8015186:	2800      	cmp	r0, #0
 8015188:	d000      	beq.n	801518c <_svfprintf_r+0xed4>
 801518a:	e2b9      	b.n	8015700 <_svfprintf_r+0x1448>
 801518c:	2300      	movs	r3, #0
 801518e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015192:	2b00      	cmp	r3, #0
 8015194:	d000      	beq.n	8015198 <_svfprintf_r+0xee0>
 8015196:	e2cf      	b.n	8015738 <_svfprintf_r+0x1480>
 8015198:	af2f      	add	r7, sp, #188	; 0xbc
 801519a:	e5d6      	b.n	8014d4a <_svfprintf_r+0xa92>
 801519c:	3210      	adds	r2, #16
 801519e:	607d      	str	r5, [r7, #4]
 80151a0:	922e      	str	r2, [sp, #184]	; 0xb8
 80151a2:	932d      	str	r3, [sp, #180]	; 0xb4
 80151a4:	2b07      	cmp	r3, #7
 80151a6:	dd08      	ble.n	80151ba <_svfprintf_r+0xf02>
 80151a8:	aa2c      	add	r2, sp, #176	; 0xb0
 80151aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151ae:	f002 f9d7 	bl	8017560 <__ssprint_r>
 80151b2:	2800      	cmp	r0, #0
 80151b4:	d000      	beq.n	80151b8 <_svfprintf_r+0xf00>
 80151b6:	e2a3      	b.n	8015700 <_svfprintf_r+0x1448>
 80151b8:	a92f      	add	r1, sp, #188	; 0xbc
 80151ba:	000f      	movs	r7, r1
 80151bc:	3c10      	subs	r4, #16
 80151be:	0039      	movs	r1, r7
 80151c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80151c2:	484c      	ldr	r0, [pc, #304]	; (80152f4 <_svfprintf_r+0x103c>)
 80151c4:	9308      	str	r3, [sp, #32]
 80151c6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80151c8:	3301      	adds	r3, #1
 80151ca:	3108      	adds	r1, #8
 80151cc:	6038      	str	r0, [r7, #0]
 80151ce:	2c10      	cmp	r4, #16
 80151d0:	dce4      	bgt.n	801519c <_svfprintf_r+0xee4>
 80151d2:	607c      	str	r4, [r7, #4]
 80151d4:	18a4      	adds	r4, r4, r2
 80151d6:	942e      	str	r4, [sp, #184]	; 0xb8
 80151d8:	932d      	str	r3, [sp, #180]	; 0xb4
 80151da:	000f      	movs	r7, r1
 80151dc:	2b07      	cmp	r3, #7
 80151de:	ddbe      	ble.n	801515e <_svfprintf_r+0xea6>
 80151e0:	e06a      	b.n	80152b8 <_svfprintf_r+0x1000>
 80151e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	dd00      	ble.n	80151ea <_svfprintf_r+0xf32>
 80151e8:	e086      	b.n	80152f8 <_svfprintf_r+0x1040>
 80151ea:	4b41      	ldr	r3, [pc, #260]	; (80152f0 <_svfprintf_r+0x1038>)
 80151ec:	603b      	str	r3, [r7, #0]
 80151ee:	2301      	movs	r3, #1
 80151f0:	607b      	str	r3, [r7, #4]
 80151f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80151f4:	3708      	adds	r7, #8
 80151f6:	3301      	adds	r3, #1
 80151f8:	932e      	str	r3, [sp, #184]	; 0xb8
 80151fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80151fc:	9308      	str	r3, [sp, #32]
 80151fe:	3301      	adds	r3, #1
 8015200:	932d      	str	r3, [sp, #180]	; 0xb4
 8015202:	2b07      	cmp	r3, #7
 8015204:	dd08      	ble.n	8015218 <_svfprintf_r+0xf60>
 8015206:	aa2c      	add	r2, sp, #176	; 0xb0
 8015208:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801520a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801520c:	f002 f9a8 	bl	8017560 <__ssprint_r>
 8015210:	2800      	cmp	r0, #0
 8015212:	d000      	beq.n	8015216 <_svfprintf_r+0xf5e>
 8015214:	e274      	b.n	8015700 <_svfprintf_r+0x1448>
 8015216:	af2f      	add	r7, sp, #188	; 0xbc
 8015218:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801521a:	2b00      	cmp	r3, #0
 801521c:	d104      	bne.n	8015228 <_svfprintf_r+0xf70>
 801521e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015220:	2b00      	cmp	r3, #0
 8015222:	d101      	bne.n	8015228 <_svfprintf_r+0xf70>
 8015224:	07f3      	lsls	r3, r6, #31
 8015226:	d59a      	bpl.n	801515e <_svfprintf_r+0xea6>
 8015228:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801522a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801522c:	4694      	mov	ip, r2
 801522e:	603b      	str	r3, [r7, #0]
 8015230:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015232:	607b      	str	r3, [r7, #4]
 8015234:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015236:	3708      	adds	r7, #8
 8015238:	4463      	add	r3, ip
 801523a:	932e      	str	r3, [sp, #184]	; 0xb8
 801523c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801523e:	9308      	str	r3, [sp, #32]
 8015240:	3301      	adds	r3, #1
 8015242:	932d      	str	r3, [sp, #180]	; 0xb4
 8015244:	2b07      	cmp	r3, #7
 8015246:	dd08      	ble.n	801525a <_svfprintf_r+0xfa2>
 8015248:	aa2c      	add	r2, sp, #176	; 0xb0
 801524a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801524c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801524e:	f002 f987 	bl	8017560 <__ssprint_r>
 8015252:	2800      	cmp	r0, #0
 8015254:	d000      	beq.n	8015258 <_svfprintf_r+0xfa0>
 8015256:	e253      	b.n	8015700 <_svfprintf_r+0x1448>
 8015258:	af2f      	add	r7, sp, #188	; 0xbc
 801525a:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801525c:	2c00      	cmp	r4, #0
 801525e:	da1a      	bge.n	8015296 <_svfprintf_r+0xfde>
 8015260:	0039      	movs	r1, r7
 8015262:	2510      	movs	r5, #16
 8015264:	4264      	negs	r4, r4
 8015266:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015268:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801526a:	9308      	str	r3, [sp, #32]
 801526c:	1c5a      	adds	r2, r3, #1
 801526e:	4b21      	ldr	r3, [pc, #132]	; (80152f4 <_svfprintf_r+0x103c>)
 8015270:	3708      	adds	r7, #8
 8015272:	600b      	str	r3, [r1, #0]
 8015274:	2c10      	cmp	r4, #16
 8015276:	dc29      	bgt.n	80152cc <_svfprintf_r+0x1014>
 8015278:	604c      	str	r4, [r1, #4]
 801527a:	1824      	adds	r4, r4, r0
 801527c:	942e      	str	r4, [sp, #184]	; 0xb8
 801527e:	922d      	str	r2, [sp, #180]	; 0xb4
 8015280:	2a07      	cmp	r2, #7
 8015282:	dd08      	ble.n	8015296 <_svfprintf_r+0xfde>
 8015284:	aa2c      	add	r2, sp, #176	; 0xb0
 8015286:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015288:	980a      	ldr	r0, [sp, #40]	; 0x28
 801528a:	f002 f969 	bl	8017560 <__ssprint_r>
 801528e:	2800      	cmp	r0, #0
 8015290:	d000      	beq.n	8015294 <_svfprintf_r+0xfdc>
 8015292:	e235      	b.n	8015700 <_svfprintf_r+0x1448>
 8015294:	af2f      	add	r7, sp, #188	; 0xbc
 8015296:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801529a:	468c      	mov	ip, r1
 801529c:	603b      	str	r3, [r7, #0]
 801529e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152a0:	607b      	str	r3, [r7, #4]
 80152a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80152a4:	4463      	add	r3, ip
 80152a6:	932e      	str	r3, [sp, #184]	; 0xb8
 80152a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80152aa:	1c5a      	adds	r2, r3, #1
 80152ac:	9308      	str	r3, [sp, #32]
 80152ae:	922d      	str	r2, [sp, #180]	; 0xb4
 80152b0:	2a07      	cmp	r2, #7
 80152b2:	dc01      	bgt.n	80152b8 <_svfprintf_r+0x1000>
 80152b4:	f7ff fa6c 	bl	8014790 <_svfprintf_r+0x4d8>
 80152b8:	aa2c      	add	r2, sp, #176	; 0xb0
 80152ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152be:	f002 f94f 	bl	8017560 <__ssprint_r>
 80152c2:	2800      	cmp	r0, #0
 80152c4:	d000      	beq.n	80152c8 <_svfprintf_r+0x1010>
 80152c6:	e21b      	b.n	8015700 <_svfprintf_r+0x1448>
 80152c8:	af2f      	add	r7, sp, #188	; 0xbc
 80152ca:	e748      	b.n	801515e <_svfprintf_r+0xea6>
 80152cc:	3010      	adds	r0, #16
 80152ce:	604d      	str	r5, [r1, #4]
 80152d0:	902e      	str	r0, [sp, #184]	; 0xb8
 80152d2:	922d      	str	r2, [sp, #180]	; 0xb4
 80152d4:	2a07      	cmp	r2, #7
 80152d6:	dd08      	ble.n	80152ea <_svfprintf_r+0x1032>
 80152d8:	aa2c      	add	r2, sp, #176	; 0xb0
 80152da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152de:	f002 f93f 	bl	8017560 <__ssprint_r>
 80152e2:	2800      	cmp	r0, #0
 80152e4:	d000      	beq.n	80152e8 <_svfprintf_r+0x1030>
 80152e6:	e20b      	b.n	8015700 <_svfprintf_r+0x1448>
 80152e8:	af2f      	add	r7, sp, #188	; 0xbc
 80152ea:	3c10      	subs	r4, #16
 80152ec:	0039      	movs	r1, r7
 80152ee:	e7ba      	b.n	8015266 <_svfprintf_r+0xfae>
 80152f0:	0801a6ca 	.word	0x0801a6ca
 80152f4:	0801a6dc 	.word	0x0801a6dc
 80152f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152fa:	002c      	movs	r4, r5
 80152fc:	429d      	cmp	r5, r3
 80152fe:	dd00      	ble.n	8015302 <_svfprintf_r+0x104a>
 8015300:	001c      	movs	r4, r3
 8015302:	2c00      	cmp	r4, #0
 8015304:	dd15      	ble.n	8015332 <_svfprintf_r+0x107a>
 8015306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015308:	607c      	str	r4, [r7, #4]
 801530a:	603b      	str	r3, [r7, #0]
 801530c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801530e:	3708      	adds	r7, #8
 8015310:	18e3      	adds	r3, r4, r3
 8015312:	932e      	str	r3, [sp, #184]	; 0xb8
 8015314:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015316:	9308      	str	r3, [sp, #32]
 8015318:	3301      	adds	r3, #1
 801531a:	932d      	str	r3, [sp, #180]	; 0xb4
 801531c:	2b07      	cmp	r3, #7
 801531e:	dd08      	ble.n	8015332 <_svfprintf_r+0x107a>
 8015320:	aa2c      	add	r2, sp, #176	; 0xb0
 8015322:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015324:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015326:	f002 f91b 	bl	8017560 <__ssprint_r>
 801532a:	2800      	cmp	r0, #0
 801532c:	d000      	beq.n	8015330 <_svfprintf_r+0x1078>
 801532e:	e1e7      	b.n	8015700 <_svfprintf_r+0x1448>
 8015330:	af2f      	add	r7, sp, #188	; 0xbc
 8015332:	43e3      	mvns	r3, r4
 8015334:	17db      	asrs	r3, r3, #31
 8015336:	401c      	ands	r4, r3
 8015338:	1b2c      	subs	r4, r5, r4
 801533a:	2c00      	cmp	r4, #0
 801533c:	dd1a      	ble.n	8015374 <_svfprintf_r+0x10bc>
 801533e:	0039      	movs	r1, r7
 8015340:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015342:	48d4      	ldr	r0, [pc, #848]	; (8015694 <_svfprintf_r+0x13dc>)
 8015344:	9308      	str	r3, [sp, #32]
 8015346:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015348:	3301      	adds	r3, #1
 801534a:	3108      	adds	r1, #8
 801534c:	6038      	str	r0, [r7, #0]
 801534e:	2c10      	cmp	r4, #16
 8015350:	dd00      	ble.n	8015354 <_svfprintf_r+0x109c>
 8015352:	e089      	b.n	8015468 <_svfprintf_r+0x11b0>
 8015354:	607c      	str	r4, [r7, #4]
 8015356:	18a4      	adds	r4, r4, r2
 8015358:	942e      	str	r4, [sp, #184]	; 0xb8
 801535a:	932d      	str	r3, [sp, #180]	; 0xb4
 801535c:	000f      	movs	r7, r1
 801535e:	2b07      	cmp	r3, #7
 8015360:	dd08      	ble.n	8015374 <_svfprintf_r+0x10bc>
 8015362:	aa2c      	add	r2, sp, #176	; 0xb0
 8015364:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015366:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015368:	f002 f8fa 	bl	8017560 <__ssprint_r>
 801536c:	2800      	cmp	r0, #0
 801536e:	d000      	beq.n	8015372 <_svfprintf_r+0x10ba>
 8015370:	e1c6      	b.n	8015700 <_svfprintf_r+0x1448>
 8015372:	af2f      	add	r7, sp, #188	; 0xbc
 8015374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015376:	195d      	adds	r5, r3, r5
 8015378:	0573      	lsls	r3, r6, #21
 801537a:	d50d      	bpl.n	8015398 <_svfprintf_r+0x10e0>
 801537c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801537e:	2b00      	cmp	r3, #0
 8015380:	d000      	beq.n	8015384 <_svfprintf_r+0x10cc>
 8015382:	e084      	b.n	801548e <_svfprintf_r+0x11d6>
 8015384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015386:	2b00      	cmp	r3, #0
 8015388:	d000      	beq.n	801538c <_svfprintf_r+0x10d4>
 801538a:	e083      	b.n	8015494 <_svfprintf_r+0x11dc>
 801538c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801538e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015390:	189b      	adds	r3, r3, r2
 8015392:	429d      	cmp	r5, r3
 8015394:	d900      	bls.n	8015398 <_svfprintf_r+0x10e0>
 8015396:	001d      	movs	r5, r3
 8015398:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801539a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801539c:	4293      	cmp	r3, r2
 801539e:	db01      	blt.n	80153a4 <_svfprintf_r+0x10ec>
 80153a0:	07f3      	lsls	r3, r6, #31
 80153a2:	d518      	bpl.n	80153d6 <_svfprintf_r+0x111e>
 80153a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80153a8:	4694      	mov	ip, r2
 80153aa:	603b      	str	r3, [r7, #0]
 80153ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80153ae:	607b      	str	r3, [r7, #4]
 80153b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80153b2:	3708      	adds	r7, #8
 80153b4:	4463      	add	r3, ip
 80153b6:	932e      	str	r3, [sp, #184]	; 0xb8
 80153b8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153ba:	9308      	str	r3, [sp, #32]
 80153bc:	3301      	adds	r3, #1
 80153be:	932d      	str	r3, [sp, #180]	; 0xb4
 80153c0:	2b07      	cmp	r3, #7
 80153c2:	dd08      	ble.n	80153d6 <_svfprintf_r+0x111e>
 80153c4:	aa2c      	add	r2, sp, #176	; 0xb0
 80153c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153ca:	f002 f8c9 	bl	8017560 <__ssprint_r>
 80153ce:	2800      	cmp	r0, #0
 80153d0:	d000      	beq.n	80153d4 <_svfprintf_r+0x111c>
 80153d2:	e195      	b.n	8015700 <_svfprintf_r+0x1448>
 80153d4:	af2f      	add	r7, sp, #188	; 0xbc
 80153d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80153d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153da:	4694      	mov	ip, r2
 80153dc:	9926      	ldr	r1, [sp, #152]	; 0x98
 80153de:	4463      	add	r3, ip
 80153e0:	1b5b      	subs	r3, r3, r5
 80153e2:	1a54      	subs	r4, r2, r1
 80153e4:	429c      	cmp	r4, r3
 80153e6:	dd00      	ble.n	80153ea <_svfprintf_r+0x1132>
 80153e8:	001c      	movs	r4, r3
 80153ea:	2c00      	cmp	r4, #0
 80153ec:	dd14      	ble.n	8015418 <_svfprintf_r+0x1160>
 80153ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80153f0:	603d      	str	r5, [r7, #0]
 80153f2:	18e3      	adds	r3, r4, r3
 80153f4:	932e      	str	r3, [sp, #184]	; 0xb8
 80153f6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153f8:	607c      	str	r4, [r7, #4]
 80153fa:	9308      	str	r3, [sp, #32]
 80153fc:	3301      	adds	r3, #1
 80153fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8015400:	3708      	adds	r7, #8
 8015402:	2b07      	cmp	r3, #7
 8015404:	dd08      	ble.n	8015418 <_svfprintf_r+0x1160>
 8015406:	aa2c      	add	r2, sp, #176	; 0xb0
 8015408:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801540a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801540c:	f002 f8a8 	bl	8017560 <__ssprint_r>
 8015410:	2800      	cmp	r0, #0
 8015412:	d000      	beq.n	8015416 <_svfprintf_r+0x115e>
 8015414:	e174      	b.n	8015700 <_svfprintf_r+0x1448>
 8015416:	af2f      	add	r7, sp, #188	; 0xbc
 8015418:	43e3      	mvns	r3, r4
 801541a:	17db      	asrs	r3, r3, #31
 801541c:	401c      	ands	r4, r3
 801541e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015422:	2510      	movs	r5, #16
 8015424:	1a9b      	subs	r3, r3, r2
 8015426:	1b1c      	subs	r4, r3, r4
 8015428:	2c00      	cmp	r4, #0
 801542a:	dc00      	bgt.n	801542e <_svfprintf_r+0x1176>
 801542c:	e697      	b.n	801515e <_svfprintf_r+0xea6>
 801542e:	0039      	movs	r1, r7
 8015430:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015432:	4898      	ldr	r0, [pc, #608]	; (8015694 <_svfprintf_r+0x13dc>)
 8015434:	9308      	str	r3, [sp, #32]
 8015436:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015438:	3301      	adds	r3, #1
 801543a:	3108      	adds	r1, #8
 801543c:	6038      	str	r0, [r7, #0]
 801543e:	2c10      	cmp	r4, #16
 8015440:	dc00      	bgt.n	8015444 <_svfprintf_r+0x118c>
 8015442:	e6c6      	b.n	80151d2 <_svfprintf_r+0xf1a>
 8015444:	3210      	adds	r2, #16
 8015446:	607d      	str	r5, [r7, #4]
 8015448:	922e      	str	r2, [sp, #184]	; 0xb8
 801544a:	932d      	str	r3, [sp, #180]	; 0xb4
 801544c:	2b07      	cmp	r3, #7
 801544e:	dd08      	ble.n	8015462 <_svfprintf_r+0x11aa>
 8015450:	aa2c      	add	r2, sp, #176	; 0xb0
 8015452:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015454:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015456:	f002 f883 	bl	8017560 <__ssprint_r>
 801545a:	2800      	cmp	r0, #0
 801545c:	d000      	beq.n	8015460 <_svfprintf_r+0x11a8>
 801545e:	e14f      	b.n	8015700 <_svfprintf_r+0x1448>
 8015460:	a92f      	add	r1, sp, #188	; 0xbc
 8015462:	3c10      	subs	r4, #16
 8015464:	000f      	movs	r7, r1
 8015466:	e7e2      	b.n	801542e <_svfprintf_r+0x1176>
 8015468:	2010      	movs	r0, #16
 801546a:	1812      	adds	r2, r2, r0
 801546c:	6078      	str	r0, [r7, #4]
 801546e:	922e      	str	r2, [sp, #184]	; 0xb8
 8015470:	932d      	str	r3, [sp, #180]	; 0xb4
 8015472:	2b07      	cmp	r3, #7
 8015474:	dd08      	ble.n	8015488 <_svfprintf_r+0x11d0>
 8015476:	aa2c      	add	r2, sp, #176	; 0xb0
 8015478:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801547a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801547c:	f002 f870 	bl	8017560 <__ssprint_r>
 8015480:	2800      	cmp	r0, #0
 8015482:	d000      	beq.n	8015486 <_svfprintf_r+0x11ce>
 8015484:	e13c      	b.n	8015700 <_svfprintf_r+0x1448>
 8015486:	a92f      	add	r1, sp, #188	; 0xbc
 8015488:	3c10      	subs	r4, #16
 801548a:	000f      	movs	r7, r1
 801548c:	e757      	b.n	801533e <_svfprintf_r+0x1086>
 801548e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015490:	2b00      	cmp	r3, #0
 8015492:	d061      	beq.n	8015558 <_svfprintf_r+0x12a0>
 8015494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015496:	3b01      	subs	r3, #1
 8015498:	9310      	str	r3, [sp, #64]	; 0x40
 801549a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801549c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801549e:	4694      	mov	ip, r2
 80154a0:	603b      	str	r3, [r7, #0]
 80154a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80154a4:	607b      	str	r3, [r7, #4]
 80154a6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80154a8:	3708      	adds	r7, #8
 80154aa:	4463      	add	r3, ip
 80154ac:	932e      	str	r3, [sp, #184]	; 0xb8
 80154ae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80154b0:	9308      	str	r3, [sp, #32]
 80154b2:	3301      	adds	r3, #1
 80154b4:	932d      	str	r3, [sp, #180]	; 0xb4
 80154b6:	2b07      	cmp	r3, #7
 80154b8:	dd08      	ble.n	80154cc <_svfprintf_r+0x1214>
 80154ba:	aa2c      	add	r2, sp, #176	; 0xb0
 80154bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154c0:	f002 f84e 	bl	8017560 <__ssprint_r>
 80154c4:	2800      	cmp	r0, #0
 80154c6:	d000      	beq.n	80154ca <_svfprintf_r+0x1212>
 80154c8:	e11a      	b.n	8015700 <_svfprintf_r+0x1448>
 80154ca:	af2f      	add	r7, sp, #188	; 0xbc
 80154cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80154ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154d0:	189b      	adds	r3, r3, r2
 80154d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80154d4:	1b5b      	subs	r3, r3, r5
 80154d6:	7814      	ldrb	r4, [r2, #0]
 80154d8:	429c      	cmp	r4, r3
 80154da:	dd00      	ble.n	80154de <_svfprintf_r+0x1226>
 80154dc:	001c      	movs	r4, r3
 80154de:	2c00      	cmp	r4, #0
 80154e0:	dd14      	ble.n	801550c <_svfprintf_r+0x1254>
 80154e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80154e4:	603d      	str	r5, [r7, #0]
 80154e6:	18e3      	adds	r3, r4, r3
 80154e8:	932e      	str	r3, [sp, #184]	; 0xb8
 80154ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80154ec:	607c      	str	r4, [r7, #4]
 80154ee:	9308      	str	r3, [sp, #32]
 80154f0:	3301      	adds	r3, #1
 80154f2:	932d      	str	r3, [sp, #180]	; 0xb4
 80154f4:	3708      	adds	r7, #8
 80154f6:	2b07      	cmp	r3, #7
 80154f8:	dd08      	ble.n	801550c <_svfprintf_r+0x1254>
 80154fa:	aa2c      	add	r2, sp, #176	; 0xb0
 80154fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015500:	f002 f82e 	bl	8017560 <__ssprint_r>
 8015504:	2800      	cmp	r0, #0
 8015506:	d000      	beq.n	801550a <_svfprintf_r+0x1252>
 8015508:	e0fa      	b.n	8015700 <_svfprintf_r+0x1448>
 801550a:	af2f      	add	r7, sp, #188	; 0xbc
 801550c:	43e3      	mvns	r3, r4
 801550e:	17db      	asrs	r3, r3, #31
 8015510:	401c      	ands	r4, r3
 8015512:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015514:	781b      	ldrb	r3, [r3, #0]
 8015516:	1b1c      	subs	r4, r3, r4
 8015518:	2c00      	cmp	r4, #0
 801551a:	dd19      	ble.n	8015550 <_svfprintf_r+0x1298>
 801551c:	0039      	movs	r1, r7
 801551e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015520:	485c      	ldr	r0, [pc, #368]	; (8015694 <_svfprintf_r+0x13dc>)
 8015522:	9308      	str	r3, [sp, #32]
 8015524:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015526:	3301      	adds	r3, #1
 8015528:	3108      	adds	r1, #8
 801552a:	6038      	str	r0, [r7, #0]
 801552c:	2c10      	cmp	r4, #16
 801552e:	dc1a      	bgt.n	8015566 <_svfprintf_r+0x12ae>
 8015530:	607c      	str	r4, [r7, #4]
 8015532:	18a4      	adds	r4, r4, r2
 8015534:	942e      	str	r4, [sp, #184]	; 0xb8
 8015536:	932d      	str	r3, [sp, #180]	; 0xb4
 8015538:	000f      	movs	r7, r1
 801553a:	2b07      	cmp	r3, #7
 801553c:	dd08      	ble.n	8015550 <_svfprintf_r+0x1298>
 801553e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015540:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015542:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015544:	f002 f80c 	bl	8017560 <__ssprint_r>
 8015548:	2800      	cmp	r0, #0
 801554a:	d000      	beq.n	801554e <_svfprintf_r+0x1296>
 801554c:	e0d8      	b.n	8015700 <_svfprintf_r+0x1448>
 801554e:	af2f      	add	r7, sp, #188	; 0xbc
 8015550:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015552:	781b      	ldrb	r3, [r3, #0]
 8015554:	18ed      	adds	r5, r5, r3
 8015556:	e711      	b.n	801537c <_svfprintf_r+0x10c4>
 8015558:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801555a:	3b01      	subs	r3, #1
 801555c:	9313      	str	r3, [sp, #76]	; 0x4c
 801555e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015560:	3b01      	subs	r3, #1
 8015562:	930f      	str	r3, [sp, #60]	; 0x3c
 8015564:	e799      	b.n	801549a <_svfprintf_r+0x11e2>
 8015566:	2010      	movs	r0, #16
 8015568:	1812      	adds	r2, r2, r0
 801556a:	6078      	str	r0, [r7, #4]
 801556c:	922e      	str	r2, [sp, #184]	; 0xb8
 801556e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015570:	2b07      	cmp	r3, #7
 8015572:	dd08      	ble.n	8015586 <_svfprintf_r+0x12ce>
 8015574:	aa2c      	add	r2, sp, #176	; 0xb0
 8015576:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015578:	980a      	ldr	r0, [sp, #40]	; 0x28
 801557a:	f001 fff1 	bl	8017560 <__ssprint_r>
 801557e:	2800      	cmp	r0, #0
 8015580:	d000      	beq.n	8015584 <_svfprintf_r+0x12cc>
 8015582:	e0bd      	b.n	8015700 <_svfprintf_r+0x1448>
 8015584:	a92f      	add	r1, sp, #188	; 0xbc
 8015586:	3c10      	subs	r4, #16
 8015588:	000f      	movs	r7, r1
 801558a:	e7c7      	b.n	801551c <_svfprintf_r+0x1264>
 801558c:	003c      	movs	r4, r7
 801558e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015590:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8015592:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015594:	9308      	str	r3, [sp, #32]
 8015596:	3101      	adds	r1, #1
 8015598:	3301      	adds	r3, #1
 801559a:	3408      	adds	r4, #8
 801559c:	2a01      	cmp	r2, #1
 801559e:	dc03      	bgt.n	80155a8 <_svfprintf_r+0x12f0>
 80155a0:	2201      	movs	r2, #1
 80155a2:	4216      	tst	r6, r2
 80155a4:	d100      	bne.n	80155a8 <_svfprintf_r+0x12f0>
 80155a6:	e088      	b.n	80156ba <_svfprintf_r+0x1402>
 80155a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80155aa:	912e      	str	r1, [sp, #184]	; 0xb8
 80155ac:	603a      	str	r2, [r7, #0]
 80155ae:	2201      	movs	r2, #1
 80155b0:	932d      	str	r3, [sp, #180]	; 0xb4
 80155b2:	607a      	str	r2, [r7, #4]
 80155b4:	2b07      	cmp	r3, #7
 80155b6:	dd08      	ble.n	80155ca <_svfprintf_r+0x1312>
 80155b8:	aa2c      	add	r2, sp, #176	; 0xb0
 80155ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155be:	f001 ffcf 	bl	8017560 <__ssprint_r>
 80155c2:	2800      	cmp	r0, #0
 80155c4:	d000      	beq.n	80155c8 <_svfprintf_r+0x1310>
 80155c6:	e09b      	b.n	8015700 <_svfprintf_r+0x1448>
 80155c8:	ac2f      	add	r4, sp, #188	; 0xbc
 80155ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80155cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80155ce:	4694      	mov	ip, r2
 80155d0:	6023      	str	r3, [r4, #0]
 80155d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80155d4:	6063      	str	r3, [r4, #4]
 80155d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80155d8:	3408      	adds	r4, #8
 80155da:	4463      	add	r3, ip
 80155dc:	932e      	str	r3, [sp, #184]	; 0xb8
 80155de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80155e0:	9308      	str	r3, [sp, #32]
 80155e2:	3301      	adds	r3, #1
 80155e4:	932d      	str	r3, [sp, #180]	; 0xb4
 80155e6:	2b07      	cmp	r3, #7
 80155e8:	dd08      	ble.n	80155fc <_svfprintf_r+0x1344>
 80155ea:	aa2c      	add	r2, sp, #176	; 0xb0
 80155ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155f0:	f001 ffb6 	bl	8017560 <__ssprint_r>
 80155f4:	2800      	cmp	r0, #0
 80155f6:	d000      	beq.n	80155fa <_svfprintf_r+0x1342>
 80155f8:	e082      	b.n	8015700 <_svfprintf_r+0x1448>
 80155fa:	ac2f      	add	r4, sp, #188	; 0xbc
 80155fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155fe:	2200      	movs	r2, #0
 8015600:	1e5d      	subs	r5, r3, #1
 8015602:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015604:	2300      	movs	r3, #0
 8015606:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015608:	f7ea ff28 	bl	800045c <__aeabi_dcmpeq>
 801560c:	2800      	cmp	r0, #0
 801560e:	d12c      	bne.n	801566a <_svfprintf_r+0x13b2>
 8015610:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015612:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015614:	9308      	str	r3, [sp, #32]
 8015616:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015618:	6065      	str	r5, [r4, #4]
 801561a:	1c5a      	adds	r2, r3, #1
 801561c:	930e      	str	r3, [sp, #56]	; 0x38
 801561e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015620:	922d      	str	r2, [sp, #180]	; 0xb4
 8015622:	3301      	adds	r3, #1
 8015624:	6023      	str	r3, [r4, #0]
 8015626:	9b08      	ldr	r3, [sp, #32]
 8015628:	3408      	adds	r4, #8
 801562a:	3b01      	subs	r3, #1
 801562c:	185b      	adds	r3, r3, r1
 801562e:	932e      	str	r3, [sp, #184]	; 0xb8
 8015630:	2a07      	cmp	r2, #7
 8015632:	dd07      	ble.n	8015644 <_svfprintf_r+0x138c>
 8015634:	aa2c      	add	r2, sp, #176	; 0xb0
 8015636:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015638:	980a      	ldr	r0, [sp, #40]	; 0x28
 801563a:	f001 ff91 	bl	8017560 <__ssprint_r>
 801563e:	2800      	cmp	r0, #0
 8015640:	d15e      	bne.n	8015700 <_svfprintf_r+0x1448>
 8015642:	ac2f      	add	r4, sp, #188	; 0xbc
 8015644:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015646:	ab28      	add	r3, sp, #160	; 0xa0
 8015648:	4694      	mov	ip, r2
 801564a:	6023      	str	r3, [r4, #0]
 801564c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801564e:	6063      	str	r3, [r4, #4]
 8015650:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015652:	4463      	add	r3, ip
 8015654:	932e      	str	r3, [sp, #184]	; 0xb8
 8015656:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015658:	9308      	str	r3, [sp, #32]
 801565a:	3301      	adds	r3, #1
 801565c:	932d      	str	r3, [sp, #180]	; 0xb4
 801565e:	2b07      	cmp	r3, #7
 8015660:	dd00      	ble.n	8015664 <_svfprintf_r+0x13ac>
 8015662:	e629      	b.n	80152b8 <_svfprintf_r+0x1000>
 8015664:	3408      	adds	r4, #8
 8015666:	0027      	movs	r7, r4
 8015668:	e579      	b.n	801515e <_svfprintf_r+0xea6>
 801566a:	2710      	movs	r7, #16
 801566c:	2d00      	cmp	r5, #0
 801566e:	dde9      	ble.n	8015644 <_svfprintf_r+0x138c>
 8015670:	0021      	movs	r1, r4
 8015672:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015674:	4807      	ldr	r0, [pc, #28]	; (8015694 <_svfprintf_r+0x13dc>)
 8015676:	9308      	str	r3, [sp, #32]
 8015678:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801567a:	3301      	adds	r3, #1
 801567c:	3108      	adds	r1, #8
 801567e:	6020      	str	r0, [r4, #0]
 8015680:	2d10      	cmp	r5, #16
 8015682:	dc09      	bgt.n	8015698 <_svfprintf_r+0x13e0>
 8015684:	6065      	str	r5, [r4, #4]
 8015686:	000c      	movs	r4, r1
 8015688:	18ad      	adds	r5, r5, r2
 801568a:	952e      	str	r5, [sp, #184]	; 0xb8
 801568c:	932d      	str	r3, [sp, #180]	; 0xb4
 801568e:	2b07      	cmp	r3, #7
 8015690:	ddd8      	ble.n	8015644 <_svfprintf_r+0x138c>
 8015692:	e7cf      	b.n	8015634 <_svfprintf_r+0x137c>
 8015694:	0801a6dc 	.word	0x0801a6dc
 8015698:	3210      	adds	r2, #16
 801569a:	6067      	str	r7, [r4, #4]
 801569c:	922e      	str	r2, [sp, #184]	; 0xb8
 801569e:	932d      	str	r3, [sp, #180]	; 0xb4
 80156a0:	2b07      	cmp	r3, #7
 80156a2:	dd07      	ble.n	80156b4 <_svfprintf_r+0x13fc>
 80156a4:	aa2c      	add	r2, sp, #176	; 0xb0
 80156a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156aa:	f001 ff59 	bl	8017560 <__ssprint_r>
 80156ae:	2800      	cmp	r0, #0
 80156b0:	d126      	bne.n	8015700 <_svfprintf_r+0x1448>
 80156b2:	a92f      	add	r1, sp, #188	; 0xbc
 80156b4:	3d10      	subs	r5, #16
 80156b6:	000c      	movs	r4, r1
 80156b8:	e7da      	b.n	8015670 <_svfprintf_r+0x13b8>
 80156ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80156bc:	912e      	str	r1, [sp, #184]	; 0xb8
 80156be:	c705      	stmia	r7!, {r0, r2}
 80156c0:	932d      	str	r3, [sp, #180]	; 0xb4
 80156c2:	e7e4      	b.n	801568e <_svfprintf_r+0x13d6>
 80156c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80156c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80156c8:	2510      	movs	r5, #16
 80156ca:	1a9c      	subs	r4, r3, r2
 80156cc:	2c00      	cmp	r4, #0
 80156ce:	dc00      	bgt.n	80156d2 <_svfprintf_r+0x141a>
 80156d0:	e548      	b.n	8015164 <_svfprintf_r+0xeac>
 80156d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156d4:	4921      	ldr	r1, [pc, #132]	; (801575c <_svfprintf_r+0x14a4>)
 80156d6:	9308      	str	r3, [sp, #32]
 80156d8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80156da:	3301      	adds	r3, #1
 80156dc:	6039      	str	r1, [r7, #0]
 80156de:	2c10      	cmp	r4, #16
 80156e0:	dc19      	bgt.n	8015716 <_svfprintf_r+0x145e>
 80156e2:	607c      	str	r4, [r7, #4]
 80156e4:	18a4      	adds	r4, r4, r2
 80156e6:	942e      	str	r4, [sp, #184]	; 0xb8
 80156e8:	932d      	str	r3, [sp, #180]	; 0xb4
 80156ea:	2b07      	cmp	r3, #7
 80156ec:	dc00      	bgt.n	80156f0 <_svfprintf_r+0x1438>
 80156ee:	e539      	b.n	8015164 <_svfprintf_r+0xeac>
 80156f0:	aa2c      	add	r2, sp, #176	; 0xb0
 80156f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156f6:	f001 ff33 	bl	8017560 <__ssprint_r>
 80156fa:	2800      	cmp	r0, #0
 80156fc:	d100      	bne.n	8015700 <_svfprintf_r+0x1448>
 80156fe:	e531      	b.n	8015164 <_svfprintf_r+0xeac>
 8015700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015702:	2b00      	cmp	r3, #0
 8015704:	d101      	bne.n	801570a <_svfprintf_r+0x1452>
 8015706:	f7ff f908 	bl	801491a <_svfprintf_r+0x662>
 801570a:	0019      	movs	r1, r3
 801570c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801570e:	f000 ff19 	bl	8016544 <_free_r>
 8015712:	f7ff f902 	bl	801491a <_svfprintf_r+0x662>
 8015716:	3210      	adds	r2, #16
 8015718:	607d      	str	r5, [r7, #4]
 801571a:	922e      	str	r2, [sp, #184]	; 0xb8
 801571c:	932d      	str	r3, [sp, #180]	; 0xb4
 801571e:	3708      	adds	r7, #8
 8015720:	2b07      	cmp	r3, #7
 8015722:	dd07      	ble.n	8015734 <_svfprintf_r+0x147c>
 8015724:	aa2c      	add	r2, sp, #176	; 0xb0
 8015726:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015728:	980a      	ldr	r0, [sp, #40]	; 0x28
 801572a:	f001 ff19 	bl	8017560 <__ssprint_r>
 801572e:	2800      	cmp	r0, #0
 8015730:	d1e6      	bne.n	8015700 <_svfprintf_r+0x1448>
 8015732:	af2f      	add	r7, sp, #188	; 0xbc
 8015734:	3c10      	subs	r4, #16
 8015736:	e7cc      	b.n	80156d2 <_svfprintf_r+0x141a>
 8015738:	990c      	ldr	r1, [sp, #48]	; 0x30
 801573a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801573c:	f000 ff02 	bl	8016544 <_free_r>
 8015740:	e52a      	b.n	8015198 <_svfprintf_r+0xee0>
 8015742:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015744:	9306      	str	r3, [sp, #24]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d101      	bne.n	801574e <_svfprintf_r+0x1496>
 801574a:	f7ff f8e6 	bl	801491a <_svfprintf_r+0x662>
 801574e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015750:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015752:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015754:	f001 ff04 	bl	8017560 <__ssprint_r>
 8015758:	f7ff f8df 	bl	801491a <_svfprintf_r+0x662>
 801575c:	0801a6cc 	.word	0x0801a6cc

08015760 <sysconf>:
 8015760:	2380      	movs	r3, #128	; 0x80
 8015762:	b510      	push	{r4, lr}
 8015764:	015b      	lsls	r3, r3, #5
 8015766:	2808      	cmp	r0, #8
 8015768:	d004      	beq.n	8015774 <sysconf+0x14>
 801576a:	f000 fe7d 	bl	8016468 <__errno>
 801576e:	2316      	movs	r3, #22
 8015770:	6003      	str	r3, [r0, #0]
 8015772:	3b17      	subs	r3, #23
 8015774:	0018      	movs	r0, r3
 8015776:	bd10      	pop	{r4, pc}

08015778 <__ascii_wctomb>:
 8015778:	1e0b      	subs	r3, r1, #0
 801577a:	d004      	beq.n	8015786 <__ascii_wctomb+0xe>
 801577c:	2aff      	cmp	r2, #255	; 0xff
 801577e:	d904      	bls.n	801578a <__ascii_wctomb+0x12>
 8015780:	238a      	movs	r3, #138	; 0x8a
 8015782:	6003      	str	r3, [r0, #0]
 8015784:	3b8b      	subs	r3, #139	; 0x8b
 8015786:	0018      	movs	r0, r3
 8015788:	4770      	bx	lr
 801578a:	700a      	strb	r2, [r1, #0]
 801578c:	2301      	movs	r3, #1
 801578e:	e7fa      	b.n	8015786 <__ascii_wctomb+0xe>

08015790 <register_fini>:
 8015790:	4b03      	ldr	r3, [pc, #12]	; (80157a0 <register_fini+0x10>)
 8015792:	b510      	push	{r4, lr}
 8015794:	2b00      	cmp	r3, #0
 8015796:	d002      	beq.n	801579e <register_fini+0xe>
 8015798:	4802      	ldr	r0, [pc, #8]	; (80157a4 <register_fini+0x14>)
 801579a:	f000 f805 	bl	80157a8 <atexit>
 801579e:	bd10      	pop	{r4, pc}
 80157a0:	00000000 	.word	0x00000000
 80157a4:	08016475 	.word	0x08016475

080157a8 <atexit>:
 80157a8:	2300      	movs	r3, #0
 80157aa:	b510      	push	{r4, lr}
 80157ac:	0001      	movs	r1, r0
 80157ae:	001a      	movs	r2, r3
 80157b0:	0018      	movs	r0, r3
 80157b2:	f001 ff53 	bl	801765c <__register_exitproc>
 80157b6:	bd10      	pop	{r4, pc}

080157b8 <quorem>:
 80157b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157ba:	6903      	ldr	r3, [r0, #16]
 80157bc:	690c      	ldr	r4, [r1, #16]
 80157be:	b089      	sub	sp, #36	; 0x24
 80157c0:	0007      	movs	r7, r0
 80157c2:	9105      	str	r1, [sp, #20]
 80157c4:	2600      	movs	r6, #0
 80157c6:	42a3      	cmp	r3, r4
 80157c8:	db65      	blt.n	8015896 <quorem+0xde>
 80157ca:	000b      	movs	r3, r1
 80157cc:	3c01      	subs	r4, #1
 80157ce:	3314      	adds	r3, #20
 80157d0:	00a5      	lsls	r5, r4, #2
 80157d2:	9303      	str	r3, [sp, #12]
 80157d4:	195b      	adds	r3, r3, r5
 80157d6:	9304      	str	r3, [sp, #16]
 80157d8:	0003      	movs	r3, r0
 80157da:	3314      	adds	r3, #20
 80157dc:	9302      	str	r3, [sp, #8]
 80157de:	195d      	adds	r5, r3, r5
 80157e0:	9b04      	ldr	r3, [sp, #16]
 80157e2:	6828      	ldr	r0, [r5, #0]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	1c59      	adds	r1, r3, #1
 80157e8:	9301      	str	r3, [sp, #4]
 80157ea:	f7ea fcb1 	bl	8000150 <__udivsi3>
 80157ee:	9001      	str	r0, [sp, #4]
 80157f0:	42b0      	cmp	r0, r6
 80157f2:	d029      	beq.n	8015848 <quorem+0x90>
 80157f4:	9b03      	ldr	r3, [sp, #12]
 80157f6:	9802      	ldr	r0, [sp, #8]
 80157f8:	469c      	mov	ip, r3
 80157fa:	9606      	str	r6, [sp, #24]
 80157fc:	4662      	mov	r2, ip
 80157fe:	ca08      	ldmia	r2!, {r3}
 8015800:	4694      	mov	ip, r2
 8015802:	9a01      	ldr	r2, [sp, #4]
 8015804:	b299      	uxth	r1, r3
 8015806:	4351      	muls	r1, r2
 8015808:	0c1b      	lsrs	r3, r3, #16
 801580a:	4353      	muls	r3, r2
 801580c:	1989      	adds	r1, r1, r6
 801580e:	0c0a      	lsrs	r2, r1, #16
 8015810:	189b      	adds	r3, r3, r2
 8015812:	9307      	str	r3, [sp, #28]
 8015814:	0c1e      	lsrs	r6, r3, #16
 8015816:	6803      	ldr	r3, [r0, #0]
 8015818:	b289      	uxth	r1, r1
 801581a:	b29a      	uxth	r2, r3
 801581c:	9b06      	ldr	r3, [sp, #24]
 801581e:	18d2      	adds	r2, r2, r3
 8015820:	6803      	ldr	r3, [r0, #0]
 8015822:	1a52      	subs	r2, r2, r1
 8015824:	0c19      	lsrs	r1, r3, #16
 8015826:	466b      	mov	r3, sp
 8015828:	8b9b      	ldrh	r3, [r3, #28]
 801582a:	1acb      	subs	r3, r1, r3
 801582c:	1411      	asrs	r1, r2, #16
 801582e:	185b      	adds	r3, r3, r1
 8015830:	1419      	asrs	r1, r3, #16
 8015832:	b292      	uxth	r2, r2
 8015834:	041b      	lsls	r3, r3, #16
 8015836:	431a      	orrs	r2, r3
 8015838:	9b04      	ldr	r3, [sp, #16]
 801583a:	9106      	str	r1, [sp, #24]
 801583c:	c004      	stmia	r0!, {r2}
 801583e:	4563      	cmp	r3, ip
 8015840:	d2dc      	bcs.n	80157fc <quorem+0x44>
 8015842:	682b      	ldr	r3, [r5, #0]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d02d      	beq.n	80158a4 <quorem+0xec>
 8015848:	9905      	ldr	r1, [sp, #20]
 801584a:	0038      	movs	r0, r7
 801584c:	f001 fcb2 	bl	80171b4 <__mcmp>
 8015850:	2800      	cmp	r0, #0
 8015852:	db1f      	blt.n	8015894 <quorem+0xdc>
 8015854:	2500      	movs	r5, #0
 8015856:	9b01      	ldr	r3, [sp, #4]
 8015858:	9802      	ldr	r0, [sp, #8]
 801585a:	3301      	adds	r3, #1
 801585c:	9903      	ldr	r1, [sp, #12]
 801585e:	9301      	str	r3, [sp, #4]
 8015860:	6802      	ldr	r2, [r0, #0]
 8015862:	c908      	ldmia	r1!, {r3}
 8015864:	b292      	uxth	r2, r2
 8015866:	1955      	adds	r5, r2, r5
 8015868:	b29a      	uxth	r2, r3
 801586a:	1aaa      	subs	r2, r5, r2
 801586c:	6805      	ldr	r5, [r0, #0]
 801586e:	0c1b      	lsrs	r3, r3, #16
 8015870:	0c2d      	lsrs	r5, r5, #16
 8015872:	1aeb      	subs	r3, r5, r3
 8015874:	1415      	asrs	r5, r2, #16
 8015876:	195b      	adds	r3, r3, r5
 8015878:	141d      	asrs	r5, r3, #16
 801587a:	b292      	uxth	r2, r2
 801587c:	041b      	lsls	r3, r3, #16
 801587e:	4313      	orrs	r3, r2
 8015880:	c008      	stmia	r0!, {r3}
 8015882:	9b04      	ldr	r3, [sp, #16]
 8015884:	428b      	cmp	r3, r1
 8015886:	d2eb      	bcs.n	8015860 <quorem+0xa8>
 8015888:	9a02      	ldr	r2, [sp, #8]
 801588a:	00a3      	lsls	r3, r4, #2
 801588c:	18d3      	adds	r3, r2, r3
 801588e:	681a      	ldr	r2, [r3, #0]
 8015890:	2a00      	cmp	r2, #0
 8015892:	d011      	beq.n	80158b8 <quorem+0x100>
 8015894:	9e01      	ldr	r6, [sp, #4]
 8015896:	0030      	movs	r0, r6
 8015898:	b009      	add	sp, #36	; 0x24
 801589a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801589c:	682b      	ldr	r3, [r5, #0]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d104      	bne.n	80158ac <quorem+0xf4>
 80158a2:	3c01      	subs	r4, #1
 80158a4:	9b02      	ldr	r3, [sp, #8]
 80158a6:	3d04      	subs	r5, #4
 80158a8:	42ab      	cmp	r3, r5
 80158aa:	d3f7      	bcc.n	801589c <quorem+0xe4>
 80158ac:	613c      	str	r4, [r7, #16]
 80158ae:	e7cb      	b.n	8015848 <quorem+0x90>
 80158b0:	681a      	ldr	r2, [r3, #0]
 80158b2:	2a00      	cmp	r2, #0
 80158b4:	d104      	bne.n	80158c0 <quorem+0x108>
 80158b6:	3c01      	subs	r4, #1
 80158b8:	9a02      	ldr	r2, [sp, #8]
 80158ba:	3b04      	subs	r3, #4
 80158bc:	429a      	cmp	r2, r3
 80158be:	d3f7      	bcc.n	80158b0 <quorem+0xf8>
 80158c0:	613c      	str	r4, [r7, #16]
 80158c2:	e7e7      	b.n	8015894 <quorem+0xdc>

080158c4 <_dtoa_r>:
 80158c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158c6:	0014      	movs	r4, r2
 80158c8:	001d      	movs	r5, r3
 80158ca:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80158cc:	b09b      	sub	sp, #108	; 0x6c
 80158ce:	9002      	str	r0, [sp, #8]
 80158d0:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80158d2:	9406      	str	r4, [sp, #24]
 80158d4:	9507      	str	r5, [sp, #28]
 80158d6:	2900      	cmp	r1, #0
 80158d8:	d009      	beq.n	80158ee <_dtoa_r+0x2a>
 80158da:	2301      	movs	r3, #1
 80158dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80158de:	4093      	lsls	r3, r2
 80158e0:	604a      	str	r2, [r1, #4]
 80158e2:	608b      	str	r3, [r1, #8]
 80158e4:	f001 fa6a 	bl	8016dbc <_Bfree>
 80158e8:	2300      	movs	r3, #0
 80158ea:	9a02      	ldr	r2, [sp, #8]
 80158ec:	6413      	str	r3, [r2, #64]	; 0x40
 80158ee:	2d00      	cmp	r5, #0
 80158f0:	da20      	bge.n	8015934 <_dtoa_r+0x70>
 80158f2:	2301      	movs	r3, #1
 80158f4:	6033      	str	r3, [r6, #0]
 80158f6:	006b      	lsls	r3, r5, #1
 80158f8:	085b      	lsrs	r3, r3, #1
 80158fa:	9307      	str	r3, [sp, #28]
 80158fc:	9c07      	ldr	r4, [sp, #28]
 80158fe:	4bb2      	ldr	r3, [pc, #712]	; (8015bc8 <_dtoa_r+0x304>)
 8015900:	0022      	movs	r2, r4
 8015902:	9317      	str	r3, [sp, #92]	; 0x5c
 8015904:	401a      	ands	r2, r3
 8015906:	429a      	cmp	r2, r3
 8015908:	d117      	bne.n	801593a <_dtoa_r+0x76>
 801590a:	4bb0      	ldr	r3, [pc, #704]	; (8015bcc <_dtoa_r+0x308>)
 801590c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801590e:	6013      	str	r3, [r2, #0]
 8015910:	9b06      	ldr	r3, [sp, #24]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d103      	bne.n	801591e <_dtoa_r+0x5a>
 8015916:	0324      	lsls	r4, r4, #12
 8015918:	d101      	bne.n	801591e <_dtoa_r+0x5a>
 801591a:	f000 fd89 	bl	8016430 <_dtoa_r+0xb6c>
 801591e:	4bac      	ldr	r3, [pc, #688]	; (8015bd0 <_dtoa_r+0x30c>)
 8015920:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015922:	9308      	str	r3, [sp, #32]
 8015924:	2a00      	cmp	r2, #0
 8015926:	d002      	beq.n	801592e <_dtoa_r+0x6a>
 8015928:	4baa      	ldr	r3, [pc, #680]	; (8015bd4 <_dtoa_r+0x310>)
 801592a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801592c:	6013      	str	r3, [r2, #0]
 801592e:	9808      	ldr	r0, [sp, #32]
 8015930:	b01b      	add	sp, #108	; 0x6c
 8015932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015934:	2300      	movs	r3, #0
 8015936:	6033      	str	r3, [r6, #0]
 8015938:	e7e0      	b.n	80158fc <_dtoa_r+0x38>
 801593a:	9e06      	ldr	r6, [sp, #24]
 801593c:	9f07      	ldr	r7, [sp, #28]
 801593e:	2200      	movs	r2, #0
 8015940:	2300      	movs	r3, #0
 8015942:	0030      	movs	r0, r6
 8015944:	0039      	movs	r1, r7
 8015946:	f7ea fd89 	bl	800045c <__aeabi_dcmpeq>
 801594a:	1e05      	subs	r5, r0, #0
 801594c:	d00b      	beq.n	8015966 <_dtoa_r+0xa2>
 801594e:	2301      	movs	r3, #1
 8015950:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015952:	6013      	str	r3, [r2, #0]
 8015954:	4ba0      	ldr	r3, [pc, #640]	; (8015bd8 <_dtoa_r+0x314>)
 8015956:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015958:	9308      	str	r3, [sp, #32]
 801595a:	2a00      	cmp	r2, #0
 801595c:	d0e7      	beq.n	801592e <_dtoa_r+0x6a>
 801595e:	4a9f      	ldr	r2, [pc, #636]	; (8015bdc <_dtoa_r+0x318>)
 8015960:	9924      	ldr	r1, [sp, #144]	; 0x90
 8015962:	600a      	str	r2, [r1, #0]
 8015964:	e7e3      	b.n	801592e <_dtoa_r+0x6a>
 8015966:	ab18      	add	r3, sp, #96	; 0x60
 8015968:	9301      	str	r3, [sp, #4]
 801596a:	ab19      	add	r3, sp, #100	; 0x64
 801596c:	9300      	str	r3, [sp, #0]
 801596e:	0032      	movs	r2, r6
 8015970:	003b      	movs	r3, r7
 8015972:	9802      	ldr	r0, [sp, #8]
 8015974:	f001 fd0e 	bl	8017394 <__d2b>
 8015978:	0063      	lsls	r3, r4, #1
 801597a:	9003      	str	r0, [sp, #12]
 801597c:	0d5b      	lsrs	r3, r3, #21
 801597e:	d074      	beq.n	8015a6a <_dtoa_r+0x1a6>
 8015980:	033a      	lsls	r2, r7, #12
 8015982:	4c97      	ldr	r4, [pc, #604]	; (8015be0 <_dtoa_r+0x31c>)
 8015984:	0b12      	lsrs	r2, r2, #12
 8015986:	4314      	orrs	r4, r2
 8015988:	0021      	movs	r1, r4
 801598a:	4a96      	ldr	r2, [pc, #600]	; (8015be4 <_dtoa_r+0x320>)
 801598c:	0030      	movs	r0, r6
 801598e:	9516      	str	r5, [sp, #88]	; 0x58
 8015990:	189e      	adds	r6, r3, r2
 8015992:	2200      	movs	r2, #0
 8015994:	4b94      	ldr	r3, [pc, #592]	; (8015be8 <_dtoa_r+0x324>)
 8015996:	f7ec fcbf 	bl	8002318 <__aeabi_dsub>
 801599a:	4a94      	ldr	r2, [pc, #592]	; (8015bec <_dtoa_r+0x328>)
 801599c:	4b94      	ldr	r3, [pc, #592]	; (8015bf0 <_dtoa_r+0x32c>)
 801599e:	f7ec fa49 	bl	8001e34 <__aeabi_dmul>
 80159a2:	4a94      	ldr	r2, [pc, #592]	; (8015bf4 <_dtoa_r+0x330>)
 80159a4:	4b94      	ldr	r3, [pc, #592]	; (8015bf8 <_dtoa_r+0x334>)
 80159a6:	f7eb fb1f 	bl	8000fe8 <__aeabi_dadd>
 80159aa:	0004      	movs	r4, r0
 80159ac:	0030      	movs	r0, r6
 80159ae:	000d      	movs	r5, r1
 80159b0:	f7ed f84c 	bl	8002a4c <__aeabi_i2d>
 80159b4:	4a91      	ldr	r2, [pc, #580]	; (8015bfc <_dtoa_r+0x338>)
 80159b6:	4b92      	ldr	r3, [pc, #584]	; (8015c00 <_dtoa_r+0x33c>)
 80159b8:	f7ec fa3c 	bl	8001e34 <__aeabi_dmul>
 80159bc:	0002      	movs	r2, r0
 80159be:	000b      	movs	r3, r1
 80159c0:	0020      	movs	r0, r4
 80159c2:	0029      	movs	r1, r5
 80159c4:	f7eb fb10 	bl	8000fe8 <__aeabi_dadd>
 80159c8:	0004      	movs	r4, r0
 80159ca:	000d      	movs	r5, r1
 80159cc:	f7ed f808 	bl	80029e0 <__aeabi_d2iz>
 80159d0:	2200      	movs	r2, #0
 80159d2:	0007      	movs	r7, r0
 80159d4:	2300      	movs	r3, #0
 80159d6:	0020      	movs	r0, r4
 80159d8:	0029      	movs	r1, r5
 80159da:	f7ea fd45 	bl	8000468 <__aeabi_dcmplt>
 80159de:	2800      	cmp	r0, #0
 80159e0:	d009      	beq.n	80159f6 <_dtoa_r+0x132>
 80159e2:	0038      	movs	r0, r7
 80159e4:	f7ed f832 	bl	8002a4c <__aeabi_i2d>
 80159e8:	002b      	movs	r3, r5
 80159ea:	0022      	movs	r2, r4
 80159ec:	f7ea fd36 	bl	800045c <__aeabi_dcmpeq>
 80159f0:	4243      	negs	r3, r0
 80159f2:	4158      	adcs	r0, r3
 80159f4:	1a3f      	subs	r7, r7, r0
 80159f6:	2301      	movs	r3, #1
 80159f8:	9314      	str	r3, [sp, #80]	; 0x50
 80159fa:	2f16      	cmp	r7, #22
 80159fc:	d80d      	bhi.n	8015a1a <_dtoa_r+0x156>
 80159fe:	4981      	ldr	r1, [pc, #516]	; (8015c04 <_dtoa_r+0x340>)
 8015a00:	00fb      	lsls	r3, r7, #3
 8015a02:	18c9      	adds	r1, r1, r3
 8015a04:	6808      	ldr	r0, [r1, #0]
 8015a06:	6849      	ldr	r1, [r1, #4]
 8015a08:	9a06      	ldr	r2, [sp, #24]
 8015a0a:	9b07      	ldr	r3, [sp, #28]
 8015a0c:	f7ea fd40 	bl	8000490 <__aeabi_dcmpgt>
 8015a10:	2800      	cmp	r0, #0
 8015a12:	d046      	beq.n	8015aa2 <_dtoa_r+0x1de>
 8015a14:	2300      	movs	r3, #0
 8015a16:	3f01      	subs	r7, #1
 8015a18:	9314      	str	r3, [sp, #80]	; 0x50
 8015a1a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015a1c:	1b9e      	subs	r6, r3, r6
 8015a1e:	2300      	movs	r3, #0
 8015a20:	930a      	str	r3, [sp, #40]	; 0x28
 8015a22:	0033      	movs	r3, r6
 8015a24:	3b01      	subs	r3, #1
 8015a26:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a28:	d504      	bpl.n	8015a34 <_dtoa_r+0x170>
 8015a2a:	2301      	movs	r3, #1
 8015a2c:	1b9b      	subs	r3, r3, r6
 8015a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8015a30:	2300      	movs	r3, #0
 8015a32:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a34:	2f00      	cmp	r7, #0
 8015a36:	db36      	blt.n	8015aa6 <_dtoa_r+0x1e2>
 8015a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a3a:	9711      	str	r7, [sp, #68]	; 0x44
 8015a3c:	19db      	adds	r3, r3, r7
 8015a3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a40:	2300      	movs	r3, #0
 8015a42:	9304      	str	r3, [sp, #16]
 8015a44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015a46:	2401      	movs	r4, #1
 8015a48:	2b09      	cmp	r3, #9
 8015a4a:	d900      	bls.n	8015a4e <_dtoa_r+0x18a>
 8015a4c:	e082      	b.n	8015b54 <_dtoa_r+0x290>
 8015a4e:	2b05      	cmp	r3, #5
 8015a50:	dd02      	ble.n	8015a58 <_dtoa_r+0x194>
 8015a52:	2400      	movs	r4, #0
 8015a54:	3b04      	subs	r3, #4
 8015a56:	9320      	str	r3, [sp, #128]	; 0x80
 8015a58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015a5a:	1e98      	subs	r0, r3, #2
 8015a5c:	2803      	cmp	r0, #3
 8015a5e:	d900      	bls.n	8015a62 <_dtoa_r+0x19e>
 8015a60:	e082      	b.n	8015b68 <_dtoa_r+0x2a4>
 8015a62:	f7ea fb61 	bl	8000128 <__gnu_thumb1_case_uqi>
 8015a66:	7573      	.short	0x7573
 8015a68:	6828      	.short	0x6828
 8015a6a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015a6c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015a6e:	189e      	adds	r6, r3, r2
 8015a70:	4b65      	ldr	r3, [pc, #404]	; (8015c08 <_dtoa_r+0x344>)
 8015a72:	18f2      	adds	r2, r6, r3
 8015a74:	2a20      	cmp	r2, #32
 8015a76:	dd0f      	ble.n	8015a98 <_dtoa_r+0x1d4>
 8015a78:	2340      	movs	r3, #64	; 0x40
 8015a7a:	1a9b      	subs	r3, r3, r2
 8015a7c:	409c      	lsls	r4, r3
 8015a7e:	4b63      	ldr	r3, [pc, #396]	; (8015c0c <_dtoa_r+0x348>)
 8015a80:	9806      	ldr	r0, [sp, #24]
 8015a82:	18f3      	adds	r3, r6, r3
 8015a84:	40d8      	lsrs	r0, r3
 8015a86:	4320      	orrs	r0, r4
 8015a88:	f7ed f81a 	bl	8002ac0 <__aeabi_ui2d>
 8015a8c:	2301      	movs	r3, #1
 8015a8e:	4c60      	ldr	r4, [pc, #384]	; (8015c10 <_dtoa_r+0x34c>)
 8015a90:	3e01      	subs	r6, #1
 8015a92:	1909      	adds	r1, r1, r4
 8015a94:	9316      	str	r3, [sp, #88]	; 0x58
 8015a96:	e77c      	b.n	8015992 <_dtoa_r+0xce>
 8015a98:	2320      	movs	r3, #32
 8015a9a:	9806      	ldr	r0, [sp, #24]
 8015a9c:	1a9b      	subs	r3, r3, r2
 8015a9e:	4098      	lsls	r0, r3
 8015aa0:	e7f2      	b.n	8015a88 <_dtoa_r+0x1c4>
 8015aa2:	9014      	str	r0, [sp, #80]	; 0x50
 8015aa4:	e7b9      	b.n	8015a1a <_dtoa_r+0x156>
 8015aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015aa8:	1bdb      	subs	r3, r3, r7
 8015aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8015aac:	427b      	negs	r3, r7
 8015aae:	9304      	str	r3, [sp, #16]
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	9311      	str	r3, [sp, #68]	; 0x44
 8015ab4:	e7c6      	b.n	8015a44 <_dtoa_r+0x180>
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	930d      	str	r3, [sp, #52]	; 0x34
 8015aba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	dd57      	ble.n	8015b70 <_dtoa_r+0x2ac>
 8015ac0:	930c      	str	r3, [sp, #48]	; 0x30
 8015ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	9902      	ldr	r1, [sp, #8]
 8015ac8:	644a      	str	r2, [r1, #68]	; 0x44
 8015aca:	3204      	adds	r2, #4
 8015acc:	0010      	movs	r0, r2
 8015ace:	9902      	ldr	r1, [sp, #8]
 8015ad0:	3014      	adds	r0, #20
 8015ad2:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8015ad4:	4298      	cmp	r0, r3
 8015ad6:	d950      	bls.n	8015b7a <_dtoa_r+0x2b6>
 8015ad8:	9802      	ldr	r0, [sp, #8]
 8015ada:	f001 f947 	bl	8016d6c <_Balloc>
 8015ade:	9b02      	ldr	r3, [sp, #8]
 8015ae0:	9008      	str	r0, [sp, #32]
 8015ae2:	6418      	str	r0, [r3, #64]	; 0x40
 8015ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ae6:	2b0e      	cmp	r3, #14
 8015ae8:	d900      	bls.n	8015aec <_dtoa_r+0x228>
 8015aea:	e10c      	b.n	8015d06 <_dtoa_r+0x442>
 8015aec:	2c00      	cmp	r4, #0
 8015aee:	d100      	bne.n	8015af2 <_dtoa_r+0x22e>
 8015af0:	e109      	b.n	8015d06 <_dtoa_r+0x442>
 8015af2:	9b06      	ldr	r3, [sp, #24]
 8015af4:	9c07      	ldr	r4, [sp, #28]
 8015af6:	9312      	str	r3, [sp, #72]	; 0x48
 8015af8:	9413      	str	r4, [sp, #76]	; 0x4c
 8015afa:	2f00      	cmp	r7, #0
 8015afc:	dc00      	bgt.n	8015b00 <_dtoa_r+0x23c>
 8015afe:	e08b      	b.n	8015c18 <_dtoa_r+0x354>
 8015b00:	210f      	movs	r1, #15
 8015b02:	003a      	movs	r2, r7
 8015b04:	4b3f      	ldr	r3, [pc, #252]	; (8015c04 <_dtoa_r+0x340>)
 8015b06:	400a      	ands	r2, r1
 8015b08:	00d2      	lsls	r2, r2, #3
 8015b0a:	189b      	adds	r3, r3, r2
 8015b0c:	681d      	ldr	r5, [r3, #0]
 8015b0e:	685e      	ldr	r6, [r3, #4]
 8015b10:	2302      	movs	r3, #2
 8015b12:	113c      	asrs	r4, r7, #4
 8015b14:	930e      	str	r3, [sp, #56]	; 0x38
 8015b16:	06e3      	lsls	r3, r4, #27
 8015b18:	d50b      	bpl.n	8015b32 <_dtoa_r+0x26e>
 8015b1a:	4b3e      	ldr	r3, [pc, #248]	; (8015c14 <_dtoa_r+0x350>)
 8015b1c:	400c      	ands	r4, r1
 8015b1e:	6a1a      	ldr	r2, [r3, #32]
 8015b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b22:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015b24:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015b26:	f7eb fd7b 	bl	8001620 <__aeabi_ddiv>
 8015b2a:	2303      	movs	r3, #3
 8015b2c:	9006      	str	r0, [sp, #24]
 8015b2e:	9107      	str	r1, [sp, #28]
 8015b30:	930e      	str	r3, [sp, #56]	; 0x38
 8015b32:	2300      	movs	r3, #0
 8015b34:	e03b      	b.n	8015bae <_dtoa_r+0x2ea>
 8015b36:	2301      	movs	r3, #1
 8015b38:	930d      	str	r3, [sp, #52]	; 0x34
 8015b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b3c:	18fb      	adds	r3, r7, r3
 8015b3e:	930c      	str	r3, [sp, #48]	; 0x30
 8015b40:	3301      	adds	r3, #1
 8015b42:	9309      	str	r3, [sp, #36]	; 0x24
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	dcbd      	bgt.n	8015ac4 <_dtoa_r+0x200>
 8015b48:	2301      	movs	r3, #1
 8015b4a:	e7bb      	b.n	8015ac4 <_dtoa_r+0x200>
 8015b4c:	2300      	movs	r3, #0
 8015b4e:	e7b3      	b.n	8015ab8 <_dtoa_r+0x1f4>
 8015b50:	2300      	movs	r3, #0
 8015b52:	e7f1      	b.n	8015b38 <_dtoa_r+0x274>
 8015b54:	2300      	movs	r3, #0
 8015b56:	940d      	str	r4, [sp, #52]	; 0x34
 8015b58:	9320      	str	r3, [sp, #128]	; 0x80
 8015b5a:	3b01      	subs	r3, #1
 8015b5c:	2200      	movs	r2, #0
 8015b5e:	930c      	str	r3, [sp, #48]	; 0x30
 8015b60:	9309      	str	r3, [sp, #36]	; 0x24
 8015b62:	3313      	adds	r3, #19
 8015b64:	9221      	str	r2, [sp, #132]	; 0x84
 8015b66:	e7ad      	b.n	8015ac4 <_dtoa_r+0x200>
 8015b68:	2301      	movs	r3, #1
 8015b6a:	930d      	str	r3, [sp, #52]	; 0x34
 8015b6c:	3b02      	subs	r3, #2
 8015b6e:	e7f5      	b.n	8015b5c <_dtoa_r+0x298>
 8015b70:	2301      	movs	r3, #1
 8015b72:	930c      	str	r3, [sp, #48]	; 0x30
 8015b74:	9309      	str	r3, [sp, #36]	; 0x24
 8015b76:	001a      	movs	r2, r3
 8015b78:	e7f4      	b.n	8015b64 <_dtoa_r+0x2a0>
 8015b7a:	9802      	ldr	r0, [sp, #8]
 8015b7c:	3101      	adds	r1, #1
 8015b7e:	6441      	str	r1, [r0, #68]	; 0x44
 8015b80:	0052      	lsls	r2, r2, #1
 8015b82:	e7a3      	b.n	8015acc <_dtoa_r+0x208>
 8015b84:	2301      	movs	r3, #1
 8015b86:	421c      	tst	r4, r3
 8015b88:	d00e      	beq.n	8015ba8 <_dtoa_r+0x2e4>
 8015b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b8c:	4a21      	ldr	r2, [pc, #132]	; (8015c14 <_dtoa_r+0x350>)
 8015b8e:	3301      	adds	r3, #1
 8015b90:	930e      	str	r3, [sp, #56]	; 0x38
 8015b92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b94:	0028      	movs	r0, r5
 8015b96:	00db      	lsls	r3, r3, #3
 8015b98:	189b      	adds	r3, r3, r2
 8015b9a:	0031      	movs	r1, r6
 8015b9c:	681a      	ldr	r2, [r3, #0]
 8015b9e:	685b      	ldr	r3, [r3, #4]
 8015ba0:	f7ec f948 	bl	8001e34 <__aeabi_dmul>
 8015ba4:	0005      	movs	r5, r0
 8015ba6:	000e      	movs	r6, r1
 8015ba8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015baa:	1064      	asrs	r4, r4, #1
 8015bac:	3301      	adds	r3, #1
 8015bae:	9310      	str	r3, [sp, #64]	; 0x40
 8015bb0:	2c00      	cmp	r4, #0
 8015bb2:	d1e7      	bne.n	8015b84 <_dtoa_r+0x2c0>
 8015bb4:	9806      	ldr	r0, [sp, #24]
 8015bb6:	9907      	ldr	r1, [sp, #28]
 8015bb8:	002a      	movs	r2, r5
 8015bba:	0033      	movs	r3, r6
 8015bbc:	f7eb fd30 	bl	8001620 <__aeabi_ddiv>
 8015bc0:	9006      	str	r0, [sp, #24]
 8015bc2:	9107      	str	r1, [sp, #28]
 8015bc4:	e043      	b.n	8015c4e <_dtoa_r+0x38a>
 8015bc6:	46c0      	nop			; (mov r8, r8)
 8015bc8:	7ff00000 	.word	0x7ff00000
 8015bcc:	0000270f 	.word	0x0000270f
 8015bd0:	0801a7f6 	.word	0x0801a7f6
 8015bd4:	0801a7f9 	.word	0x0801a7f9
 8015bd8:	0801a6ca 	.word	0x0801a6ca
 8015bdc:	0801a6cb 	.word	0x0801a6cb
 8015be0:	3ff00000 	.word	0x3ff00000
 8015be4:	fffffc01 	.word	0xfffffc01
 8015be8:	3ff80000 	.word	0x3ff80000
 8015bec:	636f4361 	.word	0x636f4361
 8015bf0:	3fd287a7 	.word	0x3fd287a7
 8015bf4:	8b60c8b3 	.word	0x8b60c8b3
 8015bf8:	3fc68a28 	.word	0x3fc68a28
 8015bfc:	509f79fb 	.word	0x509f79fb
 8015c00:	3fd34413 	.word	0x3fd34413
 8015c04:	0801a828 	.word	0x0801a828
 8015c08:	00000432 	.word	0x00000432
 8015c0c:	00000412 	.word	0x00000412
 8015c10:	fe100000 	.word	0xfe100000
 8015c14:	0801a800 	.word	0x0801a800
 8015c18:	2302      	movs	r3, #2
 8015c1a:	930e      	str	r3, [sp, #56]	; 0x38
 8015c1c:	2f00      	cmp	r7, #0
 8015c1e:	d016      	beq.n	8015c4e <_dtoa_r+0x38a>
 8015c20:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015c22:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015c24:	427c      	negs	r4, r7
 8015c26:	330d      	adds	r3, #13
 8015c28:	4023      	ands	r3, r4
 8015c2a:	4acf      	ldr	r2, [pc, #828]	; (8015f68 <_dtoa_r+0x6a4>)
 8015c2c:	00db      	lsls	r3, r3, #3
 8015c2e:	18d3      	adds	r3, r2, r3
 8015c30:	681a      	ldr	r2, [r3, #0]
 8015c32:	685b      	ldr	r3, [r3, #4]
 8015c34:	f7ec f8fe 	bl	8001e34 <__aeabi_dmul>
 8015c38:	2300      	movs	r3, #0
 8015c3a:	2601      	movs	r6, #1
 8015c3c:	001d      	movs	r5, r3
 8015c3e:	9006      	str	r0, [sp, #24]
 8015c40:	9107      	str	r1, [sp, #28]
 8015c42:	1124      	asrs	r4, r4, #4
 8015c44:	2c00      	cmp	r4, #0
 8015c46:	d000      	beq.n	8015c4a <_dtoa_r+0x386>
 8015c48:	e08c      	b.n	8015d64 <_dtoa_r+0x4a0>
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d1b8      	bne.n	8015bc0 <_dtoa_r+0x2fc>
 8015c4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d100      	bne.n	8015c56 <_dtoa_r+0x392>
 8015c54:	e096      	b.n	8015d84 <_dtoa_r+0x4c0>
 8015c56:	9c06      	ldr	r4, [sp, #24]
 8015c58:	9d07      	ldr	r5, [sp, #28]
 8015c5a:	2200      	movs	r2, #0
 8015c5c:	4bc3      	ldr	r3, [pc, #780]	; (8015f6c <_dtoa_r+0x6a8>)
 8015c5e:	0020      	movs	r0, r4
 8015c60:	0029      	movs	r1, r5
 8015c62:	f7ea fc01 	bl	8000468 <__aeabi_dcmplt>
 8015c66:	2800      	cmp	r0, #0
 8015c68:	d100      	bne.n	8015c6c <_dtoa_r+0x3a8>
 8015c6a:	e08b      	b.n	8015d84 <_dtoa_r+0x4c0>
 8015c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d100      	bne.n	8015c74 <_dtoa_r+0x3b0>
 8015c72:	e087      	b.n	8015d84 <_dtoa_r+0x4c0>
 8015c74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	dd41      	ble.n	8015cfe <_dtoa_r+0x43a>
 8015c7a:	4bbd      	ldr	r3, [pc, #756]	; (8015f70 <_dtoa_r+0x6ac>)
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	0020      	movs	r0, r4
 8015c80:	0029      	movs	r1, r5
 8015c82:	f7ec f8d7 	bl	8001e34 <__aeabi_dmul>
 8015c86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c88:	9006      	str	r0, [sp, #24]
 8015c8a:	9107      	str	r1, [sp, #28]
 8015c8c:	3301      	adds	r3, #1
 8015c8e:	930e      	str	r3, [sp, #56]	; 0x38
 8015c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c92:	1e7e      	subs	r6, r7, #1
 8015c94:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015c96:	9310      	str	r3, [sp, #64]	; 0x40
 8015c98:	f7ec fed8 	bl	8002a4c <__aeabi_i2d>
 8015c9c:	9a06      	ldr	r2, [sp, #24]
 8015c9e:	9b07      	ldr	r3, [sp, #28]
 8015ca0:	f7ec f8c8 	bl	8001e34 <__aeabi_dmul>
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	4bb3      	ldr	r3, [pc, #716]	; (8015f74 <_dtoa_r+0x6b0>)
 8015ca8:	f7eb f99e 	bl	8000fe8 <__aeabi_dadd>
 8015cac:	4ab2      	ldr	r2, [pc, #712]	; (8015f78 <_dtoa_r+0x6b4>)
 8015cae:	900e      	str	r0, [sp, #56]	; 0x38
 8015cb0:	910f      	str	r1, [sp, #60]	; 0x3c
 8015cb2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015cb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015cb6:	4694      	mov	ip, r2
 8015cb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cba:	4463      	add	r3, ip
 8015cbc:	9315      	str	r3, [sp, #84]	; 0x54
 8015cbe:	001d      	movs	r5, r3
 8015cc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d161      	bne.n	8015d8a <_dtoa_r+0x4c6>
 8015cc6:	9806      	ldr	r0, [sp, #24]
 8015cc8:	9907      	ldr	r1, [sp, #28]
 8015cca:	2200      	movs	r2, #0
 8015ccc:	4bab      	ldr	r3, [pc, #684]	; (8015f7c <_dtoa_r+0x6b8>)
 8015cce:	f7ec fb23 	bl	8002318 <__aeabi_dsub>
 8015cd2:	0022      	movs	r2, r4
 8015cd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015cd6:	9006      	str	r0, [sp, #24]
 8015cd8:	9107      	str	r1, [sp, #28]
 8015cda:	f7ea fbd9 	bl	8000490 <__aeabi_dcmpgt>
 8015cde:	2800      	cmp	r0, #0
 8015ce0:	d000      	beq.n	8015ce4 <_dtoa_r+0x420>
 8015ce2:	e2aa      	b.n	801623a <_dtoa_r+0x976>
 8015ce4:	48a6      	ldr	r0, [pc, #664]	; (8015f80 <_dtoa_r+0x6bc>)
 8015ce6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015ce8:	4684      	mov	ip, r0
 8015cea:	4461      	add	r1, ip
 8015cec:	000b      	movs	r3, r1
 8015cee:	9806      	ldr	r0, [sp, #24]
 8015cf0:	9907      	ldr	r1, [sp, #28]
 8015cf2:	0022      	movs	r2, r4
 8015cf4:	f7ea fbb8 	bl	8000468 <__aeabi_dcmplt>
 8015cf8:	2800      	cmp	r0, #0
 8015cfa:	d000      	beq.n	8015cfe <_dtoa_r+0x43a>
 8015cfc:	e297      	b.n	801622e <_dtoa_r+0x96a>
 8015cfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015d00:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015d02:	9306      	str	r3, [sp, #24]
 8015d04:	9407      	str	r4, [sp, #28]
 8015d06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	da00      	bge.n	8015d0e <_dtoa_r+0x44a>
 8015d0c:	e15e      	b.n	8015fcc <_dtoa_r+0x708>
 8015d0e:	2f0e      	cmp	r7, #14
 8015d10:	dd00      	ble.n	8015d14 <_dtoa_r+0x450>
 8015d12:	e15b      	b.n	8015fcc <_dtoa_r+0x708>
 8015d14:	4b94      	ldr	r3, [pc, #592]	; (8015f68 <_dtoa_r+0x6a4>)
 8015d16:	00fa      	lsls	r2, r7, #3
 8015d18:	189b      	adds	r3, r3, r2
 8015d1a:	685c      	ldr	r4, [r3, #4]
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	9304      	str	r3, [sp, #16]
 8015d20:	9405      	str	r4, [sp, #20]
 8015d22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	db00      	blt.n	8015d2a <_dtoa_r+0x466>
 8015d28:	e0da      	b.n	8015ee0 <_dtoa_r+0x61c>
 8015d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	dd00      	ble.n	8015d32 <_dtoa_r+0x46e>
 8015d30:	e0d6      	b.n	8015ee0 <_dtoa_r+0x61c>
 8015d32:	d000      	beq.n	8015d36 <_dtoa_r+0x472>
 8015d34:	e27f      	b.n	8016236 <_dtoa_r+0x972>
 8015d36:	9804      	ldr	r0, [sp, #16]
 8015d38:	9905      	ldr	r1, [sp, #20]
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	4b8f      	ldr	r3, [pc, #572]	; (8015f7c <_dtoa_r+0x6b8>)
 8015d3e:	f7ec f879 	bl	8001e34 <__aeabi_dmul>
 8015d42:	9a06      	ldr	r2, [sp, #24]
 8015d44:	9b07      	ldr	r3, [sp, #28]
 8015d46:	f7ea fbad 	bl	80004a4 <__aeabi_dcmpge>
 8015d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d4c:	9304      	str	r3, [sp, #16]
 8015d4e:	001e      	movs	r6, r3
 8015d50:	2800      	cmp	r0, #0
 8015d52:	d000      	beq.n	8015d56 <_dtoa_r+0x492>
 8015d54:	e251      	b.n	80161fa <_dtoa_r+0x936>
 8015d56:	9b08      	ldr	r3, [sp, #32]
 8015d58:	9a08      	ldr	r2, [sp, #32]
 8015d5a:	1c5d      	adds	r5, r3, #1
 8015d5c:	2331      	movs	r3, #49	; 0x31
 8015d5e:	3701      	adds	r7, #1
 8015d60:	7013      	strb	r3, [r2, #0]
 8015d62:	e24d      	b.n	8016200 <_dtoa_r+0x93c>
 8015d64:	4234      	tst	r4, r6
 8015d66:	d00a      	beq.n	8015d7e <_dtoa_r+0x4ba>
 8015d68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d6a:	4a86      	ldr	r2, [pc, #536]	; (8015f84 <_dtoa_r+0x6c0>)
 8015d6c:	3301      	adds	r3, #1
 8015d6e:	930e      	str	r3, [sp, #56]	; 0x38
 8015d70:	00eb      	lsls	r3, r5, #3
 8015d72:	189b      	adds	r3, r3, r2
 8015d74:	681a      	ldr	r2, [r3, #0]
 8015d76:	685b      	ldr	r3, [r3, #4]
 8015d78:	f7ec f85c 	bl	8001e34 <__aeabi_dmul>
 8015d7c:	0033      	movs	r3, r6
 8015d7e:	1064      	asrs	r4, r4, #1
 8015d80:	3501      	adds	r5, #1
 8015d82:	e75f      	b.n	8015c44 <_dtoa_r+0x380>
 8015d84:	003e      	movs	r6, r7
 8015d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d88:	e784      	b.n	8015c94 <_dtoa_r+0x3d0>
 8015d8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d8c:	1e5a      	subs	r2, r3, #1
 8015d8e:	4b76      	ldr	r3, [pc, #472]	; (8015f68 <_dtoa_r+0x6a4>)
 8015d90:	00d2      	lsls	r2, r2, #3
 8015d92:	189b      	adds	r3, r3, r2
 8015d94:	6818      	ldr	r0, [r3, #0]
 8015d96:	6859      	ldr	r1, [r3, #4]
 8015d98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d04b      	beq.n	8015e36 <_dtoa_r+0x572>
 8015d9e:	0002      	movs	r2, r0
 8015da0:	000b      	movs	r3, r1
 8015da2:	2000      	movs	r0, #0
 8015da4:	4978      	ldr	r1, [pc, #480]	; (8015f88 <_dtoa_r+0x6c4>)
 8015da6:	f7eb fc3b 	bl	8001620 <__aeabi_ddiv>
 8015daa:	002b      	movs	r3, r5
 8015dac:	0022      	movs	r2, r4
 8015dae:	f7ec fab3 	bl	8002318 <__aeabi_dsub>
 8015db2:	9b08      	ldr	r3, [sp, #32]
 8015db4:	900e      	str	r0, [sp, #56]	; 0x38
 8015db6:	910f      	str	r1, [sp, #60]	; 0x3c
 8015db8:	9315      	str	r3, [sp, #84]	; 0x54
 8015dba:	9806      	ldr	r0, [sp, #24]
 8015dbc:	9907      	ldr	r1, [sp, #28]
 8015dbe:	f7ec fe0f 	bl	80029e0 <__aeabi_d2iz>
 8015dc2:	0004      	movs	r4, r0
 8015dc4:	f7ec fe42 	bl	8002a4c <__aeabi_i2d>
 8015dc8:	0002      	movs	r2, r0
 8015dca:	000b      	movs	r3, r1
 8015dcc:	9806      	ldr	r0, [sp, #24]
 8015dce:	9907      	ldr	r1, [sp, #28]
 8015dd0:	f7ec faa2 	bl	8002318 <__aeabi_dsub>
 8015dd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015dd6:	3430      	adds	r4, #48	; 0x30
 8015dd8:	1c5d      	adds	r5, r3, #1
 8015dda:	701c      	strb	r4, [r3, #0]
 8015ddc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015dde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015de0:	9006      	str	r0, [sp, #24]
 8015de2:	9107      	str	r1, [sp, #28]
 8015de4:	f7ea fb40 	bl	8000468 <__aeabi_dcmplt>
 8015de8:	2800      	cmp	r0, #0
 8015dea:	d16c      	bne.n	8015ec6 <_dtoa_r+0x602>
 8015dec:	9a06      	ldr	r2, [sp, #24]
 8015dee:	9b07      	ldr	r3, [sp, #28]
 8015df0:	2000      	movs	r0, #0
 8015df2:	495e      	ldr	r1, [pc, #376]	; (8015f6c <_dtoa_r+0x6a8>)
 8015df4:	f7ec fa90 	bl	8002318 <__aeabi_dsub>
 8015df8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015dfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015dfc:	f7ea fb34 	bl	8000468 <__aeabi_dcmplt>
 8015e00:	2800      	cmp	r0, #0
 8015e02:	d000      	beq.n	8015e06 <_dtoa_r+0x542>
 8015e04:	e0c3      	b.n	8015f8e <_dtoa_r+0x6ca>
 8015e06:	9b08      	ldr	r3, [sp, #32]
 8015e08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015e0a:	1aeb      	subs	r3, r5, r3
 8015e0c:	429a      	cmp	r2, r3
 8015e0e:	dc00      	bgt.n	8015e12 <_dtoa_r+0x54e>
 8015e10:	e775      	b.n	8015cfe <_dtoa_r+0x43a>
 8015e12:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015e14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015e16:	2200      	movs	r2, #0
 8015e18:	4b55      	ldr	r3, [pc, #340]	; (8015f70 <_dtoa_r+0x6ac>)
 8015e1a:	f7ec f80b 	bl	8001e34 <__aeabi_dmul>
 8015e1e:	2200      	movs	r2, #0
 8015e20:	900e      	str	r0, [sp, #56]	; 0x38
 8015e22:	910f      	str	r1, [sp, #60]	; 0x3c
 8015e24:	9806      	ldr	r0, [sp, #24]
 8015e26:	9907      	ldr	r1, [sp, #28]
 8015e28:	4b51      	ldr	r3, [pc, #324]	; (8015f70 <_dtoa_r+0x6ac>)
 8015e2a:	f7ec f803 	bl	8001e34 <__aeabi_dmul>
 8015e2e:	9515      	str	r5, [sp, #84]	; 0x54
 8015e30:	9006      	str	r0, [sp, #24]
 8015e32:	9107      	str	r1, [sp, #28]
 8015e34:	e7c1      	b.n	8015dba <_dtoa_r+0x4f6>
 8015e36:	0022      	movs	r2, r4
 8015e38:	002b      	movs	r3, r5
 8015e3a:	f7eb fffb 	bl	8001e34 <__aeabi_dmul>
 8015e3e:	9c08      	ldr	r4, [sp, #32]
 8015e40:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015e42:	0023      	movs	r3, r4
 8015e44:	4694      	mov	ip, r2
 8015e46:	900e      	str	r0, [sp, #56]	; 0x38
 8015e48:	910f      	str	r1, [sp, #60]	; 0x3c
 8015e4a:	4463      	add	r3, ip
 8015e4c:	9315      	str	r3, [sp, #84]	; 0x54
 8015e4e:	9806      	ldr	r0, [sp, #24]
 8015e50:	9907      	ldr	r1, [sp, #28]
 8015e52:	f7ec fdc5 	bl	80029e0 <__aeabi_d2iz>
 8015e56:	0005      	movs	r5, r0
 8015e58:	f7ec fdf8 	bl	8002a4c <__aeabi_i2d>
 8015e5c:	000b      	movs	r3, r1
 8015e5e:	0002      	movs	r2, r0
 8015e60:	9806      	ldr	r0, [sp, #24]
 8015e62:	9907      	ldr	r1, [sp, #28]
 8015e64:	f7ec fa58 	bl	8002318 <__aeabi_dsub>
 8015e68:	3530      	adds	r5, #48	; 0x30
 8015e6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e6c:	7025      	strb	r5, [r4, #0]
 8015e6e:	3401      	adds	r4, #1
 8015e70:	9006      	str	r0, [sp, #24]
 8015e72:	9107      	str	r1, [sp, #28]
 8015e74:	42a3      	cmp	r3, r4
 8015e76:	d12a      	bne.n	8015ece <_dtoa_r+0x60a>
 8015e78:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015e7a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015e7c:	9a08      	ldr	r2, [sp, #32]
 8015e7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e80:	4694      	mov	ip, r2
 8015e82:	4463      	add	r3, ip
 8015e84:	2200      	movs	r2, #0
 8015e86:	001d      	movs	r5, r3
 8015e88:	4b3f      	ldr	r3, [pc, #252]	; (8015f88 <_dtoa_r+0x6c4>)
 8015e8a:	f7eb f8ad 	bl	8000fe8 <__aeabi_dadd>
 8015e8e:	0002      	movs	r2, r0
 8015e90:	000b      	movs	r3, r1
 8015e92:	9806      	ldr	r0, [sp, #24]
 8015e94:	9907      	ldr	r1, [sp, #28]
 8015e96:	f7ea fafb 	bl	8000490 <__aeabi_dcmpgt>
 8015e9a:	2800      	cmp	r0, #0
 8015e9c:	d000      	beq.n	8015ea0 <_dtoa_r+0x5dc>
 8015e9e:	e076      	b.n	8015f8e <_dtoa_r+0x6ca>
 8015ea0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ea2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ea4:	2000      	movs	r0, #0
 8015ea6:	4938      	ldr	r1, [pc, #224]	; (8015f88 <_dtoa_r+0x6c4>)
 8015ea8:	f7ec fa36 	bl	8002318 <__aeabi_dsub>
 8015eac:	0002      	movs	r2, r0
 8015eae:	000b      	movs	r3, r1
 8015eb0:	9806      	ldr	r0, [sp, #24]
 8015eb2:	9907      	ldr	r1, [sp, #28]
 8015eb4:	f7ea fad8 	bl	8000468 <__aeabi_dcmplt>
 8015eb8:	2800      	cmp	r0, #0
 8015eba:	d100      	bne.n	8015ebe <_dtoa_r+0x5fa>
 8015ebc:	e71f      	b.n	8015cfe <_dtoa_r+0x43a>
 8015ebe:	1e6b      	subs	r3, r5, #1
 8015ec0:	781a      	ldrb	r2, [r3, #0]
 8015ec2:	2a30      	cmp	r2, #48	; 0x30
 8015ec4:	d001      	beq.n	8015eca <_dtoa_r+0x606>
 8015ec6:	0037      	movs	r7, r6
 8015ec8:	e03f      	b.n	8015f4a <_dtoa_r+0x686>
 8015eca:	001d      	movs	r5, r3
 8015ecc:	e7f7      	b.n	8015ebe <_dtoa_r+0x5fa>
 8015ece:	9806      	ldr	r0, [sp, #24]
 8015ed0:	9907      	ldr	r1, [sp, #28]
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	4b26      	ldr	r3, [pc, #152]	; (8015f70 <_dtoa_r+0x6ac>)
 8015ed6:	f7eb ffad 	bl	8001e34 <__aeabi_dmul>
 8015eda:	9006      	str	r0, [sp, #24]
 8015edc:	9107      	str	r1, [sp, #28]
 8015ede:	e7b6      	b.n	8015e4e <_dtoa_r+0x58a>
 8015ee0:	9e08      	ldr	r6, [sp, #32]
 8015ee2:	9a04      	ldr	r2, [sp, #16]
 8015ee4:	9b05      	ldr	r3, [sp, #20]
 8015ee6:	9806      	ldr	r0, [sp, #24]
 8015ee8:	9907      	ldr	r1, [sp, #28]
 8015eea:	f7eb fb99 	bl	8001620 <__aeabi_ddiv>
 8015eee:	f7ec fd77 	bl	80029e0 <__aeabi_d2iz>
 8015ef2:	0004      	movs	r4, r0
 8015ef4:	f7ec fdaa 	bl	8002a4c <__aeabi_i2d>
 8015ef8:	9a04      	ldr	r2, [sp, #16]
 8015efa:	9b05      	ldr	r3, [sp, #20]
 8015efc:	f7eb ff9a 	bl	8001e34 <__aeabi_dmul>
 8015f00:	0002      	movs	r2, r0
 8015f02:	000b      	movs	r3, r1
 8015f04:	9806      	ldr	r0, [sp, #24]
 8015f06:	9907      	ldr	r1, [sp, #28]
 8015f08:	f7ec fa06 	bl	8002318 <__aeabi_dsub>
 8015f0c:	0023      	movs	r3, r4
 8015f0e:	3330      	adds	r3, #48	; 0x30
 8015f10:	7033      	strb	r3, [r6, #0]
 8015f12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f14:	9b08      	ldr	r3, [sp, #32]
 8015f16:	1c75      	adds	r5, r6, #1
 8015f18:	1aeb      	subs	r3, r5, r3
 8015f1a:	429a      	cmp	r2, r3
 8015f1c:	d148      	bne.n	8015fb0 <_dtoa_r+0x6ec>
 8015f1e:	0002      	movs	r2, r0
 8015f20:	000b      	movs	r3, r1
 8015f22:	f7eb f861 	bl	8000fe8 <__aeabi_dadd>
 8015f26:	9a04      	ldr	r2, [sp, #16]
 8015f28:	9b05      	ldr	r3, [sp, #20]
 8015f2a:	9006      	str	r0, [sp, #24]
 8015f2c:	9107      	str	r1, [sp, #28]
 8015f2e:	f7ea faaf 	bl	8000490 <__aeabi_dcmpgt>
 8015f32:	2800      	cmp	r0, #0
 8015f34:	d12a      	bne.n	8015f8c <_dtoa_r+0x6c8>
 8015f36:	9a04      	ldr	r2, [sp, #16]
 8015f38:	9b05      	ldr	r3, [sp, #20]
 8015f3a:	9806      	ldr	r0, [sp, #24]
 8015f3c:	9907      	ldr	r1, [sp, #28]
 8015f3e:	f7ea fa8d 	bl	800045c <__aeabi_dcmpeq>
 8015f42:	2800      	cmp	r0, #0
 8015f44:	d001      	beq.n	8015f4a <_dtoa_r+0x686>
 8015f46:	07e3      	lsls	r3, r4, #31
 8015f48:	d420      	bmi.n	8015f8c <_dtoa_r+0x6c8>
 8015f4a:	9903      	ldr	r1, [sp, #12]
 8015f4c:	9802      	ldr	r0, [sp, #8]
 8015f4e:	f000 ff35 	bl	8016dbc <_Bfree>
 8015f52:	2300      	movs	r3, #0
 8015f54:	702b      	strb	r3, [r5, #0]
 8015f56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015f58:	3701      	adds	r7, #1
 8015f5a:	601f      	str	r7, [r3, #0]
 8015f5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d100      	bne.n	8015f64 <_dtoa_r+0x6a0>
 8015f62:	e4e4      	b.n	801592e <_dtoa_r+0x6a>
 8015f64:	601d      	str	r5, [r3, #0]
 8015f66:	e4e2      	b.n	801592e <_dtoa_r+0x6a>
 8015f68:	0801a828 	.word	0x0801a828
 8015f6c:	3ff00000 	.word	0x3ff00000
 8015f70:	40240000 	.word	0x40240000
 8015f74:	401c0000 	.word	0x401c0000
 8015f78:	fcc00000 	.word	0xfcc00000
 8015f7c:	40140000 	.word	0x40140000
 8015f80:	7cc00000 	.word	0x7cc00000
 8015f84:	0801a800 	.word	0x0801a800
 8015f88:	3fe00000 	.word	0x3fe00000
 8015f8c:	003e      	movs	r6, r7
 8015f8e:	1e6b      	subs	r3, r5, #1
 8015f90:	781a      	ldrb	r2, [r3, #0]
 8015f92:	2a39      	cmp	r2, #57	; 0x39
 8015f94:	d106      	bne.n	8015fa4 <_dtoa_r+0x6e0>
 8015f96:	9a08      	ldr	r2, [sp, #32]
 8015f98:	429a      	cmp	r2, r3
 8015f9a:	d107      	bne.n	8015fac <_dtoa_r+0x6e8>
 8015f9c:	2330      	movs	r3, #48	; 0x30
 8015f9e:	7013      	strb	r3, [r2, #0]
 8015fa0:	0013      	movs	r3, r2
 8015fa2:	3601      	adds	r6, #1
 8015fa4:	781a      	ldrb	r2, [r3, #0]
 8015fa6:	3201      	adds	r2, #1
 8015fa8:	701a      	strb	r2, [r3, #0]
 8015faa:	e78c      	b.n	8015ec6 <_dtoa_r+0x602>
 8015fac:	001d      	movs	r5, r3
 8015fae:	e7ee      	b.n	8015f8e <_dtoa_r+0x6ca>
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	4ba4      	ldr	r3, [pc, #656]	; (8016244 <_dtoa_r+0x980>)
 8015fb4:	f7eb ff3e 	bl	8001e34 <__aeabi_dmul>
 8015fb8:	2200      	movs	r2, #0
 8015fba:	2300      	movs	r3, #0
 8015fbc:	9006      	str	r0, [sp, #24]
 8015fbe:	9107      	str	r1, [sp, #28]
 8015fc0:	002e      	movs	r6, r5
 8015fc2:	f7ea fa4b 	bl	800045c <__aeabi_dcmpeq>
 8015fc6:	2800      	cmp	r0, #0
 8015fc8:	d08b      	beq.n	8015ee2 <_dtoa_r+0x61e>
 8015fca:	e7be      	b.n	8015f4a <_dtoa_r+0x686>
 8015fcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015fce:	2a00      	cmp	r2, #0
 8015fd0:	d100      	bne.n	8015fd4 <_dtoa_r+0x710>
 8015fd2:	e0da      	b.n	801618a <_dtoa_r+0x8c6>
 8015fd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015fd6:	2a01      	cmp	r2, #1
 8015fd8:	dd00      	ble.n	8015fdc <_dtoa_r+0x718>
 8015fda:	e0bd      	b.n	8016158 <_dtoa_r+0x894>
 8015fdc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015fde:	2a00      	cmp	r2, #0
 8015fe0:	d100      	bne.n	8015fe4 <_dtoa_r+0x720>
 8015fe2:	e0b5      	b.n	8016150 <_dtoa_r+0x88c>
 8015fe4:	4a98      	ldr	r2, [pc, #608]	; (8016248 <_dtoa_r+0x984>)
 8015fe6:	189b      	adds	r3, r3, r2
 8015fe8:	9d04      	ldr	r5, [sp, #16]
 8015fea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015fee:	2101      	movs	r1, #1
 8015ff0:	18d2      	adds	r2, r2, r3
 8015ff2:	920a      	str	r2, [sp, #40]	; 0x28
 8015ff4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015ff6:	9802      	ldr	r0, [sp, #8]
 8015ff8:	18d3      	adds	r3, r2, r3
 8015ffa:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ffc:	f000 ffad 	bl	8016f5a <__i2b>
 8016000:	0006      	movs	r6, r0
 8016002:	2c00      	cmp	r4, #0
 8016004:	dd0e      	ble.n	8016024 <_dtoa_r+0x760>
 8016006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016008:	2b00      	cmp	r3, #0
 801600a:	dd0b      	ble.n	8016024 <_dtoa_r+0x760>
 801600c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801600e:	0023      	movs	r3, r4
 8016010:	4294      	cmp	r4, r2
 8016012:	dd00      	ble.n	8016016 <_dtoa_r+0x752>
 8016014:	0013      	movs	r3, r2
 8016016:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016018:	1ae4      	subs	r4, r4, r3
 801601a:	1ad2      	subs	r2, r2, r3
 801601c:	920a      	str	r2, [sp, #40]	; 0x28
 801601e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016020:	1ad3      	subs	r3, r2, r3
 8016022:	930b      	str	r3, [sp, #44]	; 0x2c
 8016024:	9b04      	ldr	r3, [sp, #16]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d01f      	beq.n	801606a <_dtoa_r+0x7a6>
 801602a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801602c:	2b00      	cmp	r3, #0
 801602e:	d100      	bne.n	8016032 <_dtoa_r+0x76e>
 8016030:	e0af      	b.n	8016192 <_dtoa_r+0x8ce>
 8016032:	2d00      	cmp	r5, #0
 8016034:	d011      	beq.n	801605a <_dtoa_r+0x796>
 8016036:	0031      	movs	r1, r6
 8016038:	002a      	movs	r2, r5
 801603a:	9802      	ldr	r0, [sp, #8]
 801603c:	f001 f826 	bl	801708c <__pow5mult>
 8016040:	9a03      	ldr	r2, [sp, #12]
 8016042:	0001      	movs	r1, r0
 8016044:	0006      	movs	r6, r0
 8016046:	9802      	ldr	r0, [sp, #8]
 8016048:	f000 ff90 	bl	8016f6c <__multiply>
 801604c:	9903      	ldr	r1, [sp, #12]
 801604e:	9010      	str	r0, [sp, #64]	; 0x40
 8016050:	9802      	ldr	r0, [sp, #8]
 8016052:	f000 feb3 	bl	8016dbc <_Bfree>
 8016056:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016058:	9303      	str	r3, [sp, #12]
 801605a:	9b04      	ldr	r3, [sp, #16]
 801605c:	1b5a      	subs	r2, r3, r5
 801605e:	d004      	beq.n	801606a <_dtoa_r+0x7a6>
 8016060:	9903      	ldr	r1, [sp, #12]
 8016062:	9802      	ldr	r0, [sp, #8]
 8016064:	f001 f812 	bl	801708c <__pow5mult>
 8016068:	9003      	str	r0, [sp, #12]
 801606a:	2101      	movs	r1, #1
 801606c:	9802      	ldr	r0, [sp, #8]
 801606e:	f000 ff74 	bl	8016f5a <__i2b>
 8016072:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016074:	9004      	str	r0, [sp, #16]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d100      	bne.n	801607c <_dtoa_r+0x7b8>
 801607a:	e1e3      	b.n	8016444 <_dtoa_r+0xb80>
 801607c:	001a      	movs	r2, r3
 801607e:	0001      	movs	r1, r0
 8016080:	9802      	ldr	r0, [sp, #8]
 8016082:	f001 f803 	bl	801708c <__pow5mult>
 8016086:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016088:	9004      	str	r0, [sp, #16]
 801608a:	2b01      	cmp	r3, #1
 801608c:	dd00      	ble.n	8016090 <_dtoa_r+0x7cc>
 801608e:	e082      	b.n	8016196 <_dtoa_r+0x8d2>
 8016090:	2500      	movs	r5, #0
 8016092:	9b06      	ldr	r3, [sp, #24]
 8016094:	42ab      	cmp	r3, r5
 8016096:	d10e      	bne.n	80160b6 <_dtoa_r+0x7f2>
 8016098:	9b07      	ldr	r3, [sp, #28]
 801609a:	031b      	lsls	r3, r3, #12
 801609c:	42ab      	cmp	r3, r5
 801609e:	d10a      	bne.n	80160b6 <_dtoa_r+0x7f2>
 80160a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80160a2:	9a07      	ldr	r2, [sp, #28]
 80160a4:	4213      	tst	r3, r2
 80160a6:	d006      	beq.n	80160b6 <_dtoa_r+0x7f2>
 80160a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160aa:	3501      	adds	r5, #1
 80160ac:	3301      	adds	r3, #1
 80160ae:	930a      	str	r3, [sp, #40]	; 0x28
 80160b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160b2:	3301      	adds	r3, #1
 80160b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80160b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80160b8:	2001      	movs	r0, #1
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d16c      	bne.n	8016198 <_dtoa_r+0x8d4>
 80160be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160c0:	1818      	adds	r0, r3, r0
 80160c2:	231f      	movs	r3, #31
 80160c4:	4018      	ands	r0, r3
 80160c6:	d07e      	beq.n	80161c6 <_dtoa_r+0x902>
 80160c8:	3301      	adds	r3, #1
 80160ca:	1a1b      	subs	r3, r3, r0
 80160cc:	2b04      	cmp	r3, #4
 80160ce:	dd70      	ble.n	80161b2 <_dtoa_r+0x8ee>
 80160d0:	231c      	movs	r3, #28
 80160d2:	1a18      	subs	r0, r3, r0
 80160d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160d6:	1824      	adds	r4, r4, r0
 80160d8:	181b      	adds	r3, r3, r0
 80160da:	930a      	str	r3, [sp, #40]	; 0x28
 80160dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160de:	181b      	adds	r3, r3, r0
 80160e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80160e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	dd05      	ble.n	80160f4 <_dtoa_r+0x830>
 80160e8:	001a      	movs	r2, r3
 80160ea:	9903      	ldr	r1, [sp, #12]
 80160ec:	9802      	ldr	r0, [sp, #8]
 80160ee:	f001 f80f 	bl	8017110 <__lshift>
 80160f2:	9003      	str	r0, [sp, #12]
 80160f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	dd05      	ble.n	8016106 <_dtoa_r+0x842>
 80160fa:	001a      	movs	r2, r3
 80160fc:	9904      	ldr	r1, [sp, #16]
 80160fe:	9802      	ldr	r0, [sp, #8]
 8016100:	f001 f806 	bl	8017110 <__lshift>
 8016104:	9004      	str	r0, [sp, #16]
 8016106:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016108:	2b00      	cmp	r3, #0
 801610a:	d05e      	beq.n	80161ca <_dtoa_r+0x906>
 801610c:	9904      	ldr	r1, [sp, #16]
 801610e:	9803      	ldr	r0, [sp, #12]
 8016110:	f001 f850 	bl	80171b4 <__mcmp>
 8016114:	2800      	cmp	r0, #0
 8016116:	da58      	bge.n	80161ca <_dtoa_r+0x906>
 8016118:	2300      	movs	r3, #0
 801611a:	220a      	movs	r2, #10
 801611c:	9903      	ldr	r1, [sp, #12]
 801611e:	9802      	ldr	r0, [sp, #8]
 8016120:	f000 fe56 	bl	8016dd0 <__multadd>
 8016124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016126:	3f01      	subs	r7, #1
 8016128:	9003      	str	r0, [sp, #12]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d100      	bne.n	8016130 <_dtoa_r+0x86c>
 801612e:	e190      	b.n	8016452 <_dtoa_r+0xb8e>
 8016130:	2300      	movs	r3, #0
 8016132:	0031      	movs	r1, r6
 8016134:	220a      	movs	r2, #10
 8016136:	9802      	ldr	r0, [sp, #8]
 8016138:	f000 fe4a 	bl	8016dd0 <__multadd>
 801613c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801613e:	0006      	movs	r6, r0
 8016140:	2b00      	cmp	r3, #0
 8016142:	dd00      	ble.n	8016146 <_dtoa_r+0x882>
 8016144:	e088      	b.n	8016258 <_dtoa_r+0x994>
 8016146:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016148:	2b02      	cmp	r3, #2
 801614a:	dc00      	bgt.n	801614e <_dtoa_r+0x88a>
 801614c:	e084      	b.n	8016258 <_dtoa_r+0x994>
 801614e:	e044      	b.n	80161da <_dtoa_r+0x916>
 8016150:	2336      	movs	r3, #54	; 0x36
 8016152:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016154:	1a9b      	subs	r3, r3, r2
 8016156:	e747      	b.n	8015fe8 <_dtoa_r+0x724>
 8016158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801615a:	1e5d      	subs	r5, r3, #1
 801615c:	9b04      	ldr	r3, [sp, #16]
 801615e:	42ab      	cmp	r3, r5
 8016160:	db08      	blt.n	8016174 <_dtoa_r+0x8b0>
 8016162:	1b5d      	subs	r5, r3, r5
 8016164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016166:	2b00      	cmp	r3, #0
 8016168:	da0c      	bge.n	8016184 <_dtoa_r+0x8c0>
 801616a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801616c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801616e:	1a9c      	subs	r4, r3, r2
 8016170:	2300      	movs	r3, #0
 8016172:	e73b      	b.n	8015fec <_dtoa_r+0x728>
 8016174:	9b04      	ldr	r3, [sp, #16]
 8016176:	9504      	str	r5, [sp, #16]
 8016178:	1aea      	subs	r2, r5, r3
 801617a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801617c:	2500      	movs	r5, #0
 801617e:	189b      	adds	r3, r3, r2
 8016180:	9311      	str	r3, [sp, #68]	; 0x44
 8016182:	e7ef      	b.n	8016164 <_dtoa_r+0x8a0>
 8016184:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016188:	e730      	b.n	8015fec <_dtoa_r+0x728>
 801618a:	9d04      	ldr	r5, [sp, #16]
 801618c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801618e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8016190:	e737      	b.n	8016002 <_dtoa_r+0x73e>
 8016192:	9a04      	ldr	r2, [sp, #16]
 8016194:	e764      	b.n	8016060 <_dtoa_r+0x79c>
 8016196:	2500      	movs	r5, #0
 8016198:	9b04      	ldr	r3, [sp, #16]
 801619a:	9a04      	ldr	r2, [sp, #16]
 801619c:	691b      	ldr	r3, [r3, #16]
 801619e:	9310      	str	r3, [sp, #64]	; 0x40
 80161a0:	3303      	adds	r3, #3
 80161a2:	009b      	lsls	r3, r3, #2
 80161a4:	18d3      	adds	r3, r2, r3
 80161a6:	6858      	ldr	r0, [r3, #4]
 80161a8:	f000 fe8e 	bl	8016ec8 <__hi0bits>
 80161ac:	2320      	movs	r3, #32
 80161ae:	1a18      	subs	r0, r3, r0
 80161b0:	e785      	b.n	80160be <_dtoa_r+0x7fa>
 80161b2:	2b04      	cmp	r3, #4
 80161b4:	d095      	beq.n	80160e2 <_dtoa_r+0x81e>
 80161b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80161b8:	331c      	adds	r3, #28
 80161ba:	18d2      	adds	r2, r2, r3
 80161bc:	920a      	str	r2, [sp, #40]	; 0x28
 80161be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80161c0:	18e4      	adds	r4, r4, r3
 80161c2:	18d3      	adds	r3, r2, r3
 80161c4:	e78c      	b.n	80160e0 <_dtoa_r+0x81c>
 80161c6:	0003      	movs	r3, r0
 80161c8:	e7f5      	b.n	80161b6 <_dtoa_r+0x8f2>
 80161ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	dc3d      	bgt.n	801624c <_dtoa_r+0x988>
 80161d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80161d2:	2b02      	cmp	r3, #2
 80161d4:	dd3a      	ble.n	801624c <_dtoa_r+0x988>
 80161d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161d8:	930c      	str	r3, [sp, #48]	; 0x30
 80161da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d10c      	bne.n	80161fa <_dtoa_r+0x936>
 80161e0:	9904      	ldr	r1, [sp, #16]
 80161e2:	2205      	movs	r2, #5
 80161e4:	9802      	ldr	r0, [sp, #8]
 80161e6:	f000 fdf3 	bl	8016dd0 <__multadd>
 80161ea:	9004      	str	r0, [sp, #16]
 80161ec:	0001      	movs	r1, r0
 80161ee:	9803      	ldr	r0, [sp, #12]
 80161f0:	f000 ffe0 	bl	80171b4 <__mcmp>
 80161f4:	2800      	cmp	r0, #0
 80161f6:	dd00      	ble.n	80161fa <_dtoa_r+0x936>
 80161f8:	e5ad      	b.n	8015d56 <_dtoa_r+0x492>
 80161fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80161fc:	9d08      	ldr	r5, [sp, #32]
 80161fe:	43df      	mvns	r7, r3
 8016200:	2300      	movs	r3, #0
 8016202:	9309      	str	r3, [sp, #36]	; 0x24
 8016204:	9904      	ldr	r1, [sp, #16]
 8016206:	9802      	ldr	r0, [sp, #8]
 8016208:	f000 fdd8 	bl	8016dbc <_Bfree>
 801620c:	2e00      	cmp	r6, #0
 801620e:	d100      	bne.n	8016212 <_dtoa_r+0x94e>
 8016210:	e69b      	b.n	8015f4a <_dtoa_r+0x686>
 8016212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016214:	2b00      	cmp	r3, #0
 8016216:	d005      	beq.n	8016224 <_dtoa_r+0x960>
 8016218:	42b3      	cmp	r3, r6
 801621a:	d003      	beq.n	8016224 <_dtoa_r+0x960>
 801621c:	0019      	movs	r1, r3
 801621e:	9802      	ldr	r0, [sp, #8]
 8016220:	f000 fdcc 	bl	8016dbc <_Bfree>
 8016224:	0031      	movs	r1, r6
 8016226:	9802      	ldr	r0, [sp, #8]
 8016228:	f000 fdc8 	bl	8016dbc <_Bfree>
 801622c:	e68d      	b.n	8015f4a <_dtoa_r+0x686>
 801622e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016230:	9304      	str	r3, [sp, #16]
 8016232:	001e      	movs	r6, r3
 8016234:	e7e1      	b.n	80161fa <_dtoa_r+0x936>
 8016236:	2300      	movs	r3, #0
 8016238:	e7fa      	b.n	8016230 <_dtoa_r+0x96c>
 801623a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801623c:	0037      	movs	r7, r6
 801623e:	9304      	str	r3, [sp, #16]
 8016240:	001e      	movs	r6, r3
 8016242:	e588      	b.n	8015d56 <_dtoa_r+0x492>
 8016244:	40240000 	.word	0x40240000
 8016248:	00000433 	.word	0x00000433
 801624c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801624e:	2b00      	cmp	r3, #0
 8016250:	d100      	bne.n	8016254 <_dtoa_r+0x990>
 8016252:	e0b2      	b.n	80163ba <_dtoa_r+0xaf6>
 8016254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016256:	930c      	str	r3, [sp, #48]	; 0x30
 8016258:	2c00      	cmp	r4, #0
 801625a:	dd05      	ble.n	8016268 <_dtoa_r+0x9a4>
 801625c:	0031      	movs	r1, r6
 801625e:	0022      	movs	r2, r4
 8016260:	9802      	ldr	r0, [sp, #8]
 8016262:	f000 ff55 	bl	8017110 <__lshift>
 8016266:	0006      	movs	r6, r0
 8016268:	0030      	movs	r0, r6
 801626a:	2d00      	cmp	r5, #0
 801626c:	d011      	beq.n	8016292 <_dtoa_r+0x9ce>
 801626e:	6871      	ldr	r1, [r6, #4]
 8016270:	9802      	ldr	r0, [sp, #8]
 8016272:	f000 fd7b 	bl	8016d6c <_Balloc>
 8016276:	0031      	movs	r1, r6
 8016278:	0004      	movs	r4, r0
 801627a:	6933      	ldr	r3, [r6, #16]
 801627c:	310c      	adds	r1, #12
 801627e:	1c9a      	adds	r2, r3, #2
 8016280:	0092      	lsls	r2, r2, #2
 8016282:	300c      	adds	r0, #12
 8016284:	f7fc fe8b 	bl	8012f9e <memcpy>
 8016288:	2201      	movs	r2, #1
 801628a:	0021      	movs	r1, r4
 801628c:	9802      	ldr	r0, [sp, #8]
 801628e:	f000 ff3f 	bl	8017110 <__lshift>
 8016292:	9609      	str	r6, [sp, #36]	; 0x24
 8016294:	0006      	movs	r6, r0
 8016296:	9b08      	ldr	r3, [sp, #32]
 8016298:	930a      	str	r3, [sp, #40]	; 0x28
 801629a:	9904      	ldr	r1, [sp, #16]
 801629c:	9803      	ldr	r0, [sp, #12]
 801629e:	f7ff fa8b 	bl	80157b8 <quorem>
 80162a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162a4:	900d      	str	r0, [sp, #52]	; 0x34
 80162a6:	0004      	movs	r4, r0
 80162a8:	9803      	ldr	r0, [sp, #12]
 80162aa:	f000 ff83 	bl	80171b4 <__mcmp>
 80162ae:	0032      	movs	r2, r6
 80162b0:	9010      	str	r0, [sp, #64]	; 0x40
 80162b2:	9904      	ldr	r1, [sp, #16]
 80162b4:	9802      	ldr	r0, [sp, #8]
 80162b6:	f000 ff97 	bl	80171e8 <__mdiff>
 80162ba:	2301      	movs	r3, #1
 80162bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80162be:	68c3      	ldr	r3, [r0, #12]
 80162c0:	3430      	adds	r4, #48	; 0x30
 80162c2:	0005      	movs	r5, r0
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d104      	bne.n	80162d2 <_dtoa_r+0xa0e>
 80162c8:	0001      	movs	r1, r0
 80162ca:	9803      	ldr	r0, [sp, #12]
 80162cc:	f000 ff72 	bl	80171b4 <__mcmp>
 80162d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80162d2:	0029      	movs	r1, r5
 80162d4:	9802      	ldr	r0, [sp, #8]
 80162d6:	f000 fd71 	bl	8016dbc <_Bfree>
 80162da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80162dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80162de:	4313      	orrs	r3, r2
 80162e0:	d10e      	bne.n	8016300 <_dtoa_r+0xa3c>
 80162e2:	9a06      	ldr	r2, [sp, #24]
 80162e4:	3301      	adds	r3, #1
 80162e6:	4213      	tst	r3, r2
 80162e8:	d10a      	bne.n	8016300 <_dtoa_r+0xa3c>
 80162ea:	2c39      	cmp	r4, #57	; 0x39
 80162ec:	d026      	beq.n	801633c <_dtoa_r+0xa78>
 80162ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	dd01      	ble.n	80162f8 <_dtoa_r+0xa34>
 80162f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80162f6:	3431      	adds	r4, #49	; 0x31
 80162f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162fa:	1c5d      	adds	r5, r3, #1
 80162fc:	701c      	strb	r4, [r3, #0]
 80162fe:	e781      	b.n	8016204 <_dtoa_r+0x940>
 8016300:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016302:	2b00      	cmp	r3, #0
 8016304:	db07      	blt.n	8016316 <_dtoa_r+0xa52>
 8016306:	001d      	movs	r5, r3
 8016308:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801630a:	431d      	orrs	r5, r3
 801630c:	d122      	bne.n	8016354 <_dtoa_r+0xa90>
 801630e:	2301      	movs	r3, #1
 8016310:	9a06      	ldr	r2, [sp, #24]
 8016312:	4213      	tst	r3, r2
 8016314:	d11e      	bne.n	8016354 <_dtoa_r+0xa90>
 8016316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016318:	2b00      	cmp	r3, #0
 801631a:	dded      	ble.n	80162f8 <_dtoa_r+0xa34>
 801631c:	9903      	ldr	r1, [sp, #12]
 801631e:	2201      	movs	r2, #1
 8016320:	9802      	ldr	r0, [sp, #8]
 8016322:	f000 fef5 	bl	8017110 <__lshift>
 8016326:	9904      	ldr	r1, [sp, #16]
 8016328:	9003      	str	r0, [sp, #12]
 801632a:	f000 ff43 	bl	80171b4 <__mcmp>
 801632e:	2800      	cmp	r0, #0
 8016330:	dc02      	bgt.n	8016338 <_dtoa_r+0xa74>
 8016332:	d1e1      	bne.n	80162f8 <_dtoa_r+0xa34>
 8016334:	07e3      	lsls	r3, r4, #31
 8016336:	d5df      	bpl.n	80162f8 <_dtoa_r+0xa34>
 8016338:	2c39      	cmp	r4, #57	; 0x39
 801633a:	d1db      	bne.n	80162f4 <_dtoa_r+0xa30>
 801633c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801633e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016340:	1c5d      	adds	r5, r3, #1
 8016342:	2339      	movs	r3, #57	; 0x39
 8016344:	7013      	strb	r3, [r2, #0]
 8016346:	1e6b      	subs	r3, r5, #1
 8016348:	781a      	ldrb	r2, [r3, #0]
 801634a:	2a39      	cmp	r2, #57	; 0x39
 801634c:	d067      	beq.n	801641e <_dtoa_r+0xb5a>
 801634e:	3201      	adds	r2, #1
 8016350:	701a      	strb	r2, [r3, #0]
 8016352:	e757      	b.n	8016204 <_dtoa_r+0x940>
 8016354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016356:	1c5d      	adds	r5, r3, #1
 8016358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801635a:	2b00      	cmp	r3, #0
 801635c:	dd04      	ble.n	8016368 <_dtoa_r+0xaa4>
 801635e:	2c39      	cmp	r4, #57	; 0x39
 8016360:	d0ec      	beq.n	801633c <_dtoa_r+0xa78>
 8016362:	3401      	adds	r4, #1
 8016364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016366:	e7c9      	b.n	80162fc <_dtoa_r+0xa38>
 8016368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801636a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801636c:	701c      	strb	r4, [r3, #0]
 801636e:	9b08      	ldr	r3, [sp, #32]
 8016370:	1aeb      	subs	r3, r5, r3
 8016372:	4293      	cmp	r3, r2
 8016374:	d03e      	beq.n	80163f4 <_dtoa_r+0xb30>
 8016376:	2300      	movs	r3, #0
 8016378:	220a      	movs	r2, #10
 801637a:	9903      	ldr	r1, [sp, #12]
 801637c:	9802      	ldr	r0, [sp, #8]
 801637e:	f000 fd27 	bl	8016dd0 <__multadd>
 8016382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016384:	9003      	str	r0, [sp, #12]
 8016386:	42b3      	cmp	r3, r6
 8016388:	d109      	bne.n	801639e <_dtoa_r+0xada>
 801638a:	2300      	movs	r3, #0
 801638c:	220a      	movs	r2, #10
 801638e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016390:	9802      	ldr	r0, [sp, #8]
 8016392:	f000 fd1d 	bl	8016dd0 <__multadd>
 8016396:	9009      	str	r0, [sp, #36]	; 0x24
 8016398:	0006      	movs	r6, r0
 801639a:	950a      	str	r5, [sp, #40]	; 0x28
 801639c:	e77d      	b.n	801629a <_dtoa_r+0x9d6>
 801639e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80163a0:	2300      	movs	r3, #0
 80163a2:	220a      	movs	r2, #10
 80163a4:	9802      	ldr	r0, [sp, #8]
 80163a6:	f000 fd13 	bl	8016dd0 <__multadd>
 80163aa:	2300      	movs	r3, #0
 80163ac:	9009      	str	r0, [sp, #36]	; 0x24
 80163ae:	220a      	movs	r2, #10
 80163b0:	0031      	movs	r1, r6
 80163b2:	9802      	ldr	r0, [sp, #8]
 80163b4:	f000 fd0c 	bl	8016dd0 <__multadd>
 80163b8:	e7ee      	b.n	8016398 <_dtoa_r+0xad4>
 80163ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163bc:	930c      	str	r3, [sp, #48]	; 0x30
 80163be:	9b08      	ldr	r3, [sp, #32]
 80163c0:	9306      	str	r3, [sp, #24]
 80163c2:	9904      	ldr	r1, [sp, #16]
 80163c4:	9803      	ldr	r0, [sp, #12]
 80163c6:	f7ff f9f7 	bl	80157b8 <quorem>
 80163ca:	9b06      	ldr	r3, [sp, #24]
 80163cc:	3030      	adds	r0, #48	; 0x30
 80163ce:	1c5d      	adds	r5, r3, #1
 80163d0:	7018      	strb	r0, [r3, #0]
 80163d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80163d4:	9b08      	ldr	r3, [sp, #32]
 80163d6:	0004      	movs	r4, r0
 80163d8:	1aeb      	subs	r3, r5, r3
 80163da:	429a      	cmp	r2, r3
 80163dc:	dd08      	ble.n	80163f0 <_dtoa_r+0xb2c>
 80163de:	2300      	movs	r3, #0
 80163e0:	220a      	movs	r2, #10
 80163e2:	9903      	ldr	r1, [sp, #12]
 80163e4:	9802      	ldr	r0, [sp, #8]
 80163e6:	f000 fcf3 	bl	8016dd0 <__multadd>
 80163ea:	9506      	str	r5, [sp, #24]
 80163ec:	9003      	str	r0, [sp, #12]
 80163ee:	e7e8      	b.n	80163c2 <_dtoa_r+0xafe>
 80163f0:	2300      	movs	r3, #0
 80163f2:	9309      	str	r3, [sp, #36]	; 0x24
 80163f4:	9903      	ldr	r1, [sp, #12]
 80163f6:	2201      	movs	r2, #1
 80163f8:	9802      	ldr	r0, [sp, #8]
 80163fa:	f000 fe89 	bl	8017110 <__lshift>
 80163fe:	9904      	ldr	r1, [sp, #16]
 8016400:	9003      	str	r0, [sp, #12]
 8016402:	f000 fed7 	bl	80171b4 <__mcmp>
 8016406:	2800      	cmp	r0, #0
 8016408:	dc9d      	bgt.n	8016346 <_dtoa_r+0xa82>
 801640a:	d101      	bne.n	8016410 <_dtoa_r+0xb4c>
 801640c:	07e3      	lsls	r3, r4, #31
 801640e:	d49a      	bmi.n	8016346 <_dtoa_r+0xa82>
 8016410:	1e6b      	subs	r3, r5, #1
 8016412:	781a      	ldrb	r2, [r3, #0]
 8016414:	2a30      	cmp	r2, #48	; 0x30
 8016416:	d000      	beq.n	801641a <_dtoa_r+0xb56>
 8016418:	e6f4      	b.n	8016204 <_dtoa_r+0x940>
 801641a:	001d      	movs	r5, r3
 801641c:	e7f8      	b.n	8016410 <_dtoa_r+0xb4c>
 801641e:	9a08      	ldr	r2, [sp, #32]
 8016420:	429a      	cmp	r2, r3
 8016422:	d103      	bne.n	801642c <_dtoa_r+0xb68>
 8016424:	2331      	movs	r3, #49	; 0x31
 8016426:	3701      	adds	r7, #1
 8016428:	7013      	strb	r3, [r2, #0]
 801642a:	e6eb      	b.n	8016204 <_dtoa_r+0x940>
 801642c:	001d      	movs	r5, r3
 801642e:	e78a      	b.n	8016346 <_dtoa_r+0xa82>
 8016430:	4b0b      	ldr	r3, [pc, #44]	; (8016460 <_dtoa_r+0xb9c>)
 8016432:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016434:	9308      	str	r3, [sp, #32]
 8016436:	4b0b      	ldr	r3, [pc, #44]	; (8016464 <_dtoa_r+0xba0>)
 8016438:	2a00      	cmp	r2, #0
 801643a:	d001      	beq.n	8016440 <_dtoa_r+0xb7c>
 801643c:	f7ff fa75 	bl	801592a <_dtoa_r+0x66>
 8016440:	f7ff fa75 	bl	801592e <_dtoa_r+0x6a>
 8016444:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016446:	2b01      	cmp	r3, #1
 8016448:	dc00      	bgt.n	801644c <_dtoa_r+0xb88>
 801644a:	e621      	b.n	8016090 <_dtoa_r+0x7cc>
 801644c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801644e:	2001      	movs	r0, #1
 8016450:	e635      	b.n	80160be <_dtoa_r+0x7fa>
 8016452:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016454:	2b00      	cmp	r3, #0
 8016456:	dcb2      	bgt.n	80163be <_dtoa_r+0xafa>
 8016458:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801645a:	2b02      	cmp	r3, #2
 801645c:	ddaf      	ble.n	80163be <_dtoa_r+0xafa>
 801645e:	e6bc      	b.n	80161da <_dtoa_r+0x916>
 8016460:	0801a7ed 	.word	0x0801a7ed
 8016464:	0801a7f5 	.word	0x0801a7f5

08016468 <__errno>:
 8016468:	4b01      	ldr	r3, [pc, #4]	; (8016470 <__errno+0x8>)
 801646a:	6818      	ldr	r0, [r3, #0]
 801646c:	4770      	bx	lr
 801646e:	46c0      	nop			; (mov r8, r8)
 8016470:	200000a8 	.word	0x200000a8

08016474 <__libc_fini_array>:
 8016474:	b570      	push	{r4, r5, r6, lr}
 8016476:	4d07      	ldr	r5, [pc, #28]	; (8016494 <__libc_fini_array+0x20>)
 8016478:	4c07      	ldr	r4, [pc, #28]	; (8016498 <__libc_fini_array+0x24>)
 801647a:	1b64      	subs	r4, r4, r5
 801647c:	10a4      	asrs	r4, r4, #2
 801647e:	2c00      	cmp	r4, #0
 8016480:	d102      	bne.n	8016488 <__libc_fini_array+0x14>
 8016482:	f001 f987 	bl	8017794 <_fini>
 8016486:	bd70      	pop	{r4, r5, r6, pc}
 8016488:	3c01      	subs	r4, #1
 801648a:	00a3      	lsls	r3, r4, #2
 801648c:	58eb      	ldr	r3, [r5, r3]
 801648e:	4798      	blx	r3
 8016490:	e7f5      	b.n	801647e <__libc_fini_array+0xa>
 8016492:	46c0      	nop			; (mov r8, r8)
 8016494:	0801a90c 	.word	0x0801a90c
 8016498:	0801a910 	.word	0x0801a910

0801649c <_malloc_trim_r>:
 801649c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801649e:	0005      	movs	r5, r0
 80164a0:	2008      	movs	r0, #8
 80164a2:	000c      	movs	r4, r1
 80164a4:	f7ff f95c 	bl	8015760 <sysconf>
 80164a8:	0007      	movs	r7, r0
 80164aa:	0028      	movs	r0, r5
 80164ac:	f7fc fd88 	bl	8012fc0 <__malloc_lock>
 80164b0:	2203      	movs	r2, #3
 80164b2:	4e21      	ldr	r6, [pc, #132]	; (8016538 <_malloc_trim_r+0x9c>)
 80164b4:	0039      	movs	r1, r7
 80164b6:	68b3      	ldr	r3, [r6, #8]
 80164b8:	685b      	ldr	r3, [r3, #4]
 80164ba:	4393      	bics	r3, r2
 80164bc:	1b18      	subs	r0, r3, r4
 80164be:	3811      	subs	r0, #17
 80164c0:	19c0      	adds	r0, r0, r7
 80164c2:	9301      	str	r3, [sp, #4]
 80164c4:	f7e9 fe44 	bl	8000150 <__udivsi3>
 80164c8:	1e44      	subs	r4, r0, #1
 80164ca:	437c      	muls	r4, r7
 80164cc:	42a7      	cmp	r7, r4
 80164ce:	dd04      	ble.n	80164da <_malloc_trim_r+0x3e>
 80164d0:	0028      	movs	r0, r5
 80164d2:	f7fc fd7d 	bl	8012fd0 <__malloc_unlock>
 80164d6:	2000      	movs	r0, #0
 80164d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80164da:	2100      	movs	r1, #0
 80164dc:	0028      	movs	r0, r5
 80164de:	f7fc ff4f 	bl	8013380 <_sbrk_r>
 80164e2:	68b3      	ldr	r3, [r6, #8]
 80164e4:	9a01      	ldr	r2, [sp, #4]
 80164e6:	189b      	adds	r3, r3, r2
 80164e8:	4298      	cmp	r0, r3
 80164ea:	d1f1      	bne.n	80164d0 <_malloc_trim_r+0x34>
 80164ec:	4261      	negs	r1, r4
 80164ee:	0028      	movs	r0, r5
 80164f0:	f7fc ff46 	bl	8013380 <_sbrk_r>
 80164f4:	1c43      	adds	r3, r0, #1
 80164f6:	d110      	bne.n	801651a <_malloc_trim_r+0x7e>
 80164f8:	2100      	movs	r1, #0
 80164fa:	0028      	movs	r0, r5
 80164fc:	f7fc ff40 	bl	8013380 <_sbrk_r>
 8016500:	68b2      	ldr	r2, [r6, #8]
 8016502:	1a81      	subs	r1, r0, r2
 8016504:	290f      	cmp	r1, #15
 8016506:	dde3      	ble.n	80164d0 <_malloc_trim_r+0x34>
 8016508:	4b0c      	ldr	r3, [pc, #48]	; (801653c <_malloc_trim_r+0xa0>)
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	1ac0      	subs	r0, r0, r3
 801650e:	4b0c      	ldr	r3, [pc, #48]	; (8016540 <_malloc_trim_r+0xa4>)
 8016510:	6018      	str	r0, [r3, #0]
 8016512:	2301      	movs	r3, #1
 8016514:	430b      	orrs	r3, r1
 8016516:	6053      	str	r3, [r2, #4]
 8016518:	e7da      	b.n	80164d0 <_malloc_trim_r+0x34>
 801651a:	68b2      	ldr	r2, [r6, #8]
 801651c:	2601      	movs	r6, #1
 801651e:	9b01      	ldr	r3, [sp, #4]
 8016520:	0028      	movs	r0, r5
 8016522:	1b1b      	subs	r3, r3, r4
 8016524:	4333      	orrs	r3, r6
 8016526:	6053      	str	r3, [r2, #4]
 8016528:	4b05      	ldr	r3, [pc, #20]	; (8016540 <_malloc_trim_r+0xa4>)
 801652a:	681a      	ldr	r2, [r3, #0]
 801652c:	1b14      	subs	r4, r2, r4
 801652e:	601c      	str	r4, [r3, #0]
 8016530:	f7fc fd4e 	bl	8012fd0 <__malloc_unlock>
 8016534:	0030      	movs	r0, r6
 8016536:	e7cf      	b.n	80164d8 <_malloc_trim_r+0x3c>
 8016538:	20000644 	.word	0x20000644
 801653c:	20000a4c 	.word	0x20000a4c
 8016540:	20006910 	.word	0x20006910

08016544 <_free_r>:
 8016544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016546:	1e0d      	subs	r5, r1, #0
 8016548:	9001      	str	r0, [sp, #4]
 801654a:	d02d      	beq.n	80165a8 <_free_r+0x64>
 801654c:	f7fc fd38 	bl	8012fc0 <__malloc_lock>
 8016550:	2301      	movs	r3, #1
 8016552:	0029      	movs	r1, r5
 8016554:	469c      	mov	ip, r3
 8016556:	3908      	subs	r1, #8
 8016558:	684f      	ldr	r7, [r1, #4]
 801655a:	4662      	mov	r2, ip
 801655c:	003b      	movs	r3, r7
 801655e:	4666      	mov	r6, ip
 8016560:	4393      	bics	r3, r2
 8016562:	18c8      	adds	r0, r1, r3
 8016564:	6845      	ldr	r5, [r0, #4]
 8016566:	3202      	adds	r2, #2
 8016568:	4395      	bics	r5, r2
 801656a:	4a4a      	ldr	r2, [pc, #296]	; (8016694 <_free_r+0x150>)
 801656c:	4037      	ands	r7, r6
 801656e:	6896      	ldr	r6, [r2, #8]
 8016570:	4286      	cmp	r6, r0
 8016572:	d11a      	bne.n	80165aa <_free_r+0x66>
 8016574:	195b      	adds	r3, r3, r5
 8016576:	2f00      	cmp	r7, #0
 8016578:	d106      	bne.n	8016588 <_free_r+0x44>
 801657a:	6808      	ldr	r0, [r1, #0]
 801657c:	1a09      	subs	r1, r1, r0
 801657e:	688d      	ldr	r5, [r1, #8]
 8016580:	181b      	adds	r3, r3, r0
 8016582:	68c8      	ldr	r0, [r1, #12]
 8016584:	60e8      	str	r0, [r5, #12]
 8016586:	6085      	str	r5, [r0, #8]
 8016588:	2001      	movs	r0, #1
 801658a:	4318      	orrs	r0, r3
 801658c:	6048      	str	r0, [r1, #4]
 801658e:	6091      	str	r1, [r2, #8]
 8016590:	4a41      	ldr	r2, [pc, #260]	; (8016698 <_free_r+0x154>)
 8016592:	6812      	ldr	r2, [r2, #0]
 8016594:	429a      	cmp	r2, r3
 8016596:	d804      	bhi.n	80165a2 <_free_r+0x5e>
 8016598:	4b40      	ldr	r3, [pc, #256]	; (801669c <_free_r+0x158>)
 801659a:	9801      	ldr	r0, [sp, #4]
 801659c:	6819      	ldr	r1, [r3, #0]
 801659e:	f7ff ff7d 	bl	801649c <_malloc_trim_r>
 80165a2:	9801      	ldr	r0, [sp, #4]
 80165a4:	f7fc fd14 	bl	8012fd0 <__malloc_unlock>
 80165a8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80165aa:	2600      	movs	r6, #0
 80165ac:	6045      	str	r5, [r0, #4]
 80165ae:	42b7      	cmp	r7, r6
 80165b0:	d109      	bne.n	80165c6 <_free_r+0x82>
 80165b2:	680f      	ldr	r7, [r1, #0]
 80165b4:	4c3a      	ldr	r4, [pc, #232]	; (80166a0 <_free_r+0x15c>)
 80165b6:	1bc9      	subs	r1, r1, r7
 80165b8:	19db      	adds	r3, r3, r7
 80165ba:	688f      	ldr	r7, [r1, #8]
 80165bc:	42a7      	cmp	r7, r4
 80165be:	d02b      	beq.n	8016618 <_free_r+0xd4>
 80165c0:	68cc      	ldr	r4, [r1, #12]
 80165c2:	60fc      	str	r4, [r7, #12]
 80165c4:	60a7      	str	r7, [r4, #8]
 80165c6:	1947      	adds	r7, r0, r5
 80165c8:	687c      	ldr	r4, [r7, #4]
 80165ca:	2701      	movs	r7, #1
 80165cc:	423c      	tst	r4, r7
 80165ce:	d10b      	bne.n	80165e8 <_free_r+0xa4>
 80165d0:	195b      	adds	r3, r3, r5
 80165d2:	6885      	ldr	r5, [r0, #8]
 80165d4:	2e00      	cmp	r6, #0
 80165d6:	d121      	bne.n	801661c <_free_r+0xd8>
 80165d8:	4c31      	ldr	r4, [pc, #196]	; (80166a0 <_free_r+0x15c>)
 80165da:	42a5      	cmp	r5, r4
 80165dc:	d11e      	bne.n	801661c <_free_r+0xd8>
 80165de:	003e      	movs	r6, r7
 80165e0:	6151      	str	r1, [r2, #20]
 80165e2:	6111      	str	r1, [r2, #16]
 80165e4:	60cd      	str	r5, [r1, #12]
 80165e6:	608d      	str	r5, [r1, #8]
 80165e8:	2001      	movs	r0, #1
 80165ea:	0005      	movs	r5, r0
 80165ec:	431d      	orrs	r5, r3
 80165ee:	604d      	str	r5, [r1, #4]
 80165f0:	50cb      	str	r3, [r1, r3]
 80165f2:	2e00      	cmp	r6, #0
 80165f4:	d1d5      	bne.n	80165a2 <_free_r+0x5e>
 80165f6:	4d2b      	ldr	r5, [pc, #172]	; (80166a4 <_free_r+0x160>)
 80165f8:	42ab      	cmp	r3, r5
 80165fa:	d813      	bhi.n	8016624 <_free_r+0xe0>
 80165fc:	08db      	lsrs	r3, r3, #3
 80165fe:	109d      	asrs	r5, r3, #2
 8016600:	40a8      	lsls	r0, r5
 8016602:	6854      	ldr	r4, [r2, #4]
 8016604:	00db      	lsls	r3, r3, #3
 8016606:	4320      	orrs	r0, r4
 8016608:	6050      	str	r0, [r2, #4]
 801660a:	189a      	adds	r2, r3, r2
 801660c:	6893      	ldr	r3, [r2, #8]
 801660e:	60ca      	str	r2, [r1, #12]
 8016610:	608b      	str	r3, [r1, #8]
 8016612:	6091      	str	r1, [r2, #8]
 8016614:	60d9      	str	r1, [r3, #12]
 8016616:	e7c4      	b.n	80165a2 <_free_r+0x5e>
 8016618:	4666      	mov	r6, ip
 801661a:	e7d4      	b.n	80165c6 <_free_r+0x82>
 801661c:	68c0      	ldr	r0, [r0, #12]
 801661e:	60e8      	str	r0, [r5, #12]
 8016620:	6085      	str	r5, [r0, #8]
 8016622:	e7e1      	b.n	80165e8 <_free_r+0xa4>
 8016624:	0a5d      	lsrs	r5, r3, #9
 8016626:	2d04      	cmp	r5, #4
 8016628:	d812      	bhi.n	8016650 <_free_r+0x10c>
 801662a:	0998      	lsrs	r0, r3, #6
 801662c:	3038      	adds	r0, #56	; 0x38
 801662e:	00c6      	lsls	r6, r0, #3
 8016630:	18b6      	adds	r6, r6, r2
 8016632:	68b5      	ldr	r5, [r6, #8]
 8016634:	2703      	movs	r7, #3
 8016636:	42ae      	cmp	r6, r5
 8016638:	d125      	bne.n	8016686 <_free_r+0x142>
 801663a:	2301      	movs	r3, #1
 801663c:	1080      	asrs	r0, r0, #2
 801663e:	4083      	lsls	r3, r0
 8016640:	6850      	ldr	r0, [r2, #4]
 8016642:	4303      	orrs	r3, r0
 8016644:	6053      	str	r3, [r2, #4]
 8016646:	60ce      	str	r6, [r1, #12]
 8016648:	608d      	str	r5, [r1, #8]
 801664a:	60b1      	str	r1, [r6, #8]
 801664c:	60e9      	str	r1, [r5, #12]
 801664e:	e7a8      	b.n	80165a2 <_free_r+0x5e>
 8016650:	2d14      	cmp	r5, #20
 8016652:	d802      	bhi.n	801665a <_free_r+0x116>
 8016654:	0028      	movs	r0, r5
 8016656:	305b      	adds	r0, #91	; 0x5b
 8016658:	e7e9      	b.n	801662e <_free_r+0xea>
 801665a:	2d54      	cmp	r5, #84	; 0x54
 801665c:	d802      	bhi.n	8016664 <_free_r+0x120>
 801665e:	0b18      	lsrs	r0, r3, #12
 8016660:	306e      	adds	r0, #110	; 0x6e
 8016662:	e7e4      	b.n	801662e <_free_r+0xea>
 8016664:	20aa      	movs	r0, #170	; 0xaa
 8016666:	0040      	lsls	r0, r0, #1
 8016668:	4285      	cmp	r5, r0
 801666a:	d802      	bhi.n	8016672 <_free_r+0x12e>
 801666c:	0bd8      	lsrs	r0, r3, #15
 801666e:	3077      	adds	r0, #119	; 0x77
 8016670:	e7dd      	b.n	801662e <_free_r+0xea>
 8016672:	4e0d      	ldr	r6, [pc, #52]	; (80166a8 <_free_r+0x164>)
 8016674:	207e      	movs	r0, #126	; 0x7e
 8016676:	42b5      	cmp	r5, r6
 8016678:	d8d9      	bhi.n	801662e <_free_r+0xea>
 801667a:	0c98      	lsrs	r0, r3, #18
 801667c:	307c      	adds	r0, #124	; 0x7c
 801667e:	e7d6      	b.n	801662e <_free_r+0xea>
 8016680:	68ad      	ldr	r5, [r5, #8]
 8016682:	42ae      	cmp	r6, r5
 8016684:	d003      	beq.n	801668e <_free_r+0x14a>
 8016686:	686a      	ldr	r2, [r5, #4]
 8016688:	43ba      	bics	r2, r7
 801668a:	429a      	cmp	r2, r3
 801668c:	d8f8      	bhi.n	8016680 <_free_r+0x13c>
 801668e:	68ee      	ldr	r6, [r5, #12]
 8016690:	e7d9      	b.n	8016646 <_free_r+0x102>
 8016692:	46c0      	nop			; (mov r8, r8)
 8016694:	20000644 	.word	0x20000644
 8016698:	20000a50 	.word	0x20000a50
 801669c:	20006940 	.word	0x20006940
 80166a0:	2000064c 	.word	0x2000064c
 80166a4:	000001ff 	.word	0x000001ff
 80166a8:	00000554 	.word	0x00000554

080166ac <rshift>:
 80166ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166ae:	0004      	movs	r4, r0
 80166b0:	6905      	ldr	r5, [r0, #16]
 80166b2:	3414      	adds	r4, #20
 80166b4:	114b      	asrs	r3, r1, #5
 80166b6:	0026      	movs	r6, r4
 80166b8:	429d      	cmp	r5, r3
 80166ba:	dd14      	ble.n	80166e6 <rshift+0x3a>
 80166bc:	221f      	movs	r2, #31
 80166be:	00ad      	lsls	r5, r5, #2
 80166c0:	009b      	lsls	r3, r3, #2
 80166c2:	4011      	ands	r1, r2
 80166c4:	1965      	adds	r5, r4, r5
 80166c6:	18e3      	adds	r3, r4, r3
 80166c8:	0022      	movs	r2, r4
 80166ca:	2900      	cmp	r1, #0
 80166cc:	d01e      	beq.n	801670c <rshift+0x60>
 80166ce:	cb04      	ldmia	r3!, {r2}
 80166d0:	2720      	movs	r7, #32
 80166d2:	40ca      	lsrs	r2, r1
 80166d4:	46a4      	mov	ip, r4
 80166d6:	1a7f      	subs	r7, r7, r1
 80166d8:	4666      	mov	r6, ip
 80166da:	429d      	cmp	r5, r3
 80166dc:	d80b      	bhi.n	80166f6 <rshift+0x4a>
 80166de:	6032      	str	r2, [r6, #0]
 80166e0:	2a00      	cmp	r2, #0
 80166e2:	d000      	beq.n	80166e6 <rshift+0x3a>
 80166e4:	3604      	adds	r6, #4
 80166e6:	1b33      	subs	r3, r6, r4
 80166e8:	109b      	asrs	r3, r3, #2
 80166ea:	6103      	str	r3, [r0, #16]
 80166ec:	42a6      	cmp	r6, r4
 80166ee:	d101      	bne.n	80166f4 <rshift+0x48>
 80166f0:	2300      	movs	r3, #0
 80166f2:	6143      	str	r3, [r0, #20]
 80166f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166f6:	681e      	ldr	r6, [r3, #0]
 80166f8:	40be      	lsls	r6, r7
 80166fa:	4332      	orrs	r2, r6
 80166fc:	4666      	mov	r6, ip
 80166fe:	c604      	stmia	r6!, {r2}
 8016700:	cb04      	ldmia	r3!, {r2}
 8016702:	46b4      	mov	ip, r6
 8016704:	40ca      	lsrs	r2, r1
 8016706:	e7e7      	b.n	80166d8 <rshift+0x2c>
 8016708:	cb02      	ldmia	r3!, {r1}
 801670a:	c202      	stmia	r2!, {r1}
 801670c:	0016      	movs	r6, r2
 801670e:	429d      	cmp	r5, r3
 8016710:	d8fa      	bhi.n	8016708 <rshift+0x5c>
 8016712:	e7e8      	b.n	80166e6 <rshift+0x3a>

08016714 <__hexdig_fun>:
 8016714:	0003      	movs	r3, r0
 8016716:	3b30      	subs	r3, #48	; 0x30
 8016718:	2b09      	cmp	r3, #9
 801671a:	d803      	bhi.n	8016724 <__hexdig_fun+0x10>
 801671c:	3820      	subs	r0, #32
 801671e:	b2c3      	uxtb	r3, r0
 8016720:	0018      	movs	r0, r3
 8016722:	4770      	bx	lr
 8016724:	0003      	movs	r3, r0
 8016726:	3b61      	subs	r3, #97	; 0x61
 8016728:	2b05      	cmp	r3, #5
 801672a:	d801      	bhi.n	8016730 <__hexdig_fun+0x1c>
 801672c:	3847      	subs	r0, #71	; 0x47
 801672e:	e7f6      	b.n	801671e <__hexdig_fun+0xa>
 8016730:	0002      	movs	r2, r0
 8016732:	3a41      	subs	r2, #65	; 0x41
 8016734:	2300      	movs	r3, #0
 8016736:	2a05      	cmp	r2, #5
 8016738:	d8f2      	bhi.n	8016720 <__hexdig_fun+0xc>
 801673a:	3827      	subs	r0, #39	; 0x27
 801673c:	e7ef      	b.n	801671e <__hexdig_fun+0xa>

0801673e <__gethex>:
 801673e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016740:	b08d      	sub	sp, #52	; 0x34
 8016742:	9005      	str	r0, [sp, #20]
 8016744:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016746:	9109      	str	r1, [sp, #36]	; 0x24
 8016748:	9202      	str	r2, [sp, #8]
 801674a:	930a      	str	r3, [sp, #40]	; 0x28
 801674c:	f000 fadf 	bl	8016d0e <__localeconv_l>
 8016750:	6803      	ldr	r3, [r0, #0]
 8016752:	0018      	movs	r0, r3
 8016754:	9307      	str	r3, [sp, #28]
 8016756:	f7e9 fcdf 	bl	8000118 <strlen>
 801675a:	2202      	movs	r2, #2
 801675c:	9b07      	ldr	r3, [sp, #28]
 801675e:	4252      	negs	r2, r2
 8016760:	181b      	adds	r3, r3, r0
 8016762:	3b01      	subs	r3, #1
 8016764:	781b      	ldrb	r3, [r3, #0]
 8016766:	9004      	str	r0, [sp, #16]
 8016768:	930b      	str	r3, [sp, #44]	; 0x2c
 801676a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801676c:	6819      	ldr	r1, [r3, #0]
 801676e:	1c8b      	adds	r3, r1, #2
 8016770:	1a52      	subs	r2, r2, r1
 8016772:	18d1      	adds	r1, r2, r3
 8016774:	9301      	str	r3, [sp, #4]
 8016776:	9108      	str	r1, [sp, #32]
 8016778:	9901      	ldr	r1, [sp, #4]
 801677a:	3301      	adds	r3, #1
 801677c:	7808      	ldrb	r0, [r1, #0]
 801677e:	2830      	cmp	r0, #48	; 0x30
 8016780:	d0f7      	beq.n	8016772 <__gethex+0x34>
 8016782:	f7ff ffc7 	bl	8016714 <__hexdig_fun>
 8016786:	1e07      	subs	r7, r0, #0
 8016788:	d000      	beq.n	801678c <__gethex+0x4e>
 801678a:	e06f      	b.n	801686c <__gethex+0x12e>
 801678c:	9a04      	ldr	r2, [sp, #16]
 801678e:	9907      	ldr	r1, [sp, #28]
 8016790:	9801      	ldr	r0, [sp, #4]
 8016792:	f7fc fe4b 	bl	801342c <strncmp>
 8016796:	2800      	cmp	r0, #0
 8016798:	d000      	beq.n	801679c <__gethex+0x5e>
 801679a:	e06d      	b.n	8016878 <__gethex+0x13a>
 801679c:	9b01      	ldr	r3, [sp, #4]
 801679e:	9a04      	ldr	r2, [sp, #16]
 80167a0:	189c      	adds	r4, r3, r2
 80167a2:	7820      	ldrb	r0, [r4, #0]
 80167a4:	f7ff ffb6 	bl	8016714 <__hexdig_fun>
 80167a8:	2800      	cmp	r0, #0
 80167aa:	d069      	beq.n	8016880 <__gethex+0x142>
 80167ac:	9401      	str	r4, [sp, #4]
 80167ae:	9b01      	ldr	r3, [sp, #4]
 80167b0:	7818      	ldrb	r0, [r3, #0]
 80167b2:	2830      	cmp	r0, #48	; 0x30
 80167b4:	d009      	beq.n	80167ca <__gethex+0x8c>
 80167b6:	f7ff ffad 	bl	8016714 <__hexdig_fun>
 80167ba:	4243      	negs	r3, r0
 80167bc:	4143      	adcs	r3, r0
 80167be:	9303      	str	r3, [sp, #12]
 80167c0:	2301      	movs	r3, #1
 80167c2:	0026      	movs	r6, r4
 80167c4:	9308      	str	r3, [sp, #32]
 80167c6:	9c01      	ldr	r4, [sp, #4]
 80167c8:	e004      	b.n	80167d4 <__gethex+0x96>
 80167ca:	9b01      	ldr	r3, [sp, #4]
 80167cc:	3301      	adds	r3, #1
 80167ce:	9301      	str	r3, [sp, #4]
 80167d0:	e7ed      	b.n	80167ae <__gethex+0x70>
 80167d2:	3401      	adds	r4, #1
 80167d4:	7820      	ldrb	r0, [r4, #0]
 80167d6:	f7ff ff9d 	bl	8016714 <__hexdig_fun>
 80167da:	2800      	cmp	r0, #0
 80167dc:	d1f9      	bne.n	80167d2 <__gethex+0x94>
 80167de:	9a04      	ldr	r2, [sp, #16]
 80167e0:	9907      	ldr	r1, [sp, #28]
 80167e2:	0020      	movs	r0, r4
 80167e4:	f7fc fe22 	bl	801342c <strncmp>
 80167e8:	2800      	cmp	r0, #0
 80167ea:	d109      	bne.n	8016800 <__gethex+0xc2>
 80167ec:	2e00      	cmp	r6, #0
 80167ee:	d10a      	bne.n	8016806 <__gethex+0xc8>
 80167f0:	9b04      	ldr	r3, [sp, #16]
 80167f2:	18e4      	adds	r4, r4, r3
 80167f4:	0026      	movs	r6, r4
 80167f6:	7820      	ldrb	r0, [r4, #0]
 80167f8:	f7ff ff8c 	bl	8016714 <__hexdig_fun>
 80167fc:	2800      	cmp	r0, #0
 80167fe:	d139      	bne.n	8016874 <__gethex+0x136>
 8016800:	2700      	movs	r7, #0
 8016802:	42be      	cmp	r6, r7
 8016804:	d001      	beq.n	801680a <__gethex+0xcc>
 8016806:	1b37      	subs	r7, r6, r4
 8016808:	00bf      	lsls	r7, r7, #2
 801680a:	7823      	ldrb	r3, [r4, #0]
 801680c:	2b50      	cmp	r3, #80	; 0x50
 801680e:	d001      	beq.n	8016814 <__gethex+0xd6>
 8016810:	2b70      	cmp	r3, #112	; 0x70
 8016812:	d142      	bne.n	801689a <__gethex+0x15c>
 8016814:	7863      	ldrb	r3, [r4, #1]
 8016816:	2b2b      	cmp	r3, #43	; 0x2b
 8016818:	d034      	beq.n	8016884 <__gethex+0x146>
 801681a:	2b2d      	cmp	r3, #45	; 0x2d
 801681c:	d036      	beq.n	801688c <__gethex+0x14e>
 801681e:	2300      	movs	r3, #0
 8016820:	1c66      	adds	r6, r4, #1
 8016822:	9306      	str	r3, [sp, #24]
 8016824:	7830      	ldrb	r0, [r6, #0]
 8016826:	f7ff ff75 	bl	8016714 <__hexdig_fun>
 801682a:	1e43      	subs	r3, r0, #1
 801682c:	b2db      	uxtb	r3, r3
 801682e:	2b18      	cmp	r3, #24
 8016830:	d833      	bhi.n	801689a <__gethex+0x15c>
 8016832:	3810      	subs	r0, #16
 8016834:	0005      	movs	r5, r0
 8016836:	3601      	adds	r6, #1
 8016838:	7830      	ldrb	r0, [r6, #0]
 801683a:	f7ff ff6b 	bl	8016714 <__hexdig_fun>
 801683e:	1e43      	subs	r3, r0, #1
 8016840:	b2db      	uxtb	r3, r3
 8016842:	2b18      	cmp	r3, #24
 8016844:	d924      	bls.n	8016890 <__gethex+0x152>
 8016846:	9b06      	ldr	r3, [sp, #24]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d000      	beq.n	801684e <__gethex+0x110>
 801684c:	426d      	negs	r5, r5
 801684e:	197f      	adds	r7, r7, r5
 8016850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016852:	601e      	str	r6, [r3, #0]
 8016854:	9b03      	ldr	r3, [sp, #12]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d021      	beq.n	801689e <__gethex+0x160>
 801685a:	9b08      	ldr	r3, [sp, #32]
 801685c:	2606      	movs	r6, #6
 801685e:	425a      	negs	r2, r3
 8016860:	4153      	adcs	r3, r2
 8016862:	425b      	negs	r3, r3
 8016864:	401e      	ands	r6, r3
 8016866:	0030      	movs	r0, r6
 8016868:	b00d      	add	sp, #52	; 0x34
 801686a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801686c:	2300      	movs	r3, #0
 801686e:	9303      	str	r3, [sp, #12]
 8016870:	001e      	movs	r6, r3
 8016872:	e7a8      	b.n	80167c6 <__gethex+0x88>
 8016874:	3401      	adds	r4, #1
 8016876:	e7be      	b.n	80167f6 <__gethex+0xb8>
 8016878:	9c01      	ldr	r4, [sp, #4]
 801687a:	2301      	movs	r3, #1
 801687c:	9303      	str	r3, [sp, #12]
 801687e:	e7c4      	b.n	801680a <__gethex+0xcc>
 8016880:	0007      	movs	r7, r0
 8016882:	e7fa      	b.n	801687a <__gethex+0x13c>
 8016884:	2300      	movs	r3, #0
 8016886:	9306      	str	r3, [sp, #24]
 8016888:	1ca6      	adds	r6, r4, #2
 801688a:	e7cb      	b.n	8016824 <__gethex+0xe6>
 801688c:	2301      	movs	r3, #1
 801688e:	e7fa      	b.n	8016886 <__gethex+0x148>
 8016890:	230a      	movs	r3, #10
 8016892:	435d      	muls	r5, r3
 8016894:	182d      	adds	r5, r5, r0
 8016896:	3d10      	subs	r5, #16
 8016898:	e7cd      	b.n	8016836 <__gethex+0xf8>
 801689a:	0026      	movs	r6, r4
 801689c:	e7d8      	b.n	8016850 <__gethex+0x112>
 801689e:	9b01      	ldr	r3, [sp, #4]
 80168a0:	9903      	ldr	r1, [sp, #12]
 80168a2:	1ae3      	subs	r3, r4, r3
 80168a4:	3b01      	subs	r3, #1
 80168a6:	2b07      	cmp	r3, #7
 80168a8:	dc47      	bgt.n	801693a <__gethex+0x1fc>
 80168aa:	9805      	ldr	r0, [sp, #20]
 80168ac:	f000 fa5e 	bl	8016d6c <_Balloc>
 80168b0:	0003      	movs	r3, r0
 80168b2:	3314      	adds	r3, #20
 80168b4:	9303      	str	r3, [sp, #12]
 80168b6:	9308      	str	r3, [sp, #32]
 80168b8:	2300      	movs	r3, #0
 80168ba:	0005      	movs	r5, r0
 80168bc:	001e      	movs	r6, r3
 80168be:	9306      	str	r3, [sp, #24]
 80168c0:	9b01      	ldr	r3, [sp, #4]
 80168c2:	42a3      	cmp	r3, r4
 80168c4:	d33c      	bcc.n	8016940 <__gethex+0x202>
 80168c6:	9c08      	ldr	r4, [sp, #32]
 80168c8:	9b03      	ldr	r3, [sp, #12]
 80168ca:	c440      	stmia	r4!, {r6}
 80168cc:	1ae4      	subs	r4, r4, r3
 80168ce:	10a4      	asrs	r4, r4, #2
 80168d0:	612c      	str	r4, [r5, #16]
 80168d2:	0030      	movs	r0, r6
 80168d4:	f000 faf8 	bl	8016ec8 <__hi0bits>
 80168d8:	9b02      	ldr	r3, [sp, #8]
 80168da:	0164      	lsls	r4, r4, #5
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	1a26      	subs	r6, r4, r0
 80168e0:	9301      	str	r3, [sp, #4]
 80168e2:	429e      	cmp	r6, r3
 80168e4:	dd5f      	ble.n	80169a6 <__gethex+0x268>
 80168e6:	1af6      	subs	r6, r6, r3
 80168e8:	0031      	movs	r1, r6
 80168ea:	0028      	movs	r0, r5
 80168ec:	f000 fde3 	bl	80174b6 <__any_on>
 80168f0:	1e04      	subs	r4, r0, #0
 80168f2:	d00f      	beq.n	8016914 <__gethex+0x1d6>
 80168f4:	2401      	movs	r4, #1
 80168f6:	211f      	movs	r1, #31
 80168f8:	0020      	movs	r0, r4
 80168fa:	1e73      	subs	r3, r6, #1
 80168fc:	4019      	ands	r1, r3
 80168fe:	4088      	lsls	r0, r1
 8016900:	0001      	movs	r1, r0
 8016902:	115a      	asrs	r2, r3, #5
 8016904:	9803      	ldr	r0, [sp, #12]
 8016906:	0092      	lsls	r2, r2, #2
 8016908:	5812      	ldr	r2, [r2, r0]
 801690a:	420a      	tst	r2, r1
 801690c:	d002      	beq.n	8016914 <__gethex+0x1d6>
 801690e:	42a3      	cmp	r3, r4
 8016910:	dc41      	bgt.n	8016996 <__gethex+0x258>
 8016912:	2402      	movs	r4, #2
 8016914:	0031      	movs	r1, r6
 8016916:	0028      	movs	r0, r5
 8016918:	f7ff fec8 	bl	80166ac <rshift>
 801691c:	19bf      	adds	r7, r7, r6
 801691e:	9b02      	ldr	r3, [sp, #8]
 8016920:	689b      	ldr	r3, [r3, #8]
 8016922:	9304      	str	r3, [sp, #16]
 8016924:	42bb      	cmp	r3, r7
 8016926:	da4e      	bge.n	80169c6 <__gethex+0x288>
 8016928:	0029      	movs	r1, r5
 801692a:	9805      	ldr	r0, [sp, #20]
 801692c:	f000 fa46 	bl	8016dbc <_Bfree>
 8016930:	2300      	movs	r3, #0
 8016932:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016934:	26a3      	movs	r6, #163	; 0xa3
 8016936:	6013      	str	r3, [r2, #0]
 8016938:	e795      	b.n	8016866 <__gethex+0x128>
 801693a:	3101      	adds	r1, #1
 801693c:	105b      	asrs	r3, r3, #1
 801693e:	e7b2      	b.n	80168a6 <__gethex+0x168>
 8016940:	1e63      	subs	r3, r4, #1
 8016942:	9309      	str	r3, [sp, #36]	; 0x24
 8016944:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016946:	781b      	ldrb	r3, [r3, #0]
 8016948:	4293      	cmp	r3, r2
 801694a:	d015      	beq.n	8016978 <__gethex+0x23a>
 801694c:	9b06      	ldr	r3, [sp, #24]
 801694e:	2b20      	cmp	r3, #32
 8016950:	d105      	bne.n	801695e <__gethex+0x220>
 8016952:	9b08      	ldr	r3, [sp, #32]
 8016954:	601e      	str	r6, [r3, #0]
 8016956:	2600      	movs	r6, #0
 8016958:	3304      	adds	r3, #4
 801695a:	9308      	str	r3, [sp, #32]
 801695c:	9606      	str	r6, [sp, #24]
 801695e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016960:	7818      	ldrb	r0, [r3, #0]
 8016962:	f7ff fed7 	bl	8016714 <__hexdig_fun>
 8016966:	230f      	movs	r3, #15
 8016968:	4018      	ands	r0, r3
 801696a:	9b06      	ldr	r3, [sp, #24]
 801696c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801696e:	4098      	lsls	r0, r3
 8016970:	3304      	adds	r3, #4
 8016972:	4306      	orrs	r6, r0
 8016974:	9306      	str	r3, [sp, #24]
 8016976:	e7a3      	b.n	80168c0 <__gethex+0x182>
 8016978:	2301      	movs	r3, #1
 801697a:	9a04      	ldr	r2, [sp, #16]
 801697c:	1a9c      	subs	r4, r3, r2
 801697e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016980:	191c      	adds	r4, r3, r4
 8016982:	9b01      	ldr	r3, [sp, #4]
 8016984:	429c      	cmp	r4, r3
 8016986:	d3e1      	bcc.n	801694c <__gethex+0x20e>
 8016988:	9907      	ldr	r1, [sp, #28]
 801698a:	0020      	movs	r0, r4
 801698c:	f7fc fd4e 	bl	801342c <strncmp>
 8016990:	2800      	cmp	r0, #0
 8016992:	d1db      	bne.n	801694c <__gethex+0x20e>
 8016994:	e794      	b.n	80168c0 <__gethex+0x182>
 8016996:	1eb1      	subs	r1, r6, #2
 8016998:	0028      	movs	r0, r5
 801699a:	f000 fd8c 	bl	80174b6 <__any_on>
 801699e:	2800      	cmp	r0, #0
 80169a0:	d0b7      	beq.n	8016912 <__gethex+0x1d4>
 80169a2:	2403      	movs	r4, #3
 80169a4:	e7b6      	b.n	8016914 <__gethex+0x1d6>
 80169a6:	9b01      	ldr	r3, [sp, #4]
 80169a8:	2400      	movs	r4, #0
 80169aa:	429e      	cmp	r6, r3
 80169ac:	dab7      	bge.n	801691e <__gethex+0x1e0>
 80169ae:	1b9e      	subs	r6, r3, r6
 80169b0:	0029      	movs	r1, r5
 80169b2:	0032      	movs	r2, r6
 80169b4:	9805      	ldr	r0, [sp, #20]
 80169b6:	f000 fbab 	bl	8017110 <__lshift>
 80169ba:	0003      	movs	r3, r0
 80169bc:	3314      	adds	r3, #20
 80169be:	0005      	movs	r5, r0
 80169c0:	1bbf      	subs	r7, r7, r6
 80169c2:	9303      	str	r3, [sp, #12]
 80169c4:	e7ab      	b.n	801691e <__gethex+0x1e0>
 80169c6:	9b02      	ldr	r3, [sp, #8]
 80169c8:	685e      	ldr	r6, [r3, #4]
 80169ca:	42be      	cmp	r6, r7
 80169cc:	dd6b      	ble.n	8016aa6 <__gethex+0x368>
 80169ce:	9b01      	ldr	r3, [sp, #4]
 80169d0:	1bf6      	subs	r6, r6, r7
 80169d2:	42b3      	cmp	r3, r6
 80169d4:	dc32      	bgt.n	8016a3c <__gethex+0x2fe>
 80169d6:	9b02      	ldr	r3, [sp, #8]
 80169d8:	68db      	ldr	r3, [r3, #12]
 80169da:	2b02      	cmp	r3, #2
 80169dc:	d026      	beq.n	8016a2c <__gethex+0x2ee>
 80169de:	2b03      	cmp	r3, #3
 80169e0:	d028      	beq.n	8016a34 <__gethex+0x2f6>
 80169e2:	2b01      	cmp	r3, #1
 80169e4:	d119      	bne.n	8016a1a <__gethex+0x2dc>
 80169e6:	9b01      	ldr	r3, [sp, #4]
 80169e8:	42b3      	cmp	r3, r6
 80169ea:	d116      	bne.n	8016a1a <__gethex+0x2dc>
 80169ec:	2b01      	cmp	r3, #1
 80169ee:	dc0d      	bgt.n	8016a0c <__gethex+0x2ce>
 80169f0:	9b02      	ldr	r3, [sp, #8]
 80169f2:	2662      	movs	r6, #98	; 0x62
 80169f4:	685b      	ldr	r3, [r3, #4]
 80169f6:	9301      	str	r3, [sp, #4]
 80169f8:	9a01      	ldr	r2, [sp, #4]
 80169fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169fc:	601a      	str	r2, [r3, #0]
 80169fe:	2301      	movs	r3, #1
 8016a00:	9a03      	ldr	r2, [sp, #12]
 8016a02:	612b      	str	r3, [r5, #16]
 8016a04:	6013      	str	r3, [r2, #0]
 8016a06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016a08:	601d      	str	r5, [r3, #0]
 8016a0a:	e72c      	b.n	8016866 <__gethex+0x128>
 8016a0c:	9901      	ldr	r1, [sp, #4]
 8016a0e:	0028      	movs	r0, r5
 8016a10:	3901      	subs	r1, #1
 8016a12:	f000 fd50 	bl	80174b6 <__any_on>
 8016a16:	2800      	cmp	r0, #0
 8016a18:	d1ea      	bne.n	80169f0 <__gethex+0x2b2>
 8016a1a:	0029      	movs	r1, r5
 8016a1c:	9805      	ldr	r0, [sp, #20]
 8016a1e:	f000 f9cd 	bl	8016dbc <_Bfree>
 8016a22:	2300      	movs	r3, #0
 8016a24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016a26:	2650      	movs	r6, #80	; 0x50
 8016a28:	6013      	str	r3, [r2, #0]
 8016a2a:	e71c      	b.n	8016866 <__gethex+0x128>
 8016a2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d0de      	beq.n	80169f0 <__gethex+0x2b2>
 8016a32:	e7f2      	b.n	8016a1a <__gethex+0x2dc>
 8016a34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d1da      	bne.n	80169f0 <__gethex+0x2b2>
 8016a3a:	e7ee      	b.n	8016a1a <__gethex+0x2dc>
 8016a3c:	1e77      	subs	r7, r6, #1
 8016a3e:	2c00      	cmp	r4, #0
 8016a40:	d12f      	bne.n	8016aa2 <__gethex+0x364>
 8016a42:	2f00      	cmp	r7, #0
 8016a44:	d004      	beq.n	8016a50 <__gethex+0x312>
 8016a46:	0039      	movs	r1, r7
 8016a48:	0028      	movs	r0, r5
 8016a4a:	f000 fd34 	bl	80174b6 <__any_on>
 8016a4e:	0004      	movs	r4, r0
 8016a50:	231f      	movs	r3, #31
 8016a52:	117a      	asrs	r2, r7, #5
 8016a54:	401f      	ands	r7, r3
 8016a56:	3b1e      	subs	r3, #30
 8016a58:	40bb      	lsls	r3, r7
 8016a5a:	9903      	ldr	r1, [sp, #12]
 8016a5c:	0092      	lsls	r2, r2, #2
 8016a5e:	5852      	ldr	r2, [r2, r1]
 8016a60:	421a      	tst	r2, r3
 8016a62:	d001      	beq.n	8016a68 <__gethex+0x32a>
 8016a64:	2302      	movs	r3, #2
 8016a66:	431c      	orrs	r4, r3
 8016a68:	9b01      	ldr	r3, [sp, #4]
 8016a6a:	0031      	movs	r1, r6
 8016a6c:	1b9b      	subs	r3, r3, r6
 8016a6e:	2602      	movs	r6, #2
 8016a70:	0028      	movs	r0, r5
 8016a72:	9301      	str	r3, [sp, #4]
 8016a74:	f7ff fe1a 	bl	80166ac <rshift>
 8016a78:	9b02      	ldr	r3, [sp, #8]
 8016a7a:	685f      	ldr	r7, [r3, #4]
 8016a7c:	2c00      	cmp	r4, #0
 8016a7e:	d040      	beq.n	8016b02 <__gethex+0x3c4>
 8016a80:	9b02      	ldr	r3, [sp, #8]
 8016a82:	68db      	ldr	r3, [r3, #12]
 8016a84:	2b02      	cmp	r3, #2
 8016a86:	d010      	beq.n	8016aaa <__gethex+0x36c>
 8016a88:	2b03      	cmp	r3, #3
 8016a8a:	d012      	beq.n	8016ab2 <__gethex+0x374>
 8016a8c:	2b01      	cmp	r3, #1
 8016a8e:	d106      	bne.n	8016a9e <__gethex+0x360>
 8016a90:	07a2      	lsls	r2, r4, #30
 8016a92:	d504      	bpl.n	8016a9e <__gethex+0x360>
 8016a94:	9a03      	ldr	r2, [sp, #12]
 8016a96:	6812      	ldr	r2, [r2, #0]
 8016a98:	4314      	orrs	r4, r2
 8016a9a:	421c      	tst	r4, r3
 8016a9c:	d10c      	bne.n	8016ab8 <__gethex+0x37a>
 8016a9e:	2310      	movs	r3, #16
 8016aa0:	e02e      	b.n	8016b00 <__gethex+0x3c2>
 8016aa2:	2401      	movs	r4, #1
 8016aa4:	e7d4      	b.n	8016a50 <__gethex+0x312>
 8016aa6:	2601      	movs	r6, #1
 8016aa8:	e7e8      	b.n	8016a7c <__gethex+0x33e>
 8016aaa:	2301      	movs	r3, #1
 8016aac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016aae:	1a9b      	subs	r3, r3, r2
 8016ab0:	9313      	str	r3, [sp, #76]	; 0x4c
 8016ab2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d0f2      	beq.n	8016a9e <__gethex+0x360>
 8016ab8:	692c      	ldr	r4, [r5, #16]
 8016aba:	00a3      	lsls	r3, r4, #2
 8016abc:	9304      	str	r3, [sp, #16]
 8016abe:	002b      	movs	r3, r5
 8016ac0:	00a2      	lsls	r2, r4, #2
 8016ac2:	3314      	adds	r3, #20
 8016ac4:	1899      	adds	r1, r3, r2
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	4694      	mov	ip, r2
 8016aca:	681a      	ldr	r2, [r3, #0]
 8016acc:	1c50      	adds	r0, r2, #1
 8016ace:	d01d      	beq.n	8016b0c <__gethex+0x3ce>
 8016ad0:	3201      	adds	r2, #1
 8016ad2:	601a      	str	r2, [r3, #0]
 8016ad4:	002b      	movs	r3, r5
 8016ad6:	3314      	adds	r3, #20
 8016ad8:	2e02      	cmp	r6, #2
 8016ada:	d13a      	bne.n	8016b52 <__gethex+0x414>
 8016adc:	9a02      	ldr	r2, [sp, #8]
 8016ade:	9901      	ldr	r1, [sp, #4]
 8016ae0:	6812      	ldr	r2, [r2, #0]
 8016ae2:	3a01      	subs	r2, #1
 8016ae4:	428a      	cmp	r2, r1
 8016ae6:	d10a      	bne.n	8016afe <__gethex+0x3c0>
 8016ae8:	114a      	asrs	r2, r1, #5
 8016aea:	211f      	movs	r1, #31
 8016aec:	9801      	ldr	r0, [sp, #4]
 8016aee:	0092      	lsls	r2, r2, #2
 8016af0:	4001      	ands	r1, r0
 8016af2:	2001      	movs	r0, #1
 8016af4:	0004      	movs	r4, r0
 8016af6:	408c      	lsls	r4, r1
 8016af8:	58d3      	ldr	r3, [r2, r3]
 8016afa:	4223      	tst	r3, r4
 8016afc:	d148      	bne.n	8016b90 <__gethex+0x452>
 8016afe:	2320      	movs	r3, #32
 8016b00:	431e      	orrs	r6, r3
 8016b02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016b04:	601d      	str	r5, [r3, #0]
 8016b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b08:	601f      	str	r7, [r3, #0]
 8016b0a:	e6ac      	b.n	8016866 <__gethex+0x128>
 8016b0c:	4662      	mov	r2, ip
 8016b0e:	c304      	stmia	r3!, {r2}
 8016b10:	4299      	cmp	r1, r3
 8016b12:	d8da      	bhi.n	8016aca <__gethex+0x38c>
 8016b14:	68ab      	ldr	r3, [r5, #8]
 8016b16:	429c      	cmp	r4, r3
 8016b18:	db12      	blt.n	8016b40 <__gethex+0x402>
 8016b1a:	686b      	ldr	r3, [r5, #4]
 8016b1c:	9805      	ldr	r0, [sp, #20]
 8016b1e:	1c59      	adds	r1, r3, #1
 8016b20:	f000 f924 	bl	8016d6c <_Balloc>
 8016b24:	0029      	movs	r1, r5
 8016b26:	692b      	ldr	r3, [r5, #16]
 8016b28:	9003      	str	r0, [sp, #12]
 8016b2a:	1c9a      	adds	r2, r3, #2
 8016b2c:	0092      	lsls	r2, r2, #2
 8016b2e:	310c      	adds	r1, #12
 8016b30:	300c      	adds	r0, #12
 8016b32:	f7fc fa34 	bl	8012f9e <memcpy>
 8016b36:	0029      	movs	r1, r5
 8016b38:	9805      	ldr	r0, [sp, #20]
 8016b3a:	f000 f93f 	bl	8016dbc <_Bfree>
 8016b3e:	9d03      	ldr	r5, [sp, #12]
 8016b40:	692b      	ldr	r3, [r5, #16]
 8016b42:	1c5a      	adds	r2, r3, #1
 8016b44:	612a      	str	r2, [r5, #16]
 8016b46:	2201      	movs	r2, #1
 8016b48:	3304      	adds	r3, #4
 8016b4a:	009b      	lsls	r3, r3, #2
 8016b4c:	18eb      	adds	r3, r5, r3
 8016b4e:	605a      	str	r2, [r3, #4]
 8016b50:	e7c0      	b.n	8016ad4 <__gethex+0x396>
 8016b52:	692a      	ldr	r2, [r5, #16]
 8016b54:	42a2      	cmp	r2, r4
 8016b56:	dd0a      	ble.n	8016b6e <__gethex+0x430>
 8016b58:	2101      	movs	r1, #1
 8016b5a:	0028      	movs	r0, r5
 8016b5c:	f7ff fda6 	bl	80166ac <rshift>
 8016b60:	9b02      	ldr	r3, [sp, #8]
 8016b62:	3701      	adds	r7, #1
 8016b64:	689b      	ldr	r3, [r3, #8]
 8016b66:	2601      	movs	r6, #1
 8016b68:	42bb      	cmp	r3, r7
 8016b6a:	dac8      	bge.n	8016afe <__gethex+0x3c0>
 8016b6c:	e6dc      	b.n	8016928 <__gethex+0x1ea>
 8016b6e:	241f      	movs	r4, #31
 8016b70:	9a01      	ldr	r2, [sp, #4]
 8016b72:	2601      	movs	r6, #1
 8016b74:	4022      	ands	r2, r4
 8016b76:	1e14      	subs	r4, r2, #0
 8016b78:	d0c1      	beq.n	8016afe <__gethex+0x3c0>
 8016b7a:	9a04      	ldr	r2, [sp, #16]
 8016b7c:	189b      	adds	r3, r3, r2
 8016b7e:	3b04      	subs	r3, #4
 8016b80:	6818      	ldr	r0, [r3, #0]
 8016b82:	f000 f9a1 	bl	8016ec8 <__hi0bits>
 8016b86:	2120      	movs	r1, #32
 8016b88:	1b0c      	subs	r4, r1, r4
 8016b8a:	42a0      	cmp	r0, r4
 8016b8c:	dbe4      	blt.n	8016b58 <__gethex+0x41a>
 8016b8e:	e7b6      	b.n	8016afe <__gethex+0x3c0>
 8016b90:	0006      	movs	r6, r0
 8016b92:	e7b4      	b.n	8016afe <__gethex+0x3c0>

08016b94 <L_shift>:
 8016b94:	2308      	movs	r3, #8
 8016b96:	b570      	push	{r4, r5, r6, lr}
 8016b98:	2520      	movs	r5, #32
 8016b9a:	1a9a      	subs	r2, r3, r2
 8016b9c:	0092      	lsls	r2, r2, #2
 8016b9e:	1aad      	subs	r5, r5, r2
 8016ba0:	6843      	ldr	r3, [r0, #4]
 8016ba2:	6806      	ldr	r6, [r0, #0]
 8016ba4:	001c      	movs	r4, r3
 8016ba6:	40ac      	lsls	r4, r5
 8016ba8:	40d3      	lsrs	r3, r2
 8016baa:	4334      	orrs	r4, r6
 8016bac:	6004      	str	r4, [r0, #0]
 8016bae:	6043      	str	r3, [r0, #4]
 8016bb0:	3004      	adds	r0, #4
 8016bb2:	4288      	cmp	r0, r1
 8016bb4:	d3f4      	bcc.n	8016ba0 <L_shift+0xc>
 8016bb6:	bd70      	pop	{r4, r5, r6, pc}

08016bb8 <__match>:
 8016bb8:	b530      	push	{r4, r5, lr}
 8016bba:	6803      	ldr	r3, [r0, #0]
 8016bbc:	780c      	ldrb	r4, [r1, #0]
 8016bbe:	3301      	adds	r3, #1
 8016bc0:	2c00      	cmp	r4, #0
 8016bc2:	d102      	bne.n	8016bca <__match+0x12>
 8016bc4:	6003      	str	r3, [r0, #0]
 8016bc6:	2001      	movs	r0, #1
 8016bc8:	bd30      	pop	{r4, r5, pc}
 8016bca:	781a      	ldrb	r2, [r3, #0]
 8016bcc:	0015      	movs	r5, r2
 8016bce:	3d41      	subs	r5, #65	; 0x41
 8016bd0:	2d19      	cmp	r5, #25
 8016bd2:	d800      	bhi.n	8016bd6 <__match+0x1e>
 8016bd4:	3220      	adds	r2, #32
 8016bd6:	3101      	adds	r1, #1
 8016bd8:	42a2      	cmp	r2, r4
 8016bda:	d0ef      	beq.n	8016bbc <__match+0x4>
 8016bdc:	2000      	movs	r0, #0
 8016bde:	e7f3      	b.n	8016bc8 <__match+0x10>

08016be0 <__hexnan>:
 8016be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016be2:	b08b      	sub	sp, #44	; 0x2c
 8016be4:	9201      	str	r2, [sp, #4]
 8016be6:	680a      	ldr	r2, [r1, #0]
 8016be8:	9901      	ldr	r1, [sp, #4]
 8016bea:	1153      	asrs	r3, r2, #5
 8016bec:	009b      	lsls	r3, r3, #2
 8016bee:	18cb      	adds	r3, r1, r3
 8016bf0:	9304      	str	r3, [sp, #16]
 8016bf2:	231f      	movs	r3, #31
 8016bf4:	401a      	ands	r2, r3
 8016bf6:	9008      	str	r0, [sp, #32]
 8016bf8:	9206      	str	r2, [sp, #24]
 8016bfa:	d002      	beq.n	8016c02 <__hexnan+0x22>
 8016bfc:	9b04      	ldr	r3, [sp, #16]
 8016bfe:	3304      	adds	r3, #4
 8016c00:	9304      	str	r3, [sp, #16]
 8016c02:	9b04      	ldr	r3, [sp, #16]
 8016c04:	2500      	movs	r5, #0
 8016c06:	1f1e      	subs	r6, r3, #4
 8016c08:	0037      	movs	r7, r6
 8016c0a:	0034      	movs	r4, r6
 8016c0c:	9b08      	ldr	r3, [sp, #32]
 8016c0e:	6035      	str	r5, [r6, #0]
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	9507      	str	r5, [sp, #28]
 8016c14:	9305      	str	r3, [sp, #20]
 8016c16:	9502      	str	r5, [sp, #8]
 8016c18:	9b05      	ldr	r3, [sp, #20]
 8016c1a:	3301      	adds	r3, #1
 8016c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8016c1e:	9b05      	ldr	r3, [sp, #20]
 8016c20:	785b      	ldrb	r3, [r3, #1]
 8016c22:	9303      	str	r3, [sp, #12]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d028      	beq.n	8016c7a <__hexnan+0x9a>
 8016c28:	9803      	ldr	r0, [sp, #12]
 8016c2a:	f7ff fd73 	bl	8016714 <__hexdig_fun>
 8016c2e:	2800      	cmp	r0, #0
 8016c30:	d145      	bne.n	8016cbe <__hexnan+0xde>
 8016c32:	9b03      	ldr	r3, [sp, #12]
 8016c34:	2b20      	cmp	r3, #32
 8016c36:	d819      	bhi.n	8016c6c <__hexnan+0x8c>
 8016c38:	9b02      	ldr	r3, [sp, #8]
 8016c3a:	9a07      	ldr	r2, [sp, #28]
 8016c3c:	4293      	cmp	r3, r2
 8016c3e:	dd12      	ble.n	8016c66 <__hexnan+0x86>
 8016c40:	42bc      	cmp	r4, r7
 8016c42:	d206      	bcs.n	8016c52 <__hexnan+0x72>
 8016c44:	2d07      	cmp	r5, #7
 8016c46:	dc04      	bgt.n	8016c52 <__hexnan+0x72>
 8016c48:	002a      	movs	r2, r5
 8016c4a:	0039      	movs	r1, r7
 8016c4c:	0020      	movs	r0, r4
 8016c4e:	f7ff ffa1 	bl	8016b94 <L_shift>
 8016c52:	9b01      	ldr	r3, [sp, #4]
 8016c54:	2508      	movs	r5, #8
 8016c56:	429c      	cmp	r4, r3
 8016c58:	d905      	bls.n	8016c66 <__hexnan+0x86>
 8016c5a:	1f27      	subs	r7, r4, #4
 8016c5c:	2500      	movs	r5, #0
 8016c5e:	003c      	movs	r4, r7
 8016c60:	9b02      	ldr	r3, [sp, #8]
 8016c62:	603d      	str	r5, [r7, #0]
 8016c64:	9307      	str	r3, [sp, #28]
 8016c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c68:	9305      	str	r3, [sp, #20]
 8016c6a:	e7d5      	b.n	8016c18 <__hexnan+0x38>
 8016c6c:	9b03      	ldr	r3, [sp, #12]
 8016c6e:	2b29      	cmp	r3, #41	; 0x29
 8016c70:	d14a      	bne.n	8016d08 <__hexnan+0x128>
 8016c72:	9b05      	ldr	r3, [sp, #20]
 8016c74:	9a08      	ldr	r2, [sp, #32]
 8016c76:	3302      	adds	r3, #2
 8016c78:	6013      	str	r3, [r2, #0]
 8016c7a:	9b02      	ldr	r3, [sp, #8]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d043      	beq.n	8016d08 <__hexnan+0x128>
 8016c80:	42bc      	cmp	r4, r7
 8016c82:	d206      	bcs.n	8016c92 <__hexnan+0xb2>
 8016c84:	2d07      	cmp	r5, #7
 8016c86:	dc04      	bgt.n	8016c92 <__hexnan+0xb2>
 8016c88:	002a      	movs	r2, r5
 8016c8a:	0039      	movs	r1, r7
 8016c8c:	0020      	movs	r0, r4
 8016c8e:	f7ff ff81 	bl	8016b94 <L_shift>
 8016c92:	9b01      	ldr	r3, [sp, #4]
 8016c94:	429c      	cmp	r4, r3
 8016c96:	d926      	bls.n	8016ce6 <__hexnan+0x106>
 8016c98:	cc04      	ldmia	r4!, {r2}
 8016c9a:	601a      	str	r2, [r3, #0]
 8016c9c:	3304      	adds	r3, #4
 8016c9e:	42a6      	cmp	r6, r4
 8016ca0:	d2fa      	bcs.n	8016c98 <__hexnan+0xb8>
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	c304      	stmia	r3!, {r2}
 8016ca6:	429e      	cmp	r6, r3
 8016ca8:	d2fc      	bcs.n	8016ca4 <__hexnan+0xc4>
 8016caa:	6833      	ldr	r3, [r6, #0]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d104      	bne.n	8016cba <__hexnan+0xda>
 8016cb0:	9b01      	ldr	r3, [sp, #4]
 8016cb2:	429e      	cmp	r6, r3
 8016cb4:	d126      	bne.n	8016d04 <__hexnan+0x124>
 8016cb6:	2301      	movs	r3, #1
 8016cb8:	6033      	str	r3, [r6, #0]
 8016cba:	2005      	movs	r0, #5
 8016cbc:	e025      	b.n	8016d0a <__hexnan+0x12a>
 8016cbe:	9b02      	ldr	r3, [sp, #8]
 8016cc0:	3501      	adds	r5, #1
 8016cc2:	3301      	adds	r3, #1
 8016cc4:	9302      	str	r3, [sp, #8]
 8016cc6:	2d08      	cmp	r5, #8
 8016cc8:	dd06      	ble.n	8016cd8 <__hexnan+0xf8>
 8016cca:	9b01      	ldr	r3, [sp, #4]
 8016ccc:	429c      	cmp	r4, r3
 8016cce:	d9ca      	bls.n	8016c66 <__hexnan+0x86>
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	2501      	movs	r5, #1
 8016cd4:	3c04      	subs	r4, #4
 8016cd6:	6023      	str	r3, [r4, #0]
 8016cd8:	220f      	movs	r2, #15
 8016cda:	6823      	ldr	r3, [r4, #0]
 8016cdc:	4010      	ands	r0, r2
 8016cde:	011b      	lsls	r3, r3, #4
 8016ce0:	4318      	orrs	r0, r3
 8016ce2:	6020      	str	r0, [r4, #0]
 8016ce4:	e7bf      	b.n	8016c66 <__hexnan+0x86>
 8016ce6:	9b06      	ldr	r3, [sp, #24]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d0de      	beq.n	8016caa <__hexnan+0xca>
 8016cec:	2120      	movs	r1, #32
 8016cee:	9a06      	ldr	r2, [sp, #24]
 8016cf0:	9b04      	ldr	r3, [sp, #16]
 8016cf2:	1a89      	subs	r1, r1, r2
 8016cf4:	2201      	movs	r2, #1
 8016cf6:	4252      	negs	r2, r2
 8016cf8:	40ca      	lsrs	r2, r1
 8016cfa:	3b04      	subs	r3, #4
 8016cfc:	6819      	ldr	r1, [r3, #0]
 8016cfe:	400a      	ands	r2, r1
 8016d00:	601a      	str	r2, [r3, #0]
 8016d02:	e7d2      	b.n	8016caa <__hexnan+0xca>
 8016d04:	3e04      	subs	r6, #4
 8016d06:	e7d0      	b.n	8016caa <__hexnan+0xca>
 8016d08:	2004      	movs	r0, #4
 8016d0a:	b00b      	add	sp, #44	; 0x2c
 8016d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016d0e <__localeconv_l>:
 8016d0e:	30f0      	adds	r0, #240	; 0xf0
 8016d10:	4770      	bx	lr
	...

08016d14 <_localeconv_r>:
 8016d14:	4b03      	ldr	r3, [pc, #12]	; (8016d24 <_localeconv_r+0x10>)
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016d1a:	2800      	cmp	r0, #0
 8016d1c:	d100      	bne.n	8016d20 <_localeconv_r+0xc>
 8016d1e:	4802      	ldr	r0, [pc, #8]	; (8016d28 <_localeconv_r+0x14>)
 8016d20:	30f0      	adds	r0, #240	; 0xf0
 8016d22:	4770      	bx	lr
 8016d24:	200000a8 	.word	0x200000a8
 8016d28:	200004d8 	.word	0x200004d8

08016d2c <__retarget_lock_acquire_recursive>:
 8016d2c:	4770      	bx	lr

08016d2e <__retarget_lock_release_recursive>:
 8016d2e:	4770      	bx	lr

08016d30 <memchr>:
 8016d30:	b2c9      	uxtb	r1, r1
 8016d32:	1882      	adds	r2, r0, r2
 8016d34:	4290      	cmp	r0, r2
 8016d36:	d101      	bne.n	8016d3c <memchr+0xc>
 8016d38:	2000      	movs	r0, #0
 8016d3a:	4770      	bx	lr
 8016d3c:	7803      	ldrb	r3, [r0, #0]
 8016d3e:	428b      	cmp	r3, r1
 8016d40:	d0fb      	beq.n	8016d3a <memchr+0xa>
 8016d42:	3001      	adds	r0, #1
 8016d44:	e7f6      	b.n	8016d34 <memchr+0x4>

08016d46 <memmove>:
 8016d46:	b510      	push	{r4, lr}
 8016d48:	4288      	cmp	r0, r1
 8016d4a:	d902      	bls.n	8016d52 <memmove+0xc>
 8016d4c:	188b      	adds	r3, r1, r2
 8016d4e:	4298      	cmp	r0, r3
 8016d50:	d303      	bcc.n	8016d5a <memmove+0x14>
 8016d52:	2300      	movs	r3, #0
 8016d54:	e007      	b.n	8016d66 <memmove+0x20>
 8016d56:	5c8b      	ldrb	r3, [r1, r2]
 8016d58:	5483      	strb	r3, [r0, r2]
 8016d5a:	3a01      	subs	r2, #1
 8016d5c:	d2fb      	bcs.n	8016d56 <memmove+0x10>
 8016d5e:	bd10      	pop	{r4, pc}
 8016d60:	5ccc      	ldrb	r4, [r1, r3]
 8016d62:	54c4      	strb	r4, [r0, r3]
 8016d64:	3301      	adds	r3, #1
 8016d66:	429a      	cmp	r2, r3
 8016d68:	d1fa      	bne.n	8016d60 <memmove+0x1a>
 8016d6a:	e7f8      	b.n	8016d5e <memmove+0x18>

08016d6c <_Balloc>:
 8016d6c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016d6e:	b570      	push	{r4, r5, r6, lr}
 8016d70:	0004      	movs	r4, r0
 8016d72:	000d      	movs	r5, r1
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d012      	beq.n	8016d9e <_Balloc+0x32>
 8016d78:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8016d7a:	00ab      	lsls	r3, r5, #2
 8016d7c:	18d3      	adds	r3, r2, r3
 8016d7e:	6818      	ldr	r0, [r3, #0]
 8016d80:	2800      	cmp	r0, #0
 8016d82:	d115      	bne.n	8016db0 <_Balloc+0x44>
 8016d84:	2101      	movs	r1, #1
 8016d86:	000e      	movs	r6, r1
 8016d88:	40ae      	lsls	r6, r5
 8016d8a:	1d72      	adds	r2, r6, #5
 8016d8c:	0092      	lsls	r2, r2, #2
 8016d8e:	0020      	movs	r0, r4
 8016d90:	f000 fcbe 	bl	8017710 <_calloc_r>
 8016d94:	2800      	cmp	r0, #0
 8016d96:	d009      	beq.n	8016dac <_Balloc+0x40>
 8016d98:	6045      	str	r5, [r0, #4]
 8016d9a:	6086      	str	r6, [r0, #8]
 8016d9c:	e00a      	b.n	8016db4 <_Balloc+0x48>
 8016d9e:	2221      	movs	r2, #33	; 0x21
 8016da0:	2104      	movs	r1, #4
 8016da2:	f000 fcb5 	bl	8017710 <_calloc_r>
 8016da6:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016da8:	2800      	cmp	r0, #0
 8016daa:	d1e5      	bne.n	8016d78 <_Balloc+0xc>
 8016dac:	2000      	movs	r0, #0
 8016dae:	bd70      	pop	{r4, r5, r6, pc}
 8016db0:	6802      	ldr	r2, [r0, #0]
 8016db2:	601a      	str	r2, [r3, #0]
 8016db4:	2300      	movs	r3, #0
 8016db6:	6103      	str	r3, [r0, #16]
 8016db8:	60c3      	str	r3, [r0, #12]
 8016dba:	e7f8      	b.n	8016dae <_Balloc+0x42>

08016dbc <_Bfree>:
 8016dbc:	2900      	cmp	r1, #0
 8016dbe:	d006      	beq.n	8016dce <_Bfree+0x12>
 8016dc0:	684b      	ldr	r3, [r1, #4]
 8016dc2:	009a      	lsls	r2, r3, #2
 8016dc4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016dc6:	189b      	adds	r3, r3, r2
 8016dc8:	681a      	ldr	r2, [r3, #0]
 8016dca:	600a      	str	r2, [r1, #0]
 8016dcc:	6019      	str	r1, [r3, #0]
 8016dce:	4770      	bx	lr

08016dd0 <__multadd>:
 8016dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016dd2:	001e      	movs	r6, r3
 8016dd4:	2314      	movs	r3, #20
 8016dd6:	469c      	mov	ip, r3
 8016dd8:	0007      	movs	r7, r0
 8016dda:	000c      	movs	r4, r1
 8016ddc:	2000      	movs	r0, #0
 8016dde:	690d      	ldr	r5, [r1, #16]
 8016de0:	448c      	add	ip, r1
 8016de2:	4663      	mov	r3, ip
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	3001      	adds	r0, #1
 8016de8:	b299      	uxth	r1, r3
 8016dea:	4663      	mov	r3, ip
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	4351      	muls	r1, r2
 8016df0:	0c1b      	lsrs	r3, r3, #16
 8016df2:	4353      	muls	r3, r2
 8016df4:	1989      	adds	r1, r1, r6
 8016df6:	0c0e      	lsrs	r6, r1, #16
 8016df8:	199b      	adds	r3, r3, r6
 8016dfa:	b289      	uxth	r1, r1
 8016dfc:	0c1e      	lsrs	r6, r3, #16
 8016dfe:	041b      	lsls	r3, r3, #16
 8016e00:	185b      	adds	r3, r3, r1
 8016e02:	4661      	mov	r1, ip
 8016e04:	c108      	stmia	r1!, {r3}
 8016e06:	468c      	mov	ip, r1
 8016e08:	4285      	cmp	r5, r0
 8016e0a:	dcea      	bgt.n	8016de2 <__multadd+0x12>
 8016e0c:	2e00      	cmp	r6, #0
 8016e0e:	d01b      	beq.n	8016e48 <__multadd+0x78>
 8016e10:	68a3      	ldr	r3, [r4, #8]
 8016e12:	42ab      	cmp	r3, r5
 8016e14:	dc12      	bgt.n	8016e3c <__multadd+0x6c>
 8016e16:	6863      	ldr	r3, [r4, #4]
 8016e18:	0038      	movs	r0, r7
 8016e1a:	1c59      	adds	r1, r3, #1
 8016e1c:	f7ff ffa6 	bl	8016d6c <_Balloc>
 8016e20:	0021      	movs	r1, r4
 8016e22:	6923      	ldr	r3, [r4, #16]
 8016e24:	9001      	str	r0, [sp, #4]
 8016e26:	1c9a      	adds	r2, r3, #2
 8016e28:	0092      	lsls	r2, r2, #2
 8016e2a:	310c      	adds	r1, #12
 8016e2c:	300c      	adds	r0, #12
 8016e2e:	f7fc f8b6 	bl	8012f9e <memcpy>
 8016e32:	0021      	movs	r1, r4
 8016e34:	0038      	movs	r0, r7
 8016e36:	f7ff ffc1 	bl	8016dbc <_Bfree>
 8016e3a:	9c01      	ldr	r4, [sp, #4]
 8016e3c:	1d2b      	adds	r3, r5, #4
 8016e3e:	009b      	lsls	r3, r3, #2
 8016e40:	18e3      	adds	r3, r4, r3
 8016e42:	3501      	adds	r5, #1
 8016e44:	605e      	str	r6, [r3, #4]
 8016e46:	6125      	str	r5, [r4, #16]
 8016e48:	0020      	movs	r0, r4
 8016e4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08016e4c <__s2b>:
 8016e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e4e:	0006      	movs	r6, r0
 8016e50:	0018      	movs	r0, r3
 8016e52:	000c      	movs	r4, r1
 8016e54:	3008      	adds	r0, #8
 8016e56:	2109      	movs	r1, #9
 8016e58:	9301      	str	r3, [sp, #4]
 8016e5a:	0015      	movs	r5, r2
 8016e5c:	f7e9 fa02 	bl	8000264 <__divsi3>
 8016e60:	2301      	movs	r3, #1
 8016e62:	2100      	movs	r1, #0
 8016e64:	4283      	cmp	r3, r0
 8016e66:	db1f      	blt.n	8016ea8 <__s2b+0x5c>
 8016e68:	0030      	movs	r0, r6
 8016e6a:	f7ff ff7f 	bl	8016d6c <_Balloc>
 8016e6e:	9b08      	ldr	r3, [sp, #32]
 8016e70:	6143      	str	r3, [r0, #20]
 8016e72:	2301      	movs	r3, #1
 8016e74:	6103      	str	r3, [r0, #16]
 8016e76:	2d09      	cmp	r5, #9
 8016e78:	dd19      	ble.n	8016eae <__s2b+0x62>
 8016e7a:	0023      	movs	r3, r4
 8016e7c:	3309      	adds	r3, #9
 8016e7e:	001f      	movs	r7, r3
 8016e80:	9300      	str	r3, [sp, #0]
 8016e82:	1964      	adds	r4, r4, r5
 8016e84:	783b      	ldrb	r3, [r7, #0]
 8016e86:	0001      	movs	r1, r0
 8016e88:	3b30      	subs	r3, #48	; 0x30
 8016e8a:	220a      	movs	r2, #10
 8016e8c:	0030      	movs	r0, r6
 8016e8e:	3701      	adds	r7, #1
 8016e90:	f7ff ff9e 	bl	8016dd0 <__multadd>
 8016e94:	42a7      	cmp	r7, r4
 8016e96:	d1f5      	bne.n	8016e84 <__s2b+0x38>
 8016e98:	9b00      	ldr	r3, [sp, #0]
 8016e9a:	195c      	adds	r4, r3, r5
 8016e9c:	3c08      	subs	r4, #8
 8016e9e:	002f      	movs	r7, r5
 8016ea0:	9b01      	ldr	r3, [sp, #4]
 8016ea2:	429f      	cmp	r7, r3
 8016ea4:	db06      	blt.n	8016eb4 <__s2b+0x68>
 8016ea6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016ea8:	005b      	lsls	r3, r3, #1
 8016eaa:	3101      	adds	r1, #1
 8016eac:	e7da      	b.n	8016e64 <__s2b+0x18>
 8016eae:	340a      	adds	r4, #10
 8016eb0:	2509      	movs	r5, #9
 8016eb2:	e7f4      	b.n	8016e9e <__s2b+0x52>
 8016eb4:	1b63      	subs	r3, r4, r5
 8016eb6:	5ddb      	ldrb	r3, [r3, r7]
 8016eb8:	0001      	movs	r1, r0
 8016eba:	3b30      	subs	r3, #48	; 0x30
 8016ebc:	220a      	movs	r2, #10
 8016ebe:	0030      	movs	r0, r6
 8016ec0:	f7ff ff86 	bl	8016dd0 <__multadd>
 8016ec4:	3701      	adds	r7, #1
 8016ec6:	e7eb      	b.n	8016ea0 <__s2b+0x54>

08016ec8 <__hi0bits>:
 8016ec8:	0003      	movs	r3, r0
 8016eca:	0c02      	lsrs	r2, r0, #16
 8016ecc:	2000      	movs	r0, #0
 8016ece:	4282      	cmp	r2, r0
 8016ed0:	d101      	bne.n	8016ed6 <__hi0bits+0xe>
 8016ed2:	041b      	lsls	r3, r3, #16
 8016ed4:	3010      	adds	r0, #16
 8016ed6:	0e1a      	lsrs	r2, r3, #24
 8016ed8:	d101      	bne.n	8016ede <__hi0bits+0x16>
 8016eda:	3008      	adds	r0, #8
 8016edc:	021b      	lsls	r3, r3, #8
 8016ede:	0f1a      	lsrs	r2, r3, #28
 8016ee0:	d101      	bne.n	8016ee6 <__hi0bits+0x1e>
 8016ee2:	3004      	adds	r0, #4
 8016ee4:	011b      	lsls	r3, r3, #4
 8016ee6:	0f9a      	lsrs	r2, r3, #30
 8016ee8:	d101      	bne.n	8016eee <__hi0bits+0x26>
 8016eea:	3002      	adds	r0, #2
 8016eec:	009b      	lsls	r3, r3, #2
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	db03      	blt.n	8016efa <__hi0bits+0x32>
 8016ef2:	3001      	adds	r0, #1
 8016ef4:	005b      	lsls	r3, r3, #1
 8016ef6:	d400      	bmi.n	8016efa <__hi0bits+0x32>
 8016ef8:	2020      	movs	r0, #32
 8016efa:	4770      	bx	lr

08016efc <__lo0bits>:
 8016efc:	2207      	movs	r2, #7
 8016efe:	6803      	ldr	r3, [r0, #0]
 8016f00:	b510      	push	{r4, lr}
 8016f02:	0001      	movs	r1, r0
 8016f04:	401a      	ands	r2, r3
 8016f06:	d00d      	beq.n	8016f24 <__lo0bits+0x28>
 8016f08:	2401      	movs	r4, #1
 8016f0a:	2000      	movs	r0, #0
 8016f0c:	4223      	tst	r3, r4
 8016f0e:	d105      	bne.n	8016f1c <__lo0bits+0x20>
 8016f10:	3002      	adds	r0, #2
 8016f12:	4203      	tst	r3, r0
 8016f14:	d003      	beq.n	8016f1e <__lo0bits+0x22>
 8016f16:	40e3      	lsrs	r3, r4
 8016f18:	0020      	movs	r0, r4
 8016f1a:	600b      	str	r3, [r1, #0]
 8016f1c:	bd10      	pop	{r4, pc}
 8016f1e:	089b      	lsrs	r3, r3, #2
 8016f20:	600b      	str	r3, [r1, #0]
 8016f22:	e7fb      	b.n	8016f1c <__lo0bits+0x20>
 8016f24:	b29c      	uxth	r4, r3
 8016f26:	0010      	movs	r0, r2
 8016f28:	2c00      	cmp	r4, #0
 8016f2a:	d101      	bne.n	8016f30 <__lo0bits+0x34>
 8016f2c:	2010      	movs	r0, #16
 8016f2e:	0c1b      	lsrs	r3, r3, #16
 8016f30:	b2da      	uxtb	r2, r3
 8016f32:	2a00      	cmp	r2, #0
 8016f34:	d101      	bne.n	8016f3a <__lo0bits+0x3e>
 8016f36:	3008      	adds	r0, #8
 8016f38:	0a1b      	lsrs	r3, r3, #8
 8016f3a:	071a      	lsls	r2, r3, #28
 8016f3c:	d101      	bne.n	8016f42 <__lo0bits+0x46>
 8016f3e:	3004      	adds	r0, #4
 8016f40:	091b      	lsrs	r3, r3, #4
 8016f42:	079a      	lsls	r2, r3, #30
 8016f44:	d101      	bne.n	8016f4a <__lo0bits+0x4e>
 8016f46:	3002      	adds	r0, #2
 8016f48:	089b      	lsrs	r3, r3, #2
 8016f4a:	07da      	lsls	r2, r3, #31
 8016f4c:	d4e8      	bmi.n	8016f20 <__lo0bits+0x24>
 8016f4e:	085b      	lsrs	r3, r3, #1
 8016f50:	d001      	beq.n	8016f56 <__lo0bits+0x5a>
 8016f52:	3001      	adds	r0, #1
 8016f54:	e7e4      	b.n	8016f20 <__lo0bits+0x24>
 8016f56:	2020      	movs	r0, #32
 8016f58:	e7e0      	b.n	8016f1c <__lo0bits+0x20>

08016f5a <__i2b>:
 8016f5a:	b510      	push	{r4, lr}
 8016f5c:	000c      	movs	r4, r1
 8016f5e:	2101      	movs	r1, #1
 8016f60:	f7ff ff04 	bl	8016d6c <_Balloc>
 8016f64:	2301      	movs	r3, #1
 8016f66:	6144      	str	r4, [r0, #20]
 8016f68:	6103      	str	r3, [r0, #16]
 8016f6a:	bd10      	pop	{r4, pc}

08016f6c <__multiply>:
 8016f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f6e:	690b      	ldr	r3, [r1, #16]
 8016f70:	0014      	movs	r4, r2
 8016f72:	6912      	ldr	r2, [r2, #16]
 8016f74:	b089      	sub	sp, #36	; 0x24
 8016f76:	000d      	movs	r5, r1
 8016f78:	4293      	cmp	r3, r2
 8016f7a:	da01      	bge.n	8016f80 <__multiply+0x14>
 8016f7c:	0025      	movs	r5, r4
 8016f7e:	000c      	movs	r4, r1
 8016f80:	692f      	ldr	r7, [r5, #16]
 8016f82:	6926      	ldr	r6, [r4, #16]
 8016f84:	6869      	ldr	r1, [r5, #4]
 8016f86:	19bb      	adds	r3, r7, r6
 8016f88:	9302      	str	r3, [sp, #8]
 8016f8a:	68ab      	ldr	r3, [r5, #8]
 8016f8c:	19ba      	adds	r2, r7, r6
 8016f8e:	4293      	cmp	r3, r2
 8016f90:	da00      	bge.n	8016f94 <__multiply+0x28>
 8016f92:	3101      	adds	r1, #1
 8016f94:	f7ff feea 	bl	8016d6c <_Balloc>
 8016f98:	0002      	movs	r2, r0
 8016f9a:	19bb      	adds	r3, r7, r6
 8016f9c:	3214      	adds	r2, #20
 8016f9e:	009b      	lsls	r3, r3, #2
 8016fa0:	18d3      	adds	r3, r2, r3
 8016fa2:	469c      	mov	ip, r3
 8016fa4:	2100      	movs	r1, #0
 8016fa6:	0013      	movs	r3, r2
 8016fa8:	9004      	str	r0, [sp, #16]
 8016faa:	4563      	cmp	r3, ip
 8016fac:	d31d      	bcc.n	8016fea <__multiply+0x7e>
 8016fae:	3514      	adds	r5, #20
 8016fb0:	00bf      	lsls	r7, r7, #2
 8016fb2:	19eb      	adds	r3, r5, r7
 8016fb4:	3414      	adds	r4, #20
 8016fb6:	00b6      	lsls	r6, r6, #2
 8016fb8:	9305      	str	r3, [sp, #20]
 8016fba:	19a3      	adds	r3, r4, r6
 8016fbc:	9503      	str	r5, [sp, #12]
 8016fbe:	9401      	str	r4, [sp, #4]
 8016fc0:	9307      	str	r3, [sp, #28]
 8016fc2:	9b07      	ldr	r3, [sp, #28]
 8016fc4:	9901      	ldr	r1, [sp, #4]
 8016fc6:	4299      	cmp	r1, r3
 8016fc8:	d311      	bcc.n	8016fee <__multiply+0x82>
 8016fca:	9b02      	ldr	r3, [sp, #8]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	dd06      	ble.n	8016fde <__multiply+0x72>
 8016fd0:	2304      	movs	r3, #4
 8016fd2:	425b      	negs	r3, r3
 8016fd4:	449c      	add	ip, r3
 8016fd6:	4663      	mov	r3, ip
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d051      	beq.n	8017082 <__multiply+0x116>
 8016fde:	9b04      	ldr	r3, [sp, #16]
 8016fe0:	9a02      	ldr	r2, [sp, #8]
 8016fe2:	0018      	movs	r0, r3
 8016fe4:	611a      	str	r2, [r3, #16]
 8016fe6:	b009      	add	sp, #36	; 0x24
 8016fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fea:	c302      	stmia	r3!, {r1}
 8016fec:	e7dd      	b.n	8016faa <__multiply+0x3e>
 8016fee:	9b01      	ldr	r3, [sp, #4]
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	b298      	uxth	r0, r3
 8016ff4:	2800      	cmp	r0, #0
 8016ff6:	d01c      	beq.n	8017032 <__multiply+0xc6>
 8016ff8:	0015      	movs	r5, r2
 8016ffa:	2600      	movs	r6, #0
 8016ffc:	9f03      	ldr	r7, [sp, #12]
 8016ffe:	cf02      	ldmia	r7!, {r1}
 8017000:	682c      	ldr	r4, [r5, #0]
 8017002:	b28b      	uxth	r3, r1
 8017004:	4343      	muls	r3, r0
 8017006:	0c09      	lsrs	r1, r1, #16
 8017008:	4341      	muls	r1, r0
 801700a:	b2a4      	uxth	r4, r4
 801700c:	191b      	adds	r3, r3, r4
 801700e:	199b      	adds	r3, r3, r6
 8017010:	000e      	movs	r6, r1
 8017012:	6829      	ldr	r1, [r5, #0]
 8017014:	9506      	str	r5, [sp, #24]
 8017016:	0c09      	lsrs	r1, r1, #16
 8017018:	1871      	adds	r1, r6, r1
 801701a:	0c1e      	lsrs	r6, r3, #16
 801701c:	1989      	adds	r1, r1, r6
 801701e:	0c0e      	lsrs	r6, r1, #16
 8017020:	b29b      	uxth	r3, r3
 8017022:	0409      	lsls	r1, r1, #16
 8017024:	430b      	orrs	r3, r1
 8017026:	c508      	stmia	r5!, {r3}
 8017028:	9b05      	ldr	r3, [sp, #20]
 801702a:	42bb      	cmp	r3, r7
 801702c:	d8e7      	bhi.n	8016ffe <__multiply+0x92>
 801702e:	9b06      	ldr	r3, [sp, #24]
 8017030:	605e      	str	r6, [r3, #4]
 8017032:	9b01      	ldr	r3, [sp, #4]
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	0c1d      	lsrs	r5, r3, #16
 8017038:	d01e      	beq.n	8017078 <__multiply+0x10c>
 801703a:	0010      	movs	r0, r2
 801703c:	2700      	movs	r7, #0
 801703e:	6813      	ldr	r3, [r2, #0]
 8017040:	9e03      	ldr	r6, [sp, #12]
 8017042:	6831      	ldr	r1, [r6, #0]
 8017044:	6804      	ldr	r4, [r0, #0]
 8017046:	b289      	uxth	r1, r1
 8017048:	4369      	muls	r1, r5
 801704a:	0c24      	lsrs	r4, r4, #16
 801704c:	1909      	adds	r1, r1, r4
 801704e:	19c9      	adds	r1, r1, r7
 8017050:	040f      	lsls	r7, r1, #16
 8017052:	b29b      	uxth	r3, r3
 8017054:	433b      	orrs	r3, r7
 8017056:	6003      	str	r3, [r0, #0]
 8017058:	ce80      	ldmia	r6!, {r7}
 801705a:	6843      	ldr	r3, [r0, #4]
 801705c:	0c3f      	lsrs	r7, r7, #16
 801705e:	436f      	muls	r7, r5
 8017060:	b29b      	uxth	r3, r3
 8017062:	18fb      	adds	r3, r7, r3
 8017064:	0c09      	lsrs	r1, r1, #16
 8017066:	185b      	adds	r3, r3, r1
 8017068:	9905      	ldr	r1, [sp, #20]
 801706a:	9006      	str	r0, [sp, #24]
 801706c:	0c1f      	lsrs	r7, r3, #16
 801706e:	3004      	adds	r0, #4
 8017070:	42b1      	cmp	r1, r6
 8017072:	d8e6      	bhi.n	8017042 <__multiply+0xd6>
 8017074:	9906      	ldr	r1, [sp, #24]
 8017076:	604b      	str	r3, [r1, #4]
 8017078:	9b01      	ldr	r3, [sp, #4]
 801707a:	3204      	adds	r2, #4
 801707c:	3304      	adds	r3, #4
 801707e:	9301      	str	r3, [sp, #4]
 8017080:	e79f      	b.n	8016fc2 <__multiply+0x56>
 8017082:	9b02      	ldr	r3, [sp, #8]
 8017084:	3b01      	subs	r3, #1
 8017086:	9302      	str	r3, [sp, #8]
 8017088:	e79f      	b.n	8016fca <__multiply+0x5e>
	...

0801708c <__pow5mult>:
 801708c:	2303      	movs	r3, #3
 801708e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017090:	4013      	ands	r3, r2
 8017092:	0006      	movs	r6, r0
 8017094:	000f      	movs	r7, r1
 8017096:	0015      	movs	r5, r2
 8017098:	2b00      	cmp	r3, #0
 801709a:	d008      	beq.n	80170ae <__pow5mult+0x22>
 801709c:	491a      	ldr	r1, [pc, #104]	; (8017108 <__pow5mult+0x7c>)
 801709e:	3b01      	subs	r3, #1
 80170a0:	009a      	lsls	r2, r3, #2
 80170a2:	5852      	ldr	r2, [r2, r1]
 80170a4:	2300      	movs	r3, #0
 80170a6:	0039      	movs	r1, r7
 80170a8:	f7ff fe92 	bl	8016dd0 <__multadd>
 80170ac:	0007      	movs	r7, r0
 80170ae:	10ad      	asrs	r5, r5, #2
 80170b0:	d027      	beq.n	8017102 <__pow5mult+0x76>
 80170b2:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80170b4:	2c00      	cmp	r4, #0
 80170b6:	d107      	bne.n	80170c8 <__pow5mult+0x3c>
 80170b8:	4914      	ldr	r1, [pc, #80]	; (801710c <__pow5mult+0x80>)
 80170ba:	0030      	movs	r0, r6
 80170bc:	f7ff ff4d 	bl	8016f5a <__i2b>
 80170c0:	2300      	movs	r3, #0
 80170c2:	0004      	movs	r4, r0
 80170c4:	64b0      	str	r0, [r6, #72]	; 0x48
 80170c6:	6003      	str	r3, [r0, #0]
 80170c8:	2301      	movs	r3, #1
 80170ca:	421d      	tst	r5, r3
 80170cc:	d00a      	beq.n	80170e4 <__pow5mult+0x58>
 80170ce:	0039      	movs	r1, r7
 80170d0:	0022      	movs	r2, r4
 80170d2:	0030      	movs	r0, r6
 80170d4:	f7ff ff4a 	bl	8016f6c <__multiply>
 80170d8:	0039      	movs	r1, r7
 80170da:	9001      	str	r0, [sp, #4]
 80170dc:	0030      	movs	r0, r6
 80170de:	f7ff fe6d 	bl	8016dbc <_Bfree>
 80170e2:	9f01      	ldr	r7, [sp, #4]
 80170e4:	106d      	asrs	r5, r5, #1
 80170e6:	d00c      	beq.n	8017102 <__pow5mult+0x76>
 80170e8:	6820      	ldr	r0, [r4, #0]
 80170ea:	2800      	cmp	r0, #0
 80170ec:	d107      	bne.n	80170fe <__pow5mult+0x72>
 80170ee:	0022      	movs	r2, r4
 80170f0:	0021      	movs	r1, r4
 80170f2:	0030      	movs	r0, r6
 80170f4:	f7ff ff3a 	bl	8016f6c <__multiply>
 80170f8:	2300      	movs	r3, #0
 80170fa:	6020      	str	r0, [r4, #0]
 80170fc:	6003      	str	r3, [r0, #0]
 80170fe:	0004      	movs	r4, r0
 8017100:	e7e2      	b.n	80170c8 <__pow5mult+0x3c>
 8017102:	0038      	movs	r0, r7
 8017104:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017106:	46c0      	nop			; (mov r8, r8)
 8017108:	0801a8f0 	.word	0x0801a8f0
 801710c:	00000271 	.word	0x00000271

08017110 <__lshift>:
 8017110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017112:	000d      	movs	r5, r1
 8017114:	0017      	movs	r7, r2
 8017116:	692b      	ldr	r3, [r5, #16]
 8017118:	1154      	asrs	r4, r2, #5
 801711a:	b085      	sub	sp, #20
 801711c:	18e3      	adds	r3, r4, r3
 801711e:	9301      	str	r3, [sp, #4]
 8017120:	3301      	adds	r3, #1
 8017122:	9300      	str	r3, [sp, #0]
 8017124:	6849      	ldr	r1, [r1, #4]
 8017126:	68ab      	ldr	r3, [r5, #8]
 8017128:	9002      	str	r0, [sp, #8]
 801712a:	9a00      	ldr	r2, [sp, #0]
 801712c:	4293      	cmp	r3, r2
 801712e:	db35      	blt.n	801719c <__lshift+0x8c>
 8017130:	9802      	ldr	r0, [sp, #8]
 8017132:	f7ff fe1b 	bl	8016d6c <_Balloc>
 8017136:	2300      	movs	r3, #0
 8017138:	0002      	movs	r2, r0
 801713a:	0006      	movs	r6, r0
 801713c:	0019      	movs	r1, r3
 801713e:	3214      	adds	r2, #20
 8017140:	42a3      	cmp	r3, r4
 8017142:	db2e      	blt.n	80171a2 <__lshift+0x92>
 8017144:	43e3      	mvns	r3, r4
 8017146:	17db      	asrs	r3, r3, #31
 8017148:	401c      	ands	r4, r3
 801714a:	002b      	movs	r3, r5
 801714c:	00a4      	lsls	r4, r4, #2
 801714e:	1914      	adds	r4, r2, r4
 8017150:	692a      	ldr	r2, [r5, #16]
 8017152:	3314      	adds	r3, #20
 8017154:	0092      	lsls	r2, r2, #2
 8017156:	189a      	adds	r2, r3, r2
 8017158:	4694      	mov	ip, r2
 801715a:	221f      	movs	r2, #31
 801715c:	4017      	ands	r7, r2
 801715e:	d024      	beq.n	80171aa <__lshift+0x9a>
 8017160:	3201      	adds	r2, #1
 8017162:	1bd2      	subs	r2, r2, r7
 8017164:	9203      	str	r2, [sp, #12]
 8017166:	2200      	movs	r2, #0
 8017168:	6819      	ldr	r1, [r3, #0]
 801716a:	0020      	movs	r0, r4
 801716c:	40b9      	lsls	r1, r7
 801716e:	430a      	orrs	r2, r1
 8017170:	c404      	stmia	r4!, {r2}
 8017172:	cb04      	ldmia	r3!, {r2}
 8017174:	9903      	ldr	r1, [sp, #12]
 8017176:	40ca      	lsrs	r2, r1
 8017178:	459c      	cmp	ip, r3
 801717a:	d8f5      	bhi.n	8017168 <__lshift+0x58>
 801717c:	6042      	str	r2, [r0, #4]
 801717e:	2a00      	cmp	r2, #0
 8017180:	d002      	beq.n	8017188 <__lshift+0x78>
 8017182:	9b01      	ldr	r3, [sp, #4]
 8017184:	3302      	adds	r3, #2
 8017186:	9300      	str	r3, [sp, #0]
 8017188:	9b00      	ldr	r3, [sp, #0]
 801718a:	9802      	ldr	r0, [sp, #8]
 801718c:	3b01      	subs	r3, #1
 801718e:	6133      	str	r3, [r6, #16]
 8017190:	0029      	movs	r1, r5
 8017192:	f7ff fe13 	bl	8016dbc <_Bfree>
 8017196:	0030      	movs	r0, r6
 8017198:	b005      	add	sp, #20
 801719a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801719c:	3101      	adds	r1, #1
 801719e:	005b      	lsls	r3, r3, #1
 80171a0:	e7c3      	b.n	801712a <__lshift+0x1a>
 80171a2:	0098      	lsls	r0, r3, #2
 80171a4:	5011      	str	r1, [r2, r0]
 80171a6:	3301      	adds	r3, #1
 80171a8:	e7ca      	b.n	8017140 <__lshift+0x30>
 80171aa:	cb04      	ldmia	r3!, {r2}
 80171ac:	c404      	stmia	r4!, {r2}
 80171ae:	459c      	cmp	ip, r3
 80171b0:	d8fb      	bhi.n	80171aa <__lshift+0x9a>
 80171b2:	e7e9      	b.n	8017188 <__lshift+0x78>

080171b4 <__mcmp>:
 80171b4:	690a      	ldr	r2, [r1, #16]
 80171b6:	6903      	ldr	r3, [r0, #16]
 80171b8:	b530      	push	{r4, r5, lr}
 80171ba:	1a9b      	subs	r3, r3, r2
 80171bc:	d10d      	bne.n	80171da <__mcmp+0x26>
 80171be:	0092      	lsls	r2, r2, #2
 80171c0:	3014      	adds	r0, #20
 80171c2:	3114      	adds	r1, #20
 80171c4:	1884      	adds	r4, r0, r2
 80171c6:	1889      	adds	r1, r1, r2
 80171c8:	3c04      	subs	r4, #4
 80171ca:	3904      	subs	r1, #4
 80171cc:	6825      	ldr	r5, [r4, #0]
 80171ce:	680a      	ldr	r2, [r1, #0]
 80171d0:	4295      	cmp	r5, r2
 80171d2:	d004      	beq.n	80171de <__mcmp+0x2a>
 80171d4:	2301      	movs	r3, #1
 80171d6:	4295      	cmp	r5, r2
 80171d8:	d304      	bcc.n	80171e4 <__mcmp+0x30>
 80171da:	0018      	movs	r0, r3
 80171dc:	bd30      	pop	{r4, r5, pc}
 80171de:	42a0      	cmp	r0, r4
 80171e0:	d3f2      	bcc.n	80171c8 <__mcmp+0x14>
 80171e2:	e7fa      	b.n	80171da <__mcmp+0x26>
 80171e4:	425b      	negs	r3, r3
 80171e6:	e7f8      	b.n	80171da <__mcmp+0x26>

080171e8 <__mdiff>:
 80171e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171ea:	000d      	movs	r5, r1
 80171ec:	b085      	sub	sp, #20
 80171ee:	0007      	movs	r7, r0
 80171f0:	0011      	movs	r1, r2
 80171f2:	0028      	movs	r0, r5
 80171f4:	0014      	movs	r4, r2
 80171f6:	f7ff ffdd 	bl	80171b4 <__mcmp>
 80171fa:	1e06      	subs	r6, r0, #0
 80171fc:	d108      	bne.n	8017210 <__mdiff+0x28>
 80171fe:	0001      	movs	r1, r0
 8017200:	0038      	movs	r0, r7
 8017202:	f7ff fdb3 	bl	8016d6c <_Balloc>
 8017206:	2301      	movs	r3, #1
 8017208:	6146      	str	r6, [r0, #20]
 801720a:	6103      	str	r3, [r0, #16]
 801720c:	b005      	add	sp, #20
 801720e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017210:	2301      	movs	r3, #1
 8017212:	9301      	str	r3, [sp, #4]
 8017214:	2800      	cmp	r0, #0
 8017216:	db04      	blt.n	8017222 <__mdiff+0x3a>
 8017218:	0023      	movs	r3, r4
 801721a:	002c      	movs	r4, r5
 801721c:	001d      	movs	r5, r3
 801721e:	2300      	movs	r3, #0
 8017220:	9301      	str	r3, [sp, #4]
 8017222:	6861      	ldr	r1, [r4, #4]
 8017224:	0038      	movs	r0, r7
 8017226:	f7ff fda1 	bl	8016d6c <_Balloc>
 801722a:	002f      	movs	r7, r5
 801722c:	2200      	movs	r2, #0
 801722e:	9b01      	ldr	r3, [sp, #4]
 8017230:	6926      	ldr	r6, [r4, #16]
 8017232:	60c3      	str	r3, [r0, #12]
 8017234:	3414      	adds	r4, #20
 8017236:	00b3      	lsls	r3, r6, #2
 8017238:	18e3      	adds	r3, r4, r3
 801723a:	9302      	str	r3, [sp, #8]
 801723c:	692b      	ldr	r3, [r5, #16]
 801723e:	3714      	adds	r7, #20
 8017240:	009b      	lsls	r3, r3, #2
 8017242:	18fb      	adds	r3, r7, r3
 8017244:	9303      	str	r3, [sp, #12]
 8017246:	0003      	movs	r3, r0
 8017248:	4694      	mov	ip, r2
 801724a:	3314      	adds	r3, #20
 801724c:	cc20      	ldmia	r4!, {r5}
 801724e:	cf04      	ldmia	r7!, {r2}
 8017250:	9201      	str	r2, [sp, #4]
 8017252:	b2aa      	uxth	r2, r5
 8017254:	4494      	add	ip, r2
 8017256:	466a      	mov	r2, sp
 8017258:	4661      	mov	r1, ip
 801725a:	8892      	ldrh	r2, [r2, #4]
 801725c:	0c2d      	lsrs	r5, r5, #16
 801725e:	1a8a      	subs	r2, r1, r2
 8017260:	9901      	ldr	r1, [sp, #4]
 8017262:	0c09      	lsrs	r1, r1, #16
 8017264:	1a69      	subs	r1, r5, r1
 8017266:	1415      	asrs	r5, r2, #16
 8017268:	1949      	adds	r1, r1, r5
 801726a:	140d      	asrs	r5, r1, #16
 801726c:	b292      	uxth	r2, r2
 801726e:	0409      	lsls	r1, r1, #16
 8017270:	430a      	orrs	r2, r1
 8017272:	601a      	str	r2, [r3, #0]
 8017274:	9a03      	ldr	r2, [sp, #12]
 8017276:	46ac      	mov	ip, r5
 8017278:	3304      	adds	r3, #4
 801727a:	42ba      	cmp	r2, r7
 801727c:	d8e6      	bhi.n	801724c <__mdiff+0x64>
 801727e:	9902      	ldr	r1, [sp, #8]
 8017280:	001a      	movs	r2, r3
 8017282:	428c      	cmp	r4, r1
 8017284:	d305      	bcc.n	8017292 <__mdiff+0xaa>
 8017286:	3a04      	subs	r2, #4
 8017288:	6813      	ldr	r3, [r2, #0]
 801728a:	2b00      	cmp	r3, #0
 801728c:	d00e      	beq.n	80172ac <__mdiff+0xc4>
 801728e:	6106      	str	r6, [r0, #16]
 8017290:	e7bc      	b.n	801720c <__mdiff+0x24>
 8017292:	cc04      	ldmia	r4!, {r2}
 8017294:	b291      	uxth	r1, r2
 8017296:	4461      	add	r1, ip
 8017298:	140d      	asrs	r5, r1, #16
 801729a:	0c12      	lsrs	r2, r2, #16
 801729c:	1952      	adds	r2, r2, r5
 801729e:	1415      	asrs	r5, r2, #16
 80172a0:	b289      	uxth	r1, r1
 80172a2:	0412      	lsls	r2, r2, #16
 80172a4:	430a      	orrs	r2, r1
 80172a6:	46ac      	mov	ip, r5
 80172a8:	c304      	stmia	r3!, {r2}
 80172aa:	e7e8      	b.n	801727e <__mdiff+0x96>
 80172ac:	3e01      	subs	r6, #1
 80172ae:	e7ea      	b.n	8017286 <__mdiff+0x9e>

080172b0 <__ulp>:
 80172b0:	000b      	movs	r3, r1
 80172b2:	4910      	ldr	r1, [pc, #64]	; (80172f4 <__ulp+0x44>)
 80172b4:	b510      	push	{r4, lr}
 80172b6:	4019      	ands	r1, r3
 80172b8:	4b0f      	ldr	r3, [pc, #60]	; (80172f8 <__ulp+0x48>)
 80172ba:	18c9      	adds	r1, r1, r3
 80172bc:	2900      	cmp	r1, #0
 80172be:	dd04      	ble.n	80172ca <__ulp+0x1a>
 80172c0:	2200      	movs	r2, #0
 80172c2:	000b      	movs	r3, r1
 80172c4:	0010      	movs	r0, r2
 80172c6:	0019      	movs	r1, r3
 80172c8:	bd10      	pop	{r4, pc}
 80172ca:	4249      	negs	r1, r1
 80172cc:	1509      	asrs	r1, r1, #20
 80172ce:	2200      	movs	r2, #0
 80172d0:	2300      	movs	r3, #0
 80172d2:	2913      	cmp	r1, #19
 80172d4:	dc04      	bgt.n	80172e0 <__ulp+0x30>
 80172d6:	2080      	movs	r0, #128	; 0x80
 80172d8:	0300      	lsls	r0, r0, #12
 80172da:	4108      	asrs	r0, r1
 80172dc:	0003      	movs	r3, r0
 80172de:	e7f1      	b.n	80172c4 <__ulp+0x14>
 80172e0:	3914      	subs	r1, #20
 80172e2:	2001      	movs	r0, #1
 80172e4:	291e      	cmp	r1, #30
 80172e6:	dc02      	bgt.n	80172ee <__ulp+0x3e>
 80172e8:	241f      	movs	r4, #31
 80172ea:	1a61      	subs	r1, r4, r1
 80172ec:	4088      	lsls	r0, r1
 80172ee:	0002      	movs	r2, r0
 80172f0:	e7e8      	b.n	80172c4 <__ulp+0x14>
 80172f2:	46c0      	nop			; (mov r8, r8)
 80172f4:	7ff00000 	.word	0x7ff00000
 80172f8:	fcc00000 	.word	0xfcc00000

080172fc <__b2d>:
 80172fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80172fe:	0006      	movs	r6, r0
 8017300:	6903      	ldr	r3, [r0, #16]
 8017302:	3614      	adds	r6, #20
 8017304:	009b      	lsls	r3, r3, #2
 8017306:	18f3      	adds	r3, r6, r3
 8017308:	1f1d      	subs	r5, r3, #4
 801730a:	682c      	ldr	r4, [r5, #0]
 801730c:	000f      	movs	r7, r1
 801730e:	0020      	movs	r0, r4
 8017310:	9301      	str	r3, [sp, #4]
 8017312:	f7ff fdd9 	bl	8016ec8 <__hi0bits>
 8017316:	2320      	movs	r3, #32
 8017318:	1a1b      	subs	r3, r3, r0
 801731a:	603b      	str	r3, [r7, #0]
 801731c:	491c      	ldr	r1, [pc, #112]	; (8017390 <__b2d+0x94>)
 801731e:	280a      	cmp	r0, #10
 8017320:	dc16      	bgt.n	8017350 <__b2d+0x54>
 8017322:	230b      	movs	r3, #11
 8017324:	0027      	movs	r7, r4
 8017326:	1a1b      	subs	r3, r3, r0
 8017328:	40df      	lsrs	r7, r3
 801732a:	4339      	orrs	r1, r7
 801732c:	469c      	mov	ip, r3
 801732e:	000b      	movs	r3, r1
 8017330:	2100      	movs	r1, #0
 8017332:	42ae      	cmp	r6, r5
 8017334:	d202      	bcs.n	801733c <__b2d+0x40>
 8017336:	9901      	ldr	r1, [sp, #4]
 8017338:	3908      	subs	r1, #8
 801733a:	6809      	ldr	r1, [r1, #0]
 801733c:	3015      	adds	r0, #21
 801733e:	4084      	lsls	r4, r0
 8017340:	4660      	mov	r0, ip
 8017342:	40c1      	lsrs	r1, r0
 8017344:	430c      	orrs	r4, r1
 8017346:	0022      	movs	r2, r4
 8017348:	0010      	movs	r0, r2
 801734a:	0019      	movs	r1, r3
 801734c:	b003      	add	sp, #12
 801734e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017350:	2700      	movs	r7, #0
 8017352:	42ae      	cmp	r6, r5
 8017354:	d202      	bcs.n	801735c <__b2d+0x60>
 8017356:	9d01      	ldr	r5, [sp, #4]
 8017358:	3d08      	subs	r5, #8
 801735a:	682f      	ldr	r7, [r5, #0]
 801735c:	380b      	subs	r0, #11
 801735e:	4684      	mov	ip, r0
 8017360:	1e03      	subs	r3, r0, #0
 8017362:	d012      	beq.n	801738a <__b2d+0x8e>
 8017364:	409c      	lsls	r4, r3
 8017366:	2020      	movs	r0, #32
 8017368:	4321      	orrs	r1, r4
 801736a:	003c      	movs	r4, r7
 801736c:	1ac0      	subs	r0, r0, r3
 801736e:	40c4      	lsrs	r4, r0
 8017370:	4321      	orrs	r1, r4
 8017372:	000b      	movs	r3, r1
 8017374:	2100      	movs	r1, #0
 8017376:	42b5      	cmp	r5, r6
 8017378:	d901      	bls.n	801737e <__b2d+0x82>
 801737a:	3d04      	subs	r5, #4
 801737c:	6829      	ldr	r1, [r5, #0]
 801737e:	4664      	mov	r4, ip
 8017380:	40c1      	lsrs	r1, r0
 8017382:	40a7      	lsls	r7, r4
 8017384:	430f      	orrs	r7, r1
 8017386:	003a      	movs	r2, r7
 8017388:	e7de      	b.n	8017348 <__b2d+0x4c>
 801738a:	4321      	orrs	r1, r4
 801738c:	000b      	movs	r3, r1
 801738e:	e7fa      	b.n	8017386 <__b2d+0x8a>
 8017390:	3ff00000 	.word	0x3ff00000

08017394 <__d2b>:
 8017394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017396:	001d      	movs	r5, r3
 8017398:	2101      	movs	r1, #1
 801739a:	0014      	movs	r4, r2
 801739c:	9f08      	ldr	r7, [sp, #32]
 801739e:	f7ff fce5 	bl	8016d6c <_Balloc>
 80173a2:	032b      	lsls	r3, r5, #12
 80173a4:	006d      	lsls	r5, r5, #1
 80173a6:	0006      	movs	r6, r0
 80173a8:	0b1b      	lsrs	r3, r3, #12
 80173aa:	0d6d      	lsrs	r5, r5, #21
 80173ac:	d124      	bne.n	80173f8 <__d2b+0x64>
 80173ae:	9301      	str	r3, [sp, #4]
 80173b0:	2c00      	cmp	r4, #0
 80173b2:	d027      	beq.n	8017404 <__d2b+0x70>
 80173b4:	4668      	mov	r0, sp
 80173b6:	9400      	str	r4, [sp, #0]
 80173b8:	f7ff fda0 	bl	8016efc <__lo0bits>
 80173bc:	9c00      	ldr	r4, [sp, #0]
 80173be:	2800      	cmp	r0, #0
 80173c0:	d01e      	beq.n	8017400 <__d2b+0x6c>
 80173c2:	9b01      	ldr	r3, [sp, #4]
 80173c4:	2120      	movs	r1, #32
 80173c6:	001a      	movs	r2, r3
 80173c8:	1a09      	subs	r1, r1, r0
 80173ca:	408a      	lsls	r2, r1
 80173cc:	40c3      	lsrs	r3, r0
 80173ce:	4322      	orrs	r2, r4
 80173d0:	6172      	str	r2, [r6, #20]
 80173d2:	9301      	str	r3, [sp, #4]
 80173d4:	9c01      	ldr	r4, [sp, #4]
 80173d6:	61b4      	str	r4, [r6, #24]
 80173d8:	1e63      	subs	r3, r4, #1
 80173da:	419c      	sbcs	r4, r3
 80173dc:	3401      	adds	r4, #1
 80173de:	6134      	str	r4, [r6, #16]
 80173e0:	2d00      	cmp	r5, #0
 80173e2:	d018      	beq.n	8017416 <__d2b+0x82>
 80173e4:	4b12      	ldr	r3, [pc, #72]	; (8017430 <__d2b+0x9c>)
 80173e6:	18ed      	adds	r5, r5, r3
 80173e8:	2335      	movs	r3, #53	; 0x35
 80173ea:	182d      	adds	r5, r5, r0
 80173ec:	603d      	str	r5, [r7, #0]
 80173ee:	1a18      	subs	r0, r3, r0
 80173f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173f2:	6018      	str	r0, [r3, #0]
 80173f4:	0030      	movs	r0, r6
 80173f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80173f8:	2280      	movs	r2, #128	; 0x80
 80173fa:	0352      	lsls	r2, r2, #13
 80173fc:	4313      	orrs	r3, r2
 80173fe:	e7d6      	b.n	80173ae <__d2b+0x1a>
 8017400:	6174      	str	r4, [r6, #20]
 8017402:	e7e7      	b.n	80173d4 <__d2b+0x40>
 8017404:	a801      	add	r0, sp, #4
 8017406:	f7ff fd79 	bl	8016efc <__lo0bits>
 801740a:	2401      	movs	r4, #1
 801740c:	9b01      	ldr	r3, [sp, #4]
 801740e:	6134      	str	r4, [r6, #16]
 8017410:	6173      	str	r3, [r6, #20]
 8017412:	3020      	adds	r0, #32
 8017414:	e7e4      	b.n	80173e0 <__d2b+0x4c>
 8017416:	4b07      	ldr	r3, [pc, #28]	; (8017434 <__d2b+0xa0>)
 8017418:	18c0      	adds	r0, r0, r3
 801741a:	4b07      	ldr	r3, [pc, #28]	; (8017438 <__d2b+0xa4>)
 801741c:	6038      	str	r0, [r7, #0]
 801741e:	18e3      	adds	r3, r4, r3
 8017420:	009b      	lsls	r3, r3, #2
 8017422:	18f3      	adds	r3, r6, r3
 8017424:	6958      	ldr	r0, [r3, #20]
 8017426:	f7ff fd4f 	bl	8016ec8 <__hi0bits>
 801742a:	0164      	lsls	r4, r4, #5
 801742c:	1a20      	subs	r0, r4, r0
 801742e:	e7df      	b.n	80173f0 <__d2b+0x5c>
 8017430:	fffffbcd 	.word	0xfffffbcd
 8017434:	fffffbce 	.word	0xfffffbce
 8017438:	3fffffff 	.word	0x3fffffff

0801743c <__ratio>:
 801743c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801743e:	b085      	sub	sp, #20
 8017440:	000f      	movs	r7, r1
 8017442:	a902      	add	r1, sp, #8
 8017444:	0006      	movs	r6, r0
 8017446:	f7ff ff59 	bl	80172fc <__b2d>
 801744a:	0004      	movs	r4, r0
 801744c:	000d      	movs	r5, r1
 801744e:	0038      	movs	r0, r7
 8017450:	a903      	add	r1, sp, #12
 8017452:	9400      	str	r4, [sp, #0]
 8017454:	9501      	str	r5, [sp, #4]
 8017456:	f7ff ff51 	bl	80172fc <__b2d>
 801745a:	6936      	ldr	r6, [r6, #16]
 801745c:	693f      	ldr	r7, [r7, #16]
 801745e:	0002      	movs	r2, r0
 8017460:	1bf7      	subs	r7, r6, r7
 8017462:	017e      	lsls	r6, r7, #5
 8017464:	46b4      	mov	ip, r6
 8017466:	9f03      	ldr	r7, [sp, #12]
 8017468:	9e02      	ldr	r6, [sp, #8]
 801746a:	000b      	movs	r3, r1
 801746c:	1bf6      	subs	r6, r6, r7
 801746e:	4466      	add	r6, ip
 8017470:	0537      	lsls	r7, r6, #20
 8017472:	2e00      	cmp	r6, #0
 8017474:	dd07      	ble.n	8017486 <__ratio+0x4a>
 8017476:	1979      	adds	r1, r7, r5
 8017478:	9101      	str	r1, [sp, #4]
 801747a:	9800      	ldr	r0, [sp, #0]
 801747c:	9901      	ldr	r1, [sp, #4]
 801747e:	f7ea f8cf 	bl	8001620 <__aeabi_ddiv>
 8017482:	b005      	add	sp, #20
 8017484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017486:	1bcb      	subs	r3, r1, r7
 8017488:	e7f7      	b.n	801747a <__ratio+0x3e>

0801748a <__copybits>:
 801748a:	0013      	movs	r3, r2
 801748c:	3901      	subs	r1, #1
 801748e:	b510      	push	{r4, lr}
 8017490:	1149      	asrs	r1, r1, #5
 8017492:	6912      	ldr	r2, [r2, #16]
 8017494:	3101      	adds	r1, #1
 8017496:	0089      	lsls	r1, r1, #2
 8017498:	3314      	adds	r3, #20
 801749a:	0092      	lsls	r2, r2, #2
 801749c:	1841      	adds	r1, r0, r1
 801749e:	189a      	adds	r2, r3, r2
 80174a0:	429a      	cmp	r2, r3
 80174a2:	d803      	bhi.n	80174ac <__copybits+0x22>
 80174a4:	2300      	movs	r3, #0
 80174a6:	4281      	cmp	r1, r0
 80174a8:	d803      	bhi.n	80174b2 <__copybits+0x28>
 80174aa:	bd10      	pop	{r4, pc}
 80174ac:	cb10      	ldmia	r3!, {r4}
 80174ae:	c010      	stmia	r0!, {r4}
 80174b0:	e7f6      	b.n	80174a0 <__copybits+0x16>
 80174b2:	c008      	stmia	r0!, {r3}
 80174b4:	e7f7      	b.n	80174a6 <__copybits+0x1c>

080174b6 <__any_on>:
 80174b6:	0002      	movs	r2, r0
 80174b8:	6900      	ldr	r0, [r0, #16]
 80174ba:	b510      	push	{r4, lr}
 80174bc:	3214      	adds	r2, #20
 80174be:	114b      	asrs	r3, r1, #5
 80174c0:	4298      	cmp	r0, r3
 80174c2:	db12      	blt.n	80174ea <__any_on+0x34>
 80174c4:	dd0b      	ble.n	80174de <__any_on+0x28>
 80174c6:	201f      	movs	r0, #31
 80174c8:	4001      	ands	r1, r0
 80174ca:	d008      	beq.n	80174de <__any_on+0x28>
 80174cc:	0098      	lsls	r0, r3, #2
 80174ce:	5884      	ldr	r4, [r0, r2]
 80174d0:	0020      	movs	r0, r4
 80174d2:	40c8      	lsrs	r0, r1
 80174d4:	4088      	lsls	r0, r1
 80174d6:	0001      	movs	r1, r0
 80174d8:	2001      	movs	r0, #1
 80174da:	428c      	cmp	r4, r1
 80174dc:	d104      	bne.n	80174e8 <__any_on+0x32>
 80174de:	009b      	lsls	r3, r3, #2
 80174e0:	18d3      	adds	r3, r2, r3
 80174e2:	4293      	cmp	r3, r2
 80174e4:	d803      	bhi.n	80174ee <__any_on+0x38>
 80174e6:	2000      	movs	r0, #0
 80174e8:	bd10      	pop	{r4, pc}
 80174ea:	0003      	movs	r3, r0
 80174ec:	e7f7      	b.n	80174de <__any_on+0x28>
 80174ee:	3b04      	subs	r3, #4
 80174f0:	6819      	ldr	r1, [r3, #0]
 80174f2:	2900      	cmp	r1, #0
 80174f4:	d0f5      	beq.n	80174e2 <__any_on+0x2c>
 80174f6:	2001      	movs	r0, #1
 80174f8:	e7f6      	b.n	80174e8 <__any_on+0x32>
	...

080174fc <frexp>:
 80174fc:	b570      	push	{r4, r5, r6, lr}
 80174fe:	0014      	movs	r4, r2
 8017500:	2500      	movs	r5, #0
 8017502:	6025      	str	r5, [r4, #0]
 8017504:	4d10      	ldr	r5, [pc, #64]	; (8017548 <frexp+0x4c>)
 8017506:	004b      	lsls	r3, r1, #1
 8017508:	000a      	movs	r2, r1
 801750a:	085b      	lsrs	r3, r3, #1
 801750c:	42ab      	cmp	r3, r5
 801750e:	dc1a      	bgt.n	8017546 <frexp+0x4a>
 8017510:	001d      	movs	r5, r3
 8017512:	4305      	orrs	r5, r0
 8017514:	d017      	beq.n	8017546 <frexp+0x4a>
 8017516:	4d0d      	ldr	r5, [pc, #52]	; (801754c <frexp+0x50>)
 8017518:	42ab      	cmp	r3, r5
 801751a:	dc09      	bgt.n	8017530 <frexp+0x34>
 801751c:	2200      	movs	r2, #0
 801751e:	4b0c      	ldr	r3, [pc, #48]	; (8017550 <frexp+0x54>)
 8017520:	f7ea fc88 	bl	8001e34 <__aeabi_dmul>
 8017524:	2536      	movs	r5, #54	; 0x36
 8017526:	000a      	movs	r2, r1
 8017528:	004b      	lsls	r3, r1, #1
 801752a:	426d      	negs	r5, r5
 801752c:	085b      	lsrs	r3, r3, #1
 801752e:	6025      	str	r5, [r4, #0]
 8017530:	4d08      	ldr	r5, [pc, #32]	; (8017554 <frexp+0x58>)
 8017532:	151b      	asrs	r3, r3, #20
 8017534:	195b      	adds	r3, r3, r5
 8017536:	6825      	ldr	r5, [r4, #0]
 8017538:	18eb      	adds	r3, r5, r3
 801753a:	6023      	str	r3, [r4, #0]
 801753c:	4b06      	ldr	r3, [pc, #24]	; (8017558 <frexp+0x5c>)
 801753e:	401a      	ands	r2, r3
 8017540:	4b06      	ldr	r3, [pc, #24]	; (801755c <frexp+0x60>)
 8017542:	4313      	orrs	r3, r2
 8017544:	0019      	movs	r1, r3
 8017546:	bd70      	pop	{r4, r5, r6, pc}
 8017548:	7fefffff 	.word	0x7fefffff
 801754c:	000fffff 	.word	0x000fffff
 8017550:	43500000 	.word	0x43500000
 8017554:	fffffc02 	.word	0xfffffc02
 8017558:	800fffff 	.word	0x800fffff
 801755c:	3fe00000 	.word	0x3fe00000

08017560 <__ssprint_r>:
 8017560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017562:	6893      	ldr	r3, [r2, #8]
 8017564:	b087      	sub	sp, #28
 8017566:	9002      	str	r0, [sp, #8]
 8017568:	000c      	movs	r4, r1
 801756a:	0016      	movs	r6, r2
 801756c:	2b00      	cmp	r3, #0
 801756e:	d063      	beq.n	8017638 <__ssprint_r+0xd8>
 8017570:	6813      	ldr	r3, [r2, #0]
 8017572:	9303      	str	r3, [sp, #12]
 8017574:	2300      	movs	r3, #0
 8017576:	001f      	movs	r7, r3
 8017578:	9305      	str	r3, [sp, #20]
 801757a:	2f00      	cmp	r7, #0
 801757c:	d02e      	beq.n	80175dc <__ssprint_r+0x7c>
 801757e:	68a5      	ldr	r5, [r4, #8]
 8017580:	42af      	cmp	r7, r5
 8017582:	d347      	bcc.n	8017614 <__ssprint_r+0xb4>
 8017584:	2390      	movs	r3, #144	; 0x90
 8017586:	89a2      	ldrh	r2, [r4, #12]
 8017588:	00db      	lsls	r3, r3, #3
 801758a:	421a      	tst	r2, r3
 801758c:	d042      	beq.n	8017614 <__ssprint_r+0xb4>
 801758e:	2003      	movs	r0, #3
 8017590:	6921      	ldr	r1, [r4, #16]
 8017592:	6823      	ldr	r3, [r4, #0]
 8017594:	1a5b      	subs	r3, r3, r1
 8017596:	9304      	str	r3, [sp, #16]
 8017598:	6963      	ldr	r3, [r4, #20]
 801759a:	4343      	muls	r3, r0
 801759c:	0fd8      	lsrs	r0, r3, #31
 801759e:	18c3      	adds	r3, r0, r3
 80175a0:	105b      	asrs	r3, r3, #1
 80175a2:	9301      	str	r3, [sp, #4]
 80175a4:	9b04      	ldr	r3, [sp, #16]
 80175a6:	9801      	ldr	r0, [sp, #4]
 80175a8:	3301      	adds	r3, #1
 80175aa:	19db      	adds	r3, r3, r7
 80175ac:	4283      	cmp	r3, r0
 80175ae:	d900      	bls.n	80175b2 <__ssprint_r+0x52>
 80175b0:	9301      	str	r3, [sp, #4]
 80175b2:	0553      	lsls	r3, r2, #21
 80175b4:	d544      	bpl.n	8017640 <__ssprint_r+0xe0>
 80175b6:	9901      	ldr	r1, [sp, #4]
 80175b8:	9802      	ldr	r0, [sp, #8]
 80175ba:	f7fb fab7 	bl	8012b2c <_malloc_r>
 80175be:	1e05      	subs	r5, r0, #0
 80175c0:	d114      	bne.n	80175ec <__ssprint_r+0x8c>
 80175c2:	230c      	movs	r3, #12
 80175c4:	9a02      	ldr	r2, [sp, #8]
 80175c6:	2001      	movs	r0, #1
 80175c8:	6013      	str	r3, [r2, #0]
 80175ca:	2340      	movs	r3, #64	; 0x40
 80175cc:	89a2      	ldrh	r2, [r4, #12]
 80175ce:	4240      	negs	r0, r0
 80175d0:	4313      	orrs	r3, r2
 80175d2:	81a3      	strh	r3, [r4, #12]
 80175d4:	2300      	movs	r3, #0
 80175d6:	60b3      	str	r3, [r6, #8]
 80175d8:	6073      	str	r3, [r6, #4]
 80175da:	e02f      	b.n	801763c <__ssprint_r+0xdc>
 80175dc:	9b03      	ldr	r3, [sp, #12]
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	9305      	str	r3, [sp, #20]
 80175e2:	9b03      	ldr	r3, [sp, #12]
 80175e4:	685f      	ldr	r7, [r3, #4]
 80175e6:	3308      	adds	r3, #8
 80175e8:	9303      	str	r3, [sp, #12]
 80175ea:	e7c6      	b.n	801757a <__ssprint_r+0x1a>
 80175ec:	9a04      	ldr	r2, [sp, #16]
 80175ee:	6921      	ldr	r1, [r4, #16]
 80175f0:	f7fb fcd5 	bl	8012f9e <memcpy>
 80175f4:	89a3      	ldrh	r3, [r4, #12]
 80175f6:	4a18      	ldr	r2, [pc, #96]	; (8017658 <__ssprint_r+0xf8>)
 80175f8:	401a      	ands	r2, r3
 80175fa:	2380      	movs	r3, #128	; 0x80
 80175fc:	4313      	orrs	r3, r2
 80175fe:	81a3      	strh	r3, [r4, #12]
 8017600:	9b04      	ldr	r3, [sp, #16]
 8017602:	6125      	str	r5, [r4, #16]
 8017604:	18ed      	adds	r5, r5, r3
 8017606:	6025      	str	r5, [r4, #0]
 8017608:	003d      	movs	r5, r7
 801760a:	9b01      	ldr	r3, [sp, #4]
 801760c:	9a04      	ldr	r2, [sp, #16]
 801760e:	6163      	str	r3, [r4, #20]
 8017610:	1a9b      	subs	r3, r3, r2
 8017612:	60a3      	str	r3, [r4, #8]
 8017614:	42bd      	cmp	r5, r7
 8017616:	d900      	bls.n	801761a <__ssprint_r+0xba>
 8017618:	003d      	movs	r5, r7
 801761a:	002a      	movs	r2, r5
 801761c:	9905      	ldr	r1, [sp, #20]
 801761e:	6820      	ldr	r0, [r4, #0]
 8017620:	f7ff fb91 	bl	8016d46 <memmove>
 8017624:	68a3      	ldr	r3, [r4, #8]
 8017626:	1b5b      	subs	r3, r3, r5
 8017628:	60a3      	str	r3, [r4, #8]
 801762a:	6823      	ldr	r3, [r4, #0]
 801762c:	195d      	adds	r5, r3, r5
 801762e:	68b3      	ldr	r3, [r6, #8]
 8017630:	6025      	str	r5, [r4, #0]
 8017632:	1bdb      	subs	r3, r3, r7
 8017634:	60b3      	str	r3, [r6, #8]
 8017636:	d1d1      	bne.n	80175dc <__ssprint_r+0x7c>
 8017638:	2000      	movs	r0, #0
 801763a:	6070      	str	r0, [r6, #4]
 801763c:	b007      	add	sp, #28
 801763e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017640:	9a01      	ldr	r2, [sp, #4]
 8017642:	9802      	ldr	r0, [sp, #8]
 8017644:	f7fb fcf0 	bl	8013028 <_realloc_r>
 8017648:	1e05      	subs	r5, r0, #0
 801764a:	d1d9      	bne.n	8017600 <__ssprint_r+0xa0>
 801764c:	6921      	ldr	r1, [r4, #16]
 801764e:	9802      	ldr	r0, [sp, #8]
 8017650:	f7fe ff78 	bl	8016544 <_free_r>
 8017654:	e7b5      	b.n	80175c2 <__ssprint_r+0x62>
 8017656:	46c0      	nop			; (mov r8, r8)
 8017658:	fffffb7f 	.word	0xfffffb7f

0801765c <__register_exitproc>:
 801765c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801765e:	4d29      	ldr	r5, [pc, #164]	; (8017704 <__register_exitproc+0xa8>)
 8017660:	0006      	movs	r6, r0
 8017662:	6828      	ldr	r0, [r5, #0]
 8017664:	9301      	str	r3, [sp, #4]
 8017666:	9100      	str	r1, [sp, #0]
 8017668:	0017      	movs	r7, r2
 801766a:	f7ff fb5f 	bl	8016d2c <__retarget_lock_acquire_recursive>
 801766e:	4b26      	ldr	r3, [pc, #152]	; (8017708 <__register_exitproc+0xac>)
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	001c      	movs	r4, r3
 8017674:	34fc      	adds	r4, #252	; 0xfc
 8017676:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017678:	2800      	cmp	r0, #0
 801767a:	d103      	bne.n	8017684 <__register_exitproc+0x28>
 801767c:	334d      	adds	r3, #77	; 0x4d
 801767e:	33ff      	adds	r3, #255	; 0xff
 8017680:	0018      	movs	r0, r3
 8017682:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017684:	6843      	ldr	r3, [r0, #4]
 8017686:	2b1f      	cmp	r3, #31
 8017688:	dd18      	ble.n	80176bc <__register_exitproc+0x60>
 801768a:	4b20      	ldr	r3, [pc, #128]	; (801770c <__register_exitproc+0xb0>)
 801768c:	2b00      	cmp	r3, #0
 801768e:	d105      	bne.n	801769c <__register_exitproc+0x40>
 8017690:	6828      	ldr	r0, [r5, #0]
 8017692:	f7ff fb4c 	bl	8016d2e <__retarget_lock_release_recursive>
 8017696:	2001      	movs	r0, #1
 8017698:	4240      	negs	r0, r0
 801769a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801769c:	20c8      	movs	r0, #200	; 0xc8
 801769e:	0040      	lsls	r0, r0, #1
 80176a0:	f7fb fa30 	bl	8012b04 <malloc>
 80176a4:	2800      	cmp	r0, #0
 80176a6:	d0f3      	beq.n	8017690 <__register_exitproc+0x34>
 80176a8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80176aa:	2300      	movs	r3, #0
 80176ac:	6002      	str	r2, [r0, #0]
 80176ae:	22c4      	movs	r2, #196	; 0xc4
 80176b0:	0052      	lsls	r2, r2, #1
 80176b2:	6043      	str	r3, [r0, #4]
 80176b4:	64e0      	str	r0, [r4, #76]	; 0x4c
 80176b6:	5083      	str	r3, [r0, r2]
 80176b8:	3204      	adds	r2, #4
 80176ba:	5083      	str	r3, [r0, r2]
 80176bc:	6843      	ldr	r3, [r0, #4]
 80176be:	2e00      	cmp	r6, #0
 80176c0:	d014      	beq.n	80176ec <__register_exitproc+0x90>
 80176c2:	009a      	lsls	r2, r3, #2
 80176c4:	1882      	adds	r2, r0, r2
 80176c6:	0011      	movs	r1, r2
 80176c8:	3188      	adds	r1, #136	; 0x88
 80176ca:	600f      	str	r7, [r1, #0]
 80176cc:	2101      	movs	r1, #1
 80176ce:	0004      	movs	r4, r0
 80176d0:	4099      	lsls	r1, r3
 80176d2:	3485      	adds	r4, #133	; 0x85
 80176d4:	34ff      	adds	r4, #255	; 0xff
 80176d6:	6865      	ldr	r5, [r4, #4]
 80176d8:	32fc      	adds	r2, #252	; 0xfc
 80176da:	430d      	orrs	r5, r1
 80176dc:	6065      	str	r5, [r4, #4]
 80176de:	9d01      	ldr	r5, [sp, #4]
 80176e0:	60d5      	str	r5, [r2, #12]
 80176e2:	2e02      	cmp	r6, #2
 80176e4:	d102      	bne.n	80176ec <__register_exitproc+0x90>
 80176e6:	68a2      	ldr	r2, [r4, #8]
 80176e8:	4311      	orrs	r1, r2
 80176ea:	60a1      	str	r1, [r4, #8]
 80176ec:	1c5a      	adds	r2, r3, #1
 80176ee:	6042      	str	r2, [r0, #4]
 80176f0:	3302      	adds	r3, #2
 80176f2:	9a00      	ldr	r2, [sp, #0]
 80176f4:	009b      	lsls	r3, r3, #2
 80176f6:	501a      	str	r2, [r3, r0]
 80176f8:	4b02      	ldr	r3, [pc, #8]	; (8017704 <__register_exitproc+0xa8>)
 80176fa:	6818      	ldr	r0, [r3, #0]
 80176fc:	f7ff fb17 	bl	8016d2e <__retarget_lock_release_recursive>
 8017700:	2000      	movs	r0, #0
 8017702:	e7ca      	b.n	801769a <__register_exitproc+0x3e>
 8017704:	20000a54 	.word	0x20000a54
 8017708:	0801a638 	.word	0x0801a638
 801770c:	08012b05 	.word	0x08012b05

08017710 <_calloc_r>:
 8017710:	b510      	push	{r4, lr}
 8017712:	4351      	muls	r1, r2
 8017714:	f7fb fa0a 	bl	8012b2c <_malloc_r>
 8017718:	1e04      	subs	r4, r0, #0
 801771a:	d01a      	beq.n	8017752 <_calloc_r+0x42>
 801771c:	0003      	movs	r3, r0
 801771e:	3b08      	subs	r3, #8
 8017720:	685a      	ldr	r2, [r3, #4]
 8017722:	2303      	movs	r3, #3
 8017724:	439a      	bics	r2, r3
 8017726:	3a04      	subs	r2, #4
 8017728:	2a24      	cmp	r2, #36	; 0x24
 801772a:	d819      	bhi.n	8017760 <_calloc_r+0x50>
 801772c:	0003      	movs	r3, r0
 801772e:	2a13      	cmp	r2, #19
 8017730:	d90b      	bls.n	801774a <_calloc_r+0x3a>
 8017732:	2100      	movs	r1, #0
 8017734:	3308      	adds	r3, #8
 8017736:	6001      	str	r1, [r0, #0]
 8017738:	6041      	str	r1, [r0, #4]
 801773a:	2a1b      	cmp	r2, #27
 801773c:	d905      	bls.n	801774a <_calloc_r+0x3a>
 801773e:	6081      	str	r1, [r0, #8]
 8017740:	60c1      	str	r1, [r0, #12]
 8017742:	2a24      	cmp	r2, #36	; 0x24
 8017744:	d007      	beq.n	8017756 <_calloc_r+0x46>
 8017746:	0003      	movs	r3, r0
 8017748:	3310      	adds	r3, #16
 801774a:	2200      	movs	r2, #0
 801774c:	601a      	str	r2, [r3, #0]
 801774e:	605a      	str	r2, [r3, #4]
 8017750:	609a      	str	r2, [r3, #8]
 8017752:	0020      	movs	r0, r4
 8017754:	bd10      	pop	{r4, pc}
 8017756:	0003      	movs	r3, r0
 8017758:	6101      	str	r1, [r0, #16]
 801775a:	3318      	adds	r3, #24
 801775c:	6141      	str	r1, [r0, #20]
 801775e:	e7f4      	b.n	801774a <_calloc_r+0x3a>
 8017760:	2100      	movs	r1, #0
 8017762:	f7fb fc25 	bl	8012fb0 <memset>
 8017766:	e7f4      	b.n	8017752 <_calloc_r+0x42>

08017768 <_sbrk>:
 8017768:	4b05      	ldr	r3, [pc, #20]	; (8017780 <_sbrk+0x18>)
 801776a:	0002      	movs	r2, r0
 801776c:	6819      	ldr	r1, [r3, #0]
 801776e:	2900      	cmp	r1, #0
 8017770:	d101      	bne.n	8017776 <_sbrk+0xe>
 8017772:	4904      	ldr	r1, [pc, #16]	; (8017784 <_sbrk+0x1c>)
 8017774:	6019      	str	r1, [r3, #0]
 8017776:	6818      	ldr	r0, [r3, #0]
 8017778:	1882      	adds	r2, r0, r2
 801777a:	601a      	str	r2, [r3, #0]
 801777c:	4770      	bx	lr
 801777e:	46c0      	nop			; (mov r8, r8)
 8017780:	20006944 	.word	0x20006944
 8017784:	20006ee8 	.word	0x20006ee8

08017788 <_init>:
 8017788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801778a:	46c0      	nop			; (mov r8, r8)
 801778c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801778e:	bc08      	pop	{r3}
 8017790:	469e      	mov	lr, r3
 8017792:	4770      	bx	lr

08017794 <_fini>:
 8017794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017796:	46c0      	nop			; (mov r8, r8)
 8017798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801779a:	bc08      	pop	{r3}
 801779c:	469e      	mov	lr, r3
 801779e:	4770      	bx	lr
