
H23R3x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001619c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e1c  08016258  08016258  00026258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019074  08019074  00030a58  2**0
                  CONTENTS
  4 .ARM          00000008  08019074  08019074  00029074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801907c  0801907c  00030a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801907c  0801907c  0002907c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019084  08019084  00029084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a58  20000000  08019088  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006408  20000a58  08019ae0  00030a58  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006e60  08019ae0  00036e60  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030a58  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004d138  00000000  00000000  00030a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008594  00000000  00000000  0007dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018714  00000000  00000000  0008614c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001ac8  00000000  00000000  0009e860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001e48  00000000  00000000  000a0328  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000156c5  00000000  00000000  000a2170  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009eff  00000000  00000000  000b7835  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c1734  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b2c  00000000  00000000  000c17b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a58 	.word	0x20000a58
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08016240 	.word	0x08016240

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a5c 	.word	0x20000a5c
 8000100:	08016240 	.word	0x08016240

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 f91b 	bl	8001688 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 f873 	bl	8001548 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f90d 	bl	8001688 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f903 	bl	8001688 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f895 	bl	80015c0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 f88b 	bl	80015c0 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9d3 	bl	800086c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f955 	bl	8000780 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9c5 	bl	800086c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9bb 	bl	800086c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f963 	bl	80007d0 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f959 	bl	80007d0 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f84e 	bl	80005fc <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_d2uiz>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	2200      	movs	r2, #0
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <__aeabi_d2uiz+0x38>)
 80005c6:	0004      	movs	r4, r0
 80005c8:	000d      	movs	r5, r1
 80005ca:	f7ff ff6b 	bl	80004a4 <__aeabi_dcmpge>
 80005ce:	2800      	cmp	r0, #0
 80005d0:	d104      	bne.n	80005dc <__aeabi_d2uiz+0x1c>
 80005d2:	0020      	movs	r0, r4
 80005d4:	0029      	movs	r1, r5
 80005d6:	f001 fe95 	bl	8002304 <__aeabi_d2iz>
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__aeabi_d2uiz+0x38>)
 80005de:	2200      	movs	r2, #0
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fb2a 	bl	8001c3c <__aeabi_dsub>
 80005e8:	f001 fe8c 	bl	8002304 <__aeabi_d2iz>
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	061b      	lsls	r3, r3, #24
 80005f0:	469c      	mov	ip, r3
 80005f2:	4460      	add	r0, ip
 80005f4:	e7f1      	b.n	80005da <__aeabi_d2uiz+0x1a>
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	41e00000 	.word	0x41e00000

080005fc <__udivmoddi4>:
 80005fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fe:	464f      	mov	r7, r9
 8000600:	4646      	mov	r6, r8
 8000602:	46d6      	mov	lr, sl
 8000604:	b5c0      	push	{r6, r7, lr}
 8000606:	0004      	movs	r4, r0
 8000608:	b082      	sub	sp, #8
 800060a:	000d      	movs	r5, r1
 800060c:	4691      	mov	r9, r2
 800060e:	4698      	mov	r8, r3
 8000610:	428b      	cmp	r3, r1
 8000612:	d82f      	bhi.n	8000674 <__udivmoddi4+0x78>
 8000614:	d02c      	beq.n	8000670 <__udivmoddi4+0x74>
 8000616:	4641      	mov	r1, r8
 8000618:	4648      	mov	r0, r9
 800061a:	f002 f809 	bl	8002630 <__clzdi2>
 800061e:	0029      	movs	r1, r5
 8000620:	0006      	movs	r6, r0
 8000622:	0020      	movs	r0, r4
 8000624:	f002 f804 	bl	8002630 <__clzdi2>
 8000628:	1a33      	subs	r3, r6, r0
 800062a:	469c      	mov	ip, r3
 800062c:	3b20      	subs	r3, #32
 800062e:	469a      	mov	sl, r3
 8000630:	d500      	bpl.n	8000634 <__udivmoddi4+0x38>
 8000632:	e076      	b.n	8000722 <__udivmoddi4+0x126>
 8000634:	464b      	mov	r3, r9
 8000636:	4652      	mov	r2, sl
 8000638:	4093      	lsls	r3, r2
 800063a:	001f      	movs	r7, r3
 800063c:	464b      	mov	r3, r9
 800063e:	4662      	mov	r2, ip
 8000640:	4093      	lsls	r3, r2
 8000642:	001e      	movs	r6, r3
 8000644:	42af      	cmp	r7, r5
 8000646:	d828      	bhi.n	800069a <__udivmoddi4+0x9e>
 8000648:	d025      	beq.n	8000696 <__udivmoddi4+0x9a>
 800064a:	4653      	mov	r3, sl
 800064c:	1ba4      	subs	r4, r4, r6
 800064e:	41bd      	sbcs	r5, r7
 8000650:	2b00      	cmp	r3, #0
 8000652:	da00      	bge.n	8000656 <__udivmoddi4+0x5a>
 8000654:	e07b      	b.n	800074e <__udivmoddi4+0x152>
 8000656:	2200      	movs	r2, #0
 8000658:	2300      	movs	r3, #0
 800065a:	9200      	str	r2, [sp, #0]
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	2301      	movs	r3, #1
 8000660:	4652      	mov	r2, sl
 8000662:	4093      	lsls	r3, r2
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2301      	movs	r3, #1
 8000668:	4662      	mov	r2, ip
 800066a:	4093      	lsls	r3, r2
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	e018      	b.n	80006a2 <__udivmoddi4+0xa6>
 8000670:	4282      	cmp	r2, r0
 8000672:	d9d0      	bls.n	8000616 <__udivmoddi4+0x1a>
 8000674:	2200      	movs	r2, #0
 8000676:	2300      	movs	r3, #0
 8000678:	9200      	str	r2, [sp, #0]
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <__udivmoddi4+0x8a>
 8000682:	601c      	str	r4, [r3, #0]
 8000684:	605d      	str	r5, [r3, #4]
 8000686:	9800      	ldr	r0, [sp, #0]
 8000688:	9901      	ldr	r1, [sp, #4]
 800068a:	b002      	add	sp, #8
 800068c:	bc1c      	pop	{r2, r3, r4}
 800068e:	4690      	mov	r8, r2
 8000690:	4699      	mov	r9, r3
 8000692:	46a2      	mov	sl, r4
 8000694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000696:	42a3      	cmp	r3, r4
 8000698:	d9d7      	bls.n	800064a <__udivmoddi4+0x4e>
 800069a:	2200      	movs	r2, #0
 800069c:	2300      	movs	r3, #0
 800069e:	9200      	str	r2, [sp, #0]
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	4663      	mov	r3, ip
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d0e9      	beq.n	800067c <__udivmoddi4+0x80>
 80006a8:	07fb      	lsls	r3, r7, #31
 80006aa:	4698      	mov	r8, r3
 80006ac:	4641      	mov	r1, r8
 80006ae:	0872      	lsrs	r2, r6, #1
 80006b0:	430a      	orrs	r2, r1
 80006b2:	087b      	lsrs	r3, r7, #1
 80006b4:	4666      	mov	r6, ip
 80006b6:	e00e      	b.n	80006d6 <__udivmoddi4+0xda>
 80006b8:	42ab      	cmp	r3, r5
 80006ba:	d101      	bne.n	80006c0 <__udivmoddi4+0xc4>
 80006bc:	42a2      	cmp	r2, r4
 80006be:	d80c      	bhi.n	80006da <__udivmoddi4+0xde>
 80006c0:	1aa4      	subs	r4, r4, r2
 80006c2:	419d      	sbcs	r5, r3
 80006c4:	2001      	movs	r0, #1
 80006c6:	1924      	adds	r4, r4, r4
 80006c8:	416d      	adcs	r5, r5
 80006ca:	2100      	movs	r1, #0
 80006cc:	3e01      	subs	r6, #1
 80006ce:	1824      	adds	r4, r4, r0
 80006d0:	414d      	adcs	r5, r1
 80006d2:	2e00      	cmp	r6, #0
 80006d4:	d006      	beq.n	80006e4 <__udivmoddi4+0xe8>
 80006d6:	42ab      	cmp	r3, r5
 80006d8:	d9ee      	bls.n	80006b8 <__udivmoddi4+0xbc>
 80006da:	3e01      	subs	r6, #1
 80006dc:	1924      	adds	r4, r4, r4
 80006de:	416d      	adcs	r5, r5
 80006e0:	2e00      	cmp	r6, #0
 80006e2:	d1f8      	bne.n	80006d6 <__udivmoddi4+0xda>
 80006e4:	9800      	ldr	r0, [sp, #0]
 80006e6:	9901      	ldr	r1, [sp, #4]
 80006e8:	4653      	mov	r3, sl
 80006ea:	1900      	adds	r0, r0, r4
 80006ec:	4169      	adcs	r1, r5
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	db23      	blt.n	800073a <__udivmoddi4+0x13e>
 80006f2:	002b      	movs	r3, r5
 80006f4:	4652      	mov	r2, sl
 80006f6:	40d3      	lsrs	r3, r2
 80006f8:	002a      	movs	r2, r5
 80006fa:	4664      	mov	r4, ip
 80006fc:	40e2      	lsrs	r2, r4
 80006fe:	001c      	movs	r4, r3
 8000700:	4653      	mov	r3, sl
 8000702:	0015      	movs	r5, r2
 8000704:	2b00      	cmp	r3, #0
 8000706:	db2d      	blt.n	8000764 <__udivmoddi4+0x168>
 8000708:	0026      	movs	r6, r4
 800070a:	4657      	mov	r7, sl
 800070c:	40be      	lsls	r6, r7
 800070e:	0033      	movs	r3, r6
 8000710:	0026      	movs	r6, r4
 8000712:	4667      	mov	r7, ip
 8000714:	40be      	lsls	r6, r7
 8000716:	0032      	movs	r2, r6
 8000718:	1a80      	subs	r0, r0, r2
 800071a:	4199      	sbcs	r1, r3
 800071c:	9000      	str	r0, [sp, #0]
 800071e:	9101      	str	r1, [sp, #4]
 8000720:	e7ac      	b.n	800067c <__udivmoddi4+0x80>
 8000722:	4662      	mov	r2, ip
 8000724:	2320      	movs	r3, #32
 8000726:	1a9b      	subs	r3, r3, r2
 8000728:	464a      	mov	r2, r9
 800072a:	40da      	lsrs	r2, r3
 800072c:	4661      	mov	r1, ip
 800072e:	0013      	movs	r3, r2
 8000730:	4642      	mov	r2, r8
 8000732:	408a      	lsls	r2, r1
 8000734:	0017      	movs	r7, r2
 8000736:	431f      	orrs	r7, r3
 8000738:	e780      	b.n	800063c <__udivmoddi4+0x40>
 800073a:	4662      	mov	r2, ip
 800073c:	2320      	movs	r3, #32
 800073e:	1a9b      	subs	r3, r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	4666      	mov	r6, ip
 8000744:	409a      	lsls	r2, r3
 8000746:	0023      	movs	r3, r4
 8000748:	40f3      	lsrs	r3, r6
 800074a:	4313      	orrs	r3, r2
 800074c:	e7d4      	b.n	80006f8 <__udivmoddi4+0xfc>
 800074e:	4662      	mov	r2, ip
 8000750:	2320      	movs	r3, #32
 8000752:	2100      	movs	r1, #0
 8000754:	1a9b      	subs	r3, r3, r2
 8000756:	2200      	movs	r2, #0
 8000758:	9100      	str	r1, [sp, #0]
 800075a:	9201      	str	r2, [sp, #4]
 800075c:	2201      	movs	r2, #1
 800075e:	40da      	lsrs	r2, r3
 8000760:	9201      	str	r2, [sp, #4]
 8000762:	e780      	b.n	8000666 <__udivmoddi4+0x6a>
 8000764:	2320      	movs	r3, #32
 8000766:	4662      	mov	r2, ip
 8000768:	0026      	movs	r6, r4
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	40de      	lsrs	r6, r3
 800076e:	002f      	movs	r7, r5
 8000770:	46b0      	mov	r8, r6
 8000772:	4666      	mov	r6, ip
 8000774:	40b7      	lsls	r7, r6
 8000776:	4646      	mov	r6, r8
 8000778:	003b      	movs	r3, r7
 800077a:	4333      	orrs	r3, r6
 800077c:	e7c8      	b.n	8000710 <__udivmoddi4+0x114>
 800077e:	46c0      	nop			; (mov r8, r8)

08000780 <__eqsf2>:
 8000780:	b570      	push	{r4, r5, r6, lr}
 8000782:	0042      	lsls	r2, r0, #1
 8000784:	024e      	lsls	r6, r1, #9
 8000786:	004c      	lsls	r4, r1, #1
 8000788:	0245      	lsls	r5, r0, #9
 800078a:	0a6d      	lsrs	r5, r5, #9
 800078c:	0e12      	lsrs	r2, r2, #24
 800078e:	0fc3      	lsrs	r3, r0, #31
 8000790:	0a76      	lsrs	r6, r6, #9
 8000792:	0e24      	lsrs	r4, r4, #24
 8000794:	0fc9      	lsrs	r1, r1, #31
 8000796:	2aff      	cmp	r2, #255	; 0xff
 8000798:	d00f      	beq.n	80007ba <__eqsf2+0x3a>
 800079a:	2cff      	cmp	r4, #255	; 0xff
 800079c:	d011      	beq.n	80007c2 <__eqsf2+0x42>
 800079e:	2001      	movs	r0, #1
 80007a0:	42a2      	cmp	r2, r4
 80007a2:	d000      	beq.n	80007a6 <__eqsf2+0x26>
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	42b5      	cmp	r5, r6
 80007a8:	d1fc      	bne.n	80007a4 <__eqsf2+0x24>
 80007aa:	428b      	cmp	r3, r1
 80007ac:	d00d      	beq.n	80007ca <__eqsf2+0x4a>
 80007ae:	2a00      	cmp	r2, #0
 80007b0:	d1f8      	bne.n	80007a4 <__eqsf2+0x24>
 80007b2:	0028      	movs	r0, r5
 80007b4:	1e45      	subs	r5, r0, #1
 80007b6:	41a8      	sbcs	r0, r5
 80007b8:	e7f4      	b.n	80007a4 <__eqsf2+0x24>
 80007ba:	2001      	movs	r0, #1
 80007bc:	2d00      	cmp	r5, #0
 80007be:	d1f1      	bne.n	80007a4 <__eqsf2+0x24>
 80007c0:	e7eb      	b.n	800079a <__eqsf2+0x1a>
 80007c2:	2001      	movs	r0, #1
 80007c4:	2e00      	cmp	r6, #0
 80007c6:	d1ed      	bne.n	80007a4 <__eqsf2+0x24>
 80007c8:	e7e9      	b.n	800079e <__eqsf2+0x1e>
 80007ca:	2000      	movs	r0, #0
 80007cc:	e7ea      	b.n	80007a4 <__eqsf2+0x24>
 80007ce:	46c0      	nop			; (mov r8, r8)

080007d0 <__gesf2>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	004a      	lsls	r2, r1, #1
 80007d4:	024e      	lsls	r6, r1, #9
 80007d6:	0245      	lsls	r5, r0, #9
 80007d8:	0044      	lsls	r4, r0, #1
 80007da:	0a6d      	lsrs	r5, r5, #9
 80007dc:	0e24      	lsrs	r4, r4, #24
 80007de:	0fc3      	lsrs	r3, r0, #31
 80007e0:	0a76      	lsrs	r6, r6, #9
 80007e2:	0e12      	lsrs	r2, r2, #24
 80007e4:	0fc9      	lsrs	r1, r1, #31
 80007e6:	2cff      	cmp	r4, #255	; 0xff
 80007e8:	d015      	beq.n	8000816 <__gesf2+0x46>
 80007ea:	2aff      	cmp	r2, #255	; 0xff
 80007ec:	d00e      	beq.n	800080c <__gesf2+0x3c>
 80007ee:	2c00      	cmp	r4, #0
 80007f0:	d115      	bne.n	800081e <__gesf2+0x4e>
 80007f2:	2a00      	cmp	r2, #0
 80007f4:	d101      	bne.n	80007fa <__gesf2+0x2a>
 80007f6:	2e00      	cmp	r6, #0
 80007f8:	d01c      	beq.n	8000834 <__gesf2+0x64>
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	d014      	beq.n	8000828 <__gesf2+0x58>
 80007fe:	428b      	cmp	r3, r1
 8000800:	d027      	beq.n	8000852 <__gesf2+0x82>
 8000802:	2002      	movs	r0, #2
 8000804:	3b01      	subs	r3, #1
 8000806:	4018      	ands	r0, r3
 8000808:	3801      	subs	r0, #1
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	2e00      	cmp	r6, #0
 800080e:	d0ee      	beq.n	80007ee <__gesf2+0x1e>
 8000810:	2002      	movs	r0, #2
 8000812:	4240      	negs	r0, r0
 8000814:	e7f9      	b.n	800080a <__gesf2+0x3a>
 8000816:	2d00      	cmp	r5, #0
 8000818:	d1fa      	bne.n	8000810 <__gesf2+0x40>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d00e      	beq.n	800083c <__gesf2+0x6c>
 800081e:	2a00      	cmp	r2, #0
 8000820:	d10e      	bne.n	8000840 <__gesf2+0x70>
 8000822:	2e00      	cmp	r6, #0
 8000824:	d0ed      	beq.n	8000802 <__gesf2+0x32>
 8000826:	e00b      	b.n	8000840 <__gesf2+0x70>
 8000828:	2301      	movs	r3, #1
 800082a:	3901      	subs	r1, #1
 800082c:	4399      	bics	r1, r3
 800082e:	0008      	movs	r0, r1
 8000830:	3001      	adds	r0, #1
 8000832:	e7ea      	b.n	800080a <__gesf2+0x3a>
 8000834:	2000      	movs	r0, #0
 8000836:	2d00      	cmp	r5, #0
 8000838:	d0e7      	beq.n	800080a <__gesf2+0x3a>
 800083a:	e7e2      	b.n	8000802 <__gesf2+0x32>
 800083c:	2e00      	cmp	r6, #0
 800083e:	d1e7      	bne.n	8000810 <__gesf2+0x40>
 8000840:	428b      	cmp	r3, r1
 8000842:	d1de      	bne.n	8000802 <__gesf2+0x32>
 8000844:	4294      	cmp	r4, r2
 8000846:	dd05      	ble.n	8000854 <__gesf2+0x84>
 8000848:	2102      	movs	r1, #2
 800084a:	1e58      	subs	r0, r3, #1
 800084c:	4008      	ands	r0, r1
 800084e:	3801      	subs	r0, #1
 8000850:	e7db      	b.n	800080a <__gesf2+0x3a>
 8000852:	2400      	movs	r4, #0
 8000854:	42a2      	cmp	r2, r4
 8000856:	dc04      	bgt.n	8000862 <__gesf2+0x92>
 8000858:	42b5      	cmp	r5, r6
 800085a:	d8d2      	bhi.n	8000802 <__gesf2+0x32>
 800085c:	2000      	movs	r0, #0
 800085e:	42b5      	cmp	r5, r6
 8000860:	d2d3      	bcs.n	800080a <__gesf2+0x3a>
 8000862:	1e58      	subs	r0, r3, #1
 8000864:	2301      	movs	r3, #1
 8000866:	4398      	bics	r0, r3
 8000868:	3001      	adds	r0, #1
 800086a:	e7ce      	b.n	800080a <__gesf2+0x3a>

0800086c <__lesf2>:
 800086c:	b530      	push	{r4, r5, lr}
 800086e:	0042      	lsls	r2, r0, #1
 8000870:	0244      	lsls	r4, r0, #9
 8000872:	024d      	lsls	r5, r1, #9
 8000874:	0fc3      	lsrs	r3, r0, #31
 8000876:	0048      	lsls	r0, r1, #1
 8000878:	0a64      	lsrs	r4, r4, #9
 800087a:	0e12      	lsrs	r2, r2, #24
 800087c:	0a6d      	lsrs	r5, r5, #9
 800087e:	0e00      	lsrs	r0, r0, #24
 8000880:	0fc9      	lsrs	r1, r1, #31
 8000882:	2aff      	cmp	r2, #255	; 0xff
 8000884:	d012      	beq.n	80008ac <__lesf2+0x40>
 8000886:	28ff      	cmp	r0, #255	; 0xff
 8000888:	d00c      	beq.n	80008a4 <__lesf2+0x38>
 800088a:	2a00      	cmp	r2, #0
 800088c:	d112      	bne.n	80008b4 <__lesf2+0x48>
 800088e:	2800      	cmp	r0, #0
 8000890:	d119      	bne.n	80008c6 <__lesf2+0x5a>
 8000892:	2d00      	cmp	r5, #0
 8000894:	d117      	bne.n	80008c6 <__lesf2+0x5a>
 8000896:	2c00      	cmp	r4, #0
 8000898:	d02b      	beq.n	80008f2 <__lesf2+0x86>
 800089a:	2002      	movs	r0, #2
 800089c:	3b01      	subs	r3, #1
 800089e:	4018      	ands	r0, r3
 80008a0:	3801      	subs	r0, #1
 80008a2:	e026      	b.n	80008f2 <__lesf2+0x86>
 80008a4:	2d00      	cmp	r5, #0
 80008a6:	d0f0      	beq.n	800088a <__lesf2+0x1e>
 80008a8:	2002      	movs	r0, #2
 80008aa:	e022      	b.n	80008f2 <__lesf2+0x86>
 80008ac:	2c00      	cmp	r4, #0
 80008ae:	d1fb      	bne.n	80008a8 <__lesf2+0x3c>
 80008b0:	28ff      	cmp	r0, #255	; 0xff
 80008b2:	d01f      	beq.n	80008f4 <__lesf2+0x88>
 80008b4:	2800      	cmp	r0, #0
 80008b6:	d11f      	bne.n	80008f8 <__lesf2+0x8c>
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d11d      	bne.n	80008f8 <__lesf2+0x8c>
 80008bc:	2002      	movs	r0, #2
 80008be:	3b01      	subs	r3, #1
 80008c0:	4018      	ands	r0, r3
 80008c2:	3801      	subs	r0, #1
 80008c4:	e015      	b.n	80008f2 <__lesf2+0x86>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d00e      	beq.n	80008e8 <__lesf2+0x7c>
 80008ca:	428b      	cmp	r3, r1
 80008cc:	d1e5      	bne.n	800089a <__lesf2+0x2e>
 80008ce:	2200      	movs	r2, #0
 80008d0:	4290      	cmp	r0, r2
 80008d2:	dc04      	bgt.n	80008de <__lesf2+0x72>
 80008d4:	42ac      	cmp	r4, r5
 80008d6:	d8e0      	bhi.n	800089a <__lesf2+0x2e>
 80008d8:	2000      	movs	r0, #0
 80008da:	42ac      	cmp	r4, r5
 80008dc:	d209      	bcs.n	80008f2 <__lesf2+0x86>
 80008de:	1e58      	subs	r0, r3, #1
 80008e0:	2301      	movs	r3, #1
 80008e2:	4398      	bics	r0, r3
 80008e4:	3001      	adds	r0, #1
 80008e6:	e004      	b.n	80008f2 <__lesf2+0x86>
 80008e8:	2301      	movs	r3, #1
 80008ea:	3901      	subs	r1, #1
 80008ec:	4399      	bics	r1, r3
 80008ee:	0008      	movs	r0, r1
 80008f0:	3001      	adds	r0, #1
 80008f2:	bd30      	pop	{r4, r5, pc}
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d1d7      	bne.n	80008a8 <__lesf2+0x3c>
 80008f8:	428b      	cmp	r3, r1
 80008fa:	d1ce      	bne.n	800089a <__lesf2+0x2e>
 80008fc:	4282      	cmp	r2, r0
 80008fe:	dde7      	ble.n	80008d0 <__lesf2+0x64>
 8000900:	2102      	movs	r1, #2
 8000902:	1e58      	subs	r0, r3, #1
 8000904:	4008      	ands	r0, r1
 8000906:	3801      	subs	r0, #1
 8000908:	e7f3      	b.n	80008f2 <__lesf2+0x86>
 800090a:	46c0      	nop			; (mov r8, r8)

0800090c <__aeabi_dadd>:
 800090c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800090e:	464f      	mov	r7, r9
 8000910:	4646      	mov	r6, r8
 8000912:	46d6      	mov	lr, sl
 8000914:	000c      	movs	r4, r1
 8000916:	0309      	lsls	r1, r1, #12
 8000918:	b5c0      	push	{r6, r7, lr}
 800091a:	0a49      	lsrs	r1, r1, #9
 800091c:	0f47      	lsrs	r7, r0, #29
 800091e:	005e      	lsls	r6, r3, #1
 8000920:	4339      	orrs	r1, r7
 8000922:	031f      	lsls	r7, r3, #12
 8000924:	0fdb      	lsrs	r3, r3, #31
 8000926:	469c      	mov	ip, r3
 8000928:	0065      	lsls	r5, r4, #1
 800092a:	0a7b      	lsrs	r3, r7, #9
 800092c:	0f57      	lsrs	r7, r2, #29
 800092e:	431f      	orrs	r7, r3
 8000930:	0d6d      	lsrs	r5, r5, #21
 8000932:	0fe4      	lsrs	r4, r4, #31
 8000934:	0d76      	lsrs	r6, r6, #21
 8000936:	46a1      	mov	r9, r4
 8000938:	00c0      	lsls	r0, r0, #3
 800093a:	46b8      	mov	r8, r7
 800093c:	00d2      	lsls	r2, r2, #3
 800093e:	1bab      	subs	r3, r5, r6
 8000940:	4564      	cmp	r4, ip
 8000942:	d07b      	beq.n	8000a3c <__aeabi_dadd+0x130>
 8000944:	2b00      	cmp	r3, #0
 8000946:	dd5f      	ble.n	8000a08 <__aeabi_dadd+0xfc>
 8000948:	2e00      	cmp	r6, #0
 800094a:	d000      	beq.n	800094e <__aeabi_dadd+0x42>
 800094c:	e0a4      	b.n	8000a98 <__aeabi_dadd+0x18c>
 800094e:	003e      	movs	r6, r7
 8000950:	4316      	orrs	r6, r2
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x4a>
 8000954:	e112      	b.n	8000b7c <__aeabi_dadd+0x270>
 8000956:	1e5e      	subs	r6, r3, #1
 8000958:	2e00      	cmp	r6, #0
 800095a:	d000      	beq.n	800095e <__aeabi_dadd+0x52>
 800095c:	e19e      	b.n	8000c9c <__aeabi_dadd+0x390>
 800095e:	1a87      	subs	r7, r0, r2
 8000960:	4643      	mov	r3, r8
 8000962:	42b8      	cmp	r0, r7
 8000964:	4180      	sbcs	r0, r0
 8000966:	2501      	movs	r5, #1
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	4240      	negs	r0, r0
 800096c:	1a09      	subs	r1, r1, r0
 800096e:	020b      	lsls	r3, r1, #8
 8000970:	d400      	bmi.n	8000974 <__aeabi_dadd+0x68>
 8000972:	e131      	b.n	8000bd8 <__aeabi_dadd+0x2cc>
 8000974:	0249      	lsls	r1, r1, #9
 8000976:	0a4e      	lsrs	r6, r1, #9
 8000978:	2e00      	cmp	r6, #0
 800097a:	d100      	bne.n	800097e <__aeabi_dadd+0x72>
 800097c:	e16e      	b.n	8000c5c <__aeabi_dadd+0x350>
 800097e:	0030      	movs	r0, r6
 8000980:	f001 fe38 	bl	80025f4 <__clzsi2>
 8000984:	0003      	movs	r3, r0
 8000986:	3b08      	subs	r3, #8
 8000988:	2b1f      	cmp	r3, #31
 800098a:	dd00      	ble.n	800098e <__aeabi_dadd+0x82>
 800098c:	e161      	b.n	8000c52 <__aeabi_dadd+0x346>
 800098e:	2220      	movs	r2, #32
 8000990:	0039      	movs	r1, r7
 8000992:	1ad2      	subs	r2, r2, r3
 8000994:	409e      	lsls	r6, r3
 8000996:	40d1      	lsrs	r1, r2
 8000998:	409f      	lsls	r7, r3
 800099a:	430e      	orrs	r6, r1
 800099c:	429d      	cmp	r5, r3
 800099e:	dd00      	ble.n	80009a2 <__aeabi_dadd+0x96>
 80009a0:	e151      	b.n	8000c46 <__aeabi_dadd+0x33a>
 80009a2:	1b5d      	subs	r5, r3, r5
 80009a4:	1c6b      	adds	r3, r5, #1
 80009a6:	2b1f      	cmp	r3, #31
 80009a8:	dd00      	ble.n	80009ac <__aeabi_dadd+0xa0>
 80009aa:	e17c      	b.n	8000ca6 <__aeabi_dadd+0x39a>
 80009ac:	2120      	movs	r1, #32
 80009ae:	1ac9      	subs	r1, r1, r3
 80009b0:	003d      	movs	r5, r7
 80009b2:	0030      	movs	r0, r6
 80009b4:	408f      	lsls	r7, r1
 80009b6:	4088      	lsls	r0, r1
 80009b8:	40dd      	lsrs	r5, r3
 80009ba:	1e79      	subs	r1, r7, #1
 80009bc:	418f      	sbcs	r7, r1
 80009be:	0031      	movs	r1, r6
 80009c0:	2207      	movs	r2, #7
 80009c2:	4328      	orrs	r0, r5
 80009c4:	40d9      	lsrs	r1, r3
 80009c6:	2500      	movs	r5, #0
 80009c8:	4307      	orrs	r7, r0
 80009ca:	403a      	ands	r2, r7
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	d009      	beq.n	80009e4 <__aeabi_dadd+0xd8>
 80009d0:	230f      	movs	r3, #15
 80009d2:	403b      	ands	r3, r7
 80009d4:	2b04      	cmp	r3, #4
 80009d6:	d005      	beq.n	80009e4 <__aeabi_dadd+0xd8>
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	42bb      	cmp	r3, r7
 80009dc:	41bf      	sbcs	r7, r7
 80009de:	427f      	negs	r7, r7
 80009e0:	19c9      	adds	r1, r1, r7
 80009e2:	001f      	movs	r7, r3
 80009e4:	020b      	lsls	r3, r1, #8
 80009e6:	d400      	bmi.n	80009ea <__aeabi_dadd+0xde>
 80009e8:	e226      	b.n	8000e38 <__aeabi_dadd+0x52c>
 80009ea:	1c6a      	adds	r2, r5, #1
 80009ec:	4bc6      	ldr	r3, [pc, #792]	; (8000d08 <__aeabi_dadd+0x3fc>)
 80009ee:	0555      	lsls	r5, r2, #21
 80009f0:	0d6d      	lsrs	r5, r5, #21
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d100      	bne.n	80009f8 <__aeabi_dadd+0xec>
 80009f6:	e106      	b.n	8000c06 <__aeabi_dadd+0x2fa>
 80009f8:	4ac4      	ldr	r2, [pc, #784]	; (8000d0c <__aeabi_dadd+0x400>)
 80009fa:	08ff      	lsrs	r7, r7, #3
 80009fc:	400a      	ands	r2, r1
 80009fe:	0753      	lsls	r3, r2, #29
 8000a00:	0252      	lsls	r2, r2, #9
 8000a02:	433b      	orrs	r3, r7
 8000a04:	0b12      	lsrs	r2, r2, #12
 8000a06:	e08e      	b.n	8000b26 <__aeabi_dadd+0x21a>
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d000      	beq.n	8000a0e <__aeabi_dadd+0x102>
 8000a0c:	e0b8      	b.n	8000b80 <__aeabi_dadd+0x274>
 8000a0e:	1c6b      	adds	r3, r5, #1
 8000a10:	055b      	lsls	r3, r3, #21
 8000a12:	0d5b      	lsrs	r3, r3, #21
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	dc00      	bgt.n	8000a1a <__aeabi_dadd+0x10e>
 8000a18:	e130      	b.n	8000c7c <__aeabi_dadd+0x370>
 8000a1a:	1a87      	subs	r7, r0, r2
 8000a1c:	4643      	mov	r3, r8
 8000a1e:	42b8      	cmp	r0, r7
 8000a20:	41b6      	sbcs	r6, r6
 8000a22:	1acb      	subs	r3, r1, r3
 8000a24:	4276      	negs	r6, r6
 8000a26:	1b9e      	subs	r6, r3, r6
 8000a28:	0233      	lsls	r3, r6, #8
 8000a2a:	d500      	bpl.n	8000a2e <__aeabi_dadd+0x122>
 8000a2c:	e14c      	b.n	8000cc8 <__aeabi_dadd+0x3bc>
 8000a2e:	003b      	movs	r3, r7
 8000a30:	4333      	orrs	r3, r6
 8000a32:	d1a1      	bne.n	8000978 <__aeabi_dadd+0x6c>
 8000a34:	2200      	movs	r2, #0
 8000a36:	2400      	movs	r4, #0
 8000a38:	2500      	movs	r5, #0
 8000a3a:	e070      	b.n	8000b1e <__aeabi_dadd+0x212>
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	dc00      	bgt.n	8000a42 <__aeabi_dadd+0x136>
 8000a40:	e0e5      	b.n	8000c0e <__aeabi_dadd+0x302>
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dadd+0x13c>
 8000a46:	e083      	b.n	8000b50 <__aeabi_dadd+0x244>
 8000a48:	4eaf      	ldr	r6, [pc, #700]	; (8000d08 <__aeabi_dadd+0x3fc>)
 8000a4a:	42b5      	cmp	r5, r6
 8000a4c:	d060      	beq.n	8000b10 <__aeabi_dadd+0x204>
 8000a4e:	2680      	movs	r6, #128	; 0x80
 8000a50:	0436      	lsls	r6, r6, #16
 8000a52:	4337      	orrs	r7, r6
 8000a54:	46b8      	mov	r8, r7
 8000a56:	2b38      	cmp	r3, #56	; 0x38
 8000a58:	dc00      	bgt.n	8000a5c <__aeabi_dadd+0x150>
 8000a5a:	e13e      	b.n	8000cda <__aeabi_dadd+0x3ce>
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	001f      	movs	r7, r3
 8000a62:	1e7a      	subs	r2, r7, #1
 8000a64:	4197      	sbcs	r7, r2
 8000a66:	183f      	adds	r7, r7, r0
 8000a68:	4287      	cmp	r7, r0
 8000a6a:	4180      	sbcs	r0, r0
 8000a6c:	4240      	negs	r0, r0
 8000a6e:	1809      	adds	r1, r1, r0
 8000a70:	020b      	lsls	r3, r1, #8
 8000a72:	d400      	bmi.n	8000a76 <__aeabi_dadd+0x16a>
 8000a74:	e0b0      	b.n	8000bd8 <__aeabi_dadd+0x2cc>
 8000a76:	4ba4      	ldr	r3, [pc, #656]	; (8000d08 <__aeabi_dadd+0x3fc>)
 8000a78:	3501      	adds	r5, #1
 8000a7a:	429d      	cmp	r5, r3
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_dadd+0x174>
 8000a7e:	e0c3      	b.n	8000c08 <__aeabi_dadd+0x2fc>
 8000a80:	4aa2      	ldr	r2, [pc, #648]	; (8000d0c <__aeabi_dadd+0x400>)
 8000a82:	087b      	lsrs	r3, r7, #1
 8000a84:	400a      	ands	r2, r1
 8000a86:	2101      	movs	r1, #1
 8000a88:	400f      	ands	r7, r1
 8000a8a:	431f      	orrs	r7, r3
 8000a8c:	0851      	lsrs	r1, r2, #1
 8000a8e:	07d3      	lsls	r3, r2, #31
 8000a90:	2207      	movs	r2, #7
 8000a92:	431f      	orrs	r7, r3
 8000a94:	403a      	ands	r2, r7
 8000a96:	e799      	b.n	80009cc <__aeabi_dadd+0xc0>
 8000a98:	4e9b      	ldr	r6, [pc, #620]	; (8000d08 <__aeabi_dadd+0x3fc>)
 8000a9a:	42b5      	cmp	r5, r6
 8000a9c:	d038      	beq.n	8000b10 <__aeabi_dadd+0x204>
 8000a9e:	2680      	movs	r6, #128	; 0x80
 8000aa0:	0436      	lsls	r6, r6, #16
 8000aa2:	4337      	orrs	r7, r6
 8000aa4:	46b8      	mov	r8, r7
 8000aa6:	2b38      	cmp	r3, #56	; 0x38
 8000aa8:	dd00      	ble.n	8000aac <__aeabi_dadd+0x1a0>
 8000aaa:	e0dc      	b.n	8000c66 <__aeabi_dadd+0x35a>
 8000aac:	2b1f      	cmp	r3, #31
 8000aae:	dc00      	bgt.n	8000ab2 <__aeabi_dadd+0x1a6>
 8000ab0:	e130      	b.n	8000d14 <__aeabi_dadd+0x408>
 8000ab2:	001e      	movs	r6, r3
 8000ab4:	4647      	mov	r7, r8
 8000ab6:	3e20      	subs	r6, #32
 8000ab8:	40f7      	lsrs	r7, r6
 8000aba:	46bc      	mov	ip, r7
 8000abc:	2b20      	cmp	r3, #32
 8000abe:	d004      	beq.n	8000aca <__aeabi_dadd+0x1be>
 8000ac0:	2640      	movs	r6, #64	; 0x40
 8000ac2:	1af3      	subs	r3, r6, r3
 8000ac4:	4646      	mov	r6, r8
 8000ac6:	409e      	lsls	r6, r3
 8000ac8:	4332      	orrs	r2, r6
 8000aca:	0017      	movs	r7, r2
 8000acc:	4663      	mov	r3, ip
 8000ace:	1e7a      	subs	r2, r7, #1
 8000ad0:	4197      	sbcs	r7, r2
 8000ad2:	431f      	orrs	r7, r3
 8000ad4:	e0cc      	b.n	8000c70 <__aeabi_dadd+0x364>
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dadd+0x1d0>
 8000ada:	e204      	b.n	8000ee6 <__aeabi_dadd+0x5da>
 8000adc:	4643      	mov	r3, r8
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_dadd+0x1d8>
 8000ae2:	e159      	b.n	8000d98 <__aeabi_dadd+0x48c>
 8000ae4:	074b      	lsls	r3, r1, #29
 8000ae6:	08c0      	lsrs	r0, r0, #3
 8000ae8:	4318      	orrs	r0, r3
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	08c9      	lsrs	r1, r1, #3
 8000aee:	031b      	lsls	r3, r3, #12
 8000af0:	4219      	tst	r1, r3
 8000af2:	d008      	beq.n	8000b06 <__aeabi_dadd+0x1fa>
 8000af4:	4645      	mov	r5, r8
 8000af6:	08ed      	lsrs	r5, r5, #3
 8000af8:	421d      	tst	r5, r3
 8000afa:	d104      	bne.n	8000b06 <__aeabi_dadd+0x1fa>
 8000afc:	4643      	mov	r3, r8
 8000afe:	08d0      	lsrs	r0, r2, #3
 8000b00:	0759      	lsls	r1, r3, #29
 8000b02:	4308      	orrs	r0, r1
 8000b04:	0029      	movs	r1, r5
 8000b06:	0f42      	lsrs	r2, r0, #29
 8000b08:	00c9      	lsls	r1, r1, #3
 8000b0a:	4d7f      	ldr	r5, [pc, #508]	; (8000d08 <__aeabi_dadd+0x3fc>)
 8000b0c:	4311      	orrs	r1, r2
 8000b0e:	00c0      	lsls	r0, r0, #3
 8000b10:	074b      	lsls	r3, r1, #29
 8000b12:	08ca      	lsrs	r2, r1, #3
 8000b14:	497c      	ldr	r1, [pc, #496]	; (8000d08 <__aeabi_dadd+0x3fc>)
 8000b16:	08c0      	lsrs	r0, r0, #3
 8000b18:	4303      	orrs	r3, r0
 8000b1a:	428d      	cmp	r5, r1
 8000b1c:	d068      	beq.n	8000bf0 <__aeabi_dadd+0x2e4>
 8000b1e:	0312      	lsls	r2, r2, #12
 8000b20:	056d      	lsls	r5, r5, #21
 8000b22:	0b12      	lsrs	r2, r2, #12
 8000b24:	0d6d      	lsrs	r5, r5, #21
 8000b26:	2100      	movs	r1, #0
 8000b28:	0312      	lsls	r2, r2, #12
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	0b13      	lsrs	r3, r2, #12
 8000b2e:	0d0a      	lsrs	r2, r1, #20
 8000b30:	0512      	lsls	r2, r2, #20
 8000b32:	431a      	orrs	r2, r3
 8000b34:	4b76      	ldr	r3, [pc, #472]	; (8000d10 <__aeabi_dadd+0x404>)
 8000b36:	052d      	lsls	r5, r5, #20
 8000b38:	4013      	ands	r3, r2
 8000b3a:	432b      	orrs	r3, r5
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	07e4      	lsls	r4, r4, #31
 8000b40:	085b      	lsrs	r3, r3, #1
 8000b42:	4323      	orrs	r3, r4
 8000b44:	0019      	movs	r1, r3
 8000b46:	bc1c      	pop	{r2, r3, r4}
 8000b48:	4690      	mov	r8, r2
 8000b4a:	4699      	mov	r9, r3
 8000b4c:	46a2      	mov	sl, r4
 8000b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b50:	003e      	movs	r6, r7
 8000b52:	4316      	orrs	r6, r2
 8000b54:	d012      	beq.n	8000b7c <__aeabi_dadd+0x270>
 8000b56:	1e5e      	subs	r6, r3, #1
 8000b58:	2e00      	cmp	r6, #0
 8000b5a:	d000      	beq.n	8000b5e <__aeabi_dadd+0x252>
 8000b5c:	e100      	b.n	8000d60 <__aeabi_dadd+0x454>
 8000b5e:	1887      	adds	r7, r0, r2
 8000b60:	4287      	cmp	r7, r0
 8000b62:	4180      	sbcs	r0, r0
 8000b64:	4441      	add	r1, r8
 8000b66:	4240      	negs	r0, r0
 8000b68:	1809      	adds	r1, r1, r0
 8000b6a:	2501      	movs	r5, #1
 8000b6c:	020b      	lsls	r3, r1, #8
 8000b6e:	d533      	bpl.n	8000bd8 <__aeabi_dadd+0x2cc>
 8000b70:	2502      	movs	r5, #2
 8000b72:	e785      	b.n	8000a80 <__aeabi_dadd+0x174>
 8000b74:	4664      	mov	r4, ip
 8000b76:	0033      	movs	r3, r6
 8000b78:	4641      	mov	r1, r8
 8000b7a:	0010      	movs	r0, r2
 8000b7c:	001d      	movs	r5, r3
 8000b7e:	e7c7      	b.n	8000b10 <__aeabi_dadd+0x204>
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d000      	beq.n	8000b86 <__aeabi_dadd+0x27a>
 8000b84:	e0da      	b.n	8000d3c <__aeabi_dadd+0x430>
 8000b86:	000c      	movs	r4, r1
 8000b88:	4304      	orrs	r4, r0
 8000b8a:	d0f3      	beq.n	8000b74 <__aeabi_dadd+0x268>
 8000b8c:	1c5c      	adds	r4, r3, #1
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_dadd+0x286>
 8000b90:	e19f      	b.n	8000ed2 <__aeabi_dadd+0x5c6>
 8000b92:	4c5d      	ldr	r4, [pc, #372]	; (8000d08 <__aeabi_dadd+0x3fc>)
 8000b94:	42a6      	cmp	r6, r4
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dadd+0x28e>
 8000b98:	e12f      	b.n	8000dfa <__aeabi_dadd+0x4ee>
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	2b38      	cmp	r3, #56	; 0x38
 8000b9e:	dd00      	ble.n	8000ba2 <__aeabi_dadd+0x296>
 8000ba0:	e166      	b.n	8000e70 <__aeabi_dadd+0x564>
 8000ba2:	2b1f      	cmp	r3, #31
 8000ba4:	dd00      	ble.n	8000ba8 <__aeabi_dadd+0x29c>
 8000ba6:	e183      	b.n	8000eb0 <__aeabi_dadd+0x5a4>
 8000ba8:	2420      	movs	r4, #32
 8000baa:	0005      	movs	r5, r0
 8000bac:	1ae4      	subs	r4, r4, r3
 8000bae:	000f      	movs	r7, r1
 8000bb0:	40dd      	lsrs	r5, r3
 8000bb2:	40d9      	lsrs	r1, r3
 8000bb4:	40a0      	lsls	r0, r4
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	40a7      	lsls	r7, r4
 8000bba:	1a5b      	subs	r3, r3, r1
 8000bbc:	1e44      	subs	r4, r0, #1
 8000bbe:	41a0      	sbcs	r0, r4
 8000bc0:	4698      	mov	r8, r3
 8000bc2:	432f      	orrs	r7, r5
 8000bc4:	4338      	orrs	r0, r7
 8000bc6:	1a17      	subs	r7, r2, r0
 8000bc8:	42ba      	cmp	r2, r7
 8000bca:	4192      	sbcs	r2, r2
 8000bcc:	4643      	mov	r3, r8
 8000bce:	4252      	negs	r2, r2
 8000bd0:	1a99      	subs	r1, r3, r2
 8000bd2:	4664      	mov	r4, ip
 8000bd4:	0035      	movs	r5, r6
 8000bd6:	e6ca      	b.n	800096e <__aeabi_dadd+0x62>
 8000bd8:	2207      	movs	r2, #7
 8000bda:	403a      	ands	r2, r7
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	d000      	beq.n	8000be2 <__aeabi_dadd+0x2d6>
 8000be0:	e6f6      	b.n	80009d0 <__aeabi_dadd+0xc4>
 8000be2:	074b      	lsls	r3, r1, #29
 8000be4:	08ca      	lsrs	r2, r1, #3
 8000be6:	4948      	ldr	r1, [pc, #288]	; (8000d08 <__aeabi_dadd+0x3fc>)
 8000be8:	08ff      	lsrs	r7, r7, #3
 8000bea:	433b      	orrs	r3, r7
 8000bec:	428d      	cmp	r5, r1
 8000bee:	d196      	bne.n	8000b1e <__aeabi_dadd+0x212>
 8000bf0:	0019      	movs	r1, r3
 8000bf2:	4311      	orrs	r1, r2
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_dadd+0x2ec>
 8000bf6:	e19e      	b.n	8000f36 <__aeabi_dadd+0x62a>
 8000bf8:	2180      	movs	r1, #128	; 0x80
 8000bfa:	0309      	lsls	r1, r1, #12
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	0312      	lsls	r2, r2, #12
 8000c00:	0b12      	lsrs	r2, r2, #12
 8000c02:	4d41      	ldr	r5, [pc, #260]	; (8000d08 <__aeabi_dadd+0x3fc>)
 8000c04:	e78f      	b.n	8000b26 <__aeabi_dadd+0x21a>
 8000c06:	0015      	movs	r5, r2
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e78b      	b.n	8000b26 <__aeabi_dadd+0x21a>
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d000      	beq.n	8000c14 <__aeabi_dadd+0x308>
 8000c12:	e0c7      	b.n	8000da4 <__aeabi_dadd+0x498>
 8000c14:	1c6b      	adds	r3, r5, #1
 8000c16:	055f      	lsls	r7, r3, #21
 8000c18:	0d7f      	lsrs	r7, r7, #21
 8000c1a:	2f01      	cmp	r7, #1
 8000c1c:	dc00      	bgt.n	8000c20 <__aeabi_dadd+0x314>
 8000c1e:	e0f1      	b.n	8000e04 <__aeabi_dadd+0x4f8>
 8000c20:	4d39      	ldr	r5, [pc, #228]	; (8000d08 <__aeabi_dadd+0x3fc>)
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x31c>
 8000c26:	e0b9      	b.n	8000d9c <__aeabi_dadd+0x490>
 8000c28:	1885      	adds	r5, r0, r2
 8000c2a:	000a      	movs	r2, r1
 8000c2c:	4285      	cmp	r5, r0
 8000c2e:	4189      	sbcs	r1, r1
 8000c30:	4442      	add	r2, r8
 8000c32:	4249      	negs	r1, r1
 8000c34:	1851      	adds	r1, r2, r1
 8000c36:	2207      	movs	r2, #7
 8000c38:	07cf      	lsls	r7, r1, #31
 8000c3a:	086d      	lsrs	r5, r5, #1
 8000c3c:	432f      	orrs	r7, r5
 8000c3e:	0849      	lsrs	r1, r1, #1
 8000c40:	403a      	ands	r2, r7
 8000c42:	001d      	movs	r5, r3
 8000c44:	e6c2      	b.n	80009cc <__aeabi_dadd+0xc0>
 8000c46:	2207      	movs	r2, #7
 8000c48:	4930      	ldr	r1, [pc, #192]	; (8000d0c <__aeabi_dadd+0x400>)
 8000c4a:	1aed      	subs	r5, r5, r3
 8000c4c:	4031      	ands	r1, r6
 8000c4e:	403a      	ands	r2, r7
 8000c50:	e6bc      	b.n	80009cc <__aeabi_dadd+0xc0>
 8000c52:	003e      	movs	r6, r7
 8000c54:	3828      	subs	r0, #40	; 0x28
 8000c56:	4086      	lsls	r6, r0
 8000c58:	2700      	movs	r7, #0
 8000c5a:	e69f      	b.n	800099c <__aeabi_dadd+0x90>
 8000c5c:	0038      	movs	r0, r7
 8000c5e:	f001 fcc9 	bl	80025f4 <__clzsi2>
 8000c62:	3020      	adds	r0, #32
 8000c64:	e68e      	b.n	8000984 <__aeabi_dadd+0x78>
 8000c66:	4643      	mov	r3, r8
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	001f      	movs	r7, r3
 8000c6c:	1e7a      	subs	r2, r7, #1
 8000c6e:	4197      	sbcs	r7, r2
 8000c70:	1bc7      	subs	r7, r0, r7
 8000c72:	42b8      	cmp	r0, r7
 8000c74:	4180      	sbcs	r0, r0
 8000c76:	4240      	negs	r0, r0
 8000c78:	1a09      	subs	r1, r1, r0
 8000c7a:	e678      	b.n	800096e <__aeabi_dadd+0x62>
 8000c7c:	000e      	movs	r6, r1
 8000c7e:	003b      	movs	r3, r7
 8000c80:	4306      	orrs	r6, r0
 8000c82:	4313      	orrs	r3, r2
 8000c84:	2d00      	cmp	r5, #0
 8000c86:	d161      	bne.n	8000d4c <__aeabi_dadd+0x440>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_dadd+0x382>
 8000c8c:	e0f4      	b.n	8000e78 <__aeabi_dadd+0x56c>
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d100      	bne.n	8000c94 <__aeabi_dadd+0x388>
 8000c92:	e11b      	b.n	8000ecc <__aeabi_dadd+0x5c0>
 8000c94:	4664      	mov	r4, ip
 8000c96:	0039      	movs	r1, r7
 8000c98:	0010      	movs	r0, r2
 8000c9a:	e739      	b.n	8000b10 <__aeabi_dadd+0x204>
 8000c9c:	4f1a      	ldr	r7, [pc, #104]	; (8000d08 <__aeabi_dadd+0x3fc>)
 8000c9e:	42bb      	cmp	r3, r7
 8000ca0:	d07a      	beq.n	8000d98 <__aeabi_dadd+0x48c>
 8000ca2:	0033      	movs	r3, r6
 8000ca4:	e6ff      	b.n	8000aa6 <__aeabi_dadd+0x19a>
 8000ca6:	0030      	movs	r0, r6
 8000ca8:	3d1f      	subs	r5, #31
 8000caa:	40e8      	lsrs	r0, r5
 8000cac:	2b20      	cmp	r3, #32
 8000cae:	d003      	beq.n	8000cb8 <__aeabi_dadd+0x3ac>
 8000cb0:	2140      	movs	r1, #64	; 0x40
 8000cb2:	1acb      	subs	r3, r1, r3
 8000cb4:	409e      	lsls	r6, r3
 8000cb6:	4337      	orrs	r7, r6
 8000cb8:	1e7b      	subs	r3, r7, #1
 8000cba:	419f      	sbcs	r7, r3
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	4307      	orrs	r7, r0
 8000cc0:	403a      	ands	r2, r7
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2500      	movs	r5, #0
 8000cc6:	e789      	b.n	8000bdc <__aeabi_dadd+0x2d0>
 8000cc8:	1a17      	subs	r7, r2, r0
 8000cca:	4643      	mov	r3, r8
 8000ccc:	42ba      	cmp	r2, r7
 8000cce:	41b6      	sbcs	r6, r6
 8000cd0:	1a59      	subs	r1, r3, r1
 8000cd2:	4276      	negs	r6, r6
 8000cd4:	1b8e      	subs	r6, r1, r6
 8000cd6:	4664      	mov	r4, ip
 8000cd8:	e64e      	b.n	8000978 <__aeabi_dadd+0x6c>
 8000cda:	2b1f      	cmp	r3, #31
 8000cdc:	dd00      	ble.n	8000ce0 <__aeabi_dadd+0x3d4>
 8000cde:	e0ad      	b.n	8000e3c <__aeabi_dadd+0x530>
 8000ce0:	2620      	movs	r6, #32
 8000ce2:	4647      	mov	r7, r8
 8000ce4:	1af6      	subs	r6, r6, r3
 8000ce6:	40b7      	lsls	r7, r6
 8000ce8:	46b9      	mov	r9, r7
 8000cea:	0017      	movs	r7, r2
 8000cec:	46b2      	mov	sl, r6
 8000cee:	40df      	lsrs	r7, r3
 8000cf0:	464e      	mov	r6, r9
 8000cf2:	433e      	orrs	r6, r7
 8000cf4:	0037      	movs	r7, r6
 8000cf6:	4656      	mov	r6, sl
 8000cf8:	40b2      	lsls	r2, r6
 8000cfa:	1e56      	subs	r6, r2, #1
 8000cfc:	41b2      	sbcs	r2, r6
 8000cfe:	4317      	orrs	r7, r2
 8000d00:	4642      	mov	r2, r8
 8000d02:	40da      	lsrs	r2, r3
 8000d04:	1889      	adds	r1, r1, r2
 8000d06:	e6ae      	b.n	8000a66 <__aeabi_dadd+0x15a>
 8000d08:	000007ff 	.word	0x000007ff
 8000d0c:	ff7fffff 	.word	0xff7fffff
 8000d10:	800fffff 	.word	0x800fffff
 8000d14:	2620      	movs	r6, #32
 8000d16:	4647      	mov	r7, r8
 8000d18:	1af6      	subs	r6, r6, r3
 8000d1a:	40b7      	lsls	r7, r6
 8000d1c:	46b9      	mov	r9, r7
 8000d1e:	0017      	movs	r7, r2
 8000d20:	46b2      	mov	sl, r6
 8000d22:	40df      	lsrs	r7, r3
 8000d24:	464e      	mov	r6, r9
 8000d26:	433e      	orrs	r6, r7
 8000d28:	0037      	movs	r7, r6
 8000d2a:	4656      	mov	r6, sl
 8000d2c:	40b2      	lsls	r2, r6
 8000d2e:	1e56      	subs	r6, r2, #1
 8000d30:	41b2      	sbcs	r2, r6
 8000d32:	4317      	orrs	r7, r2
 8000d34:	4642      	mov	r2, r8
 8000d36:	40da      	lsrs	r2, r3
 8000d38:	1a89      	subs	r1, r1, r2
 8000d3a:	e799      	b.n	8000c70 <__aeabi_dadd+0x364>
 8000d3c:	4c7f      	ldr	r4, [pc, #508]	; (8000f3c <__aeabi_dadd+0x630>)
 8000d3e:	42a6      	cmp	r6, r4
 8000d40:	d05b      	beq.n	8000dfa <__aeabi_dadd+0x4ee>
 8000d42:	2480      	movs	r4, #128	; 0x80
 8000d44:	0424      	lsls	r4, r4, #16
 8000d46:	425b      	negs	r3, r3
 8000d48:	4321      	orrs	r1, r4
 8000d4a:	e727      	b.n	8000b9c <__aeabi_dadd+0x290>
 8000d4c:	2e00      	cmp	r6, #0
 8000d4e:	d10c      	bne.n	8000d6a <__aeabi_dadd+0x45e>
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d100      	bne.n	8000d56 <__aeabi_dadd+0x44a>
 8000d54:	e0cb      	b.n	8000eee <__aeabi_dadd+0x5e2>
 8000d56:	4664      	mov	r4, ip
 8000d58:	0039      	movs	r1, r7
 8000d5a:	0010      	movs	r0, r2
 8000d5c:	4d77      	ldr	r5, [pc, #476]	; (8000f3c <__aeabi_dadd+0x630>)
 8000d5e:	e6d7      	b.n	8000b10 <__aeabi_dadd+0x204>
 8000d60:	4f76      	ldr	r7, [pc, #472]	; (8000f3c <__aeabi_dadd+0x630>)
 8000d62:	42bb      	cmp	r3, r7
 8000d64:	d018      	beq.n	8000d98 <__aeabi_dadd+0x48c>
 8000d66:	0033      	movs	r3, r6
 8000d68:	e675      	b.n	8000a56 <__aeabi_dadd+0x14a>
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d014      	beq.n	8000d98 <__aeabi_dadd+0x48c>
 8000d6e:	074b      	lsls	r3, r1, #29
 8000d70:	08c0      	lsrs	r0, r0, #3
 8000d72:	4318      	orrs	r0, r3
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	08c9      	lsrs	r1, r1, #3
 8000d78:	031b      	lsls	r3, r3, #12
 8000d7a:	4219      	tst	r1, r3
 8000d7c:	d007      	beq.n	8000d8e <__aeabi_dadd+0x482>
 8000d7e:	08fc      	lsrs	r4, r7, #3
 8000d80:	421c      	tst	r4, r3
 8000d82:	d104      	bne.n	8000d8e <__aeabi_dadd+0x482>
 8000d84:	0779      	lsls	r1, r7, #29
 8000d86:	08d0      	lsrs	r0, r2, #3
 8000d88:	4308      	orrs	r0, r1
 8000d8a:	46e1      	mov	r9, ip
 8000d8c:	0021      	movs	r1, r4
 8000d8e:	464c      	mov	r4, r9
 8000d90:	0f42      	lsrs	r2, r0, #29
 8000d92:	00c9      	lsls	r1, r1, #3
 8000d94:	4311      	orrs	r1, r2
 8000d96:	00c0      	lsls	r0, r0, #3
 8000d98:	4d68      	ldr	r5, [pc, #416]	; (8000f3c <__aeabi_dadd+0x630>)
 8000d9a:	e6b9      	b.n	8000b10 <__aeabi_dadd+0x204>
 8000d9c:	001d      	movs	r5, r3
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2300      	movs	r3, #0
 8000da2:	e6c0      	b.n	8000b26 <__aeabi_dadd+0x21a>
 8000da4:	2d00      	cmp	r5, #0
 8000da6:	d15b      	bne.n	8000e60 <__aeabi_dadd+0x554>
 8000da8:	000d      	movs	r5, r1
 8000daa:	4305      	orrs	r5, r0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_dadd+0x4a4>
 8000dae:	e6e2      	b.n	8000b76 <__aeabi_dadd+0x26a>
 8000db0:	1c5d      	adds	r5, r3, #1
 8000db2:	d100      	bne.n	8000db6 <__aeabi_dadd+0x4aa>
 8000db4:	e0b0      	b.n	8000f18 <__aeabi_dadd+0x60c>
 8000db6:	4d61      	ldr	r5, [pc, #388]	; (8000f3c <__aeabi_dadd+0x630>)
 8000db8:	42ae      	cmp	r6, r5
 8000dba:	d01f      	beq.n	8000dfc <__aeabi_dadd+0x4f0>
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	2b38      	cmp	r3, #56	; 0x38
 8000dc0:	dc71      	bgt.n	8000ea6 <__aeabi_dadd+0x59a>
 8000dc2:	2b1f      	cmp	r3, #31
 8000dc4:	dd00      	ble.n	8000dc8 <__aeabi_dadd+0x4bc>
 8000dc6:	e096      	b.n	8000ef6 <__aeabi_dadd+0x5ea>
 8000dc8:	2520      	movs	r5, #32
 8000dca:	000f      	movs	r7, r1
 8000dcc:	1aed      	subs	r5, r5, r3
 8000dce:	40af      	lsls	r7, r5
 8000dd0:	46b9      	mov	r9, r7
 8000dd2:	0007      	movs	r7, r0
 8000dd4:	46aa      	mov	sl, r5
 8000dd6:	40df      	lsrs	r7, r3
 8000dd8:	464d      	mov	r5, r9
 8000dda:	433d      	orrs	r5, r7
 8000ddc:	002f      	movs	r7, r5
 8000dde:	4655      	mov	r5, sl
 8000de0:	40a8      	lsls	r0, r5
 8000de2:	40d9      	lsrs	r1, r3
 8000de4:	1e45      	subs	r5, r0, #1
 8000de6:	41a8      	sbcs	r0, r5
 8000de8:	4488      	add	r8, r1
 8000dea:	4307      	orrs	r7, r0
 8000dec:	18bf      	adds	r7, r7, r2
 8000dee:	4297      	cmp	r7, r2
 8000df0:	4192      	sbcs	r2, r2
 8000df2:	4251      	negs	r1, r2
 8000df4:	4441      	add	r1, r8
 8000df6:	0035      	movs	r5, r6
 8000df8:	e63a      	b.n	8000a70 <__aeabi_dadd+0x164>
 8000dfa:	4664      	mov	r4, ip
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	4641      	mov	r1, r8
 8000e00:	0010      	movs	r0, r2
 8000e02:	e685      	b.n	8000b10 <__aeabi_dadd+0x204>
 8000e04:	000b      	movs	r3, r1
 8000e06:	4303      	orrs	r3, r0
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d000      	beq.n	8000e0e <__aeabi_dadd+0x502>
 8000e0c:	e663      	b.n	8000ad6 <__aeabi_dadd+0x1ca>
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f5      	beq.n	8000dfe <__aeabi_dadd+0x4f2>
 8000e12:	4643      	mov	r3, r8
 8000e14:	4313      	orrs	r3, r2
 8000e16:	d100      	bne.n	8000e1a <__aeabi_dadd+0x50e>
 8000e18:	e67a      	b.n	8000b10 <__aeabi_dadd+0x204>
 8000e1a:	1887      	adds	r7, r0, r2
 8000e1c:	4287      	cmp	r7, r0
 8000e1e:	4180      	sbcs	r0, r0
 8000e20:	2207      	movs	r2, #7
 8000e22:	4441      	add	r1, r8
 8000e24:	4240      	negs	r0, r0
 8000e26:	1809      	adds	r1, r1, r0
 8000e28:	403a      	ands	r2, r7
 8000e2a:	020b      	lsls	r3, r1, #8
 8000e2c:	d400      	bmi.n	8000e30 <__aeabi_dadd+0x524>
 8000e2e:	e6d5      	b.n	8000bdc <__aeabi_dadd+0x2d0>
 8000e30:	4b43      	ldr	r3, [pc, #268]	; (8000f40 <__aeabi_dadd+0x634>)
 8000e32:	3501      	adds	r5, #1
 8000e34:	4019      	ands	r1, r3
 8000e36:	e5c9      	b.n	80009cc <__aeabi_dadd+0xc0>
 8000e38:	0038      	movs	r0, r7
 8000e3a:	e669      	b.n	8000b10 <__aeabi_dadd+0x204>
 8000e3c:	001e      	movs	r6, r3
 8000e3e:	4647      	mov	r7, r8
 8000e40:	3e20      	subs	r6, #32
 8000e42:	40f7      	lsrs	r7, r6
 8000e44:	46bc      	mov	ip, r7
 8000e46:	2b20      	cmp	r3, #32
 8000e48:	d004      	beq.n	8000e54 <__aeabi_dadd+0x548>
 8000e4a:	2640      	movs	r6, #64	; 0x40
 8000e4c:	1af3      	subs	r3, r6, r3
 8000e4e:	4646      	mov	r6, r8
 8000e50:	409e      	lsls	r6, r3
 8000e52:	4332      	orrs	r2, r6
 8000e54:	0017      	movs	r7, r2
 8000e56:	4663      	mov	r3, ip
 8000e58:	1e7a      	subs	r2, r7, #1
 8000e5a:	4197      	sbcs	r7, r2
 8000e5c:	431f      	orrs	r7, r3
 8000e5e:	e602      	b.n	8000a66 <__aeabi_dadd+0x15a>
 8000e60:	4d36      	ldr	r5, [pc, #216]	; (8000f3c <__aeabi_dadd+0x630>)
 8000e62:	42ae      	cmp	r6, r5
 8000e64:	d0ca      	beq.n	8000dfc <__aeabi_dadd+0x4f0>
 8000e66:	2580      	movs	r5, #128	; 0x80
 8000e68:	042d      	lsls	r5, r5, #16
 8000e6a:	425b      	negs	r3, r3
 8000e6c:	4329      	orrs	r1, r5
 8000e6e:	e7a6      	b.n	8000dbe <__aeabi_dadd+0x4b2>
 8000e70:	4308      	orrs	r0, r1
 8000e72:	1e41      	subs	r1, r0, #1
 8000e74:	4188      	sbcs	r0, r1
 8000e76:	e6a6      	b.n	8000bc6 <__aeabi_dadd+0x2ba>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_dadd+0x572>
 8000e7c:	e648      	b.n	8000b10 <__aeabi_dadd+0x204>
 8000e7e:	1a87      	subs	r7, r0, r2
 8000e80:	4643      	mov	r3, r8
 8000e82:	42b8      	cmp	r0, r7
 8000e84:	41b6      	sbcs	r6, r6
 8000e86:	1acb      	subs	r3, r1, r3
 8000e88:	4276      	negs	r6, r6
 8000e8a:	1b9e      	subs	r6, r3, r6
 8000e8c:	0233      	lsls	r3, r6, #8
 8000e8e:	d54b      	bpl.n	8000f28 <__aeabi_dadd+0x61c>
 8000e90:	1a17      	subs	r7, r2, r0
 8000e92:	4643      	mov	r3, r8
 8000e94:	42ba      	cmp	r2, r7
 8000e96:	4192      	sbcs	r2, r2
 8000e98:	1a59      	subs	r1, r3, r1
 8000e9a:	4252      	negs	r2, r2
 8000e9c:	1a89      	subs	r1, r1, r2
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	4664      	mov	r4, ip
 8000ea2:	403a      	ands	r2, r7
 8000ea4:	e592      	b.n	80009cc <__aeabi_dadd+0xc0>
 8000ea6:	4301      	orrs	r1, r0
 8000ea8:	000f      	movs	r7, r1
 8000eaa:	1e79      	subs	r1, r7, #1
 8000eac:	418f      	sbcs	r7, r1
 8000eae:	e79d      	b.n	8000dec <__aeabi_dadd+0x4e0>
 8000eb0:	001c      	movs	r4, r3
 8000eb2:	000f      	movs	r7, r1
 8000eb4:	3c20      	subs	r4, #32
 8000eb6:	40e7      	lsrs	r7, r4
 8000eb8:	2b20      	cmp	r3, #32
 8000eba:	d003      	beq.n	8000ec4 <__aeabi_dadd+0x5b8>
 8000ebc:	2440      	movs	r4, #64	; 0x40
 8000ebe:	1ae3      	subs	r3, r4, r3
 8000ec0:	4099      	lsls	r1, r3
 8000ec2:	4308      	orrs	r0, r1
 8000ec4:	1e41      	subs	r1, r0, #1
 8000ec6:	4188      	sbcs	r0, r1
 8000ec8:	4338      	orrs	r0, r7
 8000eca:	e67c      	b.n	8000bc6 <__aeabi_dadd+0x2ba>
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2400      	movs	r4, #0
 8000ed0:	e625      	b.n	8000b1e <__aeabi_dadd+0x212>
 8000ed2:	1a17      	subs	r7, r2, r0
 8000ed4:	4643      	mov	r3, r8
 8000ed6:	42ba      	cmp	r2, r7
 8000ed8:	4192      	sbcs	r2, r2
 8000eda:	1a59      	subs	r1, r3, r1
 8000edc:	4252      	negs	r2, r2
 8000ede:	1a89      	subs	r1, r1, r2
 8000ee0:	4664      	mov	r4, ip
 8000ee2:	0035      	movs	r5, r6
 8000ee4:	e543      	b.n	800096e <__aeabi_dadd+0x62>
 8000ee6:	4641      	mov	r1, r8
 8000ee8:	0010      	movs	r0, r2
 8000eea:	4d14      	ldr	r5, [pc, #80]	; (8000f3c <__aeabi_dadd+0x630>)
 8000eec:	e610      	b.n	8000b10 <__aeabi_dadd+0x204>
 8000eee:	2280      	movs	r2, #128	; 0x80
 8000ef0:	2400      	movs	r4, #0
 8000ef2:	0312      	lsls	r2, r2, #12
 8000ef4:	e680      	b.n	8000bf8 <__aeabi_dadd+0x2ec>
 8000ef6:	001d      	movs	r5, r3
 8000ef8:	000f      	movs	r7, r1
 8000efa:	3d20      	subs	r5, #32
 8000efc:	40ef      	lsrs	r7, r5
 8000efe:	46bc      	mov	ip, r7
 8000f00:	2b20      	cmp	r3, #32
 8000f02:	d003      	beq.n	8000f0c <__aeabi_dadd+0x600>
 8000f04:	2540      	movs	r5, #64	; 0x40
 8000f06:	1aeb      	subs	r3, r5, r3
 8000f08:	4099      	lsls	r1, r3
 8000f0a:	4308      	orrs	r0, r1
 8000f0c:	0007      	movs	r7, r0
 8000f0e:	4663      	mov	r3, ip
 8000f10:	1e78      	subs	r0, r7, #1
 8000f12:	4187      	sbcs	r7, r0
 8000f14:	431f      	orrs	r7, r3
 8000f16:	e769      	b.n	8000dec <__aeabi_dadd+0x4e0>
 8000f18:	1887      	adds	r7, r0, r2
 8000f1a:	4297      	cmp	r7, r2
 8000f1c:	419b      	sbcs	r3, r3
 8000f1e:	4441      	add	r1, r8
 8000f20:	425b      	negs	r3, r3
 8000f22:	18c9      	adds	r1, r1, r3
 8000f24:	0035      	movs	r5, r6
 8000f26:	e5a3      	b.n	8000a70 <__aeabi_dadd+0x164>
 8000f28:	003b      	movs	r3, r7
 8000f2a:	4333      	orrs	r3, r6
 8000f2c:	d0ce      	beq.n	8000ecc <__aeabi_dadd+0x5c0>
 8000f2e:	2207      	movs	r2, #7
 8000f30:	0031      	movs	r1, r6
 8000f32:	403a      	ands	r2, r7
 8000f34:	e652      	b.n	8000bdc <__aeabi_dadd+0x2d0>
 8000f36:	2300      	movs	r3, #0
 8000f38:	001a      	movs	r2, r3
 8000f3a:	e5f4      	b.n	8000b26 <__aeabi_dadd+0x21a>
 8000f3c:	000007ff 	.word	0x000007ff
 8000f40:	ff7fffff 	.word	0xff7fffff

08000f44 <__aeabi_ddiv>:
 8000f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f46:	4657      	mov	r7, sl
 8000f48:	46de      	mov	lr, fp
 8000f4a:	464e      	mov	r6, r9
 8000f4c:	4645      	mov	r5, r8
 8000f4e:	b5e0      	push	{r5, r6, r7, lr}
 8000f50:	4683      	mov	fp, r0
 8000f52:	0007      	movs	r7, r0
 8000f54:	030e      	lsls	r6, r1, #12
 8000f56:	0048      	lsls	r0, r1, #1
 8000f58:	b085      	sub	sp, #20
 8000f5a:	4692      	mov	sl, r2
 8000f5c:	001c      	movs	r4, r3
 8000f5e:	0b36      	lsrs	r6, r6, #12
 8000f60:	0d40      	lsrs	r0, r0, #21
 8000f62:	0fcd      	lsrs	r5, r1, #31
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_ddiv+0x26>
 8000f68:	e09d      	b.n	80010a6 <__aeabi_ddiv+0x162>
 8000f6a:	4b95      	ldr	r3, [pc, #596]	; (80011c0 <__aeabi_ddiv+0x27c>)
 8000f6c:	4298      	cmp	r0, r3
 8000f6e:	d039      	beq.n	8000fe4 <__aeabi_ddiv+0xa0>
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	00f6      	lsls	r6, r6, #3
 8000f74:	041b      	lsls	r3, r3, #16
 8000f76:	431e      	orrs	r6, r3
 8000f78:	4a92      	ldr	r2, [pc, #584]	; (80011c4 <__aeabi_ddiv+0x280>)
 8000f7a:	0f7b      	lsrs	r3, r7, #29
 8000f7c:	4333      	orrs	r3, r6
 8000f7e:	4699      	mov	r9, r3
 8000f80:	4694      	mov	ip, r2
 8000f82:	0003      	movs	r3, r0
 8000f84:	4463      	add	r3, ip
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	2600      	movs	r6, #0
 8000f8c:	00ff      	lsls	r7, r7, #3
 8000f8e:	9302      	str	r3, [sp, #8]
 8000f90:	0323      	lsls	r3, r4, #12
 8000f92:	0b1b      	lsrs	r3, r3, #12
 8000f94:	4698      	mov	r8, r3
 8000f96:	0063      	lsls	r3, r4, #1
 8000f98:	0fe4      	lsrs	r4, r4, #31
 8000f9a:	4652      	mov	r2, sl
 8000f9c:	0d5b      	lsrs	r3, r3, #21
 8000f9e:	9401      	str	r4, [sp, #4]
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_ddiv+0x60>
 8000fa2:	e0b3      	b.n	800110c <__aeabi_ddiv+0x1c8>
 8000fa4:	4986      	ldr	r1, [pc, #536]	; (80011c0 <__aeabi_ddiv+0x27c>)
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d100      	bne.n	8000fac <__aeabi_ddiv+0x68>
 8000faa:	e09e      	b.n	80010ea <__aeabi_ddiv+0x1a6>
 8000fac:	4642      	mov	r2, r8
 8000fae:	00d1      	lsls	r1, r2, #3
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	0412      	lsls	r2, r2, #16
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	4651      	mov	r1, sl
 8000fb8:	0f49      	lsrs	r1, r1, #29
 8000fba:	4311      	orrs	r1, r2
 8000fbc:	468b      	mov	fp, r1
 8000fbe:	4981      	ldr	r1, [pc, #516]	; (80011c4 <__aeabi_ddiv+0x280>)
 8000fc0:	4652      	mov	r2, sl
 8000fc2:	468c      	mov	ip, r1
 8000fc4:	9900      	ldr	r1, [sp, #0]
 8000fc6:	4463      	add	r3, ip
 8000fc8:	1acb      	subs	r3, r1, r3
 8000fca:	2100      	movs	r1, #0
 8000fcc:	00d2      	lsls	r2, r2, #3
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	002b      	movs	r3, r5
 8000fd2:	4063      	eors	r3, r4
 8000fd4:	469a      	mov	sl, r3
 8000fd6:	2e0f      	cmp	r6, #15
 8000fd8:	d900      	bls.n	8000fdc <__aeabi_ddiv+0x98>
 8000fda:	e105      	b.n	80011e8 <__aeabi_ddiv+0x2a4>
 8000fdc:	4b7a      	ldr	r3, [pc, #488]	; (80011c8 <__aeabi_ddiv+0x284>)
 8000fde:	00b6      	lsls	r6, r6, #2
 8000fe0:	599b      	ldr	r3, [r3, r6]
 8000fe2:	469f      	mov	pc, r3
 8000fe4:	465b      	mov	r3, fp
 8000fe6:	4333      	orrs	r3, r6
 8000fe8:	4699      	mov	r9, r3
 8000fea:	d000      	beq.n	8000fee <__aeabi_ddiv+0xaa>
 8000fec:	e0b8      	b.n	8001160 <__aeabi_ddiv+0x21c>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	2608      	movs	r6, #8
 8000ff2:	2700      	movs	r7, #0
 8000ff4:	9000      	str	r0, [sp, #0]
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	e7ca      	b.n	8000f90 <__aeabi_ddiv+0x4c>
 8000ffa:	46cb      	mov	fp, r9
 8000ffc:	003a      	movs	r2, r7
 8000ffe:	9902      	ldr	r1, [sp, #8]
 8001000:	9501      	str	r5, [sp, #4]
 8001002:	9b01      	ldr	r3, [sp, #4]
 8001004:	469a      	mov	sl, r3
 8001006:	2902      	cmp	r1, #2
 8001008:	d027      	beq.n	800105a <__aeabi_ddiv+0x116>
 800100a:	2903      	cmp	r1, #3
 800100c:	d100      	bne.n	8001010 <__aeabi_ddiv+0xcc>
 800100e:	e280      	b.n	8001512 <__aeabi_ddiv+0x5ce>
 8001010:	2901      	cmp	r1, #1
 8001012:	d044      	beq.n	800109e <__aeabi_ddiv+0x15a>
 8001014:	496d      	ldr	r1, [pc, #436]	; (80011cc <__aeabi_ddiv+0x288>)
 8001016:	9b00      	ldr	r3, [sp, #0]
 8001018:	468c      	mov	ip, r1
 800101a:	4463      	add	r3, ip
 800101c:	001c      	movs	r4, r3
 800101e:	2c00      	cmp	r4, #0
 8001020:	dd38      	ble.n	8001094 <__aeabi_ddiv+0x150>
 8001022:	0753      	lsls	r3, r2, #29
 8001024:	d000      	beq.n	8001028 <__aeabi_ddiv+0xe4>
 8001026:	e213      	b.n	8001450 <__aeabi_ddiv+0x50c>
 8001028:	08d2      	lsrs	r2, r2, #3
 800102a:	465b      	mov	r3, fp
 800102c:	01db      	lsls	r3, r3, #7
 800102e:	d509      	bpl.n	8001044 <__aeabi_ddiv+0x100>
 8001030:	4659      	mov	r1, fp
 8001032:	4b67      	ldr	r3, [pc, #412]	; (80011d0 <__aeabi_ddiv+0x28c>)
 8001034:	4019      	ands	r1, r3
 8001036:	468b      	mov	fp, r1
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	00c9      	lsls	r1, r1, #3
 800103c:	468c      	mov	ip, r1
 800103e:	9b00      	ldr	r3, [sp, #0]
 8001040:	4463      	add	r3, ip
 8001042:	001c      	movs	r4, r3
 8001044:	4b63      	ldr	r3, [pc, #396]	; (80011d4 <__aeabi_ddiv+0x290>)
 8001046:	429c      	cmp	r4, r3
 8001048:	dc07      	bgt.n	800105a <__aeabi_ddiv+0x116>
 800104a:	465b      	mov	r3, fp
 800104c:	0564      	lsls	r4, r4, #21
 800104e:	075f      	lsls	r7, r3, #29
 8001050:	025b      	lsls	r3, r3, #9
 8001052:	4317      	orrs	r7, r2
 8001054:	0b1b      	lsrs	r3, r3, #12
 8001056:	0d62      	lsrs	r2, r4, #21
 8001058:	e002      	b.n	8001060 <__aeabi_ddiv+0x11c>
 800105a:	2300      	movs	r3, #0
 800105c:	2700      	movs	r7, #0
 800105e:	4a58      	ldr	r2, [pc, #352]	; (80011c0 <__aeabi_ddiv+0x27c>)
 8001060:	2100      	movs	r1, #0
 8001062:	031b      	lsls	r3, r3, #12
 8001064:	0b1c      	lsrs	r4, r3, #12
 8001066:	0d0b      	lsrs	r3, r1, #20
 8001068:	051b      	lsls	r3, r3, #20
 800106a:	4323      	orrs	r3, r4
 800106c:	0514      	lsls	r4, r2, #20
 800106e:	4a5a      	ldr	r2, [pc, #360]	; (80011d8 <__aeabi_ddiv+0x294>)
 8001070:	0038      	movs	r0, r7
 8001072:	4013      	ands	r3, r2
 8001074:	431c      	orrs	r4, r3
 8001076:	4653      	mov	r3, sl
 8001078:	0064      	lsls	r4, r4, #1
 800107a:	07db      	lsls	r3, r3, #31
 800107c:	0864      	lsrs	r4, r4, #1
 800107e:	431c      	orrs	r4, r3
 8001080:	0021      	movs	r1, r4
 8001082:	b005      	add	sp, #20
 8001084:	bc3c      	pop	{r2, r3, r4, r5}
 8001086:	4690      	mov	r8, r2
 8001088:	4699      	mov	r9, r3
 800108a:	46a2      	mov	sl, r4
 800108c:	46ab      	mov	fp, r5
 800108e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001090:	2201      	movs	r2, #1
 8001092:	4252      	negs	r2, r2
 8001094:	2301      	movs	r3, #1
 8001096:	1b1b      	subs	r3, r3, r4
 8001098:	2b38      	cmp	r3, #56	; 0x38
 800109a:	dc00      	bgt.n	800109e <__aeabi_ddiv+0x15a>
 800109c:	e1ad      	b.n	80013fa <__aeabi_ddiv+0x4b6>
 800109e:	2200      	movs	r2, #0
 80010a0:	2300      	movs	r3, #0
 80010a2:	2700      	movs	r7, #0
 80010a4:	e7dc      	b.n	8001060 <__aeabi_ddiv+0x11c>
 80010a6:	465b      	mov	r3, fp
 80010a8:	4333      	orrs	r3, r6
 80010aa:	4699      	mov	r9, r3
 80010ac:	d05e      	beq.n	800116c <__aeabi_ddiv+0x228>
 80010ae:	2e00      	cmp	r6, #0
 80010b0:	d100      	bne.n	80010b4 <__aeabi_ddiv+0x170>
 80010b2:	e18a      	b.n	80013ca <__aeabi_ddiv+0x486>
 80010b4:	0030      	movs	r0, r6
 80010b6:	f001 fa9d 	bl	80025f4 <__clzsi2>
 80010ba:	0003      	movs	r3, r0
 80010bc:	3b0b      	subs	r3, #11
 80010be:	2b1c      	cmp	r3, #28
 80010c0:	dd00      	ble.n	80010c4 <__aeabi_ddiv+0x180>
 80010c2:	e17b      	b.n	80013bc <__aeabi_ddiv+0x478>
 80010c4:	221d      	movs	r2, #29
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	465a      	mov	r2, fp
 80010ca:	0001      	movs	r1, r0
 80010cc:	40da      	lsrs	r2, r3
 80010ce:	3908      	subs	r1, #8
 80010d0:	408e      	lsls	r6, r1
 80010d2:	0013      	movs	r3, r2
 80010d4:	465f      	mov	r7, fp
 80010d6:	4333      	orrs	r3, r6
 80010d8:	4699      	mov	r9, r3
 80010da:	408f      	lsls	r7, r1
 80010dc:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <__aeabi_ddiv+0x298>)
 80010de:	2600      	movs	r6, #0
 80010e0:	1a1b      	subs	r3, r3, r0
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2300      	movs	r3, #0
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	e752      	b.n	8000f90 <__aeabi_ddiv+0x4c>
 80010ea:	4641      	mov	r1, r8
 80010ec:	4653      	mov	r3, sl
 80010ee:	430b      	orrs	r3, r1
 80010f0:	493b      	ldr	r1, [pc, #236]	; (80011e0 <__aeabi_ddiv+0x29c>)
 80010f2:	469b      	mov	fp, r3
 80010f4:	468c      	mov	ip, r1
 80010f6:	9b00      	ldr	r3, [sp, #0]
 80010f8:	4463      	add	r3, ip
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	465b      	mov	r3, fp
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d13b      	bne.n	800117a <__aeabi_ddiv+0x236>
 8001102:	2302      	movs	r3, #2
 8001104:	2200      	movs	r2, #0
 8001106:	431e      	orrs	r6, r3
 8001108:	2102      	movs	r1, #2
 800110a:	e761      	b.n	8000fd0 <__aeabi_ddiv+0x8c>
 800110c:	4643      	mov	r3, r8
 800110e:	4313      	orrs	r3, r2
 8001110:	469b      	mov	fp, r3
 8001112:	d037      	beq.n	8001184 <__aeabi_ddiv+0x240>
 8001114:	4643      	mov	r3, r8
 8001116:	2b00      	cmp	r3, #0
 8001118:	d100      	bne.n	800111c <__aeabi_ddiv+0x1d8>
 800111a:	e162      	b.n	80013e2 <__aeabi_ddiv+0x49e>
 800111c:	4640      	mov	r0, r8
 800111e:	f001 fa69 	bl	80025f4 <__clzsi2>
 8001122:	0003      	movs	r3, r0
 8001124:	3b0b      	subs	r3, #11
 8001126:	2b1c      	cmp	r3, #28
 8001128:	dd00      	ble.n	800112c <__aeabi_ddiv+0x1e8>
 800112a:	e153      	b.n	80013d4 <__aeabi_ddiv+0x490>
 800112c:	0002      	movs	r2, r0
 800112e:	4641      	mov	r1, r8
 8001130:	3a08      	subs	r2, #8
 8001132:	4091      	lsls	r1, r2
 8001134:	4688      	mov	r8, r1
 8001136:	211d      	movs	r1, #29
 8001138:	1acb      	subs	r3, r1, r3
 800113a:	4651      	mov	r1, sl
 800113c:	40d9      	lsrs	r1, r3
 800113e:	000b      	movs	r3, r1
 8001140:	4641      	mov	r1, r8
 8001142:	430b      	orrs	r3, r1
 8001144:	469b      	mov	fp, r3
 8001146:	4653      	mov	r3, sl
 8001148:	4093      	lsls	r3, r2
 800114a:	001a      	movs	r2, r3
 800114c:	9b00      	ldr	r3, [sp, #0]
 800114e:	4925      	ldr	r1, [pc, #148]	; (80011e4 <__aeabi_ddiv+0x2a0>)
 8001150:	469c      	mov	ip, r3
 8001152:	4460      	add	r0, ip
 8001154:	0003      	movs	r3, r0
 8001156:	468c      	mov	ip, r1
 8001158:	4463      	add	r3, ip
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2100      	movs	r1, #0
 800115e:	e737      	b.n	8000fd0 <__aeabi_ddiv+0x8c>
 8001160:	2303      	movs	r3, #3
 8001162:	46b1      	mov	r9, r6
 8001164:	9000      	str	r0, [sp, #0]
 8001166:	260c      	movs	r6, #12
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	e711      	b.n	8000f90 <__aeabi_ddiv+0x4c>
 800116c:	2300      	movs	r3, #0
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	2604      	movs	r6, #4
 8001174:	2700      	movs	r7, #0
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	e70a      	b.n	8000f90 <__aeabi_ddiv+0x4c>
 800117a:	2303      	movs	r3, #3
 800117c:	46c3      	mov	fp, r8
 800117e:	431e      	orrs	r6, r3
 8001180:	2103      	movs	r1, #3
 8001182:	e725      	b.n	8000fd0 <__aeabi_ddiv+0x8c>
 8001184:	3301      	adds	r3, #1
 8001186:	431e      	orrs	r6, r3
 8001188:	2200      	movs	r2, #0
 800118a:	2101      	movs	r1, #1
 800118c:	e720      	b.n	8000fd0 <__aeabi_ddiv+0x8c>
 800118e:	2300      	movs	r3, #0
 8001190:	469a      	mov	sl, r3
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	2700      	movs	r7, #0
 8001196:	031b      	lsls	r3, r3, #12
 8001198:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <__aeabi_ddiv+0x27c>)
 800119a:	e761      	b.n	8001060 <__aeabi_ddiv+0x11c>
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	4649      	mov	r1, r9
 80011a0:	031b      	lsls	r3, r3, #12
 80011a2:	4219      	tst	r1, r3
 80011a4:	d100      	bne.n	80011a8 <__aeabi_ddiv+0x264>
 80011a6:	e0e2      	b.n	800136e <__aeabi_ddiv+0x42a>
 80011a8:	4659      	mov	r1, fp
 80011aa:	4219      	tst	r1, r3
 80011ac:	d000      	beq.n	80011b0 <__aeabi_ddiv+0x26c>
 80011ae:	e0de      	b.n	800136e <__aeabi_ddiv+0x42a>
 80011b0:	430b      	orrs	r3, r1
 80011b2:	031b      	lsls	r3, r3, #12
 80011b4:	0017      	movs	r7, r2
 80011b6:	0b1b      	lsrs	r3, r3, #12
 80011b8:	46a2      	mov	sl, r4
 80011ba:	4a01      	ldr	r2, [pc, #4]	; (80011c0 <__aeabi_ddiv+0x27c>)
 80011bc:	e750      	b.n	8001060 <__aeabi_ddiv+0x11c>
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	000007ff 	.word	0x000007ff
 80011c4:	fffffc01 	.word	0xfffffc01
 80011c8:	0801628c 	.word	0x0801628c
 80011cc:	000003ff 	.word	0x000003ff
 80011d0:	feffffff 	.word	0xfeffffff
 80011d4:	000007fe 	.word	0x000007fe
 80011d8:	800fffff 	.word	0x800fffff
 80011dc:	fffffc0d 	.word	0xfffffc0d
 80011e0:	fffff801 	.word	0xfffff801
 80011e4:	000003f3 	.word	0x000003f3
 80011e8:	45d9      	cmp	r9, fp
 80011ea:	d900      	bls.n	80011ee <__aeabi_ddiv+0x2aa>
 80011ec:	e0cb      	b.n	8001386 <__aeabi_ddiv+0x442>
 80011ee:	d100      	bne.n	80011f2 <__aeabi_ddiv+0x2ae>
 80011f0:	e0c6      	b.n	8001380 <__aeabi_ddiv+0x43c>
 80011f2:	003c      	movs	r4, r7
 80011f4:	4648      	mov	r0, r9
 80011f6:	2700      	movs	r7, #0
 80011f8:	9b00      	ldr	r3, [sp, #0]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	465b      	mov	r3, fp
 8001200:	0e16      	lsrs	r6, r2, #24
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	431e      	orrs	r6, r3
 8001206:	0213      	lsls	r3, r2, #8
 8001208:	4698      	mov	r8, r3
 800120a:	0433      	lsls	r3, r6, #16
 800120c:	0c1b      	lsrs	r3, r3, #16
 800120e:	4699      	mov	r9, r3
 8001210:	0c31      	lsrs	r1, r6, #16
 8001212:	9101      	str	r1, [sp, #4]
 8001214:	f7ff f822 	bl	800025c <__aeabi_uidivmod>
 8001218:	464a      	mov	r2, r9
 800121a:	4342      	muls	r2, r0
 800121c:	040b      	lsls	r3, r1, #16
 800121e:	0c21      	lsrs	r1, r4, #16
 8001220:	0005      	movs	r5, r0
 8001222:	4319      	orrs	r1, r3
 8001224:	428a      	cmp	r2, r1
 8001226:	d907      	bls.n	8001238 <__aeabi_ddiv+0x2f4>
 8001228:	1989      	adds	r1, r1, r6
 800122a:	3d01      	subs	r5, #1
 800122c:	428e      	cmp	r6, r1
 800122e:	d803      	bhi.n	8001238 <__aeabi_ddiv+0x2f4>
 8001230:	428a      	cmp	r2, r1
 8001232:	d901      	bls.n	8001238 <__aeabi_ddiv+0x2f4>
 8001234:	1e85      	subs	r5, r0, #2
 8001236:	1989      	adds	r1, r1, r6
 8001238:	1a88      	subs	r0, r1, r2
 800123a:	9901      	ldr	r1, [sp, #4]
 800123c:	f7ff f80e 	bl	800025c <__aeabi_uidivmod>
 8001240:	0409      	lsls	r1, r1, #16
 8001242:	468c      	mov	ip, r1
 8001244:	464a      	mov	r2, r9
 8001246:	0421      	lsls	r1, r4, #16
 8001248:	4664      	mov	r4, ip
 800124a:	4342      	muls	r2, r0
 800124c:	0c09      	lsrs	r1, r1, #16
 800124e:	0003      	movs	r3, r0
 8001250:	4321      	orrs	r1, r4
 8001252:	428a      	cmp	r2, r1
 8001254:	d904      	bls.n	8001260 <__aeabi_ddiv+0x31c>
 8001256:	1989      	adds	r1, r1, r6
 8001258:	3b01      	subs	r3, #1
 800125a:	428e      	cmp	r6, r1
 800125c:	d800      	bhi.n	8001260 <__aeabi_ddiv+0x31c>
 800125e:	e0f1      	b.n	8001444 <__aeabi_ddiv+0x500>
 8001260:	042d      	lsls	r5, r5, #16
 8001262:	431d      	orrs	r5, r3
 8001264:	46ab      	mov	fp, r5
 8001266:	4643      	mov	r3, r8
 8001268:	1a89      	subs	r1, r1, r2
 800126a:	4642      	mov	r2, r8
 800126c:	0c28      	lsrs	r0, r5, #16
 800126e:	0412      	lsls	r2, r2, #16
 8001270:	0c1d      	lsrs	r5, r3, #16
 8001272:	465b      	mov	r3, fp
 8001274:	0c14      	lsrs	r4, r2, #16
 8001276:	0022      	movs	r2, r4
 8001278:	041b      	lsls	r3, r3, #16
 800127a:	0c1b      	lsrs	r3, r3, #16
 800127c:	435a      	muls	r2, r3
 800127e:	9403      	str	r4, [sp, #12]
 8001280:	436b      	muls	r3, r5
 8001282:	4344      	muls	r4, r0
 8001284:	9502      	str	r5, [sp, #8]
 8001286:	4368      	muls	r0, r5
 8001288:	191b      	adds	r3, r3, r4
 800128a:	0c15      	lsrs	r5, r2, #16
 800128c:	18eb      	adds	r3, r5, r3
 800128e:	429c      	cmp	r4, r3
 8001290:	d903      	bls.n	800129a <__aeabi_ddiv+0x356>
 8001292:	2480      	movs	r4, #128	; 0x80
 8001294:	0264      	lsls	r4, r4, #9
 8001296:	46a4      	mov	ip, r4
 8001298:	4460      	add	r0, ip
 800129a:	0c1c      	lsrs	r4, r3, #16
 800129c:	0415      	lsls	r5, r2, #16
 800129e:	041b      	lsls	r3, r3, #16
 80012a0:	0c2d      	lsrs	r5, r5, #16
 80012a2:	1820      	adds	r0, r4, r0
 80012a4:	195d      	adds	r5, r3, r5
 80012a6:	4281      	cmp	r1, r0
 80012a8:	d377      	bcc.n	800139a <__aeabi_ddiv+0x456>
 80012aa:	d073      	beq.n	8001394 <__aeabi_ddiv+0x450>
 80012ac:	1a0c      	subs	r4, r1, r0
 80012ae:	4aa2      	ldr	r2, [pc, #648]	; (8001538 <__aeabi_ddiv+0x5f4>)
 80012b0:	1b7d      	subs	r5, r7, r5
 80012b2:	42af      	cmp	r7, r5
 80012b4:	41bf      	sbcs	r7, r7
 80012b6:	4694      	mov	ip, r2
 80012b8:	9b00      	ldr	r3, [sp, #0]
 80012ba:	427f      	negs	r7, r7
 80012bc:	4463      	add	r3, ip
 80012be:	1be0      	subs	r0, r4, r7
 80012c0:	001c      	movs	r4, r3
 80012c2:	4286      	cmp	r6, r0
 80012c4:	d100      	bne.n	80012c8 <__aeabi_ddiv+0x384>
 80012c6:	e0db      	b.n	8001480 <__aeabi_ddiv+0x53c>
 80012c8:	9901      	ldr	r1, [sp, #4]
 80012ca:	f7fe ffc7 	bl	800025c <__aeabi_uidivmod>
 80012ce:	464a      	mov	r2, r9
 80012d0:	4342      	muls	r2, r0
 80012d2:	040b      	lsls	r3, r1, #16
 80012d4:	0c29      	lsrs	r1, r5, #16
 80012d6:	0007      	movs	r7, r0
 80012d8:	4319      	orrs	r1, r3
 80012da:	428a      	cmp	r2, r1
 80012dc:	d907      	bls.n	80012ee <__aeabi_ddiv+0x3aa>
 80012de:	1989      	adds	r1, r1, r6
 80012e0:	3f01      	subs	r7, #1
 80012e2:	428e      	cmp	r6, r1
 80012e4:	d803      	bhi.n	80012ee <__aeabi_ddiv+0x3aa>
 80012e6:	428a      	cmp	r2, r1
 80012e8:	d901      	bls.n	80012ee <__aeabi_ddiv+0x3aa>
 80012ea:	1e87      	subs	r7, r0, #2
 80012ec:	1989      	adds	r1, r1, r6
 80012ee:	1a88      	subs	r0, r1, r2
 80012f0:	9901      	ldr	r1, [sp, #4]
 80012f2:	f7fe ffb3 	bl	800025c <__aeabi_uidivmod>
 80012f6:	0409      	lsls	r1, r1, #16
 80012f8:	464a      	mov	r2, r9
 80012fa:	4689      	mov	r9, r1
 80012fc:	0429      	lsls	r1, r5, #16
 80012fe:	464d      	mov	r5, r9
 8001300:	4342      	muls	r2, r0
 8001302:	0c09      	lsrs	r1, r1, #16
 8001304:	0003      	movs	r3, r0
 8001306:	4329      	orrs	r1, r5
 8001308:	428a      	cmp	r2, r1
 800130a:	d907      	bls.n	800131c <__aeabi_ddiv+0x3d8>
 800130c:	1989      	adds	r1, r1, r6
 800130e:	3b01      	subs	r3, #1
 8001310:	428e      	cmp	r6, r1
 8001312:	d803      	bhi.n	800131c <__aeabi_ddiv+0x3d8>
 8001314:	428a      	cmp	r2, r1
 8001316:	d901      	bls.n	800131c <__aeabi_ddiv+0x3d8>
 8001318:	1e83      	subs	r3, r0, #2
 800131a:	1989      	adds	r1, r1, r6
 800131c:	043f      	lsls	r7, r7, #16
 800131e:	1a89      	subs	r1, r1, r2
 8001320:	003a      	movs	r2, r7
 8001322:	9f03      	ldr	r7, [sp, #12]
 8001324:	431a      	orrs	r2, r3
 8001326:	0038      	movs	r0, r7
 8001328:	0413      	lsls	r3, r2, #16
 800132a:	0c1b      	lsrs	r3, r3, #16
 800132c:	4358      	muls	r0, r3
 800132e:	4681      	mov	r9, r0
 8001330:	9802      	ldr	r0, [sp, #8]
 8001332:	0c15      	lsrs	r5, r2, #16
 8001334:	436f      	muls	r7, r5
 8001336:	4343      	muls	r3, r0
 8001338:	4345      	muls	r5, r0
 800133a:	4648      	mov	r0, r9
 800133c:	0c00      	lsrs	r0, r0, #16
 800133e:	4684      	mov	ip, r0
 8001340:	19db      	adds	r3, r3, r7
 8001342:	4463      	add	r3, ip
 8001344:	429f      	cmp	r7, r3
 8001346:	d903      	bls.n	8001350 <__aeabi_ddiv+0x40c>
 8001348:	2080      	movs	r0, #128	; 0x80
 800134a:	0240      	lsls	r0, r0, #9
 800134c:	4684      	mov	ip, r0
 800134e:	4465      	add	r5, ip
 8001350:	4648      	mov	r0, r9
 8001352:	0c1f      	lsrs	r7, r3, #16
 8001354:	0400      	lsls	r0, r0, #16
 8001356:	041b      	lsls	r3, r3, #16
 8001358:	0c00      	lsrs	r0, r0, #16
 800135a:	197d      	adds	r5, r7, r5
 800135c:	1818      	adds	r0, r3, r0
 800135e:	42a9      	cmp	r1, r5
 8001360:	d200      	bcs.n	8001364 <__aeabi_ddiv+0x420>
 8001362:	e084      	b.n	800146e <__aeabi_ddiv+0x52a>
 8001364:	d100      	bne.n	8001368 <__aeabi_ddiv+0x424>
 8001366:	e07f      	b.n	8001468 <__aeabi_ddiv+0x524>
 8001368:	2301      	movs	r3, #1
 800136a:	431a      	orrs	r2, r3
 800136c:	e657      	b.n	800101e <__aeabi_ddiv+0xda>
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	464a      	mov	r2, r9
 8001372:	031b      	lsls	r3, r3, #12
 8001374:	4313      	orrs	r3, r2
 8001376:	031b      	lsls	r3, r3, #12
 8001378:	0b1b      	lsrs	r3, r3, #12
 800137a:	46aa      	mov	sl, r5
 800137c:	4a6f      	ldr	r2, [pc, #444]	; (800153c <__aeabi_ddiv+0x5f8>)
 800137e:	e66f      	b.n	8001060 <__aeabi_ddiv+0x11c>
 8001380:	42ba      	cmp	r2, r7
 8001382:	d900      	bls.n	8001386 <__aeabi_ddiv+0x442>
 8001384:	e735      	b.n	80011f2 <__aeabi_ddiv+0x2ae>
 8001386:	464b      	mov	r3, r9
 8001388:	07dc      	lsls	r4, r3, #31
 800138a:	0858      	lsrs	r0, r3, #1
 800138c:	087b      	lsrs	r3, r7, #1
 800138e:	431c      	orrs	r4, r3
 8001390:	07ff      	lsls	r7, r7, #31
 8001392:	e734      	b.n	80011fe <__aeabi_ddiv+0x2ba>
 8001394:	2400      	movs	r4, #0
 8001396:	42af      	cmp	r7, r5
 8001398:	d289      	bcs.n	80012ae <__aeabi_ddiv+0x36a>
 800139a:	4447      	add	r7, r8
 800139c:	4547      	cmp	r7, r8
 800139e:	41a4      	sbcs	r4, r4
 80013a0:	465b      	mov	r3, fp
 80013a2:	4264      	negs	r4, r4
 80013a4:	19a4      	adds	r4, r4, r6
 80013a6:	1864      	adds	r4, r4, r1
 80013a8:	3b01      	subs	r3, #1
 80013aa:	42a6      	cmp	r6, r4
 80013ac:	d21e      	bcs.n	80013ec <__aeabi_ddiv+0x4a8>
 80013ae:	42a0      	cmp	r0, r4
 80013b0:	d86d      	bhi.n	800148e <__aeabi_ddiv+0x54a>
 80013b2:	d100      	bne.n	80013b6 <__aeabi_ddiv+0x472>
 80013b4:	e0b6      	b.n	8001524 <__aeabi_ddiv+0x5e0>
 80013b6:	1a24      	subs	r4, r4, r0
 80013b8:	469b      	mov	fp, r3
 80013ba:	e778      	b.n	80012ae <__aeabi_ddiv+0x36a>
 80013bc:	0003      	movs	r3, r0
 80013be:	465a      	mov	r2, fp
 80013c0:	3b28      	subs	r3, #40	; 0x28
 80013c2:	409a      	lsls	r2, r3
 80013c4:	2700      	movs	r7, #0
 80013c6:	4691      	mov	r9, r2
 80013c8:	e688      	b.n	80010dc <__aeabi_ddiv+0x198>
 80013ca:	4658      	mov	r0, fp
 80013cc:	f001 f912 	bl	80025f4 <__clzsi2>
 80013d0:	3020      	adds	r0, #32
 80013d2:	e672      	b.n	80010ba <__aeabi_ddiv+0x176>
 80013d4:	0003      	movs	r3, r0
 80013d6:	4652      	mov	r2, sl
 80013d8:	3b28      	subs	r3, #40	; 0x28
 80013da:	409a      	lsls	r2, r3
 80013dc:	4693      	mov	fp, r2
 80013de:	2200      	movs	r2, #0
 80013e0:	e6b4      	b.n	800114c <__aeabi_ddiv+0x208>
 80013e2:	4650      	mov	r0, sl
 80013e4:	f001 f906 	bl	80025f4 <__clzsi2>
 80013e8:	3020      	adds	r0, #32
 80013ea:	e69a      	b.n	8001122 <__aeabi_ddiv+0x1de>
 80013ec:	42a6      	cmp	r6, r4
 80013ee:	d1e2      	bne.n	80013b6 <__aeabi_ddiv+0x472>
 80013f0:	45b8      	cmp	r8, r7
 80013f2:	d9dc      	bls.n	80013ae <__aeabi_ddiv+0x46a>
 80013f4:	1a34      	subs	r4, r6, r0
 80013f6:	469b      	mov	fp, r3
 80013f8:	e759      	b.n	80012ae <__aeabi_ddiv+0x36a>
 80013fa:	2b1f      	cmp	r3, #31
 80013fc:	dc65      	bgt.n	80014ca <__aeabi_ddiv+0x586>
 80013fe:	4c50      	ldr	r4, [pc, #320]	; (8001540 <__aeabi_ddiv+0x5fc>)
 8001400:	9900      	ldr	r1, [sp, #0]
 8001402:	46a4      	mov	ip, r4
 8001404:	465c      	mov	r4, fp
 8001406:	4461      	add	r1, ip
 8001408:	0008      	movs	r0, r1
 800140a:	408c      	lsls	r4, r1
 800140c:	0011      	movs	r1, r2
 800140e:	4082      	lsls	r2, r0
 8001410:	40d9      	lsrs	r1, r3
 8001412:	1e50      	subs	r0, r2, #1
 8001414:	4182      	sbcs	r2, r0
 8001416:	430c      	orrs	r4, r1
 8001418:	4314      	orrs	r4, r2
 800141a:	465a      	mov	r2, fp
 800141c:	40da      	lsrs	r2, r3
 800141e:	0013      	movs	r3, r2
 8001420:	0762      	lsls	r2, r4, #29
 8001422:	d009      	beq.n	8001438 <__aeabi_ddiv+0x4f4>
 8001424:	220f      	movs	r2, #15
 8001426:	4022      	ands	r2, r4
 8001428:	2a04      	cmp	r2, #4
 800142a:	d005      	beq.n	8001438 <__aeabi_ddiv+0x4f4>
 800142c:	0022      	movs	r2, r4
 800142e:	1d14      	adds	r4, r2, #4
 8001430:	4294      	cmp	r4, r2
 8001432:	4189      	sbcs	r1, r1
 8001434:	4249      	negs	r1, r1
 8001436:	185b      	adds	r3, r3, r1
 8001438:	021a      	lsls	r2, r3, #8
 800143a:	d562      	bpl.n	8001502 <__aeabi_ddiv+0x5be>
 800143c:	2201      	movs	r2, #1
 800143e:	2300      	movs	r3, #0
 8001440:	2700      	movs	r7, #0
 8001442:	e60d      	b.n	8001060 <__aeabi_ddiv+0x11c>
 8001444:	428a      	cmp	r2, r1
 8001446:	d800      	bhi.n	800144a <__aeabi_ddiv+0x506>
 8001448:	e70a      	b.n	8001260 <__aeabi_ddiv+0x31c>
 800144a:	1e83      	subs	r3, r0, #2
 800144c:	1989      	adds	r1, r1, r6
 800144e:	e707      	b.n	8001260 <__aeabi_ddiv+0x31c>
 8001450:	230f      	movs	r3, #15
 8001452:	4013      	ands	r3, r2
 8001454:	2b04      	cmp	r3, #4
 8001456:	d100      	bne.n	800145a <__aeabi_ddiv+0x516>
 8001458:	e5e6      	b.n	8001028 <__aeabi_ddiv+0xe4>
 800145a:	1d17      	adds	r7, r2, #4
 800145c:	4297      	cmp	r7, r2
 800145e:	4192      	sbcs	r2, r2
 8001460:	4253      	negs	r3, r2
 8001462:	449b      	add	fp, r3
 8001464:	08fa      	lsrs	r2, r7, #3
 8001466:	e5e0      	b.n	800102a <__aeabi_ddiv+0xe6>
 8001468:	2800      	cmp	r0, #0
 800146a:	d100      	bne.n	800146e <__aeabi_ddiv+0x52a>
 800146c:	e5d7      	b.n	800101e <__aeabi_ddiv+0xda>
 800146e:	1871      	adds	r1, r6, r1
 8001470:	1e53      	subs	r3, r2, #1
 8001472:	42b1      	cmp	r1, r6
 8001474:	d327      	bcc.n	80014c6 <__aeabi_ddiv+0x582>
 8001476:	42a9      	cmp	r1, r5
 8001478:	d315      	bcc.n	80014a6 <__aeabi_ddiv+0x562>
 800147a:	d058      	beq.n	800152e <__aeabi_ddiv+0x5ea>
 800147c:	001a      	movs	r2, r3
 800147e:	e773      	b.n	8001368 <__aeabi_ddiv+0x424>
 8001480:	2b00      	cmp	r3, #0
 8001482:	dc00      	bgt.n	8001486 <__aeabi_ddiv+0x542>
 8001484:	e604      	b.n	8001090 <__aeabi_ddiv+0x14c>
 8001486:	2301      	movs	r3, #1
 8001488:	2200      	movs	r2, #0
 800148a:	449b      	add	fp, r3
 800148c:	e5cd      	b.n	800102a <__aeabi_ddiv+0xe6>
 800148e:	2302      	movs	r3, #2
 8001490:	4447      	add	r7, r8
 8001492:	4547      	cmp	r7, r8
 8001494:	4189      	sbcs	r1, r1
 8001496:	425b      	negs	r3, r3
 8001498:	469c      	mov	ip, r3
 800149a:	4249      	negs	r1, r1
 800149c:	1989      	adds	r1, r1, r6
 800149e:	190c      	adds	r4, r1, r4
 80014a0:	44e3      	add	fp, ip
 80014a2:	1a24      	subs	r4, r4, r0
 80014a4:	e703      	b.n	80012ae <__aeabi_ddiv+0x36a>
 80014a6:	4643      	mov	r3, r8
 80014a8:	005f      	lsls	r7, r3, #1
 80014aa:	4547      	cmp	r7, r8
 80014ac:	419b      	sbcs	r3, r3
 80014ae:	46b8      	mov	r8, r7
 80014b0:	425b      	negs	r3, r3
 80014b2:	199e      	adds	r6, r3, r6
 80014b4:	3a02      	subs	r2, #2
 80014b6:	1989      	adds	r1, r1, r6
 80014b8:	42a9      	cmp	r1, r5
 80014ba:	d000      	beq.n	80014be <__aeabi_ddiv+0x57a>
 80014bc:	e754      	b.n	8001368 <__aeabi_ddiv+0x424>
 80014be:	4540      	cmp	r0, r8
 80014c0:	d000      	beq.n	80014c4 <__aeabi_ddiv+0x580>
 80014c2:	e751      	b.n	8001368 <__aeabi_ddiv+0x424>
 80014c4:	e5ab      	b.n	800101e <__aeabi_ddiv+0xda>
 80014c6:	001a      	movs	r2, r3
 80014c8:	e7f6      	b.n	80014b8 <__aeabi_ddiv+0x574>
 80014ca:	211f      	movs	r1, #31
 80014cc:	465f      	mov	r7, fp
 80014ce:	4249      	negs	r1, r1
 80014d0:	1b0c      	subs	r4, r1, r4
 80014d2:	40e7      	lsrs	r7, r4
 80014d4:	2b20      	cmp	r3, #32
 80014d6:	d007      	beq.n	80014e8 <__aeabi_ddiv+0x5a4>
 80014d8:	491a      	ldr	r1, [pc, #104]	; (8001544 <__aeabi_ddiv+0x600>)
 80014da:	9b00      	ldr	r3, [sp, #0]
 80014dc:	468c      	mov	ip, r1
 80014de:	4463      	add	r3, ip
 80014e0:	0018      	movs	r0, r3
 80014e2:	465b      	mov	r3, fp
 80014e4:	4083      	lsls	r3, r0
 80014e6:	431a      	orrs	r2, r3
 80014e8:	1e50      	subs	r0, r2, #1
 80014ea:	4182      	sbcs	r2, r0
 80014ec:	433a      	orrs	r2, r7
 80014ee:	2707      	movs	r7, #7
 80014f0:	2300      	movs	r3, #0
 80014f2:	4017      	ands	r7, r2
 80014f4:	d009      	beq.n	800150a <__aeabi_ddiv+0x5c6>
 80014f6:	210f      	movs	r1, #15
 80014f8:	2300      	movs	r3, #0
 80014fa:	4011      	ands	r1, r2
 80014fc:	0014      	movs	r4, r2
 80014fe:	2904      	cmp	r1, #4
 8001500:	d195      	bne.n	800142e <__aeabi_ddiv+0x4ea>
 8001502:	0022      	movs	r2, r4
 8001504:	075f      	lsls	r7, r3, #29
 8001506:	025b      	lsls	r3, r3, #9
 8001508:	0b1b      	lsrs	r3, r3, #12
 800150a:	08d2      	lsrs	r2, r2, #3
 800150c:	4317      	orrs	r7, r2
 800150e:	2200      	movs	r2, #0
 8001510:	e5a6      	b.n	8001060 <__aeabi_ddiv+0x11c>
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	4659      	mov	r1, fp
 8001516:	031b      	lsls	r3, r3, #12
 8001518:	430b      	orrs	r3, r1
 800151a:	031b      	lsls	r3, r3, #12
 800151c:	0017      	movs	r7, r2
 800151e:	0b1b      	lsrs	r3, r3, #12
 8001520:	4a06      	ldr	r2, [pc, #24]	; (800153c <__aeabi_ddiv+0x5f8>)
 8001522:	e59d      	b.n	8001060 <__aeabi_ddiv+0x11c>
 8001524:	42bd      	cmp	r5, r7
 8001526:	d8b2      	bhi.n	800148e <__aeabi_ddiv+0x54a>
 8001528:	469b      	mov	fp, r3
 800152a:	2400      	movs	r4, #0
 800152c:	e6bf      	b.n	80012ae <__aeabi_ddiv+0x36a>
 800152e:	4580      	cmp	r8, r0
 8001530:	d3b9      	bcc.n	80014a6 <__aeabi_ddiv+0x562>
 8001532:	001a      	movs	r2, r3
 8001534:	e7c3      	b.n	80014be <__aeabi_ddiv+0x57a>
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	000003ff 	.word	0x000003ff
 800153c:	000007ff 	.word	0x000007ff
 8001540:	0000041e 	.word	0x0000041e
 8001544:	0000043e 	.word	0x0000043e

08001548 <__eqdf2>:
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	464f      	mov	r7, r9
 800154c:	4646      	mov	r6, r8
 800154e:	46d6      	mov	lr, sl
 8001550:	4684      	mov	ip, r0
 8001552:	b5c0      	push	{r6, r7, lr}
 8001554:	4680      	mov	r8, r0
 8001556:	4e19      	ldr	r6, [pc, #100]	; (80015bc <__eqdf2+0x74>)
 8001558:	0318      	lsls	r0, r3, #12
 800155a:	030f      	lsls	r7, r1, #12
 800155c:	004d      	lsls	r5, r1, #1
 800155e:	0b00      	lsrs	r0, r0, #12
 8001560:	005c      	lsls	r4, r3, #1
 8001562:	4682      	mov	sl, r0
 8001564:	0b3f      	lsrs	r7, r7, #12
 8001566:	0d6d      	lsrs	r5, r5, #21
 8001568:	0fc9      	lsrs	r1, r1, #31
 800156a:	4691      	mov	r9, r2
 800156c:	0d64      	lsrs	r4, r4, #21
 800156e:	0fdb      	lsrs	r3, r3, #31
 8001570:	2001      	movs	r0, #1
 8001572:	42b5      	cmp	r5, r6
 8001574:	d00a      	beq.n	800158c <__eqdf2+0x44>
 8001576:	42b4      	cmp	r4, r6
 8001578:	d003      	beq.n	8001582 <__eqdf2+0x3a>
 800157a:	42a5      	cmp	r5, r4
 800157c:	d101      	bne.n	8001582 <__eqdf2+0x3a>
 800157e:	4557      	cmp	r7, sl
 8001580:	d00c      	beq.n	800159c <__eqdf2+0x54>
 8001582:	bc1c      	pop	{r2, r3, r4}
 8001584:	4690      	mov	r8, r2
 8001586:	4699      	mov	r9, r3
 8001588:	46a2      	mov	sl, r4
 800158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800158c:	4666      	mov	r6, ip
 800158e:	433e      	orrs	r6, r7
 8001590:	d1f7      	bne.n	8001582 <__eqdf2+0x3a>
 8001592:	42ac      	cmp	r4, r5
 8001594:	d1f5      	bne.n	8001582 <__eqdf2+0x3a>
 8001596:	4654      	mov	r4, sl
 8001598:	4314      	orrs	r4, r2
 800159a:	d1f2      	bne.n	8001582 <__eqdf2+0x3a>
 800159c:	2001      	movs	r0, #1
 800159e:	45c8      	cmp	r8, r9
 80015a0:	d1ef      	bne.n	8001582 <__eqdf2+0x3a>
 80015a2:	4299      	cmp	r1, r3
 80015a4:	d007      	beq.n	80015b6 <__eqdf2+0x6e>
 80015a6:	2d00      	cmp	r5, #0
 80015a8:	d1eb      	bne.n	8001582 <__eqdf2+0x3a>
 80015aa:	4663      	mov	r3, ip
 80015ac:	431f      	orrs	r7, r3
 80015ae:	0038      	movs	r0, r7
 80015b0:	1e47      	subs	r7, r0, #1
 80015b2:	41b8      	sbcs	r0, r7
 80015b4:	e7e5      	b.n	8001582 <__eqdf2+0x3a>
 80015b6:	2000      	movs	r0, #0
 80015b8:	e7e3      	b.n	8001582 <__eqdf2+0x3a>
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	000007ff 	.word	0x000007ff

080015c0 <__gedf2>:
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	464f      	mov	r7, r9
 80015c4:	4646      	mov	r6, r8
 80015c6:	46d6      	mov	lr, sl
 80015c8:	004d      	lsls	r5, r1, #1
 80015ca:	b5c0      	push	{r6, r7, lr}
 80015cc:	030e      	lsls	r6, r1, #12
 80015ce:	0fc9      	lsrs	r1, r1, #31
 80015d0:	468a      	mov	sl, r1
 80015d2:	492c      	ldr	r1, [pc, #176]	; (8001684 <__gedf2+0xc4>)
 80015d4:	031f      	lsls	r7, r3, #12
 80015d6:	005c      	lsls	r4, r3, #1
 80015d8:	4680      	mov	r8, r0
 80015da:	0b36      	lsrs	r6, r6, #12
 80015dc:	0d6d      	lsrs	r5, r5, #21
 80015de:	4691      	mov	r9, r2
 80015e0:	0b3f      	lsrs	r7, r7, #12
 80015e2:	0d64      	lsrs	r4, r4, #21
 80015e4:	0fdb      	lsrs	r3, r3, #31
 80015e6:	428d      	cmp	r5, r1
 80015e8:	d01e      	beq.n	8001628 <__gedf2+0x68>
 80015ea:	428c      	cmp	r4, r1
 80015ec:	d016      	beq.n	800161c <__gedf2+0x5c>
 80015ee:	2d00      	cmp	r5, #0
 80015f0:	d11e      	bne.n	8001630 <__gedf2+0x70>
 80015f2:	4330      	orrs	r0, r6
 80015f4:	4684      	mov	ip, r0
 80015f6:	2c00      	cmp	r4, #0
 80015f8:	d101      	bne.n	80015fe <__gedf2+0x3e>
 80015fa:	433a      	orrs	r2, r7
 80015fc:	d023      	beq.n	8001646 <__gedf2+0x86>
 80015fe:	4662      	mov	r2, ip
 8001600:	2a00      	cmp	r2, #0
 8001602:	d01a      	beq.n	800163a <__gedf2+0x7a>
 8001604:	459a      	cmp	sl, r3
 8001606:	d029      	beq.n	800165c <__gedf2+0x9c>
 8001608:	4651      	mov	r1, sl
 800160a:	2002      	movs	r0, #2
 800160c:	3901      	subs	r1, #1
 800160e:	4008      	ands	r0, r1
 8001610:	3801      	subs	r0, #1
 8001612:	bc1c      	pop	{r2, r3, r4}
 8001614:	4690      	mov	r8, r2
 8001616:	4699      	mov	r9, r3
 8001618:	46a2      	mov	sl, r4
 800161a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161c:	0039      	movs	r1, r7
 800161e:	4311      	orrs	r1, r2
 8001620:	d0e5      	beq.n	80015ee <__gedf2+0x2e>
 8001622:	2002      	movs	r0, #2
 8001624:	4240      	negs	r0, r0
 8001626:	e7f4      	b.n	8001612 <__gedf2+0x52>
 8001628:	4330      	orrs	r0, r6
 800162a:	d1fa      	bne.n	8001622 <__gedf2+0x62>
 800162c:	42ac      	cmp	r4, r5
 800162e:	d00f      	beq.n	8001650 <__gedf2+0x90>
 8001630:	2c00      	cmp	r4, #0
 8001632:	d10f      	bne.n	8001654 <__gedf2+0x94>
 8001634:	433a      	orrs	r2, r7
 8001636:	d0e7      	beq.n	8001608 <__gedf2+0x48>
 8001638:	e00c      	b.n	8001654 <__gedf2+0x94>
 800163a:	2201      	movs	r2, #1
 800163c:	3b01      	subs	r3, #1
 800163e:	4393      	bics	r3, r2
 8001640:	0018      	movs	r0, r3
 8001642:	3001      	adds	r0, #1
 8001644:	e7e5      	b.n	8001612 <__gedf2+0x52>
 8001646:	4663      	mov	r3, ip
 8001648:	2000      	movs	r0, #0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0e1      	beq.n	8001612 <__gedf2+0x52>
 800164e:	e7db      	b.n	8001608 <__gedf2+0x48>
 8001650:	433a      	orrs	r2, r7
 8001652:	d1e6      	bne.n	8001622 <__gedf2+0x62>
 8001654:	459a      	cmp	sl, r3
 8001656:	d1d7      	bne.n	8001608 <__gedf2+0x48>
 8001658:	42a5      	cmp	r5, r4
 800165a:	dcd5      	bgt.n	8001608 <__gedf2+0x48>
 800165c:	42a5      	cmp	r5, r4
 800165e:	db05      	blt.n	800166c <__gedf2+0xac>
 8001660:	42be      	cmp	r6, r7
 8001662:	d8d1      	bhi.n	8001608 <__gedf2+0x48>
 8001664:	d008      	beq.n	8001678 <__gedf2+0xb8>
 8001666:	2000      	movs	r0, #0
 8001668:	42be      	cmp	r6, r7
 800166a:	d2d2      	bcs.n	8001612 <__gedf2+0x52>
 800166c:	4650      	mov	r0, sl
 800166e:	2301      	movs	r3, #1
 8001670:	3801      	subs	r0, #1
 8001672:	4398      	bics	r0, r3
 8001674:	3001      	adds	r0, #1
 8001676:	e7cc      	b.n	8001612 <__gedf2+0x52>
 8001678:	45c8      	cmp	r8, r9
 800167a:	d8c5      	bhi.n	8001608 <__gedf2+0x48>
 800167c:	2000      	movs	r0, #0
 800167e:	45c8      	cmp	r8, r9
 8001680:	d3f4      	bcc.n	800166c <__gedf2+0xac>
 8001682:	e7c6      	b.n	8001612 <__gedf2+0x52>
 8001684:	000007ff 	.word	0x000007ff

08001688 <__ledf2>:
 8001688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168a:	464f      	mov	r7, r9
 800168c:	4646      	mov	r6, r8
 800168e:	46d6      	mov	lr, sl
 8001690:	004d      	lsls	r5, r1, #1
 8001692:	b5c0      	push	{r6, r7, lr}
 8001694:	030e      	lsls	r6, r1, #12
 8001696:	0fc9      	lsrs	r1, r1, #31
 8001698:	468a      	mov	sl, r1
 800169a:	492e      	ldr	r1, [pc, #184]	; (8001754 <__ledf2+0xcc>)
 800169c:	031f      	lsls	r7, r3, #12
 800169e:	005c      	lsls	r4, r3, #1
 80016a0:	4680      	mov	r8, r0
 80016a2:	0b36      	lsrs	r6, r6, #12
 80016a4:	0d6d      	lsrs	r5, r5, #21
 80016a6:	4691      	mov	r9, r2
 80016a8:	0b3f      	lsrs	r7, r7, #12
 80016aa:	0d64      	lsrs	r4, r4, #21
 80016ac:	0fdb      	lsrs	r3, r3, #31
 80016ae:	428d      	cmp	r5, r1
 80016b0:	d018      	beq.n	80016e4 <__ledf2+0x5c>
 80016b2:	428c      	cmp	r4, r1
 80016b4:	d011      	beq.n	80016da <__ledf2+0x52>
 80016b6:	2d00      	cmp	r5, #0
 80016b8:	d118      	bne.n	80016ec <__ledf2+0x64>
 80016ba:	4330      	orrs	r0, r6
 80016bc:	4684      	mov	ip, r0
 80016be:	2c00      	cmp	r4, #0
 80016c0:	d11e      	bne.n	8001700 <__ledf2+0x78>
 80016c2:	433a      	orrs	r2, r7
 80016c4:	d11c      	bne.n	8001700 <__ledf2+0x78>
 80016c6:	4663      	mov	r3, ip
 80016c8:	2000      	movs	r0, #0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d030      	beq.n	8001730 <__ledf2+0xa8>
 80016ce:	4651      	mov	r1, sl
 80016d0:	2002      	movs	r0, #2
 80016d2:	3901      	subs	r1, #1
 80016d4:	4008      	ands	r0, r1
 80016d6:	3801      	subs	r0, #1
 80016d8:	e02a      	b.n	8001730 <__ledf2+0xa8>
 80016da:	0039      	movs	r1, r7
 80016dc:	4311      	orrs	r1, r2
 80016de:	d0ea      	beq.n	80016b6 <__ledf2+0x2e>
 80016e0:	2002      	movs	r0, #2
 80016e2:	e025      	b.n	8001730 <__ledf2+0xa8>
 80016e4:	4330      	orrs	r0, r6
 80016e6:	d1fb      	bne.n	80016e0 <__ledf2+0x58>
 80016e8:	42ac      	cmp	r4, r5
 80016ea:	d026      	beq.n	800173a <__ledf2+0xb2>
 80016ec:	2c00      	cmp	r4, #0
 80016ee:	d126      	bne.n	800173e <__ledf2+0xb6>
 80016f0:	433a      	orrs	r2, r7
 80016f2:	d124      	bne.n	800173e <__ledf2+0xb6>
 80016f4:	4651      	mov	r1, sl
 80016f6:	2002      	movs	r0, #2
 80016f8:	3901      	subs	r1, #1
 80016fa:	4008      	ands	r0, r1
 80016fc:	3801      	subs	r0, #1
 80016fe:	e017      	b.n	8001730 <__ledf2+0xa8>
 8001700:	4662      	mov	r2, ip
 8001702:	2a00      	cmp	r2, #0
 8001704:	d00f      	beq.n	8001726 <__ledf2+0x9e>
 8001706:	459a      	cmp	sl, r3
 8001708:	d1e1      	bne.n	80016ce <__ledf2+0x46>
 800170a:	42a5      	cmp	r5, r4
 800170c:	db05      	blt.n	800171a <__ledf2+0x92>
 800170e:	42be      	cmp	r6, r7
 8001710:	d8dd      	bhi.n	80016ce <__ledf2+0x46>
 8001712:	d019      	beq.n	8001748 <__ledf2+0xc0>
 8001714:	2000      	movs	r0, #0
 8001716:	42be      	cmp	r6, r7
 8001718:	d20a      	bcs.n	8001730 <__ledf2+0xa8>
 800171a:	4650      	mov	r0, sl
 800171c:	2301      	movs	r3, #1
 800171e:	3801      	subs	r0, #1
 8001720:	4398      	bics	r0, r3
 8001722:	3001      	adds	r0, #1
 8001724:	e004      	b.n	8001730 <__ledf2+0xa8>
 8001726:	2201      	movs	r2, #1
 8001728:	3b01      	subs	r3, #1
 800172a:	4393      	bics	r3, r2
 800172c:	0018      	movs	r0, r3
 800172e:	3001      	adds	r0, #1
 8001730:	bc1c      	pop	{r2, r3, r4}
 8001732:	4690      	mov	r8, r2
 8001734:	4699      	mov	r9, r3
 8001736:	46a2      	mov	sl, r4
 8001738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800173a:	433a      	orrs	r2, r7
 800173c:	d1d0      	bne.n	80016e0 <__ledf2+0x58>
 800173e:	459a      	cmp	sl, r3
 8001740:	d1c5      	bne.n	80016ce <__ledf2+0x46>
 8001742:	42a5      	cmp	r5, r4
 8001744:	dcc3      	bgt.n	80016ce <__ledf2+0x46>
 8001746:	e7e0      	b.n	800170a <__ledf2+0x82>
 8001748:	45c8      	cmp	r8, r9
 800174a:	d8c0      	bhi.n	80016ce <__ledf2+0x46>
 800174c:	2000      	movs	r0, #0
 800174e:	45c8      	cmp	r8, r9
 8001750:	d3e3      	bcc.n	800171a <__ledf2+0x92>
 8001752:	e7ed      	b.n	8001730 <__ledf2+0xa8>
 8001754:	000007ff 	.word	0x000007ff

08001758 <__aeabi_dmul>:
 8001758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175a:	4657      	mov	r7, sl
 800175c:	46de      	mov	lr, fp
 800175e:	464e      	mov	r6, r9
 8001760:	4645      	mov	r5, r8
 8001762:	b5e0      	push	{r5, r6, r7, lr}
 8001764:	4683      	mov	fp, r0
 8001766:	0006      	movs	r6, r0
 8001768:	030f      	lsls	r7, r1, #12
 800176a:	0048      	lsls	r0, r1, #1
 800176c:	b087      	sub	sp, #28
 800176e:	4692      	mov	sl, r2
 8001770:	001d      	movs	r5, r3
 8001772:	0b3f      	lsrs	r7, r7, #12
 8001774:	0d40      	lsrs	r0, r0, #21
 8001776:	0fcc      	lsrs	r4, r1, #31
 8001778:	2800      	cmp	r0, #0
 800177a:	d100      	bne.n	800177e <__aeabi_dmul+0x26>
 800177c:	e06f      	b.n	800185e <__aeabi_dmul+0x106>
 800177e:	4bde      	ldr	r3, [pc, #888]	; (8001af8 <__aeabi_dmul+0x3a0>)
 8001780:	4298      	cmp	r0, r3
 8001782:	d038      	beq.n	80017f6 <__aeabi_dmul+0x9e>
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	00ff      	lsls	r7, r7, #3
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	431f      	orrs	r7, r3
 800178c:	0f73      	lsrs	r3, r6, #29
 800178e:	433b      	orrs	r3, r7
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	4bda      	ldr	r3, [pc, #872]	; (8001afc <__aeabi_dmul+0x3a4>)
 8001794:	2700      	movs	r7, #0
 8001796:	4699      	mov	r9, r3
 8001798:	2300      	movs	r3, #0
 800179a:	469b      	mov	fp, r3
 800179c:	00f6      	lsls	r6, r6, #3
 800179e:	4481      	add	r9, r0
 80017a0:	032b      	lsls	r3, r5, #12
 80017a2:	0069      	lsls	r1, r5, #1
 80017a4:	0b1b      	lsrs	r3, r3, #12
 80017a6:	4652      	mov	r2, sl
 80017a8:	4698      	mov	r8, r3
 80017aa:	0d49      	lsrs	r1, r1, #21
 80017ac:	0fed      	lsrs	r5, r5, #31
 80017ae:	2900      	cmp	r1, #0
 80017b0:	d100      	bne.n	80017b4 <__aeabi_dmul+0x5c>
 80017b2:	e085      	b.n	80018c0 <__aeabi_dmul+0x168>
 80017b4:	4bd0      	ldr	r3, [pc, #832]	; (8001af8 <__aeabi_dmul+0x3a0>)
 80017b6:	4299      	cmp	r1, r3
 80017b8:	d100      	bne.n	80017bc <__aeabi_dmul+0x64>
 80017ba:	e073      	b.n	80018a4 <__aeabi_dmul+0x14c>
 80017bc:	4643      	mov	r3, r8
 80017be:	00da      	lsls	r2, r3, #3
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	041b      	lsls	r3, r3, #16
 80017c4:	4313      	orrs	r3, r2
 80017c6:	4652      	mov	r2, sl
 80017c8:	48cc      	ldr	r0, [pc, #816]	; (8001afc <__aeabi_dmul+0x3a4>)
 80017ca:	0f52      	lsrs	r2, r2, #29
 80017cc:	4684      	mov	ip, r0
 80017ce:	4313      	orrs	r3, r2
 80017d0:	4652      	mov	r2, sl
 80017d2:	2000      	movs	r0, #0
 80017d4:	4461      	add	r1, ip
 80017d6:	00d2      	lsls	r2, r2, #3
 80017d8:	4489      	add	r9, r1
 80017da:	0021      	movs	r1, r4
 80017dc:	4069      	eors	r1, r5
 80017de:	9100      	str	r1, [sp, #0]
 80017e0:	468c      	mov	ip, r1
 80017e2:	2101      	movs	r1, #1
 80017e4:	4449      	add	r1, r9
 80017e6:	468a      	mov	sl, r1
 80017e8:	2f0f      	cmp	r7, #15
 80017ea:	d900      	bls.n	80017ee <__aeabi_dmul+0x96>
 80017ec:	e090      	b.n	8001910 <__aeabi_dmul+0x1b8>
 80017ee:	49c4      	ldr	r1, [pc, #784]	; (8001b00 <__aeabi_dmul+0x3a8>)
 80017f0:	00bf      	lsls	r7, r7, #2
 80017f2:	59cf      	ldr	r7, [r1, r7]
 80017f4:	46bf      	mov	pc, r7
 80017f6:	465b      	mov	r3, fp
 80017f8:	433b      	orrs	r3, r7
 80017fa:	9301      	str	r3, [sp, #4]
 80017fc:	d000      	beq.n	8001800 <__aeabi_dmul+0xa8>
 80017fe:	e16a      	b.n	8001ad6 <__aeabi_dmul+0x37e>
 8001800:	2302      	movs	r3, #2
 8001802:	2708      	movs	r7, #8
 8001804:	2600      	movs	r6, #0
 8001806:	4681      	mov	r9, r0
 8001808:	469b      	mov	fp, r3
 800180a:	e7c9      	b.n	80017a0 <__aeabi_dmul+0x48>
 800180c:	0032      	movs	r2, r6
 800180e:	4658      	mov	r0, fp
 8001810:	9b01      	ldr	r3, [sp, #4]
 8001812:	4661      	mov	r1, ip
 8001814:	9100      	str	r1, [sp, #0]
 8001816:	2802      	cmp	r0, #2
 8001818:	d100      	bne.n	800181c <__aeabi_dmul+0xc4>
 800181a:	e075      	b.n	8001908 <__aeabi_dmul+0x1b0>
 800181c:	2803      	cmp	r0, #3
 800181e:	d100      	bne.n	8001822 <__aeabi_dmul+0xca>
 8001820:	e1fe      	b.n	8001c20 <__aeabi_dmul+0x4c8>
 8001822:	2801      	cmp	r0, #1
 8001824:	d000      	beq.n	8001828 <__aeabi_dmul+0xd0>
 8001826:	e12c      	b.n	8001a82 <__aeabi_dmul+0x32a>
 8001828:	2300      	movs	r3, #0
 800182a:	2700      	movs	r7, #0
 800182c:	2600      	movs	r6, #0
 800182e:	2500      	movs	r5, #0
 8001830:	033f      	lsls	r7, r7, #12
 8001832:	0d2a      	lsrs	r2, r5, #20
 8001834:	0b3f      	lsrs	r7, r7, #12
 8001836:	48b3      	ldr	r0, [pc, #716]	; (8001b04 <__aeabi_dmul+0x3ac>)
 8001838:	0512      	lsls	r2, r2, #20
 800183a:	433a      	orrs	r2, r7
 800183c:	4002      	ands	r2, r0
 800183e:	051b      	lsls	r3, r3, #20
 8001840:	4313      	orrs	r3, r2
 8001842:	9a00      	ldr	r2, [sp, #0]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	07d1      	lsls	r1, r2, #31
 8001848:	085b      	lsrs	r3, r3, #1
 800184a:	430b      	orrs	r3, r1
 800184c:	0030      	movs	r0, r6
 800184e:	0019      	movs	r1, r3
 8001850:	b007      	add	sp, #28
 8001852:	bc3c      	pop	{r2, r3, r4, r5}
 8001854:	4690      	mov	r8, r2
 8001856:	4699      	mov	r9, r3
 8001858:	46a2      	mov	sl, r4
 800185a:	46ab      	mov	fp, r5
 800185c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185e:	465b      	mov	r3, fp
 8001860:	433b      	orrs	r3, r7
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	d100      	bne.n	8001868 <__aeabi_dmul+0x110>
 8001866:	e12f      	b.n	8001ac8 <__aeabi_dmul+0x370>
 8001868:	2f00      	cmp	r7, #0
 800186a:	d100      	bne.n	800186e <__aeabi_dmul+0x116>
 800186c:	e1a5      	b.n	8001bba <__aeabi_dmul+0x462>
 800186e:	0038      	movs	r0, r7
 8001870:	f000 fec0 	bl	80025f4 <__clzsi2>
 8001874:	0003      	movs	r3, r0
 8001876:	3b0b      	subs	r3, #11
 8001878:	2b1c      	cmp	r3, #28
 800187a:	dd00      	ble.n	800187e <__aeabi_dmul+0x126>
 800187c:	e196      	b.n	8001bac <__aeabi_dmul+0x454>
 800187e:	221d      	movs	r2, #29
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	465a      	mov	r2, fp
 8001884:	0001      	movs	r1, r0
 8001886:	40da      	lsrs	r2, r3
 8001888:	465e      	mov	r6, fp
 800188a:	3908      	subs	r1, #8
 800188c:	408f      	lsls	r7, r1
 800188e:	0013      	movs	r3, r2
 8001890:	408e      	lsls	r6, r1
 8001892:	433b      	orrs	r3, r7
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	4b9c      	ldr	r3, [pc, #624]	; (8001b08 <__aeabi_dmul+0x3b0>)
 8001898:	2700      	movs	r7, #0
 800189a:	1a1b      	subs	r3, r3, r0
 800189c:	4699      	mov	r9, r3
 800189e:	2300      	movs	r3, #0
 80018a0:	469b      	mov	fp, r3
 80018a2:	e77d      	b.n	80017a0 <__aeabi_dmul+0x48>
 80018a4:	4641      	mov	r1, r8
 80018a6:	4653      	mov	r3, sl
 80018a8:	430b      	orrs	r3, r1
 80018aa:	4993      	ldr	r1, [pc, #588]	; (8001af8 <__aeabi_dmul+0x3a0>)
 80018ac:	468c      	mov	ip, r1
 80018ae:	44e1      	add	r9, ip
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d000      	beq.n	80018b6 <__aeabi_dmul+0x15e>
 80018b4:	e11a      	b.n	8001aec <__aeabi_dmul+0x394>
 80018b6:	2202      	movs	r2, #2
 80018b8:	2002      	movs	r0, #2
 80018ba:	4317      	orrs	r7, r2
 80018bc:	2200      	movs	r2, #0
 80018be:	e78c      	b.n	80017da <__aeabi_dmul+0x82>
 80018c0:	4313      	orrs	r3, r2
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dmul+0x16e>
 80018c4:	e10d      	b.n	8001ae2 <__aeabi_dmul+0x38a>
 80018c6:	4643      	mov	r3, r8
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dmul+0x176>
 80018cc:	e181      	b.n	8001bd2 <__aeabi_dmul+0x47a>
 80018ce:	4640      	mov	r0, r8
 80018d0:	f000 fe90 	bl	80025f4 <__clzsi2>
 80018d4:	0002      	movs	r2, r0
 80018d6:	3a0b      	subs	r2, #11
 80018d8:	2a1c      	cmp	r2, #28
 80018da:	dd00      	ble.n	80018de <__aeabi_dmul+0x186>
 80018dc:	e172      	b.n	8001bc4 <__aeabi_dmul+0x46c>
 80018de:	0001      	movs	r1, r0
 80018e0:	4643      	mov	r3, r8
 80018e2:	3908      	subs	r1, #8
 80018e4:	408b      	lsls	r3, r1
 80018e6:	4698      	mov	r8, r3
 80018e8:	231d      	movs	r3, #29
 80018ea:	1a9a      	subs	r2, r3, r2
 80018ec:	4653      	mov	r3, sl
 80018ee:	40d3      	lsrs	r3, r2
 80018f0:	001a      	movs	r2, r3
 80018f2:	4643      	mov	r3, r8
 80018f4:	4313      	orrs	r3, r2
 80018f6:	4652      	mov	r2, sl
 80018f8:	408a      	lsls	r2, r1
 80018fa:	4649      	mov	r1, r9
 80018fc:	1a08      	subs	r0, r1, r0
 80018fe:	4982      	ldr	r1, [pc, #520]	; (8001b08 <__aeabi_dmul+0x3b0>)
 8001900:	4689      	mov	r9, r1
 8001902:	4481      	add	r9, r0
 8001904:	2000      	movs	r0, #0
 8001906:	e768      	b.n	80017da <__aeabi_dmul+0x82>
 8001908:	4b7b      	ldr	r3, [pc, #492]	; (8001af8 <__aeabi_dmul+0x3a0>)
 800190a:	2700      	movs	r7, #0
 800190c:	2600      	movs	r6, #0
 800190e:	e78e      	b.n	800182e <__aeabi_dmul+0xd6>
 8001910:	0c14      	lsrs	r4, r2, #16
 8001912:	0412      	lsls	r2, r2, #16
 8001914:	0c12      	lsrs	r2, r2, #16
 8001916:	0011      	movs	r1, r2
 8001918:	0c37      	lsrs	r7, r6, #16
 800191a:	0436      	lsls	r6, r6, #16
 800191c:	0c35      	lsrs	r5, r6, #16
 800191e:	4379      	muls	r1, r7
 8001920:	0028      	movs	r0, r5
 8001922:	468c      	mov	ip, r1
 8001924:	002e      	movs	r6, r5
 8001926:	4360      	muls	r0, r4
 8001928:	4460      	add	r0, ip
 800192a:	4683      	mov	fp, r0
 800192c:	4356      	muls	r6, r2
 800192e:	0021      	movs	r1, r4
 8001930:	0c30      	lsrs	r0, r6, #16
 8001932:	4680      	mov	r8, r0
 8001934:	4658      	mov	r0, fp
 8001936:	4379      	muls	r1, r7
 8001938:	4440      	add	r0, r8
 800193a:	9102      	str	r1, [sp, #8]
 800193c:	4584      	cmp	ip, r0
 800193e:	d906      	bls.n	800194e <__aeabi_dmul+0x1f6>
 8001940:	4688      	mov	r8, r1
 8001942:	2180      	movs	r1, #128	; 0x80
 8001944:	0249      	lsls	r1, r1, #9
 8001946:	468c      	mov	ip, r1
 8001948:	44e0      	add	r8, ip
 800194a:	4641      	mov	r1, r8
 800194c:	9102      	str	r1, [sp, #8]
 800194e:	0436      	lsls	r6, r6, #16
 8001950:	0c01      	lsrs	r1, r0, #16
 8001952:	0c36      	lsrs	r6, r6, #16
 8001954:	0400      	lsls	r0, r0, #16
 8001956:	468b      	mov	fp, r1
 8001958:	1981      	adds	r1, r0, r6
 800195a:	0c1e      	lsrs	r6, r3, #16
 800195c:	041b      	lsls	r3, r3, #16
 800195e:	0c1b      	lsrs	r3, r3, #16
 8001960:	9103      	str	r1, [sp, #12]
 8001962:	0019      	movs	r1, r3
 8001964:	4379      	muls	r1, r7
 8001966:	468c      	mov	ip, r1
 8001968:	0028      	movs	r0, r5
 800196a:	4375      	muls	r5, r6
 800196c:	4465      	add	r5, ip
 800196e:	46a8      	mov	r8, r5
 8001970:	4358      	muls	r0, r3
 8001972:	0c05      	lsrs	r5, r0, #16
 8001974:	4445      	add	r5, r8
 8001976:	4377      	muls	r7, r6
 8001978:	42a9      	cmp	r1, r5
 800197a:	d903      	bls.n	8001984 <__aeabi_dmul+0x22c>
 800197c:	2180      	movs	r1, #128	; 0x80
 800197e:	0249      	lsls	r1, r1, #9
 8001980:	468c      	mov	ip, r1
 8001982:	4467      	add	r7, ip
 8001984:	0c29      	lsrs	r1, r5, #16
 8001986:	468c      	mov	ip, r1
 8001988:	0039      	movs	r1, r7
 800198a:	0400      	lsls	r0, r0, #16
 800198c:	0c00      	lsrs	r0, r0, #16
 800198e:	042d      	lsls	r5, r5, #16
 8001990:	182d      	adds	r5, r5, r0
 8001992:	4461      	add	r1, ip
 8001994:	44ab      	add	fp, r5
 8001996:	9105      	str	r1, [sp, #20]
 8001998:	4659      	mov	r1, fp
 800199a:	9104      	str	r1, [sp, #16]
 800199c:	9901      	ldr	r1, [sp, #4]
 800199e:	040f      	lsls	r7, r1, #16
 80019a0:	0c3f      	lsrs	r7, r7, #16
 80019a2:	0c08      	lsrs	r0, r1, #16
 80019a4:	0039      	movs	r1, r7
 80019a6:	4351      	muls	r1, r2
 80019a8:	4342      	muls	r2, r0
 80019aa:	4690      	mov	r8, r2
 80019ac:	0002      	movs	r2, r0
 80019ae:	468c      	mov	ip, r1
 80019b0:	0c09      	lsrs	r1, r1, #16
 80019b2:	468b      	mov	fp, r1
 80019b4:	4362      	muls	r2, r4
 80019b6:	437c      	muls	r4, r7
 80019b8:	4444      	add	r4, r8
 80019ba:	445c      	add	r4, fp
 80019bc:	45a0      	cmp	r8, r4
 80019be:	d903      	bls.n	80019c8 <__aeabi_dmul+0x270>
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	0249      	lsls	r1, r1, #9
 80019c4:	4688      	mov	r8, r1
 80019c6:	4442      	add	r2, r8
 80019c8:	0c21      	lsrs	r1, r4, #16
 80019ca:	4688      	mov	r8, r1
 80019cc:	4661      	mov	r1, ip
 80019ce:	0409      	lsls	r1, r1, #16
 80019d0:	0c09      	lsrs	r1, r1, #16
 80019d2:	468c      	mov	ip, r1
 80019d4:	0039      	movs	r1, r7
 80019d6:	4359      	muls	r1, r3
 80019d8:	4343      	muls	r3, r0
 80019da:	4370      	muls	r0, r6
 80019dc:	437e      	muls	r6, r7
 80019de:	0c0f      	lsrs	r7, r1, #16
 80019e0:	18f6      	adds	r6, r6, r3
 80019e2:	0424      	lsls	r4, r4, #16
 80019e4:	19be      	adds	r6, r7, r6
 80019e6:	4464      	add	r4, ip
 80019e8:	4442      	add	r2, r8
 80019ea:	468c      	mov	ip, r1
 80019ec:	42b3      	cmp	r3, r6
 80019ee:	d903      	bls.n	80019f8 <__aeabi_dmul+0x2a0>
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	025b      	lsls	r3, r3, #9
 80019f4:	4698      	mov	r8, r3
 80019f6:	4440      	add	r0, r8
 80019f8:	9b02      	ldr	r3, [sp, #8]
 80019fa:	4661      	mov	r1, ip
 80019fc:	4698      	mov	r8, r3
 80019fe:	9b04      	ldr	r3, [sp, #16]
 8001a00:	0437      	lsls	r7, r6, #16
 8001a02:	4443      	add	r3, r8
 8001a04:	469b      	mov	fp, r3
 8001a06:	45ab      	cmp	fp, r5
 8001a08:	41ad      	sbcs	r5, r5
 8001a0a:	426b      	negs	r3, r5
 8001a0c:	040d      	lsls	r5, r1, #16
 8001a0e:	9905      	ldr	r1, [sp, #20]
 8001a10:	0c2d      	lsrs	r5, r5, #16
 8001a12:	468c      	mov	ip, r1
 8001a14:	197f      	adds	r7, r7, r5
 8001a16:	4467      	add	r7, ip
 8001a18:	18fd      	adds	r5, r7, r3
 8001a1a:	46a8      	mov	r8, r5
 8001a1c:	465d      	mov	r5, fp
 8001a1e:	192d      	adds	r5, r5, r4
 8001a20:	42a5      	cmp	r5, r4
 8001a22:	41a4      	sbcs	r4, r4
 8001a24:	4693      	mov	fp, r2
 8001a26:	4264      	negs	r4, r4
 8001a28:	46a4      	mov	ip, r4
 8001a2a:	44c3      	add	fp, r8
 8001a2c:	44dc      	add	ip, fp
 8001a2e:	428f      	cmp	r7, r1
 8001a30:	41bf      	sbcs	r7, r7
 8001a32:	4598      	cmp	r8, r3
 8001a34:	419b      	sbcs	r3, r3
 8001a36:	4593      	cmp	fp, r2
 8001a38:	4192      	sbcs	r2, r2
 8001a3a:	45a4      	cmp	ip, r4
 8001a3c:	41a4      	sbcs	r4, r4
 8001a3e:	425b      	negs	r3, r3
 8001a40:	427f      	negs	r7, r7
 8001a42:	431f      	orrs	r7, r3
 8001a44:	0c36      	lsrs	r6, r6, #16
 8001a46:	4252      	negs	r2, r2
 8001a48:	4264      	negs	r4, r4
 8001a4a:	19bf      	adds	r7, r7, r6
 8001a4c:	4322      	orrs	r2, r4
 8001a4e:	18bf      	adds	r7, r7, r2
 8001a50:	4662      	mov	r2, ip
 8001a52:	1838      	adds	r0, r7, r0
 8001a54:	0243      	lsls	r3, r0, #9
 8001a56:	0dd2      	lsrs	r2, r2, #23
 8001a58:	9903      	ldr	r1, [sp, #12]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	026a      	lsls	r2, r5, #9
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	1e50      	subs	r0, r2, #1
 8001a62:	4182      	sbcs	r2, r0
 8001a64:	4661      	mov	r1, ip
 8001a66:	0ded      	lsrs	r5, r5, #23
 8001a68:	432a      	orrs	r2, r5
 8001a6a:	024e      	lsls	r6, r1, #9
 8001a6c:	4332      	orrs	r2, r6
 8001a6e:	01d9      	lsls	r1, r3, #7
 8001a70:	d400      	bmi.n	8001a74 <__aeabi_dmul+0x31c>
 8001a72:	e0b3      	b.n	8001bdc <__aeabi_dmul+0x484>
 8001a74:	2601      	movs	r6, #1
 8001a76:	0850      	lsrs	r0, r2, #1
 8001a78:	4032      	ands	r2, r6
 8001a7a:	4302      	orrs	r2, r0
 8001a7c:	07de      	lsls	r6, r3, #31
 8001a7e:	4332      	orrs	r2, r6
 8001a80:	085b      	lsrs	r3, r3, #1
 8001a82:	4c22      	ldr	r4, [pc, #136]	; (8001b0c <__aeabi_dmul+0x3b4>)
 8001a84:	4454      	add	r4, sl
 8001a86:	2c00      	cmp	r4, #0
 8001a88:	dd62      	ble.n	8001b50 <__aeabi_dmul+0x3f8>
 8001a8a:	0751      	lsls	r1, r2, #29
 8001a8c:	d009      	beq.n	8001aa2 <__aeabi_dmul+0x34a>
 8001a8e:	200f      	movs	r0, #15
 8001a90:	4010      	ands	r0, r2
 8001a92:	2804      	cmp	r0, #4
 8001a94:	d005      	beq.n	8001aa2 <__aeabi_dmul+0x34a>
 8001a96:	1d10      	adds	r0, r2, #4
 8001a98:	4290      	cmp	r0, r2
 8001a9a:	4192      	sbcs	r2, r2
 8001a9c:	4252      	negs	r2, r2
 8001a9e:	189b      	adds	r3, r3, r2
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	01d9      	lsls	r1, r3, #7
 8001aa4:	d504      	bpl.n	8001ab0 <__aeabi_dmul+0x358>
 8001aa6:	2480      	movs	r4, #128	; 0x80
 8001aa8:	4819      	ldr	r0, [pc, #100]	; (8001b10 <__aeabi_dmul+0x3b8>)
 8001aaa:	00e4      	lsls	r4, r4, #3
 8001aac:	4003      	ands	r3, r0
 8001aae:	4454      	add	r4, sl
 8001ab0:	4818      	ldr	r0, [pc, #96]	; (8001b14 <__aeabi_dmul+0x3bc>)
 8001ab2:	4284      	cmp	r4, r0
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x360>
 8001ab6:	e727      	b.n	8001908 <__aeabi_dmul+0x1b0>
 8001ab8:	075e      	lsls	r6, r3, #29
 8001aba:	025b      	lsls	r3, r3, #9
 8001abc:	08d2      	lsrs	r2, r2, #3
 8001abe:	0b1f      	lsrs	r7, r3, #12
 8001ac0:	0563      	lsls	r3, r4, #21
 8001ac2:	4316      	orrs	r6, r2
 8001ac4:	0d5b      	lsrs	r3, r3, #21
 8001ac6:	e6b2      	b.n	800182e <__aeabi_dmul+0xd6>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	4699      	mov	r9, r3
 8001acc:	3301      	adds	r3, #1
 8001ace:	2704      	movs	r7, #4
 8001ad0:	2600      	movs	r6, #0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	e664      	b.n	80017a0 <__aeabi_dmul+0x48>
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	9701      	str	r7, [sp, #4]
 8001ada:	4681      	mov	r9, r0
 8001adc:	270c      	movs	r7, #12
 8001ade:	469b      	mov	fp, r3
 8001ae0:	e65e      	b.n	80017a0 <__aeabi_dmul+0x48>
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	4317      	orrs	r7, r2
 8001ae8:	2200      	movs	r2, #0
 8001aea:	e676      	b.n	80017da <__aeabi_dmul+0x82>
 8001aec:	2303      	movs	r3, #3
 8001aee:	2003      	movs	r0, #3
 8001af0:	431f      	orrs	r7, r3
 8001af2:	4643      	mov	r3, r8
 8001af4:	e671      	b.n	80017da <__aeabi_dmul+0x82>
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	000007ff 	.word	0x000007ff
 8001afc:	fffffc01 	.word	0xfffffc01
 8001b00:	080162cc 	.word	0x080162cc
 8001b04:	800fffff 	.word	0x800fffff
 8001b08:	fffffc0d 	.word	0xfffffc0d
 8001b0c:	000003ff 	.word	0x000003ff
 8001b10:	feffffff 	.word	0xfeffffff
 8001b14:	000007fe 	.word	0x000007fe
 8001b18:	2300      	movs	r3, #0
 8001b1a:	2780      	movs	r7, #128	; 0x80
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	033f      	lsls	r7, r7, #12
 8001b20:	2600      	movs	r6, #0
 8001b22:	4b43      	ldr	r3, [pc, #268]	; (8001c30 <__aeabi_dmul+0x4d8>)
 8001b24:	e683      	b.n	800182e <__aeabi_dmul+0xd6>
 8001b26:	9b01      	ldr	r3, [sp, #4]
 8001b28:	0032      	movs	r2, r6
 8001b2a:	46a4      	mov	ip, r4
 8001b2c:	4658      	mov	r0, fp
 8001b2e:	e670      	b.n	8001812 <__aeabi_dmul+0xba>
 8001b30:	46ac      	mov	ip, r5
 8001b32:	e66e      	b.n	8001812 <__aeabi_dmul+0xba>
 8001b34:	2780      	movs	r7, #128	; 0x80
 8001b36:	9901      	ldr	r1, [sp, #4]
 8001b38:	033f      	lsls	r7, r7, #12
 8001b3a:	4239      	tst	r1, r7
 8001b3c:	d02d      	beq.n	8001b9a <__aeabi_dmul+0x442>
 8001b3e:	423b      	tst	r3, r7
 8001b40:	d12b      	bne.n	8001b9a <__aeabi_dmul+0x442>
 8001b42:	431f      	orrs	r7, r3
 8001b44:	033f      	lsls	r7, r7, #12
 8001b46:	0b3f      	lsrs	r7, r7, #12
 8001b48:	9500      	str	r5, [sp, #0]
 8001b4a:	0016      	movs	r6, r2
 8001b4c:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <__aeabi_dmul+0x4d8>)
 8001b4e:	e66e      	b.n	800182e <__aeabi_dmul+0xd6>
 8001b50:	2501      	movs	r5, #1
 8001b52:	1b2d      	subs	r5, r5, r4
 8001b54:	2d38      	cmp	r5, #56	; 0x38
 8001b56:	dd00      	ble.n	8001b5a <__aeabi_dmul+0x402>
 8001b58:	e666      	b.n	8001828 <__aeabi_dmul+0xd0>
 8001b5a:	2d1f      	cmp	r5, #31
 8001b5c:	dc40      	bgt.n	8001be0 <__aeabi_dmul+0x488>
 8001b5e:	4835      	ldr	r0, [pc, #212]	; (8001c34 <__aeabi_dmul+0x4dc>)
 8001b60:	001c      	movs	r4, r3
 8001b62:	4450      	add	r0, sl
 8001b64:	0016      	movs	r6, r2
 8001b66:	4082      	lsls	r2, r0
 8001b68:	4084      	lsls	r4, r0
 8001b6a:	40ee      	lsrs	r6, r5
 8001b6c:	1e50      	subs	r0, r2, #1
 8001b6e:	4182      	sbcs	r2, r0
 8001b70:	4334      	orrs	r4, r6
 8001b72:	4314      	orrs	r4, r2
 8001b74:	40eb      	lsrs	r3, r5
 8001b76:	0762      	lsls	r2, r4, #29
 8001b78:	d009      	beq.n	8001b8e <__aeabi_dmul+0x436>
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	4022      	ands	r2, r4
 8001b7e:	2a04      	cmp	r2, #4
 8001b80:	d005      	beq.n	8001b8e <__aeabi_dmul+0x436>
 8001b82:	0022      	movs	r2, r4
 8001b84:	1d14      	adds	r4, r2, #4
 8001b86:	4294      	cmp	r4, r2
 8001b88:	4180      	sbcs	r0, r0
 8001b8a:	4240      	negs	r0, r0
 8001b8c:	181b      	adds	r3, r3, r0
 8001b8e:	021a      	lsls	r2, r3, #8
 8001b90:	d53e      	bpl.n	8001c10 <__aeabi_dmul+0x4b8>
 8001b92:	2301      	movs	r3, #1
 8001b94:	2700      	movs	r7, #0
 8001b96:	2600      	movs	r6, #0
 8001b98:	e649      	b.n	800182e <__aeabi_dmul+0xd6>
 8001b9a:	2780      	movs	r7, #128	; 0x80
 8001b9c:	9b01      	ldr	r3, [sp, #4]
 8001b9e:	033f      	lsls	r7, r7, #12
 8001ba0:	431f      	orrs	r7, r3
 8001ba2:	033f      	lsls	r7, r7, #12
 8001ba4:	0b3f      	lsrs	r7, r7, #12
 8001ba6:	9400      	str	r4, [sp, #0]
 8001ba8:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <__aeabi_dmul+0x4d8>)
 8001baa:	e640      	b.n	800182e <__aeabi_dmul+0xd6>
 8001bac:	0003      	movs	r3, r0
 8001bae:	465a      	mov	r2, fp
 8001bb0:	3b28      	subs	r3, #40	; 0x28
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	2600      	movs	r6, #0
 8001bb6:	9201      	str	r2, [sp, #4]
 8001bb8:	e66d      	b.n	8001896 <__aeabi_dmul+0x13e>
 8001bba:	4658      	mov	r0, fp
 8001bbc:	f000 fd1a 	bl	80025f4 <__clzsi2>
 8001bc0:	3020      	adds	r0, #32
 8001bc2:	e657      	b.n	8001874 <__aeabi_dmul+0x11c>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	4652      	mov	r2, sl
 8001bc8:	3b28      	subs	r3, #40	; 0x28
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	0013      	movs	r3, r2
 8001bce:	2200      	movs	r2, #0
 8001bd0:	e693      	b.n	80018fa <__aeabi_dmul+0x1a2>
 8001bd2:	4650      	mov	r0, sl
 8001bd4:	f000 fd0e 	bl	80025f4 <__clzsi2>
 8001bd8:	3020      	adds	r0, #32
 8001bda:	e67b      	b.n	80018d4 <__aeabi_dmul+0x17c>
 8001bdc:	46ca      	mov	sl, r9
 8001bde:	e750      	b.n	8001a82 <__aeabi_dmul+0x32a>
 8001be0:	201f      	movs	r0, #31
 8001be2:	001e      	movs	r6, r3
 8001be4:	4240      	negs	r0, r0
 8001be6:	1b04      	subs	r4, r0, r4
 8001be8:	40e6      	lsrs	r6, r4
 8001bea:	2d20      	cmp	r5, #32
 8001bec:	d003      	beq.n	8001bf6 <__aeabi_dmul+0x49e>
 8001bee:	4c12      	ldr	r4, [pc, #72]	; (8001c38 <__aeabi_dmul+0x4e0>)
 8001bf0:	4454      	add	r4, sl
 8001bf2:	40a3      	lsls	r3, r4
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	1e50      	subs	r0, r2, #1
 8001bf8:	4182      	sbcs	r2, r0
 8001bfa:	4332      	orrs	r2, r6
 8001bfc:	2607      	movs	r6, #7
 8001bfe:	2700      	movs	r7, #0
 8001c00:	4016      	ands	r6, r2
 8001c02:	d009      	beq.n	8001c18 <__aeabi_dmul+0x4c0>
 8001c04:	200f      	movs	r0, #15
 8001c06:	2300      	movs	r3, #0
 8001c08:	4010      	ands	r0, r2
 8001c0a:	0014      	movs	r4, r2
 8001c0c:	2804      	cmp	r0, #4
 8001c0e:	d1b9      	bne.n	8001b84 <__aeabi_dmul+0x42c>
 8001c10:	0022      	movs	r2, r4
 8001c12:	075e      	lsls	r6, r3, #29
 8001c14:	025b      	lsls	r3, r3, #9
 8001c16:	0b1f      	lsrs	r7, r3, #12
 8001c18:	08d2      	lsrs	r2, r2, #3
 8001c1a:	4316      	orrs	r6, r2
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e606      	b.n	800182e <__aeabi_dmul+0xd6>
 8001c20:	2780      	movs	r7, #128	; 0x80
 8001c22:	033f      	lsls	r7, r7, #12
 8001c24:	431f      	orrs	r7, r3
 8001c26:	033f      	lsls	r7, r7, #12
 8001c28:	0b3f      	lsrs	r7, r7, #12
 8001c2a:	0016      	movs	r6, r2
 8001c2c:	4b00      	ldr	r3, [pc, #0]	; (8001c30 <__aeabi_dmul+0x4d8>)
 8001c2e:	e5fe      	b.n	800182e <__aeabi_dmul+0xd6>
 8001c30:	000007ff 	.word	0x000007ff
 8001c34:	0000041e 	.word	0x0000041e
 8001c38:	0000043e 	.word	0x0000043e

08001c3c <__aeabi_dsub>:
 8001c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c3e:	4657      	mov	r7, sl
 8001c40:	464e      	mov	r6, r9
 8001c42:	4645      	mov	r5, r8
 8001c44:	46de      	mov	lr, fp
 8001c46:	000c      	movs	r4, r1
 8001c48:	0309      	lsls	r1, r1, #12
 8001c4a:	b5e0      	push	{r5, r6, r7, lr}
 8001c4c:	0a49      	lsrs	r1, r1, #9
 8001c4e:	0f46      	lsrs	r6, r0, #29
 8001c50:	005f      	lsls	r7, r3, #1
 8001c52:	4331      	orrs	r1, r6
 8001c54:	031e      	lsls	r6, r3, #12
 8001c56:	0fdb      	lsrs	r3, r3, #31
 8001c58:	0a76      	lsrs	r6, r6, #9
 8001c5a:	469b      	mov	fp, r3
 8001c5c:	0f53      	lsrs	r3, r2, #29
 8001c5e:	4333      	orrs	r3, r6
 8001c60:	4ec8      	ldr	r6, [pc, #800]	; (8001f84 <__aeabi_dsub+0x348>)
 8001c62:	0065      	lsls	r5, r4, #1
 8001c64:	00c0      	lsls	r0, r0, #3
 8001c66:	0fe4      	lsrs	r4, r4, #31
 8001c68:	00d2      	lsls	r2, r2, #3
 8001c6a:	0d6d      	lsrs	r5, r5, #21
 8001c6c:	46a2      	mov	sl, r4
 8001c6e:	4681      	mov	r9, r0
 8001c70:	0d7f      	lsrs	r7, r7, #21
 8001c72:	469c      	mov	ip, r3
 8001c74:	4690      	mov	r8, r2
 8001c76:	42b7      	cmp	r7, r6
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dsub+0x40>
 8001c7a:	e0b9      	b.n	8001df0 <__aeabi_dsub+0x1b4>
 8001c7c:	465b      	mov	r3, fp
 8001c7e:	2601      	movs	r6, #1
 8001c80:	4073      	eors	r3, r6
 8001c82:	469b      	mov	fp, r3
 8001c84:	1bee      	subs	r6, r5, r7
 8001c86:	45a3      	cmp	fp, r4
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x50>
 8001c8a:	e083      	b.n	8001d94 <__aeabi_dsub+0x158>
 8001c8c:	2e00      	cmp	r6, #0
 8001c8e:	dd63      	ble.n	8001d58 <__aeabi_dsub+0x11c>
 8001c90:	2f00      	cmp	r7, #0
 8001c92:	d000      	beq.n	8001c96 <__aeabi_dsub+0x5a>
 8001c94:	e0b1      	b.n	8001dfa <__aeabi_dsub+0x1be>
 8001c96:	4663      	mov	r3, ip
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	d100      	bne.n	8001c9e <__aeabi_dsub+0x62>
 8001c9c:	e123      	b.n	8001ee6 <__aeabi_dsub+0x2aa>
 8001c9e:	1e73      	subs	r3, r6, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d000      	beq.n	8001ca6 <__aeabi_dsub+0x6a>
 8001ca4:	e1ba      	b.n	800201c <__aeabi_dsub+0x3e0>
 8001ca6:	1a86      	subs	r6, r0, r2
 8001ca8:	4663      	mov	r3, ip
 8001caa:	42b0      	cmp	r0, r6
 8001cac:	4180      	sbcs	r0, r0
 8001cae:	2501      	movs	r5, #1
 8001cb0:	1ac9      	subs	r1, r1, r3
 8001cb2:	4240      	negs	r0, r0
 8001cb4:	1a09      	subs	r1, r1, r0
 8001cb6:	020b      	lsls	r3, r1, #8
 8001cb8:	d400      	bmi.n	8001cbc <__aeabi_dsub+0x80>
 8001cba:	e147      	b.n	8001f4c <__aeabi_dsub+0x310>
 8001cbc:	0249      	lsls	r1, r1, #9
 8001cbe:	0a4b      	lsrs	r3, r1, #9
 8001cc0:	4698      	mov	r8, r3
 8001cc2:	4643      	mov	r3, r8
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d100      	bne.n	8001cca <__aeabi_dsub+0x8e>
 8001cc8:	e189      	b.n	8001fde <__aeabi_dsub+0x3a2>
 8001cca:	4640      	mov	r0, r8
 8001ccc:	f000 fc92 	bl	80025f4 <__clzsi2>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	3b08      	subs	r3, #8
 8001cd4:	2b1f      	cmp	r3, #31
 8001cd6:	dd00      	ble.n	8001cda <__aeabi_dsub+0x9e>
 8001cd8:	e17c      	b.n	8001fd4 <__aeabi_dsub+0x398>
 8001cda:	2220      	movs	r2, #32
 8001cdc:	0030      	movs	r0, r6
 8001cde:	1ad2      	subs	r2, r2, r3
 8001ce0:	4641      	mov	r1, r8
 8001ce2:	40d0      	lsrs	r0, r2
 8001ce4:	4099      	lsls	r1, r3
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	409e      	lsls	r6, r3
 8001cea:	430a      	orrs	r2, r1
 8001cec:	429d      	cmp	r5, r3
 8001cee:	dd00      	ble.n	8001cf2 <__aeabi_dsub+0xb6>
 8001cf0:	e16a      	b.n	8001fc8 <__aeabi_dsub+0x38c>
 8001cf2:	1b5d      	subs	r5, r3, r5
 8001cf4:	1c6b      	adds	r3, r5, #1
 8001cf6:	2b1f      	cmp	r3, #31
 8001cf8:	dd00      	ble.n	8001cfc <__aeabi_dsub+0xc0>
 8001cfa:	e194      	b.n	8002026 <__aeabi_dsub+0x3ea>
 8001cfc:	2120      	movs	r1, #32
 8001cfe:	0010      	movs	r0, r2
 8001d00:	0035      	movs	r5, r6
 8001d02:	1ac9      	subs	r1, r1, r3
 8001d04:	408e      	lsls	r6, r1
 8001d06:	40da      	lsrs	r2, r3
 8001d08:	4088      	lsls	r0, r1
 8001d0a:	40dd      	lsrs	r5, r3
 8001d0c:	1e71      	subs	r1, r6, #1
 8001d0e:	418e      	sbcs	r6, r1
 8001d10:	0011      	movs	r1, r2
 8001d12:	2207      	movs	r2, #7
 8001d14:	4328      	orrs	r0, r5
 8001d16:	2500      	movs	r5, #0
 8001d18:	4306      	orrs	r6, r0
 8001d1a:	4032      	ands	r2, r6
 8001d1c:	2a00      	cmp	r2, #0
 8001d1e:	d009      	beq.n	8001d34 <__aeabi_dsub+0xf8>
 8001d20:	230f      	movs	r3, #15
 8001d22:	4033      	ands	r3, r6
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d005      	beq.n	8001d34 <__aeabi_dsub+0xf8>
 8001d28:	1d33      	adds	r3, r6, #4
 8001d2a:	42b3      	cmp	r3, r6
 8001d2c:	41b6      	sbcs	r6, r6
 8001d2e:	4276      	negs	r6, r6
 8001d30:	1989      	adds	r1, r1, r6
 8001d32:	001e      	movs	r6, r3
 8001d34:	020b      	lsls	r3, r1, #8
 8001d36:	d400      	bmi.n	8001d3a <__aeabi_dsub+0xfe>
 8001d38:	e23d      	b.n	80021b6 <__aeabi_dsub+0x57a>
 8001d3a:	1c6a      	adds	r2, r5, #1
 8001d3c:	4b91      	ldr	r3, [pc, #580]	; (8001f84 <__aeabi_dsub+0x348>)
 8001d3e:	0555      	lsls	r5, r2, #21
 8001d40:	0d6d      	lsrs	r5, r5, #21
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d100      	bne.n	8001d48 <__aeabi_dsub+0x10c>
 8001d46:	e119      	b.n	8001f7c <__aeabi_dsub+0x340>
 8001d48:	4a8f      	ldr	r2, [pc, #572]	; (8001f88 <__aeabi_dsub+0x34c>)
 8001d4a:	08f6      	lsrs	r6, r6, #3
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	0757      	lsls	r7, r2, #29
 8001d50:	0252      	lsls	r2, r2, #9
 8001d52:	4337      	orrs	r7, r6
 8001d54:	0b12      	lsrs	r2, r2, #12
 8001d56:	e09b      	b.n	8001e90 <__aeabi_dsub+0x254>
 8001d58:	2e00      	cmp	r6, #0
 8001d5a:	d000      	beq.n	8001d5e <__aeabi_dsub+0x122>
 8001d5c:	e0c5      	b.n	8001eea <__aeabi_dsub+0x2ae>
 8001d5e:	1c6e      	adds	r6, r5, #1
 8001d60:	0576      	lsls	r6, r6, #21
 8001d62:	0d76      	lsrs	r6, r6, #21
 8001d64:	2e01      	cmp	r6, #1
 8001d66:	dc00      	bgt.n	8001d6a <__aeabi_dsub+0x12e>
 8001d68:	e148      	b.n	8001ffc <__aeabi_dsub+0x3c0>
 8001d6a:	4667      	mov	r7, ip
 8001d6c:	1a86      	subs	r6, r0, r2
 8001d6e:	1bcb      	subs	r3, r1, r7
 8001d70:	42b0      	cmp	r0, r6
 8001d72:	41bf      	sbcs	r7, r7
 8001d74:	427f      	negs	r7, r7
 8001d76:	46b8      	mov	r8, r7
 8001d78:	001f      	movs	r7, r3
 8001d7a:	4643      	mov	r3, r8
 8001d7c:	1aff      	subs	r7, r7, r3
 8001d7e:	003b      	movs	r3, r7
 8001d80:	46b8      	mov	r8, r7
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	d500      	bpl.n	8001d88 <__aeabi_dsub+0x14c>
 8001d86:	e15f      	b.n	8002048 <__aeabi_dsub+0x40c>
 8001d88:	4337      	orrs	r7, r6
 8001d8a:	d19a      	bne.n	8001cc2 <__aeabi_dsub+0x86>
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2400      	movs	r4, #0
 8001d90:	2500      	movs	r5, #0
 8001d92:	e079      	b.n	8001e88 <__aeabi_dsub+0x24c>
 8001d94:	2e00      	cmp	r6, #0
 8001d96:	dc00      	bgt.n	8001d9a <__aeabi_dsub+0x15e>
 8001d98:	e0fa      	b.n	8001f90 <__aeabi_dsub+0x354>
 8001d9a:	2f00      	cmp	r7, #0
 8001d9c:	d100      	bne.n	8001da0 <__aeabi_dsub+0x164>
 8001d9e:	e08d      	b.n	8001ebc <__aeabi_dsub+0x280>
 8001da0:	4b78      	ldr	r3, [pc, #480]	; (8001f84 <__aeabi_dsub+0x348>)
 8001da2:	429d      	cmp	r5, r3
 8001da4:	d067      	beq.n	8001e76 <__aeabi_dsub+0x23a>
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	4667      	mov	r7, ip
 8001daa:	041b      	lsls	r3, r3, #16
 8001dac:	431f      	orrs	r7, r3
 8001dae:	46bc      	mov	ip, r7
 8001db0:	2e38      	cmp	r6, #56	; 0x38
 8001db2:	dc00      	bgt.n	8001db6 <__aeabi_dsub+0x17a>
 8001db4:	e152      	b.n	800205c <__aeabi_dsub+0x420>
 8001db6:	4663      	mov	r3, ip
 8001db8:	4313      	orrs	r3, r2
 8001dba:	1e5a      	subs	r2, r3, #1
 8001dbc:	4193      	sbcs	r3, r2
 8001dbe:	181e      	adds	r6, r3, r0
 8001dc0:	4286      	cmp	r6, r0
 8001dc2:	4180      	sbcs	r0, r0
 8001dc4:	4240      	negs	r0, r0
 8001dc6:	1809      	adds	r1, r1, r0
 8001dc8:	020b      	lsls	r3, r1, #8
 8001dca:	d400      	bmi.n	8001dce <__aeabi_dsub+0x192>
 8001dcc:	e0be      	b.n	8001f4c <__aeabi_dsub+0x310>
 8001dce:	4b6d      	ldr	r3, [pc, #436]	; (8001f84 <__aeabi_dsub+0x348>)
 8001dd0:	3501      	adds	r5, #1
 8001dd2:	429d      	cmp	r5, r3
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x19c>
 8001dd6:	e0d2      	b.n	8001f7e <__aeabi_dsub+0x342>
 8001dd8:	4a6b      	ldr	r2, [pc, #428]	; (8001f88 <__aeabi_dsub+0x34c>)
 8001dda:	0873      	lsrs	r3, r6, #1
 8001ddc:	400a      	ands	r2, r1
 8001dde:	2101      	movs	r1, #1
 8001de0:	400e      	ands	r6, r1
 8001de2:	431e      	orrs	r6, r3
 8001de4:	0851      	lsrs	r1, r2, #1
 8001de6:	07d3      	lsls	r3, r2, #31
 8001de8:	2207      	movs	r2, #7
 8001dea:	431e      	orrs	r6, r3
 8001dec:	4032      	ands	r2, r6
 8001dee:	e795      	b.n	8001d1c <__aeabi_dsub+0xe0>
 8001df0:	001e      	movs	r6, r3
 8001df2:	4316      	orrs	r6, r2
 8001df4:	d000      	beq.n	8001df8 <__aeabi_dsub+0x1bc>
 8001df6:	e745      	b.n	8001c84 <__aeabi_dsub+0x48>
 8001df8:	e740      	b.n	8001c7c <__aeabi_dsub+0x40>
 8001dfa:	4b62      	ldr	r3, [pc, #392]	; (8001f84 <__aeabi_dsub+0x348>)
 8001dfc:	429d      	cmp	r5, r3
 8001dfe:	d03a      	beq.n	8001e76 <__aeabi_dsub+0x23a>
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	4667      	mov	r7, ip
 8001e04:	041b      	lsls	r3, r3, #16
 8001e06:	431f      	orrs	r7, r3
 8001e08:	46bc      	mov	ip, r7
 8001e0a:	2e38      	cmp	r6, #56	; 0x38
 8001e0c:	dd00      	ble.n	8001e10 <__aeabi_dsub+0x1d4>
 8001e0e:	e0eb      	b.n	8001fe8 <__aeabi_dsub+0x3ac>
 8001e10:	2e1f      	cmp	r6, #31
 8001e12:	dc00      	bgt.n	8001e16 <__aeabi_dsub+0x1da>
 8001e14:	e13a      	b.n	800208c <__aeabi_dsub+0x450>
 8001e16:	0033      	movs	r3, r6
 8001e18:	4667      	mov	r7, ip
 8001e1a:	3b20      	subs	r3, #32
 8001e1c:	40df      	lsrs	r7, r3
 8001e1e:	003b      	movs	r3, r7
 8001e20:	2e20      	cmp	r6, #32
 8001e22:	d005      	beq.n	8001e30 <__aeabi_dsub+0x1f4>
 8001e24:	2740      	movs	r7, #64	; 0x40
 8001e26:	1bbf      	subs	r7, r7, r6
 8001e28:	4666      	mov	r6, ip
 8001e2a:	40be      	lsls	r6, r7
 8001e2c:	4332      	orrs	r2, r6
 8001e2e:	4690      	mov	r8, r2
 8001e30:	4646      	mov	r6, r8
 8001e32:	1e72      	subs	r2, r6, #1
 8001e34:	4196      	sbcs	r6, r2
 8001e36:	4333      	orrs	r3, r6
 8001e38:	e0da      	b.n	8001ff0 <__aeabi_dsub+0x3b4>
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x204>
 8001e3e:	e214      	b.n	800226a <__aeabi_dsub+0x62e>
 8001e40:	4663      	mov	r3, ip
 8001e42:	4313      	orrs	r3, r2
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x20c>
 8001e46:	e168      	b.n	800211a <__aeabi_dsub+0x4de>
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	074e      	lsls	r6, r1, #29
 8001e4c:	08c0      	lsrs	r0, r0, #3
 8001e4e:	08c9      	lsrs	r1, r1, #3
 8001e50:	031b      	lsls	r3, r3, #12
 8001e52:	4306      	orrs	r6, r0
 8001e54:	4219      	tst	r1, r3
 8001e56:	d008      	beq.n	8001e6a <__aeabi_dsub+0x22e>
 8001e58:	4660      	mov	r0, ip
 8001e5a:	08c0      	lsrs	r0, r0, #3
 8001e5c:	4218      	tst	r0, r3
 8001e5e:	d104      	bne.n	8001e6a <__aeabi_dsub+0x22e>
 8001e60:	4663      	mov	r3, ip
 8001e62:	0001      	movs	r1, r0
 8001e64:	08d2      	lsrs	r2, r2, #3
 8001e66:	075e      	lsls	r6, r3, #29
 8001e68:	4316      	orrs	r6, r2
 8001e6a:	00f3      	lsls	r3, r6, #3
 8001e6c:	4699      	mov	r9, r3
 8001e6e:	00c9      	lsls	r1, r1, #3
 8001e70:	0f72      	lsrs	r2, r6, #29
 8001e72:	4d44      	ldr	r5, [pc, #272]	; (8001f84 <__aeabi_dsub+0x348>)
 8001e74:	4311      	orrs	r1, r2
 8001e76:	464b      	mov	r3, r9
 8001e78:	08de      	lsrs	r6, r3, #3
 8001e7a:	4b42      	ldr	r3, [pc, #264]	; (8001f84 <__aeabi_dsub+0x348>)
 8001e7c:	074f      	lsls	r7, r1, #29
 8001e7e:	4337      	orrs	r7, r6
 8001e80:	08ca      	lsrs	r2, r1, #3
 8001e82:	429d      	cmp	r5, r3
 8001e84:	d100      	bne.n	8001e88 <__aeabi_dsub+0x24c>
 8001e86:	e06e      	b.n	8001f66 <__aeabi_dsub+0x32a>
 8001e88:	0312      	lsls	r2, r2, #12
 8001e8a:	056d      	lsls	r5, r5, #21
 8001e8c:	0b12      	lsrs	r2, r2, #12
 8001e8e:	0d6d      	lsrs	r5, r5, #21
 8001e90:	2100      	movs	r1, #0
 8001e92:	0312      	lsls	r2, r2, #12
 8001e94:	0b13      	lsrs	r3, r2, #12
 8001e96:	0d0a      	lsrs	r2, r1, #20
 8001e98:	0512      	lsls	r2, r2, #20
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <__aeabi_dsub+0x350>)
 8001e9e:	052d      	lsls	r5, r5, #20
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	432b      	orrs	r3, r5
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	07e4      	lsls	r4, r4, #31
 8001ea8:	085b      	lsrs	r3, r3, #1
 8001eaa:	4323      	orrs	r3, r4
 8001eac:	0038      	movs	r0, r7
 8001eae:	0019      	movs	r1, r3
 8001eb0:	bc3c      	pop	{r2, r3, r4, r5}
 8001eb2:	4690      	mov	r8, r2
 8001eb4:	4699      	mov	r9, r3
 8001eb6:	46a2      	mov	sl, r4
 8001eb8:	46ab      	mov	fp, r5
 8001eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ebc:	4663      	mov	r3, ip
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	d011      	beq.n	8001ee6 <__aeabi_dsub+0x2aa>
 8001ec2:	1e73      	subs	r3, r6, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d000      	beq.n	8001eca <__aeabi_dsub+0x28e>
 8001ec8:	e107      	b.n	80020da <__aeabi_dsub+0x49e>
 8001eca:	1886      	adds	r6, r0, r2
 8001ecc:	4286      	cmp	r6, r0
 8001ece:	4180      	sbcs	r0, r0
 8001ed0:	4461      	add	r1, ip
 8001ed2:	4240      	negs	r0, r0
 8001ed4:	1809      	adds	r1, r1, r0
 8001ed6:	2501      	movs	r5, #1
 8001ed8:	020b      	lsls	r3, r1, #8
 8001eda:	d537      	bpl.n	8001f4c <__aeabi_dsub+0x310>
 8001edc:	2502      	movs	r5, #2
 8001ede:	e77b      	b.n	8001dd8 <__aeabi_dsub+0x19c>
 8001ee0:	003e      	movs	r6, r7
 8001ee2:	4661      	mov	r1, ip
 8001ee4:	4691      	mov	r9, r2
 8001ee6:	0035      	movs	r5, r6
 8001ee8:	e7c5      	b.n	8001e76 <__aeabi_dsub+0x23a>
 8001eea:	465c      	mov	r4, fp
 8001eec:	2d00      	cmp	r5, #0
 8001eee:	d000      	beq.n	8001ef2 <__aeabi_dsub+0x2b6>
 8001ef0:	e0e1      	b.n	80020b6 <__aeabi_dsub+0x47a>
 8001ef2:	000b      	movs	r3, r1
 8001ef4:	4303      	orrs	r3, r0
 8001ef6:	d0f3      	beq.n	8001ee0 <__aeabi_dsub+0x2a4>
 8001ef8:	1c73      	adds	r3, r6, #1
 8001efa:	d100      	bne.n	8001efe <__aeabi_dsub+0x2c2>
 8001efc:	e1ac      	b.n	8002258 <__aeabi_dsub+0x61c>
 8001efe:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <__aeabi_dsub+0x348>)
 8001f00:	429f      	cmp	r7, r3
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x2ca>
 8001f04:	e13a      	b.n	800217c <__aeabi_dsub+0x540>
 8001f06:	43f3      	mvns	r3, r6
 8001f08:	2b38      	cmp	r3, #56	; 0x38
 8001f0a:	dd00      	ble.n	8001f0e <__aeabi_dsub+0x2d2>
 8001f0c:	e16f      	b.n	80021ee <__aeabi_dsub+0x5b2>
 8001f0e:	2b1f      	cmp	r3, #31
 8001f10:	dd00      	ble.n	8001f14 <__aeabi_dsub+0x2d8>
 8001f12:	e18c      	b.n	800222e <__aeabi_dsub+0x5f2>
 8001f14:	2520      	movs	r5, #32
 8001f16:	000e      	movs	r6, r1
 8001f18:	1aed      	subs	r5, r5, r3
 8001f1a:	40ae      	lsls	r6, r5
 8001f1c:	46b0      	mov	r8, r6
 8001f1e:	0006      	movs	r6, r0
 8001f20:	46aa      	mov	sl, r5
 8001f22:	40de      	lsrs	r6, r3
 8001f24:	4645      	mov	r5, r8
 8001f26:	4335      	orrs	r5, r6
 8001f28:	002e      	movs	r6, r5
 8001f2a:	4655      	mov	r5, sl
 8001f2c:	40d9      	lsrs	r1, r3
 8001f2e:	40a8      	lsls	r0, r5
 8001f30:	4663      	mov	r3, ip
 8001f32:	1e45      	subs	r5, r0, #1
 8001f34:	41a8      	sbcs	r0, r5
 8001f36:	1a5b      	subs	r3, r3, r1
 8001f38:	469c      	mov	ip, r3
 8001f3a:	4330      	orrs	r0, r6
 8001f3c:	1a16      	subs	r6, r2, r0
 8001f3e:	42b2      	cmp	r2, r6
 8001f40:	4192      	sbcs	r2, r2
 8001f42:	4663      	mov	r3, ip
 8001f44:	4252      	negs	r2, r2
 8001f46:	1a99      	subs	r1, r3, r2
 8001f48:	003d      	movs	r5, r7
 8001f4a:	e6b4      	b.n	8001cb6 <__aeabi_dsub+0x7a>
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	4032      	ands	r2, r6
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	d000      	beq.n	8001f56 <__aeabi_dsub+0x31a>
 8001f54:	e6e4      	b.n	8001d20 <__aeabi_dsub+0xe4>
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <__aeabi_dsub+0x348>)
 8001f58:	08f6      	lsrs	r6, r6, #3
 8001f5a:	074f      	lsls	r7, r1, #29
 8001f5c:	4337      	orrs	r7, r6
 8001f5e:	08ca      	lsrs	r2, r1, #3
 8001f60:	429d      	cmp	r5, r3
 8001f62:	d000      	beq.n	8001f66 <__aeabi_dsub+0x32a>
 8001f64:	e790      	b.n	8001e88 <__aeabi_dsub+0x24c>
 8001f66:	003b      	movs	r3, r7
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	d100      	bne.n	8001f6e <__aeabi_dsub+0x332>
 8001f6c:	e1a6      	b.n	80022bc <__aeabi_dsub+0x680>
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	031b      	lsls	r3, r3, #12
 8001f72:	431a      	orrs	r2, r3
 8001f74:	0312      	lsls	r2, r2, #12
 8001f76:	0b12      	lsrs	r2, r2, #12
 8001f78:	4d02      	ldr	r5, [pc, #8]	; (8001f84 <__aeabi_dsub+0x348>)
 8001f7a:	e789      	b.n	8001e90 <__aeabi_dsub+0x254>
 8001f7c:	0015      	movs	r5, r2
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2700      	movs	r7, #0
 8001f82:	e785      	b.n	8001e90 <__aeabi_dsub+0x254>
 8001f84:	000007ff 	.word	0x000007ff
 8001f88:	ff7fffff 	.word	0xff7fffff
 8001f8c:	800fffff 	.word	0x800fffff
 8001f90:	2e00      	cmp	r6, #0
 8001f92:	d000      	beq.n	8001f96 <__aeabi_dsub+0x35a>
 8001f94:	e0c7      	b.n	8002126 <__aeabi_dsub+0x4ea>
 8001f96:	1c6b      	adds	r3, r5, #1
 8001f98:	055e      	lsls	r6, r3, #21
 8001f9a:	0d76      	lsrs	r6, r6, #21
 8001f9c:	2e01      	cmp	r6, #1
 8001f9e:	dc00      	bgt.n	8001fa2 <__aeabi_dsub+0x366>
 8001fa0:	e0f0      	b.n	8002184 <__aeabi_dsub+0x548>
 8001fa2:	4dc8      	ldr	r5, [pc, #800]	; (80022c4 <__aeabi_dsub+0x688>)
 8001fa4:	42ab      	cmp	r3, r5
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dsub+0x36e>
 8001fa8:	e0b9      	b.n	800211e <__aeabi_dsub+0x4e2>
 8001faa:	1885      	adds	r5, r0, r2
 8001fac:	000a      	movs	r2, r1
 8001fae:	4285      	cmp	r5, r0
 8001fb0:	4189      	sbcs	r1, r1
 8001fb2:	4462      	add	r2, ip
 8001fb4:	4249      	negs	r1, r1
 8001fb6:	1851      	adds	r1, r2, r1
 8001fb8:	2207      	movs	r2, #7
 8001fba:	07ce      	lsls	r6, r1, #31
 8001fbc:	086d      	lsrs	r5, r5, #1
 8001fbe:	432e      	orrs	r6, r5
 8001fc0:	0849      	lsrs	r1, r1, #1
 8001fc2:	4032      	ands	r2, r6
 8001fc4:	001d      	movs	r5, r3
 8001fc6:	e6a9      	b.n	8001d1c <__aeabi_dsub+0xe0>
 8001fc8:	49bf      	ldr	r1, [pc, #764]	; (80022c8 <__aeabi_dsub+0x68c>)
 8001fca:	1aed      	subs	r5, r5, r3
 8001fcc:	4011      	ands	r1, r2
 8001fce:	2207      	movs	r2, #7
 8001fd0:	4032      	ands	r2, r6
 8001fd2:	e6a3      	b.n	8001d1c <__aeabi_dsub+0xe0>
 8001fd4:	0032      	movs	r2, r6
 8001fd6:	3828      	subs	r0, #40	; 0x28
 8001fd8:	4082      	lsls	r2, r0
 8001fda:	2600      	movs	r6, #0
 8001fdc:	e686      	b.n	8001cec <__aeabi_dsub+0xb0>
 8001fde:	0030      	movs	r0, r6
 8001fe0:	f000 fb08 	bl	80025f4 <__clzsi2>
 8001fe4:	3020      	adds	r0, #32
 8001fe6:	e673      	b.n	8001cd0 <__aeabi_dsub+0x94>
 8001fe8:	4663      	mov	r3, ip
 8001fea:	4313      	orrs	r3, r2
 8001fec:	1e5a      	subs	r2, r3, #1
 8001fee:	4193      	sbcs	r3, r2
 8001ff0:	1ac6      	subs	r6, r0, r3
 8001ff2:	42b0      	cmp	r0, r6
 8001ff4:	4180      	sbcs	r0, r0
 8001ff6:	4240      	negs	r0, r0
 8001ff8:	1a09      	subs	r1, r1, r0
 8001ffa:	e65c      	b.n	8001cb6 <__aeabi_dsub+0x7a>
 8001ffc:	000e      	movs	r6, r1
 8001ffe:	4667      	mov	r7, ip
 8002000:	4306      	orrs	r6, r0
 8002002:	4317      	orrs	r7, r2
 8002004:	2d00      	cmp	r5, #0
 8002006:	d15e      	bne.n	80020c6 <__aeabi_dsub+0x48a>
 8002008:	2e00      	cmp	r6, #0
 800200a:	d000      	beq.n	800200e <__aeabi_dsub+0x3d2>
 800200c:	e0f3      	b.n	80021f6 <__aeabi_dsub+0x5ba>
 800200e:	2f00      	cmp	r7, #0
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x3d8>
 8002012:	e11e      	b.n	8002252 <__aeabi_dsub+0x616>
 8002014:	465c      	mov	r4, fp
 8002016:	4661      	mov	r1, ip
 8002018:	4691      	mov	r9, r2
 800201a:	e72c      	b.n	8001e76 <__aeabi_dsub+0x23a>
 800201c:	4fa9      	ldr	r7, [pc, #676]	; (80022c4 <__aeabi_dsub+0x688>)
 800201e:	42be      	cmp	r6, r7
 8002020:	d07b      	beq.n	800211a <__aeabi_dsub+0x4de>
 8002022:	001e      	movs	r6, r3
 8002024:	e6f1      	b.n	8001e0a <__aeabi_dsub+0x1ce>
 8002026:	0010      	movs	r0, r2
 8002028:	3d1f      	subs	r5, #31
 800202a:	40e8      	lsrs	r0, r5
 800202c:	2b20      	cmp	r3, #32
 800202e:	d003      	beq.n	8002038 <__aeabi_dsub+0x3fc>
 8002030:	2140      	movs	r1, #64	; 0x40
 8002032:	1acb      	subs	r3, r1, r3
 8002034:	409a      	lsls	r2, r3
 8002036:	4316      	orrs	r6, r2
 8002038:	1e73      	subs	r3, r6, #1
 800203a:	419e      	sbcs	r6, r3
 800203c:	2207      	movs	r2, #7
 800203e:	4306      	orrs	r6, r0
 8002040:	4032      	ands	r2, r6
 8002042:	2100      	movs	r1, #0
 8002044:	2500      	movs	r5, #0
 8002046:	e783      	b.n	8001f50 <__aeabi_dsub+0x314>
 8002048:	1a16      	subs	r6, r2, r0
 800204a:	4663      	mov	r3, ip
 800204c:	42b2      	cmp	r2, r6
 800204e:	4180      	sbcs	r0, r0
 8002050:	1a59      	subs	r1, r3, r1
 8002052:	4240      	negs	r0, r0
 8002054:	1a0b      	subs	r3, r1, r0
 8002056:	4698      	mov	r8, r3
 8002058:	465c      	mov	r4, fp
 800205a:	e632      	b.n	8001cc2 <__aeabi_dsub+0x86>
 800205c:	2e1f      	cmp	r6, #31
 800205e:	dd00      	ble.n	8002062 <__aeabi_dsub+0x426>
 8002060:	e0ab      	b.n	80021ba <__aeabi_dsub+0x57e>
 8002062:	2720      	movs	r7, #32
 8002064:	1bbb      	subs	r3, r7, r6
 8002066:	469a      	mov	sl, r3
 8002068:	4663      	mov	r3, ip
 800206a:	4657      	mov	r7, sl
 800206c:	40bb      	lsls	r3, r7
 800206e:	4699      	mov	r9, r3
 8002070:	0013      	movs	r3, r2
 8002072:	464f      	mov	r7, r9
 8002074:	40f3      	lsrs	r3, r6
 8002076:	431f      	orrs	r7, r3
 8002078:	003b      	movs	r3, r7
 800207a:	4657      	mov	r7, sl
 800207c:	40ba      	lsls	r2, r7
 800207e:	1e57      	subs	r7, r2, #1
 8002080:	41ba      	sbcs	r2, r7
 8002082:	4313      	orrs	r3, r2
 8002084:	4662      	mov	r2, ip
 8002086:	40f2      	lsrs	r2, r6
 8002088:	1889      	adds	r1, r1, r2
 800208a:	e698      	b.n	8001dbe <__aeabi_dsub+0x182>
 800208c:	2720      	movs	r7, #32
 800208e:	1bbb      	subs	r3, r7, r6
 8002090:	469a      	mov	sl, r3
 8002092:	4663      	mov	r3, ip
 8002094:	4657      	mov	r7, sl
 8002096:	40bb      	lsls	r3, r7
 8002098:	4699      	mov	r9, r3
 800209a:	0013      	movs	r3, r2
 800209c:	464f      	mov	r7, r9
 800209e:	40f3      	lsrs	r3, r6
 80020a0:	431f      	orrs	r7, r3
 80020a2:	003b      	movs	r3, r7
 80020a4:	4657      	mov	r7, sl
 80020a6:	40ba      	lsls	r2, r7
 80020a8:	1e57      	subs	r7, r2, #1
 80020aa:	41ba      	sbcs	r2, r7
 80020ac:	4313      	orrs	r3, r2
 80020ae:	4662      	mov	r2, ip
 80020b0:	40f2      	lsrs	r2, r6
 80020b2:	1a89      	subs	r1, r1, r2
 80020b4:	e79c      	b.n	8001ff0 <__aeabi_dsub+0x3b4>
 80020b6:	4b83      	ldr	r3, [pc, #524]	; (80022c4 <__aeabi_dsub+0x688>)
 80020b8:	429f      	cmp	r7, r3
 80020ba:	d05f      	beq.n	800217c <__aeabi_dsub+0x540>
 80020bc:	2580      	movs	r5, #128	; 0x80
 80020be:	042d      	lsls	r5, r5, #16
 80020c0:	4273      	negs	r3, r6
 80020c2:	4329      	orrs	r1, r5
 80020c4:	e720      	b.n	8001f08 <__aeabi_dsub+0x2cc>
 80020c6:	2e00      	cmp	r6, #0
 80020c8:	d10c      	bne.n	80020e4 <__aeabi_dsub+0x4a8>
 80020ca:	2f00      	cmp	r7, #0
 80020cc:	d100      	bne.n	80020d0 <__aeabi_dsub+0x494>
 80020ce:	e0d0      	b.n	8002272 <__aeabi_dsub+0x636>
 80020d0:	465c      	mov	r4, fp
 80020d2:	4661      	mov	r1, ip
 80020d4:	4691      	mov	r9, r2
 80020d6:	4d7b      	ldr	r5, [pc, #492]	; (80022c4 <__aeabi_dsub+0x688>)
 80020d8:	e6cd      	b.n	8001e76 <__aeabi_dsub+0x23a>
 80020da:	4f7a      	ldr	r7, [pc, #488]	; (80022c4 <__aeabi_dsub+0x688>)
 80020dc:	42be      	cmp	r6, r7
 80020de:	d01c      	beq.n	800211a <__aeabi_dsub+0x4de>
 80020e0:	001e      	movs	r6, r3
 80020e2:	e665      	b.n	8001db0 <__aeabi_dsub+0x174>
 80020e4:	2f00      	cmp	r7, #0
 80020e6:	d018      	beq.n	800211a <__aeabi_dsub+0x4de>
 80020e8:	08c0      	lsrs	r0, r0, #3
 80020ea:	074e      	lsls	r6, r1, #29
 80020ec:	4306      	orrs	r6, r0
 80020ee:	2080      	movs	r0, #128	; 0x80
 80020f0:	08c9      	lsrs	r1, r1, #3
 80020f2:	0300      	lsls	r0, r0, #12
 80020f4:	4201      	tst	r1, r0
 80020f6:	d008      	beq.n	800210a <__aeabi_dsub+0x4ce>
 80020f8:	4663      	mov	r3, ip
 80020fa:	08dc      	lsrs	r4, r3, #3
 80020fc:	4204      	tst	r4, r0
 80020fe:	d104      	bne.n	800210a <__aeabi_dsub+0x4ce>
 8002100:	0021      	movs	r1, r4
 8002102:	46da      	mov	sl, fp
 8002104:	08d2      	lsrs	r2, r2, #3
 8002106:	075e      	lsls	r6, r3, #29
 8002108:	4316      	orrs	r6, r2
 800210a:	00f3      	lsls	r3, r6, #3
 800210c:	4699      	mov	r9, r3
 800210e:	2401      	movs	r4, #1
 8002110:	4653      	mov	r3, sl
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	0f72      	lsrs	r2, r6, #29
 8002116:	4311      	orrs	r1, r2
 8002118:	401c      	ands	r4, r3
 800211a:	4d6a      	ldr	r5, [pc, #424]	; (80022c4 <__aeabi_dsub+0x688>)
 800211c:	e6ab      	b.n	8001e76 <__aeabi_dsub+0x23a>
 800211e:	001d      	movs	r5, r3
 8002120:	2200      	movs	r2, #0
 8002122:	2700      	movs	r7, #0
 8002124:	e6b4      	b.n	8001e90 <__aeabi_dsub+0x254>
 8002126:	2d00      	cmp	r5, #0
 8002128:	d159      	bne.n	80021de <__aeabi_dsub+0x5a2>
 800212a:	000b      	movs	r3, r1
 800212c:	4303      	orrs	r3, r0
 800212e:	d100      	bne.n	8002132 <__aeabi_dsub+0x4f6>
 8002130:	e6d6      	b.n	8001ee0 <__aeabi_dsub+0x2a4>
 8002132:	1c73      	adds	r3, r6, #1
 8002134:	d100      	bne.n	8002138 <__aeabi_dsub+0x4fc>
 8002136:	e0b2      	b.n	800229e <__aeabi_dsub+0x662>
 8002138:	4b62      	ldr	r3, [pc, #392]	; (80022c4 <__aeabi_dsub+0x688>)
 800213a:	429f      	cmp	r7, r3
 800213c:	d01e      	beq.n	800217c <__aeabi_dsub+0x540>
 800213e:	43f3      	mvns	r3, r6
 8002140:	2b38      	cmp	r3, #56	; 0x38
 8002142:	dc6f      	bgt.n	8002224 <__aeabi_dsub+0x5e8>
 8002144:	2b1f      	cmp	r3, #31
 8002146:	dd00      	ble.n	800214a <__aeabi_dsub+0x50e>
 8002148:	e097      	b.n	800227a <__aeabi_dsub+0x63e>
 800214a:	2520      	movs	r5, #32
 800214c:	000e      	movs	r6, r1
 800214e:	1aed      	subs	r5, r5, r3
 8002150:	40ae      	lsls	r6, r5
 8002152:	46b0      	mov	r8, r6
 8002154:	0006      	movs	r6, r0
 8002156:	46aa      	mov	sl, r5
 8002158:	40de      	lsrs	r6, r3
 800215a:	4645      	mov	r5, r8
 800215c:	4335      	orrs	r5, r6
 800215e:	002e      	movs	r6, r5
 8002160:	4655      	mov	r5, sl
 8002162:	40a8      	lsls	r0, r5
 8002164:	40d9      	lsrs	r1, r3
 8002166:	1e45      	subs	r5, r0, #1
 8002168:	41a8      	sbcs	r0, r5
 800216a:	448c      	add	ip, r1
 800216c:	4306      	orrs	r6, r0
 800216e:	18b6      	adds	r6, r6, r2
 8002170:	4296      	cmp	r6, r2
 8002172:	4192      	sbcs	r2, r2
 8002174:	4251      	negs	r1, r2
 8002176:	4461      	add	r1, ip
 8002178:	003d      	movs	r5, r7
 800217a:	e625      	b.n	8001dc8 <__aeabi_dsub+0x18c>
 800217c:	003d      	movs	r5, r7
 800217e:	4661      	mov	r1, ip
 8002180:	4691      	mov	r9, r2
 8002182:	e678      	b.n	8001e76 <__aeabi_dsub+0x23a>
 8002184:	000b      	movs	r3, r1
 8002186:	4303      	orrs	r3, r0
 8002188:	2d00      	cmp	r5, #0
 800218a:	d000      	beq.n	800218e <__aeabi_dsub+0x552>
 800218c:	e655      	b.n	8001e3a <__aeabi_dsub+0x1fe>
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f5      	beq.n	800217e <__aeabi_dsub+0x542>
 8002192:	4663      	mov	r3, ip
 8002194:	4313      	orrs	r3, r2
 8002196:	d100      	bne.n	800219a <__aeabi_dsub+0x55e>
 8002198:	e66d      	b.n	8001e76 <__aeabi_dsub+0x23a>
 800219a:	1886      	adds	r6, r0, r2
 800219c:	4286      	cmp	r6, r0
 800219e:	4180      	sbcs	r0, r0
 80021a0:	4461      	add	r1, ip
 80021a2:	4240      	negs	r0, r0
 80021a4:	1809      	adds	r1, r1, r0
 80021a6:	2200      	movs	r2, #0
 80021a8:	020b      	lsls	r3, r1, #8
 80021aa:	d400      	bmi.n	80021ae <__aeabi_dsub+0x572>
 80021ac:	e6d0      	b.n	8001f50 <__aeabi_dsub+0x314>
 80021ae:	4b46      	ldr	r3, [pc, #280]	; (80022c8 <__aeabi_dsub+0x68c>)
 80021b0:	3501      	adds	r5, #1
 80021b2:	4019      	ands	r1, r3
 80021b4:	e5b2      	b.n	8001d1c <__aeabi_dsub+0xe0>
 80021b6:	46b1      	mov	r9, r6
 80021b8:	e65d      	b.n	8001e76 <__aeabi_dsub+0x23a>
 80021ba:	0033      	movs	r3, r6
 80021bc:	4667      	mov	r7, ip
 80021be:	3b20      	subs	r3, #32
 80021c0:	40df      	lsrs	r7, r3
 80021c2:	003b      	movs	r3, r7
 80021c4:	2e20      	cmp	r6, #32
 80021c6:	d005      	beq.n	80021d4 <__aeabi_dsub+0x598>
 80021c8:	2740      	movs	r7, #64	; 0x40
 80021ca:	1bbf      	subs	r7, r7, r6
 80021cc:	4666      	mov	r6, ip
 80021ce:	40be      	lsls	r6, r7
 80021d0:	4332      	orrs	r2, r6
 80021d2:	4690      	mov	r8, r2
 80021d4:	4646      	mov	r6, r8
 80021d6:	1e72      	subs	r2, r6, #1
 80021d8:	4196      	sbcs	r6, r2
 80021da:	4333      	orrs	r3, r6
 80021dc:	e5ef      	b.n	8001dbe <__aeabi_dsub+0x182>
 80021de:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <__aeabi_dsub+0x688>)
 80021e0:	429f      	cmp	r7, r3
 80021e2:	d0cb      	beq.n	800217c <__aeabi_dsub+0x540>
 80021e4:	2580      	movs	r5, #128	; 0x80
 80021e6:	042d      	lsls	r5, r5, #16
 80021e8:	4273      	negs	r3, r6
 80021ea:	4329      	orrs	r1, r5
 80021ec:	e7a8      	b.n	8002140 <__aeabi_dsub+0x504>
 80021ee:	4308      	orrs	r0, r1
 80021f0:	1e41      	subs	r1, r0, #1
 80021f2:	4188      	sbcs	r0, r1
 80021f4:	e6a2      	b.n	8001f3c <__aeabi_dsub+0x300>
 80021f6:	2f00      	cmp	r7, #0
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x5c0>
 80021fa:	e63c      	b.n	8001e76 <__aeabi_dsub+0x23a>
 80021fc:	4663      	mov	r3, ip
 80021fe:	1a86      	subs	r6, r0, r2
 8002200:	1acf      	subs	r7, r1, r3
 8002202:	42b0      	cmp	r0, r6
 8002204:	419b      	sbcs	r3, r3
 8002206:	425b      	negs	r3, r3
 8002208:	1afb      	subs	r3, r7, r3
 800220a:	4698      	mov	r8, r3
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	d54e      	bpl.n	80022ae <__aeabi_dsub+0x672>
 8002210:	1a16      	subs	r6, r2, r0
 8002212:	4663      	mov	r3, ip
 8002214:	42b2      	cmp	r2, r6
 8002216:	4192      	sbcs	r2, r2
 8002218:	1a59      	subs	r1, r3, r1
 800221a:	4252      	negs	r2, r2
 800221c:	1a89      	subs	r1, r1, r2
 800221e:	465c      	mov	r4, fp
 8002220:	2200      	movs	r2, #0
 8002222:	e57b      	b.n	8001d1c <__aeabi_dsub+0xe0>
 8002224:	4301      	orrs	r1, r0
 8002226:	000e      	movs	r6, r1
 8002228:	1e71      	subs	r1, r6, #1
 800222a:	418e      	sbcs	r6, r1
 800222c:	e79f      	b.n	800216e <__aeabi_dsub+0x532>
 800222e:	001d      	movs	r5, r3
 8002230:	000e      	movs	r6, r1
 8002232:	3d20      	subs	r5, #32
 8002234:	40ee      	lsrs	r6, r5
 8002236:	46b0      	mov	r8, r6
 8002238:	2b20      	cmp	r3, #32
 800223a:	d004      	beq.n	8002246 <__aeabi_dsub+0x60a>
 800223c:	2540      	movs	r5, #64	; 0x40
 800223e:	1aeb      	subs	r3, r5, r3
 8002240:	4099      	lsls	r1, r3
 8002242:	4308      	orrs	r0, r1
 8002244:	4681      	mov	r9, r0
 8002246:	4648      	mov	r0, r9
 8002248:	4643      	mov	r3, r8
 800224a:	1e41      	subs	r1, r0, #1
 800224c:	4188      	sbcs	r0, r1
 800224e:	4318      	orrs	r0, r3
 8002250:	e674      	b.n	8001f3c <__aeabi_dsub+0x300>
 8002252:	2200      	movs	r2, #0
 8002254:	2400      	movs	r4, #0
 8002256:	e617      	b.n	8001e88 <__aeabi_dsub+0x24c>
 8002258:	1a16      	subs	r6, r2, r0
 800225a:	4663      	mov	r3, ip
 800225c:	42b2      	cmp	r2, r6
 800225e:	4192      	sbcs	r2, r2
 8002260:	1a59      	subs	r1, r3, r1
 8002262:	4252      	negs	r2, r2
 8002264:	1a89      	subs	r1, r1, r2
 8002266:	003d      	movs	r5, r7
 8002268:	e525      	b.n	8001cb6 <__aeabi_dsub+0x7a>
 800226a:	4661      	mov	r1, ip
 800226c:	4691      	mov	r9, r2
 800226e:	4d15      	ldr	r5, [pc, #84]	; (80022c4 <__aeabi_dsub+0x688>)
 8002270:	e601      	b.n	8001e76 <__aeabi_dsub+0x23a>
 8002272:	2280      	movs	r2, #128	; 0x80
 8002274:	2400      	movs	r4, #0
 8002276:	0312      	lsls	r2, r2, #12
 8002278:	e679      	b.n	8001f6e <__aeabi_dsub+0x332>
 800227a:	001d      	movs	r5, r3
 800227c:	000e      	movs	r6, r1
 800227e:	3d20      	subs	r5, #32
 8002280:	40ee      	lsrs	r6, r5
 8002282:	46b0      	mov	r8, r6
 8002284:	2b20      	cmp	r3, #32
 8002286:	d004      	beq.n	8002292 <__aeabi_dsub+0x656>
 8002288:	2540      	movs	r5, #64	; 0x40
 800228a:	1aeb      	subs	r3, r5, r3
 800228c:	4099      	lsls	r1, r3
 800228e:	4308      	orrs	r0, r1
 8002290:	4681      	mov	r9, r0
 8002292:	464e      	mov	r6, r9
 8002294:	4643      	mov	r3, r8
 8002296:	1e71      	subs	r1, r6, #1
 8002298:	418e      	sbcs	r6, r1
 800229a:	431e      	orrs	r6, r3
 800229c:	e767      	b.n	800216e <__aeabi_dsub+0x532>
 800229e:	1886      	adds	r6, r0, r2
 80022a0:	4296      	cmp	r6, r2
 80022a2:	419b      	sbcs	r3, r3
 80022a4:	4461      	add	r1, ip
 80022a6:	425b      	negs	r3, r3
 80022a8:	18c9      	adds	r1, r1, r3
 80022aa:	003d      	movs	r5, r7
 80022ac:	e58c      	b.n	8001dc8 <__aeabi_dsub+0x18c>
 80022ae:	4647      	mov	r7, r8
 80022b0:	4337      	orrs	r7, r6
 80022b2:	d0ce      	beq.n	8002252 <__aeabi_dsub+0x616>
 80022b4:	2207      	movs	r2, #7
 80022b6:	4641      	mov	r1, r8
 80022b8:	4032      	ands	r2, r6
 80022ba:	e649      	b.n	8001f50 <__aeabi_dsub+0x314>
 80022bc:	2700      	movs	r7, #0
 80022be:	003a      	movs	r2, r7
 80022c0:	e5e6      	b.n	8001e90 <__aeabi_dsub+0x254>
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	000007ff 	.word	0x000007ff
 80022c8:	ff7fffff 	.word	0xff7fffff

080022cc <__aeabi_dcmpun>:
 80022cc:	b570      	push	{r4, r5, r6, lr}
 80022ce:	4e0c      	ldr	r6, [pc, #48]	; (8002300 <__aeabi_dcmpun+0x34>)
 80022d0:	030d      	lsls	r5, r1, #12
 80022d2:	031c      	lsls	r4, r3, #12
 80022d4:	0049      	lsls	r1, r1, #1
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	0b2d      	lsrs	r5, r5, #12
 80022da:	0d49      	lsrs	r1, r1, #21
 80022dc:	0b24      	lsrs	r4, r4, #12
 80022de:	0d5b      	lsrs	r3, r3, #21
 80022e0:	42b1      	cmp	r1, r6
 80022e2:	d008      	beq.n	80022f6 <__aeabi_dcmpun+0x2a>
 80022e4:	4906      	ldr	r1, [pc, #24]	; (8002300 <__aeabi_dcmpun+0x34>)
 80022e6:	2000      	movs	r0, #0
 80022e8:	428b      	cmp	r3, r1
 80022ea:	d103      	bne.n	80022f4 <__aeabi_dcmpun+0x28>
 80022ec:	4314      	orrs	r4, r2
 80022ee:	0020      	movs	r0, r4
 80022f0:	1e44      	subs	r4, r0, #1
 80022f2:	41a0      	sbcs	r0, r4
 80022f4:	bd70      	pop	{r4, r5, r6, pc}
 80022f6:	4305      	orrs	r5, r0
 80022f8:	2001      	movs	r0, #1
 80022fa:	2d00      	cmp	r5, #0
 80022fc:	d1fa      	bne.n	80022f4 <__aeabi_dcmpun+0x28>
 80022fe:	e7f1      	b.n	80022e4 <__aeabi_dcmpun+0x18>
 8002300:	000007ff 	.word	0x000007ff

08002304 <__aeabi_d2iz>:
 8002304:	b530      	push	{r4, r5, lr}
 8002306:	4d14      	ldr	r5, [pc, #80]	; (8002358 <__aeabi_d2iz+0x54>)
 8002308:	030a      	lsls	r2, r1, #12
 800230a:	004b      	lsls	r3, r1, #1
 800230c:	0b12      	lsrs	r2, r2, #12
 800230e:	0d5b      	lsrs	r3, r3, #21
 8002310:	0fc9      	lsrs	r1, r1, #31
 8002312:	2400      	movs	r4, #0
 8002314:	42ab      	cmp	r3, r5
 8002316:	dd11      	ble.n	800233c <__aeabi_d2iz+0x38>
 8002318:	4c10      	ldr	r4, [pc, #64]	; (800235c <__aeabi_d2iz+0x58>)
 800231a:	42a3      	cmp	r3, r4
 800231c:	dc10      	bgt.n	8002340 <__aeabi_d2iz+0x3c>
 800231e:	2480      	movs	r4, #128	; 0x80
 8002320:	0364      	lsls	r4, r4, #13
 8002322:	4322      	orrs	r2, r4
 8002324:	4c0e      	ldr	r4, [pc, #56]	; (8002360 <__aeabi_d2iz+0x5c>)
 8002326:	1ae4      	subs	r4, r4, r3
 8002328:	2c1f      	cmp	r4, #31
 800232a:	dd0c      	ble.n	8002346 <__aeabi_d2iz+0x42>
 800232c:	480d      	ldr	r0, [pc, #52]	; (8002364 <__aeabi_d2iz+0x60>)
 800232e:	1ac3      	subs	r3, r0, r3
 8002330:	40da      	lsrs	r2, r3
 8002332:	0013      	movs	r3, r2
 8002334:	425c      	negs	r4, r3
 8002336:	2900      	cmp	r1, #0
 8002338:	d100      	bne.n	800233c <__aeabi_d2iz+0x38>
 800233a:	001c      	movs	r4, r3
 800233c:	0020      	movs	r0, r4
 800233e:	bd30      	pop	{r4, r5, pc}
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <__aeabi_d2iz+0x64>)
 8002342:	18cc      	adds	r4, r1, r3
 8002344:	e7fa      	b.n	800233c <__aeabi_d2iz+0x38>
 8002346:	4d09      	ldr	r5, [pc, #36]	; (800236c <__aeabi_d2iz+0x68>)
 8002348:	40e0      	lsrs	r0, r4
 800234a:	46ac      	mov	ip, r5
 800234c:	4463      	add	r3, ip
 800234e:	409a      	lsls	r2, r3
 8002350:	0013      	movs	r3, r2
 8002352:	4303      	orrs	r3, r0
 8002354:	e7ee      	b.n	8002334 <__aeabi_d2iz+0x30>
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	000003fe 	.word	0x000003fe
 800235c:	0000041d 	.word	0x0000041d
 8002360:	00000433 	.word	0x00000433
 8002364:	00000413 	.word	0x00000413
 8002368:	7fffffff 	.word	0x7fffffff
 800236c:	fffffbed 	.word	0xfffffbed

08002370 <__aeabi_i2d>:
 8002370:	b570      	push	{r4, r5, r6, lr}
 8002372:	2800      	cmp	r0, #0
 8002374:	d02d      	beq.n	80023d2 <__aeabi_i2d+0x62>
 8002376:	17c3      	asrs	r3, r0, #31
 8002378:	18c5      	adds	r5, r0, r3
 800237a:	405d      	eors	r5, r3
 800237c:	0fc4      	lsrs	r4, r0, #31
 800237e:	0028      	movs	r0, r5
 8002380:	f000 f938 	bl	80025f4 <__clzsi2>
 8002384:	4b15      	ldr	r3, [pc, #84]	; (80023dc <__aeabi_i2d+0x6c>)
 8002386:	1a1b      	subs	r3, r3, r0
 8002388:	055b      	lsls	r3, r3, #21
 800238a:	0d5b      	lsrs	r3, r3, #21
 800238c:	280a      	cmp	r0, #10
 800238e:	dd15      	ble.n	80023bc <__aeabi_i2d+0x4c>
 8002390:	380b      	subs	r0, #11
 8002392:	4085      	lsls	r5, r0
 8002394:	2200      	movs	r2, #0
 8002396:	032d      	lsls	r5, r5, #12
 8002398:	0b2d      	lsrs	r5, r5, #12
 800239a:	2100      	movs	r1, #0
 800239c:	0010      	movs	r0, r2
 800239e:	032d      	lsls	r5, r5, #12
 80023a0:	0d0a      	lsrs	r2, r1, #20
 80023a2:	0b2d      	lsrs	r5, r5, #12
 80023a4:	0512      	lsls	r2, r2, #20
 80023a6:	432a      	orrs	r2, r5
 80023a8:	4d0d      	ldr	r5, [pc, #52]	; (80023e0 <__aeabi_i2d+0x70>)
 80023aa:	051b      	lsls	r3, r3, #20
 80023ac:	402a      	ands	r2, r5
 80023ae:	4313      	orrs	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	07e4      	lsls	r4, r4, #31
 80023b4:	085b      	lsrs	r3, r3, #1
 80023b6:	4323      	orrs	r3, r4
 80023b8:	0019      	movs	r1, r3
 80023ba:	bd70      	pop	{r4, r5, r6, pc}
 80023bc:	0002      	movs	r2, r0
 80023be:	0029      	movs	r1, r5
 80023c0:	3215      	adds	r2, #21
 80023c2:	4091      	lsls	r1, r2
 80023c4:	000a      	movs	r2, r1
 80023c6:	210b      	movs	r1, #11
 80023c8:	1a08      	subs	r0, r1, r0
 80023ca:	40c5      	lsrs	r5, r0
 80023cc:	032d      	lsls	r5, r5, #12
 80023ce:	0b2d      	lsrs	r5, r5, #12
 80023d0:	e7e3      	b.n	800239a <__aeabi_i2d+0x2a>
 80023d2:	2400      	movs	r4, #0
 80023d4:	2300      	movs	r3, #0
 80023d6:	2500      	movs	r5, #0
 80023d8:	2200      	movs	r2, #0
 80023da:	e7de      	b.n	800239a <__aeabi_i2d+0x2a>
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	800fffff 	.word	0x800fffff

080023e4 <__aeabi_ui2d>:
 80023e4:	b510      	push	{r4, lr}
 80023e6:	1e04      	subs	r4, r0, #0
 80023e8:	d025      	beq.n	8002436 <__aeabi_ui2d+0x52>
 80023ea:	f000 f903 	bl	80025f4 <__clzsi2>
 80023ee:	4b14      	ldr	r3, [pc, #80]	; (8002440 <__aeabi_ui2d+0x5c>)
 80023f0:	1a1b      	subs	r3, r3, r0
 80023f2:	055b      	lsls	r3, r3, #21
 80023f4:	0d5b      	lsrs	r3, r3, #21
 80023f6:	280a      	cmp	r0, #10
 80023f8:	dd12      	ble.n	8002420 <__aeabi_ui2d+0x3c>
 80023fa:	380b      	subs	r0, #11
 80023fc:	4084      	lsls	r4, r0
 80023fe:	2200      	movs	r2, #0
 8002400:	0324      	lsls	r4, r4, #12
 8002402:	0b24      	lsrs	r4, r4, #12
 8002404:	2100      	movs	r1, #0
 8002406:	0010      	movs	r0, r2
 8002408:	0324      	lsls	r4, r4, #12
 800240a:	0d0a      	lsrs	r2, r1, #20
 800240c:	0b24      	lsrs	r4, r4, #12
 800240e:	0512      	lsls	r2, r2, #20
 8002410:	4322      	orrs	r2, r4
 8002412:	4c0c      	ldr	r4, [pc, #48]	; (8002444 <__aeabi_ui2d+0x60>)
 8002414:	051b      	lsls	r3, r3, #20
 8002416:	4022      	ands	r2, r4
 8002418:	4313      	orrs	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	0859      	lsrs	r1, r3, #1
 800241e:	bd10      	pop	{r4, pc}
 8002420:	0002      	movs	r2, r0
 8002422:	0021      	movs	r1, r4
 8002424:	3215      	adds	r2, #21
 8002426:	4091      	lsls	r1, r2
 8002428:	000a      	movs	r2, r1
 800242a:	210b      	movs	r1, #11
 800242c:	1a08      	subs	r0, r1, r0
 800242e:	40c4      	lsrs	r4, r0
 8002430:	0324      	lsls	r4, r4, #12
 8002432:	0b24      	lsrs	r4, r4, #12
 8002434:	e7e6      	b.n	8002404 <__aeabi_ui2d+0x20>
 8002436:	2300      	movs	r3, #0
 8002438:	2400      	movs	r4, #0
 800243a:	2200      	movs	r2, #0
 800243c:	e7e2      	b.n	8002404 <__aeabi_ui2d+0x20>
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	0000041e 	.word	0x0000041e
 8002444:	800fffff 	.word	0x800fffff

08002448 <__aeabi_f2d>:
 8002448:	0041      	lsls	r1, r0, #1
 800244a:	0e09      	lsrs	r1, r1, #24
 800244c:	1c4b      	adds	r3, r1, #1
 800244e:	b570      	push	{r4, r5, r6, lr}
 8002450:	b2db      	uxtb	r3, r3
 8002452:	0246      	lsls	r6, r0, #9
 8002454:	0a75      	lsrs	r5, r6, #9
 8002456:	0fc4      	lsrs	r4, r0, #31
 8002458:	2b01      	cmp	r3, #1
 800245a:	dd14      	ble.n	8002486 <__aeabi_f2d+0x3e>
 800245c:	23e0      	movs	r3, #224	; 0xe0
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	076d      	lsls	r5, r5, #29
 8002462:	0b36      	lsrs	r6, r6, #12
 8002464:	18cb      	adds	r3, r1, r3
 8002466:	2100      	movs	r1, #0
 8002468:	0d0a      	lsrs	r2, r1, #20
 800246a:	0028      	movs	r0, r5
 800246c:	0512      	lsls	r2, r2, #20
 800246e:	4d1c      	ldr	r5, [pc, #112]	; (80024e0 <__aeabi_f2d+0x98>)
 8002470:	4332      	orrs	r2, r6
 8002472:	055b      	lsls	r3, r3, #21
 8002474:	402a      	ands	r2, r5
 8002476:	085b      	lsrs	r3, r3, #1
 8002478:	4313      	orrs	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	07e4      	lsls	r4, r4, #31
 800247e:	085b      	lsrs	r3, r3, #1
 8002480:	4323      	orrs	r3, r4
 8002482:	0019      	movs	r1, r3
 8002484:	bd70      	pop	{r4, r5, r6, pc}
 8002486:	2900      	cmp	r1, #0
 8002488:	d114      	bne.n	80024b4 <__aeabi_f2d+0x6c>
 800248a:	2d00      	cmp	r5, #0
 800248c:	d01e      	beq.n	80024cc <__aeabi_f2d+0x84>
 800248e:	0028      	movs	r0, r5
 8002490:	f000 f8b0 	bl	80025f4 <__clzsi2>
 8002494:	280a      	cmp	r0, #10
 8002496:	dc1c      	bgt.n	80024d2 <__aeabi_f2d+0x8a>
 8002498:	230b      	movs	r3, #11
 800249a:	002a      	movs	r2, r5
 800249c:	1a1b      	subs	r3, r3, r0
 800249e:	40da      	lsrs	r2, r3
 80024a0:	0003      	movs	r3, r0
 80024a2:	3315      	adds	r3, #21
 80024a4:	409d      	lsls	r5, r3
 80024a6:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <__aeabi_f2d+0x9c>)
 80024a8:	0312      	lsls	r2, r2, #12
 80024aa:	1a1b      	subs	r3, r3, r0
 80024ac:	055b      	lsls	r3, r3, #21
 80024ae:	0b16      	lsrs	r6, r2, #12
 80024b0:	0d5b      	lsrs	r3, r3, #21
 80024b2:	e7d8      	b.n	8002466 <__aeabi_f2d+0x1e>
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d006      	beq.n	80024c6 <__aeabi_f2d+0x7e>
 80024b8:	0b32      	lsrs	r2, r6, #12
 80024ba:	2680      	movs	r6, #128	; 0x80
 80024bc:	0336      	lsls	r6, r6, #12
 80024be:	076d      	lsls	r5, r5, #29
 80024c0:	4316      	orrs	r6, r2
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <__aeabi_f2d+0xa0>)
 80024c4:	e7cf      	b.n	8002466 <__aeabi_f2d+0x1e>
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <__aeabi_f2d+0xa0>)
 80024c8:	2600      	movs	r6, #0
 80024ca:	e7cc      	b.n	8002466 <__aeabi_f2d+0x1e>
 80024cc:	2300      	movs	r3, #0
 80024ce:	2600      	movs	r6, #0
 80024d0:	e7c9      	b.n	8002466 <__aeabi_f2d+0x1e>
 80024d2:	0003      	movs	r3, r0
 80024d4:	002a      	movs	r2, r5
 80024d6:	3b0b      	subs	r3, #11
 80024d8:	409a      	lsls	r2, r3
 80024da:	2500      	movs	r5, #0
 80024dc:	e7e3      	b.n	80024a6 <__aeabi_f2d+0x5e>
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	800fffff 	.word	0x800fffff
 80024e4:	00000389 	.word	0x00000389
 80024e8:	000007ff 	.word	0x000007ff

080024ec <__aeabi_d2f>:
 80024ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ee:	004c      	lsls	r4, r1, #1
 80024f0:	0d64      	lsrs	r4, r4, #21
 80024f2:	030b      	lsls	r3, r1, #12
 80024f4:	1c62      	adds	r2, r4, #1
 80024f6:	0a5b      	lsrs	r3, r3, #9
 80024f8:	0f46      	lsrs	r6, r0, #29
 80024fa:	0552      	lsls	r2, r2, #21
 80024fc:	0fc9      	lsrs	r1, r1, #31
 80024fe:	431e      	orrs	r6, r3
 8002500:	00c5      	lsls	r5, r0, #3
 8002502:	0d52      	lsrs	r2, r2, #21
 8002504:	2a01      	cmp	r2, #1
 8002506:	dd29      	ble.n	800255c <__aeabi_d2f+0x70>
 8002508:	4b37      	ldr	r3, [pc, #220]	; (80025e8 <__aeabi_d2f+0xfc>)
 800250a:	18e7      	adds	r7, r4, r3
 800250c:	2ffe      	cmp	r7, #254	; 0xfe
 800250e:	dc1c      	bgt.n	800254a <__aeabi_d2f+0x5e>
 8002510:	2f00      	cmp	r7, #0
 8002512:	dd3b      	ble.n	800258c <__aeabi_d2f+0xa0>
 8002514:	0180      	lsls	r0, r0, #6
 8002516:	1e43      	subs	r3, r0, #1
 8002518:	4198      	sbcs	r0, r3
 800251a:	2207      	movs	r2, #7
 800251c:	00f3      	lsls	r3, r6, #3
 800251e:	0f6d      	lsrs	r5, r5, #29
 8002520:	4303      	orrs	r3, r0
 8002522:	432b      	orrs	r3, r5
 8002524:	401a      	ands	r2, r3
 8002526:	2a00      	cmp	r2, #0
 8002528:	d004      	beq.n	8002534 <__aeabi_d2f+0x48>
 800252a:	220f      	movs	r2, #15
 800252c:	401a      	ands	r2, r3
 800252e:	2a04      	cmp	r2, #4
 8002530:	d000      	beq.n	8002534 <__aeabi_d2f+0x48>
 8002532:	3304      	adds	r3, #4
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	04d2      	lsls	r2, r2, #19
 8002538:	401a      	ands	r2, r3
 800253a:	d024      	beq.n	8002586 <__aeabi_d2f+0x9a>
 800253c:	3701      	adds	r7, #1
 800253e:	b2fa      	uxtb	r2, r7
 8002540:	2fff      	cmp	r7, #255	; 0xff
 8002542:	d002      	beq.n	800254a <__aeabi_d2f+0x5e>
 8002544:	019b      	lsls	r3, r3, #6
 8002546:	0a58      	lsrs	r0, r3, #9
 8002548:	e001      	b.n	800254e <__aeabi_d2f+0x62>
 800254a:	22ff      	movs	r2, #255	; 0xff
 800254c:	2000      	movs	r0, #0
 800254e:	0240      	lsls	r0, r0, #9
 8002550:	05d2      	lsls	r2, r2, #23
 8002552:	0a40      	lsrs	r0, r0, #9
 8002554:	07c9      	lsls	r1, r1, #31
 8002556:	4310      	orrs	r0, r2
 8002558:	4308      	orrs	r0, r1
 800255a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800255c:	4335      	orrs	r5, r6
 800255e:	2c00      	cmp	r4, #0
 8002560:	d104      	bne.n	800256c <__aeabi_d2f+0x80>
 8002562:	2d00      	cmp	r5, #0
 8002564:	d10a      	bne.n	800257c <__aeabi_d2f+0x90>
 8002566:	2200      	movs	r2, #0
 8002568:	2000      	movs	r0, #0
 800256a:	e7f0      	b.n	800254e <__aeabi_d2f+0x62>
 800256c:	2d00      	cmp	r5, #0
 800256e:	d0ec      	beq.n	800254a <__aeabi_d2f+0x5e>
 8002570:	2080      	movs	r0, #128	; 0x80
 8002572:	03c0      	lsls	r0, r0, #15
 8002574:	4330      	orrs	r0, r6
 8002576:	22ff      	movs	r2, #255	; 0xff
 8002578:	e7e9      	b.n	800254e <__aeabi_d2f+0x62>
 800257a:	2400      	movs	r4, #0
 800257c:	2300      	movs	r3, #0
 800257e:	025b      	lsls	r3, r3, #9
 8002580:	0a58      	lsrs	r0, r3, #9
 8002582:	b2e2      	uxtb	r2, r4
 8002584:	e7e3      	b.n	800254e <__aeabi_d2f+0x62>
 8002586:	08db      	lsrs	r3, r3, #3
 8002588:	003c      	movs	r4, r7
 800258a:	e7f8      	b.n	800257e <__aeabi_d2f+0x92>
 800258c:	003b      	movs	r3, r7
 800258e:	3317      	adds	r3, #23
 8002590:	dbf3      	blt.n	800257a <__aeabi_d2f+0x8e>
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	041b      	lsls	r3, r3, #16
 8002596:	4333      	orrs	r3, r6
 8002598:	261e      	movs	r6, #30
 800259a:	1bf6      	subs	r6, r6, r7
 800259c:	2e1f      	cmp	r6, #31
 800259e:	dd14      	ble.n	80025ca <__aeabi_d2f+0xde>
 80025a0:	2202      	movs	r2, #2
 80025a2:	4252      	negs	r2, r2
 80025a4:	1bd7      	subs	r7, r2, r7
 80025a6:	001a      	movs	r2, r3
 80025a8:	40fa      	lsrs	r2, r7
 80025aa:	0017      	movs	r7, r2
 80025ac:	2e20      	cmp	r6, #32
 80025ae:	d004      	beq.n	80025ba <__aeabi_d2f+0xce>
 80025b0:	4a0e      	ldr	r2, [pc, #56]	; (80025ec <__aeabi_d2f+0x100>)
 80025b2:	4694      	mov	ip, r2
 80025b4:	4464      	add	r4, ip
 80025b6:	40a3      	lsls	r3, r4
 80025b8:	431d      	orrs	r5, r3
 80025ba:	002b      	movs	r3, r5
 80025bc:	1e5d      	subs	r5, r3, #1
 80025be:	41ab      	sbcs	r3, r5
 80025c0:	2207      	movs	r2, #7
 80025c2:	433b      	orrs	r3, r7
 80025c4:	401a      	ands	r2, r3
 80025c6:	2700      	movs	r7, #0
 80025c8:	e7ad      	b.n	8002526 <__aeabi_d2f+0x3a>
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <__aeabi_d2f+0x104>)
 80025cc:	0028      	movs	r0, r5
 80025ce:	18a2      	adds	r2, r4, r2
 80025d0:	4095      	lsls	r5, r2
 80025d2:	4093      	lsls	r3, r2
 80025d4:	1e6c      	subs	r4, r5, #1
 80025d6:	41a5      	sbcs	r5, r4
 80025d8:	40f0      	lsrs	r0, r6
 80025da:	2207      	movs	r2, #7
 80025dc:	432b      	orrs	r3, r5
 80025de:	4303      	orrs	r3, r0
 80025e0:	401a      	ands	r2, r3
 80025e2:	2700      	movs	r7, #0
 80025e4:	e79f      	b.n	8002526 <__aeabi_d2f+0x3a>
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	fffffc80 	.word	0xfffffc80
 80025ec:	fffffca2 	.word	0xfffffca2
 80025f0:	fffffc82 	.word	0xfffffc82

080025f4 <__clzsi2>:
 80025f4:	211c      	movs	r1, #28
 80025f6:	2301      	movs	r3, #1
 80025f8:	041b      	lsls	r3, r3, #16
 80025fa:	4298      	cmp	r0, r3
 80025fc:	d301      	bcc.n	8002602 <__clzsi2+0xe>
 80025fe:	0c00      	lsrs	r0, r0, #16
 8002600:	3910      	subs	r1, #16
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	4298      	cmp	r0, r3
 8002606:	d301      	bcc.n	800260c <__clzsi2+0x18>
 8002608:	0a00      	lsrs	r0, r0, #8
 800260a:	3908      	subs	r1, #8
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	4298      	cmp	r0, r3
 8002610:	d301      	bcc.n	8002616 <__clzsi2+0x22>
 8002612:	0900      	lsrs	r0, r0, #4
 8002614:	3904      	subs	r1, #4
 8002616:	a202      	add	r2, pc, #8	; (adr r2, 8002620 <__clzsi2+0x2c>)
 8002618:	5c10      	ldrb	r0, [r2, r0]
 800261a:	1840      	adds	r0, r0, r1
 800261c:	4770      	bx	lr
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	02020304 	.word	0x02020304
 8002624:	01010101 	.word	0x01010101
	...

08002630 <__clzdi2>:
 8002630:	b510      	push	{r4, lr}
 8002632:	2900      	cmp	r1, #0
 8002634:	d103      	bne.n	800263e <__clzdi2+0xe>
 8002636:	f7ff ffdd 	bl	80025f4 <__clzsi2>
 800263a:	3020      	adds	r0, #32
 800263c:	e002      	b.n	8002644 <__clzdi2+0x14>
 800263e:	1c08      	adds	r0, r1, #0
 8002640:	f7ff ffd8 	bl	80025f4 <__clzsi2>
 8002644:	bd10      	pop	{r4, pc}
 8002646:	46c0      	nop			; (mov r8, r8)

08002648 <minArr>:
 -----------------------------------------------------------------------
 */

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited 
 */
uint8_t minArr(uint8_t *arr, uint8_t *Q){
 8002648:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])// Not visited yet
 800264a:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest =0xFF;
 800264c:	24ff      	movs	r4, #255	; 0xff
	if(!Q[0])// Not visited yet
 800264e:	2b00      	cmp	r3, #0
 8002650:	d100      	bne.n	8002654 <minArr+0xc>
	smallest =arr[0];
 8002652:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++) {
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <minArr+0x38>)
 8002656:	781d      	ldrb	r5, [r3, #0]
 8002658:	2d00      	cmp	r5, #0
 800265a:	dd0e      	ble.n	800267a <minArr+0x32>
 800265c:	2300      	movs	r3, #0
 800265e:	2700      	movs	r7, #0
 8002660:	e002      	b.n	8002668 <minArr+0x20>
 8002662:	3301      	adds	r3, #1
 8002664:	42ab      	cmp	r3, r5
 8002666:	da09      	bge.n	800267c <minArr+0x34>
		if( (arr[i] < smallest) && !Q[i]) {
 8002668:	5cc2      	ldrb	r2, [r0, r3]
 800266a:	42a2      	cmp	r2, r4
 800266c:	d2f9      	bcs.n	8002662 <minArr+0x1a>
 800266e:	5cce      	ldrb	r6, [r1, r3]
 8002670:	2e00      	cmp	r6, #0
 8002672:	d1f6      	bne.n	8002662 <minArr+0x1a>
			smallest =arr[i];
			index =i;
 8002674:	b2df      	uxtb	r7, r3
			smallest =arr[i];
 8002676:	0014      	movs	r4, r2
 8002678:	e7f3      	b.n	8002662 <minArr+0x1a>
	for(int i =0; i < N; i++) {
 800267a:	2700      	movs	r7, #0
		}
	}
	
	return index;
}
 800267c:	0038      	movs	r0, r7
 800267e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002680:	2000001c 	.word	0x2000001c

08002684 <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited) 
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++) {
 8002684:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <QnotEmpty+0x20>)
 8002686:	7819      	ldrb	r1, [r3, #0]
 8002688:	2900      	cmp	r1, #0
 800268a:	d008      	beq.n	800269e <QnotEmpty+0x1a>
 800268c:	0003      	movs	r3, r0
 800268e:	1841      	adds	r1, r0, r1
	char temp =1;
 8002690:	2001      	movs	r0, #1
		temp &=Q[i];
 8002692:	781a      	ldrb	r2, [r3, #0]
 8002694:	4010      	ands	r0, r2
 8002696:	3301      	adds	r3, #1
	for(int i =0; i < N; i++) {
 8002698:	428b      	cmp	r3, r1
 800269a:	d1fa      	bne.n	8002692 <QnotEmpty+0xe>
	}
	
	return temp;
}
 800269c:	4770      	bx	lr
	char temp =1;
 800269e:	2001      	movs	r0, #1
 80026a0:	e7fc      	b.n	800269c <QnotEmpty+0x18>
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	2000001c 	.word	0x2000001c

080026a8 <LoadROsnippets>:

/*-----------------------------------------------------------*/

/* --- Load Command Snippets stored in Flash RO --- 
 */
uint8_t LoadROsnippets(void){
 80026a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026aa:	46de      	mov	lr, fp
 80026ac:	4657      	mov	r7, sl
 80026ae:	464e      	mov	r6, r9
 80026b0:	b5c0      	push	{r6, r7, lr}
 80026b2:	b082      	sub	sp, #8
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char*) malloc(cmdMAX_INPUT_SIZE);
 80026b4:	2032      	movs	r0, #50	; 0x32
 80026b6:	f00e ff81 	bl	80115bc <malloc>
 80026ba:	1e07      	subs	r7, r0, #0
	if(snipBuffer == NULL)
 80026bc:	d100      	bne.n	80026c0 <LoadROsnippets+0x18>
 80026be:	e071      	b.n	80027a4 <LoadROsnippets+0xfc>
	return BOS_MEM_FULL;
	
// Exit if no recorded Snippets
	if(*(uint8_t*) currentAdd != 0xFE)
 80026c0:	4b39      	ldr	r3, [pc, #228]	; (80027a8 <LoadROsnippets+0x100>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
	return BOS_ERROR;
 80026c4:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t*) currentAdd != 0xFE)
 80026c6:	2bfe      	cmp	r3, #254	; 0xfe
 80026c8:	d166      	bne.n	8002798 <LoadROsnippets+0xf0>
 80026ca:	4e38      	ldr	r6, [pc, #224]	; (80027ac <LoadROsnippets+0x104>)
 80026cc:	3b9a      	subs	r3, #154	; 0x9a
 80026ce:	469b      	mov	fp, r3
 80026d0:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 80026d2:	4d35      	ldr	r5, [pc, #212]	; (80027a8 <LoadROsnippets+0x100>)
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++) {
// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] = (*(__IO uint8_t*) (currentAdd++));
		memcpy((uint8_t*) &snippets[s],(uint8_t*) &snipBuffer[1],
 80026d4:	1c7b      	adds	r3, r7, #1
 80026d6:	9301      	str	r3, [sp, #4]
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else {
// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;// Record a successful Snippet
 80026d8:	4b35      	ldr	r3, [pc, #212]	; (80027b0 <LoadROsnippets+0x108>)
 80026da:	4699      	mov	r9, r3
 80026dc:	e023      	b.n	8002726 <LoadROsnippets+0x7e>
		i =0;
 80026de:	2400      	movs	r4, #0
		if(snipBuffer[i - 1] != 0)
 80026e0:	193b      	adds	r3, r7, r4
 80026e2:	3b01      	subs	r3, #1
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <LoadROsnippets+0x46>
		++i;// String termination char was not recorded, then add one
 80026ea:	3401      	adds	r4, #1
 80026ec:	b2e4      	uxtb	r4, r4
		snippets[s].cmd =(char*) malloc(i);
 80026ee:	0020      	movs	r0, r4
 80026f0:	f00e ff64 	bl	80115bc <malloc>
 80026f4:	4653      	mov	r3, sl
 80026f6:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL) {
 80026f8:	2800      	cmp	r0, #0
 80026fa:	d03f      	beq.n	800277c <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd,snipBuffer,i);
 80026fc:	0022      	movs	r2, r4
 80026fe:	0039      	movs	r1, r7
 8002700:	f00f f9a9 	bl	8011a56 <memcpy>
			++numOfRecordedSnippets;// Record a successful Snippet
 8002704:	464b      	mov	r3, r9
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	3301      	adds	r3, #1
 800270a:	464a      	mov	r2, r9
 800270c:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 800270e:	0022      	movs	r2, r4
 8002710:	2100      	movs	r1, #0
 8002712:	0038      	movs	r0, r7
 8002714:	f00f f9a8 	bl	8011a68 <memset>
		}
// Exit if no more Snippets
		if(*(uint8_t*) currentAdd != 0xFE)
 8002718:	9b00      	ldr	r3, [sp, #0]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2bfe      	cmp	r3, #254	; 0xfe
 800271e:	d137      	bne.n	8002790 <LoadROsnippets+0xe8>
 8002720:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++) {
 8002722:	455e      	cmp	r6, fp
 8002724:	d034      	beq.n	8002790 <LoadROsnippets+0xe8>
 8002726:	0028      	movs	r0, r5
 8002728:	3014      	adds	r0, #20
uint8_t LoadROsnippets(void){
 800272a:	002b      	movs	r3, r5
			snipBuffer[i] = (*(__IO uint8_t*) (currentAdd++));
 800272c:	1b79      	subs	r1, r7, r5
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	54ca      	strb	r2, [r1, r3]
 8002732:	3301      	adds	r3, #1
		for(i =0; i < sizeof(snippet_t); i++)
 8002734:	4283      	cmp	r3, r0
 8002736:	d1fa      	bne.n	800272e <LoadROsnippets+0x86>
 8002738:	3514      	adds	r5, #20
		memcpy((uint8_t*) &snippets[s],(uint8_t*) &snipBuffer[1],
 800273a:	46b2      	mov	sl, r6
 800273c:	2214      	movs	r2, #20
 800273e:	9901      	ldr	r1, [sp, #4]
 8002740:	0030      	movs	r0, r6
 8002742:	f00f f988 	bl	8011a56 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8002746:	2214      	movs	r2, #20
 8002748:	2100      	movs	r1, #0
 800274a:	0038      	movs	r0, r7
 800274c:	f00f f98c 	bl	8011a68 <memset>
		while(*(uint8_t*) currentAdd != 0xFE && *(uint8_t*) currentAdd != 0xFF
 8002750:	9500      	str	r5, [sp, #0]
 8002752:	782a      	ldrb	r2, [r5, #0]
 8002754:	1c93      	adds	r3, r2, #2
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b01      	cmp	r3, #1
 800275a:	d9c0      	bls.n	80026de <LoadROsnippets+0x36>
 800275c:	0039      	movs	r1, r7
		i =0;
 800275e:	2400      	movs	r4, #0
			snipBuffer[i] =*(uint8_t*) currentAdd;
 8002760:	700a      	strb	r2, [r1, #0]
			++currentAdd;
 8002762:	3501      	adds	r5, #1
			++i;
 8002764:	3401      	adds	r4, #1
 8002766:	b2e4      	uxtb	r4, r4
		while(*(uint8_t*) currentAdd != 0xFE && *(uint8_t*) currentAdd != 0xFF
 8002768:	9500      	str	r5, [sp, #0]
 800276a:	782a      	ldrb	r2, [r5, #0]
 800276c:	1c93      	adds	r3, r2, #2
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b01      	cmp	r3, #1
 8002772:	d9b5      	bls.n	80026e0 <LoadROsnippets+0x38>
 8002774:	3101      	adds	r1, #1
		    && i < cmdMAX_INPUT_SIZE) {
 8002776:	2c32      	cmp	r4, #50	; 0x32
 8002778:	d1f2      	bne.n	8002760 <LoadROsnippets+0xb8>
 800277a:	e7b1      	b.n	80026e0 <LoadROsnippets+0x38>
			memset(&snippets[s],0,sizeof(snippet_t));
 800277c:	2214      	movs	r2, #20
 800277e:	2100      	movs	r1, #0
 8002780:	4650      	mov	r0, sl
 8002782:	f00f f971 	bl	8011a68 <memset>
			free(snipBuffer);
 8002786:	0038      	movs	r0, r7
 8002788:	f00e ff22 	bl	80115d0 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 800278c:	200e      	movs	r0, #14
 800278e:	e003      	b.n	8002798 <LoadROsnippets+0xf0>
		break;
	}
	
	free(snipBuffer);
 8002790:	0038      	movs	r0, r7
 8002792:	f00e ff1d 	bl	80115d0 <free>
	return BOS_OK;
 8002796:	2000      	movs	r0, #0
}
 8002798:	b002      	add	sp, #8
 800279a:	bc1c      	pop	{r2, r3, r4}
 800279c:	4691      	mov	r9, r2
 800279e:	469a      	mov	sl, r3
 80027a0:	46a3      	mov	fp, r4
 80027a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BOS_MEM_FULL;
 80027a4:	20fb      	movs	r0, #251	; 0xfb
 80027a6:	e7f7      	b.n	8002798 <LoadROsnippets+0xf0>
 80027a8:	0801dc00 	.word	0x0801dc00
 80027ac:	200069a4 	.word	0x200069a4
 80027b0:	2000121f 	.word	0x2000121f

080027b4 <LoadROtopology>:

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- 
 */
uint8_t LoadROtopology(void){
 80027b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b6:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp = (*(__IO uint16_t*) (RO_START_ADDRESS));
 80027b8:	4b23      	ldr	r3, [pc, #140]	; (8002848 <LoadROtopology+0x94>)
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)// Memory has been erased
 80027be:	4a23      	ldr	r2, [pc, #140]	; (800284c <LoadROtopology+0x98>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d033      	beq.n	800282c <LoadROtopology+0x78>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else {
		N =(uint8_t) (temp >> 8);
 80027c4:	0a1a      	lsrs	r2, r3, #8
		if(N == 0)
 80027c6:	d039      	beq.n	800283c <LoadROtopology+0x88>
		N =(uint8_t) (temp >> 8);
 80027c8:	4921      	ldr	r1, [pc, #132]	; (8002850 <LoadROtopology+0x9c>)
 80027ca:	700a      	strb	r2, [r1, #0]
		N =1;
		myID =(uint8_t) temp;
 80027cc:	4a21      	ldr	r2, [pc, #132]	; (8002854 <LoadROtopology+0xa0>)
 80027ce:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++) {
 80027d0:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <LoadROtopology+0x9c>)
 80027d2:	781e      	ldrb	r6, [r3, #0]
 80027d4:	2e00      	cmp	r6, #0
 80027d6:	d035      	beq.n	8002844 <LoadROtopology+0x90>
 80027d8:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 80027da:	2202      	movs	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++) {
 80027dc:	466b      	mov	r3, sp
 80027de:	1dd9      	adds	r1, r3, #7
 80027e0:	2300      	movs	r3, #0
 80027e2:	469c      	mov	ip, r3
				array[i - 1][j] = (*(__IO uint16_t*) (RO_START_ADDRESS + add));
 80027e4:	4d1c      	ldr	r5, [pc, #112]	; (8002858 <LoadROtopology+0xa4>)
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++) {
 80027e6:	4663      	mov	r3, ip
 80027e8:	700b      	strb	r3, [r1, #0]
 80027ea:	780b      	ldrb	r3, [r1, #0]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b0a      	cmp	r3, #10
 80027f0:	d815      	bhi.n	800281e <LoadROtopology+0x6a>
				array[i - 1][j] = (*(__IO uint16_t*) (RO_START_ADDRESS + add));
 80027f2:	1e63      	subs	r3, r4, #1
 80027f4:	0098      	lsls	r0, r3, #2
 80027f6:	18c0      	adds	r0, r0, r3
 80027f8:	0040      	lsls	r0, r0, #1
 80027fa:	18c0      	adds	r0, r0, r3
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <LoadROtopology+0x94>)
 80027fe:	18d7      	adds	r7, r2, r3
 8002800:	780b      	ldrb	r3, [r1, #0]
 8002802:	883f      	ldrh	r7, [r7, #0]
 8002804:	181b      	adds	r3, r3, r0
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	52ef      	strh	r7, [r5, r3]
				add +=2;
 800280a:	3202      	adds	r2, #2
 800280c:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++) {
 800280e:	780b      	ldrb	r3, [r1, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	700b      	strb	r3, [r1, #0]
 8002816:	780b      	ldrb	r3, [r1, #0]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b0a      	cmp	r3, #10
 800281c:	d9ee      	bls.n	80027fc <LoadROtopology+0x48>
		for(uint8_t i =1; i <= N; i++) {
 800281e:	3401      	adds	r4, #1
 8002820:	b2e4      	uxtb	r4, r4
 8002822:	42b4      	cmp	r4, r6
 8002824:	d9df      	bls.n	80027e6 <LoadROtopology+0x32>
			}
		}
	}
	
	return result;
 8002826:	2000      	movs	r0, #0
}
 8002828:	b003      	add	sp, #12
 800282a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N =1;
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <LoadROtopology+0x9c>)
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <LoadROtopology+0xa0>)
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002838:	20fa      	movs	r0, #250	; 0xfa
 800283a:	e7f5      	b.n	8002828 <LoadROtopology+0x74>
		N =1;
 800283c:	4a04      	ldr	r2, [pc, #16]	; (8002850 <LoadROtopology+0x9c>)
 800283e:	2101      	movs	r1, #1
 8002840:	7011      	strb	r1, [r2, #0]
 8002842:	e7c3      	b.n	80027cc <LoadROtopology+0x18>
	return result;
 8002844:	2000      	movs	r0, #0
 8002846:	e7ef      	b.n	8002828 <LoadROtopology+0x74>
 8002848:	0801d800 	.word	0x0801d800
 800284c:	0000ffff 	.word	0x0000ffff
 8002850:	2000001c 	.word	0x2000001c
 8002854:	20001076 	.word	0x20001076
 8002858:	20000a78 	.word	0x20000a78

0800285c <SaveEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Save array ports directions in EEPROM ---
 */
BOS_Status SaveEEportsDir(void){
 800285c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285e:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++) {
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <SaveEEportsDir+0x4c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01a      	beq.n	800289e <SaveEEportsDir+0x42>
 8002868:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 800286e:	4e0f      	ldr	r6, [pc, #60]	; (80028ac <SaveEEportsDir+0x50>)
	for(uint8_t i =1; i <= N; i++) {
 8002870:	4f0d      	ldr	r7, [pc, #52]	; (80028a8 <SaveEEportsDir+0x4c>)
 8002872:	e008      	b.n	8002886 <SaveEEportsDir+0x2a>
		EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8002874:	1c60      	adds	r0, r4, #1
 8002876:	f004 fb69 	bl	8006f4c <EE_WriteVariable>
 800287a:	e00a      	b.n	8002892 <SaveEEportsDir+0x36>
	for(uint8_t i =1; i <= N; i++) {
 800287c:	3401      	adds	r4, #1
 800287e:	b2e4      	uxtb	r4, r4
 8002880:	783b      	ldrb	r3, [r7, #0]
 8002882:	42a3      	cmp	r3, r4
 8002884:	d30d      	bcc.n	80028a2 <SaveEEportsDir+0x46>
		if(arrayPortsDir[i - 1])
 8002886:	0025      	movs	r5, r4
 8002888:	1e63      	subs	r3, r4, #1
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	5b99      	ldrh	r1, [r3, r6]
 800288e:	2900      	cmp	r1, #0
 8002890:	d1f0      	bne.n	8002874 <SaveEEportsDir+0x18>
		
		if( (i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002892:	3502      	adds	r5, #2
 8002894:	2d1b      	cmp	r5, #27
 8002896:	ddf1      	ble.n	800287c <SaveEEportsDir+0x20>
		result =BOS_ERR_EEPROM;
 8002898:	230a      	movs	r3, #10
 800289a:	9301      	str	r3, [sp, #4]
 800289c:	e7ee      	b.n	800287c <SaveEEportsDir+0x20>
	BOS_Status result =BOS_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 80028a2:	9801      	ldr	r0, [sp, #4]
 80028a4:	b003      	add	sp, #12
 80028a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028a8:	2000001c 	.word	0x2000001c
 80028ac:	20006db8 	.word	0x20006db8

080028b0 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- 
 */
BOS_Status ClearEEportsDir(void){
 80028b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b2:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof (arrayPortsDir));
 80028b4:	2234      	movs	r2, #52	; 0x34
 80028b6:	2100      	movs	r1, #0
 80028b8:	4813      	ldr	r0, [pc, #76]	; (8002908 <ClearEEportsDir+0x58>)
 80028ba:	f00f f8d5 	bl	8011a68 <memset>
	
	for(uint8_t i =1; i <= N; i++) {
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <ClearEEportsDir+0x5c>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d01a      	beq.n	80028fc <ClearEEportsDir+0x4c>
 80028c6:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 80028cc:	4e0e      	ldr	r6, [pc, #56]	; (8002908 <ClearEEportsDir+0x58>)
	for(uint8_t i =1; i <= N; i++) {
 80028ce:	4f0f      	ldr	r7, [pc, #60]	; (800290c <ClearEEportsDir+0x5c>)
 80028d0:	e008      	b.n	80028e4 <ClearEEportsDir+0x34>
		EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80028d2:	1c60      	adds	r0, r4, #1
 80028d4:	f004 fb3a 	bl	8006f4c <EE_WriteVariable>
 80028d8:	e00a      	b.n	80028f0 <ClearEEportsDir+0x40>
	for(uint8_t i =1; i <= N; i++) {
 80028da:	3401      	adds	r4, #1
 80028dc:	b2e4      	uxtb	r4, r4
 80028de:	783b      	ldrb	r3, [r7, #0]
 80028e0:	42a3      	cmp	r3, r4
 80028e2:	d30d      	bcc.n	8002900 <ClearEEportsDir+0x50>
		if(arrayPortsDir[i - 1])
 80028e4:	0025      	movs	r5, r4
 80028e6:	1e63      	subs	r3, r4, #1
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	5b99      	ldrh	r1, [r3, r6]
 80028ec:	2900      	cmp	r1, #0
 80028ee:	d1f0      	bne.n	80028d2 <ClearEEportsDir+0x22>
		
		if( (i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80028f0:	3502      	adds	r5, #2
 80028f2:	2d1b      	cmp	r5, #27
 80028f4:	ddf1      	ble.n	80028da <ClearEEportsDir+0x2a>
		result =BOS_ERR_EEPROM;
 80028f6:	230a      	movs	r3, #10
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	e7ee      	b.n	80028da <ClearEEportsDir+0x2a>
	BOS_Status result =BOS_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 8002900:	9801      	ldr	r0, [sp, #4]
 8002902:	b003      	add	sp, #12
 8002904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	20006db8 	.word	0x20006db8
 800290c:	2000001c 	.word	0x2000001c

08002910 <LoadEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Load array ports directions stored in EEPROM --- 
 */
BOS_Status LoadEEportsDir(void){
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++) {
 8002912:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <LoadEEportsDir+0x40>)
 8002914:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8002916:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++) {
 8002918:	2b00      	cmp	r3, #0
 800291a:	d017      	beq.n	800294c <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 800291c:	490d      	ldr	r1, [pc, #52]	; (8002954 <LoadEEportsDir+0x44>)
 800291e:	2002      	movs	r0, #2
 8002920:	f004 fae4 	bl	8006eec <EE_ReadVariable>
	for(uint8_t i =1; i <= N; i++) {
 8002924:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002926:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++) {
 8002928:	4f09      	ldr	r7, [pc, #36]	; (8002950 <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 800292a:	4e0a      	ldr	r6, [pc, #40]	; (8002954 <LoadEEportsDir+0x44>)
	for(uint8_t i =1; i <= N; i++) {
 800292c:	3401      	adds	r4, #1
 800292e:	b2e4      	uxtb	r4, r4
 8002930:	783b      	ldrb	r3, [r7, #0]
 8002932:	42a3      	cmp	r3, r4
 8002934:	d30a      	bcc.n	800294c <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002936:	1e61      	subs	r1, r4, #1
 8002938:	0049      	lsls	r1, r1, #1
 800293a:	1989      	adds	r1, r1, r6
 800293c:	1c60      	adds	r0, r4, #1
 800293e:	f004 fad5 	bl	8006eec <EE_ReadVariable>
		
		if( (i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002942:	1ca3      	adds	r3, r4, #2
 8002944:	2b1b      	cmp	r3, #27
 8002946:	ddf1      	ble.n	800292c <LoadEEportsDir+0x1c>
		result =BOS_ERR_EEPROM;
 8002948:	250a      	movs	r5, #10
 800294a:	e7ef      	b.n	800292c <LoadEEportsDir+0x1c>
	}
	
	return result;
}
 800294c:	0028      	movs	r0, r5
 800294e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002950:	2000001c 	.word	0x2000001c
 8002954:	20006db8 	.word	0x20006db8

08002958 <SaveEEalias>:

/*-----------------------------------------------------------*/

/* --- Save module alias in EEPROM --- 
 */
BOS_Status SaveEEalias(void){
 8002958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295a:	46d6      	mov	lr, sl
 800295c:	464f      	mov	r7, r9
 800295e:	4646      	mov	r6, r8
 8002960:	b5c0      	push	{r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)// N+1 module aliases
 8002962:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 8002964:	2300      	movs	r3, #0
 8002966:	4698      	mov	r8, r3
	    {
		if(moduleAlias[i][0]) {
 8002968:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <SaveEEalias+0x7c>)
 800296a:	469a      	mov	sl, r3
	for(uint8_t i =0; i <= N; i++)// N+1 module aliases
 800296c:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <SaveEEalias+0x80>)
 800296e:	4699      	mov	r9, r3
 8002970:	e005      	b.n	800297e <SaveEEalias+0x26>
 8002972:	3601      	adds	r6, #1
 8002974:	b2f6      	uxtb	r6, r6
 8002976:	464b      	mov	r3, r9
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	42b3      	cmp	r3, r6
 800297c:	d324      	bcc.n	80029c8 <SaveEEalias+0x70>
		if(moduleAlias[i][0]) {
 800297e:	00b3      	lsls	r3, r6, #2
 8002980:	199b      	adds	r3, r3, r6
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4652      	mov	r2, sl
 8002986:	5c9b      	ldrb	r3, [r3, r2]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f2      	beq.n	8002972 <SaveEEalias+0x1a>
 800298c:	00b5      	lsls	r5, r6, #2
 800298e:	19ad      	adds	r5, r5, r6
 8002990:	006d      	lsls	r5, r5, #1
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <SaveEEalias+0x7c>)
 8002994:	469c      	mov	ip, r3
 8002996:	4465      	add	r5, ip
 8002998:	4644      	mov	r4, r8
 800299a:	341c      	adds	r4, #28
 800299c:	b2a4      	uxth	r4, r4
 800299e:	4647      	mov	r7, r8
 80029a0:	3721      	adds	r7, #33	; 0x21
 80029a2:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2) {
				temp =(uint16_t) (moduleAlias[i][j - 1] << 8)
 80029a4:	782b      	ldrb	r3, [r5, #0]
 80029a6:	021b      	lsls	r3, r3, #8
				    + moduleAlias[i][j];
 80029a8:	7869      	ldrb	r1, [r5, #1]
				temp =(uint16_t) (moduleAlias[i][j - 1] << 8)
 80029aa:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80029ac:	b289      	uxth	r1, r1
 80029ae:	0020      	movs	r0, r4
 80029b0:	f004 facc 	bl	8006f4c <EE_WriteVariable>
 80029b4:	3502      	adds	r5, #2
 80029b6:	3401      	adds	r4, #1
 80029b8:	b2a4      	uxth	r4, r4
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2) {
 80029ba:	42bc      	cmp	r4, r7
 80029bc:	d1f2      	bne.n	80029a4 <SaveEEalias+0x4c>
 80029be:	4643      	mov	r3, r8
 80029c0:	3305      	adds	r3, #5
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	4698      	mov	r8, r3
 80029c6:	e7d4      	b.n	8002972 <SaveEEalias+0x1a>
			}
		}
	}
	
	return result;
}
 80029c8:	2000      	movs	r0, #0
 80029ca:	bc1c      	pop	{r2, r3, r4}
 80029cc:	4690      	mov	r8, r2
 80029ce:	4699      	mov	r9, r3
 80029d0:	46a2      	mov	sl, r4
 80029d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d4:	20000f68 	.word	0x20000f68
 80029d8:	2000001c 	.word	0x2000001c

080029dc <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- 
 */
BOS_Status LoadEEalias(void){
 80029dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029de:	46de      	mov	lr, fp
 80029e0:	4657      	mov	r7, sl
 80029e2:	464e      	mov	r6, r9
 80029e4:	4645      	mov	r5, r8
 80029e6:	b5e0      	push	{r5, r6, r7, lr}
 80029e8:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 80029ea:	466b      	mov	r3, sp
 80029ec:	2200      	movs	r2, #0
 80029ee:	80da      	strh	r2, [r3, #6]
 80029f0:	241c      	movs	r4, #28
	
	for(uint8_t i =0; i <= N; i++)// N+1 module aliases
 80029f2:	2700      	movs	r7, #0
 80029f4:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <LoadEEalias+0x7c>)
 80029f6:	469a      	mov	sl, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
			moduleAlias[i][j] =(uint8_t) temp;
			moduleAlias[i][j - 1] =(uint8_t) (temp >> 8);
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 80029f8:	469b      	mov	fp, r3
 80029fa:	e00c      	b.n	8002a16 <LoadEEalias+0x3a>
 80029fc:	464b      	mov	r3, r9
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	444b      	add	r3, r9
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	445b      	add	r3, fp
 8002a06:	2200      	movs	r2, #0
 8002a08:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)// N+1 module aliases
 8002a0a:	3701      	adds	r7, #1
 8002a0c:	b2ff      	uxtb	r7, r7
 8002a0e:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <LoadEEalias+0x80>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	42bb      	cmp	r3, r7
 8002a14:	d317      	bcc.n	8002a46 <LoadEEalias+0x6a>
 8002a16:	00bd      	lsls	r5, r7, #2
 8002a18:	19ed      	adds	r5, r5, r7
 8002a1a:	006d      	lsls	r5, r5, #1
 8002a1c:	4455      	add	r5, sl
 8002a1e:	1d63      	adds	r3, r4, #5
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002a24:	466b      	mov	r3, sp
 8002a26:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] =(uint8_t) temp;
 8002a28:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002a2a:	0031      	movs	r1, r6
 8002a2c:	0020      	movs	r0, r4
 8002a2e:	f004 fa5d 	bl	8006eec <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t) temp;
 8002a32:	8833      	ldrh	r3, [r6, #0]
 8002a34:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j - 1] =(uint8_t) (temp >> 8);
 8002a36:	0a1b      	lsrs	r3, r3, #8
 8002a38:	702b      	strb	r3, [r5, #0]
 8002a3a:	3401      	adds	r4, #1
 8002a3c:	b2a4      	uxth	r4, r4
 8002a3e:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2) {
 8002a40:	45a0      	cmp	r8, r4
 8002a42:	d1f2      	bne.n	8002a2a <LoadEEalias+0x4e>
 8002a44:	e7da      	b.n	80029fc <LoadEEalias+0x20>
	}
	
	return result;
}
 8002a46:	2000      	movs	r0, #0
 8002a48:	b003      	add	sp, #12
 8002a4a:	bc3c      	pop	{r2, r3, r4, r5}
 8002a4c:	4690      	mov	r8, r2
 8002a4e:	4699      	mov	r9, r3
 8002a50:	46a2      	mov	sl, r4
 8002a52:	46ab      	mov	fp, r5
 8002a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	20000f68 	.word	0x20000f68
 8002a5c:	2000001c 	.word	0x2000001c

08002a60 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- 
 */
BOS_Status LoadEEgroup(void){
 8002a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a62:	46d6      	mov	lr, sl
 8002a64:	464f      	mov	r7, r9
 8002a66:	4646      	mov	r6, r8
 8002a68:	b5c0      	push	{r6, r7, lr}
 8002a6a:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002a6c:	466b      	mov	r3, sp
 8002a6e:	2200      	movs	r2, #0
 8002a70:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)// N modules
 8002a72:	4b22      	ldr	r3, [pc, #136]	; (8002afc <LoadEEgroup+0x9c>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d01d      	beq.n	8002ab6 <LoadEEgroup+0x56>
	uint16_t add =0, temp =0;
 8002a7a:	2500      	movs	r5, #0
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002a7c:	4e20      	ldr	r6, [pc, #128]	; (8002b00 <LoadEEgroup+0xa0>)
	for(i =0; i < N; i++)// N modules
 8002a7e:	4c1f      	ldr	r4, [pc, #124]	; (8002afc <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002a80:	b2e9      	uxtb	r1, r5
 8002a82:	0049      	lsls	r1, r1, #1
 8002a84:	1871      	adds	r1, r6, r1
 8002a86:	0028      	movs	r0, r5
 8002a88:	30cb      	adds	r0, #203	; 0xcb
 8002a8a:	b280      	uxth	r0, r0
 8002a8c:	f004 fa2e 	bl	8006eec <EE_ReadVariable>
		add++;
 8002a90:	3501      	adds	r5, #1
 8002a92:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)// N modules
 8002a94:	7822      	ldrb	r2, [r4, #0]
 8002a96:	b2eb      	uxtb	r3, r5
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d8f1      	bhi.n	8002a80 <LoadEEgroup+0x20>
 8002a9c:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <LoadEEgroup+0xa4>)
 8002a9e:	4699      	mov	r9, r3
 8002aa0:	002c      	movs	r4, r5
 8002aa2:	3499      	adds	r4, #153	; 0x99
 8002aa4:	b2a4      	uxth	r4, r4
 8002aa6:	35cb      	adds	r5, #203	; 0xcb
 8002aa8:	b2ab      	uxth	r3, r5
 8002aaa:	4698      	mov	r8, r3
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)// MaxNumOfGroups group aliases
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2) {
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002aac:	466b      	mov	r3, sp
 8002aae:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] =(uint8_t) temp;
			groupAlias[i][j - 1] =(uint8_t) (temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	469a      	mov	sl, r3
 8002ab4:	e009      	b.n	8002aca <LoadEEgroup+0x6a>
	uint16_t add =0, temp =0;
 8002ab6:	2500      	movs	r5, #0
 8002ab8:	e7f0      	b.n	8002a9c <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002aba:	464b      	mov	r3, r9
 8002abc:	4652      	mov	r2, sl
 8002abe:	725a      	strb	r2, [r3, #9]
 8002ac0:	230a      	movs	r3, #10
 8002ac2:	469c      	mov	ip, r3
 8002ac4:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)// MaxNumOfGroups group aliases
 8002ac6:	4544      	cmp	r4, r8
 8002ac8:	d010      	beq.n	8002aec <LoadEEgroup+0x8c>
 8002aca:	1d67      	adds	r7, r4, #5
 8002acc:	b2bf      	uxth	r7, r7
	uint16_t add =0, temp =0;
 8002ace:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002ad0:	0031      	movs	r1, r6
 8002ad2:	0020      	movs	r0, r4
 8002ad4:	f004 fa0a 	bl	8006eec <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t) temp;
 8002ad8:	8833      	ldrh	r3, [r6, #0]
 8002ada:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j - 1] =(uint8_t) (temp >> 8);
 8002adc:	0a1b      	lsrs	r3, r3, #8
 8002ade:	702b      	strb	r3, [r5, #0]
 8002ae0:	3401      	adds	r4, #1
 8002ae2:	b2a4      	uxth	r4, r4
 8002ae4:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2) {
 8002ae6:	42bc      	cmp	r4, r7
 8002ae8:	d1f2      	bne.n	8002ad0 <LoadEEgroup+0x70>
 8002aea:	e7e6      	b.n	8002aba <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8002aec:	2000      	movs	r0, #0
 8002aee:	b002      	add	sp, #8
 8002af0:	bc1c      	pop	{r2, r3, r4}
 8002af2:	4690      	mov	r8, r2
 8002af4:	4699      	mov	r9, r3
 8002af6:	46a2      	mov	sl, r4
 8002af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	2000001c 	.word	0x2000001c
 8002b00:	20000ec0 	.word	0x20000ec0
 8002b04:	20000e5c 	.word	0x20000e5c

08002b08 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- 
 */
BOS_Status LoadEEstreams(void){
 8002b08:	b570      	push	{r4, r5, r6, lr}
 8002b0a:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002b0c:	210e      	movs	r1, #14
 8002b0e:	4469      	add	r1, sp
 8002b10:	2300      	movs	r3, #0
 8002b12:	800b      	strh	r3, [r1, #0]
 8002b14:	aa03      	add	r2, sp, #12
 8002b16:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002b18:	20e4      	movs	r0, #228	; 0xe4
 8002b1a:	f004 f9e7 	bl	8006eec <EE_ReadVariable>
	uint8_t direction =0;
 8002b1e:	2600      	movs	r6, #0
	if(!status1) {
 8002b20:	2800      	cmp	r0, #0
 8002b22:	d102      	bne.n	8002b2a <LoadEEstreams+0x22>
		direction =(uint8_t) temp1;
 8002b24:	230e      	movs	r3, #14
 8002b26:	446b      	add	r3, sp
 8002b28:	781e      	ldrb	r6, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002b2a:	210e      	movs	r1, #14
 8002b2c:	4469      	add	r1, sp
 8002b2e:	20e5      	movs	r0, #229	; 0xe5
 8002b30:	f004 f9dc 	bl	8006eec <EE_ReadVariable>
 8002b34:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002b36:	a903      	add	r1, sp, #12
 8002b38:	20e6      	movs	r0, #230	; 0xe6
 8002b3a:	f004 f9d7 	bl	8006eec <EE_ReadVariable>
	if(!status1 && !status2) {
 8002b3e:	4304      	orrs	r4, r0
 8002b40:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 8002b42:	2500      	movs	r5, #0
	if(!status1 && !status2) {
 8002b44:	2c00      	cmp	r4, #0
 8002b46:	d106      	bne.n	8002b56 <LoadEEstreams+0x4e>
		count = ((uint32_t) temp1 << 16) + temp2;
 8002b48:	230e      	movs	r3, #14
 8002b4a:	446b      	add	r3, sp
 8002b4c:	881d      	ldrh	r5, [r3, #0]
 8002b4e:	042d      	lsls	r5, r5, #16
 8002b50:	ab03      	add	r3, sp, #12
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002b56:	210e      	movs	r1, #14
 8002b58:	4469      	add	r1, sp
 8002b5a:	20e7      	movs	r0, #231	; 0xe7
 8002b5c:	f004 f9c6 	bl	8006eec <EE_ReadVariable>
 8002b60:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002b62:	a903      	add	r1, sp, #12
 8002b64:	20e8      	movs	r0, #232	; 0xe8
 8002b66:	f004 f9c1 	bl	8006eec <EE_ReadVariable>
	if(!status1 && !status2) {
 8002b6a:	4320      	orrs	r0, r4
 8002b6c:	b280      	uxth	r0, r0
	uint32_t count =0, timeout =0;
 8002b6e:	2400      	movs	r4, #0
	if(!status1 && !status2) {
 8002b70:	2800      	cmp	r0, #0
 8002b72:	d106      	bne.n	8002b82 <LoadEEstreams+0x7a>
		timeout = ((uint32_t) temp1 << 16) + temp2;
 8002b74:	230e      	movs	r3, #14
 8002b76:	446b      	add	r3, sp
 8002b78:	881c      	ldrh	r4, [r3, #0]
 8002b7a:	0424      	lsls	r4, r4, #16
 8002b7c:	ab03      	add	r3, sp, #12
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8002b82:	210e      	movs	r1, #14
 8002b84:	4469      	add	r1, sp
 8002b86:	20e9      	movs	r0, #233	; 0xe9
 8002b88:	f004 f9b0 	bl	8006eec <EE_ReadVariable>
	if(!status1) {
 8002b8c:	2800      	cmp	r0, #0
 8002b8e:	d107      	bne.n	8002ba0 <LoadEEstreams+0x98>
		src1 =(uint8_t) (temp1 >> 8);
 8002b90:	230e      	movs	r3, #14
 8002b92:	446b      	add	r3, sp
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	0a19      	lsrs	r1, r3, #8
 8002b98:	4a28      	ldr	r2, [pc, #160]	; (8002c3c <LoadEEstreams+0x134>)
 8002b9a:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t) temp1;
 8002b9c:	4a28      	ldr	r2, [pc, #160]	; (8002c40 <LoadEEstreams+0x138>)
 8002b9e:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8002ba0:	210e      	movs	r1, #14
 8002ba2:	4469      	add	r1, sp
 8002ba4:	20ea      	movs	r0, #234	; 0xea
 8002ba6:	f004 f9a1 	bl	8006eec <EE_ReadVariable>
	if(!status1) {
 8002baa:	2800      	cmp	r0, #0
 8002bac:	d107      	bne.n	8002bbe <LoadEEstreams+0xb6>
		src2 =(uint8_t) (temp1 >> 8);
 8002bae:	230e      	movs	r3, #14
 8002bb0:	446b      	add	r3, sp
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	0a19      	lsrs	r1, r3, #8
 8002bb6:	4a23      	ldr	r2, [pc, #140]	; (8002c44 <LoadEEstreams+0x13c>)
 8002bb8:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t) temp1;
 8002bba:	4a23      	ldr	r2, [pc, #140]	; (8002c48 <LoadEEstreams+0x140>)
 8002bbc:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8002bbe:	210e      	movs	r1, #14
 8002bc0:	4469      	add	r1, sp
 8002bc2:	20eb      	movs	r0, #235	; 0xeb
 8002bc4:	f004 f992 	bl	8006eec <EE_ReadVariable>
	if(!status1) {
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	d107      	bne.n	8002bdc <LoadEEstreams+0xd4>
		src3 =(uint8_t) (temp1 >> 8);
 8002bcc:	230e      	movs	r3, #14
 8002bce:	446b      	add	r3, sp
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	0a19      	lsrs	r1, r3, #8
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <LoadEEstreams+0x144>)
 8002bd6:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t) temp1;
 8002bd8:	4a1d      	ldr	r2, [pc, #116]	; (8002c50 <LoadEEstreams+0x148>)
 8002bda:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8002bdc:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <LoadEEstreams+0x134>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <LoadEEstreams+0xe4>
 8002be4:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <LoadEEstreams+0x138>)
 8002be6:	7812      	ldrb	r2, [r2, #0]
 8002be8:	2a00      	cmp	r2, #0
 8002bea:	d112      	bne.n	8002c12 <LoadEEstreams+0x10a>
	SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <LoadEEstreams+0x13c>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <LoadEEstreams+0xf4>
 8002bf4:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <LoadEEstreams+0x140>)
 8002bf6:	7812      	ldrb	r2, [r2, #0]
 8002bf8:	2a00      	cmp	r2, #0
 8002bfa:	d111      	bne.n	8002c20 <LoadEEstreams+0x118>
	SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8002bfc:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <LoadEEstreams+0x144>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <LoadEEstreams+0x104>
 8002c04:	4a12      	ldr	r2, [pc, #72]	; (8002c50 <LoadEEstreams+0x148>)
 8002c06:	7812      	ldrb	r2, [r2, #0]
 8002c08:	2a00      	cmp	r2, #0
 8002c0a:	d110      	bne.n	8002c2e <LoadEEstreams+0x126>
	SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	b004      	add	sp, #16
 8002c10:	bd70      	pop	{r4, r5, r6, pc}
	SetupDMAStreams(direction,count,timeout,src1,dst1);
 8002c12:	9200      	str	r2, [sp, #0]
 8002c14:	0022      	movs	r2, r4
 8002c16:	0029      	movs	r1, r5
 8002c18:	0030      	movs	r0, r6
 8002c1a:	f005 fb25 	bl	8008268 <SetupDMAStreams>
 8002c1e:	e7e5      	b.n	8002bec <LoadEEstreams+0xe4>
	SetupDMAStreams(direction,count,timeout,src2,dst2);
 8002c20:	9200      	str	r2, [sp, #0]
 8002c22:	0022      	movs	r2, r4
 8002c24:	0029      	movs	r1, r5
 8002c26:	0030      	movs	r0, r6
 8002c28:	f005 fb1e 	bl	8008268 <SetupDMAStreams>
 8002c2c:	e7e6      	b.n	8002bfc <LoadEEstreams+0xf4>
	SetupDMAStreams(direction,count,timeout,src3,dst3);
 8002c2e:	9200      	str	r2, [sp, #0]
 8002c30:	0022      	movs	r2, r4
 8002c32:	0029      	movs	r1, r5
 8002c34:	0030      	movs	r0, r6
 8002c36:	f005 fb17 	bl	8008268 <SetupDMAStreams>
 8002c3a:	e7e7      	b.n	8002c0c <LoadEEstreams+0x104>
 8002c3c:	2000114a 	.word	0x2000114a
 8002c40:	20000e59 	.word	0x20000e59
 8002c44:	2000114b 	.word	0x2000114b
 8002c48:	20000e5a 	.word	0x20000e5a
 8002c4c:	2000114c 	.word	0x2000114c
 8002c50:	20000e5b 	.word	0x20000e5b

08002c54 <SaveEEstreams>:

/* --- Save DMA streams to emulated EEPROM. --- 
 */
BOS_Status SaveEEstreams(uint8_t direction, uint32_t count, uint32_t timeout,
    uint8_t src1, uint8_t dst1, uint8_t src2, uint8_t dst2, uint8_t src3,
    uint8_t dst3){
 8002c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c56:	46de      	mov	lr, fp
 8002c58:	4657      	mov	r7, sl
 8002c5a:	464e      	mov	r6, r9
 8002c5c:	4645      	mov	r5, r8
 8002c5e:	b5e0      	push	{r5, r6, r7, lr}
 8002c60:	000f      	movs	r7, r1
 8002c62:	0016      	movs	r6, r2
 8002c64:	4699      	mov	r9, r3
 8002c66:	ab0a      	add	r3, sp, #40	; 0x28
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	469b      	mov	fp, r3
 8002c6c:	ab0b      	add	r3, sp, #44	; 0x2c
 8002c6e:	781d      	ldrb	r5, [r3, #0]
 8002c70:	ab0c      	add	r3, sp, #48	; 0x30
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	469a      	mov	sl, r3
 8002c76:	ab0d      	add	r3, sp, #52	; 0x34
 8002c78:	781c      	ldrb	r4, [r3, #0]
 8002c7a:	ab0e      	add	r3, sp, #56	; 0x38
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8002c80:	b281      	uxth	r1, r0
 8002c82:	20e4      	movs	r0, #228	; 0xe4
 8002c84:	f004 f962 	bl	8006f4c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1, ((uint16_t) (count >> 8))); /* Count high half-word */
 8002c88:	0a39      	lsrs	r1, r7, #8
 8002c8a:	b289      	uxth	r1, r1
 8002c8c:	20e5      	movs	r0, #229	; 0xe5
 8002c8e:	f004 f95d 	bl	8006f4c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2, ((uint16_t) count)); /* Count low half-word */
 8002c92:	b2b9      	uxth	r1, r7
 8002c94:	20e6      	movs	r0, #230	; 0xe6
 8002c96:	f004 f959 	bl	8006f4c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3, ((uint16_t) (timeout >> 8))); /* Timeout high half-word */
 8002c9a:	0a31      	lsrs	r1, r6, #8
 8002c9c:	b289      	uxth	r1, r1
 8002c9e:	20e7      	movs	r0, #231	; 0xe7
 8002ca0:	f004 f954 	bl	8006f4c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4, ((uint16_t) timeout)); /* Timeout low half-word */
 8002ca4:	b2b1      	uxth	r1, r6
 8002ca6:	20e8      	movs	r0, #232	; 0xe8
 8002ca8:	f004 f950 	bl	8006f4c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,
	    ((uint16_t) (src1 << 8)) + (uint16_t) dst1); /* src1 | dst1 */
 8002cac:	464b      	mov	r3, r9
 8002cae:	0219      	lsls	r1, r3, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,
 8002cb0:	4459      	add	r1, fp
 8002cb2:	b289      	uxth	r1, r1
 8002cb4:	20e9      	movs	r0, #233	; 0xe9
 8002cb6:	f004 f949 	bl	8006f4c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,
	    ((uint16_t) (src2 << 8)) + (uint16_t) dst2); /* src1 | dst1 */
 8002cba:	022d      	lsls	r5, r5, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,
 8002cbc:	4455      	add	r5, sl
 8002cbe:	b2a9      	uxth	r1, r5
 8002cc0:	20ea      	movs	r0, #234	; 0xea
 8002cc2:	f004 f943 	bl	8006f4c <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,
	    ((uint16_t) (src3 << 8)) + (uint16_t) dst3); /* src1 | dst1 */
 8002cc6:	0224      	lsls	r4, r4, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,
 8002cc8:	4444      	add	r4, r8
 8002cca:	b2a1      	uxth	r1, r4
 8002ccc:	20eb      	movs	r0, #235	; 0xeb
 8002cce:	f004 f93d 	bl	8006f4c <EE_WriteVariable>
	
	return result;
}
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	bc3c      	pop	{r2, r3, r4, r5}
 8002cd6:	4690      	mov	r8, r2
 8002cd8:	4699      	mov	r9, r3
 8002cda:	46a2      	mov	sl, r4
 8002cdc:	46ab      	mov	fp, r5
 8002cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ce0 <LoadEEparams>:

/*-----------------------------------------------------------*/

/* --- Load module parameters from emulated EEPROM. If erased, loade defualts --- 
 */
BOS_Status LoadEEparams(void){
 8002ce0:	b510      	push	{r4, lr}
 8002ce2:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8002ce4:	208a      	movs	r0, #138	; 0x8a
 8002ce6:	466b      	mov	r3, sp
 8002ce8:	1d99      	adds	r1, r3, #6
 8002cea:	0040      	lsls	r0, r0, #1
 8002cec:	f004 f8fe 	bl	8006eec <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1) {
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d000      	beq.n	8002cf6 <LoadEEparams+0x16>
 8002cf4:	e064      	b.n	8002dc0 <LoadEEparams+0xe0>
		BOS.response =(uint8_t) temp1;
 8002cf6:	466b      	mov	r3, sp
 8002cf8:	3306      	adds	r3, #6
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	4a49      	ldr	r2, [pc, #292]	; (8002e24 <LoadEEparams+0x144>)
 8002cfe:	7193      	strb	r3, [r2, #6]
		BOS.trace =(traceOptions_t) (temp1 >> 8);
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	71d3      	strb	r3, [r2, #7]
		BOS.response =BOS_default.response;
		BOS.trace =BOS_default.trace;
	}
	
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8002d04:	2016      	movs	r0, #22
 8002d06:	466b      	mov	r3, sp
 8002d08:	1d99      	adds	r1, r3, #6
 8002d0a:	30ff      	adds	r0, #255	; 0xff
 8002d0c:	f004 f8ee 	bl	8006eec <EE_ReadVariable>
	if(!status1)
 8002d10:	2800      	cmp	r0, #0
 8002d12:	d15c      	bne.n	8002dce <LoadEEparams+0xee>
	BOS.buttons.debounce =temp1;
 8002d14:	466b      	mov	r3, sp
 8002d16:	88da      	ldrh	r2, [r3, #6]
 8002d18:	4b42      	ldr	r3, [pc, #264]	; (8002e24 <LoadEEparams+0x144>)
 8002d1a:	801a      	strh	r2, [r3, #0]
	else
	BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8002d1c:	208b      	movs	r0, #139	; 0x8b
 8002d1e:	466b      	mov	r3, sp
 8002d20:	1d99      	adds	r1, r3, #6
 8002d22:	0040      	lsls	r0, r0, #1
 8002d24:	f004 f8e2 	bl	8006eec <EE_ReadVariable>
	if(!status1)
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	d155      	bne.n	8002dd8 <LoadEEparams+0xf8>
	BOS.buttons.singleClickTime =temp1;
 8002d2c:	466b      	mov	r3, sp
 8002d2e:	88da      	ldrh	r2, [r3, #6]
 8002d30:	4b3c      	ldr	r3, [pc, #240]	; (8002e24 <LoadEEparams+0x144>)
 8002d32:	805a      	strh	r2, [r3, #2]
	else
	BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8002d34:	2018      	movs	r0, #24
 8002d36:	466b      	mov	r3, sp
 8002d38:	1d99      	adds	r1, r3, #6
 8002d3a:	30ff      	adds	r0, #255	; 0xff
 8002d3c:	f004 f8d6 	bl	8006eec <EE_ReadVariable>
	if(!status1) {
 8002d40:	2800      	cmp	r0, #0
 8002d42:	d14e      	bne.n	8002de2 <LoadEEparams+0x102>
		BOS.buttons.minInterClickTime =(uint8_t) temp1;
 8002d44:	466b      	mov	r3, sp
 8002d46:	3306      	adds	r3, #6
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	4a36      	ldr	r2, [pc, #216]	; (8002e24 <LoadEEparams+0x144>)
 8002d4c:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t) (temp1 >> 8);
 8002d4e:	0a1b      	lsrs	r3, r3, #8
 8002d50:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8002d52:	208c      	movs	r0, #140	; 0x8c
 8002d54:	466b      	mov	r3, sp
 8002d56:	1d99      	adds	r1, r3, #6
 8002d58:	0040      	lsls	r0, r0, #1
 8002d5a:	f004 f8c7 	bl	8006eec <EE_ReadVariable>
 8002d5e:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8002d60:	201a      	movs	r0, #26
 8002d62:	a901      	add	r1, sp, #4
 8002d64:	30ff      	adds	r0, #255	; 0xff
 8002d66:	f004 f8c1 	bl	8006eec <EE_ReadVariable>
	if(!status1 && !status2) {
 8002d6a:	4304      	orrs	r4, r0
 8002d6c:	b2a4      	uxth	r4, r4
 8002d6e:	2c00      	cmp	r4, #0
 8002d70:	d13e      	bne.n	8002df0 <LoadEEparams+0x110>
		BOS.clibaudrate =(uint32_t) temp1 | ( ((uint32_t) temp2) << 16);
 8002d72:	ab01      	add	r3, sp, #4
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	041b      	lsls	r3, r3, #16
 8002d78:	466a      	mov	r2, sp
 8002d7a:	3206      	adds	r2, #6
 8002d7c:	8812      	ldrh	r2, [r2, #0]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	4a28      	ldr	r2, [pc, #160]	; (8002e24 <LoadEEparams+0x144>)
 8002d82:	6093      	str	r3, [r2, #8]
	BOS.clibaudrate = CLI_BAUDRATE_1;
	else
	BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8002d84:	208d      	movs	r0, #141	; 0x8d
 8002d86:	466b      	mov	r3, sp
 8002d88:	1d99      	adds	r1, r3, #6
 8002d8a:	0040      	lsls	r0, r0, #1
 8002d8c:	f004 f8ae 	bl	8006eec <EE_ReadVariable>
	if(!status1) {
 8002d90:	2800      	cmp	r0, #0
 8002d92:	d13b      	bne.n	8002e0c <LoadEEparams+0x12c>
		BOS.daylightsaving =(int8_t) temp1;
 8002d94:	466b      	mov	r3, sp
 8002d96:	3306      	adds	r3, #6
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	4a22      	ldr	r2, [pc, #136]	; (8002e24 <LoadEEparams+0x144>)
 8002d9c:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t) (temp1 >> 8);
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8002da2:	201c      	movs	r0, #28
 8002da4:	466b      	mov	r3, sp
 8002da6:	1d99      	adds	r1, r3, #6
 8002da8:	30ff      	adds	r0, #255	; 0xff
 8002daa:	f004 f89f 	bl	8006eec <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1) {
 8002dae:	2800      	cmp	r0, #0
 8002db0:	d032      	beq.n	8002e18 <LoadEEparams+0x138>
		BOS.disableCLI =(uint8_t) temp1;
		/* Couldn't find the variable, load default config */
	}
	else {
		BOS.disableCLI =BOS_default.disableCLI;
 8002db2:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <LoadEEparams+0x148>)
 8002db4:	7eda      	ldrb	r2, [r3, #27]
 8002db6:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <LoadEEparams+0x144>)
 8002db8:	76da      	strb	r2, [r3, #27]
	}
	
	return result;
}
 8002dba:	2000      	movs	r0, #0
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd10      	pop	{r4, pc}
		BOS.response =BOS_default.response;
 8002dc0:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <LoadEEparams+0x144>)
 8002dc2:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <LoadEEparams+0x148>)
 8002dc4:	7991      	ldrb	r1, [r2, #6]
 8002dc6:	7199      	strb	r1, [r3, #6]
		BOS.trace =BOS_default.trace;
 8002dc8:	79d2      	ldrb	r2, [r2, #7]
 8002dca:	71da      	strb	r2, [r3, #7]
 8002dcc:	e79a      	b.n	8002d04 <LoadEEparams+0x24>
	BOS.buttons.debounce =BOS_default.buttons.debounce;
 8002dce:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <LoadEEparams+0x148>)
 8002dd0:	881a      	ldrh	r2, [r3, #0]
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <LoadEEparams+0x144>)
 8002dd4:	801a      	strh	r2, [r3, #0]
 8002dd6:	e7a1      	b.n	8002d1c <LoadEEparams+0x3c>
	BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <LoadEEparams+0x148>)
 8002dda:	885a      	ldrh	r2, [r3, #2]
 8002ddc:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <LoadEEparams+0x144>)
 8002dde:	805a      	strh	r2, [r3, #2]
 8002de0:	e7a8      	b.n	8002d34 <LoadEEparams+0x54>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <LoadEEparams+0x144>)
 8002de4:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <LoadEEparams+0x148>)
 8002de6:	7911      	ldrb	r1, [r2, #4]
 8002de8:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 8002dea:	7952      	ldrb	r2, [r2, #5]
 8002dec:	715a      	strb	r2, [r3, #5]
 8002dee:	e7b0      	b.n	8002d52 <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 8002df0:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <LoadEEparams+0x14c>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d004      	beq.n	8002e02 <LoadEEparams+0x122>
	BOS.clibaudrate = CLI_BAUDRATE_1;
 8002df8:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <LoadEEparams+0x144>)
 8002dfa:	22e1      	movs	r2, #225	; 0xe1
 8002dfc:	0252      	lsls	r2, r2, #9
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	e7c0      	b.n	8002d84 <LoadEEparams+0xa4>
	BOS.clibaudrate =BOS_default.clibaudrate;
 8002e02:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <LoadEEparams+0x148>)
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <LoadEEparams+0x144>)
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	e7bb      	b.n	8002d84 <LoadEEparams+0xa4>
		BOS.hourformat =24;
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <LoadEEparams+0x144>)
 8002e0e:	2218      	movs	r2, #24
 8002e10:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 8002e12:	2200      	movs	r2, #0
 8002e14:	731a      	strb	r2, [r3, #12]
 8002e16:	e7c4      	b.n	8002da2 <LoadEEparams+0xc2>
		BOS.disableCLI =(uint8_t) temp1;
 8002e18:	466b      	mov	r3, sp
 8002e1a:	88da      	ldrh	r2, [r3, #6]
 8002e1c:	4b01      	ldr	r3, [pc, #4]	; (8002e24 <LoadEEparams+0x144>)
 8002e1e:	76da      	strb	r2, [r3, #27]
 8002e20:	e7cb      	b.n	8002dba <LoadEEparams+0xda>
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	20006988 	.word	0x20006988
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	20000a76 	.word	0x20000a76

08002e30 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. --- 
 */
BOS_Status SaveEEparams(void){
 8002e30:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,
	    ((uint16_t) BOS.trace << 5) | (uint16_t) BOS.response);
 8002e32:	4c1a      	ldr	r4, [pc, #104]	; (8002e9c <SaveEEparams+0x6c>)
 8002e34:	79e3      	ldrb	r3, [r4, #7]
 8002e36:	015b      	lsls	r3, r3, #5
 8002e38:	79a1      	ldrb	r1, [r4, #6]
	EE_WriteVariable(_EE_PARAMS_BASE,
 8002e3a:	4319      	orrs	r1, r3
 8002e3c:	208a      	movs	r0, #138	; 0x8a
 8002e3e:	0040      	lsls	r0, r0, #1
 8002e40:	f004 f884 	bl	8006f4c <EE_WriteVariable>
	
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8002e44:	8821      	ldrh	r1, [r4, #0]
 8002e46:	2016      	movs	r0, #22
 8002e48:	30ff      	adds	r0, #255	; 0xff
 8002e4a:	f004 f87f 	bl	8006f4c <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 8002e4e:	8861      	ldrh	r1, [r4, #2]
 8002e50:	208b      	movs	r0, #139	; 0x8b
 8002e52:	0040      	lsls	r0, r0, #1
 8002e54:	f004 f87a 	bl	8006f4c <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,
	    ((uint16_t) BOS.buttons.maxInterClickTime << 8)
 8002e58:	7963      	ldrb	r3, [r4, #5]
 8002e5a:	021b      	lsls	r3, r3, #8
	        | (uint16_t) BOS.daylightsaving);
 8002e5c:	7b21      	ldrb	r1, [r4, #12]
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,
 8002e5e:	4319      	orrs	r1, r3
 8002e60:	2018      	movs	r0, #24
 8002e62:	30ff      	adds	r0, #255	; 0xff
 8002e64:	f004 f872 	bl	8006f4c <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t) BOS.clibaudrate);
 8002e68:	8921      	ldrh	r1, [r4, #8]
 8002e6a:	208c      	movs	r0, #140	; 0x8c
 8002e6c:	0040      	lsls	r0, r0, #1
 8002e6e:	f004 f86d 	bl	8006f4c <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t) (BOS.clibaudrate >> 16));
 8002e72:	8961      	ldrh	r1, [r4, #10]
 8002e74:	201a      	movs	r0, #26
 8002e76:	30ff      	adds	r0, #255	; 0xff
 8002e78:	f004 f868 	bl	8006f4c <EE_WriteVariable>
	
	/* Save RTC hourformat and daylightsaving */
	EE_WriteVariable(_EE_PARAMS_RTC,
	    ((uint16_t) BOS.hourformat << 8)
 8002e7c:	7b63      	ldrb	r3, [r4, #13]
 8002e7e:	021b      	lsls	r3, r3, #8
	        | (uint16_t) BOS.buttons.minInterClickTime);
 8002e80:	7921      	ldrb	r1, [r4, #4]
	EE_WriteVariable(_EE_PARAMS_RTC,
 8002e82:	4319      	orrs	r1, r3
 8002e84:	208d      	movs	r0, #141	; 0x8d
 8002e86:	0040      	lsls	r0, r0, #1
 8002e88:	f004 f860 	bl	8006f4c <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t) BOS.disableCLI);
 8002e8c:	7ee1      	ldrb	r1, [r4, #27]
 8002e8e:	201c      	movs	r0, #28
 8002e90:	30ff      	adds	r0, #255	; 0xff
 8002e92:	f004 f85b 	bl	8006f4c <EE_WriteVariable>
	
	return result;
}
 8002e96:	2000      	movs	r0, #0
 8002e98:	bd10      	pop	{r4, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	20006988 	.word	0x20006988

08002ea0 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- 
 */
BOS_Status LoadEEbuttons(void){
 8002ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ea2:	46ce      	mov	lr, r9
 8002ea4:	4647      	mov	r7, r8
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 8002eaa:	231e      	movs	r3, #30
 8002eac:	446b      	add	r3, sp
 8002eae:	2200      	movs	r2, #0
 8002eb0:	801a      	strh	r2, [r3, #0]
 8002eb2:	2501      	movs	r5, #1
 8002eb4:	24ec      	movs	r4, #236	; 0xec
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++) {
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8002eb6:	001e      	movs	r6, r3
 8002eb8:	230f      	movs	r3, #15
 8002eba:	4698      	mov	r8, r3
 8002ebc:	e004      	b.n	8002ec8 <LoadEEbuttons+0x28>
 8002ebe:	3404      	adds	r4, #4
 8002ec0:	b2a4      	uxth	r4, r4
 8002ec2:	3501      	adds	r5, #1
	for(uint8_t i =0; i <= NumOfPorts; i++) {
 8002ec4:	2d08      	cmp	r5, #8
 8002ec6:	d058      	beq.n	8002f7a <LoadEEbuttons+0xda>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8002ec8:	0031      	movs	r1, r6
 8002eca:	0020      	movs	r0, r4
 8002ecc:	f004 f80e 	bl	8006eec <EE_ReadVariable>
		
		if(!status1)// This variable exists
 8002ed0:	2800      	cmp	r0, #0
 8002ed2:	d1f4      	bne.n	8002ebe <LoadEEbuttons+0x1e>
		{
			temp8 =(uint8_t) (temp16 >> 8);
 8002ed4:	8831      	ldrh	r1, [r6, #0]
 8002ed6:	0a0b      	lsrs	r3, r1, #8
			if( ( (temp8 >> 4) == i + 1) && ( (temp8 & 0x0F) != NONE))// This is same port and button type is not none
 8002ed8:	091a      	lsrs	r2, r3, #4
 8002eda:	42aa      	cmp	r2, r5
 8002edc:	d1ef      	bne.n	8002ebe <LoadEEbuttons+0x1e>
 8002ede:	4640      	mov	r0, r8
 8002ee0:	4003      	ands	r3, r0
 8002ee2:	d0ec      	beq.n	8002ebe <LoadEEbuttons+0x1e>
			{
				button[i + 1].type =temp8 & 0x0F;
 8002ee4:	00d0      	lsls	r0, r2, #3
 8002ee6:	1882      	adds	r2, r0, r2
 8002ee8:	4827      	ldr	r0, [pc, #156]	; (8002f88 <LoadEEbuttons+0xe8>)
 8002eea:	4681      	mov	r9, r0
 8002eec:	4491      	add	r9, r2
 8002eee:	464a      	mov	r2, r9
 8002ef0:	7053      	strb	r3, [r2, #1]
				button[i + 1].events =(uint8_t) temp16;
 8002ef2:	7211      	strb	r1, [r2, #8]
 8002ef4:	00af      	lsls	r7, r5, #2
 8002ef6:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8002ef8:	0038      	movs	r0, r7
 8002efa:	30e9      	adds	r0, #233	; 0xe9
 8002efc:	b280      	uxth	r0, r0
 8002efe:	0031      	movs	r1, r6
 8002f00:	f003 fff4 	bl	8006eec <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t) (temp16 >> 8);
 8002f04:	8833      	ldrh	r3, [r6, #0]
 8002f06:	0a1a      	lsrs	r2, r3, #8
 8002f08:	4649      	mov	r1, r9
 8002f0a:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t) temp16;
 8002f0c:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8002f0e:	0038      	movs	r0, r7
 8002f10:	30ea      	adds	r0, #234	; 0xea
 8002f12:	b280      	uxth	r0, r0
 8002f14:	0031      	movs	r1, r6
 8002f16:	f003 ffe9 	bl	8006eec <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t) (temp16 >> 8);
 8002f1a:	8833      	ldrh	r3, [r6, #0]
 8002f1c:	0a1a      	lsrs	r2, r3, #8
 8002f1e:	4649      	mov	r1, r9
 8002f20:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t) temp16;
 8002f22:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8002f24:	37eb      	adds	r7, #235	; 0xeb
 8002f26:	b2b8      	uxth	r0, r7
 8002f28:	0031      	movs	r1, r6
 8002f2a:	f003 ffdf 	bl	8006eec <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t) (temp16 >> 8);
 8002f2e:	8833      	ldrh	r3, [r6, #0]
 8002f30:	0a1a      	lsrs	r2, r3, #8
 8002f32:	4649      	mov	r1, r9
 8002f34:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t) temp16;
 8002f36:	71cb      	strb	r3, [r1, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 8002f38:	b2ef      	uxtb	r7, r5
 8002f3a:	7848      	ldrb	r0, [r1, #1]
 8002f3c:	0039      	movs	r1, r7
 8002f3e:	f004 fceb 	bl	8007918 <AddPortButton>
				SetButtonEvents(i + 1,
				    (button[i + 1].events & BUTTON_EVENT_CLICKED),
 8002f42:	464b      	mov	r3, r9
 8002f44:	7a19      	ldrb	r1, [r3, #8]
				SetButtonEvents(i + 1,
 8002f46:	789b      	ldrb	r3, [r3, #2]
				    ( (button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),
 8002f48:	104a      	asrs	r2, r1, #1
				SetButtonEvents(i + 1,
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	4002      	ands	r2, r0
 8002f4e:	4001      	ands	r1, r0
 8002f50:	2000      	movs	r0, #0
 8002f52:	9005      	str	r0, [sp, #20]
 8002f54:	4648      	mov	r0, r9
 8002f56:	79c0      	ldrb	r0, [r0, #7]
 8002f58:	9004      	str	r0, [sp, #16]
 8002f5a:	4648      	mov	r0, r9
 8002f5c:	7980      	ldrb	r0, [r0, #6]
 8002f5e:	9003      	str	r0, [sp, #12]
 8002f60:	4648      	mov	r0, r9
 8002f62:	7940      	ldrb	r0, [r0, #5]
 8002f64:	9002      	str	r0, [sp, #8]
 8002f66:	4648      	mov	r0, r9
 8002f68:	7900      	ldrb	r0, [r0, #4]
 8002f6a:	9001      	str	r0, [sp, #4]
 8002f6c:	4648      	mov	r0, r9
 8002f6e:	78c0      	ldrb	r0, [r0, #3]
 8002f70:	9000      	str	r0, [sp, #0]
 8002f72:	0038      	movs	r0, r7
 8002f74:	f004 fdea 	bl	8007b4c <SetButtonEvents>
 8002f78:	e7a1      	b.n	8002ebe <LoadEEbuttons+0x1e>
			}
		}
	}
	
	return result;
}
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	b009      	add	sp, #36	; 0x24
 8002f7e:	bc0c      	pop	{r2, r3}
 8002f80:	4690      	mov	r8, r2
 8002f82:	4699      	mov	r9, r3
 8002f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	20001508 	.word	0x20001508

08002f8c <LoadEEvars>:
void LoadEEvars(void){
 8002f8c:	b510      	push	{r4, lr}
	LoadROtopology();
 8002f8e:	f7ff fc11 	bl	80027b4 <LoadROtopology>
	LoadEEportsDir();
 8002f92:	f7ff fcbd 	bl	8002910 <LoadEEportsDir>
	LoadEEalias();
 8002f96:	f7ff fd21 	bl	80029dc <LoadEEalias>
	LoadEEgroup();
 8002f9a:	f7ff fd61 	bl	8002a60 <LoadEEgroup>
	LoadEEstreams();
 8002f9e:	f7ff fdb3 	bl	8002b08 <LoadEEstreams>
	LoadEEparams();
 8002fa2:	f7ff fe9d 	bl	8002ce0 <LoadEEparams>
	LoadEEbuttons();
 8002fa6:	f7ff ff7b 	bl	8002ea0 <LoadEEbuttons>
	LoadROsnippets();
 8002faa:	f7ff fb7d 	bl	80026a8 <LoadROsnippets>
}
 8002fae:	bd10      	pop	{r4, pc}

08002fb0 <IsLowerCLIbaud>:
/*-----------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8002fb4:	2512      	movs	r5, #18
 8002fb6:	446d      	add	r5, sp
 8002fb8:	ab04      	add	r3, sp, #16
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	ab07      	add	r3, sp, #28
 8002fbe:	002a      	movs	r2, r5
 8002fc0:	a908      	add	r1, sp, #32
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	f008 fd56 	bl	800ba74 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8002fc8:	ac03      	add	r4, sp, #12
 8002fca:	9400      	str	r4, [sp, #0]
 8002fcc:	ab05      	add	r3, sp, #20
 8002fce:	220e      	movs	r2, #14
 8002fd0:	446a      	add	r2, sp
 8002fd2:	a906      	add	r1, sp, #24
 8002fd4:	2002      	movs	r0, #2
 8002fd6:	f008 fd4d 	bl	800ba74 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	2600      	movs	r6, #0
 8002fe0:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8002fe2:	882b      	ldrh	r3, [r5, #0]
 8002fe4:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) P1_TX_Port,&GPIO_InitStruct);
 8002fe6:	a909      	add	r1, sp, #36	; 0x24
 8002fe8:	9808      	ldr	r0, [sp, #32]
 8002fea:	f00c fc21 	bl	800f830 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fee:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8002ff4:	8823      	ldrh	r3, [r4, #0]
 8002ff6:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) P2_RX_Port,&GPIO_InitStruct);
 8002ff8:	a909      	add	r1, sp, #36	; 0x24
 8002ffa:	9805      	ldr	r0, [sp, #20]
 8002ffc:	f00c fc18 	bl	800f830 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef*) P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003000:	8829      	ldrh	r1, [r5, #0]
 8003002:	2200      	movs	r2, #0
 8003004:	9808      	ldr	r0, [sp, #32]
 8003006:	f00c fcf9 	bl	800f9fc <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800300a:	2005      	movs	r0, #5
 800300c:	f009 f8d6 	bl	800c1bc <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef*) P2_RX_Port,P2_RX_Pin) == RESET) {
 8003010:	8821      	ldrh	r1, [r4, #0]
 8003012:	9805      	ldr	r0, [sp, #20]
 8003014:	f00c fcec 	bl	800f9f0 <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef*) P2_RX_Port,P2_RX_Pin) == SET) {
			return 1;
		}
	}
	
	return 0;
 8003018:	2300      	movs	r3, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef*) P2_RX_Port,P2_RX_Pin) == RESET) {
 800301a:	2800      	cmp	r0, #0
 800301c:	d002      	beq.n	8003024 <IsLowerCLIbaud+0x74>
}
 800301e:	0018      	movs	r0, r3
 8003020:	b00e      	add	sp, #56	; 0x38
 8003022:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef*) P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003024:	3312      	adds	r3, #18
 8003026:	446b      	add	r3, sp
 8003028:	8819      	ldrh	r1, [r3, #0]
 800302a:	2201      	movs	r2, #1
 800302c:	9808      	ldr	r0, [sp, #32]
 800302e:	f00c fce5 	bl	800f9fc <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003032:	2005      	movs	r0, #5
 8003034:	f009 f8c2 	bl	800c1bc <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef*) P2_RX_Port,P2_RX_Pin) == SET) {
 8003038:	ab03      	add	r3, sp, #12
 800303a:	8819      	ldrh	r1, [r3, #0]
 800303c:	9805      	ldr	r0, [sp, #20]
 800303e:	f00c fcd7 	bl	800f9f0 <HAL_GPIO_ReadPin>
 8003042:	3801      	subs	r0, #1
 8003044:	4243      	negs	r3, r0
 8003046:	4143      	adcs	r3, r0
			return 1;
 8003048:	b2db      	uxtb	r3, r3
 800304a:	e7e8      	b.n	800301e <IsLowerCLIbaud+0x6e>

0800304c <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/

/* --- Format emulated EEPROM for a factory reset
 */
void EE_FormatForFactoryReset(void){
 800304c:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(* ((unsigned long*) 0x20007FF0) == 0xBEEFDEAD) {
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <EE_FormatForFactoryReset+0x1c>)
 8003050:	4a06      	ldr	r2, [pc, #24]	; (800306c <EE_FormatForFactoryReset+0x20>)
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d006      	beq.n	8003066 <EE_FormatForFactoryReset+0x1a>
// Do nothing
	}
	else {
		if(EE_Format() == HAL_OK) {
 8003058:	f004 f820 	bl	800709c <EE_Format>
 800305c:	2800      	cmp	r0, #0
 800305e:	d102      	bne.n	8003066 <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			* ((unsigned long*) 0x20007FF0) =0xBEEFDEAD;
 8003060:	4b02      	ldr	r3, [pc, #8]	; (800306c <EE_FormatForFactoryReset+0x20>)
 8003062:	4a01      	ldr	r2, [pc, #4]	; (8003068 <EE_FormatForFactoryReset+0x1c>)
 8003064:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 8003066:	bd10      	pop	{r4, pc}
 8003068:	beefdead 	.word	0xbeefdead
 800306c:	20007ff0 	.word	0x20007ff0

08003070 <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 8003070:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 8003072:	f009 fa7d 	bl	800c570 <GetUart>
 8003076:	0004      	movs	r4, r0
	
	huart->Init.BaudRate =57600;
 8003078:	23e1      	movs	r3, #225	; 0xe1
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800307e:	2380      	movs	r3, #128	; 0x80
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	015b      	lsls	r3, r3, #5
 8003088:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 800308a:	f00e f8ed 	bl	8011268 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800308e:	6822      	ldr	r2, [r4, #0]
 8003090:	6813      	ldr	r3, [r2, #0]
 8003092:	2120      	movs	r1, #32
 8003094:	430b      	orrs	r3, r1
 8003096:	6013      	str	r3, [r2, #0]
}
 8003098:	bd10      	pop	{r4, pc}
	...

0800309c <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 800309c:	b510      	push	{r4, lr}
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++) {
		if(!strcmp(name,(const char*) (modParam[i].paramName)))
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <IsModuleParameter+0x14>)
 80030a0:	6899      	ldr	r1, [r3, #8]
 80030a2:	f7fd f82f 	bl	8000104 <strcmp>
 80030a6:	4243      	negs	r3, r0
 80030a8:	4158      	adcs	r0, r3
 80030aa:	b2c0      	uxtb	r0, r0
		return i + 1;
	}
	return 0;
}
 80030ac:	bd10      	pop	{r4, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	20000084 	.word	0x20000084

080030b4 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++) {
		if(!strcmp(string,"="))
 80030b8:	491b      	ldr	r1, [pc, #108]	; (8003128 <IsMathOperator+0x74>)
 80030ba:	f7fd f823 	bl	8000104 <strcmp>
 80030be:	0006      	movs	r6, r0
 80030c0:	2506      	movs	r5, #6
 80030c2:	2e00      	cmp	r6, #0
 80030c4:	d023      	beq.n	800310e <IsMathOperator+0x5a>
		return MATH_EQUAL;
		else if(!strcmp(string,">"))
 80030c6:	4919      	ldr	r1, [pc, #100]	; (800312c <IsMathOperator+0x78>)
 80030c8:	0020      	movs	r0, r4
 80030ca:	f7fd f81b 	bl	8000104 <strcmp>
 80030ce:	2800      	cmp	r0, #0
 80030d0:	d01f      	beq.n	8003112 <IsMathOperator+0x5e>
		return MATH_GREATER;
		else if(!strcmp(string,"<"))
 80030d2:	4917      	ldr	r1, [pc, #92]	; (8003130 <IsMathOperator+0x7c>)
 80030d4:	0020      	movs	r0, r4
 80030d6:	f7fd f815 	bl	8000104 <strcmp>
 80030da:	2800      	cmp	r0, #0
 80030dc:	d01b      	beq.n	8003116 <IsMathOperator+0x62>
		return MATH_SMALLER;
		else if(!strcmp(string,">="))
 80030de:	4915      	ldr	r1, [pc, #84]	; (8003134 <IsMathOperator+0x80>)
 80030e0:	0020      	movs	r0, r4
 80030e2:	f7fd f80f 	bl	8000104 <strcmp>
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d017      	beq.n	800311a <IsMathOperator+0x66>
		return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 80030ea:	4913      	ldr	r1, [pc, #76]	; (8003138 <IsMathOperator+0x84>)
 80030ec:	0020      	movs	r0, r4
 80030ee:	f7fd f809 	bl	8000104 <strcmp>
 80030f2:	2800      	cmp	r0, #0
 80030f4:	d013      	beq.n	800311e <IsMathOperator+0x6a>
		return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 80030f6:	4911      	ldr	r1, [pc, #68]	; (800313c <IsMathOperator+0x88>)
 80030f8:	0020      	movs	r0, r4
 80030fa:	f7fd f803 	bl	8000104 <strcmp>
 80030fe:	2800      	cmp	r0, #0
 8003100:	d00f      	beq.n	8003122 <IsMathOperator+0x6e>
 8003102:	3d01      	subs	r5, #1
 8003104:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++) {
 8003106:	2d00      	cmp	r5, #0
 8003108:	d1db      	bne.n	80030c2 <IsMathOperator+0xe>
		return MATH_NOT_EQUAL;
	}
	return 0;
 800310a:	2000      	movs	r0, #0
}
 800310c:	bd70      	pop	{r4, r5, r6, pc}
		return MATH_EQUAL;
 800310e:	2001      	movs	r0, #1
 8003110:	e7fc      	b.n	800310c <IsMathOperator+0x58>
		return MATH_GREATER;
 8003112:	2002      	movs	r0, #2
 8003114:	e7fa      	b.n	800310c <IsMathOperator+0x58>
		return MATH_SMALLER;
 8003116:	2003      	movs	r0, #3
 8003118:	e7f8      	b.n	800310c <IsMathOperator+0x58>
		return MATH_GREATER_EQUAL;
 800311a:	2004      	movs	r0, #4
 800311c:	e7f6      	b.n	800310c <IsMathOperator+0x58>
		return MATH_SMALLER_EQUAL;
 800311e:	2005      	movs	r0, #5
 8003120:	e7f4      	b.n	800310c <IsMathOperator+0x58>
		return MATH_NOT_EQUAL;
 8003122:	2006      	movs	r0, #6
 8003124:	e7f2      	b.n	800310c <IsMathOperator+0x58>
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	08016578 	.word	0x08016578
 800312c:	0801657c 	.word	0x0801657c
 8003130:	08016580 	.word	0x08016580
 8003134:	08016584 	.word	0x08016584
 8003138:	08016588 	.word	0x08016588
 800313c:	0801658c 	.word	0x0801658c

08003140 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore) {
 8003140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003142:	46c6      	mov	lr, r8
 8003144:	b500      	push	{lr}
 8003146:	b082      	sub	sp, #8
 8003148:	0006      	movs	r6, r0
	BOS_Status result = BOS_OK;

	/* Send Hi messages to adjacent neighbors */
	for (uint8_t port = 1; port <= NumOfPorts; port++) {
 800314a:	2401      	movs	r4, #1
		if (port != ignore) {
			/* This module info */
			messageParams[0] = (uint8_t) (myPN >> 8);
 800314c:	4b0f      	ldr	r3, [pc, #60]	; (800318c <ExploreNeighbors+0x4c>)
 800314e:	4698      	mov	r8, r3
 8003150:	4d0f      	ldr	r5, [pc, #60]	; (8003190 <ExploreNeighbors+0x50>)
			messageParams[1] = (uint8_t) myPN;
			messageParams[2] = port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 8003152:	2703      	movs	r7, #3
		if (port != ignore) {
 8003154:	42a6      	cmp	r6, r4
 8003156:	d00f      	beq.n	8003178 <ExploreNeighbors+0x38>
			messageParams[0] = (uint8_t) (myPN >> 8);
 8003158:	4643      	mov	r3, r8
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	0a1a      	lsrs	r2, r3, #8
 800315e:	702a      	strb	r2, [r5, #0]
			messageParams[1] = (uint8_t) myPN;
 8003160:	706b      	strb	r3, [r5, #1]
			messageParams[2] = port;
 8003162:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 8003164:	9700      	str	r7, [sp, #0]
 8003166:	230a      	movs	r3, #10
 8003168:	2200      	movs	r2, #0
 800316a:	2100      	movs	r1, #0
 800316c:	0020      	movs	r0, r4
 800316e:	f005 f99d 	bl	80084ac <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003172:	200a      	movs	r0, #10
 8003174:	f009 fb4b 	bl	800c80e <osDelay>
	for (uint8_t port = 1; port <= NumOfPorts; port++) {
 8003178:	3401      	adds	r4, #1
 800317a:	b2e4      	uxtb	r4, r4
 800317c:	2c07      	cmp	r4, #7
 800317e:	d1e9      	bne.n	8003154 <ExploreNeighbors+0x14>
		}
	}

	return result;
}
 8003180:	2000      	movs	r0, #0
 8003182:	b002      	add	sp, #8
 8003184:	bc04      	pop	{r2}
 8003186:	4690      	mov	r8, r2
 8003188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	20000050 	.word	0x20000050
 8003190:	20000f38 	.word	0x20000f38

08003194 <FindBroadcastRoutes>:
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module 
 (Takes about 50 usec)
 */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003196:	46de      	mov	lr, fp
 8003198:	4657      	mov	r7, sl
 800319a:	464e      	mov	r6, r9
 800319c:	4645      	mov	r5, r8
 800319e:	b5e0      	push	{r5, r6, r7, lr}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];// Todo: Optimize to make bit-wise
 80031a4:	4b47      	ldr	r3, [pc, #284]	; (80032c4 <FindBroadcastRoutes+0x130>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	469c      	mov	ip, r3
 80031aa:	3307      	adds	r3, #7
 80031ac:	08db      	lsrs	r3, r3, #3
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	466a      	mov	r2, sp
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	469d      	mov	sp, r3
 80031b6:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++) {
 80031b8:	4663      	mov	r3, ip
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00d      	beq.n	80031da <FindBroadcastRoutes+0x46>
 80031be:	0023      	movs	r3, r4
 80031c0:	4a41      	ldr	r2, [pc, #260]	; (80032c8 <FindBroadcastRoutes+0x134>)
 80031c2:	4661      	mov	r1, ip
 80031c4:	1e4d      	subs	r5, r1, #1
 80031c6:	b2ed      	uxtb	r5, r5
 80031c8:	3501      	adds	r5, #1
 80031ca:	192d      	adds	r5, r5, r4
		modules[m] =0;
 80031cc:	2100      	movs	r1, #0
 80031ce:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] =0;
 80031d0:	8011      	strh	r1, [r2, #0]
 80031d2:	3301      	adds	r3, #1
 80031d4:	3202      	adds	r2, #2
	for(m =0; m < N; m++) {
 80031d6:	42ab      	cmp	r3, r5
 80031d8:	d1f9      	bne.n	80031ce <FindBroadcastRoutes+0x3a>
	}
	modules[src - 1] =++level;// Tag the source
 80031da:	3801      	subs	r0, #1
 80031dc:	2301      	movs	r3, #1
 80031de:	5423      	strb	r3, [r4, r0]
 80031e0:	2216      	movs	r2, #22
 80031e2:	4342      	muls	r2, r0
 80031e4:	3202      	adds	r2, #2
 80031e6:	4b39      	ldr	r3, [pc, #228]	; (80032cc <FindBroadcastRoutes+0x138>)
 80031e8:	18d2      	adds	r2, r2, r3
 80031ea:	2100      	movs	r1, #0

	++level;// Move one level
	
	for(p =1; p <= NumOfPorts; p++) {
		if(array[src - 1][p]) {
			bcastRoutes[src - 1] |= (0x01 << (p - 1));
 80031ec:	4d36      	ldr	r5, [pc, #216]	; (80032c8 <FindBroadcastRoutes+0x134>)
 80031ee:	0040      	lsls	r0, r0, #1
 80031f0:	2301      	movs	r3, #1
 80031f2:	4698      	mov	r8, r3
			modules[ (array[src - 1][p] >> 3) - 1] =level;// Tag this module as already broadcasted-to
 80031f4:	46a3      	mov	fp, r4
 80031f6:	e003      	b.n	8003200 <FindBroadcastRoutes+0x6c>
 80031f8:	3101      	adds	r1, #1
 80031fa:	3202      	adds	r2, #2
	for(p =1; p <= NumOfPorts; p++) {
 80031fc:	2906      	cmp	r1, #6
 80031fe:	d011      	beq.n	8003224 <FindBroadcastRoutes+0x90>
		if(array[src - 1][p]) {
 8003200:	8813      	ldrh	r3, [r2, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f8      	beq.n	80031f8 <FindBroadcastRoutes+0x64>
			bcastRoutes[src - 1] |= (0x01 << (p - 1));
 8003206:	5b46      	ldrh	r6, [r0, r5]
 8003208:	46b1      	mov	r9, r6
 800320a:	4646      	mov	r6, r8
 800320c:	408e      	lsls	r6, r1
 800320e:	46b2      	mov	sl, r6
 8003210:	464e      	mov	r6, r9
 8003212:	4654      	mov	r4, sl
 8003214:	4326      	orrs	r6, r4
 8003216:	5346      	strh	r6, [r0, r5]
			modules[ (array[src - 1][p] >> 3) - 1] =level;// Tag this module as already broadcasted-to
 8003218:	08db      	lsrs	r3, r3, #3
 800321a:	445b      	add	r3, fp
 800321c:	3b01      	subs	r3, #1
 800321e:	2402      	movs	r4, #2
 8003220:	701c      	strb	r4, [r3, #0]
 8003222:	e7e9      	b.n	80031f8 <FindBroadcastRoutes+0x64>
 8003224:	465c      	mov	r4, fp
	++level;// Move one level
 8003226:	2602      	movs	r6, #2
 8003228:	4b28      	ldr	r3, [pc, #160]	; (80032cc <FindBroadcastRoutes+0x138>)
 800322a:	3302      	adds	r3, #2
 800322c:	607b      	str	r3, [r7, #4]
			{
				for(p =1; p <= NumOfPorts; p++)// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[ (array[m][p] >> 3) - 1] == 0))// Found an untaged module
					{
						bcastRoutes[m] |= (0x01 << (p - 1));
 800322e:	2301      	movs	r3, #1
 8003230:	469b      	mov	fp, r3
 8003232:	46b0      	mov	r8, r6
 8003234:	0026      	movs	r6, r4
		++level;// Move one level
 8003236:	4643      	mov	r3, r8
 8003238:	3301      	adds	r3, #1
 800323a:	b2db      	uxtb	r3, r3
 800323c:	4698      	mov	r8, r3
		for(m =0; m < N; m++)// Scan all modules in the list
 800323e:	4663      	mov	r3, ip
 8003240:	2b00      	cmp	r3, #0
 8003242:	d035      	beq.n	80032b0 <FindBroadcastRoutes+0x11c>
 8003244:	2200      	movs	r2, #0
		untaged =0;// Reset the untaged counter
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
			if(modules[m] == (level - 1))// This module is already broadcasted-to from the previous level
 800324a:	3b01      	subs	r3, #1
 800324c:	4443      	add	r3, r8
 800324e:	4699      	mov	r9, r3
 8003250:	e01e      	b.n	8003290 <FindBroadcastRoutes+0xfc>
 8003252:	3001      	adds	r0, #1
 8003254:	3102      	adds	r1, #2
				for(p =1; p <= NumOfPorts; p++)// Check all neighbors if they're not already broadcasted-to
 8003256:	2806      	cmp	r0, #6
 8003258:	d015      	beq.n	8003286 <FindBroadcastRoutes+0xf2>
					if(array[m][p] && (modules[ (array[m][p] >> 3) - 1] == 0))// Found an untaged module
 800325a:	880b      	ldrh	r3, [r1, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f8      	beq.n	8003252 <FindBroadcastRoutes+0xbe>
 8003260:	08db      	lsrs	r3, r3, #3
 8003262:	3b01      	subs	r3, #1
 8003264:	5cf5      	ldrb	r5, [r6, r3]
 8003266:	2d00      	cmp	r5, #0
 8003268:	d1f3      	bne.n	8003252 <FindBroadcastRoutes+0xbe>
						bcastRoutes[m] |= (0x01 << (p - 1));
 800326a:	4a17      	ldr	r2, [pc, #92]	; (80032c8 <FindBroadcastRoutes+0x134>)
 800326c:	5aa5      	ldrh	r5, [r4, r2]
 800326e:	465a      	mov	r2, fp
 8003270:	4082      	lsls	r2, r0
 8003272:	4315      	orrs	r5, r2
 8003274:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <FindBroadcastRoutes+0x134>)
 8003276:	52a5      	strh	r5, [r4, r2]
						modules[ (array[m][p] >> 3) - 1] =level;// Tag this module as already broadcasted-to
 8003278:	4642      	mov	r2, r8
 800327a:	54f2      	strb	r2, [r6, r3]
						++untaged;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3301      	adds	r3, #1
 8003280:	b2db      	uxtb	r3, r3
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	e7e5      	b.n	8003252 <FindBroadcastRoutes+0xbe>
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	3201      	adds	r2, #1
		for(m =0; m < N; m++)// Scan all modules in the list
 800328a:	b2d3      	uxtb	r3, r2
 800328c:	4563      	cmp	r3, ip
 800328e:	d20c      	bcs.n	80032aa <FindBroadcastRoutes+0x116>
			if(modules[m] == (level - 1))// This module is already broadcasted-to from the previous level
 8003290:	5cb3      	ldrb	r3, [r6, r2]
 8003292:	454b      	cmp	r3, r9
 8003294:	d1f8      	bne.n	8003288 <FindBroadcastRoutes+0xf4>
 8003296:	2116      	movs	r1, #22
 8003298:	4351      	muls	r1, r2
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	469a      	mov	sl, r3
 800329e:	4451      	add	r1, sl
 80032a0:	0053      	lsls	r3, r2, #1
 80032a2:	2000      	movs	r0, #0
 80032a4:	60ba      	str	r2, [r7, #8]
 80032a6:	001c      	movs	r4, r3
 80032a8:	e7d7      	b.n	800325a <FindBroadcastRoutes+0xc6>
					}
				}
			}
		}
	} while(untaged);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1c2      	bne.n	8003236 <FindBroadcastRoutes+0xa2>
	
	return result;
}
 80032b0:	2000      	movs	r0, #0
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b005      	add	sp, #20
 80032b6:	bc3c      	pop	{r2, r3, r4, r5}
 80032b8:	4690      	mov	r8, r2
 80032ba:	4699      	mov	r9, r3
 80032bc:	46a2      	mov	sl, r4
 80032be:	46ab      	mov	fp, r5
 80032c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	2000001c 	.word	0x2000001c
 80032c8:	20000cb8 	.word	0x20000cb8
 80032cc:	20000a78 	.word	0x20000a78

080032d0 <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID, uint8_t desID){
 80032d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d2:	46de      	mov	lr, fp
 80032d4:	4657      	mov	r7, sl
 80032d6:	464e      	mov	r6, r9
 80032d8:	4645      	mov	r5, r8
 80032da:	b5e0      	push	{r5, r6, r7, lr}
 80032dc:	b08f      	sub	sp, #60	; 0x3c
 80032de:	0005      	movs	r5, r0
 80032e0:	468a      	mov	sl, r1
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] ={0};// All nodes initially in Q (unvisited nodes)
 80032e2:	2232      	movs	r2, #50	; 0x32
 80032e4:	2100      	movs	r1, #0
 80032e6:	a801      	add	r0, sp, #4
 80032e8:	f00e fbbe 	bl	8011a68 <memset>
	uint8_t alt =0;
	uint8_t u =0;
	uint8_t v =0;
	uint8_t j =0;
	
	memset(route,0,sizeof (route));
 80032ec:	221a      	movs	r2, #26
 80032ee:	2100      	movs	r1, #0
 80032f0:	485a      	ldr	r0, [pc, #360]	; (800345c <FindRoute+0x18c>)
 80032f2:	f00e fbb9 	bl	8011a68 <memset>
	routeDist[sourceID - 1] =0;// Distance from source to source
 80032f6:	0029      	movs	r1, r5
 80032f8:	1e68      	subs	r0, r5, #1
 80032fa:	2300      	movs	r3, #0
 80032fc:	4a58      	ldr	r2, [pc, #352]	; (8003460 <FindRoute+0x190>)
 80032fe:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID - 1] =0;// Previous node in optimal path initialization undefined
 8003300:	4a58      	ldr	r2, [pc, #352]	; (8003464 <FindRoute+0x194>)
 8003302:	5413      	strb	r3, [r2, r0]
 8003304:	2516      	movs	r5, #22
 8003306:	4345      	muls	r5, r0
 8003308:	3502      	adds	r5, #2
 800330a:	4b57      	ldr	r3, [pc, #348]	; (8003468 <FindRoute+0x198>)
 800330c:	18ed      	adds	r5, r5, r3
 800330e:	002a      	movs	r2, r5
	
	/* Check adjacent neighbors first! */
	for(int col =1; col <= 6; col++) {
 8003310:	2001      	movs	r0, #1
		if(array[sourceID - 1][col]
		    && ( (array[sourceID - 1][col] >> 3) == desID)) {
 8003312:	4653      	mov	r3, sl
 8003314:	b29c      	uxth	r4, r3
 8003316:	e003      	b.n	8003320 <FindRoute+0x50>
	for(int col =1; col <= 6; col++) {
 8003318:	3001      	adds	r0, #1
 800331a:	3202      	adds	r2, #2
 800331c:	2807      	cmp	r0, #7
 800331e:	d00f      	beq.n	8003340 <FindRoute+0x70>
		if(array[sourceID - 1][col]
 8003320:	8813      	ldrh	r3, [r2, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f8      	beq.n	8003318 <FindRoute+0x48>
		    && ( (array[sourceID - 1][col] >> 3) == desID)) {
 8003326:	08db      	lsrs	r3, r3, #3
 8003328:	42a3      	cmp	r3, r4
 800332a:	d1f5      	bne.n	8003318 <FindRoute+0x48>
			routeDist[desID - 1] =1;
 800332c:	4b4c      	ldr	r3, [pc, #304]	; (8003460 <FindRoute+0x190>)
 800332e:	4453      	add	r3, sl
 8003330:	3b01      	subs	r3, #1
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
			route[0] =desID;
 8003336:	4b49      	ldr	r3, [pc, #292]	; (800345c <FindRoute+0x18c>)
 8003338:	4652      	mov	r2, sl
 800333a:	701a      	strb	r2, [r3, #0]
			return col;
 800333c:	b2c0      	uxtb	r0, r0
 800333e:	e085      	b.n	800344c <FindRoute+0x17c>
		}
	}
	
	/* Initialization */
	for(int i =1; i <= N; i++) {
 8003340:	4b4a      	ldr	r3, [pc, #296]	; (800346c <FindRoute+0x19c>)
 8003342:	781e      	ldrb	r6, [r3, #0]
 8003344:	2e00      	cmp	r6, #0
 8003346:	dd11      	ble.n	800336c <FindRoute+0x9c>
 8003348:	2301      	movs	r3, #1
		if(i != sourceID)// Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i - 1] =0xFF;// Unknown distance function from source to i
 800334a:	24ff      	movs	r4, #255	; 0xff
			routePrev[i - 1] =0;// Previous node in optimal path from source
 800334c:	4f45      	ldr	r7, [pc, #276]	; (8003464 <FindRoute+0x194>)
 800334e:	2000      	movs	r0, #0
 8003350:	46ac      	mov	ip, r5
 8003352:	e002      	b.n	800335a <FindRoute+0x8a>
	for(int i =1; i <= N; i++) {
 8003354:	3301      	adds	r3, #1
 8003356:	42b3      	cmp	r3, r6
 8003358:	dc07      	bgt.n	800336a <FindRoute+0x9a>
		if(i != sourceID)// Where i has not yet been removed from Q (unvisited nodes)
 800335a:	4299      	cmp	r1, r3
 800335c:	d0fa      	beq.n	8003354 <FindRoute+0x84>
			routeDist[i - 1] =0xFF;// Unknown distance function from source to i
 800335e:	1e5a      	subs	r2, r3, #1
 8003360:	4d3f      	ldr	r5, [pc, #252]	; (8003460 <FindRoute+0x190>)
 8003362:	54ac      	strb	r4, [r5, r2]
			routePrev[i - 1] =0;// Previous node in optimal path from source
 8003364:	18ba      	adds	r2, r7, r2
 8003366:	7010      	strb	r0, [r2, #0]
 8003368:	e7f4      	b.n	8003354 <FindRoute+0x84>
 800336a:	4665      	mov	r5, ip
	uint8_t u =0;
 800336c:	2400      	movs	r4, #0
 800336e:	4b3e      	ldr	r3, [pc, #248]	; (8003468 <FindRoute+0x198>)
 8003370:	4698      	mov	r8, r3
 8003372:	230e      	movs	r3, #14
 8003374:	4443      	add	r3, r8
 8003376:	4656      	mov	r6, sl
 8003378:	469b      	mov	fp, r3
 800337a:	46a9      	mov	r9, r5
 800337c:	e01d      	b.n	80033ba <FindRoute+0xea>
 800337e:	464d      	mov	r5, r9
 8003380:	46b2      	mov	sl, r6
		}
	}
	
	/* Algorithm */
	while(!QnotEmpty(Q)) {
		u =minArr(routeDist,Q) + 1;// Source node in first case
 8003382:	0034      	movs	r4, r6
 8003384:	e034      	b.n	80033f0 <FindRoute+0x120>
 8003386:	3102      	adds	r1, #2
		}
		else
		Q[u - 1] =1;// Remove u from Q
		
		/* For each neighbor v where v is still in Q. */
		for(uint8_t n =1; n <= 6; n++)// Check all module ports
 8003388:	4281      	cmp	r1, r0
 800338a:	d015      	beq.n	80033b8 <FindRoute+0xe8>
		    {
			if(array[u - 1][n])// There's a neighbor v at this port n
 800338c:	880b      	ldrh	r3, [r1, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f9      	beq.n	8003386 <FindRoute+0xb6>
			{
				v = (array[u - 1][n] >> 3);
 8003392:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])// v is still in Q
 8003394:	b2db      	uxtb	r3, r3
 8003396:	3b01      	subs	r3, #1
 8003398:	5cd7      	ldrb	r7, [r2, r3]
 800339a:	2f00      	cmp	r7, #0
 800339c:	d1f3      	bne.n	8003386 <FindRoute+0xb6>
				{
					alt =routeDist[u - 1] + 1;// Add one hop
 800339e:	4f30      	ldr	r7, [pc, #192]	; (8003460 <FindRoute+0x190>)
 80033a0:	5d7f      	ldrb	r7, [r7, r5]
 80033a2:	3701      	adds	r7, #1
 80033a4:	b2ff      	uxtb	r7, r7
					if(alt < routeDist[v - 1])// A shorter path to v has been found
 80033a6:	4e2e      	ldr	r6, [pc, #184]	; (8003460 <FindRoute+0x190>)
 80033a8:	5cf6      	ldrb	r6, [r6, r3]
 80033aa:	42be      	cmp	r6, r7
 80033ac:	d9eb      	bls.n	8003386 <FindRoute+0xb6>
					{
						routeDist[v - 1] =alt;
 80033ae:	4e2c      	ldr	r6, [pc, #176]	; (8003460 <FindRoute+0x190>)
 80033b0:	54f7      	strb	r7, [r6, r3]
						routePrev[v - 1] =u;
 80033b2:	4e2c      	ldr	r6, [pc, #176]	; (8003464 <FindRoute+0x194>)
 80033b4:	54f4      	strb	r4, [r6, r3]
 80033b6:	e7e6      	b.n	8003386 <FindRoute+0xb6>
 80033b8:	4656      	mov	r6, sl
	while(!QnotEmpty(Q)) {
 80033ba:	a801      	add	r0, sp, #4
 80033bc:	f7ff f962 	bl	8002684 <QnotEmpty>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	d113      	bne.n	80033ec <FindRoute+0x11c>
		u =minArr(routeDist,Q) + 1;// Source node in first case
 80033c4:	a901      	add	r1, sp, #4
 80033c6:	4826      	ldr	r0, [pc, #152]	; (8003460 <FindRoute+0x190>)
 80033c8:	f7ff f93e 	bl	8002648 <minArr>
 80033cc:	3001      	adds	r0, #1
 80033ce:	b2c4      	uxtb	r4, r0
		if(u == desID) {
 80033d0:	42b4      	cmp	r4, r6
 80033d2:	d0d4      	beq.n	800337e <FindRoute+0xae>
		Q[u - 1] =1;// Remove u from Q
 80033d4:	1e65      	subs	r5, r4, #1
 80033d6:	ab01      	add	r3, sp, #4
 80033d8:	2201      	movs	r2, #1
 80033da:	555a      	strb	r2, [r3, r5]
 80033dc:	2016      	movs	r0, #22
 80033de:	4368      	muls	r0, r5
 80033e0:	1c81      	adds	r1, r0, #2
 80033e2:	4441      	add	r1, r8
 80033e4:	4458      	add	r0, fp
				if(!Q[v - 1])// v is still in Q
 80033e6:	001a      	movs	r2, r3
 80033e8:	46b2      	mov	sl, r6
 80033ea:	e7cf      	b.n	800338c <FindRoute+0xbc>
 80033ec:	464d      	mov	r5, r9
 80033ee:	46b2      	mov	sl, r6
	}
	
finishedRoute:
	
	/* Build the virtual route */
	while(routePrev[u - 1])// Construct the shortest path with a stack route
 80033f0:	4b1c      	ldr	r3, [pc, #112]	; (8003464 <FindRoute+0x194>)
 80033f2:	191b      	adds	r3, r3, r4
 80033f4:	3b01      	subs	r3, #1
 80033f6:	781a      	ldrb	r2, [r3, #0]
 80033f8:	2300      	movs	r3, #0
 80033fa:	2a00      	cmp	r2, #0
 80033fc:	d00e      	beq.n	800341c <FindRoute+0x14c>
	{
		route[j++] =u;// Push the vertex onto the stack
 80033fe:	4917      	ldr	r1, [pc, #92]	; (800345c <FindRoute+0x18c>)
 8003400:	468c      	mov	ip, r1
	while(routePrev[u - 1])// Construct the shortest path with a stack route
 8003402:	4e18      	ldr	r6, [pc, #96]	; (8003464 <FindRoute+0x194>)
 8003404:	e000      	b.n	8003408 <FindRoute+0x138>
 8003406:	000a      	movs	r2, r1
		route[j++] =u;// Push the vertex onto the stack
 8003408:	1c58      	adds	r0, r3, #1
 800340a:	4661      	mov	r1, ip
 800340c:	54cc      	strb	r4, [r1, r3]
	while(routePrev[u - 1])// Construct the shortest path with a stack route
 800340e:	18b3      	adds	r3, r6, r2
 8003410:	3b01      	subs	r3, #1
 8003412:	7819      	ldrb	r1, [r3, #0]
 8003414:	0014      	movs	r4, r2
		route[j++] =u;// Push the vertex onto the stack
 8003416:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])// Construct the shortest path with a stack route
 8003418:	2900      	cmp	r1, #0
 800341a:	d1f4      	bne.n	8003406 <FindRoute+0x136>
		u =routePrev[u - 1];// Traverse from target to source
	}
	
	/* Check which port leads to the correct module */
	for(int col =1; col <= 6; col++) {
 800341c:	2001      	movs	r0, #1
		if(array[sourceID - 1][col]
		    && ( (array[sourceID - 1][col] >> 3)
		        == route[routeDist[desID - 1] - 1])) {
 800341e:	490f      	ldr	r1, [pc, #60]	; (800345c <FindRoute+0x18c>)
 8003420:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <FindRoute+0x190>)
 8003422:	4453      	add	r3, sl
 8003424:	001f      	movs	r7, r3
 8003426:	3f01      	subs	r7, #1
 8003428:	e003      	b.n	8003432 <FindRoute+0x162>
	for(int col =1; col <= 6; col++) {
 800342a:	3001      	adds	r0, #1
 800342c:	3502      	adds	r5, #2
 800342e:	2807      	cmp	r0, #7
 8003430:	d00b      	beq.n	800344a <FindRoute+0x17a>
		if(array[sourceID - 1][col]
 8003432:	882b      	ldrh	r3, [r5, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f8      	beq.n	800342a <FindRoute+0x15a>
		        == route[routeDist[desID - 1] - 1])) {
 8003438:	783a      	ldrb	r2, [r7, #0]
 800343a:	188a      	adds	r2, r1, r2
 800343c:	3a01      	subs	r2, #1
		    && ( (array[sourceID - 1][col] >> 3)
 800343e:	7812      	ldrb	r2, [r2, #0]
 8003440:	08db      	lsrs	r3, r3, #3
 8003442:	429a      	cmp	r2, r3
 8003444:	d1f1      	bne.n	800342a <FindRoute+0x15a>
			return col;
 8003446:	b2c0      	uxtb	r0, r0
 8003448:	e000      	b.n	800344c <FindRoute+0x17c>
		}
	}
	
	return 0;
 800344a:	2000      	movs	r0, #0
}
 800344c:	b00f      	add	sp, #60	; 0x3c
 800344e:	bc3c      	pop	{r2, r3, r4, r5}
 8003450:	4690      	mov	r8, r2
 8003452:	4699      	mov	r9, r3
 8003454:	46a2      	mov	sl, r4
 8003456:	46ab      	mov	fp, r5
 8003458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	20006a40 	.word	0x20006a40
 8003460:	20001114 	.word	0x20001114
 8003464:	20001130 	.word	0x20001130
 8003468:	20000a78 	.word	0x20000a78
 800346c:	2000001c 	.word	0x2000001c

08003470 <remoteBootloaderUpdate>:
    uint8_t outport){
 8003470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003472:	b087      	sub	sp, #28
 8003474:	0007      	movs	r7, r0
 8003476:	000e      	movs	r6, r1
 8003478:	9205      	str	r2, [sp, #20]
 800347a:	001d      	movs	r5, r3
	myOutport =FindRoute(myID,dst);
 800347c:	4b37      	ldr	r3, [pc, #220]	; (800355c <remoteBootloaderUpdate+0xec>)
 800347e:	7818      	ldrb	r0, [r3, #0]
 8003480:	f7ff ff26 	bl	80032d0 <FindRoute>
 8003484:	9004      	str	r0, [sp, #16]
	if(outport && dst == myID) { /* This is a 'via port' update and I'm the last module */
 8003486:	2d00      	cmp	r5, #0
 8003488:	d020      	beq.n	80034cc <remoteBootloaderUpdate+0x5c>
 800348a:	4b34      	ldr	r3, [pc, #208]	; (800355c <remoteBootloaderUpdate+0xec>)
 800348c:	781c      	ldrb	r4, [r3, #0]
 800348e:	42b4      	cmp	r4, r6
 8003490:	d05f      	beq.n	8003552 <remoteBootloaderUpdate+0xe2>
	if(src == myID) {
 8003492:	42bc      	cmp	r4, r7
 8003494:	d034      	beq.n	8003500 <remoteBootloaderUpdate+0x90>
	uint8_t myOutport =0, lastModule =0;
 8003496:	2400      	movs	r4, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8003498:	9805      	ldr	r0, [sp, #20]
 800349a:	f7ff fde9 	bl	8003070 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 800349e:	9804      	ldr	r0, [sp, #16]
 80034a0:	f7ff fde6 	bl	8003070 <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID) {
 80034a4:	4b2d      	ldr	r3, [pc, #180]	; (800355c <remoteBootloaderUpdate+0xec>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	42a3      	cmp	r3, r4
 80034aa:	d046      	beq.n	800353a <remoteBootloaderUpdate+0xca>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,
 80034ac:	4b2b      	ldr	r3, [pc, #172]	; (800355c <remoteBootloaderUpdate+0xec>)
 80034ae:	7819      	ldrb	r1, [r3, #0]
 80034b0:	2300      	movs	r3, #0
 80034b2:	9303      	str	r3, [sp, #12]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	9302      	str	r3, [sp, #8]
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	3303      	adds	r3, #3
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	000b      	movs	r3, r1
 80034c0:	9a04      	ldr	r2, [sp, #16]
 80034c2:	9805      	ldr	r0, [sp, #20]
 80034c4:	f005 fa40 	bl	8008948 <StartScastDMAStream>
}
 80034c8:	b007      	add	sp, #28
 80034ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(NumberOfHops(dst)== 1)
 80034cc:	4b24      	ldr	r3, [pc, #144]	; (8003560 <remoteBootloaderUpdate+0xf0>)
 80034ce:	199b      	adds	r3, r3, r6
 80034d0:	3b01      	subs	r3, #1
 80034d2:	781a      	ldrb	r2, [r3, #0]
 80034d4:	2a01      	cmp	r2, #1
 80034d6:	d010      	beq.n	80034fa <remoteBootloaderUpdate+0x8a>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 80034d8:	4b22      	ldr	r3, [pc, #136]	; (8003564 <remoteBootloaderUpdate+0xf4>)
 80034da:	189b      	adds	r3, r3, r2
 80034dc:	3b01      	subs	r3, #1
 80034de:	781c      	ldrb	r4, [r3, #0]
	if(src == myID) {
 80034e0:	4b1e      	ldr	r3, [pc, #120]	; (800355c <remoteBootloaderUpdate+0xec>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	42bb      	cmp	r3, r7
 80034e6:	d1d7      	bne.n	8003498 <remoteBootloaderUpdate+0x28>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80034e8:	f009 faa6 	bl	800ca38 <FreeRTOS_CLIGetOutputBuffer>
 80034ec:	0007      	movs	r7, r0
		sprintf((char*) pcOutputString,pcRemoteBootloaderUpdateMessage,
 80034ee:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <remoteBootloaderUpdate+0xf8>)
 80034f0:	6819      	ldr	r1, [r3, #0]
 80034f2:	0032      	movs	r2, r6
 80034f4:	f00e fcb2 	bl	8011e5c <sprintf>
 80034f8:	e00d      	b.n	8003516 <remoteBootloaderUpdate+0xa6>
		lastModule = myID;
 80034fa:	4b18      	ldr	r3, [pc, #96]	; (800355c <remoteBootloaderUpdate+0xec>)
 80034fc:	781c      	ldrb	r4, [r3, #0]
 80034fe:	e7ef      	b.n	80034e0 <remoteBootloaderUpdate+0x70>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003500:	f009 fa9a 	bl	800ca38 <FreeRTOS_CLIGetOutputBuffer>
 8003504:	0007      	movs	r7, r0
	uint8_t myOutport =0, lastModule =0;
 8003506:	2400      	movs	r4, #0
		sprintf((char*) pcOutputString,
 8003508:	4b18      	ldr	r3, [pc, #96]	; (800356c <remoteBootloaderUpdate+0xfc>)
 800350a:	6819      	ldr	r1, [r3, #0]
 800350c:	002b      	movs	r3, r5
 800350e:	0032      	movs	r2, r6
 8003510:	0038      	movs	r0, r7
 8003512:	f00e fca3 	bl	8011e5c <sprintf>
		strcat((char*) pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8003516:	4b16      	ldr	r3, [pc, #88]	; (8003570 <remoteBootloaderUpdate+0x100>)
 8003518:	6819      	ldr	r1, [r3, #0]
 800351a:	0038      	movs	r0, r7
 800351c:	f00e fcbe 	bl	8011e9c <strcat>
		    strlen((char*) pcOutputString),cmd50ms);
 8003520:	0038      	movs	r0, r7
 8003522:	f7fc fdf9 	bl	8000118 <strlen>
		writePxITMutex(inport,(char*) pcOutputString,
 8003526:	b282      	uxth	r2, r0
 8003528:	2332      	movs	r3, #50	; 0x32
 800352a:	0039      	movs	r1, r7
 800352c:	9805      	ldr	r0, [sp, #20]
 800352e:	f009 f869 	bl	800c604 <writePxITMutex>
		Delay_ms(100);
 8003532:	2064      	movs	r0, #100	; 0x64
 8003534:	f00b f996 	bl	800e864 <HAL_Delay>
 8003538:	e7ae      	b.n	8003498 <remoteBootloaderUpdate+0x28>
		SwapUartPins(GetUart(myOutport),REVERSED);
 800353a:	9804      	ldr	r0, [sp, #16]
 800353c:	f009 f818 	bl	800c570 <GetUart>
 8003540:	2101      	movs	r1, #1
 8003542:	f009 f8af 	bl	800c6a4 <SwapUartPins>
 8003546:	e7b1      	b.n	80034ac <remoteBootloaderUpdate+0x3c>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003548:	f009 fa76 	bl	800ca38 <FreeRTOS_CLIGetOutputBuffer>
 800354c:	0007      	movs	r7, r0
		myOutport =outport;
 800354e:	9504      	str	r5, [sp, #16]
 8003550:	e7da      	b.n	8003508 <remoteBootloaderUpdate+0x98>
	if(src == myID) {
 8003552:	42bc      	cmp	r4, r7
 8003554:	d0f8      	beq.n	8003548 <remoteBootloaderUpdate+0xd8>
		myOutport =outport;
 8003556:	9504      	str	r5, [sp, #16]
 8003558:	e79e      	b.n	8003498 <remoteBootloaderUpdate+0x28>
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	20001076 	.word	0x20001076
 8003560:	20001114 	.word	0x20001114
 8003564:	20006a40 	.word	0x20006a40
 8003568:	20000078 	.word	0x20000078
 800356c:	2000007c 	.word	0x2000007c
 8003570:	20000080 	.word	0x20000080

08003574 <DisplayTopology>:

/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003576:	46d6      	mov	lr, sl
 8003578:	464f      	mov	r7, r9
 800357a:	4646      	mov	r6, r8
 800357c:	b5c0      	push	{r6, r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	0005      	movs	r5, r0
 8003582:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003584:	4c56      	ldr	r4, [pc, #344]	; (80036e0 <DisplayTopology+0x16c>)
 8003586:	4b57      	ldr	r3, [pc, #348]	; (80036e4 <DisplayTopology+0x170>)
 8003588:	0022      	movs	r2, r4
 800358a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800358c:	c243      	stmia	r2!, {r0, r1, r6}
 800358e:	6819      	ldr	r1, [r3, #0]
 8003590:	6011      	str	r1, [r2, #0]
 8003592:	889b      	ldrh	r3, [r3, #4]
 8003594:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003596:	0020      	movs	r0, r4
 8003598:	f7fc fdbe 	bl	8000118 <strlen>
 800359c:	b282      	uxth	r2, r0
 800359e:	2301      	movs	r3, #1
 80035a0:	425b      	negs	r3, r3
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	3333      	adds	r3, #51	; 0x33
 80035a6:	0021      	movs	r1, r4
 80035a8:	0028      	movs	r0, r5
 80035aa:	f009 f803 	bl	800c5b4 <writePxMutex>
 80035ae:	2401      	movs	r4, #1
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++) {
		sprintf(pcUserMessage,"P%d\t",i);
 80035b0:	4f4d      	ldr	r7, [pc, #308]	; (80036e8 <DisplayTopology+0x174>)
 80035b2:	4d4b      	ldr	r5, [pc, #300]	; (80036e0 <DisplayTopology+0x16c>)
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80035b4:	2601      	movs	r6, #1
 80035b6:	4276      	negs	r6, r6
		sprintf(pcUserMessage,"P%d\t",i);
 80035b8:	0022      	movs	r2, r4
 80035ba:	0039      	movs	r1, r7
 80035bc:	0028      	movs	r0, r5
 80035be:	f00e fc4d 	bl	8011e5c <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80035c2:	0028      	movs	r0, r5
 80035c4:	f7fc fda8 	bl	8000118 <strlen>
 80035c8:	b282      	uxth	r2, r0
 80035ca:	9600      	str	r6, [sp, #0]
 80035cc:	2332      	movs	r3, #50	; 0x32
 80035ce:	0029      	movs	r1, r5
 80035d0:	9803      	ldr	r0, [sp, #12]
 80035d2:	f008 ffef 	bl	800c5b4 <writePxMutex>
 80035d6:	3401      	adds	r4, #1
	for(uint8_t i =1; i <= NumOfPorts; i++) {
 80035d8:	2c07      	cmp	r4, #7
 80035da:	d1ed      	bne.n	80035b8 <DisplayTopology+0x44>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 80035dc:	2301      	movs	r3, #1
 80035de:	425b      	negs	r3, r3
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	3333      	adds	r3, #51	; 0x33
 80035e4:	2203      	movs	r2, #3
 80035e6:	4941      	ldr	r1, [pc, #260]	; (80036ec <DisplayTopology+0x178>)
 80035e8:	9803      	ldr	r0, [sp, #12]
 80035ea:	f008 ffe3 	bl	800c5b4 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++) {
 80035ee:	4b40      	ldr	r3, [pc, #256]	; (80036f0 <DisplayTopology+0x17c>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d065      	beq.n	80036c2 <DisplayTopology+0x14e>
 80035f6:	2600      	movs	r6, #0
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80035f8:	2701      	movs	r7, #1
 80035fa:	427f      	negs	r7, r7
		HAL_MAX_DELAY);
		/* Module PN */
		strncpy(pcUserMessage,modulePNstring[ (array[row][0])],5);
 80035fc:	4b3d      	ldr	r3, [pc, #244]	; (80036f4 <DisplayTopology+0x180>)
 80035fe:	4699      	mov	r9, r3
 8003600:	230e      	movs	r3, #14
 8003602:	444b      	add	r3, r9
 8003604:	469a      	mov	sl, r3
 8003606:	e02a      	b.n	800365e <DisplayTopology+0xea>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++) {
			if(!array[row][col])
			sprintf(pcUserMessage,"%d\t",0);
			else
			sprintf(pcUserMessage,"%d:%d\t", (array[row][col] >> 3),
 8003608:	2307      	movs	r3, #7
 800360a:	4013      	ands	r3, r2
 800360c:	08d2      	lsrs	r2, r2, #3
 800360e:	493a      	ldr	r1, [pc, #232]	; (80036f8 <DisplayTopology+0x184>)
 8003610:	4833      	ldr	r0, [pc, #204]	; (80036e0 <DisplayTopology+0x16c>)
 8003612:	f00e fc23 	bl	8011e5c <sprintf>
			    (array[row][col] & 0x07));
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003616:	4d32      	ldr	r5, [pc, #200]	; (80036e0 <DisplayTopology+0x16c>)
 8003618:	0028      	movs	r0, r5
 800361a:	f7fc fd7d 	bl	8000118 <strlen>
 800361e:	b282      	uxth	r2, r0
 8003620:	9700      	str	r7, [sp, #0]
 8003622:	2332      	movs	r3, #50	; 0x32
 8003624:	0029      	movs	r1, r5
 8003626:	9803      	ldr	r0, [sp, #12]
 8003628:	f008 ffc4 	bl	800c5b4 <writePxMutex>
 800362c:	3402      	adds	r4, #2
		for(uint8_t col =1; col <= NumOfPorts; col++) {
 800362e:	42b4      	cmp	r4, r6
 8003630:	d007      	beq.n	8003642 <DisplayTopology+0xce>
			if(!array[row][col])
 8003632:	8822      	ldrh	r2, [r4, #0]
 8003634:	2a00      	cmp	r2, #0
 8003636:	d1e7      	bne.n	8003608 <DisplayTopology+0x94>
			sprintf(pcUserMessage,"%d\t",0);
 8003638:	4930      	ldr	r1, [pc, #192]	; (80036fc <DisplayTopology+0x188>)
 800363a:	4829      	ldr	r0, [pc, #164]	; (80036e0 <DisplayTopology+0x16c>)
 800363c:	f00e fc0e 	bl	8011e5c <sprintf>
 8003640:	e7e9      	b.n	8003616 <DisplayTopology+0xa2>
 8003642:	4646      	mov	r6, r8
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003644:	9700      	str	r7, [sp, #0]
 8003646:	2332      	movs	r3, #50	; 0x32
 8003648:	2202      	movs	r2, #2
 800364a:	492d      	ldr	r1, [pc, #180]	; (8003700 <DisplayTopology+0x18c>)
 800364c:	9803      	ldr	r0, [sp, #12]
 800364e:	f008 ffb1 	bl	800c5b4 <writePxMutex>
	for(uint8_t row =0; row < N; row++) {
 8003652:	3601      	adds	r6, #1
 8003654:	b2f6      	uxtb	r6, r6
 8003656:	4b26      	ldr	r3, [pc, #152]	; (80036f0 <DisplayTopology+0x17c>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	42b3      	cmp	r3, r6
 800365c:	d931      	bls.n	80036c2 <DisplayTopology+0x14e>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 800365e:	1c72      	adds	r2, r6, #1
 8003660:	4c1f      	ldr	r4, [pc, #124]	; (80036e0 <DisplayTopology+0x16c>)
 8003662:	4928      	ldr	r1, [pc, #160]	; (8003704 <DisplayTopology+0x190>)
 8003664:	0020      	movs	r0, r4
 8003666:	f00e fbf9 	bl	8011e5c <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 800366a:	0020      	movs	r0, r4
 800366c:	f7fc fd54 	bl	8000118 <strlen>
 8003670:	b282      	uxth	r2, r0
 8003672:	9700      	str	r7, [sp, #0]
 8003674:	2332      	movs	r3, #50	; 0x32
 8003676:	0021      	movs	r1, r4
 8003678:	9803      	ldr	r0, [sp, #12]
 800367a:	f008 ff9b 	bl	800c5b4 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[ (array[row][0])],5);
 800367e:	2516      	movs	r5, #22
 8003680:	4375      	muls	r5, r6
 8003682:	464b      	mov	r3, r9
 8003684:	5aeb      	ldrh	r3, [r5, r3]
 8003686:	0059      	lsls	r1, r3, #1
 8003688:	18c9      	adds	r1, r1, r3
 800368a:	0049      	lsls	r1, r1, #1
 800368c:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <DisplayTopology+0x194>)
 800368e:	18c9      	adds	r1, r1, r3
 8003690:	2205      	movs	r2, #5
 8003692:	0020      	movs	r0, r4
 8003694:	f00e fc37 	bl	8011f06 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003698:	9700      	str	r7, [sp, #0]
 800369a:	2332      	movs	r3, #50	; 0x32
 800369c:	2205      	movs	r2, #5
 800369e:	0021      	movs	r1, r4
 80036a0:	9c03      	ldr	r4, [sp, #12]
 80036a2:	0020      	movs	r0, r4
 80036a4:	f008 ff86 	bl	800c5b4 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 80036a8:	9700      	str	r7, [sp, #0]
 80036aa:	2332      	movs	r3, #50	; 0x32
 80036ac:	2201      	movs	r2, #1
 80036ae:	4917      	ldr	r1, [pc, #92]	; (800370c <DisplayTopology+0x198>)
 80036b0:	0020      	movs	r0, r4
 80036b2:	f008 ff7f 	bl	800c5b4 <writePxMutex>
 80036b6:	1cac      	adds	r4, r5, #2
 80036b8:	444c      	add	r4, r9
 80036ba:	4455      	add	r5, sl
			sprintf(pcUserMessage,"%d\t",0);
 80036bc:	46b0      	mov	r8, r6
 80036be:	002e      	movs	r6, r5
 80036c0:	e7b7      	b.n	8003632 <DisplayTopology+0xbe>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 80036c2:	2301      	movs	r3, #1
 80036c4:	425b      	negs	r3, r3
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	3333      	adds	r3, #51	; 0x33
 80036ca:	2201      	movs	r2, #1
 80036cc:	4910      	ldr	r1, [pc, #64]	; (8003710 <DisplayTopology+0x19c>)
 80036ce:	9803      	ldr	r0, [sp, #12]
 80036d0:	f008 ff70 	bl	800c5b4 <writePxMutex>
}
 80036d4:	b004      	add	sp, #16
 80036d6:	bc1c      	pop	{r2, r3, r4}
 80036d8:	4690      	mov	r8, r2
 80036da:	4699      	mov	r9, r3
 80036dc:	46a2      	mov	sl, r4
 80036de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036e0:	200010a8 	.word	0x200010a8
 80036e4:	0801653c 	.word	0x0801653c
 80036e8:	08016550 	.word	0x08016550
 80036ec:	080178c4 	.word	0x080178c4
 80036f0:	2000001c 	.word	0x2000001c
 80036f4:	20000a78 	.word	0x20000a78
 80036f8:	08016568 	.word	0x08016568
 80036fc:	08016564 	.word	0x08016564
 8003700:	080163e4 	.word	0x080163e4
 8003704:	08016558 	.word	0x08016558
 8003708:	080165a4 	.word	0x080165a4
 800370c:	0801654c 	.word	0x0801654c
 8003710:	080184a4 	.word	0x080184a4

08003714 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003716:	46c6      	mov	lr, r8
 8003718:	b500      	push	{lr}
 800371a:	b084      	sub	sp, #16
 800371c:	0005      	movs	r5, r0
 800371e:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003720:	4c30      	ldr	r4, [pc, #192]	; (80037e4 <DisplayPortsDir+0xd0>)
 8003722:	4b31      	ldr	r3, [pc, #196]	; (80037e8 <DisplayPortsDir+0xd4>)
 8003724:	0022      	movs	r2, r4
 8003726:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003728:	c243      	stmia	r2!, {r0, r1, r6}
 800372a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800372c:	c243      	stmia	r2!, {r0, r1, r6}
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003732:	0020      	movs	r0, r4
 8003734:	f7fc fcf0 	bl	8000118 <strlen>
 8003738:	b282      	uxth	r2, r0
 800373a:	2301      	movs	r3, #1
 800373c:	425b      	negs	r3, r3
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	3333      	adds	r3, #51	; 0x33
 8003742:	0021      	movs	r1, r4
 8003744:	0028      	movs	r0, r5
 8003746:	f008 ff35 	bl	800c5b4 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++) {
 800374a:	4b28      	ldr	r3, [pc, #160]	; (80037ec <DisplayPortsDir+0xd8>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2201      	movs	r2, #1
 8003750:	4690      	mov	r8, r2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d02c      	beq.n	80037b0 <DisplayPortsDir+0x9c>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++) {
			if( (arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003756:	4e26      	ldr	r6, [pc, #152]	; (80037f0 <DisplayPortsDir+0xdc>)
 8003758:	e025      	b.n	80037a6 <DisplayPortsDir+0x92>
 800375a:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++) {
 800375c:	2c0a      	cmp	r4, #10
 800375e:	d01a      	beq.n	8003796 <DisplayPortsDir+0x82>
 8003760:	1c5c      	adds	r4, r3, #1
			if( (arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003762:	5ba9      	ldrh	r1, [r5, r6]
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	0212      	lsls	r2, r2, #8
 8003768:	411a      	asrs	r2, r3
 800376a:	420a      	tst	r2, r1
 800376c:	d0f5      	beq.n	800375a <DisplayPortsDir+0x46>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 800376e:	4f1d      	ldr	r7, [pc, #116]	; (80037e4 <DisplayPortsDir+0xd0>)
 8003770:	0023      	movs	r3, r4
 8003772:	4642      	mov	r2, r8
 8003774:	491f      	ldr	r1, [pc, #124]	; (80037f4 <DisplayPortsDir+0xe0>)
 8003776:	0038      	movs	r0, r7
 8003778:	f00e fb70 	bl	8011e5c <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 800377c:	0038      	movs	r0, r7
 800377e:	f7fc fccb 	bl	8000118 <strlen>
 8003782:	b282      	uxth	r2, r0
 8003784:	2301      	movs	r3, #1
 8003786:	425b      	negs	r3, r3
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	3333      	adds	r3, #51	; 0x33
 800378c:	0039      	movs	r1, r7
 800378e:	9803      	ldr	r0, [sp, #12]
 8003790:	f008 ff10 	bl	800c5b4 <writePxMutex>
 8003794:	e7e1      	b.n	800375a <DisplayPortsDir+0x46>
	for(uint8_t i =1; i <= N; i++) {
 8003796:	4643      	mov	r3, r8
 8003798:	3301      	adds	r3, #1
 800379a:	b2db      	uxtb	r3, r3
 800379c:	4698      	mov	r8, r3
 800379e:	4b13      	ldr	r3, [pc, #76]	; (80037ec <DisplayPortsDir+0xd8>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	4543      	cmp	r3, r8
 80037a4:	d304      	bcc.n	80037b0 <DisplayPortsDir+0x9c>
void DisplayPortsDir(uint8_t port){
 80037a6:	2300      	movs	r3, #0
			if( (arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80037a8:	4642      	mov	r2, r8
 80037aa:	1e55      	subs	r5, r2, #1
 80037ac:	006d      	lsls	r5, r5, #1
 80037ae:	e7d7      	b.n	8003760 <DisplayPortsDir+0x4c>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 80037b0:	4c0c      	ldr	r4, [pc, #48]	; (80037e4 <DisplayPortsDir+0xd0>)
 80037b2:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <DisplayPortsDir+0xe4>)
 80037b4:	0022      	movs	r2, r4
 80037b6:	cb23      	ldmia	r3!, {r0, r1, r5}
 80037b8:	c223      	stmia	r2!, {r0, r1, r5}
 80037ba:	cb23      	ldmia	r3!, {r0, r1, r5}
 80037bc:	c223      	stmia	r2!, {r0, r1, r5}
 80037be:	cb03      	ldmia	r3!, {r0, r1}
 80037c0:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80037c2:	0020      	movs	r0, r4
 80037c4:	f7fc fca8 	bl	8000118 <strlen>
 80037c8:	b282      	uxth	r2, r0
 80037ca:	2301      	movs	r3, #1
 80037cc:	425b      	negs	r3, r3
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	3333      	adds	r3, #51	; 0x33
 80037d2:	0021      	movs	r1, r4
 80037d4:	9803      	ldr	r0, [sp, #12]
 80037d6:	f008 feed 	bl	800c5b4 <writePxMutex>
	HAL_MAX_DELAY);
}
 80037da:	b004      	add	sp, #16
 80037dc:	bc04      	pop	{r2}
 80037de:	4690      	mov	r8, r2
 80037e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	200010a8 	.word	0x200010a8
 80037e8:	080164ec 	.word	0x080164ec
 80037ec:	2000001c 	.word	0x2000001c
 80037f0:	20006db8 	.word	0x20006db8
 80037f4:	08016508 	.word	0x08016508
 80037f8:	0801651c 	.word	0x0801651c

080037fc <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 80037fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037fe:	46d6      	mov	lr, sl
 8003800:	b500      	push	{lr}
 8003802:	b084      	sub	sp, #16
 8003804:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003806:	f009 f917 	bl	800ca38 <FreeRTOS_CLIGetOutputBuffer>
 800380a:	0004      	movs	r4, r0
	
	strcpy((char*) pcOutputString,"");
 800380c:	2300      	movs	r3, #0
 800380e:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003810:	4b8d      	ldr	r3, [pc, #564]	; (8003a48 <DisplayModuleStatus+0x24c>)
 8003812:	781a      	ldrb	r2, [r3, #0]
 8003814:	4d8d      	ldr	r5, [pc, #564]	; (8003a4c <DisplayModuleStatus+0x250>)
 8003816:	498e      	ldr	r1, [pc, #568]	; (8003a50 <DisplayModuleStatus+0x254>)
 8003818:	0028      	movs	r0, r5
 800381a:	f00e fb1f 	bl	8011e5c <sprintf>
	strcat((char*) pcOutputString,pcUserMessage);
 800381e:	0029      	movs	r1, r5
 8003820:	0020      	movs	r0, r4
 8003822:	f00e fb3b 	bl	8011e9c <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003826:	4b8b      	ldr	r3, [pc, #556]	; (8003a54 <DisplayModuleStatus+0x258>)
 8003828:	781a      	ldrb	r2, [r3, #0]
 800382a:	498b      	ldr	r1, [pc, #556]	; (8003a58 <DisplayModuleStatus+0x25c>)
 800382c:	0028      	movs	r0, r5
 800382e:	f00e fb15 	bl	8011e5c <sprintf>
	strcat((char*) pcOutputString,pcUserMessage);
 8003832:	0029      	movs	r1, r5
 8003834:	0020      	movs	r0, r4
 8003836:	f00e fb31 	bl	8011e9c <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 800383a:	2304      	movs	r3, #4
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	3b02      	subs	r3, #2
 8003840:	2200      	movs	r2, #0
 8003842:	4986      	ldr	r1, [pc, #536]	; (8003a5c <DisplayModuleStatus+0x260>)
 8003844:	0028      	movs	r0, r5
 8003846:	f00e fb09 	bl	8011e5c <sprintf>
	_firmMinor,_firmPatch);
	strcat((char*) pcOutputString,pcUserMessage);
 800384a:	0029      	movs	r1, r5
 800384c:	0020      	movs	r0, r4
 800384e:	f00e fb25 	bl	8011e9c <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003852:	4a83      	ldr	r2, [pc, #524]	; (8003a60 <DisplayModuleStatus+0x264>)
 8003854:	4983      	ldr	r1, [pc, #524]	; (8003a64 <DisplayModuleStatus+0x268>)
 8003856:	0028      	movs	r0, r5
 8003858:	f00e fb00 	bl	8011e5c <sprintf>
	strcat((char*) pcOutputString,pcUserMessage);
 800385c:	0029      	movs	r1, r5
 800385e:	0020      	movs	r0, r4
 8003860:	f00e fb1c 	bl	8011e9c <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003864:	4a80      	ldr	r2, [pc, #512]	; (8003a68 <DisplayModuleStatus+0x26c>)
 8003866:	4981      	ldr	r1, [pc, #516]	; (8003a6c <DisplayModuleStatus+0x270>)
 8003868:	0028      	movs	r0, r5
 800386a:	f00e faf7 	bl	8011e5c <sprintf>
	strcat((char*) pcOutputString,pcUserMessage);
 800386e:	0029      	movs	r1, r5
 8003870:	0020      	movs	r0, r4
 8003872:	f00e fb13 	bl	8011e9c <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003876:	4b7e      	ldr	r3, [pc, #504]	; (8003a70 <DisplayModuleStatus+0x274>)
 8003878:	002a      	movs	r2, r5
 800387a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800387c:	c243      	stmia	r2!, {r0, r1, r6}
 800387e:	6819      	ldr	r1, [r3, #0]
 8003880:	6011      	str	r1, [r2, #0]
 8003882:	8899      	ldrh	r1, [r3, #4]
 8003884:	8091      	strh	r1, [r2, #4]
 8003886:	799b      	ldrb	r3, [r3, #6]
 8003888:	7193      	strb	r3, [r2, #6]
	strcat((char*) pcOutputString,pcUserMessage);
 800388a:	0029      	movs	r1, r5
 800388c:	0020      	movs	r0, r4
 800388e:	f00e fb05 	bl	8011e9c <strcat>
 8003892:	2701      	movs	r7, #1
	for(uint8_t i =1; i <= NumOfPorts; i++) {
		sprintf(pcUserMessage,"P%d: ",i);
 8003894:	4d6d      	ldr	r5, [pc, #436]	; (8003a4c <DisplayModuleStatus+0x250>)
		strcat((char*) pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8003896:	4b77      	ldr	r3, [pc, #476]	; (8003a74 <DisplayModuleStatus+0x278>)
 8003898:	469a      	mov	sl, r3
 800389a:	e00e      	b.n	80038ba <DisplayModuleStatus+0xbe>
			case FREE:
			sprintf(pcUserMessage,"Free\n\r");
 800389c:	4b6b      	ldr	r3, [pc, #428]	; (8003a4c <DisplayModuleStatus+0x250>)
 800389e:	4a76      	ldr	r2, [pc, #472]	; (8003a78 <DisplayModuleStatus+0x27c>)
 80038a0:	6811      	ldr	r1, [r2, #0]
 80038a2:	6019      	str	r1, [r3, #0]
 80038a4:	8891      	ldrh	r1, [r2, #4]
 80038a6:	8099      	strh	r1, [r3, #4]
 80038a8:	7992      	ldrb	r2, [r2, #6]
 80038aa:	719a      	strb	r2, [r3, #6]
			sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char*) pcOutputString,pcUserMessage);
 80038ac:	4967      	ldr	r1, [pc, #412]	; (8003a4c <DisplayModuleStatus+0x250>)
 80038ae:	0020      	movs	r0, r4
 80038b0:	f00e faf4 	bl	8011e9c <strcat>
 80038b4:	3701      	adds	r7, #1
	for(uint8_t i =1; i <= NumOfPorts; i++) {
 80038b6:	2f07      	cmp	r7, #7
 80038b8:	d039      	beq.n	800392e <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage,"P%d: ",i);
 80038ba:	003a      	movs	r2, r7
 80038bc:	496f      	ldr	r1, [pc, #444]	; (8003a7c <DisplayModuleStatus+0x280>)
 80038be:	0028      	movs	r0, r5
 80038c0:	f00e facc 	bl	8011e5c <sprintf>
		strcat((char*) pcOutputString,pcUserMessage);
 80038c4:	0029      	movs	r1, r5
 80038c6:	0020      	movs	r0, r4
 80038c8:	f00e fae8 	bl	8011e9c <strcat>
		switch(portStatus[i]){
 80038cc:	4653      	mov	r3, sl
 80038ce:	5cfb      	ldrb	r3, [r7, r3]
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d8eb      	bhi.n	80038ac <DisplayModuleStatus+0xb0>
 80038d4:	4653      	mov	r3, sl
 80038d6:	5cfb      	ldrb	r3, [r7, r3]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4a69      	ldr	r2, [pc, #420]	; (8003a80 <DisplayModuleStatus+0x284>)
 80038dc:	58d3      	ldr	r3, [r2, r3]
 80038de:	469f      	mov	pc, r3
			sprintf(pcUserMessage,"Receiving messages\n\r");
 80038e0:	495a      	ldr	r1, [pc, #360]	; (8003a4c <DisplayModuleStatus+0x250>)
 80038e2:	4b68      	ldr	r3, [pc, #416]	; (8003a84 <DisplayModuleStatus+0x288>)
 80038e4:	000a      	movs	r2, r1
 80038e6:	cb43      	ldmia	r3!, {r0, r1, r6}
 80038e8:	c243      	stmia	r2!, {r0, r1, r6}
 80038ea:	cb03      	ldmia	r3!, {r0, r1}
 80038ec:	c203      	stmia	r2!, {r0, r1}
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	7013      	strb	r3, [r2, #0]
				break;
 80038f2:	e7db      	b.n	80038ac <DisplayModuleStatus+0xb0>
			sprintf(pcUserMessage,"Streaming\n\r");
 80038f4:	4a55      	ldr	r2, [pc, #340]	; (8003a4c <DisplayModuleStatus+0x250>)
 80038f6:	4b64      	ldr	r3, [pc, #400]	; (8003a88 <DisplayModuleStatus+0x28c>)
 80038f8:	cb43      	ldmia	r3!, {r0, r1, r6}
 80038fa:	c243      	stmia	r2!, {r0, r1, r6}
				break;
 80038fc:	e7d6      	b.n	80038ac <DisplayModuleStatus+0xb0>
			sprintf(pcUserMessage,"Receiving user commands\n\r");
 80038fe:	4953      	ldr	r1, [pc, #332]	; (8003a4c <DisplayModuleStatus+0x250>)
 8003900:	4b62      	ldr	r3, [pc, #392]	; (8003a8c <DisplayModuleStatus+0x290>)
 8003902:	000a      	movs	r2, r1
 8003904:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003906:	c243      	stmia	r2!, {r0, r1, r6}
 8003908:	cb43      	ldmia	r3!, {r0, r1, r6}
 800390a:	c243      	stmia	r2!, {r0, r1, r6}
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	8013      	strh	r3, [r2, #0]
				break;
 8003910:	e7cc      	b.n	80038ac <DisplayModuleStatus+0xb0>
			sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8003912:	494e      	ldr	r1, [pc, #312]	; (8003a4c <DisplayModuleStatus+0x250>)
 8003914:	4b5e      	ldr	r3, [pc, #376]	; (8003a90 <DisplayModuleStatus+0x294>)
 8003916:	000a      	movs	r2, r1
 8003918:	cb43      	ldmia	r3!, {r0, r1, r6}
 800391a:	c243      	stmia	r2!, {r0, r1, r6}
 800391c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800391e:	c243      	stmia	r2!, {r0, r1, r6}
 8003920:	6819      	ldr	r1, [r3, #0]
 8003922:	6011      	str	r1, [r2, #0]
 8003924:	8899      	ldrh	r1, [r3, #4]
 8003926:	8091      	strh	r1, [r2, #4]
 8003928:	799b      	ldrb	r3, [r3, #6]
 800392a:	7193      	strb	r3, [r2, #6]
				break;
 800392c:	e7be      	b.n	80038ac <DisplayModuleStatus+0xb0>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 800392e:	4947      	ldr	r1, [pc, #284]	; (8003a4c <DisplayModuleStatus+0x250>)
 8003930:	4b58      	ldr	r3, [pc, #352]	; (8003a94 <DisplayModuleStatus+0x298>)
 8003932:	000a      	movs	r2, r1
 8003934:	cb61      	ldmia	r3!, {r0, r5, r6}
 8003936:	c261      	stmia	r2!, {r0, r5, r6}
 8003938:	cb61      	ldmia	r3!, {r0, r5, r6}
 800393a:	c261      	stmia	r2!, {r0, r5, r6}
	strcat((char*) pcOutputString,pcUserMessage);
 800393c:	0020      	movs	r0, r4
 800393e:	f00e faad 	bl	8011e9c <strcat>
 8003942:	4f55      	ldr	r7, [pc, #340]	; (8003a98 <DisplayModuleStatus+0x29c>)
 8003944:	2601      	movs	r6, #1
 8003946:	e00d      	b.n	8003964 <DisplayModuleStatus+0x168>
	for(char i =1; i <= 6; i++) {
		if(streamDMA[i - 1].Instance == 0) {
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8003948:	4d40      	ldr	r5, [pc, #256]	; (8003a4c <DisplayModuleStatus+0x250>)
 800394a:	0032      	movs	r2, r6
 800394c:	4953      	ldr	r1, [pc, #332]	; (8003a9c <DisplayModuleStatus+0x2a0>)
 800394e:	0028      	movs	r0, r5
 8003950:	f00e fa84 	bl	8011e5c <sprintf>
			strcat((char*) pcOutputString,pcUserMessage);
 8003954:	0029      	movs	r1, r5
 8003956:	0020      	movs	r0, r4
 8003958:	f00e faa0 	bl	8011e9c <strcat>
 800395c:	3601      	adds	r6, #1
 800395e:	3738      	adds	r7, #56	; 0x38
	for(char i =1; i <= 6; i++) {
 8003960:	2e07      	cmp	r6, #7
 8003962:	d018      	beq.n	8003996 <DisplayModuleStatus+0x19a>
		if(streamDMA[i - 1].Instance == 0) {
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0ee      	beq.n	8003948 <DisplayModuleStatus+0x14c>
		}
		else {
			sprintf(pcUserMessage,
			    "\n\rStreaming DMA %d is streaming from P%d to P%d",i,
			    GetPort(streamDMA[i - 1].Parent),
 800396a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800396c:	f006 ff7c 	bl	800a868 <GetPort>
 8003970:	0005      	movs	r5, r0
			    GetPort(dmaStreamDst[i - 1]));
 8003972:	00b3      	lsls	r3, r6, #2
 8003974:	3b04      	subs	r3, #4
 8003976:	4a4a      	ldr	r2, [pc, #296]	; (8003aa0 <DisplayModuleStatus+0x2a4>)
 8003978:	58d0      	ldr	r0, [r2, r3]
 800397a:	f006 ff75 	bl	800a868 <GetPort>
			sprintf(pcUserMessage,
 800397e:	9000      	str	r0, [sp, #0]
 8003980:	002b      	movs	r3, r5
 8003982:	0032      	movs	r2, r6
 8003984:	4947      	ldr	r1, [pc, #284]	; (8003aa4 <DisplayModuleStatus+0x2a8>)
 8003986:	4831      	ldr	r0, [pc, #196]	; (8003a4c <DisplayModuleStatus+0x250>)
 8003988:	f00e fa68 	bl	8011e5c <sprintf>
			strcat((char*) pcOutputString,pcUserMessage);
 800398c:	492f      	ldr	r1, [pc, #188]	; (8003a4c <DisplayModuleStatus+0x250>)
 800398e:	0020      	movs	r0, r4
 8003990:	f00e fa84 	bl	8011e9c <strcat>
 8003994:	e7e2      	b.n	800395c <DisplayModuleStatus+0x160>
		}
	}
	strcat((char*) pcOutputString,"\n\r");
 8003996:	0020      	movs	r0, r4
 8003998:	f7fc fbbe 	bl	8000118 <strlen>
 800399c:	1820      	adds	r0, r4, r0
 800399e:	2203      	movs	r2, #3
 80039a0:	4941      	ldr	r1, [pc, #260]	; (8003aa8 <DisplayModuleStatus+0x2ac>)
 80039a2:	f00e f858 	bl	8011a56 <memcpy>
	
	/* Ports direction */
	strcat((char*) pcOutputString,"\n\rThese ports are reversed: ");
 80039a6:	0020      	movs	r0, r4
 80039a8:	f7fc fbb6 	bl	8000118 <strlen>
 80039ac:	1820      	adds	r0, r4, r0
 80039ae:	221d      	movs	r2, #29
 80039b0:	493e      	ldr	r1, [pc, #248]	; (8003aac <DisplayModuleStatus+0x2b0>)
 80039b2:	f00e f850 	bl	8011a56 <memcpy>
	temp =strlen((char*) pcOutputString);
 80039b6:	0020      	movs	r0, r4
 80039b8:	f7fc fbae 	bl	8000118 <strlen>
 80039bc:	4682      	mov	sl, r0
 80039be:	2200      	movs	r2, #0
	for(uint8_t p =1; p <= NumOfPorts; p++) {
		if( (arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80039c0:	4f3b      	ldr	r7, [pc, #236]	; (8003ab0 <DisplayModuleStatus+0x2b4>)
 80039c2:	4e21      	ldr	r6, [pc, #132]	; (8003a48 <DisplayModuleStatus+0x24c>)
 80039c4:	e002      	b.n	80039cc <DisplayModuleStatus+0x1d0>
 80039c6:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++) {
 80039c8:	2d06      	cmp	r5, #6
 80039ca:	d013      	beq.n	80039f4 <DisplayModuleStatus+0x1f8>
 80039cc:	1c55      	adds	r5, r2, #1
		if( (arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80039ce:	7833      	ldrb	r3, [r6, #0]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	5bd9      	ldrh	r1, [r3, r7]
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	4113      	asrs	r3, r2
 80039dc:	420b      	tst	r3, r1
 80039de:	d0f2      	beq.n	80039c6 <DisplayModuleStatus+0x1ca>
		{
			sprintf(pcUserMessage,"P%d ",p);
 80039e0:	002a      	movs	r2, r5
 80039e2:	4934      	ldr	r1, [pc, #208]	; (8003ab4 <DisplayModuleStatus+0x2b8>)
 80039e4:	4819      	ldr	r0, [pc, #100]	; (8003a4c <DisplayModuleStatus+0x250>)
 80039e6:	f00e fa39 	bl	8011e5c <sprintf>
			strcat((char*) pcOutputString,pcUserMessage);
 80039ea:	4918      	ldr	r1, [pc, #96]	; (8003a4c <DisplayModuleStatus+0x250>)
 80039ec:	0020      	movs	r0, r4
 80039ee:	f00e fa55 	bl	8011e9c <strcat>
 80039f2:	e7e8      	b.n	80039c6 <DisplayModuleStatus+0x1ca>
		}
	}
	if(temp == strlen((char*) pcOutputString)) { /* All ports are normal */
 80039f4:	0020      	movs	r0, r4
 80039f6:	f7fc fb8f 	bl	8000118 <strlen>
 80039fa:	4653      	mov	r3, sl
 80039fc:	041b      	lsls	r3, r3, #16
 80039fe:	0c1b      	lsrs	r3, r3, #16
 8003a00:	4298      	cmp	r0, r3
 8003a02:	d00e      	beq.n	8003a22 <DisplayModuleStatus+0x226>
		strcat((char*) pcOutputString,"None");
	}
	strcat((char*) pcOutputString,"\n\r");
 8003a04:	0020      	movs	r0, r4
 8003a06:	f7fc fb87 	bl	8000118 <strlen>
 8003a0a:	1820      	adds	r0, r4, r0
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	4926      	ldr	r1, [pc, #152]	; (8003aa8 <DisplayModuleStatus+0x2ac>)
 8003a10:	f00e f821 	bl	8011a56 <memcpy>
	
	/* Display output */
	if(port)
 8003a14:	9b03      	ldr	r3, [sp, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <DisplayModuleStatus+0x232>
	writePxMutex(port,(char*) pcOutputString,
	    strlen((char*) pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 8003a1a:	b004      	add	sp, #16
 8003a1c:	bc04      	pop	{r2}
 8003a1e:	4692      	mov	sl, r2
 8003a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char*) pcOutputString,"None");
 8003a22:	1820      	adds	r0, r4, r0
 8003a24:	2205      	movs	r2, #5
 8003a26:	4924      	ldr	r1, [pc, #144]	; (8003ab8 <DisplayModuleStatus+0x2bc>)
 8003a28:	f00e f815 	bl	8011a56 <memcpy>
 8003a2c:	e7ea      	b.n	8003a04 <DisplayModuleStatus+0x208>
	    strlen((char*) pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8003a2e:	0020      	movs	r0, r4
 8003a30:	f7fc fb72 	bl	8000118 <strlen>
	writePxMutex(port,(char*) pcOutputString,
 8003a34:	b282      	uxth	r2, r0
 8003a36:	2301      	movs	r3, #1
 8003a38:	425b      	negs	r3, r3
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	3333      	adds	r3, #51	; 0x33
 8003a3e:	0021      	movs	r1, r4
 8003a40:	9803      	ldr	r0, [sp, #12]
 8003a42:	f008 fdb7 	bl	800c5b4 <writePxMutex>
}
 8003a46:	e7e8      	b.n	8003a1a <DisplayModuleStatus+0x21e>
 8003a48:	20001076 	.word	0x20001076
 8003a4c:	200010a8 	.word	0x200010a8
 8003a50:	08016330 	.word	0x08016330
 8003a54:	20000a77 	.word	0x20000a77
 8003a58:	0801634c 	.word	0x0801634c
 8003a5c:	08016368 	.word	0x08016368
 8003a60:	08016388 	.word	0x08016388
 8003a64:	08016394 	.word	0x08016394
 8003a68:	080163ac 	.word	0x080163ac
 8003a6c:	080163b8 	.word	0x080163b8
 8003a70:	080163d4 	.word	0x080163d4
 8003a74:	200010f8 	.word	0x200010f8
 8003a78:	080163f0 	.word	0x080163f0
 8003a7c:	080163e8 	.word	0x080163e8
 8003a80:	0801630c 	.word	0x0801630c
 8003a84:	080163f8 	.word	0x080163f8
 8003a88:	08016410 	.word	0x08016410
 8003a8c:	0801641c 	.word	0x0801641c
 8003a90:	08016438 	.word	0x08016438
 8003a94:	08016458 	.word	0x08016458
 8003a98:	20001958 	.word	0x20001958
 8003a9c:	08016470 	.word	0x08016470
 8003aa0:	200014a8 	.word	0x200014a8
 8003aa4:	0801648c 	.word	0x0801648c
 8003aa8:	080163e4 	.word	0x080163e4
 8003aac:	080164bc 	.word	0x080164bc
 8003ab0:	20006db8 	.word	0x20006db8
 8003ab4:	080164dc 	.word	0x080164dc
 8003ab8:	080164e4 	.word	0x080164e4

08003abc <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8003abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003abe:	46c6      	mov	lr, r8
 8003ac0:	b500      	push	{lr}
 8003ac2:	0005      	movs	r5, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8003ac4:	4929      	ldr	r1, [pc, #164]	; (8003b6c <GetID+0xb0>)
 8003ac6:	f7fc fb1d 	bl	8000104 <strcmp>
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d010      	beq.n	8003af0 <GetID+0x34>
	return myID;
	else if(!strcmp(string,"all"))
 8003ace:	4928      	ldr	r1, [pc, #160]	; (8003b70 <GetID+0xb4>)
 8003ad0:	0028      	movs	r0, r5
 8003ad2:	f7fc fb17 	bl	8000104 <strcmp>
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	d045      	beq.n	8003b66 <GetID+0xaa>
	return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 8003ada:	782b      	ldrb	r3, [r5, #0]
 8003adc:	4698      	mov	r8, r3
 8003ade:	2b23      	cmp	r3, #35	; 0x23
 8003ae0:	d00b      	beq.n	8003afa <GetID+0x3e>
		return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++) {
 8003ae2:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <GetID+0xb8>)
 8003ae4:	781f      	ldrb	r7, [r3, #0]
 8003ae6:	2f00      	cmp	r7, #0
 8003ae8:	d02a      	beq.n	8003b40 <GetID+0x84>
 8003aea:	4e23      	ldr	r6, [pc, #140]	; (8003b78 <GetID+0xbc>)
 8003aec:	2400      	movs	r4, #0
 8003aee:	e01c      	b.n	8003b2a <GetID+0x6e>
	return myID;
 8003af0:	4b22      	ldr	r3, [pc, #136]	; (8003b7c <GetID+0xc0>)
 8003af2:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 8003af4:	bc04      	pop	{r2}
 8003af6:	4690      	mov	r8, r2
 8003af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id =atol(string + 1);
 8003afa:	1c68      	adds	r0, r5, #1
 8003afc:	f00d fd21 	bl	8011542 <atol>
 8003b00:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <GetID+0x52>
 8003b06:	4a1b      	ldr	r2, [pc, #108]	; (8003b74 <GetID+0xb8>)
 8003b08:	7812      	ldrb	r2, [r2, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d206      	bcs.n	8003b1c <GetID+0x60>
		else if(id == myID)
 8003b0e:	4a1b      	ldr	r2, [pc, #108]	; (8003b7c <GetID+0xc0>)
 8003b10:	7812      	ldrb	r2, [r2, #0]
		return BOS_ERR_WrongID;
 8003b12:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d1ed      	bne.n	8003af4 <GetID+0x38>
		return myID;
 8003b18:	b210      	sxth	r0, r2
 8003b1a:	e7eb      	b.n	8003af4 <GetID+0x38>
		return id;
 8003b1c:	b218      	sxth	r0, r3
 8003b1e:	e7e9      	b.n	8003af4 <GetID+0x38>
		for(i =0; i < N; i++) {
 8003b20:	3401      	adds	r4, #1
 8003b22:	b2e4      	uxtb	r4, r4
 8003b24:	360a      	adds	r6, #10
 8003b26:	42bc      	cmp	r4, r7
 8003b28:	d00a      	beq.n	8003b40 <GetID+0x84>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 8003b2a:	0031      	movs	r1, r6
 8003b2c:	0028      	movs	r0, r5
 8003b2e:	f7fc fae9 	bl	8000104 <strcmp>
 8003b32:	2800      	cmp	r0, #0
 8003b34:	d1f4      	bne.n	8003b20 <GetID+0x64>
 8003b36:	4643      	mov	r3, r8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f1      	beq.n	8003b20 <GetID+0x64>
			return (i);
 8003b3c:	b220      	sxth	r0, r4
 8003b3e:	e7d9      	b.n	8003af4 <GetID+0x38>
 8003b40:	4f0f      	ldr	r7, [pc, #60]	; (8003b80 <GetID+0xc4>)
		for(i =0; i < N; i++) {
 8003b42:	2600      	movs	r6, #0
			if(!strcmp(string,groupAlias[i]))
 8003b44:	0039      	movs	r1, r7
 8003b46:	0028      	movs	r0, r5
 8003b48:	f7fc fadc 	bl	8000104 <strcmp>
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	d005      	beq.n	8003b5c <GetID+0xa0>
 8003b50:	3601      	adds	r6, #1
 8003b52:	370a      	adds	r7, #10
		for(i =0; i < MaxNumOfGroups; i++) {
 8003b54:	2e0a      	cmp	r6, #10
 8003b56:	d1f5      	bne.n	8003b44 <GetID+0x88>
		return BOS_ERR_WrongName;
 8003b58:	2064      	movs	r0, #100	; 0x64
 8003b5a:	e7cb      	b.n	8003af4 <GetID+0x38>
			return (BOS_MULTICAST | (i << 8));
 8003b5c:	0234      	lsls	r4, r6, #8
 8003b5e:	20fe      	movs	r0, #254	; 0xfe
 8003b60:	4320      	orrs	r0, r4
 8003b62:	b200      	sxth	r0, r0
 8003b64:	e7c6      	b.n	8003af4 <GetID+0x38>
	return BOS_BROADCAST;
 8003b66:	20ff      	movs	r0, #255	; 0xff
 8003b68:	e7c4      	b.n	8003af4 <GetID+0x38>
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	08016570 	.word	0x08016570
 8003b70:	08016574 	.word	0x08016574
 8003b74:	2000001c 	.word	0x2000001c
 8003b78:	20000f68 	.word	0x20000f68
 8003b7c:	20001076 	.word	0x20001076
 8003b80:	20000e5c 	.word	0x20000e5c

08003b84 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module, char *alias){
 8003b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b86:	b083      	sub	sp, #12
 8003b88:	9001      	str	r0, [sp, #4]
 8003b8a:	000d      	movs	r5, r1
 8003b8c:	4c2a      	ldr	r4, [pc, #168]	; (8003c38 <NameModule+0xb4>)
 8003b8e:	0027      	movs	r7, r4
 8003b90:	3710      	adds	r7, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++) {
		if(!strcmp(alias,BOSkeywords[i]))
 8003b92:	0021      	movs	r1, r4
 8003b94:	0028      	movs	r0, r5
 8003b96:	f7fc fab5 	bl	8000104 <strcmp>
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	d043      	beq.n	8003c26 <NameModule+0xa2>
 8003b9e:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++) {
 8003ba0:	42bc      	cmp	r4, r7
 8003ba2:	d1f6      	bne.n	8003b92 <NameModule+0xe>
		return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++) {
 8003ba4:	4b25      	ldr	r3, [pc, #148]	; (8003c3c <NameModule+0xb8>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d90f      	bls.n	8003bcc <NameModule+0x48>
 8003bac:	4c24      	ldr	r4, [pc, #144]	; (8003c40 <NameModule+0xbc>)
 8003bae:	009f      	lsls	r7, r3, #2
 8003bb0:	18ff      	adds	r7, r7, r3
 8003bb2:	007f      	lsls	r7, r7, #1
 8003bb4:	0023      	movs	r3, r4
 8003bb6:	3b0a      	subs	r3, #10
 8003bb8:	18ff      	adds	r7, r7, r3
		if(!strcmp(alias,moduleAlias[i]))
 8003bba:	0021      	movs	r1, r4
 8003bbc:	0028      	movs	r0, r5
 8003bbe:	f7fc faa1 	bl	8000104 <strcmp>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d031      	beq.n	8003c2a <NameModule+0xa6>
 8003bc6:	340a      	adds	r4, #10
	for(i =1; i < N; i++) {
 8003bc8:	42bc      	cmp	r4, r7
 8003bca:	d1f6      	bne.n	8003bba <NameModule+0x36>
 8003bcc:	4c1d      	ldr	r4, [pc, #116]	; (8003c44 <NameModule+0xc0>)
 8003bce:	0027      	movs	r7, r4
 8003bd0:	3764      	adds	r7, #100	; 0x64
		return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++) {
		if(!strcmp(alias,groupAlias[i]))
 8003bd2:	0021      	movs	r1, r4
 8003bd4:	0028      	movs	r0, r5
 8003bd6:	f7fc fa95 	bl	8000104 <strcmp>
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	d028      	beq.n	8003c30 <NameModule+0xac>
 8003bde:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++) {
 8003be0:	42bc      	cmp	r4, r7
 8003be2:	d1f6      	bne.n	8003bd2 <NameModule+0x4e>
		return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =
 8003be4:	4c18      	ldr	r4, [pc, #96]	; (8003c48 <NameModule+0xc4>)
 8003be6:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <NameModule+0xc8>)
 8003be8:	601c      	str	r4, [r3, #0]
 8003bea:	001e      	movs	r6, r3
	    pxCommand->pxNext) {
		pcRegisteredCommandString =
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	681f      	ldr	r7, [r3, #0]
		    pxCommand->pxCommandLineDefinition->pcCommand;
		xCommandStringLength =strlen((const char*) pcRegisteredCommandString);
 8003bf0:	0038      	movs	r0, r7
 8003bf2:	f7fc fa91 	bl	8000118 <strlen>
 8003bf6:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char*) pcRegisteredCommandString,
 8003bf8:	0039      	movs	r1, r7
 8003bfa:	0028      	movs	r0, r5
 8003bfc:	f00e f972 	bl	8011ee4 <strncmp>
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d017      	beq.n	8003c34 <NameModule+0xb0>
	    pxCommand->pxNext) {
 8003c04:	6864      	ldr	r4, [r4, #4]
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =
 8003c06:	6034      	str	r4, [r6, #0]
 8003c08:	2c00      	cmp	r4, #0
 8003c0a:	d1ef      	bne.n	8003bec <NameModule+0x68>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 8003c0c:	9b01      	ldr	r3, [sp, #4]
 8003c0e:	0098      	lsls	r0, r3, #2
 8003c10:	469c      	mov	ip, r3
 8003c12:	4460      	add	r0, ip
 8003c14:	0040      	lsls	r0, r0, #1
 8003c16:	4e0e      	ldr	r6, [pc, #56]	; (8003c50 <NameModule+0xcc>)
 8003c18:	1980      	adds	r0, r0, r6
 8003c1a:	0029      	movs	r1, r5
 8003c1c:	f00e f95a 	bl	8011ed4 <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 8003c20:	f7fe fe9a 	bl	8002958 <SaveEEalias>
	
	return result;
 8003c24:	e002      	b.n	8003c2c <NameModule+0xa8>
		return BOS_ERR_Keyword;
 8003c26:	2006      	movs	r0, #6
 8003c28:	e000      	b.n	8003c2c <NameModule+0xa8>
		return BOS_ERR_ExistingAlias;
 8003c2a:	2007      	movs	r0, #7
}
 8003c2c:	b003      	add	sp, #12
 8003c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_ExistingAlias;
 8003c30:	2007      	movs	r0, #7
 8003c32:	e7fb      	b.n	8003c2c <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 8003c34:	2008      	movs	r0, #8
 8003c36:	e7f9      	b.n	8003c2c <NameModule+0xa8>
 8003c38:	08016320 	.word	0x08016320
 8003c3c:	2000001c 	.word	0x2000001c
 8003c40:	20000f72 	.word	0x20000f72
 8003c44:	20000e5c 	.word	0x20000e5c
 8003c48:	20000098 	.word	0x20000098
 8003c4c:	20001100 	.word	0x20001100
 8003c50:	20000f68 	.word	0x20000f68

08003c54 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module, char *group){
 8003c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c56:	46c6      	mov	lr, r8
 8003c58:	b500      	push	{lr}
 8003c5a:	0007      	movs	r7, r0
 8003c5c:	000e      	movs	r6, r1
 8003c5e:	4d3a      	ldr	r5, [pc, #232]	; (8003d48 <AddModuleToGroup+0xf4>)
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++) {
 8003c60:	2400      	movs	r4, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])) {
 8003c62:	0029      	movs	r1, r5
 8003c64:	0030      	movs	r0, r6
 8003c66:	f7fc fa4d 	bl	8000104 <strcmp>
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	d050      	beq.n	8003d10 <AddModuleToGroup+0xbc>
	for(i =0; i < MaxNumOfGroups; i++) {
 8003c6e:	3401      	adds	r4, #1
 8003c70:	350a      	adds	r5, #10
 8003c72:	2c0a      	cmp	r4, #10
 8003c74:	d1f5      	bne.n	8003c62 <AddModuleToGroup+0xe>
 8003c76:	4c35      	ldr	r4, [pc, #212]	; (8003d4c <AddModuleToGroup+0xf8>)
 8003c78:	0025      	movs	r5, r4
 8003c7a:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++) {
		if(!strcmp(group,BOSkeywords[j]))
 8003c7c:	0021      	movs	r1, r4
 8003c7e:	0030      	movs	r0, r6
 8003c80:	f7fc fa40 	bl	8000104 <strcmp>
 8003c84:	2800      	cmp	r0, #0
 8003c86:	d058      	beq.n	8003d3a <AddModuleToGroup+0xe6>
 8003c88:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++) {
 8003c8a:	42ac      	cmp	r4, r5
 8003c8c:	d1f6      	bne.n	8003c7c <AddModuleToGroup+0x28>
		return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++) {
 8003c8e:	4b30      	ldr	r3, [pc, #192]	; (8003d50 <AddModuleToGroup+0xfc>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d90f      	bls.n	8003cb6 <AddModuleToGroup+0x62>
 8003c96:	4c2f      	ldr	r4, [pc, #188]	; (8003d54 <AddModuleToGroup+0x100>)
 8003c98:	009d      	lsls	r5, r3, #2
 8003c9a:	18ed      	adds	r5, r5, r3
 8003c9c:	006d      	lsls	r5, r5, #1
 8003c9e:	0023      	movs	r3, r4
 8003ca0:	3b0a      	subs	r3, #10
 8003ca2:	18ed      	adds	r5, r5, r3
		if(!strcmp(group,moduleAlias[j]))
 8003ca4:	0021      	movs	r1, r4
 8003ca6:	0030      	movs	r0, r6
 8003ca8:	f7fc fa2c 	bl	8000104 <strcmp>
 8003cac:	2800      	cmp	r0, #0
 8003cae:	d046      	beq.n	8003d3e <AddModuleToGroup+0xea>
 8003cb0:	340a      	adds	r4, #10
	for(j =1; j < N; j++) {
 8003cb2:	42ac      	cmp	r4, r5
 8003cb4:	d1f6      	bne.n	8003ca4 <AddModuleToGroup+0x50>
		return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check group alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =
 8003cb6:	4c28      	ldr	r4, [pc, #160]	; (8003d58 <AddModuleToGroup+0x104>)
 8003cb8:	4b28      	ldr	r3, [pc, #160]	; (8003d5c <AddModuleToGroup+0x108>)
 8003cba:	601c      	str	r4, [r3, #0]
 8003cbc:	4698      	mov	r8, r3
	    pxCommand->pxNext) {
		pcRegisteredCommandString =
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	681d      	ldr	r5, [r3, #0]
		    pxCommand->pxCommandLineDefinition->pcCommand;
		xCommandStringLength =strlen((const char*) pcRegisteredCommandString);
 8003cc2:	0028      	movs	r0, r5
 8003cc4:	f7fc fa28 	bl	8000118 <strlen>
 8003cc8:	0002      	movs	r2, r0
		
		if(!strncmp(group,(const char*) pcRegisteredCommandString,
 8003cca:	0029      	movs	r1, r5
 8003ccc:	0030      	movs	r0, r6
 8003cce:	f00e f909 	bl	8011ee4 <strncmp>
 8003cd2:	2800      	cmp	r0, #0
 8003cd4:	d035      	beq.n	8003d42 <AddModuleToGroup+0xee>
	    pxCommand->pxNext) {
 8003cd6:	6864      	ldr	r4, [r4, #4]
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =
 8003cd8:	4643      	mov	r3, r8
 8003cda:	601c      	str	r4, [r3, #0]
 8003cdc:	2c00      	cmp	r4, #0
 8003cde:	d1ee      	bne.n	8003cbe <AddModuleToGroup+0x6a>
		}
	}
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i =0; i < MaxNumOfGroups; i++) {
		if(!groupAlias[i][0]) {
 8003ce0:	4b19      	ldr	r3, [pc, #100]	; (8003d48 <AddModuleToGroup+0xf4>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01e      	beq.n	8003d26 <AddModuleToGroup+0xd2>
 8003ce8:	4b17      	ldr	r3, [pc, #92]	; (8003d48 <AddModuleToGroup+0xf4>)
 8003cea:	330a      	adds	r3, #10
	for(i =0; i < MaxNumOfGroups; i++) {
 8003cec:	3401      	adds	r4, #1
		if(!groupAlias[i][0]) {
 8003cee:	781a      	ldrb	r2, [r3, #0]
 8003cf0:	2a00      	cmp	r2, #0
 8003cf2:	d019      	beq.n	8003d28 <AddModuleToGroup+0xd4>
	for(i =0; i < MaxNumOfGroups; i++) {
 8003cf4:	3401      	adds	r4, #1
 8003cf6:	330a      	adds	r3, #10
 8003cf8:	2c0a      	cmp	r4, #10
 8003cfa:	d1f8      	bne.n	8003cee <AddModuleToGroup+0x9a>
			break;
		}
	}
	
	/* 5. Add this module to the new group */
	groupModules[module - 1] |= (0x0001 << i);
 8003cfc:	3f01      	subs	r7, #1
 8003cfe:	4918      	ldr	r1, [pc, #96]	; (8003d60 <AddModuleToGroup+0x10c>)
 8003d00:	007f      	lsls	r7, r7, #1
 8003d02:	2201      	movs	r2, #1
 8003d04:	40a2      	lsls	r2, r4
 8003d06:	5a7b      	ldrh	r3, [r7, r1]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	527b      	strh	r3, [r7, r1]
	
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
//result = SaveEEgroup();			
	return result;
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	e007      	b.n	8003d20 <AddModuleToGroup+0xcc>
			groupModules[module - 1] |= (0x0001 << i);
 8003d10:	3f01      	subs	r7, #1
 8003d12:	4913      	ldr	r1, [pc, #76]	; (8003d60 <AddModuleToGroup+0x10c>)
 8003d14:	007f      	lsls	r7, r7, #1
 8003d16:	2201      	movs	r2, #1
 8003d18:	40a2      	lsls	r2, r4
 8003d1a:	5a7b      	ldrh	r3, [r7, r1]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	527b      	strh	r3, [r7, r1]
}
 8003d20:	bc04      	pop	{r2}
 8003d22:	4690      	mov	r8, r2
 8003d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i =0; i < MaxNumOfGroups; i++) {
 8003d26:	2400      	movs	r4, #0
			strcpy(groupAlias[i],group);
 8003d28:	00a0      	lsls	r0, r4, #2
 8003d2a:	1900      	adds	r0, r0, r4
 8003d2c:	0040      	lsls	r0, r0, #1
 8003d2e:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <AddModuleToGroup+0xf4>)
 8003d30:	1818      	adds	r0, r3, r0
 8003d32:	0031      	movs	r1, r6
 8003d34:	f00e f8ce 	bl	8011ed4 <strcpy>
			break;
 8003d38:	e7e0      	b.n	8003cfc <AddModuleToGroup+0xa8>
		return BOS_ERR_Keyword;
 8003d3a:	2006      	movs	r0, #6
 8003d3c:	e7f0      	b.n	8003d20 <AddModuleToGroup+0xcc>
		return BOS_ERR_ExistingAlias;
 8003d3e:	2007      	movs	r0, #7
 8003d40:	e7ee      	b.n	8003d20 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 8003d42:	2008      	movs	r0, #8
 8003d44:	e7ec      	b.n	8003d20 <AddModuleToGroup+0xcc>
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	20000e5c 	.word	0x20000e5c
 8003d4c:	08016320 	.word	0x08016320
 8003d50:	2000001c 	.word	0x2000001c
 8003d54:	20000f72 	.word	0x20000f72
 8003d58:	20000098 	.word	0x20000098
 8003d5c:	20001104 	.word	0x20001104
 8003d60:	20000ec0 	.word	0x20000ec0

08003d64 <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 8003d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d66:	46ce      	mov	lr, r9
 8003d68:	4647      	mov	r7, r8
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++) {
 8003d6e:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <ReadPortsDir+0x9c>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d03c      	beq.n	8003df0 <ReadPortsDir+0x8c>
 8003d76:	2501      	movs	r5, #1
	BOS_Status result =BOS_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9301      	str	r3, [sp, #4]
		if(i != myID) {
 8003d7c:	4b21      	ldr	r3, [pc, #132]	; (8003e04 <ReadPortsDir+0xa0>)
 8003d7e:	4699      	mov	r9, r3
		}
		else {
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++) {
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
					arrayPortsDir[myID - 1] |= (0x8000 >> (p - 1)); /* Set bit to 1 */
 8003d80:	4b21      	ldr	r3, [pc, #132]	; (8003e08 <ReadPortsDir+0xa4>)
 8003d82:	4698      	mov	r8, r3
 8003d84:	e021      	b.n	8003dca <ReadPortsDir+0x66>
 8003d86:	2600      	movs	r6, #0
			for(uint8_t p =1; p <= NumOfPorts; p++) {
 8003d88:	2401      	movs	r4, #1
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8003d8a:	2780      	movs	r7, #128	; 0x80
 8003d8c:	023f      	lsls	r7, r7, #8
 8003d8e:	e004      	b.n	8003d9a <ReadPortsDir+0x36>
			for(uint8_t p =1; p <= NumOfPorts; p++) {
 8003d90:	3401      	adds	r4, #1
 8003d92:	b2e4      	uxtb	r4, r4
 8003d94:	3601      	adds	r6, #1
 8003d96:	2c07      	cmp	r4, #7
 8003d98:	d011      	beq.n	8003dbe <ReadPortsDir+0x5a>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8003d9a:	0020      	movs	r0, r4
 8003d9c:	f008 fbe8 	bl	800c570 <GetUart>
 8003da0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003da2:	42bb      	cmp	r3, r7
 8003da4:	d1f4      	bne.n	8003d90 <ReadPortsDir+0x2c>
					arrayPortsDir[myID - 1] |= (0x8000 >> (p - 1)); /* Set bit to 1 */
 8003da6:	4b17      	ldr	r3, [pc, #92]	; (8003e04 <ReadPortsDir+0xa0>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	4642      	mov	r2, r8
 8003db0:	5a9a      	ldrh	r2, [r3, r2]
 8003db2:	0039      	movs	r1, r7
 8003db4:	4131      	asrs	r1, r6
 8003db6:	430a      	orrs	r2, r1
 8003db8:	4641      	mov	r1, r8
 8003dba:	525a      	strh	r2, [r3, r1]
 8003dbc:	e7e8      	b.n	8003d90 <ReadPortsDir+0x2c>
	for(uint8_t i =1; i <= N; i++) {
 8003dbe:	3501      	adds	r5, #1
 8003dc0:	b2ed      	uxtb	r5, r5
 8003dc2:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <ReadPortsDir+0x9c>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	42ab      	cmp	r3, r5
 8003dc8:	d314      	bcc.n	8003df4 <ReadPortsDir+0x90>
		if(i != myID) {
 8003dca:	464b      	mov	r3, r9
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	42ab      	cmp	r3, r5
 8003dd0:	d0d9      	beq.n	8003d86 <ReadPortsDir+0x22>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2113      	movs	r1, #19
 8003dd6:	0028      	movs	r0, r5
 8003dd8:	f004 fd90 	bl	80088fc <SendMessageToModule>
			Delay_ms_no_rtos(50);
 8003ddc:	2032      	movs	r0, #50	; 0x32
 8003dde:	f008 f9ed 	bl	800c1bc <StartMilliDelay>
			if(responseStatus != BOS_OK) {
 8003de2:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <ReadPortsDir+0xa8>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0e9      	beq.n	8003dbe <ReadPortsDir+0x5a>
				result =BOS_ERR_NoResponse;
 8003dea:	2302      	movs	r3, #2
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	e7e6      	b.n	8003dbe <ReadPortsDir+0x5a>
	BOS_Status result =BOS_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	9301      	str	r3, [sp, #4]
			}
		}
	}
	
	return result;
}
 8003df4:	9801      	ldr	r0, [sp, #4]
 8003df6:	b003      	add	sp, #12
 8003df8:	bc0c      	pop	{r2, r3}
 8003dfa:	4690      	mov	r8, r2
 8003dfc:	4699      	mov	r9, r3
 8003dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e00:	2000001c 	.word	0x2000001c
 8003e04:	20001076 	.word	0x20001076
 8003e08:	20006db8 	.word	0x20006db8
 8003e0c:	20001110 	.word	0x20001110

08003e10 <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void) {
 8003e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e12:	46c6      	mov	lr, r8
 8003e14:	b500      	push	{lr}
 8003e16:	2500      	movs	r5, #0
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 8003e18:	2401      	movs	r4, #1
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 8003e1a:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <UpdateMyPortsDir+0x54>)
 8003e1c:	4698      	mov	r8, r3
 8003e1e:	4f12      	ldr	r7, [pc, #72]	; (8003e68 <UpdateMyPortsDir+0x58>)
 8003e20:	2680      	movs	r6, #128	; 0x80
 8003e22:	0236      	lsls	r6, r6, #8
 8003e24:	e00a      	b.n	8003e3c <UpdateMyPortsDir+0x2c>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);
 8003e26:	0020      	movs	r0, r4
 8003e28:	f008 fba2 	bl	800c570 <GetUart>
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	f008 fc39 	bl	800c6a4 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 8003e32:	3401      	adds	r4, #1
 8003e34:	b2e4      	uxtb	r4, r4
 8003e36:	3501      	adds	r5, #1
 8003e38:	2c07      	cmp	r4, #7
 8003e3a:	d00f      	beq.n	8003e5c <UpdateMyPortsDir+0x4c>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 8003e3c:	783b      	ldrb	r3, [r7, #0]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	4642      	mov	r2, r8
 8003e44:	5a9b      	ldrh	r3, [r3, r2]
 8003e46:	0032      	movs	r2, r6
 8003e48:	412a      	asrs	r2, r5
 8003e4a:	421a      	tst	r2, r3
 8003e4c:	d1eb      	bne.n	8003e26 <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p), NORMAL);
 8003e4e:	0020      	movs	r0, r4
 8003e50:	f008 fb8e 	bl	800c570 <GetUart>
 8003e54:	2100      	movs	r1, #0
 8003e56:	f008 fc25 	bl	800c6a4 <SwapUartPins>
 8003e5a:	e7ea      	b.n	8003e32 <UpdateMyPortsDir+0x22>
		}
	}

	return result;
}
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	bc04      	pop	{r2}
 8003e60:	4690      	mov	r8, r2
 8003e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e64:	20006db8 	.word	0x20006db8
 8003e68:	20001076 	.word	0x20001076

08003e6c <BOS_Init>:
void BOS_Init(void){
 8003e6c:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 8003e6e:	f008 f85d 	bl	800bf2c <RTC_Init>
	GetTimeDate();
 8003e72:	f008 f8fb 	bl	800c06c <GetTimeDate>
	EE_Init();
 8003e76:	f003 f975 	bl	8007164 <EE_Init>
	GPIO_Init();
 8003e7a:	f007 fdc5 	bl	800ba08 <GPIO_Init>
	DMA_Init();
 8003e7e:	f006 fd45 	bl	800a90c <DMA_Init>
	TIM_USEC_Init();
 8003e82:	f008 f927 	bl	800c0d4 <TIM_USEC_Init>
	CRC_Init();
 8003e86:	f007 fd6b 	bl	800b960 <CRC_Init>
	TIM_MSEC_Init();
 8003e8a:	f008 f955 	bl	800c138 <TIM_MSEC_Init>
	if(IsFactoryReset()) {
 8003e8e:	f007 fe5d 	bl	800bb4c <IsFactoryReset>
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d11a      	bne.n	8003ecc <BOS_Init+0x60>
	if(IsLowerCLIbaud()) {
 8003e96:	f7ff f88b 	bl	8002fb0 <IsLowerCLIbaud>
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	d021      	beq.n	8003ee2 <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag =1;
 8003e9e:	4b3e      	ldr	r3, [pc, #248]	; (8003f98 <BOS_Init+0x12c>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);// Give other modules time to finish factory reset and baudrate check
 8003ea4:	2032      	movs	r0, #50	; 0x32
 8003ea6:	f008 f989 	bl	800c1bc <StartMilliDelay>
		Module_Init();
 8003eaa:	f006 fcc7 	bl	800a83c <Module_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003eae:	4b3b      	ldr	r3, [pc, #236]	; (8003f9c <BOS_Init+0x130>)
 8003eb0:	22e1      	movs	r2, #225	; 0xe1
 8003eb2:	0252      	lsls	r2, r2, #9
 8003eb4:	609a      	str	r2, [r3, #8]
		for(uint8_t port =1; port <= NumOfPorts; port++) {
 8003eb6:	2401      	movs	r4, #1
			UpdateBaudrate(port,BOS.clibaudrate);
 8003eb8:	001d      	movs	r5, r3
 8003eba:	68a9      	ldr	r1, [r5, #8]
 8003ebc:	0020      	movs	r0, r4
 8003ebe:	f008 fbe7 	bl	800c690 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++) {
 8003ec2:	3401      	adds	r4, #1
 8003ec4:	b2e4      	uxtb	r4, r4
 8003ec6:	2c07      	cmp	r4, #7
 8003ec8:	d1f7      	bne.n	8003eba <BOS_Init+0x4e>
 8003eca:	e00f      	b.n	8003eec <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 8003ecc:	f7ff f8be 	bl	800304c <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ed0:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ed4:	4b32      	ldr	r3, [pc, #200]	; (8003fa0 <BOS_Init+0x134>)
 8003ed6:	4a33      	ldr	r2, [pc, #204]	; (8003fa4 <BOS_Init+0x138>)
 8003ed8:	60da      	str	r2, [r3, #12]
 8003eda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	e7fd      	b.n	8003ede <BOS_Init+0x72>
		Delay_ms_no_rtos(50);// Give other modules time to finish factory reset and baudrate check
 8003ee2:	2032      	movs	r0, #50	; 0x32
 8003ee4:	f008 f96a 	bl	800c1bc <StartMilliDelay>
		Module_Init();
 8003ee8:	f006 fca8 	bl	800a83c <Module_Init>
	LoadEEvars();
 8003eec:	f7ff f84e 	bl	8002f8c <LoadEEvars>
	UpdateMyPortsDir();
 8003ef0:	f7ff ff8e 	bl	8003e10 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8003ef4:	f007 f972 	bl	800b1dc <SetupMessagingRxDMAs>
	if(myID == 0) /* Native module */
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	; (8003fa8 <BOS_Init+0x13c>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d037      	beq.n	8003f70 <BOS_Init+0x104>
		IND_ON();
 8003f00:	2580      	movs	r5, #128	; 0x80
 8003f02:	012d      	lsls	r5, r5, #4
 8003f04:	2490      	movs	r4, #144	; 0x90
 8003f06:	05e4      	lsls	r4, r4, #23
 8003f08:	2201      	movs	r2, #1
 8003f0a:	0029      	movs	r1, r5
 8003f0c:	0020      	movs	r0, r4
 8003f0e:	f00b fd75 	bl	800f9fc <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 8003f12:	20fa      	movs	r0, #250	; 0xfa
 8003f14:	0040      	lsls	r0, r0, #1
 8003f16:	f008 f951 	bl	800c1bc <StartMilliDelay>
		IND_OFF();
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	0029      	movs	r1, r5
 8003f1e:	0020      	movs	r0, r4
 8003f20:	f00b fd6c 	bl	800f9fc <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003f24:	2064      	movs	r0, #100	; 0x64
 8003f26:	f008 f949 	bl	800c1bc <StartMilliDelay>
		IND_ON();
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	0029      	movs	r1, r5
 8003f2e:	0020      	movs	r0, r4
 8003f30:	f00b fd64 	bl	800f9fc <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003f34:	2064      	movs	r0, #100	; 0x64
 8003f36:	f008 f941 	bl	800c1bc <StartMilliDelay>
		IND_OFF();
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	0029      	movs	r1, r5
 8003f3e:	0020      	movs	r0, r4
 8003f40:	f00b fd5c 	bl	800f9fc <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003f44:	2064      	movs	r0, #100	; 0x64
 8003f46:	f008 f939 	bl	800c1bc <StartMilliDelay>
		IND_ON();
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	0029      	movs	r1, r5
 8003f4e:	0020      	movs	r0, r4
 8003f50:	f00b fd54 	bl	800f9fc <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);IND_OFF();
 8003f54:	2064      	movs	r0, #100	; 0x64
 8003f56:	f008 f931 	bl	800c1bc <StartMilliDelay>
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	0029      	movs	r1, r5
 8003f5e:	0020      	movs	r0, r4
 8003f60:	f00b fd4c 	bl	800f9fc <HAL_GPIO_WritePin>
	ResetUartORE();
 8003f64:	f002 ff3a 	bl	8006ddc <ResetUartORE>
	BOS_initialized =1;
 8003f68:	4b10      	ldr	r3, [pc, #64]	; (8003fac <BOS_Init+0x140>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	701a      	strb	r2, [r3, #0]
}
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();
 8003f70:	2580      	movs	r5, #128	; 0x80
 8003f72:	012d      	lsls	r5, r5, #4
 8003f74:	2490      	movs	r4, #144	; 0x90
 8003f76:	05e4      	lsls	r4, r4, #23
 8003f78:	2201      	movs	r2, #1
 8003f7a:	0029      	movs	r1, r5
 8003f7c:	0020      	movs	r0, r4
 8003f7e:	f00b fd3d 	bl	800f9fc <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8003f82:	20fa      	movs	r0, #250	; 0xfa
 8003f84:	0040      	lsls	r0, r0, #1
 8003f86:	f008 f919 	bl	800c1bc <StartMilliDelay>
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	0029      	movs	r1, r5
 8003f8e:	0020      	movs	r0, r4
 8003f90:	f00b fd34 	bl	800f9fc <HAL_GPIO_WritePin>
 8003f94:	e7e6      	b.n	8003f64 <BOS_Init+0xf8>
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	20000a76 	.word	0x20000a76
 8003f9c:	20006988 	.word	0x20006988
 8003fa0:	e000ed00 	.word	0xe000ed00
 8003fa4:	05fa0004 	.word	0x05fa0004
 8003fa8:	20001076 	.word	0x20001076
 8003fac:	20000a75 	.word	0x20000a75

08003fb0 <GetDateString>:

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year 
 */
char* GetDateString(void){
 8003fb0:	b510      	push	{r4, lr}
 8003fb2:	b082      	sub	sp, #8
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8003fb4:	201e      	movs	r0, #30
 8003fb6:	f00d fb01 	bl	80115bc <malloc>
 8003fba:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 8003fbc:	221e      	movs	r2, #30
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	f00d fd52 	bl	8011a68 <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],
	    BOS.date.month,BOS.date.day,BOS.date.year);
 8003fc4:	4908      	ldr	r1, [pc, #32]	; (8003fe8 <GetDateString+0x38>)
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],
 8003fc6:	7d8b      	ldrb	r3, [r1, #22]
 8003fc8:	7d0a      	ldrb	r2, [r1, #20]
 8003fca:	3a01      	subs	r2, #1
 8003fcc:	0092      	lsls	r2, r2, #2
 8003fce:	4807      	ldr	r0, [pc, #28]	; (8003fec <GetDateString+0x3c>)
 8003fd0:	5812      	ldr	r2, [r2, r0]
 8003fd2:	8b08      	ldrh	r0, [r1, #24]
 8003fd4:	9001      	str	r0, [sp, #4]
 8003fd6:	7d49      	ldrb	r1, [r1, #21]
 8003fd8:	9100      	str	r1, [sp, #0]
 8003fda:	4905      	ldr	r1, [pc, #20]	; (8003ff0 <GetDateString+0x40>)
 8003fdc:	0020      	movs	r0, r4
 8003fde:	f00d ff3d 	bl	8011e5c <sprintf>
	return buffer;
}
 8003fe2:	0020      	movs	r0, r4
 8003fe4:	b002      	add	sp, #8
 8003fe6:	bd10      	pop	{r4, pc}
 8003fe8:	20006988 	.word	0x20006988
 8003fec:	0801686c 	.word	0x0801686c
 8003ff0:	08016590 	.word	0x08016590

08003ff4 <Bridge>:

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together
 */
BOS_Status Bridge(uint8_t port1, uint8_t port2){
 8003ff4:	b500      	push	{lr}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	000a      	movs	r2, r1
// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <Bridge+0x24>)
 8003ffc:	7819      	ldrb	r1, [r3, #0]
 8003ffe:	2301      	movs	r3, #1
 8004000:	9303      	str	r3, [sp, #12]
 8004002:	3b02      	subs	r3, #2
 8004004:	9302      	str	r3, [sp, #8]
 8004006:	9301      	str	r3, [sp, #4]
 8004008:	3303      	adds	r3, #3
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	000b      	movs	r3, r1
 800400e:	f004 fc9b 	bl	8008948 <StartScastDMAStream>
	    0xFFFFFFFF,0xFFFFFFFF,true);
}
 8004012:	b005      	add	sp, #20
 8004014:	bd00      	pop	{pc}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	20001076 	.word	0x20001076

0800401c <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports
 */
BOS_Status Unbridge(uint8_t port1, uint8_t port2){
 800401c:	b530      	push	{r4, r5, lr}
 800401e:	b087      	sub	sp, #28
 8004020:	0004      	movs	r4, r0
 8004022:	000d      	movs	r5, r1
// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004024:	2300      	movs	r3, #0
 8004026:	9304      	str	r3, [sp, #16]
 8004028:	9303      	str	r3, [sp, #12]
 800402a:	9302      	str	r3, [sp, #8]
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2200      	movs	r2, #0
 8004032:	2100      	movs	r1, #0
 8004034:	2000      	movs	r0, #0
 8004036:	f7fe fe0d 	bl	8002c54 <SaveEEstreams>
	
// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0
 800403a:	1e62      	subs	r2, r4, #1
 800403c:	00d3      	lsls	r3, r2, #3
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4a14      	ldr	r2, [pc, #80]	; (8004094 <Unbridge+0x78>)
 8004044:	589b      	ldr	r3, [r3, r2]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d015      	beq.n	8004076 <Unbridge+0x5a>
	    && streamDMA[port2 - 1].Instance != 0) {
 800404a:	1e6a      	subs	r2, r5, #1
 800404c:	00d3      	lsls	r3, r2, #3
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	4a10      	ldr	r2, [pc, #64]	; (8004094 <Unbridge+0x78>)
 8004054:	589b      	ldr	r3, [r3, r2]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d104      	bne.n	8004064 <Unbridge+0x48>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0) {
		SwitchStreamDMAToMsg(port1);
 800405a:	0020      	movs	r0, r4
 800405c:	f002 fe32 	bl	8006cc4 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004060:	2000      	movs	r0, #0
 8004062:	e006      	b.n	8004072 <Unbridge+0x56>
		SwitchStreamDMAToMsg(port1);
 8004064:	0020      	movs	r0, r4
 8004066:	f002 fe2d 	bl	8006cc4 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 800406a:	0028      	movs	r0, r5
 800406c:	f002 fe2a 	bl	8006cc4 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004070:	2000      	movs	r0, #0
		return BOS_OK;
	}
	else {
		return BOS_ERR_WrongValue;
	}
}
 8004072:	b007      	add	sp, #28
 8004074:	bd30      	pop	{r4, r5, pc}
	else if(streamDMA[port2 - 1].Instance != 0) {
 8004076:	1e6a      	subs	r2, r5, #1
 8004078:	00d3      	lsls	r3, r2, #3
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4a05      	ldr	r2, [pc, #20]	; (8004094 <Unbridge+0x78>)
 8004080:	589b      	ldr	r3, [r3, r2]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <Unbridge+0x74>
		SwitchStreamDMAToMsg(port2);
 8004086:	0028      	movs	r0, r5
 8004088:	f002 fe1c 	bl	8006cc4 <SwitchStreamDMAToMsg>
		return BOS_OK;
 800408c:	2000      	movs	r0, #0
 800408e:	e7f0      	b.n	8004072 <Unbridge+0x56>
		return BOS_ERR_WrongValue;
 8004090:	2068      	movs	r0, #104	; 0x68
 8004092:	e7ee      	b.n	8004072 <Unbridge+0x56>
 8004094:	20001958 	.word	0x20001958

08004098 <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 8004098:	b570      	push	{r4, r5, r6, lr}
 800409a:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++) {
 800409c:	7804      	ldrb	r4, [r0, #0]
 800409e:	2c00      	cmp	r4, #0
 80040a0:	d010      	beq.n	80040c4 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 80040a2:	2603      	movs	r6, #3
 80040a4:	e004      	b.n	80040b0 <StringToLowerCase+0x18>
 80040a6:	702a      	strb	r2, [r5, #0]
 80040a8:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++) {
 80040aa:	782c      	ldrb	r4, [r5, #0]
 80040ac:	2c00      	cmp	r4, #0
 80040ae:	d009      	beq.n	80040c4 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 80040b0:	f00d fa76 	bl	80115a0 <__locale_ctype_ptr>
 80040b4:	1900      	adds	r0, r0, r4
 80040b6:	7843      	ldrb	r3, [r0, #1]
 80040b8:	4033      	ands	r3, r6
 80040ba:	0022      	movs	r2, r4
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d1f2      	bne.n	80040a6 <StringToLowerCase+0xe>
 80040c0:	3220      	adds	r2, #32
 80040c2:	e7f0      	b.n	80040a6 <StringToLowerCase+0xe>
	}
}
 80040c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080040c8 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 80040c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ca:	46c6      	mov	lr, r8
 80040cc:	b500      	push	{lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS) {
 80040d2:	4bdc      	ldr	r3, [pc, #880]	; (8004444 <ParseSnippetCondition+0x37c>)
 80040d4:	781c      	ldrb	r4, [r3, #0]
 80040d6:	2c05      	cmp	r4, #5
 80040d8:	d100      	bne.n	80040dc <ParseSnippetCondition+0x14>
 80040da:	e210      	b.n	80044fe <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
// Initialize the next empty location
	else {
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 80040dc:	49da      	ldr	r1, [pc, #872]	; (8004448 <ParseSnippetCondition+0x380>)
 80040de:	00a3      	lsls	r3, r4, #2
 80040e0:	191a      	adds	r2, r3, r4
 80040e2:	0092      	lsls	r2, r2, #2
 80040e4:	2000      	movs	r0, #0
 80040e6:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 80040e8:	191a      	adds	r2, r3, r4
 80040ea:	0092      	lsls	r2, r2, #2
 80040ec:	188a      	adds	r2, r1, r2
 80040ee:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 80040f0:	1918      	adds	r0, r3, r4
 80040f2:	0080      	lsls	r0, r0, #2
 80040f4:	3002      	adds	r0, #2
 80040f6:	1840      	adds	r0, r0, r1
 80040f8:	2204      	movs	r2, #4
 80040fa:	2100      	movs	r1, #0
 80040fc:	f00d fcb4 	bl	8011a68 <memset>
	}
	
// B. Parse Snippets based on their condition type 
	
// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.') {
 8004100:	782b      	ldrb	r3, [r5, #0]
 8004102:	2b62      	cmp	r3, #98	; 0x62
 8004104:	d102      	bne.n	800410c <ParseSnippetCondition+0x44>
 8004106:	78ab      	ldrb	r3, [r5, #2]
 8004108:	2b2e      	cmp	r3, #46	; 0x2e
 800410a:	d032      	beq.n	8004172 <ParseSnippetCondition+0xaa>
			++numOfRecordedSnippets;// Record a successful Snippet			
		}
	}
// Module-related conditions (local only for now)
	else {
		strcpy((char*) cInputString,string);
 800410c:	4ecf      	ldr	r6, [pc, #828]	; (800444c <ParseSnippetCondition+0x384>)
 800410e:	0029      	movs	r1, r5
 8004110:	0030      	movs	r0, r6
 8004112:	f00d fedf 	bl	8011ed4 <strcpy>
		
// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char*) cInputString," ");
 8004116:	4cce      	ldr	r4, [pc, #824]	; (8004450 <ParseSnippetCondition+0x388>)
 8004118:	0021      	movs	r1, r4
 800411a:	0030      	movs	r0, r6
 800411c:	f00e fd5a 	bl	8012bd4 <strtok>
 8004120:	0005      	movs	r5, r0
		secondPart =strtok( NULL," ");
 8004122:	0021      	movs	r1, r4
 8004124:	2000      	movs	r0, #0
 8004126:	f00e fd55 	bl	8012bd4 <strtok>
 800412a:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 800412c:	0021      	movs	r1, r4
 800412e:	2000      	movs	r0, #0
 8004130:	f00e fd50 	bl	8012bd4 <strtok>
 8004134:	0004      	movs	r4, r0
		
// Check if first part is module parameter or event
		if(firstPart == NULL) {
 8004136:	2d00      	cmp	r5, #0
 8004138:	d100      	bne.n	800413c <ParseSnippetCondition+0x74>
 800413a:	e1e5      	b.n	8004508 <ParseSnippetCondition+0x440>
			return BOS_ERR_WrongParam;
		}
		else {
			modPar1 =IsModuleParameter(firstPart);
 800413c:	0028      	movs	r0, r5
 800413e:	f7fe ffad 	bl	800309c <IsModuleParameter>
 8004142:	1e05      	subs	r5, r0, #0
// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL) {
 8004144:	d100      	bne.n	8004148 <ParseSnippetCondition+0x80>
 8004146:	e18f      	b.n	8004468 <ParseSnippetCondition+0x3a0>
 8004148:	2e00      	cmp	r6, #0
 800414a:	d000      	beq.n	800414e <ParseSnippetCondition+0x86>
 800414c:	e18e      	b.n	800446c <ParseSnippetCondition+0x3a4>
				
				++numOfRecordedSnippets;// Record a successful Snippet
				return BOS_OK;
			}
			else {
				return BOS_ERR_WrongParam;
 800414e:	2067      	movs	r0, #103	; 0x67
			if(modPar1 && secondPart == NULL && thirdPart == NULL) {
 8004150:	2c00      	cmp	r4, #0
 8004152:	d000      	beq.n	8004156 <ParseSnippetCondition+0x8e>
 8004154:	e1d4      	b.n	8004500 <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType =
 8004156:	4cbb      	ldr	r4, [pc, #748]	; (8004444 <ParseSnippetCondition+0x37c>)
 8004158:	7823      	ldrb	r3, [r4, #0]
 800415a:	49bb      	ldr	r1, [pc, #748]	; (8004448 <ParseSnippetCondition+0x380>)
 800415c:	009a      	lsls	r2, r3, #2
 800415e:	18d0      	adds	r0, r2, r3
 8004160:	0080      	lsls	r0, r0, #2
 8004162:	3602      	adds	r6, #2
 8004164:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;// Leaving first buffer byte for remote module ID
 8004166:	180a      	adds	r2, r1, r0
 8004168:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;// Record a successful Snippet	
 800416a:	3301      	adds	r3, #1
 800416c:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 800416e:	2000      	movs	r0, #0
 8004170:	e1c6      	b.n	8004500 <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))// Valid port number
 8004172:	786e      	ldrb	r6, [r5, #1]
 8004174:	3e30      	subs	r6, #48	; 0x30
 8004176:	b2f6      	uxtb	r6, r6
	BOS_Status status =BOS_OK;
 8004178:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))// Valid port number
 800417a:	2e06      	cmp	r6, #6
 800417c:	d900      	bls.n	8004180 <ParseSnippetCondition+0xb8>
 800417e:	e1bf      	b.n	8004500 <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType =
 8004180:	4ab1      	ldr	r2, [pc, #708]	; (8004448 <ParseSnippetCondition+0x380>)
 8004182:	00a3      	lsls	r3, r4, #2
 8004184:	1919      	adds	r1, r3, r4
 8004186:	0089      	lsls	r1, r1, #2
 8004188:	3001      	adds	r0, #1
 800418a:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;// No math operations
 800418c:	1853      	adds	r3, r2, r1
 800418e:	2200      	movs	r2, #0
 8004190:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;// Store button port number	
 8004192:	709e      	strb	r6, [r3, #2]
			if(!strncmp((char*) &string[3],"clicked",7)) {
 8004194:	1cef      	adds	r7, r5, #3
 8004196:	3207      	adds	r2, #7
 8004198:	49ae      	ldr	r1, [pc, #696]	; (8004454 <ParseSnippetCondition+0x38c>)
 800419a:	0038      	movs	r0, r7
 800419c:	f00d fea2 	bl	8011ee4 <strncmp>
 80041a0:	2800      	cmp	r0, #0
 80041a2:	d121      	bne.n	80041e8 <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 80041a4:	00a3      	lsls	r3, r4, #2
 80041a6:	191c      	adds	r4, r3, r4
 80041a8:	00a4      	lsls	r4, r4, #2
 80041aa:	4ba7      	ldr	r3, [pc, #668]	; (8004448 <ParseSnippetCondition+0x380>)
 80041ac:	191c      	adds	r4, r3, r4
 80041ae:	2305      	movs	r3, #5
 80041b0:	70e3      	strb	r3, [r4, #3]
				if( (button[port].events & BUTTON_EVENT_CLICKED)
 80041b2:	00f2      	lsls	r2, r6, #3
 80041b4:	1992      	adds	r2, r2, r6
 80041b6:	4ba8      	ldr	r3, [pc, #672]	; (8004458 <ParseSnippetCondition+0x390>)
 80041b8:	189b      	adds	r3, r3, r2
 80041ba:	7a1b      	ldrb	r3, [r3, #8]
 80041bc:	07db      	lsls	r3, r3, #31
 80041be:	d504      	bpl.n	80041ca <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;// Record a successful Snippet			
 80041c0:	4aa0      	ldr	r2, [pc, #640]	; (8004444 <ParseSnippetCondition+0x37c>)
 80041c2:	7813      	ldrb	r3, [r2, #0]
 80041c4:	3301      	adds	r3, #1
 80041c6:	7013      	strb	r3, [r2, #0]
 80041c8:	e19a      	b.n	8004500 <ParseSnippetCondition+0x438>
				SetButtonEvents(port,1,0,0,0,0,0,0,0,
 80041ca:	2301      	movs	r3, #1
 80041cc:	9305      	str	r3, [sp, #20]
 80041ce:	2300      	movs	r3, #0
 80041d0:	9304      	str	r3, [sp, #16]
 80041d2:	9303      	str	r3, [sp, #12]
 80041d4:	9302      	str	r3, [sp, #8]
 80041d6:	9301      	str	r3, [sp, #4]
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	2200      	movs	r2, #0
 80041dc:	2101      	movs	r1, #1
 80041de:	0030      	movs	r0, r6
 80041e0:	f003 fcb4 	bl	8007b4c <SetButtonEvents>
				status =BOS_OK;
 80041e4:	2000      	movs	r0, #0
 80041e6:	e7eb      	b.n	80041c0 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char*) &string[3],"double clicked",14)) {
 80041e8:	220e      	movs	r2, #14
 80041ea:	499c      	ldr	r1, [pc, #624]	; (800445c <ParseSnippetCondition+0x394>)
 80041ec:	0038      	movs	r0, r7
 80041ee:	f00d fe79 	bl	8011ee4 <strncmp>
 80041f2:	2800      	cmp	r0, #0
 80041f4:	d11c      	bne.n	8004230 <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 80041f6:	00a3      	lsls	r3, r4, #2
 80041f8:	191c      	adds	r4, r3, r4
 80041fa:	00a4      	lsls	r4, r4, #2
 80041fc:	4b92      	ldr	r3, [pc, #584]	; (8004448 <ParseSnippetCondition+0x380>)
 80041fe:	191c      	adds	r4, r3, r4
 8004200:	2306      	movs	r3, #6
 8004202:	70e3      	strb	r3, [r4, #3]
				if( (button[port].events & BUTTON_EVENT_DBL_CLICKED)
 8004204:	00f2      	lsls	r2, r6, #3
 8004206:	1992      	adds	r2, r2, r6
 8004208:	4b93      	ldr	r3, [pc, #588]	; (8004458 <ParseSnippetCondition+0x390>)
 800420a:	189b      	adds	r3, r3, r2
 800420c:	7a1b      	ldrb	r3, [r3, #8]
 800420e:	079b      	lsls	r3, r3, #30
 8004210:	d4d6      	bmi.n	80041c0 <ParseSnippetCondition+0xf8>
				SetButtonEvents(port,0,1,0,0,0,0,0,0,
 8004212:	2301      	movs	r3, #1
 8004214:	9305      	str	r3, [sp, #20]
 8004216:	2300      	movs	r3, #0
 8004218:	9304      	str	r3, [sp, #16]
 800421a:	9303      	str	r3, [sp, #12]
 800421c:	9302      	str	r3, [sp, #8]
 800421e:	9301      	str	r3, [sp, #4]
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	2201      	movs	r2, #1
 8004224:	2100      	movs	r1, #0
 8004226:	0030      	movs	r0, r6
 8004228:	f003 fc90 	bl	8007b4c <SetButtonEvents>
				status =BOS_OK;
 800422c:	2000      	movs	r0, #0
 800422e:	e7c7      	b.n	80041c0 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char*) &string[3],"pressed for ",12)) {
 8004230:	220c      	movs	r2, #12
 8004232:	498b      	ldr	r1, [pc, #556]	; (8004460 <ParseSnippetCondition+0x398>)
 8004234:	0038      	movs	r0, r7
 8004236:	f00d fe55 	bl	8011ee4 <strncmp>
 800423a:	2800      	cmp	r0, #0
 800423c:	d17a      	bne.n	8004334 <ParseSnippetCondition+0x26c>
				if(!button[port].pressedX1Sec) {
 800423e:	00f2      	lsls	r2, r6, #3
 8004240:	1992      	adds	r2, r2, r6
 8004242:	4b85      	ldr	r3, [pc, #532]	; (8004458 <ParseSnippetCondition+0x390>)
 8004244:	189b      	adds	r3, r3, r2
 8004246:	789b      	ldrb	r3, [r3, #2]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d030      	beq.n	80042ae <ParseSnippetCondition+0x1e6>
				else if(!button[port].pressedX2Sec) {
 800424c:	00f2      	lsls	r2, r6, #3
 800424e:	1992      	adds	r2, r2, r6
 8004250:	4b81      	ldr	r3, [pc, #516]	; (8004458 <ParseSnippetCondition+0x390>)
 8004252:	189b      	adds	r3, r3, r2
 8004254:	78db      	ldrb	r3, [r3, #3]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d04a      	beq.n	80042f0 <ParseSnippetCondition+0x228>
				else if(!button[port].pressedX3Sec) {
 800425a:	00f2      	lsls	r2, r6, #3
 800425c:	1992      	adds	r2, r2, r6
 800425e:	4b7e      	ldr	r3, [pc, #504]	; (8004458 <ParseSnippetCondition+0x390>)
 8004260:	189b      	adds	r3, r3, r2
 8004262:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004264:	200c      	movs	r0, #12
				else if(!button[port].pressedX3Sec) {
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1aa      	bne.n	80041c0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =
 800426a:	4f77      	ldr	r7, [pc, #476]	; (8004448 <ParseSnippetCondition+0x380>)
 800426c:	00a3      	lsls	r3, r4, #2
 800426e:	191b      	adds	r3, r3, r4
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	18fb      	adds	r3, r7, r3
 8004274:	220b      	movs	r2, #11
 8004276:	70da      	strb	r2, [r3, #3]
					    (char*) &string[15]);
 8004278:	0028      	movs	r0, r5
 800427a:	300f      	adds	r0, #15
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi(
 800427c:	f00d f95b 	bl	8011536 <atoi>
 8004280:	b2c0      	uxtb	r0, r0
 8004282:	4b70      	ldr	r3, [pc, #448]	; (8004444 <ParseSnippetCondition+0x37c>)
 8004284:	781a      	ldrb	r2, [r3, #0]
 8004286:	0093      	lsls	r3, r2, #2
 8004288:	189b      	adds	r3, r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	18ff      	adds	r7, r7, r3
 800428e:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,
 8004290:	2301      	movs	r3, #1
 8004292:	9305      	str	r3, [sp, #20]
 8004294:	2300      	movs	r3, #0
 8004296:	9304      	str	r3, [sp, #16]
 8004298:	9303      	str	r3, [sp, #12]
 800429a:	9302      	str	r3, [sp, #8]
 800429c:	9001      	str	r0, [sp, #4]
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	2200      	movs	r2, #0
 80042a2:	2100      	movs	r1, #0
 80042a4:	0030      	movs	r0, r6
 80042a6:	f003 fc51 	bl	8007b4c <SetButtonEvents>
					status =BOS_OK;
 80042aa:	2000      	movs	r0, #0
 80042ac:	e788      	b.n	80041c0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =
 80042ae:	4f66      	ldr	r7, [pc, #408]	; (8004448 <ParseSnippetCondition+0x380>)
 80042b0:	00a3      	lsls	r3, r4, #2
 80042b2:	191b      	adds	r3, r3, r4
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	2209      	movs	r2, #9
 80042ba:	70da      	strb	r2, [r3, #3]
					    (char*) &string[15]);
 80042bc:	0028      	movs	r0, r5
 80042be:	300f      	adds	r0, #15
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi(
 80042c0:	f00d f939 	bl	8011536 <atoi>
 80042c4:	b2c3      	uxtb	r3, r0
 80042c6:	4a5f      	ldr	r2, [pc, #380]	; (8004444 <ParseSnippetCondition+0x37c>)
 80042c8:	7811      	ldrb	r1, [r2, #0]
 80042ca:	008a      	lsls	r2, r1, #2
 80042cc:	1852      	adds	r2, r2, r1
 80042ce:	0092      	lsls	r2, r2, #2
 80042d0:	18bf      	adds	r7, r7, r2
 80042d2:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port,0,0,
 80042d4:	2201      	movs	r2, #1
 80042d6:	9205      	str	r2, [sp, #20]
 80042d8:	2200      	movs	r2, #0
 80042da:	9204      	str	r2, [sp, #16]
 80042dc:	9203      	str	r2, [sp, #12]
 80042de:	9202      	str	r2, [sp, #8]
 80042e0:	9201      	str	r2, [sp, #4]
 80042e2:	9200      	str	r2, [sp, #0]
 80042e4:	2100      	movs	r1, #0
 80042e6:	0030      	movs	r0, r6
 80042e8:	f003 fc30 	bl	8007b4c <SetButtonEvents>
					status =BOS_OK;
 80042ec:	2000      	movs	r0, #0
 80042ee:	e767      	b.n	80041c0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =
 80042f0:	4f55      	ldr	r7, [pc, #340]	; (8004448 <ParseSnippetCondition+0x380>)
 80042f2:	00a3      	lsls	r3, r4, #2
 80042f4:	191b      	adds	r3, r3, r4
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	220a      	movs	r2, #10
 80042fc:	70da      	strb	r2, [r3, #3]
					    (char*) &string[15]);
 80042fe:	0028      	movs	r0, r5
 8004300:	300f      	adds	r0, #15
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi(
 8004302:	f00d f918 	bl	8011536 <atoi>
 8004306:	b2c0      	uxtb	r0, r0
 8004308:	4b4e      	ldr	r3, [pc, #312]	; (8004444 <ParseSnippetCondition+0x37c>)
 800430a:	781a      	ldrb	r2, [r3, #0]
 800430c:	0093      	lsls	r3, r2, #2
 800430e:	189b      	adds	r3, r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	18ff      	adds	r7, r7, r3
 8004314:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,
 8004316:	2301      	movs	r3, #1
 8004318:	9305      	str	r3, [sp, #20]
 800431a:	2300      	movs	r3, #0
 800431c:	9304      	str	r3, [sp, #16]
 800431e:	9303      	str	r3, [sp, #12]
 8004320:	9302      	str	r3, [sp, #8]
 8004322:	9301      	str	r3, [sp, #4]
 8004324:	9000      	str	r0, [sp, #0]
 8004326:	2200      	movs	r2, #0
 8004328:	2100      	movs	r1, #0
 800432a:	0030      	movs	r0, r6
 800432c:	f003 fc0e 	bl	8007b4c <SetButtonEvents>
					status =BOS_OK;
 8004330:	2000      	movs	r0, #0
 8004332:	e745      	b.n	80041c0 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char*) &string[3],"released for ",13)) {
 8004334:	220d      	movs	r2, #13
 8004336:	494b      	ldr	r1, [pc, #300]	; (8004464 <ParseSnippetCondition+0x39c>)
 8004338:	0038      	movs	r0, r7
 800433a:	f00d fdd3 	bl	8011ee4 <strncmp>
 800433e:	0003      	movs	r3, r0
	BOS_Status status =BOS_OK;
 8004340:	2000      	movs	r0, #0
			else if(!strncmp((char*) &string[3],"released for ",13)) {
 8004342:	2b00      	cmp	r3, #0
 8004344:	d000      	beq.n	8004348 <ParseSnippetCondition+0x280>
 8004346:	e73b      	b.n	80041c0 <ParseSnippetCondition+0xf8>
				if(!button[port].releasedY1Sec) {
 8004348:	00f2      	lsls	r2, r6, #3
 800434a:	1992      	adds	r2, r2, r6
 800434c:	4b42      	ldr	r3, [pc, #264]	; (8004458 <ParseSnippetCondition+0x390>)
 800434e:	189b      	adds	r3, r3, r2
 8004350:	795b      	ldrb	r3, [r3, #5]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d031      	beq.n	80043ba <ParseSnippetCondition+0x2f2>
				else if(!button[port].releasedY2Sec) {
 8004356:	00f2      	lsls	r2, r6, #3
 8004358:	1992      	adds	r2, r2, r6
 800435a:	4b3f      	ldr	r3, [pc, #252]	; (8004458 <ParseSnippetCondition+0x390>)
 800435c:	189b      	adds	r3, r3, r2
 800435e:	799b      	ldrb	r3, [r3, #6]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d04c      	beq.n	80043fe <ParseSnippetCondition+0x336>
				else if(!button[port].releasedY3Sec) {
 8004364:	00f2      	lsls	r2, r6, #3
 8004366:	1992      	adds	r2, r2, r6
 8004368:	4b3b      	ldr	r3, [pc, #236]	; (8004458 <ParseSnippetCondition+0x390>)
 800436a:	189b      	adds	r3, r3, r2
 800436c:	79db      	ldrb	r3, [r3, #7]
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 800436e:	200d      	movs	r0, #13
				else if(!button[port].releasedY3Sec) {
 8004370:	2b00      	cmp	r3, #0
 8004372:	d000      	beq.n	8004376 <ParseSnippetCondition+0x2ae>
 8004374:	e724      	b.n	80041c0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =
 8004376:	4f34      	ldr	r7, [pc, #208]	; (8004448 <ParseSnippetCondition+0x380>)
 8004378:	3314      	adds	r3, #20
 800437a:	4698      	mov	r8, r3
 800437c:	435c      	muls	r4, r3
 800437e:	193c      	adds	r4, r7, r4
 8004380:	3b06      	subs	r3, #6
 8004382:	70e3      	strb	r3, [r4, #3]
					    (char*) &string[16]);
 8004384:	0028      	movs	r0, r5
 8004386:	3010      	adds	r0, #16
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi(
 8004388:	f00d f8d5 	bl	8011536 <atoi>
 800438c:	b2c0      	uxtb	r0, r0
 800438e:	4b2d      	ldr	r3, [pc, #180]	; (8004444 <ParseSnippetCondition+0x37c>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	4642      	mov	r2, r8
 8004394:	4353      	muls	r3, r2
 8004396:	18ff      	adds	r7, r7, r3
 8004398:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,
 800439a:	2301      	movs	r3, #1
 800439c:	9305      	str	r3, [sp, #20]
 800439e:	9004      	str	r0, [sp, #16]
 80043a0:	2400      	movs	r4, #0
 80043a2:	9403      	str	r4, [sp, #12]
 80043a4:	9402      	str	r4, [sp, #8]
 80043a6:	9401      	str	r4, [sp, #4]
 80043a8:	9400      	str	r4, [sp, #0]
 80043aa:	0023      	movs	r3, r4
 80043ac:	0022      	movs	r2, r4
 80043ae:	0021      	movs	r1, r4
 80043b0:	0030      	movs	r0, r6
 80043b2:	f003 fbcb 	bl	8007b4c <SetButtonEvents>
					status =BOS_OK;
 80043b6:	0020      	movs	r0, r4
 80043b8:	e702      	b.n	80041c0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =
 80043ba:	4f23      	ldr	r7, [pc, #140]	; (8004448 <ParseSnippetCondition+0x380>)
 80043bc:	00a3      	lsls	r3, r4, #2
 80043be:	191b      	adds	r3, r3, r4
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	220c      	movs	r2, #12
 80043c6:	70da      	strb	r2, [r3, #3]
					    (char*) &string[16]);
 80043c8:	0028      	movs	r0, r5
 80043ca:	3010      	adds	r0, #16
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi(
 80043cc:	f00d f8b3 	bl	8011536 <atoi>
 80043d0:	b2c0      	uxtb	r0, r0
 80043d2:	4b1c      	ldr	r3, [pc, #112]	; (8004444 <ParseSnippetCondition+0x37c>)
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	0093      	lsls	r3, r2, #2
 80043d8:	189b      	adds	r3, r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	18ff      	adds	r7, r7, r3
 80043de:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,
 80043e0:	2301      	movs	r3, #1
 80043e2:	9305      	str	r3, [sp, #20]
 80043e4:	2300      	movs	r3, #0
 80043e6:	9304      	str	r3, [sp, #16]
 80043e8:	9303      	str	r3, [sp, #12]
 80043ea:	9002      	str	r0, [sp, #8]
 80043ec:	9301      	str	r3, [sp, #4]
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	2200      	movs	r2, #0
 80043f2:	2100      	movs	r1, #0
 80043f4:	0030      	movs	r0, r6
 80043f6:	f003 fba9 	bl	8007b4c <SetButtonEvents>
					status =BOS_OK;
 80043fa:	2000      	movs	r0, #0
 80043fc:	e6e0      	b.n	80041c0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =
 80043fe:	4f12      	ldr	r7, [pc, #72]	; (8004448 <ParseSnippetCondition+0x380>)
 8004400:	00a3      	lsls	r3, r4, #2
 8004402:	191b      	adds	r3, r3, r4
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	220d      	movs	r2, #13
 800440a:	70da      	strb	r2, [r3, #3]
					    (char*) &string[16]);
 800440c:	0028      	movs	r0, r5
 800440e:	3010      	adds	r0, #16
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi(
 8004410:	f00d f891 	bl	8011536 <atoi>
 8004414:	b2c0      	uxtb	r0, r0
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <ParseSnippetCondition+0x37c>)
 8004418:	781a      	ldrb	r2, [r3, #0]
 800441a:	0093      	lsls	r3, r2, #2
 800441c:	189b      	adds	r3, r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	18ff      	adds	r7, r7, r3
 8004422:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,
 8004424:	2301      	movs	r3, #1
 8004426:	9305      	str	r3, [sp, #20]
 8004428:	2300      	movs	r3, #0
 800442a:	9304      	str	r3, [sp, #16]
 800442c:	9003      	str	r0, [sp, #12]
 800442e:	9302      	str	r3, [sp, #8]
 8004430:	9301      	str	r3, [sp, #4]
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	2200      	movs	r2, #0
 8004436:	2100      	movs	r1, #0
 8004438:	0030      	movs	r0, r6
 800443a:	f003 fb87 	bl	8007b4c <SetButtonEvents>
					status =BOS_OK;
 800443e:	2000      	movs	r0, #0
 8004440:	e6be      	b.n	80041c0 <ParseSnippetCondition+0xf8>
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	2000121f 	.word	0x2000121f
 8004448:	200069a4 	.word	0x200069a4
 800444c:	20001184 	.word	0x20001184
 8004450:	080163ec 	.word	0x080163ec
 8004454:	080178f8 	.word	0x080178f8
 8004458:	20001508 	.word	0x20001508
 800445c:	08016a70 	.word	0x08016a70
 8004460:	08016a80 	.word	0x08016a80
 8004464:	08016a90 	.word	0x08016a90
			else if(secondPart != NULL && thirdPart != NULL) {
 8004468:	2e00      	cmp	r6, #0
 800446a:	d04f      	beq.n	800450c <ParseSnippetCondition+0x444>
 800446c:	2c00      	cmp	r4, #0
 800446e:	d04f      	beq.n	8004510 <ParseSnippetCondition+0x448>
				modPar2 =IsModuleParameter(thirdPart);
 8004470:	0020      	movs	r0, r4
 8004472:	f7fe fe13 	bl	800309c <IsModuleParameter>
				if(modPar2)// Found a module parameter
 8004476:	2800      	cmp	r0, #0
 8004478:	d024      	beq.n	80044c4 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType =
 800447a:	4b27      	ldr	r3, [pc, #156]	; (8004518 <ParseSnippetCondition+0x450>)
 800447c:	781c      	ldrb	r4, [r3, #0]
 800447e:	4a27      	ldr	r2, [pc, #156]	; (800451c <ParseSnippetCondition+0x454>)
 8004480:	00a3      	lsls	r3, r4, #2
 8004482:	1919      	adds	r1, r3, r4
 8004484:	0089      	lsls	r1, r1, #2
 8004486:	2704      	movs	r7, #4
 8004488:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;// Leaving first buffer byte for remote module ID
 800448a:	1919      	adds	r1, r3, r4
 800448c:	0089      	lsls	r1, r1, #2
 800448e:	1851      	adds	r1, r2, r1
 8004490:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;// Leaving first buffer byte for remote module ID				
 8004492:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator =
 8004494:	4d20      	ldr	r5, [pc, #128]	; (8004518 <ParseSnippetCondition+0x450>)
 8004496:	782c      	ldrb	r4, [r5, #0]
				    IsMathOperator(secondPart);
 8004498:	0030      	movs	r0, r6
 800449a:	f7fe fe0b 	bl	80030b4 <IsMathOperator>
				snippets[numOfRecordedSnippets].cond.mathOperator =
 800449e:	491f      	ldr	r1, [pc, #124]	; (800451c <ParseSnippetCondition+0x454>)
 80044a0:	00a3      	lsls	r3, r4, #2
 80044a2:	191b      	adds	r3, r3, r4
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	18cb      	adds	r3, r1, r3
 80044a8:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 80044aa:	782a      	ldrb	r2, [r5, #0]
 80044ac:	0093      	lsls	r3, r2, #2
 80044ae:	189b      	adds	r3, r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	18cb      	adds	r3, r1, r3
 80044b4:	785b      	ldrb	r3, [r3, #1]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d02c      	beq.n	8004514 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;// Record a successful Snippet
 80044ba:	3201      	adds	r2, #1
 80044bc:	4b16      	ldr	r3, [pc, #88]	; (8004518 <ParseSnippetCondition+0x450>)
 80044be:	701a      	strb	r2, [r3, #0]
				return BOS_OK;
 80044c0:	2000      	movs	r0, #0
 80044c2:	e01d      	b.n	8004500 <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType =
 80044c4:	4b14      	ldr	r3, [pc, #80]	; (8004518 <ParseSnippetCondition+0x450>)
 80044c6:	4698      	mov	r8, r3
 80044c8:	781a      	ldrb	r2, [r3, #0]
 80044ca:	4f14      	ldr	r7, [pc, #80]	; (800451c <ParseSnippetCondition+0x454>)
 80044cc:	0093      	lsls	r3, r2, #2
 80044ce:	1899      	adds	r1, r3, r2
 80044d0:	0089      	lsls	r1, r1, #2
 80044d2:	2003      	movs	r0, #3
 80044d4:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;// Leaving first buffer byte for remote module ID
 80044d6:	187b      	adds	r3, r7, r1
 80044d8:	70dd      	strb	r5, [r3, #3]
					float constant =atof(thirdPart);
 80044da:	0020      	movs	r0, r4
 80044dc:	f00d f826 	bl	801152c <atof>
 80044e0:	f7fe f804 	bl	80024ec <__aeabi_d2f>
 80044e4:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,
 80044e6:	4643      	mov	r3, r8
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	0098      	lsls	r0, r3, #2
 80044ec:	18c0      	adds	r0, r0, r3
 80044ee:	0080      	lsls	r0, r0, #2
 80044f0:	3006      	adds	r0, #6
 80044f2:	19c0      	adds	r0, r0, r7
 80044f4:	2204      	movs	r2, #4
 80044f6:	a907      	add	r1, sp, #28
 80044f8:	f00d faad 	bl	8011a56 <memcpy>
 80044fc:	e7ca      	b.n	8004494 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 80044fe:	200e      	movs	r0, #14
	}
	
// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004500:	b008      	add	sp, #32
 8004502:	bc04      	pop	{r2}
 8004504:	4690      	mov	r8, r2
 8004506:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8004508:	2067      	movs	r0, #103	; 0x67
 800450a:	e7f9      	b.n	8004500 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 800450c:	2067      	movs	r0, #103	; 0x67
 800450e:	e7f7      	b.n	8004500 <ParseSnippetCondition+0x438>
 8004510:	2067      	movs	r0, #103	; 0x67
 8004512:	e7f5      	b.n	8004500 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 8004514:	2067      	movs	r0, #103	; 0x67
 8004516:	e7f3      	b.n	8004500 <ParseSnippetCondition+0x438>
 8004518:	2000121f 	.word	0x2000121f
 800451c:	200069a4 	.word	0x200069a4

08004520 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code, char *string){
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004522:	000c      	movs	r4, r1
	switch(code){
 8004524:	2802      	cmp	r0, #2
 8004526:	d017      	beq.n	8004558 <AddSnippet+0x38>
 8004528:	2803      	cmp	r0, #3
 800452a:	d003      	beq.n	8004534 <AddSnippet+0x14>
 800452c:	2801      	cmp	r0, #1
 800452e:	d00f      	beq.n	8004550 <AddSnippet+0x30>
	return BOS_OK;
 8004530:	2000      	movs	r0, #0
 8004532:	e00c      	b.n	800454e <AddSnippet+0x2e>
		snippets[numOfRecordedSnippets - 1].state = true;
 8004534:	4b35      	ldr	r3, [pc, #212]	; (800460c <AddSnippet+0xec>)
 8004536:	781a      	ldrb	r2, [r3, #0]
 8004538:	3a01      	subs	r2, #1
 800453a:	0093      	lsls	r3, r2, #2
 800453c:	189b      	adds	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4a33      	ldr	r2, [pc, #204]	; (8004610 <AddSnippet+0xf0>)
 8004542:	18d3      	adds	r3, r2, r3
 8004544:	2201      	movs	r2, #1
 8004546:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 8004548:	f006 f85a 	bl	800a600 <SaveToRO>
	return BOS_OK;
 800454c:	2000      	movs	r0, #0
}
 800454e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ParseSnippetCondition(string);
 8004550:	0008      	movs	r0, r1
 8004552:	f7ff fdb9 	bl	80040c8 <ParseSnippetCondition>
 8004556:	e7fa      	b.n	800454e <AddSnippet+0x2e>
		if(snippets[numOfRecordedSnippets - 1].cmd != NULL) {
 8004558:	4b2c      	ldr	r3, [pc, #176]	; (800460c <AddSnippet+0xec>)
 800455a:	781d      	ldrb	r5, [r3, #0]
 800455c:	3d01      	subs	r5, #1
 800455e:	00ab      	lsls	r3, r5, #2
 8004560:	195b      	adds	r3, r3, r5
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4a2a      	ldr	r2, [pc, #168]	; (8004610 <AddSnippet+0xf0>)
 8004566:	18d3      	adds	r3, r2, r3
 8004568:	68de      	ldr	r6, [r3, #12]
 800456a:	2e00      	cmp	r6, #0
 800456c:	d03d      	beq.n	80045ea <AddSnippet+0xca>
			int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 800456e:	0030      	movs	r0, r6
 8004570:	f7fb fdd2 	bl	8000118 <strlen>
 8004574:	0007      	movs	r7, r0
			    currentLenght + strlen(string) + 2);
 8004576:	0020      	movs	r0, r4
 8004578:	f7fb fdce 	bl	8000118 <strlen>
 800457c:	1839      	adds	r1, r7, r0
			snippets[numOfRecordedSnippets - 1].cmd =(char*) realloc(
 800457e:	3102      	adds	r1, #2
 8004580:	0030      	movs	r0, r6
 8004582:	f00d faa3 	bl	8011acc <realloc>
 8004586:	4e22      	ldr	r6, [pc, #136]	; (8004610 <AddSnippet+0xf0>)
 8004588:	00ab      	lsls	r3, r5, #2
 800458a:	195d      	adds	r5, r3, r5
 800458c:	00ad      	lsls	r5, r5, #2
 800458e:	1975      	adds	r5, r6, r5
 8004590:	60e8      	str	r0, [r5, #12]
			strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,
 8004592:	4d1e      	ldr	r5, [pc, #120]	; (800460c <AddSnippet+0xec>)
 8004594:	782a      	ldrb	r2, [r5, #0]
 8004596:	3a01      	subs	r2, #1
 8004598:	0093      	lsls	r3, r2, #2
 800459a:	189b      	adds	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	18f3      	adds	r3, r6, r3
 80045a0:	1c7a      	adds	r2, r7, #1
 80045a2:	68d8      	ldr	r0, [r3, #12]
 80045a4:	1880      	adds	r0, r0, r2
 80045a6:	0021      	movs	r1, r4
 80045a8:	f00d fc94 	bl	8011ed4 <strcpy>
			* (snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;// ENTER key between commands
 80045ac:	782a      	ldrb	r2, [r5, #0]
 80045ae:	3a01      	subs	r2, #1
 80045b0:	0093      	lsls	r3, r2, #2
 80045b2:	189b      	adds	r3, r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	18f6      	adds	r6, r6, r3
 80045b8:	68f3      	ldr	r3, [r6, #12]
 80045ba:	2213      	movs	r2, #19
 80045bc:	55da      	strb	r2, [r3, r7]
		if(snippets[numOfRecordedSnippets - 1].cmd == NULL) {
 80045be:	4b13      	ldr	r3, [pc, #76]	; (800460c <AddSnippet+0xec>)
 80045c0:	781a      	ldrb	r2, [r3, #0]
 80045c2:	3a01      	subs	r2, #1
 80045c4:	0093      	lsls	r3, r2, #2
 80045c6:	189b      	adds	r3, r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4911      	ldr	r1, [pc, #68]	; (8004610 <AddSnippet+0xf0>)
 80045cc:	18cb      	adds	r3, r1, r3
 80045ce:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 80045d0:	2000      	movs	r0, #0
		if(snippets[numOfRecordedSnippets - 1].cmd == NULL) {
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1bb      	bne.n	800454e <AddSnippet+0x2e>
			memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 80045d6:	0090      	lsls	r0, r2, #2
 80045d8:	1880      	adds	r0, r0, r2
 80045da:	0080      	lsls	r0, r0, #2
 80045dc:	1840      	adds	r0, r0, r1
 80045de:	2214      	movs	r2, #20
 80045e0:	2100      	movs	r1, #0
 80045e2:	f00d fa41 	bl	8011a68 <memset>
			return BOS_ERR_SNIP_MEM_FULL;
 80045e6:	200e      	movs	r0, #14
 80045e8:	e7b1      	b.n	800454e <AddSnippet+0x2e>
			    strlen(string) + 1);
 80045ea:	0008      	movs	r0, r1
 80045ec:	f7fb fd94 	bl	8000118 <strlen>
			snippets[numOfRecordedSnippets - 1].cmd =(char*) malloc(
 80045f0:	3001      	adds	r0, #1
 80045f2:	f00c ffe3 	bl	80115bc <malloc>
 80045f6:	00ab      	lsls	r3, r5, #2
 80045f8:	195d      	adds	r5, r3, r5
 80045fa:	00ad      	lsls	r5, r5, #2
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <AddSnippet+0xf0>)
 80045fe:	195d      	adds	r5, r3, r5
 8004600:	60e8      	str	r0, [r5, #12]
			strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004602:	0021      	movs	r1, r4
 8004604:	f00d fc66 	bl	8011ed4 <strcpy>
 8004608:	e7d9      	b.n	80045be <AddSnippet+0x9e>
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	2000121f 	.word	0x2000121f
 8004610:	200069a4 	.word	0x200069a4

08004614 <CLI_CommandParser>:
    int8_t *pcOutputString){
 8004614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004616:	46de      	mov	lr, fp
 8004618:	4657      	mov	r7, sl
 800461a:	464e      	mov	r6, r9
 800461c:	4645      	mov	r5, r8
 800461e:	b5e0      	push	{r5, r6, r7, lr}
 8004620:	b08b      	sub	sp, #44	; 0x2c
 8004622:	9004      	str	r0, [sp, #16]
 8004624:	4688      	mov	r8, r1
 8004626:	9203      	str	r2, [sp, #12]
 8004628:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 800462a:	2209      	movs	r2, #9
 800462c:	2100      	movs	r1, #0
 800462e:	a807      	add	r0, sp, #28
 8004630:	f00d fa1a 	bl	8011a68 <memset>
		if(!recordSnippet && !strncmp((char*) cInputString,"if ",3)) {
 8004634:	4fd5      	ldr	r7, [pc, #852]	; (800498c <CLI_CommandParser+0x378>)
				if(id == myID) {
 8004636:	002e      	movs	r6, r5
 8004638:	e034      	b.n	80046a4 <CLI_CommandParser+0x90>
				sprintf((char*) pcOutputString,
 800463a:	2252      	movs	r2, #82	; 0x52
 800463c:	49d4      	ldr	r1, [pc, #848]	; (8004990 <CLI_CommandParser+0x37c>)
 800463e:	0020      	movs	r0, r4
 8004640:	f00d fa09 	bl	8011a56 <memcpy>
				recordSnippet =0;
 8004644:	4bd1      	ldr	r3, [pc, #836]	; (800498c <CLI_CommandParser+0x378>)
 8004646:	2200      	movs	r2, #0
 8004648:	701a      	strb	r2, [r3, #0]
 800464a:	e044      	b.n	80046d6 <CLI_CommandParser+0xc2>
		else if(recordSnippet && !strncmp((char*) cInputString,"end if",6)) {
 800464c:	2206      	movs	r2, #6
 800464e:	49d1      	ldr	r1, [pc, #836]	; (8004994 <CLI_CommandParser+0x380>)
 8004650:	9803      	ldr	r0, [sp, #12]
 8004652:	f00d fc47 	bl	8011ee4 <strncmp>
 8004656:	2800      	cmp	r0, #0
 8004658:	d053      	beq.n	8004702 <CLI_CommandParser+0xee>
		else if(recordSnippet == SNIPPET_COMMANDS) {
 800465a:	2d02      	cmp	r5, #2
 800465c:	d05e      	beq.n	800471c <CLI_CommandParser+0x108>
			loc =strchr((char*) cInputString,'.');
 800465e:	212e      	movs	r1, #46	; 0x2e
 8004660:	9803      	ldr	r0, [sp, #12]
 8004662:	f00d fc29 	bl	8011eb8 <strchr>
 8004666:	1e05      	subs	r5, r0, #0
			if(loc != NULL
 8004668:	d006      	beq.n	8004678 <CLI_CommandParser+0x64>
			    && strncmp((char*) loc - 3,"bos",
 800466a:	3803      	subs	r0, #3
 800466c:	2203      	movs	r2, #3
 800466e:	49ca      	ldr	r1, [pc, #808]	; (8004998 <CLI_CommandParser+0x384>)
 8004670:	f00d fc38 	bl	8011ee4 <strncmp>
 8004674:	2800      	cmp	r0, #0
 8004676:	d160      	bne.n	800473a <CLI_CommandParser+0x126>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,
 8004678:	2299      	movs	r2, #153	; 0x99
 800467a:	0092      	lsls	r2, r2, #2
 800467c:	0021      	movs	r1, r4
 800467e:	9803      	ldr	r0, [sp, #12]
 8004680:	f008 f95c 	bl	800c93c <FreeRTOS_CLIProcessCommand>
 8004684:	0006      	movs	r6, r0
		if(strlen((char*) pcOutputString) > 0 && enableOutput)
 8004686:	7823      	ldrb	r3, [r4, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d000      	beq.n	800468e <CLI_CommandParser+0x7a>
 800468c:	e16f      	b.n	800496e <CLI_CommandParser+0x35a>
		memset(pcOutputString,0x00,strlen((char*) pcOutputString));
 800468e:	0020      	movs	r0, r4
 8004690:	f7fb fd42 	bl	8000118 <strlen>
 8004694:	0002      	movs	r2, r0
 8004696:	2100      	movs	r1, #0
 8004698:	0020      	movs	r0, r4
 800469a:	f00d f9e5 	bl	8011a68 <memset>
	} while(xReturned != pdFALSE);
 800469e:	2e00      	cmp	r6, #0
 80046a0:	d100      	bne.n	80046a4 <CLI_CommandParser+0x90>
 80046a2:	e1ab      	b.n	80049fc <CLI_CommandParser+0x3e8>
		StringToLowerCase((char*) cInputString);
 80046a4:	9803      	ldr	r0, [sp, #12]
 80046a6:	f7ff fcf7 	bl	8004098 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char*) cInputString,"if ",3)) {
 80046aa:	783d      	ldrb	r5, [r7, #0]
 80046ac:	2d00      	cmp	r5, #0
 80046ae:	d1cd      	bne.n	800464c <CLI_CommandParser+0x38>
 80046b0:	2203      	movs	r2, #3
 80046b2:	49ba      	ldr	r1, [pc, #744]	; (800499c <CLI_CommandParser+0x388>)
 80046b4:	9803      	ldr	r0, [sp, #12]
 80046b6:	f00d fc15 	bl	8011ee4 <strncmp>
 80046ba:	2800      	cmp	r0, #0
 80046bc:	d1cf      	bne.n	800465e <CLI_CommandParser+0x4a>
			if(AddSnippet(SNIPPET_CONDITION,(char*) (cInputString + 3))
 80046be:	9b03      	ldr	r3, [sp, #12]
 80046c0:	1cd9      	adds	r1, r3, #3
 80046c2:	3001      	adds	r0, #1
 80046c4:	f7ff ff2c 	bl	8004520 <AddSnippet>
 80046c8:	2800      	cmp	r0, #0
 80046ca:	d1b6      	bne.n	800463a <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 80046cc:	4baf      	ldr	r3, [pc, #700]	; (800498c <CLI_CommandParser+0x378>)
 80046ce:	2202      	movs	r2, #2
 80046d0:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 80046d2:	230d      	movs	r3, #13
 80046d4:	7023      	strb	r3, [r4, #0]
		if(strlen((char*) pcOutputString) > 0 && enableOutput)
 80046d6:	7823      	ldrb	r3, [r4, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d100      	bne.n	80046de <CLI_CommandParser+0xca>
 80046dc:	e186      	b.n	80049ec <CLI_CommandParser+0x3d8>
 80046de:	4643      	mov	r3, r8
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d100      	bne.n	80046e6 <CLI_CommandParser+0xd2>
 80046e4:	e19d      	b.n	8004a22 <CLI_CommandParser+0x40e>
 80046e6:	2600      	movs	r6, #0
		    strlen((char*) pcOutputString),cmd50ms,HAL_MAX_DELAY);
 80046e8:	0020      	movs	r0, r4
 80046ea:	f7fb fd15 	bl	8000118 <strlen>
		writePxMutex(port,(char*) pcOutputString,
 80046ee:	b282      	uxth	r2, r0
 80046f0:	2301      	movs	r3, #1
 80046f2:	425b      	negs	r3, r3
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	3333      	adds	r3, #51	; 0x33
 80046f8:	0021      	movs	r1, r4
 80046fa:	9804      	ldr	r0, [sp, #16]
 80046fc:	f007 ff5a 	bl	800c5b4 <writePxMutex>
 8004700:	e7c5      	b.n	800468e <CLI_CommandParser+0x7a>
			recordSnippet =0;
 8004702:	4ba2      	ldr	r3, [pc, #648]	; (800498c <CLI_CommandParser+0x378>)
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 8004708:	49a5      	ldr	r1, [pc, #660]	; (80049a0 <CLI_CommandParser+0x38c>)
 800470a:	3003      	adds	r0, #3
 800470c:	f7ff ff08 	bl	8004520 <AddSnippet>
			sprintf((char*) pcOutputString,
 8004710:	2241      	movs	r2, #65	; 0x41
 8004712:	49a4      	ldr	r1, [pc, #656]	; (80049a4 <CLI_CommandParser+0x390>)
 8004714:	0020      	movs	r0, r4
 8004716:	f00d f99e 	bl	8011a56 <memcpy>
			xReturned = pdFALSE;
 800471a:	e7dc      	b.n	80046d6 <CLI_CommandParser+0xc2>
			if(AddSnippet(SNIPPET_COMMANDS,(char*) cInputString) != BOS_OK)
 800471c:	9903      	ldr	r1, [sp, #12]
 800471e:	2002      	movs	r0, #2
 8004720:	f7ff fefe 	bl	8004520 <AddSnippet>
 8004724:	2800      	cmp	r0, #0
 8004726:	d102      	bne.n	800472e <CLI_CommandParser+0x11a>
			pcOutputString[0] ='\r';
 8004728:	230d      	movs	r3, #13
 800472a:	7023      	strb	r3, [r4, #0]
 800472c:	e7d3      	b.n	80046d6 <CLI_CommandParser+0xc2>
			sprintf((char*) pcOutputString,
 800472e:	2252      	movs	r2, #82	; 0x52
 8004730:	4997      	ldr	r1, [pc, #604]	; (8004990 <CLI_CommandParser+0x37c>)
 8004732:	0020      	movs	r0, r4
 8004734:	f00d f98f 	bl	8011a56 <memcpy>
 8004738:	e7cd      	b.n	80046d6 <CLI_CommandParser+0xc2>
			        3) && !isdigit(* (loc + 1))) {
 800473a:	f00c ff31 	bl	80115a0 <__locale_ctype_ptr>
 800473e:	786b      	ldrb	r3, [r5, #1]
 8004740:	18c0      	adds	r0, r0, r3
 8004742:	7843      	ldrb	r3, [r0, #1]
 8004744:	075b      	lsls	r3, r3, #29
 8004746:	d497      	bmi.n	8004678 <CLI_CommandParser+0x64>
				    (size_t) (loc - (char*) cInputString));
 8004748:	9903      	ldr	r1, [sp, #12]
 800474a:	1a6a      	subs	r2, r5, r1
				strncpy(idString,(char*) cInputString,
 800474c:	a807      	add	r0, sp, #28
 800474e:	f00d fbda 	bl	8011f06 <strncpy>
				id =GetID(idString);
 8004752:	a807      	add	r0, sp, #28
 8004754:	f7ff f9b2 	bl	8003abc <GetID>
 8004758:	9005      	str	r0, [sp, #20]
				if(id == myID) {
 800475a:	4a93      	ldr	r2, [pc, #588]	; (80049a8 <CLI_CommandParser+0x394>)
 800475c:	7812      	ldrb	r2, [r2, #0]
 800475e:	4693      	mov	fp, r2
 8004760:	4290      	cmp	r0, r2
 8004762:	d03d      	beq.n	80047e0 <CLI_CommandParser+0x1cc>
				else if(id == BOS_ERR_WrongName) {
 8004764:	2864      	cmp	r0, #100	; 0x64
 8004766:	d043      	beq.n	80047f0 <CLI_CommandParser+0x1dc>
				else if(id == BOS_ERR_WrongID) {
 8004768:	2866      	cmp	r0, #102	; 0x66
 800476a:	d047      	beq.n	80047fc <CLI_CommandParser+0x1e8>
				else if(id == BOS_BROADCAST) {
 800476c:	28ff      	cmp	r0, #255	; 0xff
 800476e:	d04b      	beq.n	8004808 <CLI_CommandParser+0x1f4>
				else if((uint8_t) id == BOS_MULTICAST) {
 8004770:	466b      	mov	r3, sp
 8004772:	7d1b      	ldrb	r3, [r3, #20]
 8004774:	469a      	mov	sl, r3
 8004776:	2bfe      	cmp	r3, #254	; 0xfe
 8004778:	d078      	beq.n	800486c <CLI_CommandParser+0x258>
					if(!strncmp((char*) loc + 1,"update",6)) {// remote update
 800477a:	3501      	adds	r5, #1
 800477c:	2206      	movs	r2, #6
 800477e:	498b      	ldr	r1, [pc, #556]	; (80049ac <CLI_CommandParser+0x398>)
 8004780:	0028      	movs	r0, r5
 8004782:	f00d fbaf 	bl	8011ee4 <strncmp>
 8004786:	2800      	cmp	r0, #0
 8004788:	d000      	beq.n	800478c <CLI_CommandParser+0x178>
 800478a:	e0b4      	b.n	80048f6 <CLI_CommandParser+0x2e2>
						BOS.response = BOS_RESPONSE_NONE;
 800478c:	4b88      	ldr	r3, [pc, #544]	; (80049b0 <CLI_CommandParser+0x39c>)
 800478e:	2200      	movs	r2, #0
 8004790:	719a      	strb	r2, [r3, #6]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004792:	2119      	movs	r1, #25
 8004794:	4650      	mov	r0, sl
 8004796:	f004 f8b1 	bl	80088fc <SendMessageToModule>
						osDelay(100);
 800479a:	2064      	movs	r0, #100	; 0x64
 800479c:	f008 f837 	bl	800c80e <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 80047a0:	4b84      	ldr	r3, [pc, #528]	; (80049b4 <CLI_CommandParser+0x3a0>)
 80047a2:	781a      	ldrb	r2, [r3, #0]
 80047a4:	4b80      	ldr	r3, [pc, #512]	; (80049a8 <CLI_CommandParser+0x394>)
 80047a6:	7818      	ldrb	r0, [r3, #0]
 80047a8:	2300      	movs	r3, #0
 80047aa:	4651      	mov	r1, sl
 80047ac:	f7fe fe60 	bl	8003470 <remoteBootloaderUpdate>
					if(BOS.response == BOS_RESPONSE_ALL) {
 80047b0:	4b7f      	ldr	r3, [pc, #508]	; (80049b0 <CLI_CommandParser+0x39c>)
 80047b2:	799b      	ldrb	r3, [r3, #6]
 80047b4:	2b60      	cmp	r3, #96	; 0x60
 80047b6:	d18e      	bne.n	80046d6 <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE,1000);//cmd500ms
 80047b8:	21fa      	movs	r1, #250	; 0xfa
 80047ba:	0089      	lsls	r1, r1, #2
 80047bc:	2001      	movs	r0, #1
 80047be:	f009 fbf9 	bl	800dfb4 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK) {
 80047c2:	4b7d      	ldr	r3, [pc, #500]	; (80049b8 <CLI_CommandParser+0x3a4>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d085      	beq.n	80046d6 <CLI_CommandParser+0xc2>
							++timedoutMsg;
 80047ca:	4a7c      	ldr	r2, [pc, #496]	; (80049bc <CLI_CommandParser+0x3a8>)
 80047cc:	8813      	ldrh	r3, [r2, #0]
 80047ce:	3301      	adds	r3, #1
 80047d0:	8013      	strh	r3, [r2, #0]
							sprintf((char*) pcOutputString,
 80047d2:	9b05      	ldr	r3, [sp, #20]
 80047d4:	0022      	movs	r2, r4
 80047d6:	497a      	ldr	r1, [pc, #488]	; (80049c0 <CLI_CommandParser+0x3ac>)
 80047d8:	0020      	movs	r0, r4
 80047da:	f00d fb3f 	bl	8011e5c <sprintf>
 80047de:	e77a      	b.n	80046d6 <CLI_CommandParser+0xc2>
					xReturned =FreeRTOS_CLIProcessCommand(
 80047e0:	2299      	movs	r2, #153	; 0x99
					    (const signed char*) (loc + 1),pcOutputString,
 80047e2:	1c68      	adds	r0, r5, #1
					xReturned =FreeRTOS_CLIProcessCommand(
 80047e4:	0092      	lsls	r2, r2, #2
 80047e6:	0021      	movs	r1, r4
 80047e8:	f008 f8a8 	bl	800c93c <FreeRTOS_CLIProcessCommand>
 80047ec:	0006      	movs	r6, r0
 80047ee:	e74a      	b.n	8004686 <CLI_CommandParser+0x72>
					sprintf((char*) pcOutputString,
 80047f0:	2227      	movs	r2, #39	; 0x27
 80047f2:	4974      	ldr	r1, [pc, #464]	; (80049c4 <CLI_CommandParser+0x3b0>)
 80047f4:	0020      	movs	r0, r4
 80047f6:	f00d f92e 	bl	8011a56 <memcpy>
 80047fa:	e76c      	b.n	80046d6 <CLI_CommandParser+0xc2>
					sprintf((char*) pcOutputString,
 80047fc:	2225      	movs	r2, #37	; 0x25
 80047fe:	4972      	ldr	r1, [pc, #456]	; (80049c8 <CLI_CommandParser+0x3b4>)
 8004800:	0020      	movs	r0, r4
 8004802:	f00d f928 	bl	8011a56 <memcpy>
 8004806:	e766      	b.n	80046d6 <CLI_CommandParser+0xc2>
					memset(broadcastResponse,0x00,sizeof (broadcastResponse));
 8004808:	221a      	movs	r2, #26
 800480a:	2100      	movs	r1, #0
 800480c:	486f      	ldr	r0, [pc, #444]	; (80049cc <CLI_CommandParser+0x3b8>)
 800480e:	f00d f92b 	bl	8011a68 <memset>
					strncpy((char*) messageParams,loc + 1,
 8004812:	3501      	adds	r5, #1
					    (size_t) (strlen((char*) cInputString)
 8004814:	9803      	ldr	r0, [sp, #12]
 8004816:	f7fb fc7f 	bl	8000118 <strlen>
 800481a:	0006      	movs	r6, r0
					        - strlen((char*) idString) - 1));
 800481c:	ab07      	add	r3, sp, #28
 800481e:	0018      	movs	r0, r3
 8004820:	f7fb fc7a 	bl	8000118 <strlen>
 8004824:	1e72      	subs	r2, r6, #1
 8004826:	1a12      	subs	r2, r2, r0
					strncpy((char*) messageParams,loc + 1,
 8004828:	0029      	movs	r1, r5
 800482a:	4869      	ldr	r0, [pc, #420]	; (80049d0 <CLI_CommandParser+0x3bc>)
 800482c:	f00d fb6b 	bl	8011f06 <strncpy>
					    strlen((char*) cInputString)
 8004830:	9803      	ldr	r0, [sp, #12]
 8004832:	f7fb fc71 	bl	8000118 <strlen>
 8004836:	0006      	movs	r6, r0
					        - strlen((char*) idString));// Send terminating zero
 8004838:	a807      	add	r0, sp, #28
 800483a:	f7fb fc6d 	bl	8000118 <strlen>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,
 800483e:	1a33      	subs	r3, r6, r0
 8004840:	b29b      	uxth	r3, r3
 8004842:	2217      	movs	r2, #23
 8004844:	21ff      	movs	r1, #255	; 0xff
 8004846:	4658      	mov	r0, fp
 8004848:	f004 f830 	bl	80088ac <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand(
 800484c:	2299      	movs	r2, #153	; 0x99
 800484e:	0092      	lsls	r2, r2, #2
 8004850:	0021      	movs	r1, r4
 8004852:	0028      	movs	r0, r5
 8004854:	f008 f872 	bl	800c93c <FreeRTOS_CLIProcessCommand>
 8004858:	0006      	movs	r6, r0
					strcat((char*) pcOutputString,
 800485a:	0020      	movs	r0, r4
 800485c:	f7fb fc5c 	bl	8000118 <strlen>
 8004860:	1820      	adds	r0, r4, r0
 8004862:	221d      	movs	r2, #29
 8004864:	495b      	ldr	r1, [pc, #364]	; (80049d4 <CLI_CommandParser+0x3c0>)
 8004866:	f00d f8f6 	bl	8011a56 <memcpy>
 800486a:	e70c      	b.n	8004686 <CLI_CommandParser+0x72>
					group =id >> 8;
 800486c:	9b05      	ldr	r3, [sp, #20]
 800486e:	121b      	asrs	r3, r3, #8
 8004870:	b2db      	uxtb	r3, r3
 8004872:	469a      	mov	sl, r3
 8004874:	4b58      	ldr	r3, [pc, #352]	; (80049d8 <CLI_CommandParser+0x3c4>)
 8004876:	4699      	mov	r9, r3
 8004878:	4652      	mov	r2, sl
 800487a:	701a      	strb	r2, [r3, #0]
					memset(broadcastResponse,0x00,sizeof (broadcastResponse));
 800487c:	221a      	movs	r2, #26
 800487e:	2100      	movs	r1, #0
 8004880:	4852      	ldr	r0, [pc, #328]	; (80049cc <CLI_CommandParser+0x3b8>)
 8004882:	f00d f8f1 	bl	8011a68 <memset>
					strncpy((char*) messageParams,loc + 1,
 8004886:	1c6b      	adds	r3, r5, #1
 8004888:	9305      	str	r3, [sp, #20]
					    (size_t) (strlen((char*) cInputString)
 800488a:	9803      	ldr	r0, [sp, #12]
 800488c:	f7fb fc44 	bl	8000118 <strlen>
 8004890:	0005      	movs	r5, r0
					        - strlen((char*) idString) - 1));
 8004892:	aa07      	add	r2, sp, #28
 8004894:	0010      	movs	r0, r2
 8004896:	f7fb fc3f 	bl	8000118 <strlen>
 800489a:	3d01      	subs	r5, #1
 800489c:	1a2a      	subs	r2, r5, r0
					strncpy((char*) messageParams,loc + 1,
 800489e:	9905      	ldr	r1, [sp, #20]
 80048a0:	484b      	ldr	r0, [pc, #300]	; (80049d0 <CLI_CommandParser+0x3bc>)
 80048a2:	f00d fb30 	bl	8011f06 <strncpy>
					    strlen((char*) cInputString)
 80048a6:	9803      	ldr	r0, [sp, #12]
 80048a8:	f7fb fc36 	bl	8000118 <strlen>
 80048ac:	0005      	movs	r5, r0
					        - strlen((char*) idString));// Send terminating zero
 80048ae:	a807      	add	r0, sp, #28
 80048b0:	f7fb fc32 	bl	8000118 <strlen>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,
 80048b4:	1a2b      	subs	r3, r5, r0
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2217      	movs	r2, #23
 80048ba:	4651      	mov	r1, sl
 80048bc:	4658      	mov	r0, fp
 80048be:	f003 fff5 	bl	80088ac <BroadcastMessage>
					if(InGroup(myID,group))
 80048c2:	4b39      	ldr	r3, [pc, #228]	; (80049a8 <CLI_CommandParser+0x394>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	4a44      	ldr	r2, [pc, #272]	; (80049dc <CLI_CommandParser+0x3c8>)
 80048cc:	5a9b      	ldrh	r3, [r3, r2]
 80048ce:	464a      	mov	r2, r9
 80048d0:	7812      	ldrb	r2, [r2, #0]
 80048d2:	4113      	asrs	r3, r2
 80048d4:	07db      	lsls	r3, r3, #31
 80048d6:	d406      	bmi.n	80048e6 <CLI_CommandParser+0x2d2>
					sprintf((char*) pcOutputString,
 80048d8:	ab07      	add	r3, sp, #28
 80048da:	0022      	movs	r2, r4
 80048dc:	4940      	ldr	r1, [pc, #256]	; (80049e0 <CLI_CommandParser+0x3cc>)
 80048de:	0020      	movs	r0, r4
 80048e0:	f00d fabc 	bl	8011e5c <sprintf>
 80048e4:	e6cf      	b.n	8004686 <CLI_CommandParser+0x72>
					xReturned =FreeRTOS_CLIProcessCommand(
 80048e6:	2299      	movs	r2, #153	; 0x99
 80048e8:	0092      	lsls	r2, r2, #2
 80048ea:	0021      	movs	r1, r4
 80048ec:	9805      	ldr	r0, [sp, #20]
 80048ee:	f008 f825 	bl	800c93c <FreeRTOS_CLIProcessCommand>
 80048f2:	0006      	movs	r6, r0
 80048f4:	e7f0      	b.n	80048d8 <CLI_CommandParser+0x2c4>
						    (size_t) (strlen((char*) cInputString)
 80048f6:	9803      	ldr	r0, [sp, #12]
 80048f8:	f7fb fc0e 	bl	8000118 <strlen>
 80048fc:	0006      	movs	r6, r0
						        - strlen((char*) idString) - 1));
 80048fe:	ab07      	add	r3, sp, #28
 8004900:	0018      	movs	r0, r3
 8004902:	f7fb fc09 	bl	8000118 <strlen>
 8004906:	1e72      	subs	r2, r6, #1
 8004908:	1a12      	subs	r2, r2, r0
						strncpy((char*) messageParams,loc + 1,
 800490a:	0029      	movs	r1, r5
 800490c:	4830      	ldr	r0, [pc, #192]	; (80049d0 <CLI_CommandParser+0x3bc>)
 800490e:	f00d fafa 	bl	8011f06 <strncpy>
						    strlen((char*) cInputString)
 8004912:	9803      	ldr	r0, [sp, #12]
 8004914:	f7fb fc00 	bl	8000118 <strlen>
 8004918:	0005      	movs	r5, r0
						        - strlen((char*) idString) - 1);
 800491a:	a807      	add	r0, sp, #28
 800491c:	f7fb fbfc 	bl	8000118 <strlen>
						SendMessageToModule(id,CODE_CLI_COMMAND,
 8004920:	3d01      	subs	r5, #1
 8004922:	1a2a      	subs	r2, r5, r0
 8004924:	b292      	uxth	r2, r2
 8004926:	2117      	movs	r1, #23
 8004928:	4650      	mov	r0, sl
 800492a:	f003 ffe7 	bl	80088fc <SendMessageToModule>
						sprintf((char*) pcOutputString,
 800492e:	9a05      	ldr	r2, [sp, #20]
 8004930:	492c      	ldr	r1, [pc, #176]	; (80049e4 <CLI_CommandParser+0x3d0>)
 8004932:	0020      	movs	r0, r4
 8004934:	f00d fa92 	bl	8011e5c <sprintf>
						if( (strlen((char*) pcOutputString) > 0)
 8004938:	7823      	ldrb	r3, [r4, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <CLI_CommandParser+0x330>
						    && enableOutput)
 800493e:	4643      	mov	r3, r8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d108      	bne.n	8004956 <CLI_CommandParser+0x342>
						memset(pcOutputString,0x00,
 8004944:	0020      	movs	r0, r4
 8004946:	f7fb fbe7 	bl	8000118 <strlen>
 800494a:	0002      	movs	r2, r0
 800494c:	2100      	movs	r1, #0
 800494e:	0020      	movs	r0, r4
 8004950:	f00d f88a 	bl	8011a68 <memset>
 8004954:	e72c      	b.n	80047b0 <CLI_CommandParser+0x19c>
						    strlen((char*) pcOutputString),cmd50ms,1);
 8004956:	0020      	movs	r0, r4
 8004958:	f7fb fbde 	bl	8000118 <strlen>
						writePxMutex(port,(char*) pcOutputString,
 800495c:	b282      	uxth	r2, r0
 800495e:	2301      	movs	r3, #1
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	3331      	adds	r3, #49	; 0x31
 8004964:	0021      	movs	r1, r4
 8004966:	9804      	ldr	r0, [sp, #16]
 8004968:	f007 fe24 	bl	800c5b4 <writePxMutex>
 800496c:	e7ea      	b.n	8004944 <CLI_CommandParser+0x330>
		if(strlen((char*) pcOutputString) > 0 && enableOutput)
 800496e:	4643      	mov	r3, r8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d100      	bne.n	8004976 <CLI_CommandParser+0x362>
 8004974:	e68b      	b.n	800468e <CLI_CommandParser+0x7a>
 8004976:	e6b7      	b.n	80046e8 <CLI_CommandParser+0xd4>
	writePxMutex(port,pcEndOfCommandOutputString,
 8004978:	2301      	movs	r3, #1
 800497a:	425b      	negs	r3, r3
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	3333      	adds	r3, #51	; 0x33
 8004980:	2238      	movs	r2, #56	; 0x38
 8004982:	4919      	ldr	r1, [pc, #100]	; (80049e8 <CLI_CommandParser+0x3d4>)
 8004984:	9804      	ldr	r0, [sp, #16]
 8004986:	f007 fe15 	bl	800c5b4 <writePxMutex>
}
 800498a:	e043      	b.n	8004a14 <CLI_CommandParser+0x400>
 800498c:	2000124c 	.word	0x2000124c
 8004990:	080168a8 	.word	0x080168a8
 8004994:	080168fc 	.word	0x080168fc
 8004998:	08016948 	.word	0x08016948
 800499c:	080168a4 	.word	0x080168a4
 80049a0:	08016554 	.word	0x08016554
 80049a4:	08016904 	.word	0x08016904
 80049a8:	20001076 	.word	0x20001076
 80049ac:	080169e8 	.word	0x080169e8
 80049b0:	20006988 	.word	0x20006988
 80049b4:	20000a77 	.word	0x20000a77
 80049b8:	20001110 	.word	0x20001110
 80049bc:	2000175e 	.word	0x2000175e
 80049c0:	08016a14 	.word	0x08016a14
 80049c4:	0801694c 	.word	0x0801694c
 80049c8:	08016974 	.word	0x08016974
 80049cc:	20000cec 	.word	0x20000cec
 80049d0:	20000f38 	.word	0x20000f38
 80049d4:	0801699c 	.word	0x0801699c
 80049d8:	2000121e 	.word	0x2000121e
 80049dc:	20000ec0 	.word	0x20000ec0
 80049e0:	080169bc 	.word	0x080169bc
 80049e4:	080169f0 	.word	0x080169f0
 80049e8:	08016a34 	.word	0x08016a34
		memset(pcOutputString,0x00,strlen((char*) pcOutputString));
 80049ec:	0020      	movs	r0, r4
 80049ee:	f7fb fb93 	bl	8000118 <strlen>
 80049f2:	0002      	movs	r2, r0
 80049f4:	2100      	movs	r1, #0
 80049f6:	0020      	movs	r0, r4
 80049f8:	f00d f836 	bl	8011a68 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 80049fc:	2209      	movs	r2, #9
 80049fe:	2100      	movs	r1, #0
 8004a00:	a807      	add	r0, sp, #28
 8004a02:	f00d f831 	bl	8011a68 <memset>
	if(!recordSnippet && enableOutput)
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <CLI_CommandParser+0x420>)
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d102      	bne.n	8004a14 <CLI_CommandParser+0x400>
 8004a0e:	4643      	mov	r3, r8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1b1      	bne.n	8004978 <CLI_CommandParser+0x364>
}
 8004a14:	b00b      	add	sp, #44	; 0x2c
 8004a16:	bc3c      	pop	{r2, r3, r4, r5}
 8004a18:	4690      	mov	r8, r2
 8004a1a:	4699      	mov	r9, r3
 8004a1c:	46a2      	mov	sl, r4
 8004a1e:	46ab      	mov	fp, r5
 8004a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(pcOutputString,0x00,strlen((char*) pcOutputString));
 8004a22:	0020      	movs	r0, r4
 8004a24:	f7fb fb78 	bl	8000118 <strlen>
 8004a28:	0002      	movs	r2, r0
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	0020      	movs	r0, r4
 8004a2e:	f00d f81b 	bl	8011a68 <memset>
 8004a32:	e7e3      	b.n	80049fc <CLI_CommandParser+0x3e8>
 8004a34:	2000124c 	.word	0x2000124c

08004a38 <prvCLITask>:
void prvCLITask(void *pvParameters){
 8004a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a3a:	46de      	mov	lr, fp
 8004a3c:	4657      	mov	r7, sl
 8004a3e:	464e      	mov	r6, r9
 8004a40:	b5c0      	push	{r6, r7, lr}
 8004a42:	b086      	sub	sp, #24
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8004a44:	2101      	movs	r1, #1
 8004a46:	4249      	negs	r1, r1
 8004a48:	2001      	movs	r0, #1
 8004a4a:	f009 fab3 	bl	800dfb4 <ulTaskNotifyTake>
	cRxedChar ='\0';
 8004a4e:	230f      	movs	r3, #15
 8004a50:	aa02      	add	r2, sp, #8
 8004a52:	4694      	mov	ip, r2
 8004a54:	4463      	add	r3, ip
 8004a56:	2200      	movs	r2, #0
 8004a58:	701a      	strb	r2, [r3, #0]
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004a5a:	f007 ffed 	bl	800ca38 <FreeRTOS_CLIGetOutputBuffer>
 8004a5e:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE) {
 8004a60:	23e1      	movs	r3, #225	; 0xe1
 8004a62:	031b      	lsls	r3, r3, #12
 8004a64:	4a5f      	ldr	r2, [pc, #380]	; (8004be4 <prvCLITask+0x1ac>)
 8004a66:	6892      	ldr	r2, [r2, #8]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d009      	beq.n	8004a80 <prvCLITask+0x48>
		for(uint8_t port =1; port <= NumOfPorts; port++) {
 8004a6c:	2401      	movs	r4, #1
			if(port != PcPort)
 8004a6e:	4e5e      	ldr	r6, [pc, #376]	; (8004be8 <prvCLITask+0x1b0>)
			UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8004a70:	001d      	movs	r5, r3
			if(port != PcPort)
 8004a72:	7833      	ldrb	r3, [r6, #0]
 8004a74:	42a3      	cmp	r3, r4
 8004a76:	d12d      	bne.n	8004ad4 <prvCLITask+0x9c>
		for(uint8_t port =1; port <= NumOfPorts; port++) {
 8004a78:	3401      	adds	r4, #1
 8004a7a:	b2e4      	uxtb	r4, r4
 8004a7c:	2c07      	cmp	r4, #7
 8004a7e:	d1f8      	bne.n	8004a72 <prvCLITask+0x3a>
	    modulePNstring[myPN],PcPort);
 8004a80:	4b5a      	ldr	r3, [pc, #360]	; (8004bec <prvCLITask+0x1b4>)
 8004a82:	881a      	ldrh	r2, [r3, #0]
 8004a84:	0053      	lsls	r3, r2, #1
 8004a86:	189b      	adds	r3, r3, r2
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	4a59      	ldr	r2, [pc, #356]	; (8004bf0 <prvCLITask+0x1b8>)
 8004a8c:	189b      	adds	r3, r3, r2
	sprintf(pcWelcomePortMessage,
 8004a8e:	4a59      	ldr	r2, [pc, #356]	; (8004bf4 <prvCLITask+0x1bc>)
 8004a90:	7812      	ldrb	r2, [r2, #0]
 8004a92:	4c59      	ldr	r4, [pc, #356]	; (8004bf8 <prvCLITask+0x1c0>)
 8004a94:	4d54      	ldr	r5, [pc, #336]	; (8004be8 <prvCLITask+0x1b0>)
 8004a96:	7829      	ldrb	r1, [r5, #0]
 8004a98:	9100      	str	r1, [sp, #0]
 8004a9a:	4958      	ldr	r1, [pc, #352]	; (8004bfc <prvCLITask+0x1c4>)
 8004a9c:	0020      	movs	r0, r4
 8004a9e:	f00d f9dd 	bl	8011e5c <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 8004aa2:	22a4      	movs	r2, #164	; 0xa4
 8004aa4:	7828      	ldrb	r0, [r5, #0]
 8004aa6:	230a      	movs	r3, #10
 8004aa8:	0092      	lsls	r2, r2, #2
 8004aaa:	4955      	ldr	r1, [pc, #340]	; (8004c00 <prvCLITask+0x1c8>)
 8004aac:	f007 fdaa 	bl	800c604 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),
 8004ab0:	0020      	movs	r0, r4
 8004ab2:	f7fb fb31 	bl	8000118 <strlen>
 8004ab6:	b282      	uxth	r2, r0
 8004ab8:	7828      	ldrb	r0, [r5, #0]
 8004aba:	230a      	movs	r3, #10
 8004abc:	0021      	movs	r1, r4
 8004abe:	f007 fda1 	bl	800c604 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	469b      	mov	fp, r3
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++) {
 8004ac6:	4b48      	ldr	r3, [pc, #288]	; (8004be8 <prvCLITask+0x1b0>)
 8004ac8:	469a      	mov	sl, r3
 8004aca:	4b4e      	ldr	r3, [pc, #312]	; (8004c04 <prvCLITask+0x1cc>)
 8004acc:	4699      	mov	r9, r3
				chr =UARTRxBufIndex[PcPort - 1] =0;
 8004ace:	001f      	movs	r7, r3
			if(UARTRxBuf[PcPort - 1][chr]) {
 8004ad0:	4656      	mov	r6, sl
 8004ad2:	e066      	b.n	8004ba2 <prvCLITask+0x16a>
			UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8004ad4:	0029      	movs	r1, r5
 8004ad6:	0020      	movs	r0, r4
 8004ad8:	f007 fdda 	bl	800c690 <UpdateBaudrate>
 8004adc:	e7cc      	b.n	8004a78 <prvCLITask+0x40>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 8004ade:	200f      	movs	r0, #15
 8004ae0:	ad02      	add	r5, sp, #8
 8004ae2:	46ac      	mov	ip, r5
 8004ae4:	4460      	add	r0, ip
 8004ae6:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort - 1][chr] =0;
 8004ae8:	0198      	lsls	r0, r3, #6
 8004aea:	4a47      	ldr	r2, [pc, #284]	; (8004c08 <prvCLITask+0x1d0>)
 8004aec:	1812      	adds	r2, r2, r0
 8004aee:	2000      	movs	r0, #0
 8004af0:	5450      	strb	r0, [r2, r1]
				UARTRxBufIndex[PcPort - 1] =chr;
 8004af2:	4a44      	ldr	r2, [pc, #272]	; (8004c04 <prvCLITask+0x1cc>)
 8004af4:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 8004af6:	240f      	movs	r4, #15
 8004af8:	ab02      	add	r3, sp, #8
 8004afa:	469c      	mov	ip, r3
 8004afc:	4464      	add	r4, ip
 8004afe:	4b3a      	ldr	r3, [pc, #232]	; (8004be8 <prvCLITask+0x1b0>)
 8004b00:	7818      	ldrb	r0, [r3, #0]
 8004b02:	230a      	movs	r3, #10
 8004b04:	2201      	movs	r2, #1
 8004b06:	0021      	movs	r1, r4
 8004b08:	f007 fd7c 	bl	800c604 <writePxITMutex>
		if(cRxedChar == '\r') {
 8004b0c:	7823      	ldrb	r3, [r4, #0]
 8004b0e:	2b0d      	cmp	r3, #13
 8004b10:	d028      	beq.n	8004b64 <prvCLITask+0x12c>
			if(cRxedChar == '\n') {
 8004b12:	2b0a      	cmp	r3, #10
 8004b14:	d043      	beq.n	8004b9e <prvCLITask+0x166>
			else if(cRxedChar == '\b') {
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d059      	beq.n	8004bce <prvCLITask+0x196>
				if( (cRxedChar >= ' ') && (cRxedChar <= '~')) {
 8004b1a:	001a      	movs	r2, r3
 8004b1c:	3a20      	subs	r2, #32
 8004b1e:	2a5e      	cmp	r2, #94	; 0x5e
 8004b20:	d83d      	bhi.n	8004b9e <prvCLITask+0x166>
					if(cInputIndex < cmdMAX_INPUT_SIZE) {
 8004b22:	465a      	mov	r2, fp
 8004b24:	2a31      	cmp	r2, #49	; 0x31
 8004b26:	dc3a      	bgt.n	8004b9e <prvCLITask+0x166>
						cInputString[cInputIndex] =cRxedChar;
 8004b28:	4a38      	ldr	r2, [pc, #224]	; (8004c0c <prvCLITask+0x1d4>)
 8004b2a:	4659      	mov	r1, fp
 8004b2c:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 8004b2e:	465b      	mov	r3, fp
 8004b30:	3301      	adds	r3, #1
 8004b32:	b25b      	sxtb	r3, r3
 8004b34:	469b      	mov	fp, r3
 8004b36:	e032      	b.n	8004b9e <prvCLITask+0x166>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 8004b38:	2200      	movs	r2, #0
 8004b3a:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 8004b3c:	f009 fd14 	bl	800e568 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++) {
 8004b40:	3c3e      	subs	r4, #62	; 0x3e
			if(UARTRxBuf[PcPort - 1][chr]) {
 8004b42:	7833      	ldrb	r3, [r6, #0]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	0021      	movs	r1, r4
 8004b48:	019a      	lsls	r2, r3, #6
 8004b4a:	18aa      	adds	r2, r5, r2
 8004b4c:	5d12      	ldrb	r2, [r2, r4]
 8004b4e:	2a00      	cmp	r2, #0
 8004b50:	d1c5      	bne.n	8004ade <prvCLITask+0xa6>
			if(chr == MSG_RX_BUF_SIZE - 1) {
 8004b52:	2c3f      	cmp	r4, #63	; 0x3f
 8004b54:	d0f0      	beq.n	8004b38 <prvCLITask+0x100>
			taskYIELD();
 8004b56:	f009 fd07 	bl	800e568 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++) {
 8004b5a:	3401      	adds	r4, #1
 8004b5c:	b2a4      	uxth	r4, r4
 8004b5e:	2c3f      	cmp	r4, #63	; 0x3f
 8004b60:	d9ef      	bls.n	8004b42 <prvCLITask+0x10a>
 8004b62:	e7c8      	b.n	8004af6 <prvCLITask+0xbe>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8004b64:	4b20      	ldr	r3, [pc, #128]	; (8004be8 <prvCLITask+0x1b0>)
 8004b66:	7818      	ldrb	r0, [r3, #0]
 8004b68:	230a      	movs	r3, #10
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	4928      	ldr	r1, [pc, #160]	; (8004c10 <prvCLITask+0x1d8>)
 8004b6e:	f007 fd49 	bl	800c604 <writePxITMutex>
			if(cInputIndex == 0) {
 8004b72:	465b      	mov	r3, fp
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d025      	beq.n	8004bc4 <prvCLITask+0x18c>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8004b78:	4c24      	ldr	r4, [pc, #144]	; (8004c0c <prvCLITask+0x1d4>)
 8004b7a:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <prvCLITask+0x1b0>)
 8004b7c:	7818      	ldrb	r0, [r3, #0]
 8004b7e:	9b03      	ldr	r3, [sp, #12]
 8004b80:	0022      	movs	r2, r4
 8004b82:	2101      	movs	r1, #1
 8004b84:	f7ff fd46 	bl	8004614 <CLI_CommandParser>
			strcpy((char*) cLastInputString,(char*) cInputString);
 8004b88:	0021      	movs	r1, r4
 8004b8a:	4822      	ldr	r0, [pc, #136]	; (8004c14 <prvCLITask+0x1dc>)
 8004b8c:	f00d f9a2 	bl	8011ed4 <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 8004b90:	2232      	movs	r2, #50	; 0x32
 8004b92:	2100      	movs	r1, #0
 8004b94:	0020      	movs	r0, r4
 8004b96:	f00c ff67 	bl	8011a68 <memset>
			cInputIndex =0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	469b      	mov	fp, r3
		taskYIELD();
 8004b9e:	f009 fce3 	bl	800e568 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++) {
 8004ba2:	4653      	mov	r3, sl
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	464a      	mov	r2, r9
 8004baa:	5cd2      	ldrb	r2, [r2, r3]
 8004bac:	b294      	uxth	r4, r2
 8004bae:	2c3f      	cmp	r4, #63	; 0x3f
 8004bb0:	d8a1      	bhi.n	8004af6 <prvCLITask+0xbe>
			if(UARTRxBuf[PcPort - 1][chr]) {
 8004bb2:	0011      	movs	r1, r2
 8004bb4:	019d      	lsls	r5, r3, #6
 8004bb6:	4814      	ldr	r0, [pc, #80]	; (8004c08 <prvCLITask+0x1d0>)
 8004bb8:	1940      	adds	r0, r0, r5
 8004bba:	5c82      	ldrb	r2, [r0, r2]
 8004bbc:	2a00      	cmp	r2, #0
 8004bbe:	d18e      	bne.n	8004ade <prvCLITask+0xa6>
 8004bc0:	4d11      	ldr	r5, [pc, #68]	; (8004c08 <prvCLITask+0x1d0>)
 8004bc2:	e7c6      	b.n	8004b52 <prvCLITask+0x11a>
				strcpy((char*) cInputString,(char*) cLastInputString);
 8004bc4:	4913      	ldr	r1, [pc, #76]	; (8004c14 <prvCLITask+0x1dc>)
 8004bc6:	4811      	ldr	r0, [pc, #68]	; (8004c0c <prvCLITask+0x1d4>)
 8004bc8:	f00d f984 	bl	8011ed4 <strcpy>
 8004bcc:	e7d4      	b.n	8004b78 <prvCLITask+0x140>
				if(cInputIndex > 0) {
 8004bce:	465b      	mov	r3, fp
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	dde4      	ble.n	8004b9e <prvCLITask+0x166>
					cInputIndex--;
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b25b      	sxtb	r3, r3
 8004bd8:	469b      	mov	fp, r3
					cInputString[cInputIndex] ='\0';
 8004bda:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <prvCLITask+0x1d4>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4659      	mov	r1, fp
 8004be0:	545a      	strb	r2, [r3, r1]
 8004be2:	e7dc      	b.n	8004b9e <prvCLITask+0x166>
 8004be4:	20006988 	.word	0x20006988
 8004be8:	20000a77 	.word	0x20000a77
 8004bec:	20000050 	.word	0x20000050
 8004bf0:	080165a4 	.word	0x080165a4
 8004bf4:	20001076 	.word	0x20001076
 8004bf8:	20001220 	.word	0x20001220
 8004bfc:	08016aa0 	.word	0x08016aa0
 8004c00:	08016acc 	.word	0x08016acc
 8004c04:	20001450 	.word	0x20001450
 8004c08:	200012d0 	.word	0x200012d0
 8004c0c:	20001150 	.word	0x20001150
 8004c10:	08017eb4 	.word	0x08017eb4
 8004c14:	200011ec 	.word	0x200011ec

08004c18 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer, int8_t *cliBuffer){
 8004c18:	b570      	push	{r4, r5, r6, lr}
 8004c1a:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8004c1c:	4b1c      	ldr	r3, [pc, #112]	; (8004c90 <ParseSnippetCommand+0x78>)
 8004c1e:	781a      	ldrb	r2, [r3, #0]
 8004c20:	3a01      	subs	r2, #1
 8004c22:	0093      	lsls	r3, r2, #2
 8004c24:	189b      	adds	r3, r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4a1a      	ldr	r2, [pc, #104]	; (8004c94 <ParseSnippetCommand+0x7c>)
 8004c2a:	18d3      	adds	r3, r2, r3
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d02c      	beq.n	8004c8c <ParseSnippetCommand+0x74>
	return false;
	
// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8004c32:	4b19      	ldr	r3, [pc, #100]	; (8004c98 <ParseSnippetCommand+0x80>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d014      	beq.n	8004c64 <ParseSnippetCommand+0x4c>
	ptrStart =snippetBuffer;
	
// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00) {
 8004c3a:	4b17      	ldr	r3, [pc, #92]	; (8004c98 <ParseSnippetCommand+0x80>)
 8004c3c:	681d      	ldr	r5, [r3, #0]
 8004c3e:	782b      	ldrb	r3, [r5, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d012      	beq.n	8004c6a <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8004c44:	2113      	movs	r1, #19
 8004c46:	0028      	movs	r0, r5
 8004c48:	f00d f936 	bl	8011eb8 <strchr>
 8004c4c:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL) {
 8004c4e:	d011      	beq.n	8004c74 <ParseSnippetCommand+0x5c>
		strncpy((char*) cliBuffer,ptrStart,ptrEnd - ptrStart);
 8004c50:	1b42      	subs	r2, r0, r5
 8004c52:	0029      	movs	r1, r5
 8004c54:	0020      	movs	r0, r4
 8004c56:	f00d f956 	bl	8011f06 <strncpy>
		ptrStart =ptrEnd + 1;
 8004c5a:	3601      	adds	r6, #1
 8004c5c:	4b0e      	ldr	r3, [pc, #56]	; (8004c98 <ParseSnippetCommand+0x80>)
 8004c5e:	601e      	str	r6, [r3, #0]
	else {
		strcpy((char*) cliBuffer,ptrStart);
		ptrStart +=strlen((const char*) cliBuffer);
	}
	
	return true;
 8004c60:	2001      	movs	r0, #1
 8004c62:	e006      	b.n	8004c72 <ParseSnippetCommand+0x5a>
	ptrStart =snippetBuffer;
 8004c64:	4b0c      	ldr	r3, [pc, #48]	; (8004c98 <ParseSnippetCommand+0x80>)
 8004c66:	6018      	str	r0, [r3, #0]
 8004c68:	e7e7      	b.n	8004c3a <ParseSnippetCommand+0x22>
		ptrStart =0;// Initialize the start pointer for next Snippet
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <ParseSnippetCommand+0x80>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]
		return false;
 8004c70:	2000      	movs	r0, #0
}
 8004c72:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char*) cliBuffer,ptrStart);
 8004c74:	0029      	movs	r1, r5
 8004c76:	0020      	movs	r0, r4
 8004c78:	f00d f92c 	bl	8011ed4 <strcpy>
		ptrStart +=strlen((const char*) cliBuffer);
 8004c7c:	0020      	movs	r0, r4
 8004c7e:	f7fb fa4b 	bl	8000118 <strlen>
 8004c82:	182d      	adds	r5, r5, r0
 8004c84:	4b04      	ldr	r3, [pc, #16]	; (8004c98 <ParseSnippetCommand+0x80>)
 8004c86:	601d      	str	r5, [r3, #0]
	return true;
 8004c88:	2001      	movs	r0, #1
 8004c8a:	e7f2      	b.n	8004c72 <ParseSnippetCommand+0x5a>
	return false;
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	e7f0      	b.n	8004c72 <ParseSnippetCommand+0x5a>
 8004c90:	2000121f 	.word	0x2000121f
 8004c94:	200069a4 	.word	0x200069a4
 8004c98:	20001248 	.word	0x20001248

08004c9c <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 8004c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8004ca2:	0083      	lsls	r3, r0, #2
 8004ca4:	181b      	adds	r3, r3, r0
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4a3f      	ldr	r2, [pc, #252]	; (8004da8 <CheckSnippetCondition+0x10c>)
 8004caa:	5c9b      	ldrb	r3, [r3, r2]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d003      	beq.n	8004cb8 <CheckSnippetCondition+0x1c>
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d015      	beq.n	8004ce0 <CheckSnippetCondition+0x44>
		
		default:
			break;
	}
	
	return false;
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	e011      	b.n	8004cdc <CheckSnippetCondition+0x40>
		temp8 =snippets[index].cond.buffer1[0];// Button port
 8004cb8:	493b      	ldr	r1, [pc, #236]	; (8004da8 <CheckSnippetCondition+0x10c>)
 8004cba:	0083      	lsls	r3, r0, #2
 8004cbc:	181a      	adds	r2, r3, r0
 8004cbe:	0092      	lsls	r2, r2, #2
 8004cc0:	188a      	adds	r2, r1, r2
		if(snippets[index].cond.buffer1[1] == button[temp8].state)
 8004cc2:	7890      	ldrb	r0, [r2, #2]
 8004cc4:	00c2      	lsls	r2, r0, #3
 8004cc6:	1812      	adds	r2, r2, r0
 8004cc8:	191b      	adds	r3, r3, r4
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	18cb      	adds	r3, r1, r3
 8004cce:	4937      	ldr	r1, [pc, #220]	; (8004dac <CheckSnippetCondition+0x110>)
 8004cd0:	5c50      	ldrb	r0, [r2, r1]
 8004cd2:	78db      	ldrb	r3, [r3, #3]
 8004cd4:	1ac0      	subs	r0, r0, r3
 8004cd6:	4243      	negs	r3, r0
 8004cd8:	4158      	adcs	r0, r3
 8004cda:	b2c0      	uxtb	r0, r0
}
 8004cdc:	b003      	add	sp, #12
 8004cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flt1 =*(float*) modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8004ce0:	4e31      	ldr	r6, [pc, #196]	; (8004da8 <CheckSnippetCondition+0x10c>)
 8004ce2:	0085      	lsls	r5, r0, #2
 8004ce4:	182b      	adds	r3, r5, r0
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	18f3      	adds	r3, r6, r3
 8004cea:	78da      	ldrb	r2, [r3, #3]
 8004cec:	3a01      	subs	r2, #1
 8004cee:	0053      	lsls	r3, r2, #1
 8004cf0:	189b      	adds	r3, r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4a2e      	ldr	r2, [pc, #184]	; (8004db0 <CheckSnippetCondition+0x114>)
 8004cf6:	589b      	ldr	r3, [r3, r2]
 8004cf8:	681f      	ldr	r7, [r3, #0]
		memcpy((uint8_t*) &flt2,&snippets[index].cond.buffer2,sizeof(float));// This buffer can be misaligned and cause hardfault on F0
 8004cfa:	1829      	adds	r1, r5, r0
 8004cfc:	0089      	lsls	r1, r1, #2
 8004cfe:	3106      	adds	r1, #6
 8004d00:	1989      	adds	r1, r1, r6
 8004d02:	2204      	movs	r2, #4
 8004d04:	a801      	add	r0, sp, #4
 8004d06:	f00c fea6 	bl	8011a56 <memcpy>
		switch(snippets[index].cond.mathOperator){
 8004d0a:	192d      	adds	r5, r5, r4
 8004d0c:	00ad      	lsls	r5, r5, #2
 8004d0e:	1975      	adds	r5, r6, r5
 8004d10:	786b      	ldrb	r3, [r5, #1]
 8004d12:	2b06      	cmp	r3, #6
 8004d14:	d83f      	bhi.n	8004d96 <CheckSnippetCondition+0xfa>
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4a26      	ldr	r2, [pc, #152]	; (8004db4 <CheckSnippetCondition+0x118>)
 8004d1a:	58d3      	ldr	r3, [r2, r3]
 8004d1c:	469f      	mov	pc, r3
			if(flt1 == flt2)
 8004d1e:	1c39      	adds	r1, r7, #0
 8004d20:	9801      	ldr	r0, [sp, #4]
 8004d22:	f7fb fbd5 	bl	80004d0 <__aeabi_fcmpeq>
 8004d26:	1e43      	subs	r3, r0, #1
 8004d28:	4198      	sbcs	r0, r3
 8004d2a:	e7d7      	b.n	8004cdc <CheckSnippetCondition+0x40>
			if(flt1 > flt2)
 8004d2c:	1c39      	adds	r1, r7, #0
 8004d2e:	9801      	ldr	r0, [sp, #4]
 8004d30:	f7fb fbd4 	bl	80004dc <__aeabi_fcmplt>
 8004d34:	1e43      	subs	r3, r0, #1
 8004d36:	4198      	sbcs	r0, r3
 8004d38:	e7d0      	b.n	8004cdc <CheckSnippetCondition+0x40>
			if(flt1 < flt2 && flt1 != 0.0f)
 8004d3a:	1c39      	adds	r1, r7, #0
 8004d3c:	9801      	ldr	r0, [sp, #4]
 8004d3e:	f7fb fbe1 	bl	8000504 <__aeabi_fcmpgt>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d029      	beq.n	8004d9a <CheckSnippetCondition+0xfe>
 8004d46:	2100      	movs	r1, #0
 8004d48:	1c38      	adds	r0, r7, #0
 8004d4a:	f7fb fbc1 	bl	80004d0 <__aeabi_fcmpeq>
 8004d4e:	4243      	negs	r3, r0
 8004d50:	4158      	adcs	r0, r3
 8004d52:	e7c3      	b.n	8004cdc <CheckSnippetCondition+0x40>
			if(flt1 >= flt2)
 8004d54:	1c39      	adds	r1, r7, #0
 8004d56:	9801      	ldr	r0, [sp, #4]
 8004d58:	f7fb fbca 	bl	80004f0 <__aeabi_fcmple>
 8004d5c:	1e43      	subs	r3, r0, #1
 8004d5e:	4198      	sbcs	r0, r3
 8004d60:	e7bc      	b.n	8004cdc <CheckSnippetCondition+0x40>
			if(flt1 <= flt2 && flt1 != 0.0f)
 8004d62:	1c39      	adds	r1, r7, #0
 8004d64:	9801      	ldr	r0, [sp, #4]
 8004d66:	f7fb fbd7 	bl	8000518 <__aeabi_fcmpge>
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	d017      	beq.n	8004d9e <CheckSnippetCondition+0x102>
 8004d6e:	2100      	movs	r1, #0
 8004d70:	1c38      	adds	r0, r7, #0
 8004d72:	f7fb fbad 	bl	80004d0 <__aeabi_fcmpeq>
 8004d76:	4243      	negs	r3, r0
 8004d78:	4158      	adcs	r0, r3
 8004d7a:	e7af      	b.n	8004cdc <CheckSnippetCondition+0x40>
			if(flt1 != flt2 && flt1 != 0.0f)
 8004d7c:	1c39      	adds	r1, r7, #0
 8004d7e:	9801      	ldr	r0, [sp, #4]
 8004d80:	f7fb fba6 	bl	80004d0 <__aeabi_fcmpeq>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d10c      	bne.n	8004da2 <CheckSnippetCondition+0x106>
 8004d88:	2100      	movs	r1, #0
 8004d8a:	1c38      	adds	r0, r7, #0
 8004d8c:	f7fb fba0 	bl	80004d0 <__aeabi_fcmpeq>
 8004d90:	4243      	negs	r3, r0
 8004d92:	4158      	adcs	r0, r3
 8004d94:	e7a2      	b.n	8004cdc <CheckSnippetCondition+0x40>
	return false;
 8004d96:	2000      	movs	r0, #0
 8004d98:	e7a0      	b.n	8004cdc <CheckSnippetCondition+0x40>
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	e79e      	b.n	8004cdc <CheckSnippetCondition+0x40>
 8004d9e:	2000      	movs	r0, #0
 8004da0:	e79c      	b.n	8004cdc <CheckSnippetCondition+0x40>
 8004da2:	2000      	movs	r0, #0
 8004da4:	e79a      	b.n	8004cdc <CheckSnippetCondition+0x40>
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	200069a4 	.word	0x200069a4
 8004dac:	20001508 	.word	0x20001508
 8004db0:	20000084 	.word	0x20000084
 8004db4:	08016888 	.word	0x08016888

08004db8 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004dba:	f007 fe3d 	bl	800ca38 <FreeRTOS_CLIGetOutputBuffer>
 8004dbe:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++) {
 8004dc0:	4b1c      	ldr	r3, [pc, #112]	; (8004e34 <ExecuteSnippet+0x7c>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d032      	beq.n	8004e2e <ExecuteSnippet+0x76>
 8004dc8:	2400      	movs	r4, #0
		if(snippets[s].state)// Check for activated Snippets
 8004dca:	4f1b      	ldr	r7, [pc, #108]	; (8004e38 <ExecuteSnippet+0x80>)
 8004dcc:	e01a      	b.n	8004e04 <ExecuteSnippet+0x4c>
				while(ParseSnippetCommand(snippets[s].cmd,
				    (int8_t*) &cInputString) != false) {
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,
 8004dce:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <ExecuteSnippet+0x84>)
 8004dd0:	7818      	ldrb	r0, [r3, #0]
 8004dd2:	002b      	movs	r3, r5
 8004dd4:	4a1a      	ldr	r2, [pc, #104]	; (8004e40 <ExecuteSnippet+0x88>)
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	f7ff fc1c 	bl	8004614 <CLI_CommandParser>
					    pcOutputString);
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,
 8004ddc:	0028      	movs	r0, r5
 8004dde:	f7fb f99b 	bl	8000118 <strlen>
 8004de2:	0002      	movs	r2, r0
 8004de4:	2100      	movs	r1, #0
 8004de6:	0028      	movs	r0, r5
 8004de8:	f00c fe3e 	bl	8011a68 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,
 8004dec:	4914      	ldr	r1, [pc, #80]	; (8004e40 <ExecuteSnippet+0x88>)
 8004dee:	68f0      	ldr	r0, [r6, #12]
 8004df0:	f7ff ff12 	bl	8004c18 <ParseSnippetCommand>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	d1ea      	bne.n	8004dce <ExecuteSnippet+0x16>
	for(s =0; s < numOfRecordedSnippets; s++) {
 8004df8:	3401      	adds	r4, #1
 8004dfa:	b2a4      	uxth	r4, r4
 8004dfc:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <ExecuteSnippet+0x7c>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	42a3      	cmp	r3, r4
 8004e02:	d914      	bls.n	8004e2e <ExecuteSnippet+0x76>
		if(snippets[s].state)// Check for activated Snippets
 8004e04:	00a3      	lsls	r3, r4, #2
 8004e06:	191b      	adds	r3, r3, r4
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	18fb      	adds	r3, r7, r3
 8004e0c:	7c1b      	ldrb	r3, [r3, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f2      	beq.n	8004df8 <ExecuteSnippet+0x40>
			if(CheckSnippetCondition(s))// Process Snippet condition 				
 8004e12:	b2e0      	uxtb	r0, r4
 8004e14:	f7ff ff42 	bl	8004c9c <CheckSnippetCondition>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	d0ed      	beq.n	8004df8 <ExecuteSnippet+0x40>
				BOS.response = BOS_RESPONSE_MSG;// Disable CLI response
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <ExecuteSnippet+0x8c>)
 8004e1e:	2220      	movs	r2, #32
 8004e20:	719a      	strb	r2, [r3, #6]
				while(ParseSnippetCommand(snippets[s].cmd,
 8004e22:	00a3      	lsls	r3, r4, #2
 8004e24:	191e      	adds	r6, r3, r4
 8004e26:	00b6      	lsls	r6, r6, #2
 8004e28:	4b03      	ldr	r3, [pc, #12]	; (8004e38 <ExecuteSnippet+0x80>)
 8004e2a:	199e      	adds	r6, r3, r6
 8004e2c:	e7de      	b.n	8004dec <ExecuteSnippet+0x34>
			}
		}
	}
	
	return result;
}
 8004e2e:	2000      	movs	r0, #0
 8004e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	2000121f 	.word	0x2000121f
 8004e38:	200069a4 	.word	0x200069a4
 8004e3c:	20000a77 	.word	0x20000a77
 8004e40:	200011b8 	.word	0x200011b8
 8004e44:	20006988 	.word	0x20006988

08004e48 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 8004e48:	2000      	movs	r0, #0
 8004e4a:	4770      	bx	lr

08004e4c <setBaudrateCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,
    size_t xWriteBufferLen, const int8_t *pcCommandString){
 8004e4c:	b570      	push	{r4, r5, r6, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	0004      	movs	r4, r0
 8004e52:	0015      	movs	r5, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 8004e54:	2300      	movs	r3, #0
 8004e56:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8004e58:	9300      	str	r3, [sp, #0]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d101      	bne.n	8004e62 <setBaudrateCommand+0x16>
 8004e5e:	b672      	cpsid	i
 8004e60:	e7fe      	b.n	8004e60 <setBaudrateCommand+0x14>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,1,
 8004e62:	aa01      	add	r2, sp, #4
 8004e64:	2101      	movs	r1, #1
 8004e66:	0028      	movs	r0, r5
 8004e68:	f007 fdea 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	    &xParameterStringLength1);
	if(pcParameterString1[0] == 'p') {
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	56c3      	ldrsb	r3, [r0, r3]
 8004e70:	2b70      	cmp	r3, #112	; 0x70
 8004e72:	d00c      	beq.n	8004e8e <setBaudrateCommand+0x42>
	}
	else {
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,2,
 8004e74:	466a      	mov	r2, sp
 8004e76:	2102      	movs	r1, #2
 8004e78:	0028      	movs	r0, r5
 8004e7a:	f007 fde1 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	    &xParameterStringLength2);
	baudrate =(uint32_t) atol((char*) pcParameterString2);
 8004e7e:	f00c fb60 	bl	8011542 <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result) {
		strcpy((char*) pcWriteBuffer,(char*) pcMessageWrongParam);
 8004e82:	2213      	movs	r2, #19
 8004e84:	490f      	ldr	r1, [pc, #60]	; (8004ec4 <setBaudrateCommand+0x78>)
 8004e86:	0020      	movs	r0, r4
 8004e88:	f00c fde5 	bl	8011a56 <memcpy>
		UpdateBaudrate(port,baudrate);
		sprintf((char*) pcWriteBuffer,(char*) pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 8004e8c:	e016      	b.n	8004ebc <setBaudrateCommand+0x70>
		port =(uint8_t) atol((char*) pcParameterString1 + 1);
 8004e8e:	3001      	adds	r0, #1
 8004e90:	f00c fb57 	bl	8011542 <atol>
 8004e94:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,2,
 8004e96:	466a      	mov	r2, sp
 8004e98:	2102      	movs	r1, #2
 8004e9a:	0028      	movs	r0, r5
 8004e9c:	f007 fdd0 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t) atol((char*) pcParameterString2);
 8004ea0:	f00c fb4f 	bl	8011542 <atol>
 8004ea4:	0005      	movs	r5, r0
		UpdateBaudrate(port,baudrate);
 8004ea6:	b2f0      	uxtb	r0, r6
 8004ea8:	0029      	movs	r1, r5
 8004eaa:	f007 fbf1 	bl	800c690 <UpdateBaudrate>
		sprintf((char*) pcWriteBuffer,(char*) pcMessageOK,baudrate,port);
 8004eae:	23ff      	movs	r3, #255	; 0xff
 8004eb0:	4033      	ands	r3, r6
 8004eb2:	002a      	movs	r2, r5
 8004eb4:	4904      	ldr	r1, [pc, #16]	; (8004ec8 <setBaudrateCommand+0x7c>)
 8004eb6:	0020      	movs	r0, r4
 8004eb8:	f00c ffd0 	bl	8011e5c <sprintf>
}
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	b002      	add	sp, #8
 8004ec0:	bd70      	pop	{r4, r5, r6, pc}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	08017660 	.word	0x08017660
 8004ec8:	08017638 	.word	0x08017638

08004ecc <flashsizeCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,
    size_t xWriteBufferLen, const int8_t *pcCommandString){
 8004ecc:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	d101      	bne.n	8004ed6 <flashsizeCommand+0xa>
 8004ed2:	b672      	cpsid	i
 8004ed4:	e7fe      	b.n	8004ed4 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf((char*) pcWriteBuffer,(char*) pcMessageFLASH,
 8004ed6:	4b03      	ldr	r3, [pc, #12]	; (8004ee4 <flashsizeCommand+0x18>)
 8004ed8:	881a      	ldrh	r2, [r3, #0]
 8004eda:	4903      	ldr	r1, [pc, #12]	; (8004ee8 <flashsizeCommand+0x1c>)
 8004edc:	f00c ffbe 	bl	8011e5c <sprintf>
	    (*(uint32_t*) (MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	bd10      	pop	{r4, pc}
 8004ee4:	1ffff7cc 	.word	0x1ffff7cc
 8004ee8:	0801702c 	.word	0x0801702c

08004eec <testportCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,
    size_t xWriteBufferLen, const int8_t *pcCommandString){
 8004eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eee:	46d6      	mov	lr, sl
 8004ef0:	4647      	mov	r7, r8
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b085      	sub	sp, #20
 8004ef6:	0004      	movs	r4, r0
 8004ef8:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong1 =
	    (int8_t*) "the port number is wrong\n\r";
	static const int8_t *pcMessageWait =
	    (int8_t*) "Please shorten the next port and press any key to continue testing the next one\n\r\n\r";
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	9303      	str	r3, [sp, #12]
	BOS_Status result =BOS_OK;
	uint8_t portt, ports;
	extern uint8_t UARTRxBufIndex[NumOfPorts];
	char WriteVaule[1] ="H";
 8004efe:	4b62      	ldr	r3, [pc, #392]	; (8005088 <testportCommand+0x19c>)
 8004f00:	781a      	ldrb	r2, [r3, #0]
 8004f02:	ab02      	add	r3, sp, #8
 8004f04:	701a      	strb	r2, [r3, #0]
	int LastEnter =0;
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8004f06:	2c00      	cmp	r4, #0
 8004f08:	d101      	bne.n	8004f0e <testportCommand+0x22>
 8004f0a:	b672      	cpsid	i
 8004f0c:	e7fe      	b.n	8004f0c <testportCommand+0x20>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,1,
 8004f0e:	aa03      	add	r2, sp, #12
 8004f10:	2101      	movs	r1, #1
 8004f12:	f007 fd95 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 8004f16:	0005      	movs	r5, r0
	    &xParameterStringLength1);
	if(strcmp((char*) pcParameterString1,"all") == 0) {
 8004f18:	495c      	ldr	r1, [pc, #368]	; (800508c <testportCommand+0x1a0>)
 8004f1a:	f7fb f8f3 	bl	8000104 <strcmp>
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d173      	bne.n	800500a <testportCommand+0x11e>
		if(LastEnter == 0)
		LastEnter =UARTRxBufIndex[PcPort - 1];
 8004f22:	4b5b      	ldr	r3, [pc, #364]	; (8005090 <testportCommand+0x1a4>)
 8004f24:	781a      	ldrb	r2, [r3, #0]
 8004f26:	4b5b      	ldr	r3, [pc, #364]	; (8005094 <testportCommand+0x1a8>)
 8004f28:	189b      	adds	r3, r3, r2
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	781e      	ldrb	r6, [r3, #0]
 8004f2e:	2501      	movs	r5, #1
		for(ports =1; ports <= NumOfPorts; ports++) {
			if(PcPort != ports) {
 8004f30:	4b57      	ldr	r3, [pc, #348]	; (8005090 <testportCommand+0x1a4>)
 8004f32:	4698      	mov	r8, r3
 8004f34:	e015      	b.n	8004f62 <testportCommand+0x76>
				result =BOS_OK;
				else
				result =BOS_ERR_Keyword;
				
				if(result == BOS_OK) {
					sprintf((char*) pcWriteBuffer,(char*) pcMessageOK,ports);
 8004f36:	002a      	movs	r2, r5
 8004f38:	4957      	ldr	r1, [pc, #348]	; (8005098 <testportCommand+0x1ac>)
 8004f3a:	0020      	movs	r0, r4
 8004f3c:	f00c ff8e 	bl	8011e5c <sprintf>
					writePxMutex(PcPort,(char*) pcWriteBuffer,
					    strlen((char*) pcWriteBuffer),10,100);
 8004f40:	0020      	movs	r0, r4
 8004f42:	f7fb f8e9 	bl	8000118 <strlen>
					writePxMutex(PcPort,(char*) pcWriteBuffer,
 8004f46:	b282      	uxth	r2, r0
 8004f48:	4b51      	ldr	r3, [pc, #324]	; (8005090 <testportCommand+0x1a4>)
 8004f4a:	7818      	ldrb	r0, [r3, #0]
 8004f4c:	2364      	movs	r3, #100	; 0x64
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	3b5a      	subs	r3, #90	; 0x5a
 8004f52:	0021      	movs	r1, r4
 8004f54:	f007 fb2e 	bl	800c5b4 <writePxMutex>
 8004f58:	e02f      	b.n	8004fba <testportCommand+0xce>
 8004f5a:	3501      	adds	r5, #1
		for(ports =1; ports <= NumOfPorts; ports++) {
 8004f5c:	2d07      	cmp	r5, #7
 8004f5e:	d100      	bne.n	8004f62 <testportCommand+0x76>
 8004f60:	e07f      	b.n	8005062 <testportCommand+0x176>
 8004f62:	b2eb      	uxtb	r3, r5
 8004f64:	469a      	mov	sl, r3
			if(PcPort != ports) {
 8004f66:	4643      	mov	r3, r8
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	4553      	cmp	r3, sl
 8004f6c:	d0f5      	beq.n	8004f5a <testportCommand+0x6e>
				WriteVaule[0] =rand();
 8004f6e:	f00c fd93 	bl	8011a98 <rand>
 8004f72:	af02      	add	r7, sp, #8
 8004f74:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 8004f76:	2364      	movs	r3, #100	; 0x64
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	3b5a      	subs	r3, #90	; 0x5a
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	0039      	movs	r1, r7
 8004f80:	4650      	mov	r0, sl
 8004f82:	f007 fb17 	bl	800c5b4 <writePxMutex>
				ReadValue[0] = (GetUart(ports)->Instance->RDR);
 8004f86:	4650      	mov	r0, sl
 8004f88:	f007 faf2 	bl	800c570 <GetUart>
 8004f8c:	6803      	ldr	r3, [r0, #0]
 8004f8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 8004f90:	783a      	ldrb	r2, [r7, #0]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d0ce      	beq.n	8004f36 <testportCommand+0x4a>
				}
				else if(result == BOS_ERR_Keyword) {
					sprintf((char*) pcWriteBuffer,(char*) pcMessageFail,
 8004f98:	002a      	movs	r2, r5
 8004f9a:	4940      	ldr	r1, [pc, #256]	; (800509c <testportCommand+0x1b0>)
 8004f9c:	0020      	movs	r0, r4
 8004f9e:	f00c ff5d 	bl	8011e5c <sprintf>
					    ports);
					writePxMutex(PcPort,(char*) pcWriteBuffer,
					    strlen((char*) pcWriteBuffer),10,100);
 8004fa2:	0020      	movs	r0, r4
 8004fa4:	f7fb f8b8 	bl	8000118 <strlen>
					writePxMutex(PcPort,(char*) pcWriteBuffer,
 8004fa8:	b282      	uxth	r2, r0
 8004faa:	4b39      	ldr	r3, [pc, #228]	; (8005090 <testportCommand+0x1a4>)
 8004fac:	7818      	ldrb	r0, [r3, #0]
 8004fae:	2364      	movs	r3, #100	; 0x64
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	3b5a      	subs	r3, #90	; 0x5a
 8004fb4:	0021      	movs	r1, r4
 8004fb6:	f007 fafd 	bl	800c5b4 <writePxMutex>
				}
				strcpy((char*) pcWriteBuffer,(char*) pcMessageWait);
 8004fba:	2254      	movs	r2, #84	; 0x54
 8004fbc:	4938      	ldr	r1, [pc, #224]	; (80050a0 <testportCommand+0x1b4>)
 8004fbe:	0020      	movs	r0, r4
 8004fc0:	f00c fd49 	bl	8011a56 <memcpy>
				writePxMutex(PcPort,(char*) pcWriteBuffer,
				    strlen((char*) pcWriteBuffer),10,100);
 8004fc4:	0020      	movs	r0, r4
 8004fc6:	f7fb f8a7 	bl	8000118 <strlen>
				writePxMutex(PcPort,(char*) pcWriteBuffer,
 8004fca:	b282      	uxth	r2, r0
 8004fcc:	4b30      	ldr	r3, [pc, #192]	; (8005090 <testportCommand+0x1a4>)
 8004fce:	7818      	ldrb	r0, [r3, #0]
 8004fd0:	2364      	movs	r3, #100	; 0x64
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	3b5a      	subs	r3, #90	; 0x5a
 8004fd6:	0021      	movs	r1, r4
 8004fd8:	f007 faec 	bl	800c5b4 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0) {
 8004fdc:	3601      	adds	r6, #1
 8004fde:	4b2c      	ldr	r3, [pc, #176]	; (8005090 <testportCommand+0x1a4>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	019b      	lsls	r3, r3, #6
 8004fe6:	4a2f      	ldr	r2, [pc, #188]	; (80050a4 <testportCommand+0x1b8>)
 8004fe8:	18d3      	adds	r3, r2, r3
 8004fea:	5d9b      	ldrb	r3, [r3, r6]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1b4      	bne.n	8004f5a <testportCommand+0x6e>
 8004ff0:	4692      	mov	sl, r2
 8004ff2:	4f27      	ldr	r7, [pc, #156]	; (8005090 <testportCommand+0x1a4>)
					Delay_ms(1);
 8004ff4:	2001      	movs	r0, #1
 8004ff6:	f009 fc35 	bl	800e864 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0) {
 8004ffa:	783b      	ldrb	r3, [r7, #0]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	019b      	lsls	r3, r3, #6
 8005000:	4453      	add	r3, sl
 8005002:	5d9b      	ldrb	r3, [r3, r6]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0f5      	beq.n	8004ff4 <testportCommand+0x108>
 8005008:	e7a7      	b.n	8004f5a <testportCommand+0x6e>
				}
				LastEnter++;
			}
		}
	}
	else if(pcParameterString1[0] == 'p') {
 800500a:	2300      	movs	r3, #0
 800500c:	56eb      	ldrsb	r3, [r5, r3]
 800500e:	2b70      	cmp	r3, #112	; 0x70
 8005010:	d005      	beq.n	800501e <testportCommand+0x132>
		strcpy((char*) pcWriteBuffer,(char*) pcMessageWrong1);
		else if(result == BOS_ERR_Keyword)
		sprintf((char*) pcWriteBuffer,(char*) pcMessageFail,portt);
	}
	else {
		strcpy((char*) pcWriteBuffer,(char*) pcMessageWrong);
 8005012:	220f      	movs	r2, #15
 8005014:	4924      	ldr	r1, [pc, #144]	; (80050a8 <testportCommand+0x1bc>)
 8005016:	0020      	movs	r0, r4
 8005018:	f00c fd1d 	bl	8011a56 <memcpy>
 800501c:	e021      	b.n	8005062 <testportCommand+0x176>
		portt =(uint8_t) atol((char*) pcParameterString1 + 1);
 800501e:	1c68      	adds	r0, r5, #1
 8005020:	f00c fa8f 	bl	8011542 <atol>
 8005024:	0005      	movs	r5, r0
 8005026:	b2c7      	uxtb	r7, r0
		if(portt > 0 && portt <= NumOfPorts) {
 8005028:	1e7b      	subs	r3, r7, #1
 800502a:	2b05      	cmp	r3, #5
 800502c:	d825      	bhi.n	800507a <testportCommand+0x18e>
				WriteVaule[0] =rand();
 800502e:	f00c fd33 	bl	8011a98 <rand>
 8005032:	ae02      	add	r6, sp, #8
 8005034:	7030      	strb	r0, [r6, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005036:	2364      	movs	r3, #100	; 0x64
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	3b32      	subs	r3, #50	; 0x32
 800503c:	2201      	movs	r2, #1
 800503e:	0031      	movs	r1, r6
 8005040:	0038      	movs	r0, r7
 8005042:	f007 fab7 	bl	800c5b4 <writePxMutex>
				ReadValue[0] = (GetUart(portt)->Instance->RDR);
 8005046:	0038      	movs	r0, r7
 8005048:	f007 fa92 	bl	800c570 <GetUart>
 800504c:	6803      	ldr	r3, [r0, #0]
 800504e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if(WriteVaule[0] == ReadValue[0])
 8005050:	7832      	ldrb	r2, [r6, #0]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	429a      	cmp	r2, r3
 8005056:	d10a      	bne.n	800506e <testportCommand+0x182>
		sprintf((char*) pcWriteBuffer,(char*) pcMessageOK,portt);
 8005058:	b2ea      	uxtb	r2, r5
 800505a:	490f      	ldr	r1, [pc, #60]	; (8005098 <testportCommand+0x1ac>)
 800505c:	0020      	movs	r0, r4
 800505e:	f00c fefd 	bl	8011e5c <sprintf>
	}
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005062:	2000      	movs	r0, #0
 8005064:	b005      	add	sp, #20
 8005066:	bc0c      	pop	{r2, r3}
 8005068:	4690      	mov	r8, r2
 800506a:	469a      	mov	sl, r3
 800506c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char*) pcWriteBuffer,(char*) pcMessageFail,portt);
 800506e:	b2ea      	uxtb	r2, r5
 8005070:	490a      	ldr	r1, [pc, #40]	; (800509c <testportCommand+0x1b0>)
 8005072:	0020      	movs	r0, r4
 8005074:	f00c fef2 	bl	8011e5c <sprintf>
 8005078:	e7f3      	b.n	8005062 <testportCommand+0x176>
		strcpy((char*) pcWriteBuffer,(char*) pcMessageWrong1);
 800507a:	221b      	movs	r2, #27
 800507c:	490b      	ldr	r1, [pc, #44]	; (80050ac <testportCommand+0x1c0>)
 800507e:	0020      	movs	r0, r4
 8005080:	f00c fce9 	bl	8011a56 <memcpy>
	return pdFALSE;
 8005084:	e7ed      	b.n	8005062 <testportCommand+0x176>
 8005086:	46c0      	nop			; (mov r8, r8)
 8005088:	08016258 	.word	0x08016258
 800508c:	08016574 	.word	0x08016574
 8005090:	20000a77 	.word	0x20000a77
 8005094:	20001450 	.word	0x20001450
 8005098:	080187ec 	.word	0x080187ec
 800509c:	08018808 	.word	0x08018808
 80050a0:	0801881c 	.word	0x0801881c
 80050a4:	200012d0 	.word	0x200012d0
 80050a8:	08018870 	.word	0x08018870
 80050ac:	08018880 	.word	0x08018880

080050b0 <unbridgeCommand>:
    size_t xWriteBufferLen, const int8_t *pcCommandString){
 80050b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050b2:	b083      	sub	sp, #12
 80050b4:	0004      	movs	r4, r0
 80050b6:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80050b8:	2300      	movs	r3, #0
 80050ba:	9301      	str	r3, [sp, #4]
 80050bc:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 80050be:	2800      	cmp	r0, #0
 80050c0:	d101      	bne.n	80050c6 <unbridgeCommand+0x16>
 80050c2:	b672      	cpsid	i
 80050c4:	e7fe      	b.n	80050c4 <unbridgeCommand+0x14>
	pcParameterString1 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,1,
 80050c6:	aa01      	add	r2, sp, #4
 80050c8:	2101      	movs	r1, #1
 80050ca:	0028      	movs	r0, r5
 80050cc:	f007 fcb8 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p') {
 80050d0:	2300      	movs	r3, #0
 80050d2:	56c3      	ldrsb	r3, [r0, r3]
 80050d4:	2b70      	cmp	r3, #112	; 0x70
 80050d6:	d00e      	beq.n	80050f6 <unbridgeCommand+0x46>
	pcParameterString2 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,2,
 80050d8:	466a      	mov	r2, sp
 80050da:	2102      	movs	r1, #2
 80050dc:	0028      	movs	r0, r5
 80050de:	f007 fcaf 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p') {
 80050e2:	2300      	movs	r3, #0
 80050e4:	56c3      	ldrsb	r3, [r0, r3]
 80050e6:	2b70      	cmp	r3, #112	; 0x70
 80050e8:	d01e      	beq.n	8005128 <unbridgeCommand+0x78>
	strcpy((char*) pcWriteBuffer,(char*) pcMessageWrong);
 80050ea:	220f      	movs	r2, #15
 80050ec:	491a      	ldr	r1, [pc, #104]	; (8005158 <unbridgeCommand+0xa8>)
 80050ee:	0020      	movs	r0, r4
 80050f0:	f00c fcb1 	bl	8011a56 <memcpy>
 80050f4:	e015      	b.n	8005122 <unbridgeCommand+0x72>
		port1 =(uint8_t) atol((char*) pcParameterString1 + 1);
 80050f6:	3001      	adds	r0, #1
 80050f8:	f00c fa23 	bl	8011542 <atol>
 80050fc:	0006      	movs	r6, r0
 80050fe:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,2,
 8005100:	466a      	mov	r2, sp
 8005102:	2102      	movs	r1, #2
 8005104:	0028      	movs	r0, r5
 8005106:	f007 fc9b 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p') {
 800510a:	2300      	movs	r3, #0
 800510c:	56c3      	ldrsb	r3, [r0, r3]
 800510e:	2b70      	cmp	r3, #112	; 0x70
 8005110:	d00e      	beq.n	8005130 <unbridgeCommand+0x80>
	result =BOS_ERR_WrongParam;
 8005112:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005114:	2867      	cmp	r0, #103	; 0x67
 8005116:	d0e8      	beq.n	80050ea <unbridgeCommand+0x3a>
	strcpy((char*) pcWriteBuffer,(char*) pcMessageFail);
 8005118:	2219      	movs	r2, #25
 800511a:	4910      	ldr	r1, [pc, #64]	; (800515c <unbridgeCommand+0xac>)
 800511c:	0020      	movs	r0, r4
 800511e:	f00c fc9a 	bl	8011a56 <memcpy>
}
 8005122:	2000      	movs	r0, #0
 8005124:	b003      	add	sp, #12
 8005126:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 =(uint8_t) atol((char*) pcParameterString2 + 1);
 8005128:	3001      	adds	r0, #1
 800512a:	f00c fa0a 	bl	8011542 <atol>
 800512e:	e7dc      	b.n	80050ea <unbridgeCommand+0x3a>
 8005130:	3001      	adds	r0, #1
 8005132:	f00c fa06 	bl	8011542 <atol>
 8005136:	0005      	movs	r5, r0
	result =Unbridge(port1,port2);
 8005138:	b2c1      	uxtb	r1, r0
 800513a:	0038      	movs	r0, r7
 800513c:	f7fe ff6e 	bl	800401c <Unbridge>
	if(result == BOS_OK)
 8005140:	2800      	cmp	r0, #0
 8005142:	d1e7      	bne.n	8005114 <unbridgeCommand+0x64>
	sprintf((char*) pcWriteBuffer,(char*) pcMessageOK,port1,port2);
 8005144:	22ff      	movs	r2, #255	; 0xff
 8005146:	002b      	movs	r3, r5
 8005148:	4013      	ands	r3, r2
 800514a:	4032      	ands	r2, r6
 800514c:	4904      	ldr	r1, [pc, #16]	; (8005160 <unbridgeCommand+0xb0>)
 800514e:	0020      	movs	r0, r4
 8005150:	f00c fe84 	bl	8011e5c <sprintf>
 8005154:	e7e5      	b.n	8005122 <unbridgeCommand+0x72>
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	08018870 	.word	0x08018870
 800515c:	08018938 	.word	0x08018938
 8005160:	08018918 	.word	0x08018918

08005164 <bridgeCommand>:
    size_t xWriteBufferLen, const int8_t *pcCommandString){
 8005164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005166:	b083      	sub	sp, #12
 8005168:	0004      	movs	r4, r0
 800516a:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 800516c:	2300      	movs	r3, #0
 800516e:	9301      	str	r3, [sp, #4]
 8005170:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005172:	2800      	cmp	r0, #0
 8005174:	d101      	bne.n	800517a <bridgeCommand+0x16>
 8005176:	b672      	cpsid	i
 8005178:	e7fe      	b.n	8005178 <bridgeCommand+0x14>
	pcParameterString1 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,1,
 800517a:	aa01      	add	r2, sp, #4
 800517c:	2101      	movs	r1, #1
 800517e:	0028      	movs	r0, r5
 8005180:	f007 fc5e 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p') {
 8005184:	2300      	movs	r3, #0
 8005186:	56c3      	ldrsb	r3, [r0, r3]
 8005188:	2b70      	cmp	r3, #112	; 0x70
 800518a:	d00e      	beq.n	80051aa <bridgeCommand+0x46>
	pcParameterString2 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,2,
 800518c:	466a      	mov	r2, sp
 800518e:	2102      	movs	r1, #2
 8005190:	0028      	movs	r0, r5
 8005192:	f007 fc55 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p') {
 8005196:	2300      	movs	r3, #0
 8005198:	56c3      	ldrsb	r3, [r0, r3]
 800519a:	2b70      	cmp	r3, #112	; 0x70
 800519c:	d01e      	beq.n	80051dc <bridgeCommand+0x78>
	strcpy((char*) pcWriteBuffer,(char*) pcMessageWrong);
 800519e:	220f      	movs	r2, #15
 80051a0:	491a      	ldr	r1, [pc, #104]	; (800520c <bridgeCommand+0xa8>)
 80051a2:	0020      	movs	r0, r4
 80051a4:	f00c fc57 	bl	8011a56 <memcpy>
 80051a8:	e015      	b.n	80051d6 <bridgeCommand+0x72>
		port1 =(uint8_t) atol((char*) pcParameterString1 + 1);
 80051aa:	3001      	adds	r0, #1
 80051ac:	f00c f9c9 	bl	8011542 <atol>
 80051b0:	0006      	movs	r6, r0
 80051b2:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,2,
 80051b4:	466a      	mov	r2, sp
 80051b6:	2102      	movs	r1, #2
 80051b8:	0028      	movs	r0, r5
 80051ba:	f007 fc41 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p') {
 80051be:	2300      	movs	r3, #0
 80051c0:	56c3      	ldrsb	r3, [r0, r3]
 80051c2:	2b70      	cmp	r3, #112	; 0x70
 80051c4:	d00e      	beq.n	80051e4 <bridgeCommand+0x80>
	result =BOS_ERR_WrongParam;
 80051c6:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 80051c8:	2867      	cmp	r0, #103	; 0x67
 80051ca:	d0e8      	beq.n	800519e <bridgeCommand+0x3a>
	strcpy((char*) pcWriteBuffer,(char*) pcMessageFail);
 80051cc:	2217      	movs	r2, #23
 80051ce:	4910      	ldr	r1, [pc, #64]	; (8005210 <bridgeCommand+0xac>)
 80051d0:	0020      	movs	r0, r4
 80051d2:	f00c fc40 	bl	8011a56 <memcpy>
}
 80051d6:	2000      	movs	r0, #0
 80051d8:	b003      	add	sp, #12
 80051da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 =(uint8_t) atol((char*) pcParameterString2 + 1);
 80051dc:	3001      	adds	r0, #1
 80051de:	f00c f9b0 	bl	8011542 <atol>
 80051e2:	e7dc      	b.n	800519e <bridgeCommand+0x3a>
 80051e4:	3001      	adds	r0, #1
 80051e6:	f00c f9ac 	bl	8011542 <atol>
 80051ea:	0005      	movs	r5, r0
	result =Bridge(port1,port2);
 80051ec:	b2c1      	uxtb	r1, r0
 80051ee:	0038      	movs	r0, r7
 80051f0:	f7fe ff00 	bl	8003ff4 <Bridge>
	if(result == BOS_OK)
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d1e7      	bne.n	80051c8 <bridgeCommand+0x64>
	sprintf((char*) pcWriteBuffer,(char*) pcMessageOK,port1,port2);
 80051f8:	22ff      	movs	r2, #255	; 0xff
 80051fa:	002b      	movs	r3, r5
 80051fc:	4013      	ands	r3, r2
 80051fe:	4032      	ands	r2, r6
 8005200:	4904      	ldr	r1, [pc, #16]	; (8005214 <bridgeCommand+0xb0>)
 8005202:	0020      	movs	r0, r4
 8005204:	f00c fe2a 	bl	8011e5c <sprintf>
 8005208:	e7e5      	b.n	80051d6 <bridgeCommand+0x72>
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	08018870 	.word	0x08018870
 8005210:	08016ec8 	.word	0x08016ec8
 8005214:	08016ea4 	.word	0x08016ea4

08005218 <delSnipCommand>:
    size_t xWriteBufferLen, const int8_t *pcCommandString){
 8005218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800521a:	b085      	sub	sp, #20
 800521c:	0005      	movs	r5, r0
 800521e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005220:	2300      	movs	r3, #0
 8005222:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8005224:	2d00      	cmp	r5, #0
 8005226:	d101      	bne.n	800522c <delSnipCommand+0x14>
 8005228:	b672      	cpsid	i
 800522a:	e7fe      	b.n	800522a <delSnipCommand+0x12>
	pcParameterString1 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,1,
 800522c:	aa03      	add	r2, sp, #12
 800522e:	2101      	movs	r1, #1
 8005230:	f007 fc06 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t) atoi((char*) pcParameterString1);
 8005234:	f00c f97f 	bl	8011536 <atoi>
 8005238:	9001      	str	r0, [sp, #4]
 800523a:	b2c6      	uxtb	r6, r0
	if(!index || index > numOfRecordedSnippets)
 800523c:	2e00      	cmp	r6, #0
 800523e:	d003      	beq.n	8005248 <delSnipCommand+0x30>
 8005240:	4b27      	ldr	r3, [pc, #156]	; (80052e0 <delSnipCommand+0xc8>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	42b3      	cmp	r3, r6
 8005246:	d207      	bcs.n	8005258 <delSnipCommand+0x40>
	strcpy((char*) pcWriteBuffer,(char*) pcMessageWrong);
 8005248:	2223      	movs	r2, #35	; 0x23
 800524a:	4926      	ldr	r1, [pc, #152]	; (80052e4 <delSnipCommand+0xcc>)
 800524c:	0028      	movs	r0, r5
 800524e:	f00c fc02 	bl	8011a56 <memcpy>
}
 8005252:	2000      	movs	r0, #0
 8005254:	b005      	add	sp, #20
 8005256:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 8005258:	466b      	mov	r3, sp
 800525a:	791a      	ldrb	r2, [r3, #4]
 800525c:	3a01      	subs	r2, #1
 800525e:	4822      	ldr	r0, [pc, #136]	; (80052e8 <delSnipCommand+0xd0>)
 8005260:	2314      	movs	r3, #20
 8005262:	4353      	muls	r3, r2
 8005264:	2700      	movs	r7, #0
 8005266:	541f      	strb	r7, [r3, r0]
		snippets[index - 1].cond.mathOperator =0;
 8005268:	18c4      	adds	r4, r0, r3
 800526a:	7067      	strb	r7, [r4, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 800526c:	3302      	adds	r3, #2
 800526e:	1818      	adds	r0, r3, r0
 8005270:	2204      	movs	r2, #4
 8005272:	0039      	movs	r1, r7
 8005274:	f00c fbf8 	bl	8011a68 <memset>
		snippets[index - 1].state = false;
 8005278:	7427      	strb	r7, [r4, #16]
		free(snippets[index - 1].cmd);
 800527a:	68e0      	ldr	r0, [r4, #12]
 800527c:	f00c f9a8 	bl	80115d0 <free>
		snippets[index - 1].cmd = NULL;
 8005280:	60e7      	str	r7, [r4, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++) {
 8005282:	4b17      	ldr	r3, [pc, #92]	; (80052e0 <delSnipCommand+0xc8>)
 8005284:	781f      	ldrb	r7, [r3, #0]
 8005286:	42be      	cmp	r6, r7
 8005288:	d213      	bcs.n	80052b2 <delSnipCommand+0x9a>
 800528a:	466b      	mov	r3, sp
 800528c:	7919      	ldrb	r1, [r3, #4]
 800528e:	2214      	movs	r2, #20
 8005290:	0014      	movs	r4, r2
 8005292:	434c      	muls	r4, r1
 8005294:	4814      	ldr	r0, [pc, #80]	; (80052e8 <delSnipCommand+0xd0>)
 8005296:	1824      	adds	r4, r4, r0
 8005298:	1e7b      	subs	r3, r7, #1
 800529a:	1b9b      	subs	r3, r3, r6
 800529c:	b2db      	uxtb	r3, r3
 800529e:	185b      	adds	r3, r3, r1
 80052a0:	4353      	muls	r3, r2
 80052a2:	1880      	adds	r0, r0, r2
 80052a4:	181e      	adds	r6, r3, r0
			if(snippets[s].cond.conditionType) {
 80052a6:	7823      	ldrb	r3, [r4, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10d      	bne.n	80052c8 <delSnipCommand+0xb0>
 80052ac:	3414      	adds	r4, #20
		for(uint8_t s =index; s < numOfRecordedSnippets; s++) {
 80052ae:	42b4      	cmp	r4, r6
 80052b0:	d1f9      	bne.n	80052a6 <delSnipCommand+0x8e>
		--numOfRecordedSnippets;
 80052b2:	1e7b      	subs	r3, r7, #1
 80052b4:	4a0a      	ldr	r2, [pc, #40]	; (80052e0 <delSnipCommand+0xc8>)
 80052b6:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 80052b8:	f005 f9a2 	bl	800a600 <SaveToRO>
	strcpy((char*) pcWriteBuffer,(char*) pcMessageOK);
 80052bc:	2236      	movs	r2, #54	; 0x36
 80052be:	490b      	ldr	r1, [pc, #44]	; (80052ec <delSnipCommand+0xd4>)
 80052c0:	0028      	movs	r0, r5
 80052c2:	f00c fbc8 	bl	8011a56 <memcpy>
 80052c6:	e7c4      	b.n	8005252 <delSnipCommand+0x3a>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 80052c8:	2214      	movs	r2, #20
 80052ca:	0021      	movs	r1, r4
 80052cc:	0020      	movs	r0, r4
 80052ce:	3814      	subs	r0, #20
 80052d0:	f00c fbc1 	bl	8011a56 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 80052d4:	2214      	movs	r2, #20
 80052d6:	2100      	movs	r1, #0
 80052d8:	0020      	movs	r0, r4
 80052da:	f00c fbc5 	bl	8011a68 <memset>
 80052de:	e7e5      	b.n	80052ac <delSnipCommand+0x94>
 80052e0:	2000121f 	.word	0x2000121f
 80052e4:	08016fe8 	.word	0x08016fe8
 80052e8:	200069a4 	.word	0x200069a4
 80052ec:	08016fb0 	.word	0x08016fb0

080052f0 <pauseSnipCommand>:
    size_t xWriteBufferLen, const int8_t *pcCommandString){
 80052f0:	b510      	push	{r4, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	0004      	movs	r4, r0
 80052f6:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80052fc:	2c00      	cmp	r4, #0
 80052fe:	d101      	bne.n	8005304 <pauseSnipCommand+0x14>
 8005300:	b672      	cpsid	i
 8005302:	e7fe      	b.n	8005302 <pauseSnipCommand+0x12>
	pcParameterString1 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,1,
 8005304:	aa01      	add	r2, sp, #4
 8005306:	2101      	movs	r1, #1
 8005308:	f007 fb9a 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t) atoi((char*) pcParameterString1);
 800530c:	f00c f913 	bl	8011536 <atoi>
 8005310:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <pauseSnipCommand+0x2e>
 8005316:	4a0e      	ldr	r2, [pc, #56]	; (8005350 <pauseSnipCommand+0x60>)
 8005318:	7812      	ldrb	r2, [r2, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d207      	bcs.n	800532e <pauseSnipCommand+0x3e>
	strcpy((char*) pcWriteBuffer,(char*) pcMessageWrong);
 800531e:	2223      	movs	r2, #35	; 0x23
 8005320:	490c      	ldr	r1, [pc, #48]	; (8005354 <pauseSnipCommand+0x64>)
 8005322:	0020      	movs	r0, r4
 8005324:	f00c fb97 	bl	8011a56 <memcpy>
}
 8005328:	2000      	movs	r0, #0
 800532a:	b002      	add	sp, #8
 800532c:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 800532e:	b2c0      	uxtb	r0, r0
 8005330:	3801      	subs	r0, #1
 8005332:	2314      	movs	r3, #20
 8005334:	4343      	muls	r3, r0
 8005336:	4808      	ldr	r0, [pc, #32]	; (8005358 <pauseSnipCommand+0x68>)
 8005338:	18c0      	adds	r0, r0, r3
 800533a:	2300      	movs	r3, #0
 800533c:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 800533e:	f005 f95f 	bl	800a600 <SaveToRO>
		strcpy((char*) pcWriteBuffer,(char*) pcMessageOK);
 8005342:	2235      	movs	r2, #53	; 0x35
 8005344:	4905      	ldr	r1, [pc, #20]	; (800535c <pauseSnipCommand+0x6c>)
 8005346:	0020      	movs	r0, r4
 8005348:	f00c fb85 	bl	8011a56 <memcpy>
 800534c:	e7ec      	b.n	8005328 <pauseSnipCommand+0x38>
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	2000121f 	.word	0x2000121f
 8005354:	08016fe8 	.word	0x08016fe8
 8005358:	200069a4 	.word	0x200069a4
 800535c:	080173f8 	.word	0x080173f8

08005360 <actSnipCommand>:
    size_t xWriteBufferLen, const int8_t *pcCommandString){
 8005360:	b510      	push	{r4, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	0004      	movs	r4, r0
 8005366:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005368:	2300      	movs	r3, #0
 800536a:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 800536c:	2c00      	cmp	r4, #0
 800536e:	d101      	bne.n	8005374 <actSnipCommand+0x14>
 8005370:	b672      	cpsid	i
 8005372:	e7fe      	b.n	8005372 <actSnipCommand+0x12>
	pcParameterString1 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,1,
 8005374:	aa01      	add	r2, sp, #4
 8005376:	2101      	movs	r1, #1
 8005378:	f007 fb62 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t) atoi((char*) pcParameterString1);
 800537c:	f00c f8db 	bl	8011536 <atoi>
 8005380:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <actSnipCommand+0x2e>
 8005386:	4a0e      	ldr	r2, [pc, #56]	; (80053c0 <actSnipCommand+0x60>)
 8005388:	7812      	ldrb	r2, [r2, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d207      	bcs.n	800539e <actSnipCommand+0x3e>
	strcpy((char*) pcWriteBuffer,(char*) pcMessageWrong);
 800538e:	2223      	movs	r2, #35	; 0x23
 8005390:	490c      	ldr	r1, [pc, #48]	; (80053c4 <actSnipCommand+0x64>)
 8005392:	0020      	movs	r0, r4
 8005394:	f00c fb5f 	bl	8011a56 <memcpy>
}
 8005398:	2000      	movs	r0, #0
 800539a:	b002      	add	sp, #8
 800539c:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 800539e:	b2c0      	uxtb	r0, r0
 80053a0:	3801      	subs	r0, #1
 80053a2:	2314      	movs	r3, #20
 80053a4:	4343      	muls	r3, r0
 80053a6:	4808      	ldr	r0, [pc, #32]	; (80053c8 <actSnipCommand+0x68>)
 80053a8:	18c0      	adds	r0, r0, r3
 80053aa:	2301      	movs	r3, #1
 80053ac:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 80053ae:	f005 f927 	bl	800a600 <SaveToRO>
		strcpy((char*) pcWriteBuffer,(char*) pcMessageOK);
 80053b2:	2238      	movs	r2, #56	; 0x38
 80053b4:	4905      	ldr	r1, [pc, #20]	; (80053cc <actSnipCommand+0x6c>)
 80053b6:	0020      	movs	r0, r4
 80053b8:	f00c fb4d 	bl	8011a56 <memcpy>
 80053bc:	e7ec      	b.n	8005398 <actSnipCommand+0x38>
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	2000121f 	.word	0x2000121f
 80053c4:	08016fe8 	.word	0x08016fe8
 80053c8:	200069a4 	.word	0x200069a4
 80053cc:	08016dac 	.word	0x08016dac

080053d0 <snipCommand>:
    const int8_t *pcCommandString){
 80053d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053d2:	46d6      	mov	lr, sl
 80053d4:	464f      	mov	r7, r9
 80053d6:	4646      	mov	r6, r8
 80053d8:	b5c0      	push	{r6, r7, lr}
 80053da:	b08a      	sub	sp, #40	; 0x28
 80053dc:	0004      	movs	r4, r0
	char status[2][7] ={"Paused" , "Active"};
 80053de:	aa06      	add	r2, sp, #24
 80053e0:	4b7a      	ldr	r3, [pc, #488]	; (80055cc <snipCommand+0x1fc>)
 80053e2:	3304      	adds	r3, #4
 80053e4:	cb23      	ldmia	r3!, {r0, r1, r5}
 80053e6:	c223      	stmia	r2!, {r0, r1, r5}
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 80053ec:	2c00      	cmp	r4, #0
 80053ee:	d101      	bne.n	80053f4 <snipCommand+0x24>
 80053f0:	b672      	cpsid	i
 80053f2:	e7fe      	b.n	80053f2 <snipCommand+0x22>
	writePxMutex(PcPort,(char*) pcMessageSnipWelcome,
 80053f4:	4b76      	ldr	r3, [pc, #472]	; (80055d0 <snipCommand+0x200>)
 80053f6:	7818      	ldrb	r0, [r3, #0]
 80053f8:	2301      	movs	r3, #1
 80053fa:	425b      	negs	r3, r3
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	3333      	adds	r3, #51	; 0x33
 8005400:	2237      	movs	r2, #55	; 0x37
 8005402:	4974      	ldr	r1, [pc, #464]	; (80055d4 <snipCommand+0x204>)
 8005404:	f007 f8d6 	bl	800c5b4 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++) {
 8005408:	4b73      	ldr	r3, [pc, #460]	; (80055d8 <snipCommand+0x208>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d100      	bne.n	8005412 <snipCommand+0x42>
 8005410:	e0d0      	b.n	80055b4 <snipCommand+0x1e4>
 8005412:	2500      	movs	r5, #0
		if(snippets[s].cond.conditionType)
 8005414:	4b71      	ldr	r3, [pc, #452]	; (80055dc <snipCommand+0x20c>)
 8005416:	4698      	mov	r8, r3
 8005418:	e0ba      	b.n	8005590 <snipCommand+0x1c0>
		    status[snippets[s].state]);
 800541a:	4b70      	ldr	r3, [pc, #448]	; (80055dc <snipCommand+0x20c>)
 800541c:	4699      	mov	r9, r3
 800541e:	00ab      	lsls	r3, r5, #2
 8005420:	469a      	mov	sl, r3
 8005422:	195b      	adds	r3, r3, r5
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	444b      	add	r3, r9
 8005428:	7c1a      	ldrb	r2, [r3, #16]
 800542a:	00d3      	lsls	r3, r2, #3
 800542c:	1a9b      	subs	r3, r3, r2
 800542e:	aa06      	add	r2, sp, #24
 8005430:	4694      	mov	ip, r2
 8005432:	4463      	add	r3, ip
		sprintf((char*) pcWriteBuffer,(char*) pcMessageSnipStart,count,
 8005434:	003a      	movs	r2, r7
 8005436:	496a      	ldr	r1, [pc, #424]	; (80055e0 <snipCommand+0x210>)
 8005438:	0020      	movs	r0, r4
 800543a:	f00c fd0f 	bl	8011e5c <sprintf>
		switch(snippets[s].cond.conditionType){
 800543e:	4653      	mov	r3, sl
 8005440:	195b      	adds	r3, r3, r5
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	464a      	mov	r2, r9
 8005446:	5c9b      	ldrb	r3, [r3, r2]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d02d      	beq.n	80054a8 <snipCommand+0xd8>
 800544c:	2b03      	cmp	r3, #3
 800544e:	d000      	beq.n	8005452 <snipCommand+0x82>
 8005450:	e0a9      	b.n	80055a6 <snipCommand+0x1d6>
			memcpy((uint8_t*) &flt1,&snippets[s].cond.buffer2,sizeof(float));// This buffer can be misaligned and cause hardfault on F0
 8005452:	00a9      	lsls	r1, r5, #2
 8005454:	1949      	adds	r1, r1, r5
 8005456:	0089      	lsls	r1, r1, #2
 8005458:	3106      	adds	r1, #6
 800545a:	4b60      	ldr	r3, [pc, #384]	; (80055dc <snipCommand+0x20c>)
 800545c:	4699      	mov	r9, r3
 800545e:	4449      	add	r1, r9
 8005460:	2204      	movs	r2, #4
 8005462:	a805      	add	r0, sp, #20
 8005464:	f00c faf7 	bl	8011a56 <memcpy>
			    modParam[snippets[s].cond.buffer1[1] - 1].paramName,
 8005468:	00ad      	lsls	r5, r5, #2
 800546a:	19ad      	adds	r5, r5, r6
 800546c:	00ad      	lsls	r5, r5, #2
 800546e:	444d      	add	r5, r9
 8005470:	78ea      	ldrb	r2, [r5, #3]
			sprintf((char*) pcWriteBuffer,
 8005472:	3a01      	subs	r2, #1
 8005474:	0053      	lsls	r3, r2, #1
 8005476:	189b      	adds	r3, r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4a5a      	ldr	r2, [pc, #360]	; (80055e4 <snipCommand+0x214>)
 800547c:	18d3      	adds	r3, r2, r3
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	4699      	mov	r9, r3
 8005482:	9805      	ldr	r0, [sp, #20]
 8005484:	f7fc ffe0 	bl	8002448 <__aeabi_f2d>
 8005488:	9002      	str	r0, [sp, #8]
 800548a:	9103      	str	r1, [sp, #12]
			    mathStr[snippets[s].cond.mathOperator - 1],flt1);
 800548c:	786b      	ldrb	r3, [r5, #1]
 800548e:	3b01      	subs	r3, #1
 8005490:	005a      	lsls	r2, r3, #1
 8005492:	18d2      	adds	r2, r2, r3
 8005494:	4b54      	ldr	r3, [pc, #336]	; (80055e8 <snipCommand+0x218>)
 8005496:	189b      	adds	r3, r3, r2
			sprintf((char*) pcWriteBuffer,
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	464b      	mov	r3, r9
 800549c:	0022      	movs	r2, r4
 800549e:	4953      	ldr	r1, [pc, #332]	; (80055ec <snipCommand+0x21c>)
 80054a0:	0020      	movs	r0, r4
 80054a2:	f00c fcdb 	bl	8011e5c <sprintf>
				break;
 80054a6:	e07e      	b.n	80055a6 <snipCommand+0x1d6>
			switch(snippets[s].cond.buffer1[1]){
 80054a8:	00ab      	lsls	r3, r5, #2
 80054aa:	195b      	adds	r3, r3, r5
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4a4b      	ldr	r2, [pc, #300]	; (80055dc <snipCommand+0x20c>)
 80054b0:	18d3      	adds	r3, r2, r3
 80054b2:	78db      	ldrb	r3, [r3, #3]
 80054b4:	3b05      	subs	r3, #5
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	2a09      	cmp	r2, #9
 80054ba:	d874      	bhi.n	80055a6 <snipCommand+0x1d6>
 80054bc:	0093      	lsls	r3, r2, #2
 80054be:	4a4c      	ldr	r2, [pc, #304]	; (80055f0 <snipCommand+0x220>)
 80054c0:	58d3      	ldr	r3, [r2, r3]
 80054c2:	469f      	mov	pc, r3
				    (char*) pcWriteBuffer,snippets[s].cond.buffer1[0],
 80054c4:	2314      	movs	r3, #20
 80054c6:	436b      	muls	r3, r5
 80054c8:	4a44      	ldr	r2, [pc, #272]	; (80055dc <snipCommand+0x20c>)
 80054ca:	18d2      	adds	r2, r2, r3
				sprintf((char*) pcWriteBuffer,
 80054cc:	7893      	ldrb	r3, [r2, #2]
 80054ce:	68d2      	ldr	r2, [r2, #12]
 80054d0:	9200      	str	r2, [sp, #0]
 80054d2:	0022      	movs	r2, r4
 80054d4:	4947      	ldr	r1, [pc, #284]	; (80055f4 <snipCommand+0x224>)
 80054d6:	0020      	movs	r0, r4
 80054d8:	f00c fcc0 	bl	8011e5c <sprintf>
					break;
 80054dc:	e063      	b.n	80055a6 <snipCommand+0x1d6>
				    (char*) pcWriteBuffer,snippets[s].cond.buffer1[0],
 80054de:	2314      	movs	r3, #20
 80054e0:	436b      	muls	r3, r5
 80054e2:	4a3e      	ldr	r2, [pc, #248]	; (80055dc <snipCommand+0x20c>)
 80054e4:	18d2      	adds	r2, r2, r3
				sprintf((char*) pcWriteBuffer,
 80054e6:	7893      	ldrb	r3, [r2, #2]
 80054e8:	68d2      	ldr	r2, [r2, #12]
 80054ea:	9200      	str	r2, [sp, #0]
 80054ec:	0022      	movs	r2, r4
 80054ee:	4942      	ldr	r1, [pc, #264]	; (80055f8 <snipCommand+0x228>)
 80054f0:	0020      	movs	r0, r4
 80054f2:	f00c fcb3 	bl	8011e5c <sprintf>
					break;
 80054f6:	e056      	b.n	80055a6 <snipCommand+0x1d6>
				    (char*) pcWriteBuffer,snippets[s].cond.buffer1[0],
 80054f8:	2314      	movs	r3, #20
 80054fa:	436b      	muls	r3, r5
 80054fc:	4a37      	ldr	r2, [pc, #220]	; (80055dc <snipCommand+0x20c>)
 80054fe:	18d2      	adds	r2, r2, r3
				sprintf((char*) pcWriteBuffer,
 8005500:	7893      	ldrb	r3, [r2, #2]
 8005502:	68d1      	ldr	r1, [r2, #12]
 8005504:	9101      	str	r1, [sp, #4]
 8005506:	7912      	ldrb	r2, [r2, #4]
 8005508:	9200      	str	r2, [sp, #0]
 800550a:	0022      	movs	r2, r4
 800550c:	493b      	ldr	r1, [pc, #236]	; (80055fc <snipCommand+0x22c>)
 800550e:	0020      	movs	r0, r4
 8005510:	f00c fca4 	bl	8011e5c <sprintf>
					break;
 8005514:	e047      	b.n	80055a6 <snipCommand+0x1d6>
				    (char*) pcWriteBuffer,snippets[s].cond.buffer1[0],
 8005516:	2314      	movs	r3, #20
 8005518:	436b      	muls	r3, r5
 800551a:	4a30      	ldr	r2, [pc, #192]	; (80055dc <snipCommand+0x20c>)
 800551c:	18d2      	adds	r2, r2, r3
				sprintf((char*) pcWriteBuffer,
 800551e:	7893      	ldrb	r3, [r2, #2]
 8005520:	68d1      	ldr	r1, [r2, #12]
 8005522:	9101      	str	r1, [sp, #4]
 8005524:	7912      	ldrb	r2, [r2, #4]
 8005526:	9200      	str	r2, [sp, #0]
 8005528:	0022      	movs	r2, r4
 800552a:	4935      	ldr	r1, [pc, #212]	; (8005600 <snipCommand+0x230>)
 800552c:	0020      	movs	r0, r4
 800552e:	f00c fc95 	bl	8011e5c <sprintf>
					break;
 8005532:	e038      	b.n	80055a6 <snipCommand+0x1d6>
			sprintf((char*) pcWriteBuffer,(char*) pcMessageCmds,pcWriteBuffer,
 8005534:	4b33      	ldr	r3, [pc, #204]	; (8005604 <snipCommand+0x234>)
 8005536:	0022      	movs	r2, r4
 8005538:	4933      	ldr	r1, [pc, #204]	; (8005608 <snipCommand+0x238>)
 800553a:	0020      	movs	r0, r4
 800553c:	f00c fc8e 	bl	8011e5c <sprintf>
			memset(&commands,0x00,strlen((char*) commands));
 8005540:	4830      	ldr	r0, [pc, #192]	; (8005604 <snipCommand+0x234>)
 8005542:	f7fa fde9 	bl	8000118 <strlen>
 8005546:	0002      	movs	r2, r0
 8005548:	2100      	movs	r1, #0
 800554a:	482e      	ldr	r0, [pc, #184]	; (8005604 <snipCommand+0x234>)
 800554c:	f00c fa8c 	bl	8011a68 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t*) &commands)
 8005550:	0029      	movs	r1, r5
 8005552:	68f0      	ldr	r0, [r6, #12]
 8005554:	f7ff fb60 	bl	8004c18 <ParseSnippetCommand>
 8005558:	2800      	cmp	r0, #0
 800555a:	d1eb      	bne.n	8005534 <snipCommand+0x164>
		strcat((char*) pcWriteBuffer,(char*) pcMessageEnd);
 800555c:	0020      	movs	r0, r4
 800555e:	f7fa fddb 	bl	8000118 <strlen>
 8005562:	1820      	adds	r0, r4, r0
 8005564:	220c      	movs	r2, #12
 8005566:	4929      	ldr	r1, [pc, #164]	; (800560c <snipCommand+0x23c>)
 8005568:	f00c fa75 	bl	8011a56 <memcpy>
		    strlen((char*) pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800556c:	0020      	movs	r0, r4
 800556e:	f7fa fdd3 	bl	8000118 <strlen>
		writePxMutex(PcPort,(char*) pcWriteBuffer,
 8005572:	b282      	uxth	r2, r0
 8005574:	4b16      	ldr	r3, [pc, #88]	; (80055d0 <snipCommand+0x200>)
 8005576:	7818      	ldrb	r0, [r3, #0]
 8005578:	2301      	movs	r3, #1
 800557a:	425b      	negs	r3, r3
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	3333      	adds	r3, #51	; 0x33
 8005580:	0021      	movs	r1, r4
 8005582:	f007 f817 	bl	800c5b4 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++) {
 8005586:	003d      	movs	r5, r7
 8005588:	4b13      	ldr	r3, [pc, #76]	; (80055d8 <snipCommand+0x208>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	42bb      	cmp	r3, r7
 800558e:	d911      	bls.n	80055b4 <snipCommand+0x1e4>
 8005590:	1c6f      	adds	r7, r5, #1
 8005592:	b2ff      	uxtb	r7, r7
		if(snippets[s].cond.conditionType)
 8005594:	002e      	movs	r6, r5
 8005596:	00ab      	lsls	r3, r5, #2
 8005598:	195b      	adds	r3, r3, r5
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4642      	mov	r2, r8
 800559e:	5c9b      	ldrb	r3, [r3, r2]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d000      	beq.n	80055a6 <snipCommand+0x1d6>
 80055a4:	e739      	b.n	800541a <snipCommand+0x4a>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t*) &commands)
 80055a6:	4d17      	ldr	r5, [pc, #92]	; (8005604 <snipCommand+0x234>)
 80055a8:	00b3      	lsls	r3, r6, #2
 80055aa:	199b      	adds	r3, r3, r6
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4e0b      	ldr	r6, [pc, #44]	; (80055dc <snipCommand+0x20c>)
 80055b0:	18f6      	adds	r6, r6, r3
 80055b2:	e7cd      	b.n	8005550 <snipCommand+0x180>
	strcpy((char*) pcWriteBuffer,(char*) pcMessageSnipAction);
 80055b4:	22b5      	movs	r2, #181	; 0xb5
 80055b6:	4916      	ldr	r1, [pc, #88]	; (8005610 <snipCommand+0x240>)
 80055b8:	0020      	movs	r0, r4
 80055ba:	f00c fa4c 	bl	8011a56 <memcpy>
}
 80055be:	2000      	movs	r0, #0
 80055c0:	b00a      	add	sp, #40	; 0x28
 80055c2:	bc1c      	pop	{r2, r3, r4}
 80055c4:	4690      	mov	r8, r2
 80055c6:	4699      	mov	r9, r3
 80055c8:	46a2      	mov	sl, r4
 80055ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055cc:	08016258 	.word	0x08016258
 80055d0:	20000a77 	.word	0x20000a77
 80055d4:	08017890 	.word	0x08017890
 80055d8:	2000121f 	.word	0x2000121f
 80055dc:	200069a4 	.word	0x200069a4
 80055e0:	080178c8 	.word	0x080178c8
 80055e4:	20000084 	.word	0x20000084
 80055e8:	080173bc 	.word	0x080173bc
 80055ec:	08017934 	.word	0x08017934
 80055f0:	08016d60 	.word	0x08016d60
 80055f4:	080178d4 	.word	0x080178d4
 80055f8:	080178e8 	.word	0x080178e8
 80055fc:	08017900 	.word	0x08017900
 8005600:	08017918 	.word	0x08017918
 8005604:	20001250 	.word	0x20001250
 8005608:	08017944 	.word	0x08017944
 800560c:	0801794c 	.word	0x0801794c
 8005610:	08017958 	.word	0x08017958

08005614 <idcodeCommand>:
    size_t xWriteBufferLen, const int8_t *pcCommandString){
 8005614:	b510      	push	{r4, lr}
 8005616:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005618:	d101      	bne.n	800561e <idcodeCommand+0xa>
 800561a:	b672      	cpsid	i
 800561c:	e7fe      	b.n	800561c <idcodeCommand+0x8>
	dev =HAL_GetDEVID();
 800561e:	f009 f935 	bl	800e88c <HAL_GetDEVID>
	switch(dev){
 8005622:	0403      	lsls	r3, r0, #16
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	4a1b      	ldr	r2, [pc, #108]	; (8005694 <idcodeCommand+0x80>)
 8005628:	4694      	mov	ip, r2
 800562a:	4463      	add	r3, ip
 800562c:	2b08      	cmp	r3, #8
 800562e:	d82a      	bhi.n	8005686 <idcodeCommand+0x72>
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4a19      	ldr	r2, [pc, #100]	; (8005698 <idcodeCommand+0x84>)
 8005634:	58d3      	ldr	r3, [r2, r3]
 8005636:	469f      	mov	pc, r3
		sprintf((char*) pcWriteBuffer,(char*) pcMessageDEVID,"STM32F03x");
 8005638:	4a18      	ldr	r2, [pc, #96]	; (800569c <idcodeCommand+0x88>)
 800563a:	4919      	ldr	r1, [pc, #100]	; (80056a0 <idcodeCommand+0x8c>)
 800563c:	0020      	movs	r0, r4
 800563e:	f00c fc0d 	bl	8011e5c <sprintf>
	    (char*) pcWriteBuffer,HAL_GetREVID() >> 12);
 8005642:	f009 f91d 	bl	800e880 <HAL_GetREVID>
	sprintf((char*) pcWriteBuffer,(char*) pcMessageREVID,
 8005646:	0b03      	lsrs	r3, r0, #12
 8005648:	0022      	movs	r2, r4
 800564a:	4916      	ldr	r1, [pc, #88]	; (80056a4 <idcodeCommand+0x90>)
 800564c:	0020      	movs	r0, r4
 800564e:	f00c fc05 	bl	8011e5c <sprintf>
}
 8005652:	2000      	movs	r0, #0
 8005654:	bd10      	pop	{r4, pc}
		sprintf((char*) pcWriteBuffer,(char*) pcMessageDEVID,"STM32F04x");
 8005656:	4a14      	ldr	r2, [pc, #80]	; (80056a8 <idcodeCommand+0x94>)
 8005658:	4911      	ldr	r1, [pc, #68]	; (80056a0 <idcodeCommand+0x8c>)
 800565a:	0020      	movs	r0, r4
 800565c:	f00c fbfe 	bl	8011e5c <sprintf>
			break;
 8005660:	e7ef      	b.n	8005642 <idcodeCommand+0x2e>
		sprintf((char*) pcWriteBuffer,(char*) pcMessageDEVID,"STM32F05x");
 8005662:	4a12      	ldr	r2, [pc, #72]	; (80056ac <idcodeCommand+0x98>)
 8005664:	490e      	ldr	r1, [pc, #56]	; (80056a0 <idcodeCommand+0x8c>)
 8005666:	0020      	movs	r0, r4
 8005668:	f00c fbf8 	bl	8011e5c <sprintf>
			break;
 800566c:	e7e9      	b.n	8005642 <idcodeCommand+0x2e>
		sprintf((char*) pcWriteBuffer,(char*) pcMessageDEVID,"STM32F07x");
 800566e:	4a10      	ldr	r2, [pc, #64]	; (80056b0 <idcodeCommand+0x9c>)
 8005670:	490b      	ldr	r1, [pc, #44]	; (80056a0 <idcodeCommand+0x8c>)
 8005672:	0020      	movs	r0, r4
 8005674:	f00c fbf2 	bl	8011e5c <sprintf>
			break;
 8005678:	e7e3      	b.n	8005642 <idcodeCommand+0x2e>
		sprintf((char*) pcWriteBuffer,(char*) pcMessageDEVID,"STM32F09x");
 800567a:	4a0e      	ldr	r2, [pc, #56]	; (80056b4 <idcodeCommand+0xa0>)
 800567c:	4908      	ldr	r1, [pc, #32]	; (80056a0 <idcodeCommand+0x8c>)
 800567e:	0020      	movs	r0, r4
 8005680:	f00c fbec 	bl	8011e5c <sprintf>
			break;
 8005684:	e7dd      	b.n	8005642 <idcodeCommand+0x2e>
		sprintf((char*) pcWriteBuffer,(char*) pcMessageDEVID,"UNKNOWN");
 8005686:	4a0c      	ldr	r2, [pc, #48]	; (80056b8 <idcodeCommand+0xa4>)
 8005688:	4905      	ldr	r1, [pc, #20]	; (80056a0 <idcodeCommand+0x8c>)
 800568a:	0020      	movs	r0, r4
 800568c:	f00c fbe6 	bl	8011e5c <sprintf>
			break;
 8005690:	e7d7      	b.n	8005642 <idcodeCommand+0x2e>
 8005692:	46c0      	nop			; (mov r8, r8)
 8005694:	fffffbc0 	.word	0xfffffbc0
 8005698:	08016d88 	.word	0x08016d88
 800569c:	080172b8 	.word	0x080172b8
 80056a0:	080172c4 	.word	0x080172c4
 80056a4:	08017310 	.word	0x08017310
 80056a8:	080172d8 	.word	0x080172d8
 80056ac:	080172e4 	.word	0x080172e4
 80056b0:	080172f0 	.word	0x080172f0
 80056b4:	080172fc 	.word	0x080172fc
 80056b8:	08017308 	.word	0x08017308

080056bc <uuidCommand>:
    const int8_t *pcCommandString){
 80056bc:	b570      	push	{r4, r5, r6, lr}
 80056be:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80056c0:	d101      	bne.n	80056c6 <uuidCommand+0xa>
 80056c2:	b672      	cpsid	i
 80056c4:	e7fe      	b.n	80056c4 <uuidCommand+0x8>
	sprintf((char*) pcWriteBuffer,"%s",(char*) pcMessageUUID);
 80056c6:	220e      	movs	r2, #14
 80056c8:	4911      	ldr	r1, [pc, #68]	; (8005710 <uuidCommand+0x54>)
 80056ca:	f00c f9c4 	bl	8011a56 <memcpy>
		sprintf((char*) pcWriteBuffer,"%s%08X",(char*) pcWriteBuffer,
 80056ce:	4b11      	ldr	r3, [pc, #68]	; (8005714 <uuidCommand+0x58>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4d11      	ldr	r5, [pc, #68]	; (8005718 <uuidCommand+0x5c>)
 80056d4:	0022      	movs	r2, r4
 80056d6:	0029      	movs	r1, r5
 80056d8:	0020      	movs	r0, r4
 80056da:	f00c fbbf 	bl	8011e5c <sprintf>
 80056de:	4b0f      	ldr	r3, [pc, #60]	; (800571c <uuidCommand+0x60>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	0022      	movs	r2, r4
 80056e4:	0029      	movs	r1, r5
 80056e6:	0020      	movs	r0, r4
 80056e8:	f00c fbb8 	bl	8011e5c <sprintf>
 80056ec:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <uuidCommand+0x64>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	0022      	movs	r2, r4
 80056f2:	0029      	movs	r1, r5
 80056f4:	0020      	movs	r0, r4
 80056f6:	f00c fbb1 	bl	8011e5c <sprintf>
	strcat((char*) pcWriteBuffer,"\r\n");
 80056fa:	0020      	movs	r0, r4
 80056fc:	f7fa fd0c 	bl	8000118 <strlen>
 8005700:	1820      	adds	r0, r4, r0
 8005702:	2203      	movs	r2, #3
 8005704:	4907      	ldr	r1, [pc, #28]	; (8005724 <uuidCommand+0x68>)
 8005706:	f00c f9a6 	bl	8011a56 <memcpy>
}
 800570a:	2000      	movs	r0, #0
 800570c:	bd70      	pop	{r4, r5, r6, pc}
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	08018964 	.word	0x08018964
 8005714:	1ffff7ac 	.word	0x1ffff7ac
 8005718:	08018974 	.word	0x08018974
 800571c:	1ffff7b0 	.word	0x1ffff7b0
 8005720:	1ffff7b4 	.word	0x1ffff7b4
 8005724:	08017eb4 	.word	0x08017eb4

08005728 <timeCommand>:
    const int8_t *pcCommandString){
 8005728:	b510      	push	{r4, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800572e:	d101      	bne.n	8005734 <timeCommand+0xc>
 8005730:	b672      	cpsid	i
 8005732:	e7fe      	b.n	8005732 <timeCommand+0xa>
	GetTimeDate();
 8005734:	f006 fc9a 	bl	800c06c <GetTimeDate>
	if(BOS.hourformat == 24)
 8005738:	4b1b      	ldr	r3, [pc, #108]	; (80057a8 <timeCommand+0x80>)
 800573a:	7b5b      	ldrb	r3, [r3, #13]
 800573c:	2b18      	cmp	r3, #24
 800573e:	d004      	beq.n	800574a <timeCommand+0x22>
	else if(BOS.hourformat == 12) {
 8005740:	2b0c      	cmp	r3, #12
 8005742:	d00e      	beq.n	8005762 <timeCommand+0x3a>
}
 8005744:	2000      	movs	r0, #0
 8005746:	b004      	add	sp, #16
 8005748:	bd10      	pop	{r4, pc}
	    BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 800574a:	4917      	ldr	r1, [pc, #92]	; (80057a8 <timeCommand+0x80>)
	sprintf((char*) pcWriteBuffer,(char*) pcMessage24,BOS.time.hours,
 800574c:	7c4b      	ldrb	r3, [r1, #17]
 800574e:	7c8a      	ldrb	r2, [r1, #18]
 8005750:	89c8      	ldrh	r0, [r1, #14]
 8005752:	9001      	str	r0, [sp, #4]
 8005754:	7c09      	ldrb	r1, [r1, #16]
 8005756:	9100      	str	r1, [sp, #0]
 8005758:	4914      	ldr	r1, [pc, #80]	; (80057ac <timeCommand+0x84>)
 800575a:	0020      	movs	r0, r4
 800575c:	f00c fb7e 	bl	8011e5c <sprintf>
 8005760:	e7f0      	b.n	8005744 <timeCommand+0x1c>
		if(BOS.time.ampm == RTC_AM)
 8005762:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <timeCommand+0x80>)
 8005764:	7cdb      	ldrb	r3, [r3, #19]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d10d      	bne.n	8005786 <timeCommand+0x5e>
		    BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 800576a:	490f      	ldr	r1, [pc, #60]	; (80057a8 <timeCommand+0x80>)
		sprintf((char*) pcWriteBuffer,(char*) pcMessage12,BOS.time.hours,
 800576c:	7c4b      	ldrb	r3, [r1, #17]
 800576e:	7c8a      	ldrb	r2, [r1, #18]
 8005770:	480f      	ldr	r0, [pc, #60]	; (80057b0 <timeCommand+0x88>)
 8005772:	9002      	str	r0, [sp, #8]
 8005774:	89c8      	ldrh	r0, [r1, #14]
 8005776:	9001      	str	r0, [sp, #4]
 8005778:	7c09      	ldrb	r1, [r1, #16]
 800577a:	9100      	str	r1, [sp, #0]
 800577c:	490d      	ldr	r1, [pc, #52]	; (80057b4 <timeCommand+0x8c>)
 800577e:	0020      	movs	r0, r4
 8005780:	f00c fb6c 	bl	8011e5c <sprintf>
 8005784:	e7de      	b.n	8005744 <timeCommand+0x1c>
		else if(BOS.time.ampm == RTC_PM)
 8005786:	2b02      	cmp	r3, #2
 8005788:	d1dc      	bne.n	8005744 <timeCommand+0x1c>
		    BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 800578a:	4907      	ldr	r1, [pc, #28]	; (80057a8 <timeCommand+0x80>)
		sprintf((char*) pcWriteBuffer,(char*) pcMessage12,BOS.time.hours,
 800578c:	7c4b      	ldrb	r3, [r1, #17]
 800578e:	7c8a      	ldrb	r2, [r1, #18]
 8005790:	4809      	ldr	r0, [pc, #36]	; (80057b8 <timeCommand+0x90>)
 8005792:	9002      	str	r0, [sp, #8]
 8005794:	89c8      	ldrh	r0, [r1, #14]
 8005796:	9001      	str	r0, [sp, #4]
 8005798:	7c09      	ldrb	r1, [r1, #16]
 800579a:	9100      	str	r1, [sp, #0]
 800579c:	4905      	ldr	r1, [pc, #20]	; (80057b4 <timeCommand+0x8c>)
 800579e:	0020      	movs	r0, r4
 80057a0:	f00c fb5c 	bl	8011e5c <sprintf>
 80057a4:	e7ce      	b.n	8005744 <timeCommand+0x1c>
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	20006988 	.word	0x20006988
 80057ac:	080188ac 	.word	0x080188ac
 80057b0:	08018900 	.word	0x08018900
 80057b4:	080188d4 	.word	0x080188d4
 80057b8:	08018904 	.word	0x08018904

080057bc <dateCommand>:
    const int8_t *pcCommandString){
 80057bc:	b510      	push	{r4, lr}
 80057be:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 80057c0:	d101      	bne.n	80057c6 <dateCommand+0xa>
 80057c2:	b672      	cpsid	i
 80057c4:	e7fe      	b.n	80057c4 <dateCommand+0x8>
	GetTimeDate();
 80057c6:	f006 fc51 	bl	800c06c <GetTimeDate>
	sprintf((char*) pcWriteBuffer,(char*) pcMessageDate,GetDateString());
 80057ca:	f7fe fbf1 	bl	8003fb0 <GetDateString>
 80057ce:	0002      	movs	r2, r0
 80057d0:	4902      	ldr	r1, [pc, #8]	; (80057dc <dateCommand+0x20>)
 80057d2:	0020      	movs	r0, r4
 80057d4:	f00c fb42 	bl	8011e5c <sprintf>
}
 80057d8:	2000      	movs	r0, #0
 80057da:	bd10      	pop	{r4, pc}
 80057dc:	08016ef0 	.word	0x08016ef0

080057e0 <getCommand>:
    const int8_t *pcCommandString){
 80057e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e2:	46c6      	mov	lr, r8
 80057e4:	b500      	push	{lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	0004      	movs	r4, r0
 80057ea:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80057ec:	2300      	movs	r3, #0
 80057ee:	9301      	str	r3, [sp, #4]
 80057f0:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 80057f2:	2800      	cmp	r0, #0
 80057f4:	d101      	bne.n	80057fa <getCommand+0x1a>
 80057f6:	b672      	cpsid	i
 80057f8:	e7fe      	b.n	80057f8 <getCommand+0x18>
	pcParameterString1 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,1,
 80057fa:	aa01      	add	r2, sp, #4
 80057fc:	2101      	movs	r1, #1
 80057fe:	0030      	movs	r0, r6
 8005800:	f007 f91e 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 8005804:	0005      	movs	r5, r0
 8005806:	4b74      	ldr	r3, [pc, #464]	; (80059d8 <getCommand+0x1f8>)
 8005808:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char*) pcParameterString1,"bos.",4)) {
 800580a:	2204      	movs	r2, #4
 800580c:	4973      	ldr	r1, [pc, #460]	; (80059dc <getCommand+0x1fc>)
 800580e:	f00c fb69 	bl	8011ee4 <strncmp>
 8005812:	2800      	cmp	r0, #0
 8005814:	d000      	beq.n	8005818 <getCommand+0x38>
 8005816:	e090      	b.n	800593a <getCommand+0x15a>
		if(!strncmp((const char*) pcParameterString1 + 4,"response",
 8005818:	1d2f      	adds	r7, r5, #4
		    xParameterStringLength1 - 4)) {
 800581a:	9b01      	ldr	r3, [sp, #4]
 800581c:	1f1e      	subs	r6, r3, #4
		if(!strncmp((const char*) pcParameterString1 + 4,"response",
 800581e:	0032      	movs	r2, r6
 8005820:	496f      	ldr	r1, [pc, #444]	; (80059e0 <getCommand+0x200>)
 8005822:	0038      	movs	r0, r7
 8005824:	f00c fb5e 	bl	8011ee4 <strncmp>
 8005828:	2800      	cmp	r0, #0
 800582a:	d11e      	bne.n	800586a <getCommand+0x8a>
			if(BOS.response == BOS_RESPONSE_ALL)
 800582c:	4b6d      	ldr	r3, [pc, #436]	; (80059e4 <getCommand+0x204>)
 800582e:	799b      	ldrb	r3, [r3, #6]
 8005830:	2b60      	cmp	r3, #96	; 0x60
 8005832:	d109      	bne.n	8005848 <getCommand+0x68>
			sprintf((char*) pcWriteBuffer,(char*) pcMessageOK,"all");
 8005834:	4a6c      	ldr	r2, [pc, #432]	; (80059e8 <getCommand+0x208>)
 8005836:	496d      	ldr	r1, [pc, #436]	; (80059ec <getCommand+0x20c>)
 8005838:	0020      	movs	r0, r4
 800583a:	f00c fb0f 	bl	8011e5c <sprintf>
}
 800583e:	2000      	movs	r0, #0
 8005840:	b002      	add	sp, #8
 8005842:	bc04      	pop	{r2}
 8005844:	4690      	mov	r8, r2
 8005846:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if(BOS.response == BOS_RESPONSE_MSG)
 8005848:	2b20      	cmp	r3, #32
 800584a:	d105      	bne.n	8005858 <getCommand+0x78>
			sprintf((char*) pcWriteBuffer,(char*) pcMessageOK,"msg");
 800584c:	4a68      	ldr	r2, [pc, #416]	; (80059f0 <getCommand+0x210>)
 800584e:	4967      	ldr	r1, [pc, #412]	; (80059ec <getCommand+0x20c>)
 8005850:	0020      	movs	r0, r4
 8005852:	f00c fb03 	bl	8011e5c <sprintf>
 8005856:	e7f2      	b.n	800583e <getCommand+0x5e>
			else if(BOS.response == BOS_RESPONSE_NONE)
 8005858:	2b00      	cmp	r3, #0
 800585a:	d000      	beq.n	800585e <getCommand+0x7e>
 800585c:	e0b6      	b.n	80059cc <getCommand+0x1ec>
			sprintf((char*) pcWriteBuffer,(char*) pcMessageOK,"none");
 800585e:	4a65      	ldr	r2, [pc, #404]	; (80059f4 <getCommand+0x214>)
 8005860:	4962      	ldr	r1, [pc, #392]	; (80059ec <getCommand+0x20c>)
 8005862:	0020      	movs	r0, r4
 8005864:	f00c fafa 	bl	8011e5c <sprintf>
 8005868:	e7e9      	b.n	800583e <getCommand+0x5e>
		else if(!strncmp((const char*) pcParameterString1 + 4,"trace",
 800586a:	0032      	movs	r2, r6
 800586c:	4962      	ldr	r1, [pc, #392]	; (80059f8 <getCommand+0x218>)
 800586e:	0038      	movs	r0, r7
 8005870:	f00c fb38 	bl	8011ee4 <strncmp>
 8005874:	2800      	cmp	r0, #0
 8005876:	d11a      	bne.n	80058ae <getCommand+0xce>
			if(BOS.trace == TRACE_BOTH)
 8005878:	4b5a      	ldr	r3, [pc, #360]	; (80059e4 <getCommand+0x204>)
 800587a:	79db      	ldrb	r3, [r3, #7]
 800587c:	2b03      	cmp	r3, #3
 800587e:	d105      	bne.n	800588c <getCommand+0xac>
			sprintf((char*) pcWriteBuffer,(char*) pcMessageOK,"all");
 8005880:	4a59      	ldr	r2, [pc, #356]	; (80059e8 <getCommand+0x208>)
 8005882:	495a      	ldr	r1, [pc, #360]	; (80059ec <getCommand+0x20c>)
 8005884:	0020      	movs	r0, r4
 8005886:	f00c fae9 	bl	8011e5c <sprintf>
 800588a:	e7d8      	b.n	800583e <getCommand+0x5e>
			else if(BOS.trace == TRACE_MESSAGE)
 800588c:	2b01      	cmp	r3, #1
 800588e:	d105      	bne.n	800589c <getCommand+0xbc>
			sprintf((char*) pcWriteBuffer,(char*) pcMessageOK,"msg");
 8005890:	4a57      	ldr	r2, [pc, #348]	; (80059f0 <getCommand+0x210>)
 8005892:	4956      	ldr	r1, [pc, #344]	; (80059ec <getCommand+0x20c>)
 8005894:	0020      	movs	r0, r4
 8005896:	f00c fae1 	bl	8011e5c <sprintf>
 800589a:	e7d0      	b.n	800583e <getCommand+0x5e>
			else if(BOS.trace == TRACE_NONE)
 800589c:	2b00      	cmp	r3, #0
 800589e:	d000      	beq.n	80058a2 <getCommand+0xc2>
 80058a0:	e094      	b.n	80059cc <getCommand+0x1ec>
			sprintf((char*) pcWriteBuffer,(char*) pcMessageOK,"none");
 80058a2:	4a54      	ldr	r2, [pc, #336]	; (80059f4 <getCommand+0x214>)
 80058a4:	4951      	ldr	r1, [pc, #324]	; (80059ec <getCommand+0x20c>)
 80058a6:	0020      	movs	r0, r4
 80058a8:	f00c fad8 	bl	8011e5c <sprintf>
 80058ac:	e7c7      	b.n	800583e <getCommand+0x5e>
		else if(!strncmp((const char*) pcParameterString1 + 4,"clibaudrate",
 80058ae:	0032      	movs	r2, r6
 80058b0:	4952      	ldr	r1, [pc, #328]	; (80059fc <getCommand+0x21c>)
 80058b2:	0038      	movs	r0, r7
 80058b4:	f00c fb16 	bl	8011ee4 <strncmp>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d106      	bne.n	80058ca <getCommand+0xea>
			sprintf((char*) pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 80058bc:	4b49      	ldr	r3, [pc, #292]	; (80059e4 <getCommand+0x204>)
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	494f      	ldr	r1, [pc, #316]	; (8005a00 <getCommand+0x220>)
 80058c2:	0020      	movs	r0, r4
 80058c4:	f00c faca 	bl	8011e5c <sprintf>
 80058c8:	e7b9      	b.n	800583e <getCommand+0x5e>
		else if(!strncmp((const char*) pcParameterString1 + 4,"debounce",
 80058ca:	0032      	movs	r2, r6
 80058cc:	494d      	ldr	r1, [pc, #308]	; (8005a04 <getCommand+0x224>)
 80058ce:	0038      	movs	r0, r7
 80058d0:	f00c fb08 	bl	8011ee4 <strncmp>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d106      	bne.n	80058e6 <getCommand+0x106>
			sprintf((char*) pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 80058d8:	4b42      	ldr	r3, [pc, #264]	; (80059e4 <getCommand+0x204>)
 80058da:	881a      	ldrh	r2, [r3, #0]
 80058dc:	4948      	ldr	r1, [pc, #288]	; (8005a00 <getCommand+0x220>)
 80058de:	0020      	movs	r0, r4
 80058e0:	f00c fabc 	bl	8011e5c <sprintf>
 80058e4:	e7ab      	b.n	800583e <getCommand+0x5e>
		else if(!strncmp((const char*) pcParameterString1 + 4,
 80058e6:	0032      	movs	r2, r6
 80058e8:	4947      	ldr	r1, [pc, #284]	; (8005a08 <getCommand+0x228>)
 80058ea:	0038      	movs	r0, r7
 80058ec:	f00c fafa 	bl	8011ee4 <strncmp>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d106      	bne.n	8005902 <getCommand+0x122>
			    BOS.buttons.singleClickTime);
 80058f4:	4b3b      	ldr	r3, [pc, #236]	; (80059e4 <getCommand+0x204>)
			sprintf((char*) pcWriteBuffer,"%d\n\r",
 80058f6:	885a      	ldrh	r2, [r3, #2]
 80058f8:	4941      	ldr	r1, [pc, #260]	; (8005a00 <getCommand+0x220>)
 80058fa:	0020      	movs	r0, r4
 80058fc:	f00c faae 	bl	8011e5c <sprintf>
 8005900:	e79d      	b.n	800583e <getCommand+0x5e>
		else if(!strncmp((const char*) pcParameterString1 + 4,
 8005902:	0032      	movs	r2, r6
 8005904:	4941      	ldr	r1, [pc, #260]	; (8005a0c <getCommand+0x22c>)
 8005906:	0038      	movs	r0, r7
 8005908:	f00c faec 	bl	8011ee4 <strncmp>
 800590c:	2800      	cmp	r0, #0
 800590e:	d106      	bne.n	800591e <getCommand+0x13e>
			    BOS.buttons.minInterClickTime);
 8005910:	4b34      	ldr	r3, [pc, #208]	; (80059e4 <getCommand+0x204>)
			sprintf((char*) pcWriteBuffer,"%d\n\r",
 8005912:	791a      	ldrb	r2, [r3, #4]
 8005914:	493a      	ldr	r1, [pc, #232]	; (8005a00 <getCommand+0x220>)
 8005916:	0020      	movs	r0, r4
 8005918:	f00c faa0 	bl	8011e5c <sprintf>
 800591c:	e78f      	b.n	800583e <getCommand+0x5e>
		else if(!strncmp((const char*) pcParameterString1 + 4,
 800591e:	0032      	movs	r2, r6
 8005920:	493b      	ldr	r1, [pc, #236]	; (8005a10 <getCommand+0x230>)
 8005922:	0038      	movs	r0, r7
 8005924:	f00c fade 	bl	8011ee4 <strncmp>
 8005928:	2800      	cmp	r0, #0
 800592a:	d10d      	bne.n	8005948 <getCommand+0x168>
			    BOS.buttons.maxInterClickTime);
 800592c:	4b2d      	ldr	r3, [pc, #180]	; (80059e4 <getCommand+0x204>)
			sprintf((char*) pcWriteBuffer,"%d\n\r",
 800592e:	795a      	ldrb	r2, [r3, #5]
 8005930:	4933      	ldr	r1, [pc, #204]	; (8005a00 <getCommand+0x220>)
 8005932:	0020      	movs	r0, r4
 8005934:	f00c fa92 	bl	8011e5c <sprintf>
 8005938:	e781      	b.n	800583e <getCommand+0x5e>
	else if(!strncmp((const char*) pcParameterString1,"group",5)) {
 800593a:	2205      	movs	r2, #5
 800593c:	4935      	ldr	r1, [pc, #212]	; (8005a14 <getCommand+0x234>)
 800593e:	0028      	movs	r0, r5
 8005940:	f00c fad0 	bl	8011ee4 <strncmp>
 8005944:	2800      	cmp	r0, #0
 8005946:	d005      	beq.n	8005954 <getCommand+0x174>
	strcpy((char*) pcWriteBuffer,(char*) pcMessageWrongParam);
 8005948:	2213      	movs	r2, #19
 800594a:	4933      	ldr	r1, [pc, #204]	; (8005a18 <getCommand+0x238>)
 800594c:	0020      	movs	r0, r4
 800594e:	f00c f882 	bl	8011a56 <memcpy>
 8005952:	e774      	b.n	800583e <getCommand+0x5e>
		pcParameterString2 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,
 8005954:	466a      	mov	r2, sp
 8005956:	2102      	movs	r1, #2
 8005958:	0030      	movs	r0, r6
 800595a:	f007 f871 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 800595e:	0005      	movs	r5, r0
 8005960:	4f2e      	ldr	r7, [pc, #184]	; (8005a1c <getCommand+0x23c>)
		for(i =0; i < MaxNumOfGroups; i++) {
 8005962:	2600      	movs	r6, #0
			if(!strcmp((char*) pcParameterString2,groupAlias[i])) {
 8005964:	0039      	movs	r1, r7
 8005966:	0028      	movs	r0, r5
 8005968:	f7fa fbcc 	bl	8000104 <strcmp>
 800596c:	2800      	cmp	r0, #0
 800596e:	d011      	beq.n	8005994 <getCommand+0x1b4>
		for(i =0; i < MaxNumOfGroups; i++) {
 8005970:	3601      	adds	r6, #1
 8005972:	b2f6      	uxtb	r6, r6
 8005974:	370a      	adds	r7, #10
 8005976:	2e0a      	cmp	r6, #10
 8005978:	d1f4      	bne.n	8005964 <getCommand+0x184>
			sprintf((char*) pcWriteBuffer,(char*) pcMessageGroupDoesNotExist,
 800597a:	002a      	movs	r2, r5
 800597c:	4928      	ldr	r1, [pc, #160]	; (8005a20 <getCommand+0x240>)
 800597e:	0020      	movs	r0, r4
 8005980:	f00c fa6c 	bl	8011e5c <sprintf>
			return pdFALSE;
 8005984:	e75b      	b.n	800583e <getCommand+0x5e>
					sprintf((char*) pcWriteBuffer,"%s#%d\n\r",
 8005986:	002b      	movs	r3, r5
 8005988:	0022      	movs	r2, r4
 800598a:	4926      	ldr	r1, [pc, #152]	; (8005a24 <getCommand+0x244>)
 800598c:	0020      	movs	r0, r4
 800598e:	f00c fa65 	bl	8011e5c <sprintf>
 8005992:	e015      	b.n	80059c0 <getCommand+0x1e0>
			sprintf((char*) pcWriteBuffer,(char*) pcMessageGroupExists,
 8005994:	002a      	movs	r2, r5
 8005996:	4924      	ldr	r1, [pc, #144]	; (8005a28 <getCommand+0x248>)
 8005998:	0020      	movs	r0, r4
 800599a:	f00c fa5f 	bl	8011e5c <sprintf>
			for(j =1; j <= N; j++)// N modules
 800599e:	4b23      	ldr	r3, [pc, #140]	; (8005a2c <getCommand+0x24c>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d100      	bne.n	80059a8 <getCommand+0x1c8>
 80059a6:	e74a      	b.n	800583e <getCommand+0x5e>
 80059a8:	2501      	movs	r5, #1
 80059aa:	002b      	movs	r3, r5
 80059ac:	40b3      	lsls	r3, r6
 80059ae:	4698      	mov	r8, r3
				if(InGroup(j,i)) {
 80059b0:	4f1f      	ldr	r7, [pc, #124]	; (8005a30 <getCommand+0x250>)
			for(j =1; j <= N; j++)// N modules
 80059b2:	4e1e      	ldr	r6, [pc, #120]	; (8005a2c <getCommand+0x24c>)
				if(InGroup(j,i)) {
 80059b4:	1e6b      	subs	r3, r5, #1
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	5bdb      	ldrh	r3, [r3, r7]
 80059ba:	4642      	mov	r2, r8
 80059bc:	421a      	tst	r2, r3
 80059be:	d1e2      	bne.n	8005986 <getCommand+0x1a6>
			for(j =1; j <= N; j++)// N modules
 80059c0:	3501      	adds	r5, #1
 80059c2:	b2ed      	uxtb	r5, r5
 80059c4:	7833      	ldrb	r3, [r6, #0]
 80059c6:	42ab      	cmp	r3, r5
 80059c8:	d2f4      	bcs.n	80059b4 <getCommand+0x1d4>
 80059ca:	e738      	b.n	800583e <getCommand+0x5e>
	sprintf((char*) pcWriteBuffer,(char*) pcMessageWrongValue,
 80059cc:	002a      	movs	r2, r5
 80059ce:	4919      	ldr	r1, [pc, #100]	; (8005a34 <getCommand+0x254>)
 80059d0:	0020      	movs	r0, r4
 80059d2:	f00c fa43 	bl	8011e5c <sprintf>
 80059d6:	e732      	b.n	800583e <getCommand+0x5e>
 80059d8:	20001294 	.word	0x20001294
 80059dc:	0801705c 	.word	0x0801705c
 80059e0:	08017064 	.word	0x08017064
 80059e4:	20006988 	.word	0x20006988
 80059e8:	08016574 	.word	0x08016574
 80059ec:	080163cc 	.word	0x080163cc
 80059f0:	08017070 	.word	0x08017070
 80059f4:	08017074 	.word	0x08017074
 80059f8:	0801707c 	.word	0x0801707c
 80059fc:	08017084 	.word	0x08017084
 8005a00:	08016a0c 	.word	0x08016a0c
 8005a04:	08017090 	.word	0x08017090
 8005a08:	0801709c 	.word	0x0801709c
 8005a0c:	080170ac 	.word	0x080170ac
 8005a10:	080170c0 	.word	0x080170c0
 8005a14:	080170d4 	.word	0x080170d4
 8005a18:	080170e4 	.word	0x080170e4
 8005a1c:	20000e5c 	.word	0x20000e5c
 8005a20:	080170f8 	.word	0x080170f8
 8005a24:	080170dc 	.word	0x080170dc
 8005a28:	08017114 	.word	0x08017114
 8005a2c:	2000001c 	.word	0x2000001c
 8005a30:	20000ec0 	.word	0x20000ec0
 8005a34:	08017128 	.word	0x08017128

08005a38 <defaultCommand>:
    size_t xWriteBufferLen, const int8_t *pcCommandString){
 8005a38:	b570      	push	{r4, r5, r6, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	0004      	movs	r4, r0
 8005a3e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005a40:	2300      	movs	r3, #0
 8005a42:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005a44:	2c00      	cmp	r4, #0
 8005a46:	d101      	bne.n	8005a4c <defaultCommand+0x14>
 8005a48:	b672      	cpsid	i
 8005a4a:	e7fe      	b.n	8005a4a <defaultCommand+0x12>
	pcParameterString1 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,1,
 8005a4c:	aa01      	add	r2, sp, #4
 8005a4e:	2101      	movs	r1, #1
 8005a50:	f006 fff6 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 8005a54:	0005      	movs	r5, r0
	if(!strncmp((const char*) pcParameterString1,"params",
 8005a56:	9e01      	ldr	r6, [sp, #4]
 8005a58:	0032      	movs	r2, r6
 8005a5a:	491e      	ldr	r1, [pc, #120]	; (8005ad4 <defaultCommand+0x9c>)
 8005a5c:	f00c fa42 	bl	8011ee4 <strncmp>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d01e      	beq.n	8005aa2 <defaultCommand+0x6a>
	else if(!strncmp((const char*) pcParameterString1,"array",
 8005a64:	0032      	movs	r2, r6
 8005a66:	491c      	ldr	r1, [pc, #112]	; (8005ad8 <defaultCommand+0xa0>)
 8005a68:	0028      	movs	r0, r5
 8005a6a:	f00c fa3b 	bl	8011ee4 <strncmp>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d12a      	bne.n	8005ac8 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8005a72:	2200      	movs	r2, #0
 8005a74:	2116      	movs	r1, #22
 8005a76:	20ff      	movs	r0, #255	; 0xff
 8005a78:	f002 ff40 	bl	80088fc <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 8005a7c:	4b17      	ldr	r3, [pc, #92]	; (8005adc <defaultCommand+0xa4>)
 8005a7e:	2202      	movs	r2, #2
 8005a80:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8005a82:	2064      	movs	r0, #100	; 0x64
 8005a84:	f006 fec3 	bl	800c80e <osDelay>
		ClearEEportsDir();
 8005a88:	f7fc ff12 	bl	80028b0 <ClearEEportsDir>
		ClearROtopology();
 8005a8c:	f004 fec0 	bl	800a810 <ClearROtopology>
		osDelay(100);
 8005a90:	2064      	movs	r0, #100	; 0x64
 8005a92:	f006 febc 	bl	800c80e <osDelay>
		strcpy((char*) pcWriteBuffer,(char*) pcMessageOKArray);
 8005a96:	2240      	movs	r2, #64	; 0x40
 8005a98:	4911      	ldr	r1, [pc, #68]	; (8005ae0 <defaultCommand+0xa8>)
 8005a9a:	0020      	movs	r0, r4
 8005a9c:	f00b ffdb 	bl	8011a56 <memcpy>
 8005aa0:	e00f      	b.n	8005ac2 <defaultCommand+0x8a>
		memcpy(&BOS,&BOS_default,sizeof (BOS_default));
 8005aa2:	4910      	ldr	r1, [pc, #64]	; (8005ae4 <defaultCommand+0xac>)
 8005aa4:	4b10      	ldr	r3, [pc, #64]	; (8005ae8 <defaultCommand+0xb0>)
 8005aa6:	000a      	movs	r2, r1
 8005aa8:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005aaa:	c223      	stmia	r2!, {r0, r1, r5}
 8005aac:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005aae:	c223      	stmia	r2!, {r0, r1, r5}
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8005ab4:	f7fd f9bc 	bl	8002e30 <SaveEEparams>
		strcpy((char*) pcWriteBuffer,(char*) pcMessageOKParams);
 8005ab8:	2227      	movs	r2, #39	; 0x27
 8005aba:	490c      	ldr	r1, [pc, #48]	; (8005aec <defaultCommand+0xb4>)
 8005abc:	0020      	movs	r0, r4
 8005abe:	f00b ffca 	bl	8011a56 <memcpy>
}
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	b002      	add	sp, #8
 8005ac6:	bd70      	pop	{r4, r5, r6, pc}
	strcpy((char*) pcWriteBuffer,(char*) pcMessageWrongValue);
 8005ac8:	220f      	movs	r2, #15
 8005aca:	4909      	ldr	r1, [pc, #36]	; (8005af0 <defaultCommand+0xb8>)
 8005acc:	0020      	movs	r0, r4
 8005ace:	f00b ffc2 	bl	8011a56 <memcpy>
 8005ad2:	e7f6      	b.n	8005ac2 <defaultCommand+0x8a>
 8005ad4:	08016f18 	.word	0x08016f18
 8005ad8:	08016f48 	.word	0x08016f48
 8005adc:	20000ef4 	.word	0x20000ef4
 8005ae0:	08016f60 	.word	0x08016f60
 8005ae4:	20006988 	.word	0x20006988
 8005ae8:	20000000 	.word	0x20000000
 8005aec:	08016f20 	.word	0x08016f20
 8005af0:	08016f50 	.word	0x08016f50

08005af4 <setCommand>:
    const int8_t *pcCommandString){
 8005af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005af6:	46ce      	mov	lr, r9
 8005af8:	4647      	mov	r7, r8
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b08d      	sub	sp, #52	; 0x34
 8005afe:	0005      	movs	r5, r0
 8005b00:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0,
 8005b02:	2300      	movs	r3, #0
 8005b04:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b06:	930a      	str	r3, [sp, #40]	; 0x28
	    xParameterStringLength3 =0;
 8005b08:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 8005b0a:	9308      	str	r3, [sp, #32]
 8005b0c:	9307      	str	r3, [sp, #28]
	configASSERT(pcWriteBuffer);
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	d101      	bne.n	8005b16 <setCommand+0x22>
 8005b12:	b672      	cpsid	i
 8005b14:	e7fe      	b.n	8005b14 <setCommand+0x20>
	pcParameterString1 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,1,
 8005b16:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b18:	2101      	movs	r1, #1
 8005b1a:	0020      	movs	r0, r4
 8005b1c:	f006 ff90 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 8005b20:	0006      	movs	r6, r0
 8005b22:	4bb3      	ldr	r3, [pc, #716]	; (8005df0 <setCommand+0x2fc>)
 8005b24:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char*) pcParameterString1,"bos.",4)) {
 8005b26:	2204      	movs	r2, #4
 8005b28:	49b2      	ldr	r1, [pc, #712]	; (8005df4 <setCommand+0x300>)
 8005b2a:	f00c f9db 	bl	8011ee4 <strncmp>
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d015      	beq.n	8005b5e <setCommand+0x6a>
	else if(!strncmp((const char*) pcParameterString1,"time",4)) {
 8005b32:	2204      	movs	r2, #4
 8005b34:	49b0      	ldr	r1, [pc, #704]	; (8005df8 <setCommand+0x304>)
 8005b36:	0030      	movs	r0, r6
 8005b38:	f00c f9d4 	bl	8011ee4 <strncmp>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	d100      	bne.n	8005b42 <setCommand+0x4e>
 8005b40:	e180      	b.n	8005e44 <setCommand+0x350>
	else if(!strncmp((const char*) pcParameterString1,"date",4)) {
 8005b42:	2204      	movs	r2, #4
 8005b44:	49ad      	ldr	r1, [pc, #692]	; (8005dfc <setCommand+0x308>)
 8005b46:	0030      	movs	r0, r6
 8005b48:	f00c f9cc 	bl	8011ee4 <strncmp>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d100      	bne.n	8005b52 <setCommand+0x5e>
 8005b50:	e1e6      	b.n	8005f20 <setCommand+0x42c>
	strcpy((char*) pcWriteBuffer,(char*) pcMessageWrongParam);
 8005b52:	2213      	movs	r2, #19
 8005b54:	49aa      	ldr	r1, [pc, #680]	; (8005e00 <setCommand+0x30c>)
 8005b56:	0028      	movs	r0, r5
 8005b58:	f00b ff7d 	bl	8011a56 <memcpy>
 8005b5c:	e1d7      	b.n	8005f0e <setCommand+0x41a>
		pcParameterString2 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,
 8005b5e:	aa0a      	add	r2, sp, #40	; 0x28
 8005b60:	2102      	movs	r1, #2
 8005b62:	0020      	movs	r0, r4
 8005b64:	f006 ff6c 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 8005b68:	0004      	movs	r4, r0
 8005b6a:	4ba6      	ldr	r3, [pc, #664]	; (8005e04 <setCommand+0x310>)
 8005b6c:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char*) pcParameterString1 + 4,"response",
 8005b6e:	4ba0      	ldr	r3, [pc, #640]	; (8005df0 <setCommand+0x2fc>)
 8005b70:	681e      	ldr	r6, [r3, #0]
 8005b72:	3604      	adds	r6, #4
		    xParameterStringLength1 - 4)) {
 8005b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b76:	1f1f      	subs	r7, r3, #4
		if(!strncmp((const char*) pcParameterString1 + 4,"response",
 8005b78:	003a      	movs	r2, r7
 8005b7a:	49a3      	ldr	r1, [pc, #652]	; (8005e08 <setCommand+0x314>)
 8005b7c:	0030      	movs	r0, r6
 8005b7e:	f00c f9b1 	bl	8011ee4 <strncmp>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d153      	bne.n	8005c2e <setCommand+0x13a>
			if(!strncmp((const char*) pcParameterString2,"all",
 8005b86:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005b88:	0032      	movs	r2, r6
 8005b8a:	49a0      	ldr	r1, [pc, #640]	; (8005e0c <setCommand+0x318>)
 8005b8c:	0020      	movs	r0, r4
 8005b8e:	f00c f9a9 	bl	8011ee4 <strncmp>
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d115      	bne.n	8005bc2 <setCommand+0xce>
				BOS.response = BOS_RESPONSE_ALL;
 8005b96:	4b9e      	ldr	r3, [pc, #632]	; (8005e10 <setCommand+0x31c>)
 8005b98:	2160      	movs	r1, #96	; 0x60
 8005b9a:	7199      	strb	r1, [r3, #6]
				    ((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 8005b9c:	79db      	ldrb	r3, [r3, #7]
 8005b9e:	021b      	lsls	r3, r3, #8
				EE_WriteVariable(_EE_PARAMS_BASE,
 8005ba0:	4319      	orrs	r1, r3
 8005ba2:	308a      	adds	r0, #138	; 0x8a
 8005ba4:	0040      	lsls	r0, r0, #1
 8005ba6:	f001 f9d1 	bl	8006f4c <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;// Get rid of the remaining parameters
 8005baa:	4b91      	ldr	r3, [pc, #580]	; (8005df0 <setCommand+0x2fc>)
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bb2:	5453      	strb	r3, [r2, r1]
		sprintf((char*) pcWriteBuffer,(char*) pcMessageOK,pcParameterString1,
 8005bb4:	4b93      	ldr	r3, [pc, #588]	; (8005e04 <setCommand+0x310>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4996      	ldr	r1, [pc, #600]	; (8005e14 <setCommand+0x320>)
 8005bba:	0028      	movs	r0, r5
 8005bbc:	f00c f94e 	bl	8011e5c <sprintf>
	return pdFALSE;
 8005bc0:	e1a5      	b.n	8005f0e <setCommand+0x41a>
			else if(!strncmp((const char*) pcParameterString2,"message",
 8005bc2:	0032      	movs	r2, r6
 8005bc4:	4994      	ldr	r1, [pc, #592]	; (8005e18 <setCommand+0x324>)
 8005bc6:	0020      	movs	r0, r4
 8005bc8:	f00c f98c 	bl	8011ee4 <strncmp>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d10a      	bne.n	8005be6 <setCommand+0xf2>
				BOS.response = BOS_RESPONSE_MSG;
 8005bd0:	4b8f      	ldr	r3, [pc, #572]	; (8005e10 <setCommand+0x31c>)
 8005bd2:	2120      	movs	r1, #32
 8005bd4:	7199      	strb	r1, [r3, #6]
				    ((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 8005bd6:	79db      	ldrb	r3, [r3, #7]
 8005bd8:	021b      	lsls	r3, r3, #8
				EE_WriteVariable(_EE_PARAMS_BASE,
 8005bda:	4319      	orrs	r1, r3
 8005bdc:	308a      	adds	r0, #138	; 0x8a
 8005bde:	0040      	lsls	r0, r0, #1
 8005be0:	f001 f9b4 	bl	8006f4c <EE_WriteVariable>
 8005be4:	e7e1      	b.n	8005baa <setCommand+0xb6>
			else if(!strncmp((const char*) pcParameterString2,"cli",
 8005be6:	0032      	movs	r2, r6
 8005be8:	498c      	ldr	r1, [pc, #560]	; (8005e1c <setCommand+0x328>)
 8005bea:	0020      	movs	r0, r4
 8005bec:	f00c f97a 	bl	8011ee4 <strncmp>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d10a      	bne.n	8005c0a <setCommand+0x116>
				BOS.response = BOS_RESPONSE_CLI;
 8005bf4:	4b86      	ldr	r3, [pc, #536]	; (8005e10 <setCommand+0x31c>)
 8005bf6:	2140      	movs	r1, #64	; 0x40
 8005bf8:	7199      	strb	r1, [r3, #6]
				    ((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 8005bfa:	79db      	ldrb	r3, [r3, #7]
 8005bfc:	021b      	lsls	r3, r3, #8
				EE_WriteVariable(_EE_PARAMS_BASE,
 8005bfe:	4319      	orrs	r1, r3
 8005c00:	308a      	adds	r0, #138	; 0x8a
 8005c02:	0040      	lsls	r0, r0, #1
 8005c04:	f001 f9a2 	bl	8006f4c <EE_WriteVariable>
 8005c08:	e7cf      	b.n	8005baa <setCommand+0xb6>
			else if(!strncmp((const char*) pcParameterString2,"none",
 8005c0a:	0032      	movs	r2, r6
 8005c0c:	4984      	ldr	r1, [pc, #528]	; (8005e20 <setCommand+0x32c>)
 8005c0e:	0020      	movs	r0, r4
 8005c10:	f00c f968 	bl	8011ee4 <strncmp>
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d000      	beq.n	8005c1a <setCommand+0x126>
 8005c18:	e2a7      	b.n	800616a <setCommand+0x676>
				BOS.response = BOS_RESPONSE_NONE;
 8005c1a:	4b7d      	ldr	r3, [pc, #500]	; (8005e10 <setCommand+0x31c>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	719a      	strb	r2, [r3, #6]
				    ((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 8005c20:	79d9      	ldrb	r1, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,
 8005c22:	0209      	lsls	r1, r1, #8
 8005c24:	308a      	adds	r0, #138	; 0x8a
 8005c26:	0040      	lsls	r0, r0, #1
 8005c28:	f001 f990 	bl	8006f4c <EE_WriteVariable>
 8005c2c:	e7bd      	b.n	8005baa <setCommand+0xb6>
		else if(!strncmp((const char*) pcParameterString1 + 4,"trace",
 8005c2e:	003a      	movs	r2, r7
 8005c30:	497c      	ldr	r1, [pc, #496]	; (8005e24 <setCommand+0x330>)
 8005c32:	0030      	movs	r0, r6
 8005c34:	f00c f956 	bl	8011ee4 <strncmp>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	d14a      	bne.n	8005cd2 <setCommand+0x1de>
			if(!strncmp((const char*) pcParameterString2,"all",
 8005c3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005c3e:	0032      	movs	r2, r6
 8005c40:	4972      	ldr	r1, [pc, #456]	; (8005e0c <setCommand+0x318>)
 8005c42:	0020      	movs	r0, r4
 8005c44:	f00c f94e 	bl	8011ee4 <strncmp>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d10b      	bne.n	8005c64 <setCommand+0x170>
				BOS.trace =TRACE_BOTH;
 8005c4c:	4b70      	ldr	r3, [pc, #448]	; (8005e10 <setCommand+0x31c>)
 8005c4e:	2203      	movs	r2, #3
 8005c50:	71da      	strb	r2, [r3, #7]
				    ((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 8005c52:	799b      	ldrb	r3, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,
 8005c54:	21c0      	movs	r1, #192	; 0xc0
 8005c56:	0089      	lsls	r1, r1, #2
 8005c58:	4319      	orrs	r1, r3
 8005c5a:	308a      	adds	r0, #138	; 0x8a
 8005c5c:	0040      	lsls	r0, r0, #1
 8005c5e:	f001 f975 	bl	8006f4c <EE_WriteVariable>
 8005c62:	e7a2      	b.n	8005baa <setCommand+0xb6>
			else if(!strncmp((const char*) pcParameterString2,"message",
 8005c64:	0032      	movs	r2, r6
 8005c66:	496c      	ldr	r1, [pc, #432]	; (8005e18 <setCommand+0x324>)
 8005c68:	0020      	movs	r0, r4
 8005c6a:	f00c f93b 	bl	8011ee4 <strncmp>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	d10b      	bne.n	8005c8a <setCommand+0x196>
				BOS.trace =TRACE_MESSAGE;
 8005c72:	4b67      	ldr	r3, [pc, #412]	; (8005e10 <setCommand+0x31c>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	71da      	strb	r2, [r3, #7]
				    ((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 8005c78:	799b      	ldrb	r3, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,
 8005c7a:	2180      	movs	r1, #128	; 0x80
 8005c7c:	0049      	lsls	r1, r1, #1
 8005c7e:	4319      	orrs	r1, r3
 8005c80:	308a      	adds	r0, #138	; 0x8a
 8005c82:	4090      	lsls	r0, r2
 8005c84:	f001 f962 	bl	8006f4c <EE_WriteVariable>
 8005c88:	e78f      	b.n	8005baa <setCommand+0xb6>
			else if(!strncmp((const char*) pcParameterString2,"response",
 8005c8a:	0032      	movs	r2, r6
 8005c8c:	495e      	ldr	r1, [pc, #376]	; (8005e08 <setCommand+0x314>)
 8005c8e:	0020      	movs	r0, r4
 8005c90:	f00c f928 	bl	8011ee4 <strncmp>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	d10b      	bne.n	8005cb0 <setCommand+0x1bc>
				BOS.trace =TRACE_RESPONSE;
 8005c98:	4b5d      	ldr	r3, [pc, #372]	; (8005e10 <setCommand+0x31c>)
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	71da      	strb	r2, [r3, #7]
				    ((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 8005c9e:	799b      	ldrb	r3, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,
 8005ca0:	2180      	movs	r1, #128	; 0x80
 8005ca2:	0089      	lsls	r1, r1, #2
 8005ca4:	4319      	orrs	r1, r3
 8005ca6:	308a      	adds	r0, #138	; 0x8a
 8005ca8:	0040      	lsls	r0, r0, #1
 8005caa:	f001 f94f 	bl	8006f4c <EE_WriteVariable>
 8005cae:	e77c      	b.n	8005baa <setCommand+0xb6>
			else if(!strncmp((const char*) pcParameterString2,"none",
 8005cb0:	0032      	movs	r2, r6
 8005cb2:	495b      	ldr	r1, [pc, #364]	; (8005e20 <setCommand+0x32c>)
 8005cb4:	0020      	movs	r0, r4
 8005cb6:	f00c f915 	bl	8011ee4 <strncmp>
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d000      	beq.n	8005cc0 <setCommand+0x1cc>
 8005cbe:	e254      	b.n	800616a <setCommand+0x676>
				BOS.trace =TRACE_NONE;
 8005cc0:	4b53      	ldr	r3, [pc, #332]	; (8005e10 <setCommand+0x31c>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,
 8005cc6:	7999      	ldrb	r1, [r3, #6]
 8005cc8:	308a      	adds	r0, #138	; 0x8a
 8005cca:	0040      	lsls	r0, r0, #1
 8005ccc:	f001 f93e 	bl	8006f4c <EE_WriteVariable>
 8005cd0:	e76b      	b.n	8005baa <setCommand+0xb6>
		else if(!strncmp((const char*) pcParameterString1 + 4,"clibaudrate",
 8005cd2:	003a      	movs	r2, r7
 8005cd4:	4954      	ldr	r1, [pc, #336]	; (8005e28 <setCommand+0x334>)
 8005cd6:	0030      	movs	r0, r6
 8005cd8:	f00c f904 	bl	8011ee4 <strncmp>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d128      	bne.n	8005d32 <setCommand+0x23e>
			temp2 =atoi((const char*) pcParameterString2);
 8005ce0:	0020      	movs	r0, r4
 8005ce2:	f00b fc28 	bl	8011536 <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE) {
 8005ce6:	23e1      	movs	r3, #225	; 0xe1
 8005ce8:	031b      	lsls	r3, r3, #12
 8005cea:	4298      	cmp	r0, r3
 8005cec:	d900      	bls.n	8005cf0 <setCommand+0x1fc>
 8005cee:	e23c      	b.n	800616a <setCommand+0x676>
				BOS.clibaudrate =temp2;
 8005cf0:	4c47      	ldr	r4, [pc, #284]	; (8005e10 <setCommand+0x31c>)
 8005cf2:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t) BOS.clibaudrate);
 8005cf4:	b281      	uxth	r1, r0
 8005cf6:	208c      	movs	r0, #140	; 0x8c
 8005cf8:	0040      	lsls	r0, r0, #1
 8005cfa:	f001 f927 	bl	8006f4c <EE_WriteVariable>
				    (uint16_t) (BOS.clibaudrate >> 16));
 8005cfe:	68a1      	ldr	r1, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD + 1,
 8005d00:	0c09      	lsrs	r1, r1, #16
 8005d02:	201a      	movs	r0, #26
 8005d04:	30ff      	adds	r0, #255	; 0xff
 8005d06:	f001 f921 	bl	8006f4c <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;// Get rid of the remaining parameters
 8005d0a:	4b39      	ldr	r3, [pc, #228]	; (8005df0 <setCommand+0x2fc>)
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d12:	5453      	strb	r3, [r2, r1]
		sprintf((char*) pcWriteBuffer,(char*) pcMessageOK,pcParameterString1,
 8005d14:	4b3b      	ldr	r3, [pc, #236]	; (8005e04 <setCommand+0x310>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	493e      	ldr	r1, [pc, #248]	; (8005e14 <setCommand+0x320>)
 8005d1a:	0028      	movs	r0, r5
 8005d1c:	f00c f89e 	bl	8011e5c <sprintf>
			strcat((char*) pcWriteBuffer,(char*) pcMessageCLI1);
 8005d20:	4942      	ldr	r1, [pc, #264]	; (8005e2c <setCommand+0x338>)
 8005d22:	0028      	movs	r0, r5
 8005d24:	f00c f8ba 	bl	8011e9c <strcat>
			strcat((char*) pcWriteBuffer,(char*) pcMessageCLI2);
 8005d28:	4941      	ldr	r1, [pc, #260]	; (8005e30 <setCommand+0x33c>)
 8005d2a:	0028      	movs	r0, r5
 8005d2c:	f00c f8b6 	bl	8011e9c <strcat>
 8005d30:	e0ed      	b.n	8005f0e <setCommand+0x41a>
		else if(!strncmp((const char*) pcParameterString1 + 4,"debounce",
 8005d32:	003a      	movs	r2, r7
 8005d34:	493f      	ldr	r1, [pc, #252]	; (8005e34 <setCommand+0x340>)
 8005d36:	0030      	movs	r0, r6
 8005d38:	f00c f8d4 	bl	8011ee4 <strncmp>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	d10d      	bne.n	8005d5c <setCommand+0x268>
			temp16 =atoi((const char*) pcParameterString2);
 8005d40:	0020      	movs	r0, r4
 8005d42:	f00b fbf8 	bl	8011536 <atoi>
 8005d46:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX) {
 8005d48:	2900      	cmp	r1, #0
 8005d4a:	d100      	bne.n	8005d4e <setCommand+0x25a>
 8005d4c:	e20d      	b.n	800616a <setCommand+0x676>
				BOS.buttons.debounce =temp16;
 8005d4e:	4b30      	ldr	r3, [pc, #192]	; (8005e10 <setCommand+0x31c>)
 8005d50:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8005d52:	2016      	movs	r0, #22
 8005d54:	30ff      	adds	r0, #255	; 0xff
 8005d56:	f001 f8f9 	bl	8006f4c <EE_WriteVariable>
 8005d5a:	e726      	b.n	8005baa <setCommand+0xb6>
		else if(!strncmp((const char*) pcParameterString1 + 4,
 8005d5c:	003a      	movs	r2, r7
 8005d5e:	4936      	ldr	r1, [pc, #216]	; (8005e38 <setCommand+0x344>)
 8005d60:	0030      	movs	r0, r6
 8005d62:	f00c f8bf 	bl	8011ee4 <strncmp>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d10d      	bne.n	8005d86 <setCommand+0x292>
			temp16 =atoi((const char*) pcParameterString2);
 8005d6a:	0020      	movs	r0, r4
 8005d6c:	f00b fbe3 	bl	8011536 <atoi>
 8005d70:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX) {
 8005d72:	2900      	cmp	r1, #0
 8005d74:	d100      	bne.n	8005d78 <setCommand+0x284>
 8005d76:	e1f8      	b.n	800616a <setCommand+0x676>
				BOS.buttons.singleClickTime =temp16;
 8005d78:	4b25      	ldr	r3, [pc, #148]	; (8005e10 <setCommand+0x31c>)
 8005d7a:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8005d7c:	208b      	movs	r0, #139	; 0x8b
 8005d7e:	0040      	lsls	r0, r0, #1
 8005d80:	f001 f8e4 	bl	8006f4c <EE_WriteVariable>
 8005d84:	e711      	b.n	8005baa <setCommand+0xb6>
		else if(!strncmp((const char*) pcParameterString1 + 4,
 8005d86:	003a      	movs	r2, r7
 8005d88:	492c      	ldr	r1, [pc, #176]	; (8005e3c <setCommand+0x348>)
 8005d8a:	0030      	movs	r0, r6
 8005d8c:	f00c f8aa 	bl	8011ee4 <strncmp>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d112      	bne.n	8005dba <setCommand+0x2c6>
			temp16 =atoi((const char*) pcParameterString2);
 8005d94:	0020      	movs	r0, r4
 8005d96:	f00b fbce 	bl	8011536 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8005d9a:	1e43      	subs	r3, r0, #1
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2bfe      	cmp	r3, #254	; 0xfe
 8005da0:	d900      	bls.n	8005da4 <setCommand+0x2b0>
 8005da2:	e1e2      	b.n	800616a <setCommand+0x676>
				BOS.buttons.minInterClickTime =temp16;
 8005da4:	b2c0      	uxtb	r0, r0
 8005da6:	4b1a      	ldr	r3, [pc, #104]	; (8005e10 <setCommand+0x31c>)
 8005da8:	7118      	strb	r0, [r3, #4]
				    ((uint16_t) BOS.buttons.maxInterClickTime << 8)
 8005daa:	7959      	ldrb	r1, [r3, #5]
 8005dac:	0209      	lsls	r1, r1, #8
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,
 8005dae:	4301      	orrs	r1, r0
 8005db0:	2018      	movs	r0, #24
 8005db2:	30ff      	adds	r0, #255	; 0xff
 8005db4:	f001 f8ca 	bl	8006f4c <EE_WriteVariable>
 8005db8:	e6f7      	b.n	8005baa <setCommand+0xb6>
		else if(!strncmp((const char*) pcParameterString1 + 4,
 8005dba:	003a      	movs	r2, r7
 8005dbc:	4920      	ldr	r1, [pc, #128]	; (8005e40 <setCommand+0x34c>)
 8005dbe:	0030      	movs	r0, r6
 8005dc0:	f00c f890 	bl	8011ee4 <strncmp>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d000      	beq.n	8005dca <setCommand+0x2d6>
 8005dc8:	e6c3      	b.n	8005b52 <setCommand+0x5e>
			temp16 =atoi((const char*) pcParameterString2);
 8005dca:	0020      	movs	r0, r4
 8005dcc:	f00b fbb3 	bl	8011536 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8005dd0:	1e43      	subs	r3, r0, #1
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	2bfe      	cmp	r3, #254	; 0xfe
 8005dd6:	d900      	bls.n	8005dda <setCommand+0x2e6>
 8005dd8:	e1c7      	b.n	800616a <setCommand+0x676>
				BOS.buttons.maxInterClickTime =temp16;
 8005dda:	4b0d      	ldr	r3, [pc, #52]	; (8005e10 <setCommand+0x31c>)
 8005ddc:	7158      	strb	r0, [r3, #5]
				        | (uint16_t) BOS.buttons.minInterClickTime);
 8005dde:	0200      	lsls	r0, r0, #8
 8005de0:	7919      	ldrb	r1, [r3, #4]
 8005de2:	4301      	orrs	r1, r0
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,
 8005de4:	b289      	uxth	r1, r1
 8005de6:	2018      	movs	r0, #24
 8005de8:	30ff      	adds	r0, #255	; 0xff
 8005dea:	f001 f8af 	bl	8006f4c <EE_WriteVariable>
 8005dee:	e6dc      	b.n	8005baa <setCommand+0xb6>
 8005df0:	20001290 	.word	0x20001290
 8005df4:	0801705c 	.word	0x0801705c
 8005df8:	08017788 	.word	0x08017788
 8005dfc:	08017798 	.word	0x08017798
 8005e00:	080170e4 	.word	0x080170e4
 8005e04:	2000129c 	.word	0x2000129c
 8005e08:	08017064 	.word	0x08017064
 8005e0c:	08016574 	.word	0x08016574
 8005e10:	20006988 	.word	0x20006988
 8005e14:	08017690 	.word	0x08017690
 8005e18:	08017684 	.word	0x08017684
 8005e1c:	0801768c 	.word	0x0801768c
 8005e20:	08017074 	.word	0x08017074
 8005e24:	0801707c 	.word	0x0801707c
 8005e28:	08017084 	.word	0x08017084
 8005e2c:	080176a4 	.word	0x080176a4
 8005e30:	080176d4 	.word	0x080176d4
 8005e34:	08017090 	.word	0x08017090
 8005e38:	0801709c 	.word	0x0801709c
 8005e3c:	080170ac 	.word	0x080170ac
 8005e40:	080170c0 	.word	0x080170c0
		pcParameterString2 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,
 8005e44:	aa0a      	add	r2, sp, #40	; 0x28
 8005e46:	2102      	movs	r1, #2
 8005e48:	0020      	movs	r0, r4
 8005e4a:	f006 fdf9 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 8005e4e:	4bca      	ldr	r3, [pc, #808]	; (8006178 <setCommand+0x684>)
 8005e50:	4699      	mov	r9, r3
 8005e52:	6018      	str	r0, [r3, #0]
		pcParameterString3 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,
 8005e54:	aa09      	add	r2, sp, #36	; 0x24
 8005e56:	2103      	movs	r1, #3
 8005e58:	0020      	movs	r0, r4
 8005e5a:	f006 fdf1 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 8005e5e:	4fc7      	ldr	r7, [pc, #796]	; (800617c <setCommand+0x688>)
 8005e60:	6038      	str	r0, [r7, #0]
		pcParameterString4 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,
 8005e62:	aa08      	add	r2, sp, #32
 8005e64:	2104      	movs	r1, #4
 8005e66:	0020      	movs	r0, r4
 8005e68:	f006 fdea 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 8005e6c:	4ec4      	ldr	r6, [pc, #784]	; (8006180 <setCommand+0x68c>)
 8005e6e:	6030      	str	r0, [r6, #0]
		pcParameterString5 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,
 8005e70:	aa07      	add	r2, sp, #28
 8005e72:	2105      	movs	r1, #5
 8005e74:	0020      	movs	r0, r4
 8005e76:	f006 fde3 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 8005e7a:	4cc2      	ldr	r4, [pc, #776]	; (8006184 <setCommand+0x690>)
 8005e7c:	6020      	str	r0, [r4, #0]
		temp81 =atoi((const char*) pcParameterString2);// Hours
 8005e7e:	464b      	mov	r3, r9
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	f00b fb58 	bl	8011536 <atoi>
 8005e86:	b2c3      	uxtb	r3, r0
 8005e88:	4699      	mov	r9, r3
		temp82 =atoi((const char*) pcParameterString3);// Minutes
 8005e8a:	6838      	ldr	r0, [r7, #0]
 8005e8c:	f00b fb53 	bl	8011536 <atoi>
 8005e90:	b2c7      	uxtb	r7, r0
		temp83 =atoi((const char*) pcParameterString4);// Seconds
 8005e92:	6830      	ldr	r0, [r6, #0]
 8005e94:	f00b fb4f 	bl	8011536 <atoi>
 8005e98:	b2c6      	uxtb	r6, r0
		if(pcParameterString5 != NULL) {
 8005e9a:	6824      	ldr	r4, [r4, #0]
 8005e9c:	2c00      	cmp	r4, #0
 8005e9e:	d010      	beq.n	8005ec2 <setCommand+0x3ce>
			if(!strncmp((const char*) pcParameterString5,"am",2))
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	49b9      	ldr	r1, [pc, #740]	; (8006188 <setCommand+0x694>)
 8005ea4:	0020      	movs	r0, r4
 8005ea6:	f00c f81d 	bl	8011ee4 <strncmp>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d035      	beq.n	8005f1a <setCommand+0x426>
			else if(!strncmp((const char*) pcParameterString5,"pm",2))
 8005eae:	2202      	movs	r2, #2
 8005eb0:	49b6      	ldr	r1, [pc, #728]	; (800618c <setCommand+0x698>)
 8005eb2:	0020      	movs	r0, r4
 8005eb4:	f00c f816 	bl	8011ee4 <strncmp>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d000      	beq.n	8005ebe <setCommand+0x3ca>
 8005ebc:	e155      	b.n	800616a <setCommand+0x676>
			temp84 =RTC_PM;
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	2b17      	cmp	r3, #23
 8005ec6:	d900      	bls.n	8005eca <setCommand+0x3d6>
 8005ec8:	e14f      	b.n	800616a <setCommand+0x676>
 8005eca:	2f3b      	cmp	r7, #59	; 0x3b
 8005ecc:	d900      	bls.n	8005ed0 <setCommand+0x3dc>
 8005ece:	e14c      	b.n	800616a <setCommand+0x676>
 8005ed0:	2e3b      	cmp	r6, #59	; 0x3b
 8005ed2:	d900      	bls.n	8005ed6 <setCommand+0x3e2>
 8005ed4:	e149      	b.n	800616a <setCommand+0x676>
				GetTimeDate();
 8005ed6:	f006 f8c9 	bl	800c06c <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,
 8005eda:	4cad      	ldr	r4, [pc, #692]	; (8006190 <setCommand+0x69c>)
 8005edc:	7d23      	ldrb	r3, [r4, #20]
 8005ede:	8b22      	ldrh	r2, [r4, #24]
 8005ee0:	7d61      	ldrb	r1, [r4, #21]
 8005ee2:	7da0      	ldrb	r0, [r4, #22]
 8005ee4:	7b24      	ldrb	r4, [r4, #12]
 8005ee6:	b264      	sxtb	r4, r4
 8005ee8:	9404      	str	r4, [sp, #16]
 8005eea:	4644      	mov	r4, r8
 8005eec:	9403      	str	r4, [sp, #12]
 8005eee:	464c      	mov	r4, r9
 8005ef0:	9402      	str	r4, [sp, #8]
 8005ef2:	9701      	str	r7, [sp, #4]
 8005ef4:	9600      	str	r6, [sp, #0]
 8005ef6:	f006 f85f 	bl	800bfb8 <BOS_CalendarConfig>
 8005efa:	0006      	movs	r6, r0
	if(result == BOS_OK) {
 8005efc:	2e00      	cmp	r6, #0
 8005efe:	d100      	bne.n	8005f02 <setCommand+0x40e>
 8005f00:	e653      	b.n	8005baa <setCommand+0xb6>
	else if(result == BOS_ERR_WrongParam)
 8005f02:	2e67      	cmp	r6, #103	; 0x67
 8005f04:	d100      	bne.n	8005f08 <setCommand+0x414>
 8005f06:	e624      	b.n	8005b52 <setCommand+0x5e>
	else if(result == BOS_ERR_WrongValue)
 8005f08:	2e68      	cmp	r6, #104	; 0x68
 8005f0a:	d100      	bne.n	8005f0e <setCommand+0x41a>
 8005f0c:	e12d      	b.n	800616a <setCommand+0x676>
}
 8005f0e:	2000      	movs	r0, #0
 8005f10:	b00d      	add	sp, #52	; 0x34
 8005f12:	bc0c      	pop	{r2, r3}
 8005f14:	4690      	mov	r8, r2
 8005f16:	4699      	mov	r9, r3
 8005f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp84 =RTC_AM;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	4698      	mov	r8, r3
 8005f1e:	e7d0      	b.n	8005ec2 <setCommand+0x3ce>
		pcParameterString2 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,
 8005f20:	aa0a      	add	r2, sp, #40	; 0x28
 8005f22:	2102      	movs	r1, #2
 8005f24:	0020      	movs	r0, r4
 8005f26:	f006 fd8b 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 8005f2a:	4e93      	ldr	r6, [pc, #588]	; (8006178 <setCommand+0x684>)
 8005f2c:	6030      	str	r0, [r6, #0]
		pcParameterString3 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,
 8005f2e:	aa09      	add	r2, sp, #36	; 0x24
 8005f30:	2103      	movs	r1, #3
 8005f32:	0020      	movs	r0, r4
 8005f34:	f006 fd84 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 8005f38:	4b90      	ldr	r3, [pc, #576]	; (800617c <setCommand+0x688>)
 8005f3a:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,
 8005f3c:	aa08      	add	r2, sp, #32
 8005f3e:	2104      	movs	r1, #4
 8005f40:	0020      	movs	r0, r4
 8005f42:	f006 fd7d 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 8005f46:	4b8e      	ldr	r3, [pc, #568]	; (8006180 <setCommand+0x68c>)
 8005f48:	4698      	mov	r8, r3
 8005f4a:	6018      	str	r0, [r3, #0]
		pcParameterString5 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,
 8005f4c:	aa07      	add	r2, sp, #28
 8005f4e:	2105      	movs	r1, #5
 8005f50:	0020      	movs	r0, r4
 8005f52:	f006 fd75 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 8005f56:	4c8b      	ldr	r4, [pc, #556]	; (8006184 <setCommand+0x690>)
 8005f58:	6020      	str	r0, [r4, #0]
		temp83 =atoi((const char*) pcParameterString4);// day
 8005f5a:	4643      	mov	r3, r8
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	f00b faea 	bl	8011536 <atoi>
 8005f62:	b2c3      	uxtb	r3, r0
 8005f64:	4698      	mov	r8, r3
		temp16 =atoi((const char*) pcParameterString5);// year
 8005f66:	6820      	ldr	r0, [r4, #0]
 8005f68:	f00b fae5 	bl	8011536 <atoi>
 8005f6c:	b283      	uxth	r3, r0
 8005f6e:	4699      	mov	r9, r3
		if(!strncmp((const char*) pcParameterString2,"monday",6))
 8005f70:	6834      	ldr	r4, [r6, #0]
 8005f72:	2206      	movs	r2, #6
 8005f74:	4987      	ldr	r1, [pc, #540]	; (8006194 <setCommand+0x6a0>)
 8005f76:	0020      	movs	r0, r4
 8005f78:	f00b ffb4 	bl	8011ee4 <strncmp>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d100      	bne.n	8005f82 <setCommand+0x48e>
 8005f80:	e195      	b.n	80062ae <setCommand+0x7ba>
		else if(!strncmp((const char*) pcParameterString2,"tuesday",7))
 8005f82:	2207      	movs	r2, #7
 8005f84:	4984      	ldr	r1, [pc, #528]	; (8006198 <setCommand+0x6a4>)
 8005f86:	0020      	movs	r0, r4
 8005f88:	f00b ffac 	bl	8011ee4 <strncmp>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d100      	bne.n	8005f92 <setCommand+0x49e>
 8005f90:	e19b      	b.n	80062ca <setCommand+0x7d6>
		else if(!strncmp((const char*) pcParameterString2,"wednesday",9))
 8005f92:	2209      	movs	r2, #9
 8005f94:	4981      	ldr	r1, [pc, #516]	; (800619c <setCommand+0x6a8>)
 8005f96:	0020      	movs	r0, r4
 8005f98:	f00b ffa4 	bl	8011ee4 <strncmp>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d100      	bne.n	8005fa2 <setCommand+0x4ae>
 8005fa0:	e195      	b.n	80062ce <setCommand+0x7da>
		else if(!strncmp((const char*) pcParameterString2,"thursday",8))
 8005fa2:	2208      	movs	r2, #8
 8005fa4:	497e      	ldr	r1, [pc, #504]	; (80061a0 <setCommand+0x6ac>)
 8005fa6:	0020      	movs	r0, r4
 8005fa8:	f00b ff9c 	bl	8011ee4 <strncmp>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d100      	bne.n	8005fb2 <setCommand+0x4be>
 8005fb0:	e18f      	b.n	80062d2 <setCommand+0x7de>
		else if(!strncmp((const char*) pcParameterString2,"friday",6))
 8005fb2:	2206      	movs	r2, #6
 8005fb4:	497b      	ldr	r1, [pc, #492]	; (80061a4 <setCommand+0x6b0>)
 8005fb6:	0020      	movs	r0, r4
 8005fb8:	f00b ff94 	bl	8011ee4 <strncmp>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d100      	bne.n	8005fc2 <setCommand+0x4ce>
 8005fc0:	e189      	b.n	80062d6 <setCommand+0x7e2>
		else if(!strncmp((const char*) pcParameterString2,"saturday",8))
 8005fc2:	2208      	movs	r2, #8
 8005fc4:	4978      	ldr	r1, [pc, #480]	; (80061a8 <setCommand+0x6b4>)
 8005fc6:	0020      	movs	r0, r4
 8005fc8:	f00b ff8c 	bl	8011ee4 <strncmp>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	d100      	bne.n	8005fd2 <setCommand+0x4de>
 8005fd0:	e183      	b.n	80062da <setCommand+0x7e6>
		else if(!strncmp((const char*) pcParameterString2,"sunday",6))
 8005fd2:	2206      	movs	r2, #6
 8005fd4:	4975      	ldr	r1, [pc, #468]	; (80061ac <setCommand+0x6b8>)
 8005fd6:	0020      	movs	r0, r4
 8005fd8:	f00b ff84 	bl	8011ee4 <strncmp>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d100      	bne.n	8005fe2 <setCommand+0x4ee>
 8005fe0:	e17d      	b.n	80062de <setCommand+0x7ea>
		if(!strncmp((const char*) pcParameterString3,"january",7)
 8005fe2:	4b66      	ldr	r3, [pc, #408]	; (800617c <setCommand+0x688>)
 8005fe4:	681c      	ldr	r4, [r3, #0]
 8005fe6:	2207      	movs	r2, #7
 8005fe8:	4971      	ldr	r1, [pc, #452]	; (80061b0 <setCommand+0x6bc>)
 8005fea:	0020      	movs	r0, r4
 8005fec:	f00b ff7a 	bl	8011ee4 <strncmp>
		result =BOS_ERR_WrongValue;
 8005ff0:	2668      	movs	r6, #104	; 0x68
		if(!strncmp((const char*) pcParameterString3,"january",7)
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	d101      	bne.n	8005ffa <setCommand+0x506>
		result =BOS_ERR_WrongValue;
 8005ff6:	2668      	movs	r6, #104	; 0x68
 8005ff8:	e783      	b.n	8005f02 <setCommand+0x40e>
		    || !strncmp((const char*) pcParameterString3,"1 ",2))
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	496d      	ldr	r1, [pc, #436]	; (80061b4 <setCommand+0x6c0>)
 8005ffe:	0020      	movs	r0, r4
 8006000:	f00b ff70 	bl	8011ee4 <strncmp>
 8006004:	2800      	cmp	r0, #0
 8006006:	d100      	bne.n	800600a <setCommand+0x516>
 8006008:	e104      	b.n	8006214 <setCommand+0x720>
		else if(!strncmp((const char*) pcParameterString3,"february",8)
 800600a:	2208      	movs	r2, #8
 800600c:	496a      	ldr	r1, [pc, #424]	; (80061b8 <setCommand+0x6c4>)
 800600e:	0020      	movs	r0, r4
 8006010:	f00b ff68 	bl	8011ee4 <strncmp>
 8006014:	2800      	cmp	r0, #0
 8006016:	d100      	bne.n	800601a <setCommand+0x526>
 8006018:	e11f      	b.n	800625a <setCommand+0x766>
		    || !strncmp((const char*) pcParameterString3,"2 ",2))
 800601a:	2202      	movs	r2, #2
 800601c:	4967      	ldr	r1, [pc, #412]	; (80061bc <setCommand+0x6c8>)
 800601e:	0020      	movs	r0, r4
 8006020:	f00b ff60 	bl	8011ee4 <strncmp>
 8006024:	2800      	cmp	r0, #0
 8006026:	d100      	bne.n	800602a <setCommand+0x536>
 8006028:	e119      	b.n	800625e <setCommand+0x76a>
		else if(!strncmp((const char*) pcParameterString3,"march",5)
 800602a:	2205      	movs	r2, #5
 800602c:	4964      	ldr	r1, [pc, #400]	; (80061c0 <setCommand+0x6cc>)
 800602e:	0020      	movs	r0, r4
 8006030:	f00b ff58 	bl	8011ee4 <strncmp>
 8006034:	2800      	cmp	r0, #0
 8006036:	d100      	bne.n	800603a <setCommand+0x546>
 8006038:	e113      	b.n	8006262 <setCommand+0x76e>
		    || !strncmp((const char*) pcParameterString3,"3 ",2))
 800603a:	2202      	movs	r2, #2
 800603c:	4961      	ldr	r1, [pc, #388]	; (80061c4 <setCommand+0x6d0>)
 800603e:	0020      	movs	r0, r4
 8006040:	f00b ff50 	bl	8011ee4 <strncmp>
 8006044:	2800      	cmp	r0, #0
 8006046:	d100      	bne.n	800604a <setCommand+0x556>
 8006048:	e10d      	b.n	8006266 <setCommand+0x772>
		else if(!strncmp((const char*) pcParameterString3,"april",5)
 800604a:	2205      	movs	r2, #5
 800604c:	495e      	ldr	r1, [pc, #376]	; (80061c8 <setCommand+0x6d4>)
 800604e:	0020      	movs	r0, r4
 8006050:	f00b ff48 	bl	8011ee4 <strncmp>
 8006054:	2800      	cmp	r0, #0
 8006056:	d100      	bne.n	800605a <setCommand+0x566>
 8006058:	e107      	b.n	800626a <setCommand+0x776>
		    || !strncmp((const char*) pcParameterString3,"4 ",2))
 800605a:	2202      	movs	r2, #2
 800605c:	495b      	ldr	r1, [pc, #364]	; (80061cc <setCommand+0x6d8>)
 800605e:	0020      	movs	r0, r4
 8006060:	f00b ff40 	bl	8011ee4 <strncmp>
 8006064:	2800      	cmp	r0, #0
 8006066:	d100      	bne.n	800606a <setCommand+0x576>
 8006068:	e101      	b.n	800626e <setCommand+0x77a>
		else if(!strncmp((const char*) pcParameterString3,"may",3)
 800606a:	2203      	movs	r2, #3
 800606c:	4958      	ldr	r1, [pc, #352]	; (80061d0 <setCommand+0x6dc>)
 800606e:	0020      	movs	r0, r4
 8006070:	f00b ff38 	bl	8011ee4 <strncmp>
 8006074:	2800      	cmp	r0, #0
 8006076:	d100      	bne.n	800607a <setCommand+0x586>
 8006078:	e0fb      	b.n	8006272 <setCommand+0x77e>
		    || !strncmp((const char*) pcParameterString3,"5 ",2))
 800607a:	2202      	movs	r2, #2
 800607c:	4955      	ldr	r1, [pc, #340]	; (80061d4 <setCommand+0x6e0>)
 800607e:	0020      	movs	r0, r4
 8006080:	f00b ff30 	bl	8011ee4 <strncmp>
 8006084:	2800      	cmp	r0, #0
 8006086:	d100      	bne.n	800608a <setCommand+0x596>
 8006088:	e0f5      	b.n	8006276 <setCommand+0x782>
		else if(!strncmp((const char*) pcParameterString3,"june",4)
 800608a:	2204      	movs	r2, #4
 800608c:	4952      	ldr	r1, [pc, #328]	; (80061d8 <setCommand+0x6e4>)
 800608e:	0020      	movs	r0, r4
 8006090:	f00b ff28 	bl	8011ee4 <strncmp>
 8006094:	2800      	cmp	r0, #0
 8006096:	d100      	bne.n	800609a <setCommand+0x5a6>
 8006098:	e0ef      	b.n	800627a <setCommand+0x786>
		    || !strncmp((const char*) pcParameterString3,"6 ",2))
 800609a:	2202      	movs	r2, #2
 800609c:	494f      	ldr	r1, [pc, #316]	; (80061dc <setCommand+0x6e8>)
 800609e:	0020      	movs	r0, r4
 80060a0:	f00b ff20 	bl	8011ee4 <strncmp>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d100      	bne.n	80060aa <setCommand+0x5b6>
 80060a8:	e0e9      	b.n	800627e <setCommand+0x78a>
		else if(!strncmp((const char*) pcParameterString3,"july",4)
 80060aa:	2204      	movs	r2, #4
 80060ac:	494c      	ldr	r1, [pc, #304]	; (80061e0 <setCommand+0x6ec>)
 80060ae:	0020      	movs	r0, r4
 80060b0:	f00b ff18 	bl	8011ee4 <strncmp>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	d100      	bne.n	80060ba <setCommand+0x5c6>
 80060b8:	e0e3      	b.n	8006282 <setCommand+0x78e>
		    || !strncmp((const char*) pcParameterString3,"7 ",2))
 80060ba:	2202      	movs	r2, #2
 80060bc:	4949      	ldr	r1, [pc, #292]	; (80061e4 <setCommand+0x6f0>)
 80060be:	0020      	movs	r0, r4
 80060c0:	f00b ff10 	bl	8011ee4 <strncmp>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	d100      	bne.n	80060ca <setCommand+0x5d6>
 80060c8:	e0dd      	b.n	8006286 <setCommand+0x792>
		else if(!strncmp((const char*) pcParameterString3,"august",5)
 80060ca:	2205      	movs	r2, #5
 80060cc:	4946      	ldr	r1, [pc, #280]	; (80061e8 <setCommand+0x6f4>)
 80060ce:	0020      	movs	r0, r4
 80060d0:	f00b ff08 	bl	8011ee4 <strncmp>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d100      	bne.n	80060da <setCommand+0x5e6>
 80060d8:	e0d7      	b.n	800628a <setCommand+0x796>
		    || !strncmp((const char*) pcParameterString3,"8 ",2))
 80060da:	2202      	movs	r2, #2
 80060dc:	4943      	ldr	r1, [pc, #268]	; (80061ec <setCommand+0x6f8>)
 80060de:	0020      	movs	r0, r4
 80060e0:	f00b ff00 	bl	8011ee4 <strncmp>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d100      	bne.n	80060ea <setCommand+0x5f6>
 80060e8:	e0d1      	b.n	800628e <setCommand+0x79a>
		else if(!strncmp((const char*) pcParameterString3,"september",9)
 80060ea:	2209      	movs	r2, #9
 80060ec:	4940      	ldr	r1, [pc, #256]	; (80061f0 <setCommand+0x6fc>)
 80060ee:	0020      	movs	r0, r4
 80060f0:	f00b fef8 	bl	8011ee4 <strncmp>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	d100      	bne.n	80060fa <setCommand+0x606>
 80060f8:	e0cb      	b.n	8006292 <setCommand+0x79e>
		    || !strncmp((const char*) pcParameterString3,"9 ",2))
 80060fa:	2202      	movs	r2, #2
 80060fc:	493d      	ldr	r1, [pc, #244]	; (80061f4 <setCommand+0x700>)
 80060fe:	0020      	movs	r0, r4
 8006100:	f00b fef0 	bl	8011ee4 <strncmp>
 8006104:	2800      	cmp	r0, #0
 8006106:	d100      	bne.n	800610a <setCommand+0x616>
 8006108:	e0c5      	b.n	8006296 <setCommand+0x7a2>
		else if(!strncmp((const char*) pcParameterString3,"october",7)
 800610a:	2207      	movs	r2, #7
 800610c:	493a      	ldr	r1, [pc, #232]	; (80061f8 <setCommand+0x704>)
 800610e:	0020      	movs	r0, r4
 8006110:	f00b fee8 	bl	8011ee4 <strncmp>
 8006114:	2800      	cmp	r0, #0
 8006116:	d100      	bne.n	800611a <setCommand+0x626>
 8006118:	e0bf      	b.n	800629a <setCommand+0x7a6>
		    || !strncmp((const char*) pcParameterString3,"10",2))
 800611a:	2202      	movs	r2, #2
 800611c:	4937      	ldr	r1, [pc, #220]	; (80061fc <setCommand+0x708>)
 800611e:	0020      	movs	r0, r4
 8006120:	f00b fee0 	bl	8011ee4 <strncmp>
 8006124:	2800      	cmp	r0, #0
 8006126:	d100      	bne.n	800612a <setCommand+0x636>
 8006128:	e0b9      	b.n	800629e <setCommand+0x7aa>
		else if(!strncmp((const char*) pcParameterString3,"november",8)
 800612a:	2208      	movs	r2, #8
 800612c:	4934      	ldr	r1, [pc, #208]	; (8006200 <setCommand+0x70c>)
 800612e:	0020      	movs	r0, r4
 8006130:	f00b fed8 	bl	8011ee4 <strncmp>
 8006134:	2800      	cmp	r0, #0
 8006136:	d100      	bne.n	800613a <setCommand+0x646>
 8006138:	e0b3      	b.n	80062a2 <setCommand+0x7ae>
		    || !strncmp((const char*) pcParameterString3,"11",2))
 800613a:	2202      	movs	r2, #2
 800613c:	4931      	ldr	r1, [pc, #196]	; (8006204 <setCommand+0x710>)
 800613e:	0020      	movs	r0, r4
 8006140:	f00b fed0 	bl	8011ee4 <strncmp>
 8006144:	2800      	cmp	r0, #0
 8006146:	d100      	bne.n	800614a <setCommand+0x656>
 8006148:	e0ad      	b.n	80062a6 <setCommand+0x7b2>
		else if(!strncmp((const char*) pcParameterString3,"december",8)
 800614a:	2208      	movs	r2, #8
 800614c:	492e      	ldr	r1, [pc, #184]	; (8006208 <setCommand+0x714>)
 800614e:	0020      	movs	r0, r4
 8006150:	f00b fec8 	bl	8011ee4 <strncmp>
 8006154:	2800      	cmp	r0, #0
 8006156:	d100      	bne.n	800615a <setCommand+0x666>
 8006158:	e0a7      	b.n	80062aa <setCommand+0x7b6>
		    || !strncmp((const char*) pcParameterString3,"12",2))
 800615a:	2202      	movs	r2, #2
 800615c:	492b      	ldr	r1, [pc, #172]	; (800620c <setCommand+0x718>)
 800615e:	0020      	movs	r0, r4
 8006160:	f00b fec0 	bl	8011ee4 <strncmp>
		temp82 =DECEMBER;
 8006164:	240c      	movs	r4, #12
		    || !strncmp((const char*) pcParameterString3,"12",2))
 8006166:	2800      	cmp	r0, #0
 8006168:	d055      	beq.n	8006216 <setCommand+0x722>
	strcpy((char*) pcWriteBuffer,(char*) pcMessageWrongValue);
 800616a:	220f      	movs	r2, #15
 800616c:	4928      	ldr	r1, [pc, #160]	; (8006210 <setCommand+0x71c>)
 800616e:	0028      	movs	r0, r5
 8006170:	f00b fc71 	bl	8011a56 <memcpy>
 8006174:	e6cb      	b.n	8005f0e <setCommand+0x41a>
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	2000129c 	.word	0x2000129c
 800617c:	200012a4 	.word	0x200012a4
 8006180:	200012a8 	.word	0x200012a8
 8006184:	200012ac 	.word	0x200012ac
 8006188:	08017790 	.word	0x08017790
 800618c:	08017794 	.word	0x08017794
 8006190:	20006988 	.word	0x20006988
 8006194:	080177a0 	.word	0x080177a0
 8006198:	080177a8 	.word	0x080177a8
 800619c:	080177b0 	.word	0x080177b0
 80061a0:	080177bc 	.word	0x080177bc
 80061a4:	080177c8 	.word	0x080177c8
 80061a8:	080177d0 	.word	0x080177d0
 80061ac:	080177dc 	.word	0x080177dc
 80061b0:	08017878 	.word	0x08017878
 80061b4:	080177e4 	.word	0x080177e4
 80061b8:	080177e8 	.word	0x080177e8
 80061bc:	080177f4 	.word	0x080177f4
 80061c0:	080177f8 	.word	0x080177f8
 80061c4:	08017800 	.word	0x08017800
 80061c8:	08017804 	.word	0x08017804
 80061cc:	0801780c 	.word	0x0801780c
 80061d0:	08017810 	.word	0x08017810
 80061d4:	08017814 	.word	0x08017814
 80061d8:	08017818 	.word	0x08017818
 80061dc:	08017820 	.word	0x08017820
 80061e0:	08017824 	.word	0x08017824
 80061e4:	0801782c 	.word	0x0801782c
 80061e8:	08017830 	.word	0x08017830
 80061ec:	08017838 	.word	0x08017838
 80061f0:	0801783c 	.word	0x0801783c
 80061f4:	08017848 	.word	0x08017848
 80061f8:	0801784c 	.word	0x0801784c
 80061fc:	08017854 	.word	0x08017854
 8006200:	08017858 	.word	0x08017858
 8006204:	08017864 	.word	0x08017864
 8006208:	08017868 	.word	0x08017868
 800620c:	08017874 	.word	0x08017874
 8006210:	08016f50 	.word	0x08016f50
		temp82 =JANUARY;
 8006214:	2401      	movs	r4, #1
		if(result == BOS_OK) {
 8006216:	2e00      	cmp	r6, #0
 8006218:	d000      	beq.n	800621c <setCommand+0x728>
 800621a:	e672      	b.n	8005f02 <setCommand+0x40e>
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 800621c:	4643      	mov	r3, r8
 800621e:	3b01      	subs	r3, #1
 8006220:	2b1e      	cmp	r3, #30
 8006222:	d8a2      	bhi.n	800616a <setCommand+0x676>
 8006224:	4b2f      	ldr	r3, [pc, #188]	; (80062e4 <setCommand+0x7f0>)
 8006226:	444b      	add	r3, r9
 8006228:	b29b      	uxth	r3, r3
 800622a:	2b64      	cmp	r3, #100	; 0x64
 800622c:	d89d      	bhi.n	800616a <setCommand+0x676>
				GetTimeDate();
 800622e:	f005 ff1d 	bl	800c06c <GetTimeDate>
				    BOS.time.ampm,BOS.daylightsaving);
 8006232:	4b2d      	ldr	r3, [pc, #180]	; (80062e8 <setCommand+0x7f4>)
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,
 8006234:	220c      	movs	r2, #12
 8006236:	569a      	ldrsb	r2, [r3, r2]
 8006238:	9204      	str	r2, [sp, #16]
 800623a:	7cda      	ldrb	r2, [r3, #19]
 800623c:	9203      	str	r2, [sp, #12]
 800623e:	7c9a      	ldrb	r2, [r3, #18]
 8006240:	9202      	str	r2, [sp, #8]
 8006242:	7c5a      	ldrb	r2, [r3, #17]
 8006244:	9201      	str	r2, [sp, #4]
 8006246:	7c1b      	ldrb	r3, [r3, #16]
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	003b      	movs	r3, r7
 800624c:	464a      	mov	r2, r9
 800624e:	4641      	mov	r1, r8
 8006250:	0020      	movs	r0, r4
 8006252:	f005 feb1 	bl	800bfb8 <BOS_CalendarConfig>
 8006256:	0006      	movs	r6, r0
 8006258:	e650      	b.n	8005efc <setCommand+0x408>
		temp82 =FEBRUARY;
 800625a:	2402      	movs	r4, #2
 800625c:	e7db      	b.n	8006216 <setCommand+0x722>
 800625e:	2402      	movs	r4, #2
 8006260:	e7d9      	b.n	8006216 <setCommand+0x722>
		temp82 =MARCH;
 8006262:	2403      	movs	r4, #3
 8006264:	e7d7      	b.n	8006216 <setCommand+0x722>
 8006266:	2403      	movs	r4, #3
 8006268:	e7d5      	b.n	8006216 <setCommand+0x722>
		temp82 =APRIL;
 800626a:	2404      	movs	r4, #4
 800626c:	e7d3      	b.n	8006216 <setCommand+0x722>
 800626e:	2404      	movs	r4, #4
 8006270:	e7d1      	b.n	8006216 <setCommand+0x722>
		temp82 =MAY;
 8006272:	2405      	movs	r4, #5
 8006274:	e7cf      	b.n	8006216 <setCommand+0x722>
 8006276:	2405      	movs	r4, #5
 8006278:	e7cd      	b.n	8006216 <setCommand+0x722>
		temp82 =JUNE;
 800627a:	2406      	movs	r4, #6
 800627c:	e7cb      	b.n	8006216 <setCommand+0x722>
 800627e:	2406      	movs	r4, #6
 8006280:	e7c9      	b.n	8006216 <setCommand+0x722>
		temp82 =JULY;
 8006282:	2407      	movs	r4, #7
 8006284:	e7c7      	b.n	8006216 <setCommand+0x722>
 8006286:	2407      	movs	r4, #7
 8006288:	e7c5      	b.n	8006216 <setCommand+0x722>
		temp82 =AUGUST;
 800628a:	2408      	movs	r4, #8
 800628c:	e7c3      	b.n	8006216 <setCommand+0x722>
 800628e:	2408      	movs	r4, #8
 8006290:	e7c1      	b.n	8006216 <setCommand+0x722>
		temp82 =SEPTEMBER;
 8006292:	2409      	movs	r4, #9
 8006294:	e7bf      	b.n	8006216 <setCommand+0x722>
 8006296:	2409      	movs	r4, #9
 8006298:	e7bd      	b.n	8006216 <setCommand+0x722>
		temp82 =OCTOBER;
 800629a:	240a      	movs	r4, #10
 800629c:	e7bb      	b.n	8006216 <setCommand+0x722>
 800629e:	240a      	movs	r4, #10
 80062a0:	e7b9      	b.n	8006216 <setCommand+0x722>
		temp82 =NOVEMBER;
 80062a2:	240b      	movs	r4, #11
 80062a4:	e7b7      	b.n	8006216 <setCommand+0x722>
 80062a6:	240b      	movs	r4, #11
 80062a8:	e7b5      	b.n	8006216 <setCommand+0x722>
		temp82 =DECEMBER;
 80062aa:	240c      	movs	r4, #12
 80062ac:	e7b3      	b.n	8006216 <setCommand+0x722>
		temp81 =MONDAY;
 80062ae:	2701      	movs	r7, #1
		if(!strncmp((const char*) pcParameterString3,"january",7)
 80062b0:	4b0e      	ldr	r3, [pc, #56]	; (80062ec <setCommand+0x7f8>)
 80062b2:	681c      	ldr	r4, [r3, #0]
 80062b4:	2207      	movs	r2, #7
 80062b6:	490e      	ldr	r1, [pc, #56]	; (80062f0 <setCommand+0x7fc>)
 80062b8:	0020      	movs	r0, r4
 80062ba:	f00b fe13 	bl	8011ee4 <strncmp>
 80062be:	2600      	movs	r6, #0
 80062c0:	2800      	cmp	r0, #0
 80062c2:	d000      	beq.n	80062c6 <setCommand+0x7d2>
 80062c4:	e699      	b.n	8005ffa <setCommand+0x506>
		temp82 =JANUARY;
 80062c6:	2401      	movs	r4, #1
 80062c8:	e7a8      	b.n	800621c <setCommand+0x728>
		temp81 =TUESDAY;
 80062ca:	2702      	movs	r7, #2
 80062cc:	e7f0      	b.n	80062b0 <setCommand+0x7bc>
		temp81 =WEDNESDAY;
 80062ce:	2703      	movs	r7, #3
 80062d0:	e7ee      	b.n	80062b0 <setCommand+0x7bc>
		temp81 =THURSDAY;
 80062d2:	2704      	movs	r7, #4
 80062d4:	e7ec      	b.n	80062b0 <setCommand+0x7bc>
		temp81 =FRIDAY;
 80062d6:	2705      	movs	r7, #5
 80062d8:	e7ea      	b.n	80062b0 <setCommand+0x7bc>
		temp81 =SATURDAY;
 80062da:	2706      	movs	r7, #6
 80062dc:	e7e8      	b.n	80062b0 <setCommand+0x7bc>
		temp81 =SUNDAY;
 80062de:	2707      	movs	r7, #7
 80062e0:	e7e6      	b.n	80062b0 <setCommand+0x7bc>
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	fffff830 	.word	0xfffff830
 80062e8:	20006988 	.word	0x20006988
 80062ec:	200012a4 	.word	0x200012a4
 80062f0:	08017878 	.word	0x08017878

080062f4 <removebuttonCommand>:
    size_t xWriteBufferLen, const int8_t *pcCommandString){
 80062f4:	b530      	push	{r4, r5, lr}
 80062f6:	b083      	sub	sp, #12
 80062f8:	0005      	movs	r5, r0
 80062fa:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006300:	2d00      	cmp	r5, #0
 8006302:	d101      	bne.n	8006308 <removebuttonCommand+0x14>
 8006304:	b672      	cpsid	i
 8006306:	e7fe      	b.n	8006306 <removebuttonCommand+0x12>
	pcParameterString1 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,1,
 8006308:	aa01      	add	r2, sp, #4
 800630a:	2101      	movs	r1, #1
 800630c:	f006 fb98 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p') {
 8006310:	2300      	movs	r3, #0
 8006312:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006314:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p') {
 8006316:	2b70      	cmp	r3, #112	; 0x70
 8006318:	d007      	beq.n	800632a <removebuttonCommand+0x36>
	result =RemovePortButton(port);
 800631a:	0020      	movs	r0, r4
 800631c:	f001 fb8e 	bl	8007a3c <RemovePortButton>
	if(result == BOS_OK) {
 8006320:	2800      	cmp	r0, #0
 8006322:	d007      	beq.n	8006334 <removebuttonCommand+0x40>
}
 8006324:	2000      	movs	r0, #0
 8006326:	b003      	add	sp, #12
 8006328:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t) atol((char*) pcParameterString1 + 1);
 800632a:	3001      	adds	r0, #1
 800632c:	f00b f909 	bl	8011542 <atol>
 8006330:	b2c4      	uxtb	r4, r0
 8006332:	e7f2      	b.n	800631a <removebuttonCommand+0x26>
		sprintf((char*) pcWriteBuffer,(char*) pcMessage,port,port);
 8006334:	0023      	movs	r3, r4
 8006336:	0022      	movs	r2, r4
 8006338:	4902      	ldr	r1, [pc, #8]	; (8006344 <removebuttonCommand+0x50>)
 800633a:	0028      	movs	r0, r5
 800633c:	f00b fd8e 	bl	8011e5c <sprintf>
 8006340:	e7f0      	b.n	8006324 <removebuttonCommand+0x30>
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	08017534 	.word	0x08017534

08006348 <addbuttonCommand>:
    size_t xWriteBufferLen, const int8_t *pcCommandString){
 8006348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800634a:	b087      	sub	sp, #28
 800634c:	0006      	movs	r6, r0
 800634e:	9203      	str	r2, [sp, #12]
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006350:	2300      	movs	r3, #0
 8006352:	9305      	str	r3, [sp, #20]
 8006354:	9304      	str	r3, [sp, #16]
	configASSERT(pcWriteBuffer);
 8006356:	2800      	cmp	r0, #0
 8006358:	d101      	bne.n	800635e <addbuttonCommand+0x16>
 800635a:	b672      	cpsid	i
 800635c:	e7fe      	b.n	800635c <addbuttonCommand+0x14>
	pcParameterString1 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,1,
 800635e:	aa05      	add	r2, sp, #20
 8006360:	2101      	movs	r1, #1
 8006362:	9803      	ldr	r0, [sp, #12]
 8006364:	f006 fb6c 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 8006368:	0004      	movs	r4, r0
 800636a:	4b23      	ldr	r3, [pc, #140]	; (80063f8 <addbuttonCommand+0xb0>)
 800636c:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char*) pcParameterString1,"momentary-no",
 800636e:	9d05      	ldr	r5, [sp, #20]
 8006370:	002a      	movs	r2, r5
 8006372:	4922      	ldr	r1, [pc, #136]	; (80063fc <addbuttonCommand+0xb4>)
 8006374:	f00b fdb6 	bl	8011ee4 <strncmp>
		type =MOMENTARY_NO;
 8006378:	2701      	movs	r7, #1
	if(!strncmp((const char*) pcParameterString1,"momentary-no",
 800637a:	2800      	cmp	r0, #0
 800637c:	d017      	beq.n	80063ae <addbuttonCommand+0x66>
	else if(!strncmp((const char*) pcParameterString1,"momentary-nc",
 800637e:	002a      	movs	r2, r5
 8006380:	491f      	ldr	r1, [pc, #124]	; (8006400 <addbuttonCommand+0xb8>)
 8006382:	0020      	movs	r0, r4
 8006384:	f00b fdae 	bl	8011ee4 <strncmp>
		type =MOMENTARY_NC;
 8006388:	3701      	adds	r7, #1
	else if(!strncmp((const char*) pcParameterString1,"momentary-nc",
 800638a:	2800      	cmp	r0, #0
 800638c:	d00f      	beq.n	80063ae <addbuttonCommand+0x66>
	else if(!strncmp((const char*) pcParameterString1,"onoff-no",
 800638e:	002a      	movs	r2, r5
 8006390:	491c      	ldr	r1, [pc, #112]	; (8006404 <addbuttonCommand+0xbc>)
 8006392:	0020      	movs	r0, r4
 8006394:	f00b fda6 	bl	8011ee4 <strncmp>
		type =ONOFF_NO;
 8006398:	3701      	adds	r7, #1
	else if(!strncmp((const char*) pcParameterString1,"onoff-no",
 800639a:	2800      	cmp	r0, #0
 800639c:	d007      	beq.n	80063ae <addbuttonCommand+0x66>
	else if(!strncmp((const char*) pcParameterString1,"onoff-nc",
 800639e:	002a      	movs	r2, r5
 80063a0:	4919      	ldr	r1, [pc, #100]	; (8006408 <addbuttonCommand+0xc0>)
 80063a2:	0020      	movs	r0, r4
 80063a4:	f00b fd9e 	bl	8011ee4 <strncmp>
		type =ONOFF_NC;
 80063a8:	4243      	negs	r3, r0
 80063aa:	4158      	adcs	r0, r3
 80063ac:	0087      	lsls	r7, r0, #2
	pcParameterString2 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,2,
 80063ae:	aa04      	add	r2, sp, #16
 80063b0:	2102      	movs	r1, #2
 80063b2:	9803      	ldr	r0, [sp, #12]
 80063b4:	f006 fb44 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p') {
 80063b8:	2300      	movs	r3, #0
 80063ba:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 80063bc:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p') {
 80063be:	2b70      	cmp	r3, #112	; 0x70
 80063c0:	d008      	beq.n	80063d4 <addbuttonCommand+0x8c>
	result =AddPortButton(type,port);
 80063c2:	0021      	movs	r1, r4
 80063c4:	0038      	movs	r0, r7
 80063c6:	f001 faa7 	bl	8007918 <AddPortButton>
	if(result == BOS_OK) {
 80063ca:	2800      	cmp	r0, #0
 80063cc:	d007      	beq.n	80063de <addbuttonCommand+0x96>
}
 80063ce:	2000      	movs	r0, #0
 80063d0:	b007      	add	sp, #28
 80063d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t) atol((char*) pcParameterString2 + 1);
 80063d4:	3001      	adds	r0, #1
 80063d6:	f00b f8b4 	bl	8011542 <atol>
 80063da:	b2c4      	uxtb	r4, r0
 80063dc:	e7f1      	b.n	80063c2 <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] =0;// Get rid of the remaining parameters
 80063de:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <addbuttonCommand+0xb0>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	2300      	movs	r3, #0
 80063e4:	9905      	ldr	r1, [sp, #20]
 80063e6:	5453      	strb	r3, [r2, r1]
		sprintf((char*) pcWriteBuffer,(char*) pcMessage,pcParameterString1,
 80063e8:	9400      	str	r4, [sp, #0]
 80063ea:	0023      	movs	r3, r4
 80063ec:	4907      	ldr	r1, [pc, #28]	; (800640c <addbuttonCommand+0xc4>)
 80063ee:	0030      	movs	r0, r6
 80063f0:	f00b fd34 	bl	8011e5c <sprintf>
 80063f4:	e7eb      	b.n	80063ce <addbuttonCommand+0x86>
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	2000128c 	.word	0x2000128c
 80063fc:	08016df4 	.word	0x08016df4
 8006400:	08016e04 	.word	0x08016e04
 8006404:	08016e14 	.word	0x08016e14
 8006408:	08016e20 	.word	0x08016e20
 800640c:	08016e2c 	.word	0x08016e2c

08006410 <scastCommand>:
    const int8_t *pcCommandString){
 8006410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006412:	46de      	mov	lr, fp
 8006414:	4657      	mov	r7, sl
 8006416:	b580      	push	{r7, lr}
 8006418:	b09b      	sub	sp, #108	; 0x6c
 800641a:	0005      	movs	r5, r0
 800641c:	9009      	str	r0, [sp, #36]	; 0x24
 800641e:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0,
 8006420:	2300      	movs	r3, #0
 8006422:	9319      	str	r3, [sp, #100]	; 0x64
 8006424:	9318      	str	r3, [sp, #96]	; 0x60
	    xParameterStringLength3 =0;
 8006426:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0,
 8006428:	9316      	str	r3, [sp, #88]	; 0x58
 800642a:	9315      	str	r3, [sp, #84]	; 0x54
	    xParameterStringLength6 =0;
 800642c:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 =0;
 800642e:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0},
 8006430:	220a      	movs	r2, #10
 8006432:	2100      	movs	r1, #0
 8006434:	a810      	add	r0, sp, #64	; 0x40
 8006436:	f00b fb17 	bl	8011a68 <memset>
 800643a:	220a      	movs	r2, #10
 800643c:	2100      	movs	r1, #0
 800643e:	a80d      	add	r0, sp, #52	; 0x34
 8006440:	f00b fb12 	bl	8011a68 <memset>
	    par3[MaxLengthOfAlias + 1] ={0};
 8006444:	220a      	movs	r2, #10
 8006446:	2100      	movs	r1, #0
 8006448:	a80a      	add	r0, sp, #40	; 0x28
 800644a:	f00b fb0d 	bl	8011a68 <memset>
	configASSERT(pcWriteBuffer);
 800644e:	2d00      	cmp	r5, #0
 8006450:	d101      	bne.n	8006456 <scastCommand+0x46>
 8006452:	b672      	cpsid	i
 8006454:	e7fe      	b.n	8006454 <scastCommand+0x44>
	pcParameterString1 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,1,
 8006456:	aa19      	add	r2, sp, #100	; 0x64
 8006458:	2101      	movs	r1, #1
 800645a:	0020      	movs	r0, r4
 800645c:	f006 faf0 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P') {
 8006460:	2300      	movs	r3, #0
 8006462:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006464:	2200      	movs	r2, #0
 8006466:	9208      	str	r2, [sp, #32]
	if(pcParameterString1[0] == 'P') {
 8006468:	2b50      	cmp	r3, #80	; 0x50
 800646a:	d100      	bne.n	800646e <scastCommand+0x5e>
 800646c:	e06d      	b.n	800654a <scastCommand+0x13a>
	pcParameterString2 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,2,
 800646e:	aa18      	add	r2, sp, #96	; 0x60
 8006470:	2102      	movs	r1, #2
 8006472:	0020      	movs	r0, r4
 8006474:	f006 fae4 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 8006478:	0001      	movs	r1, r0
	strncpy(par1,(char*) pcParameterString2,xParameterStringLength2);
 800647a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800647c:	a810      	add	r0, sp, #64	; 0x40
 800647e:	f00b fd42 	bl	8011f06 <strncpy>
	srcM =(uint8_t) GetID(par1);
 8006482:	a810      	add	r0, sp, #64	; 0x40
 8006484:	f7fd fb1a 	bl	8003abc <GetID>
 8006488:	b2c3      	uxtb	r3, r0
 800648a:	469a      	mov	sl, r3
	pcParameterString3 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,3,
 800648c:	aa17      	add	r2, sp, #92	; 0x5c
 800648e:	2103      	movs	r1, #3
 8006490:	0020      	movs	r0, r4
 8006492:	f006 fad5 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p') {
 8006496:	2300      	movs	r3, #0
 8006498:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 800649a:	2700      	movs	r7, #0
	if(pcParameterString3[0] == 'p') {
 800649c:	2b70      	cmp	r3, #112	; 0x70
 800649e:	d05a      	beq.n	8006556 <scastCommand+0x146>
	pcParameterString4 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,4,
 80064a0:	aa16      	add	r2, sp, #88	; 0x58
 80064a2:	2104      	movs	r1, #4
 80064a4:	0020      	movs	r0, r4
 80064a6:	f006 facb 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 80064aa:	0001      	movs	r1, r0
	strncpy(par2,(char*) pcParameterString4,xParameterStringLength4);
 80064ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80064ae:	a80d      	add	r0, sp, #52	; 0x34
 80064b0:	f00b fd29 	bl	8011f06 <strncpy>
	dstM =(uint8_t) GetID(par2);
 80064b4:	a80d      	add	r0, sp, #52	; 0x34
 80064b6:	f7fd fb01 	bl	8003abc <GetID>
 80064ba:	b2c3      	uxtb	r3, r0
 80064bc:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,5,
 80064be:	aa15      	add	r2, sp, #84	; 0x54
 80064c0:	2105      	movs	r1, #5
 80064c2:	0020      	movs	r0, r4
 80064c4:	f006 fabc 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char*) pcParameterString5,"forward",
 80064c8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80064ca:	0032      	movs	r2, r6
 80064cc:	492b      	ldr	r1, [pc, #172]	; (800657c <scastCommand+0x16c>)
 80064ce:	9007      	str	r0, [sp, #28]
 80064d0:	f00b fd08 	bl	8011ee4 <strncmp>
	direction =FORWARD;
 80064d4:	2500      	movs	r5, #0
	if(!strncmp((const char*) pcParameterString5,"forward",
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d00f      	beq.n	80064fa <scastCommand+0xea>
	else if(!strncmp((const char*) pcParameterString5,"backward",
 80064da:	0032      	movs	r2, r6
 80064dc:	4928      	ldr	r1, [pc, #160]	; (8006580 <scastCommand+0x170>)
 80064de:	9807      	ldr	r0, [sp, #28]
 80064e0:	f00b fd00 	bl	8011ee4 <strncmp>
	direction =BACKWARD;
 80064e4:	3501      	adds	r5, #1
	else if(!strncmp((const char*) pcParameterString5,"backward",
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d007      	beq.n	80064fa <scastCommand+0xea>
	else if(!strncmp((const char*) pcParameterString5,"bidirectional",
 80064ea:	0032      	movs	r2, r6
 80064ec:	4925      	ldr	r1, [pc, #148]	; (8006584 <scastCommand+0x174>)
 80064ee:	9807      	ldr	r0, [sp, #28]
 80064f0:	f00b fcf8 	bl	8011ee4 <strncmp>
	direction =BIDIRECTIONAL;
 80064f4:	4243      	negs	r3, r0
 80064f6:	4158      	adcs	r0, r3
 80064f8:	0045      	lsls	r5, r0, #1
	strncpy(par3,(char*) pcParameterString5,xParameterStringLength5);
 80064fa:	0032      	movs	r2, r6
 80064fc:	9907      	ldr	r1, [sp, #28]
 80064fe:	a80a      	add	r0, sp, #40	; 0x28
 8006500:	f00b fd01 	bl	8011f06 <strncpy>
	pcParameterString6 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,6,
 8006504:	aa14      	add	r2, sp, #80	; 0x50
 8006506:	2106      	movs	r1, #6
 8006508:	0020      	movs	r0, r4
 800650a:	f006 fa99 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	count =(uint32_t) atol((char*) pcParameterString6);
 800650e:	f00b f818 	bl	8011542 <atol>
 8006512:	0006      	movs	r6, r0
	pcParameterString7 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,7,
 8006514:	aa13      	add	r2, sp, #76	; 0x4c
 8006516:	2107      	movs	r1, #7
 8006518:	0020      	movs	r0, r4
 800651a:	f006 fa91 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t) atol((char*) pcParameterString7);
 800651e:	f00b f810 	bl	8011542 <atol>
 8006522:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,
 8006524:	2300      	movs	r3, #0
 8006526:	9303      	str	r3, [sp, #12]
 8006528:	9002      	str	r0, [sp, #8]
 800652a:	9601      	str	r6, [sp, #4]
 800652c:	9500      	str	r5, [sp, #0]
 800652e:	465b      	mov	r3, fp
 8006530:	003a      	movs	r2, r7
 8006532:	4651      	mov	r1, sl
 8006534:	9808      	ldr	r0, [sp, #32]
 8006536:	f002 fa07 	bl	8008948 <StartScastDMAStream>
	if(result == BOS_OK) {
 800653a:	2800      	cmp	r0, #0
 800653c:	d010      	beq.n	8006560 <scastCommand+0x150>
}
 800653e:	2000      	movs	r0, #0
 8006540:	b01b      	add	sp, #108	; 0x6c
 8006542:	bc0c      	pop	{r2, r3}
 8006544:	4692      	mov	sl, r2
 8006546:	469b      	mov	fp, r3
 8006548:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP =(uint8_t) atol((char*) pcParameterString1 + 1);
 800654a:	3001      	adds	r0, #1
 800654c:	f00a fff9 	bl	8011542 <atol>
 8006550:	b2c3      	uxtb	r3, r0
 8006552:	9308      	str	r3, [sp, #32]
 8006554:	e78b      	b.n	800646e <scastCommand+0x5e>
		dstP =(uint8_t) atol((char*) pcParameterString3 + 1);
 8006556:	3001      	adds	r0, #1
 8006558:	f00a fff3 	bl	8011542 <atol>
 800655c:	b2c7      	uxtb	r7, r0
 800655e:	e79f      	b.n	80064a0 <scastCommand+0x90>
		sprintf((char*) pcWriteBuffer,(char*) pcMessage,par3,srcP,par1,
 8006560:	9404      	str	r4, [sp, #16]
 8006562:	9603      	str	r6, [sp, #12]
 8006564:	ab0d      	add	r3, sp, #52	; 0x34
 8006566:	9302      	str	r3, [sp, #8]
 8006568:	9701      	str	r7, [sp, #4]
 800656a:	ab10      	add	r3, sp, #64	; 0x40
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	9b08      	ldr	r3, [sp, #32]
 8006570:	aa0a      	add	r2, sp, #40	; 0x28
 8006572:	4905      	ldr	r1, [pc, #20]	; (8006588 <scastCommand+0x178>)
 8006574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006576:	f00b fc71 	bl	8011e5c <sprintf>
 800657a:	e7e0      	b.n	800653e <scastCommand+0x12e>
 800657c:	0801757c 	.word	0x0801757c
 8006580:	08017584 	.word	0x08017584
 8006584:	08017590 	.word	0x08017590
 8006588:	080175a0 	.word	0x080175a0

0800658c <infoCommand>:
    const int8_t *pcCommandString){
 800658c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800658e:	b083      	sub	sp, #12
 8006590:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006592:	d039      	beq.n	8006608 <infoCommand+0x7c>
	if(N > 1)
 8006594:	4b26      	ldr	r3, [pc, #152]	; (8006630 <infoCommand+0xa4>)
 8006596:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8006598:	2500      	movs	r5, #0
	if(N > 1)
 800659a:	2b01      	cmp	r3, #1
 800659c:	d902      	bls.n	80065a4 <infoCommand+0x18>
	result =ReadPortsDir();
 800659e:	f7fd fbe1 	bl	8003d64 <ReadPortsDir>
 80065a2:	0005      	movs	r5, r0
	sprintf((char*) pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 80065a4:	4b22      	ldr	r3, [pc, #136]	; (8006630 <infoCommand+0xa4>)
 80065a6:	781a      	ldrb	r2, [r3, #0]
 80065a8:	4922      	ldr	r1, [pc, #136]	; (8006634 <infoCommand+0xa8>)
 80065aa:	0020      	movs	r0, r4
 80065ac:	f00b fc56 	bl	8011e5c <sprintf>
	writePxMutex(PcPort,(char*) pcWriteBuffer,strlen((char*) pcWriteBuffer),
 80065b0:	0020      	movs	r0, r4
 80065b2:	f7f9 fdb1 	bl	8000118 <strlen>
 80065b6:	b282      	uxth	r2, r0
 80065b8:	4e1f      	ldr	r6, [pc, #124]	; (8006638 <infoCommand+0xac>)
 80065ba:	7830      	ldrb	r0, [r6, #0]
 80065bc:	2701      	movs	r7, #1
 80065be:	427f      	negs	r7, r7
 80065c0:	9700      	str	r7, [sp, #0]
 80065c2:	2332      	movs	r3, #50	; 0x32
 80065c4:	0021      	movs	r1, r4
 80065c6:	f005 fff5 	bl	800c5b4 <writePxMutex>
	sprintf((char*) pcWriteBuffer,"\n\rArray topology:\n");
 80065ca:	2213      	movs	r2, #19
 80065cc:	491b      	ldr	r1, [pc, #108]	; (800663c <infoCommand+0xb0>)
 80065ce:	0020      	movs	r0, r4
 80065d0:	f00b fa41 	bl	8011a56 <memcpy>
	writePxMutex(PcPort,(char*) pcWriteBuffer,strlen((char*) pcWriteBuffer),
 80065d4:	0020      	movs	r0, r4
 80065d6:	f7f9 fd9f 	bl	8000118 <strlen>
 80065da:	b282      	uxth	r2, r0
 80065dc:	7830      	ldrb	r0, [r6, #0]
 80065de:	9700      	str	r7, [sp, #0]
 80065e0:	2332      	movs	r3, #50	; 0x32
 80065e2:	0021      	movs	r1, r4
 80065e4:	f005 ffe6 	bl	800c5b4 <writePxMutex>
	DisplayTopology(PcPort);
 80065e8:	7830      	ldrb	r0, [r6, #0]
 80065ea:	f7fc ffc3 	bl	8003574 <DisplayTopology>
	DisplayPortsDir(PcPort);
 80065ee:	7830      	ldrb	r0, [r6, #0]
 80065f0:	f7fd f890 	bl	8003714 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse) {
 80065f4:	2d02      	cmp	r5, #2
 80065f6:	d009      	beq.n	800660c <infoCommand+0x80>
	sprintf((char*) pcWriteBuffer," ");
 80065f8:	2202      	movs	r2, #2
 80065fa:	4911      	ldr	r1, [pc, #68]	; (8006640 <infoCommand+0xb4>)
 80065fc:	0020      	movs	r0, r4
 80065fe:	f00b fa2a 	bl	8011a56 <memcpy>
}
 8006602:	2000      	movs	r0, #0
 8006604:	b003      	add	sp, #12
 8006606:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006608:	b672      	cpsid	i
 800660a:	e7fe      	b.n	800660a <infoCommand+0x7e>
		sprintf((char*) pcWriteBuffer,
 800660c:	2244      	movs	r2, #68	; 0x44
 800660e:	490d      	ldr	r1, [pc, #52]	; (8006644 <infoCommand+0xb8>)
 8006610:	0020      	movs	r0, r4
 8006612:	f00b fa20 	bl	8011a56 <memcpy>
		    strlen((char*) pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006616:	0020      	movs	r0, r4
 8006618:	f7f9 fd7e 	bl	8000118 <strlen>
		writePxMutex(PcPort,(char*) pcWriteBuffer,
 800661c:	b282      	uxth	r2, r0
 800661e:	4b06      	ldr	r3, [pc, #24]	; (8006638 <infoCommand+0xac>)
 8006620:	7818      	ldrb	r0, [r3, #0]
 8006622:	003b      	movs	r3, r7
 8006624:	9700      	str	r7, [sp, #0]
 8006626:	3333      	adds	r3, #51	; 0x33
 8006628:	0021      	movs	r1, r4
 800662a:	f005 ffc3 	bl	800c5b4 <writePxMutex>
 800662e:	e7e3      	b.n	80065f8 <infoCommand+0x6c>
 8006630:	2000001c 	.word	0x2000001c
 8006634:	08017338 	.word	0x08017338
 8006638:	20000a77 	.word	0x20000a77
 800663c:	08017354 	.word	0x08017354
 8006640:	080163ec 	.word	0x080163ec
 8006644:	08017368 	.word	0x08017368

08006648 <statusCommand>:
    size_t xWriteBufferLen, const int8_t *pcCommandString){
 8006648:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 800664a:	2800      	cmp	r0, #0
 800664c:	d101      	bne.n	8006652 <statusCommand+0xa>
 800664e:	b672      	cpsid	i
 8006650:	e7fe      	b.n	8006650 <statusCommand+0x8>
	DisplayModuleStatus(0);
 8006652:	2000      	movs	r0, #0
 8006654:	f7fd f8d2 	bl	80037fc <DisplayModuleStatus>
}
 8006658:	2000      	movs	r0, #0
 800665a:	bd10      	pop	{r4, pc}

0800665c <groupCommand>:
    const int8_t *pcCommandString){
 800665c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800665e:	46ce      	mov	lr, r9
 8006660:	b500      	push	{lr}
 8006662:	b090      	sub	sp, #64	; 0x40
 8006664:	0004      	movs	r4, r0
 8006666:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] ={0};
 8006668:	2227      	movs	r2, #39	; 0x27
 800666a:	2100      	movs	r1, #0
 800666c:	a806      	add	r0, sp, #24
 800666e:	f00b f9fb 	bl	8011a68 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006672:	220a      	movs	r2, #10
 8006674:	2100      	movs	r1, #0
 8006676:	a803      	add	r0, sp, #12
 8006678:	f00b f9f6 	bl	8011a68 <memset>
	configASSERT(pcWriteBuffer);
 800667c:	2c00      	cmp	r4, #0
 800667e:	d101      	bne.n	8006684 <groupCommand+0x28>
 8006680:	b672      	cpsid	i
 8006682:	e7fe      	b.n	8006682 <groupCommand+0x26>
	pcParameterString1 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,1,
 8006684:	4d54      	ldr	r5, [pc, #336]	; (80067d8 <groupCommand+0x17c>)
 8006686:	002a      	movs	r2, r5
 8006688:	2101      	movs	r1, #1
 800668a:	9801      	ldr	r0, [sp, #4]
 800668c:	f006 f9d8 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 8006690:	0001      	movs	r1, r0
	strncpy(alias,(char*) pcParameterString1,xParameterStringLength1);
 8006692:	682a      	ldr	r2, [r5, #0]
 8006694:	a803      	add	r0, sp, #12
 8006696:	f00b fc36 	bl	8011f06 <strncpy>
 800669a:	4d50      	ldr	r5, [pc, #320]	; (80067dc <groupCommand+0x180>)
 800669c:	002f      	movs	r7, r5
 800669e:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])) {
 80066a0:	0029      	movs	r1, r5
 80066a2:	a803      	add	r0, sp, #12
 80066a4:	f7f9 fd2e 	bl	8000104 <strcmp>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d016      	beq.n	80066da <groupCommand+0x7e>
 80066ac:	350a      	adds	r5, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++) {
 80066ae:	42bd      	cmp	r5, r7
 80066b0:	d1f6      	bne.n	80066a0 <groupCommand+0x44>
	type =1;
 80066b2:	2701      	movs	r7, #1
	count =2;
 80066b4:	4b4a      	ldr	r3, [pc, #296]	; (80067e0 <groupCommand+0x184>)
 80066b6:	2202      	movs	r2, #2
 80066b8:	701a      	strb	r2, [r3, #0]
	strcpy((char*) pcWriteBuffer,"Modules [");
 80066ba:	3208      	adds	r2, #8
 80066bc:	4949      	ldr	r1, [pc, #292]	; (80067e4 <groupCommand+0x188>)
 80066be:	0020      	movs	r0, r4
 80066c0:	f00b f9c9 	bl	8011a56 <memcpy>
	pcParameterString =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,
 80066c4:	4a48      	ldr	r2, [pc, #288]	; (80067e8 <groupCommand+0x18c>)
 80066c6:	2102      	movs	r1, #2
 80066c8:	9801      	ldr	r0, [sp, #4]
 80066ca:	f006 f9b9 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 80066ce:	4b47      	ldr	r3, [pc, #284]	; (80067ec <groupCommand+0x190>)
 80066d0:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL) {
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d061      	beq.n	800679a <groupCommand+0x13e>
		strncpy(module,(char*) pcParameterString,xParameterStringLength);
 80066d6:	4e44      	ldr	r6, [pc, #272]	; (80067e8 <groupCommand+0x18c>)
 80066d8:	e011      	b.n	80066fe <groupCommand+0xa2>
			type =0;
 80066da:	2700      	movs	r7, #0
 80066dc:	e7ea      	b.n	80066b4 <groupCommand+0x58>
		strcat((char*) pcWriteBuffer,module);
 80066de:	a906      	add	r1, sp, #24
 80066e0:	0020      	movs	r0, r4
 80066e2:	f00b fbdb 	bl	8011e9c <strcat>
		    ++count,&xParameterStringLength);
 80066e6:	1c69      	adds	r1, r5, #1
 80066e8:	b249      	sxtb	r1, r1
		pcParameterString =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,
 80066ea:	4b3d      	ldr	r3, [pc, #244]	; (80067e0 <groupCommand+0x184>)
 80066ec:	7019      	strb	r1, [r3, #0]
 80066ee:	4a3e      	ldr	r2, [pc, #248]	; (80067e8 <groupCommand+0x18c>)
 80066f0:	9801      	ldr	r0, [sp, #4]
 80066f2:	f006 f9a5 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 80066f6:	4b3d      	ldr	r3, [pc, #244]	; (80067ec <groupCommand+0x190>)
 80066f8:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL) {
 80066fa:	2800      	cmp	r0, #0
 80066fc:	d04d      	beq.n	800679a <groupCommand+0x13e>
		strncpy(module,(char*) pcParameterString,xParameterStringLength);
 80066fe:	6833      	ldr	r3, [r6, #0]
 8006700:	4699      	mov	r9, r3
 8006702:	ad06      	add	r5, sp, #24
 8006704:	001a      	movs	r2, r3
 8006706:	0001      	movs	r1, r0
 8006708:	0028      	movs	r0, r5
 800670a:	f00b fbfc 	bl	8011f06 <strncpy>
		module[xParameterStringLength] ='\0';
 800670e:	2300      	movs	r3, #0
 8006710:	464a      	mov	r2, r9
 8006712:	54ab      	strb	r3, [r5, r2]
		modID =GetID(module);
 8006714:	0028      	movs	r0, r5
 8006716:	f7fd f9d1 	bl	8003abc <GetID>
		if(modID < 0)
 800671a:	2800      	cmp	r0, #0
 800671c:	db37      	blt.n	800678e <groupCommand+0x132>
		result =AddModuleToGroup(modID,alias);
 800671e:	b2c0      	uxtb	r0, r0
 8006720:	a903      	add	r1, sp, #12
 8006722:	f7fd fa97 	bl	8003c54 <AddModuleToGroup>
		if(result != BOS_OK)
 8006726:	2800      	cmp	r0, #0
 8006728:	d146      	bne.n	80067b8 <groupCommand+0x15c>
		if(count > 2)
 800672a:	4b2d      	ldr	r3, [pc, #180]	; (80067e0 <groupCommand+0x184>)
 800672c:	2500      	movs	r5, #0
 800672e:	575d      	ldrsb	r5, [r3, r5]
 8006730:	2d02      	cmp	r5, #2
 8006732:	ddd4      	ble.n	80066de <groupCommand+0x82>
		strcat((char*) pcWriteBuffer,", ");
 8006734:	0020      	movs	r0, r4
 8006736:	f7f9 fcef 	bl	8000118 <strlen>
 800673a:	1820      	adds	r0, r4, r0
 800673c:	2203      	movs	r2, #3
 800673e:	492c      	ldr	r1, [pc, #176]	; (80067f0 <groupCommand+0x194>)
 8006740:	f00b f989 	bl	8011a56 <memcpy>
 8006744:	e7cb      	b.n	80066de <groupCommand+0x82>
	else if(result == BOS_OK && type) {
 8006746:	2f00      	cmp	r7, #0
 8006748:	d009      	beq.n	800675e <groupCommand+0x102>
		sprintf(module,(char*) pcMessageOKnew,alias);
 800674a:	aa03      	add	r2, sp, #12
 800674c:	4929      	ldr	r1, [pc, #164]	; (80067f4 <groupCommand+0x198>)
 800674e:	a806      	add	r0, sp, #24
 8006750:	f00b fb84 	bl	8011e5c <sprintf>
		strcat((char*) pcWriteBuffer,module);
 8006754:	a906      	add	r1, sp, #24
 8006756:	0020      	movs	r0, r4
 8006758:	f00b fba0 	bl	8011e9c <strcat>
 800675c:	e027      	b.n	80067ae <groupCommand+0x152>
		sprintf(module,(char*) pcMessageOKexist,alias);
 800675e:	aa03      	add	r2, sp, #12
 8006760:	4925      	ldr	r1, [pc, #148]	; (80067f8 <groupCommand+0x19c>)
 8006762:	a806      	add	r0, sp, #24
 8006764:	f00b fb7a 	bl	8011e5c <sprintf>
		strcat((char*) pcWriteBuffer,module);
 8006768:	a906      	add	r1, sp, #24
 800676a:	0020      	movs	r0, r4
 800676c:	f00b fb96 	bl	8011e9c <strcat>
 8006770:	e01d      	b.n	80067ae <groupCommand+0x152>
	sprintf((char*) pcWriteBuffer,(char*) pcMessageKey,alias);
 8006772:	aa03      	add	r2, sp, #12
 8006774:	4921      	ldr	r1, [pc, #132]	; (80067fc <groupCommand+0x1a0>)
 8006776:	0020      	movs	r0, r4
 8006778:	f00b fb70 	bl	8011e5c <sprintf>
 800677c:	e017      	b.n	80067ae <groupCommand+0x152>
	else if(result == BOS_ERR_ExistingCmd)
 800677e:	2808      	cmp	r0, #8
 8006780:	d115      	bne.n	80067ae <groupCommand+0x152>
	sprintf((char*) pcWriteBuffer,(char*) pcMessageCmd,alias);
 8006782:	aa03      	add	r2, sp, #12
 8006784:	491e      	ldr	r1, [pc, #120]	; (8006800 <groupCommand+0x1a4>)
 8006786:	0020      	movs	r0, r4
 8006788:	f00b fb68 	bl	8011e5c <sprintf>
 800678c:	e00f      	b.n	80067ae <groupCommand+0x152>
	sprintf((char*) pcWriteBuffer,(char*) pcMessageWrongModule,module);
 800678e:	aa06      	add	r2, sp, #24
 8006790:	491c      	ldr	r1, [pc, #112]	; (8006804 <groupCommand+0x1a8>)
 8006792:	0020      	movs	r0, r4
 8006794:	f00b fb62 	bl	8011e5c <sprintf>
	return pdFALSE;
 8006798:	e009      	b.n	80067ae <groupCommand+0x152>
	else if(count == 2)
 800679a:	4b11      	ldr	r3, [pc, #68]	; (80067e0 <groupCommand+0x184>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	b25b      	sxtb	r3, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d1d0      	bne.n	8006746 <groupCommand+0xea>
	sprintf((char*) pcWriteBuffer,(char*) pcMessageNoModules,alias);
 80067a4:	aa03      	add	r2, sp, #12
 80067a6:	4918      	ldr	r1, [pc, #96]	; (8006808 <groupCommand+0x1ac>)
 80067a8:	0020      	movs	r0, r4
 80067aa:	f00b fb57 	bl	8011e5c <sprintf>
}
 80067ae:	2000      	movs	r0, #0
 80067b0:	b010      	add	sp, #64	; 0x40
 80067b2:	bc04      	pop	{r2}
 80067b4:	4691      	mov	r9, r2
 80067b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 80067b8:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <groupCommand+0x184>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	b25b      	sxtb	r3, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d0f0      	beq.n	80067a4 <groupCommand+0x148>
	else if(result == BOS_ERR_Keyword)
 80067c2:	2806      	cmp	r0, #6
 80067c4:	d0d5      	beq.n	8006772 <groupCommand+0x116>
	else if(result == BOS_ERR_ExistingAlias)
 80067c6:	2807      	cmp	r0, #7
 80067c8:	d1d9      	bne.n	800677e <groupCommand+0x122>
	sprintf((char*) pcWriteBuffer,(char*) pcMessageAlias,alias);
 80067ca:	aa03      	add	r2, sp, #12
 80067cc:	490f      	ldr	r1, [pc, #60]	; (800680c <groupCommand+0x1b0>)
 80067ce:	0020      	movs	r0, r4
 80067d0:	f00b fb44 	bl	8011e5c <sprintf>
 80067d4:	e7eb      	b.n	80067ae <groupCommand+0x152>
 80067d6:	46c0      	nop			; (mov r8, r8)
 80067d8:	200012bc 	.word	0x200012bc
 80067dc:	20000e5c 	.word	0x20000e5c
 80067e0:	20001282 	.word	0x20001282
 80067e4:	08017158 	.word	0x08017158
 80067e8:	200012b0 	.word	0x200012b0
 80067ec:	20001284 	.word	0x20001284
 80067f0:	08017164 	.word	0x08017164
 80067f4:	08017194 	.word	0x08017194
 80067f8:	080171b0 	.word	0x080171b0
 80067fc:	080171d0 	.word	0x080171d0
 8006800:	08017244 	.word	0x08017244
 8006804:	08017284 	.word	0x08017284
 8006808:	08017168 	.word	0x08017168
 800680c:	08017210 	.word	0x08017210

08006810 <nameCommand>:
    const int8_t *pcCommandString){
 8006810:	b570      	push	{r4, r5, r6, lr}
 8006812:	0004      	movs	r4, r0
 8006814:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 8006816:	2c00      	cmp	r4, #0
 8006818:	d101      	bne.n	800681e <nameCommand+0xe>
 800681a:	b672      	cpsid	i
 800681c:	e7fe      	b.n	800681c <nameCommand+0xc>
	pcParameterString1 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,1,
 800681e:	4d1c      	ldr	r5, [pc, #112]	; (8006890 <nameCommand+0x80>)
 8006820:	002a      	movs	r2, r5
 8006822:	2101      	movs	r1, #1
 8006824:	f006 f90c 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 8006828:	0001      	movs	r1, r0
 800682a:	4b1a      	ldr	r3, [pc, #104]	; (8006894 <nameCommand+0x84>)
 800682c:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias) {
 800682e:	682b      	ldr	r3, [r5, #0]
 8006830:	2b09      	cmp	r3, #9
 8006832:	dd01      	ble.n	8006838 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8006834:	2300      	movs	r3, #0
 8006836:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char*) pcParameterString1);
 8006838:	4b17      	ldr	r3, [pc, #92]	; (8006898 <nameCommand+0x88>)
 800683a:	7818      	ldrb	r0, [r3, #0]
 800683c:	f7fd f9a2 	bl	8003b84 <NameModule>
	if(result == BOS_OK)
 8006840:	2800      	cmp	r0, #0
 8006842:	d007      	beq.n	8006854 <nameCommand+0x44>
	else if(result == BOS_ERR_Keyword)
 8006844:	2806      	cmp	r0, #6
 8006846:	d00e      	beq.n	8006866 <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 8006848:	2807      	cmp	r0, #7
 800684a:	d013      	beq.n	8006874 <nameCommand+0x64>
	else if(result == BOS_ERR_ExistingCmd)
 800684c:	2808      	cmp	r0, #8
 800684e:	d018      	beq.n	8006882 <nameCommand+0x72>
}
 8006850:	2000      	movs	r0, #0
 8006852:	bd70      	pop	{r4, r5, r6, pc}
	sprintf((char*) pcWriteBuffer,(char*) pcMessageOK,myID,
 8006854:	4b10      	ldr	r3, [pc, #64]	; (8006898 <nameCommand+0x88>)
 8006856:	781a      	ldrb	r2, [r3, #0]
 8006858:	4b0e      	ldr	r3, [pc, #56]	; (8006894 <nameCommand+0x84>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	490f      	ldr	r1, [pc, #60]	; (800689c <nameCommand+0x8c>)
 800685e:	0020      	movs	r0, r4
 8006860:	f00b fafc 	bl	8011e5c <sprintf>
 8006864:	e7f4      	b.n	8006850 <nameCommand+0x40>
	sprintf((char*) pcWriteBuffer,(char*) pcMessageKey,
 8006866:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <nameCommand+0x84>)
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	490d      	ldr	r1, [pc, #52]	; (80068a0 <nameCommand+0x90>)
 800686c:	0020      	movs	r0, r4
 800686e:	f00b faf5 	bl	8011e5c <sprintf>
 8006872:	e7ed      	b.n	8006850 <nameCommand+0x40>
	sprintf((char*) pcWriteBuffer,(char*) pcMessageAlias,
 8006874:	4b07      	ldr	r3, [pc, #28]	; (8006894 <nameCommand+0x84>)
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	490a      	ldr	r1, [pc, #40]	; (80068a4 <nameCommand+0x94>)
 800687a:	0020      	movs	r0, r4
 800687c:	f00b faee 	bl	8011e5c <sprintf>
 8006880:	e7e6      	b.n	8006850 <nameCommand+0x40>
	sprintf((char*) pcWriteBuffer,(char*) pcMessageCmd,
 8006882:	4b04      	ldr	r3, [pc, #16]	; (8006894 <nameCommand+0x84>)
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	4908      	ldr	r1, [pc, #32]	; (80068a8 <nameCommand+0x98>)
 8006888:	0020      	movs	r0, r4
 800688a:	f00b fae7 	bl	8011e5c <sprintf>
 800688e:	e7df      	b.n	8006850 <nameCommand+0x40>
 8006890:	200012b8 	.word	0x200012b8
 8006894:	20001288 	.word	0x20001288
 8006898:	20001076 	.word	0x20001076
 800689c:	080173d0 	.word	0x080173d0
 80068a0:	080171d0 	.word	0x080171d0
 80068a4:	08017210 	.word	0x08017210
 80068a8:	08017244 	.word	0x08017244

080068ac <bootloaderUpdateCommand>:
    size_t xWriteBufferLen, const int8_t *pcCommandString){
 80068ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ae:	b085      	sub	sp, #20
 80068b0:	1e04      	subs	r4, r0, #0
 80068b2:	9203      	str	r2, [sp, #12]
	configASSERT(pcWriteBuffer);
 80068b4:	d101      	bne.n	80068ba <bootloaderUpdateCommand+0xe>
 80068b6:	b672      	cpsid	i
 80068b8:	e7fe      	b.n	80068b8 <bootloaderUpdateCommand+0xc>
	pcParameterString1 =(int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,1,
 80068ba:	4a4b      	ldr	r2, [pc, #300]	; (80069e8 <bootloaderUpdateCommand+0x13c>)
 80068bc:	2101      	movs	r1, #1
 80068be:	9803      	ldr	r0, [sp, #12]
 80068c0:	f006 f8be 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL) {
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d040      	beq.n	800694a <bootloaderUpdateCommand+0x9e>
		if(!strncmp((const char*) pcParameterString1,"via",
 80068c8:	4b47      	ldr	r3, [pc, #284]	; (80069e8 <bootloaderUpdateCommand+0x13c>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	4947      	ldr	r1, [pc, #284]	; (80069ec <bootloaderUpdateCommand+0x140>)
 80068ce:	f00b fb09 	bl	8011ee4 <strncmp>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d000      	beq.n	80068d8 <bootloaderUpdateCommand+0x2c>
 80068d6:	e080      	b.n	80069da <bootloaderUpdateCommand+0x12e>
			pcParameterString2 =(int8_t*) FreeRTOS_CLIGetParameter(
 80068d8:	4a45      	ldr	r2, [pc, #276]	; (80069f0 <bootloaderUpdateCommand+0x144>)
 80068da:	2102      	movs	r1, #2
 80068dc:	9803      	ldr	r0, [sp, #12]
 80068de:	f006 f8af 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 80068e2:	4f44      	ldr	r7, [pc, #272]	; (80069f4 <bootloaderUpdateCommand+0x148>)
 80068e4:	6038      	str	r0, [r7, #0]
			pcParameterString3 =(int8_t*) FreeRTOS_CLIGetParameter(
 80068e6:	4a44      	ldr	r2, [pc, #272]	; (80069f8 <bootloaderUpdateCommand+0x14c>)
 80068e8:	2103      	movs	r1, #3
 80068ea:	9803      	ldr	r0, [sp, #12]
 80068ec:	f006 f8a8 	bl	800ca40 <FreeRTOS_CLIGetParameter>
 80068f0:	4b42      	ldr	r3, [pc, #264]	; (80069fc <bootloaderUpdateCommand+0x150>)
 80068f2:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#') {
 80068f4:	6838      	ldr	r0, [r7, #0]
 80068f6:	2300      	movs	r3, #0
 80068f8:	56c3      	ldrsb	r3, [r0, r3]
			result =BOS_ERR_WrongValue;
 80068fa:	2768      	movs	r7, #104	; 0x68
			if(pcParameterString2[0] == '#') {
 80068fc:	2b23      	cmp	r3, #35	; 0x23
 80068fe:	d04e      	beq.n	800699e <bootloaderUpdateCommand+0xf2>
			if(pcParameterString3[0] == 'p') {
 8006900:	4b3e      	ldr	r3, [pc, #248]	; (80069fc <bootloaderUpdateCommand+0x150>)
 8006902:	6818      	ldr	r0, [r3, #0]
 8006904:	2300      	movs	r3, #0
 8006906:	56c3      	ldrsb	r3, [r0, r3]
 8006908:	2b70      	cmp	r3, #112	; 0x70
 800690a:	d04e      	beq.n	80069aa <bootloaderUpdateCommand+0xfe>
			result =BOS_ERR_WrongValue;
 800690c:	2768      	movs	r7, #104	; 0x68
			if(module != myID) {
 800690e:	4b3c      	ldr	r3, [pc, #240]	; (8006a00 <bootloaderUpdateCommand+0x154>)
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	42b3      	cmp	r3, r6
 8006914:	d04e      	beq.n	80069b4 <bootloaderUpdateCommand+0x108>
				BOS.response = BOS_RESPONSE_NONE;
 8006916:	4b3b      	ldr	r3, [pc, #236]	; (8006a04 <bootloaderUpdateCommand+0x158>)
 8006918:	2200      	movs	r2, #0
 800691a:	719a      	strb	r2, [r3, #6]
				messageParams[0] =port;
 800691c:	4b3a      	ldr	r3, [pc, #232]	; (8006a08 <bootloaderUpdateCommand+0x15c>)
 800691e:	701d      	strb	r5, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006920:	3201      	adds	r2, #1
 8006922:	211a      	movs	r1, #26
 8006924:	0030      	movs	r0, r6
 8006926:	f001 ffe9 	bl	80088fc <SendMessageToModule>
				osDelay(100);
 800692a:	2064      	movs	r0, #100	; 0x64
 800692c:	f005 ff6f 	bl	800c80e <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 8006930:	4b36      	ldr	r3, [pc, #216]	; (8006a0c <bootloaderUpdateCommand+0x160>)
 8006932:	781a      	ldrb	r2, [r3, #0]
 8006934:	4b32      	ldr	r3, [pc, #200]	; (8006a00 <bootloaderUpdateCommand+0x154>)
 8006936:	7818      	ldrb	r0, [r3, #0]
 8006938:	002b      	movs	r3, r5
 800693a:	0031      	movs	r1, r6
 800693c:	f7fc fd98 	bl	8003470 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue) {
 8006940:	2f68      	cmp	r7, #104	; 0x68
 8006942:	d04a      	beq.n	80069da <bootloaderUpdateCommand+0x12e>
}
 8006944:	2000      	movs	r0, #0
 8006946:	b005      	add	sp, #20
 8006948:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char*) pcWriteBuffer,(char*) pcMessage,myID);
 800694a:	4b2d      	ldr	r3, [pc, #180]	; (8006a00 <bootloaderUpdateCommand+0x154>)
 800694c:	781a      	ldrb	r2, [r3, #0]
 800694e:	4930      	ldr	r1, [pc, #192]	; (8006a10 <bootloaderUpdateCommand+0x164>)
 8006950:	0020      	movs	r0, r4
 8006952:	f00b fa83 	bl	8011e5c <sprintf>
		strcat((char*) pcWriteBuffer,(char*) pcBootloaderUpdateMessage);
 8006956:	4b2f      	ldr	r3, [pc, #188]	; (8006a14 <bootloaderUpdateCommand+0x168>)
 8006958:	6819      	ldr	r1, [r3, #0]
 800695a:	0020      	movs	r0, r4
 800695c:	f00b fa9e 	bl	8011e9c <strcat>
		    strlen((char*) pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006960:	0020      	movs	r0, r4
 8006962:	f7f9 fbd9 	bl	8000118 <strlen>
		writePxMutex(PcPort,(char*) pcWriteBuffer,
 8006966:	b282      	uxth	r2, r0
 8006968:	4b28      	ldr	r3, [pc, #160]	; (8006a0c <bootloaderUpdateCommand+0x160>)
 800696a:	7818      	ldrb	r0, [r3, #0]
 800696c:	2301      	movs	r3, #1
 800696e:	425b      	negs	r3, r3
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	3333      	adds	r3, #51	; 0x33
 8006974:	0021      	movs	r1, r4
 8006976:	f005 fe1d 	bl	800c5b4 <writePxMutex>
		* ((unsigned long*) 0x20007FF0) =0xDEADBEEF;
 800697a:	4b27      	ldr	r3, [pc, #156]	; (8006a18 <bootloaderUpdateCommand+0x16c>)
 800697c:	4a27      	ldr	r2, [pc, #156]	; (8006a1c <bootloaderUpdateCommand+0x170>)
 800697e:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8006980:	4b27      	ldr	r3, [pc, #156]	; (8006a20 <bootloaderUpdateCommand+0x174>)
 8006982:	2201      	movs	r2, #1
 8006984:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006986:	200a      	movs	r0, #10
 8006988:	f005 ff41 	bl	800c80e <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	4b24      	ldr	r3, [pc, #144]	; (8006a24 <bootloaderUpdateCommand+0x178>)
 8006992:	4a25      	ldr	r2, [pc, #148]	; (8006a28 <bootloaderUpdateCommand+0x17c>)
 8006994:	60da      	str	r2, [r3, #12]
 8006996:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800699a:	46c0      	nop			; (mov r8, r8)
 800699c:	e7fd      	b.n	800699a <bootloaderUpdateCommand+0xee>
				module =(uint8_t) atol((char*) pcParameterString2 + 1);
 800699e:	3001      	adds	r0, #1
 80069a0:	f00a fdcf 	bl	8011542 <atol>
 80069a4:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 80069a6:	2700      	movs	r7, #0
 80069a8:	e7aa      	b.n	8006900 <bootloaderUpdateCommand+0x54>
				port =(uint8_t) atol((char*) pcParameterString3 + 1);
 80069aa:	3001      	adds	r0, #1
 80069ac:	f00a fdc9 	bl	8011542 <atol>
 80069b0:	b2c5      	uxtb	r5, r0
 80069b2:	e7ac      	b.n	800690e <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 80069b4:	2100      	movs	r1, #0
 80069b6:	9100      	str	r1, [sp, #0]
 80069b8:	2319      	movs	r3, #25
 80069ba:	000a      	movs	r2, r1
 80069bc:	0028      	movs	r0, r5
 80069be:	f001 fd75 	bl	80084ac <SendMessageFromPort>
				osDelay(100);
 80069c2:	2064      	movs	r0, #100	; 0x64
 80069c4:	f005 ff23 	bl	800c80e <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 80069c8:	4b0d      	ldr	r3, [pc, #52]	; (8006a00 <bootloaderUpdateCommand+0x154>)
 80069ca:	7818      	ldrb	r0, [r3, #0]
 80069cc:	4b0f      	ldr	r3, [pc, #60]	; (8006a0c <bootloaderUpdateCommand+0x160>)
 80069ce:	781a      	ldrb	r2, [r3, #0]
 80069d0:	002b      	movs	r3, r5
 80069d2:	0001      	movs	r1, r0
 80069d4:	f7fc fd4c 	bl	8003470 <remoteBootloaderUpdate>
 80069d8:	e7b2      	b.n	8006940 <bootloaderUpdateCommand+0x94>
		strcpy((char*) pcWriteBuffer,(char*) pcMessageWrongValue);
 80069da:	220f      	movs	r2, #15
 80069dc:	4913      	ldr	r1, [pc, #76]	; (8006a2c <bootloaderUpdateCommand+0x180>)
 80069de:	0020      	movs	r0, r4
 80069e0:	f00b f839 	bl	8011a56 <memcpy>
 80069e4:	e7ae      	b.n	8006944 <bootloaderUpdateCommand+0x98>
 80069e6:	46c0      	nop			; (mov r8, r8)
 80069e8:	200012b4 	.word	0x200012b4
 80069ec:	08016e90 	.word	0x08016e90
 80069f0:	200012c0 	.word	0x200012c0
 80069f4:	20001298 	.word	0x20001298
 80069f8:	200012c4 	.word	0x200012c4
 80069fc:	200012a0 	.word	0x200012a0
 8006a00:	20001076 	.word	0x20001076
 8006a04:	20006988 	.word	0x20006988
 8006a08:	20000f38 	.word	0x20000f38
 8006a0c:	20000a77 	.word	0x20000a77
 8006a10:	08016e70 	.word	0x08016e70
 8006a14:	20000074 	.word	0x20000074
 8006a18:	20007ff0 	.word	0x20007ff0
 8006a1c:	deadbeef 	.word	0xdeadbeef
 8006a20:	20000ef4 	.word	0x20000ef4
 8006a24:	e000ed00 	.word	0xe000ed00
 8006a28:	05fa0004 	.word	0x05fa0004
 8006a2c:	08016f50 	.word	0x08016f50

08006a30 <pingCommand>:
    const int8_t *pcCommandString){
 8006a30:	b570      	push	{r4, r5, r6, lr}
	configASSERT(pcWriteBuffer);
 8006a32:	2800      	cmp	r0, #0
 8006a34:	d01e      	beq.n	8006a74 <pingCommand+0x44>
	if(!moduleAlias[myID][0])
 8006a36:	4b15      	ldr	r3, [pc, #84]	; (8006a8c <pingCommand+0x5c>)
 8006a38:	781a      	ldrb	r2, [r3, #0]
 8006a3a:	0093      	lsls	r3, r2, #2
 8006a3c:	189b      	adds	r3, r3, r2
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	4913      	ldr	r1, [pc, #76]	; (8006a90 <pingCommand+0x60>)
 8006a42:	5c5b      	ldrb	r3, [r3, r1]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d117      	bne.n	8006a78 <pingCommand+0x48>
	sprintf((char*) pcWriteBuffer,(char*) pcMessage1,myID);
 8006a48:	4912      	ldr	r1, [pc, #72]	; (8006a94 <pingCommand+0x64>)
 8006a4a:	f00b fa07 	bl	8011e5c <sprintf>
	RTOS_IND_blink(200);
 8006a4e:	2580      	movs	r5, #128	; 0x80
 8006a50:	012d      	lsls	r5, r5, #4
 8006a52:	2490      	movs	r4, #144	; 0x90
 8006a54:	05e4      	lsls	r4, r4, #23
 8006a56:	2201      	movs	r2, #1
 8006a58:	0029      	movs	r1, r5
 8006a5a:	0020      	movs	r0, r4
 8006a5c:	f008 ffce 	bl	800f9fc <HAL_GPIO_WritePin>
 8006a60:	20c8      	movs	r0, #200	; 0xc8
 8006a62:	f005 fed4 	bl	800c80e <osDelay>
 8006a66:	2200      	movs	r2, #0
 8006a68:	0029      	movs	r1, r5
 8006a6a:	0020      	movs	r0, r4
 8006a6c:	f008 ffc6 	bl	800f9fc <HAL_GPIO_WritePin>
}
 8006a70:	2000      	movs	r0, #0
 8006a72:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 8006a74:	b672      	cpsid	i
 8006a76:	e7fe      	b.n	8006a76 <pingCommand+0x46>
	    moduleAlias[myID]);
 8006a78:	0093      	lsls	r3, r2, #2
 8006a7a:	189b      	adds	r3, r3, r2
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	4904      	ldr	r1, [pc, #16]	; (8006a90 <pingCommand+0x60>)
 8006a80:	185b      	adds	r3, r3, r1
	sprintf((char*) pcWriteBuffer,(char*) pcMessage2,myID,
 8006a82:	4905      	ldr	r1, [pc, #20]	; (8006a98 <pingCommand+0x68>)
 8006a84:	f00b f9ea 	bl	8011e5c <sprintf>
 8006a88:	e7e1      	b.n	8006a4e <pingCommand+0x1e>
 8006a8a:	46c0      	nop			; (mov r8, r8)
 8006a8c:	20001076 	.word	0x20001076
 8006a90:	20000f68 	.word	0x20000f68
 8006a94:	08017440 	.word	0x08017440
 8006a98:	08017454 	.word	0x08017454

08006a9c <prvRunTimeStatsCommand>:
    size_t xWriteBufferLen, const int8_t *pcCommandString){
 8006a9c:	b510      	push	{r4, lr}
 8006a9e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006aa0:	d101      	bne.n	8006aa6 <prvRunTimeStatsCommand+0xa>
 8006aa2:	b672      	cpsid	i
 8006aa4:	e7fe      	b.n	8006aa4 <prvRunTimeStatsCommand+0x8>
	strcpy((char*) pcWriteBuffer,(char*) pcStatsTableHeader);
 8006aa6:	2241      	movs	r2, #65	; 0x41
 8006aa8:	4904      	ldr	r1, [pc, #16]	; (8006abc <prvRunTimeStatsCommand+0x20>)
 8006aaa:	f00a ffd4 	bl	8011a56 <memcpy>
	vTaskGetRunTimeStats(
 8006aae:	0020      	movs	r0, r4
 8006ab0:	3040      	adds	r0, #64	; 0x40
 8006ab2:	f007 fa19 	bl	800dee8 <vTaskGetRunTimeStats>
}
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	bd10      	pop	{r4, pc}
 8006aba:	46c0      	nop			; (mov r8, r8)
 8006abc:	08017480 	.word	0x08017480

08006ac0 <prvTaskStatsCommand>:
    size_t xWriteBufferLen, const int8_t *pcCommandString){
 8006ac0:	b510      	push	{r4, lr}
 8006ac2:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006ac4:	d101      	bne.n	8006aca <prvTaskStatsCommand+0xa>
 8006ac6:	b672      	cpsid	i
 8006ac8:	e7fe      	b.n	8006ac8 <prvTaskStatsCommand+0x8>
	strcpy((char*) pcWriteBuffer,(char*) pcTaskTableHeader);
 8006aca:	2250      	movs	r2, #80	; 0x50
 8006acc:	4904      	ldr	r1, [pc, #16]	; (8006ae0 <prvTaskStatsCommand+0x20>)
 8006ace:	f00a ffc2 	bl	8011a56 <memcpy>
	vTaskList( ((char*) pcWriteBuffer) + strlen((char*) pcTaskTableHeader));
 8006ad2:	0020      	movs	r0, r4
 8006ad4:	304f      	adds	r0, #79	; 0x4f
 8006ad6:	f007 f9a7 	bl	800de28 <vTaskList>
}
 8006ada:	2000      	movs	r0, #0
 8006adc:	bd10      	pop	{r4, pc}
 8006ade:	46c0      	nop			; (mov r8, r8)
 8006ae0:	080174d4 	.word	0x080174d4

08006ae4 <resetCommand>:
	configASSERT(pcWriteBuffer);
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d101      	bne.n	8006aec <resetCommand+0x8>
 8006ae8:	b672      	cpsid	i
 8006aea:	e7fe      	b.n	8006aea <resetCommand+0x6>
  __ASM volatile ("dsb 0xF":::"memory");
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	4b03      	ldr	r3, [pc, #12]	; (8006b00 <resetCommand+0x1c>)
 8006af2:	4a04      	ldr	r2, [pc, #16]	; (8006b04 <resetCommand+0x20>)
 8006af4:	60da      	str	r2, [r3, #12]
 8006af6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006afa:	46c0      	nop			; (mov r8, r8)
 8006afc:	e7fd      	b.n	8006afa <resetCommand+0x16>
 8006afe:	46c0      	nop			; (mov r8, r8)
 8006b00:	e000ed00 	.word	0xe000ed00
 8006b04:	05fa0004 	.word	0x05fa0004

08006b08 <RegisterUserCLICommands>:
}
 8006b08:	4770      	bx	lr
	...

08006b0c <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 8006b0c:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 8006b0e:	482f      	ldr	r0, [pc, #188]	; (8006bcc <vRegisterCLICommands+0xc0>)
 8006b10:	f005 fef8 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8006b14:	482e      	ldr	r0, [pc, #184]	; (8006bd0 <vRegisterCLICommands+0xc4>)
 8006b16:	f005 fef5 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 8006b1a:	482e      	ldr	r0, [pc, #184]	; (8006bd4 <vRegisterCLICommands+0xc8>)
 8006b1c:	f005 fef2 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 8006b20:	482d      	ldr	r0, [pc, #180]	; (8006bd8 <vRegisterCLICommands+0xcc>)
 8006b22:	f005 feef 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8006b26:	482d      	ldr	r0, [pc, #180]	; (8006bdc <vRegisterCLICommands+0xd0>)
 8006b28:	f005 feec 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 8006b2c:	482c      	ldr	r0, [pc, #176]	; (8006be0 <vRegisterCLICommands+0xd4>)
 8006b2e:	f005 fee9 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 8006b32:	482c      	ldr	r0, [pc, #176]	; (8006be4 <vRegisterCLICommands+0xd8>)
 8006b34:	f005 fee6 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 8006b38:	482b      	ldr	r0, [pc, #172]	; (8006be8 <vRegisterCLICommands+0xdc>)
 8006b3a:	f005 fee3 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 8006b3e:	482b      	ldr	r0, [pc, #172]	; (8006bec <vRegisterCLICommands+0xe0>)
 8006b40:	f005 fee0 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8006b44:	482a      	ldr	r0, [pc, #168]	; (8006bf0 <vRegisterCLICommands+0xe4>)
 8006b46:	f005 fedd 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 8006b4a:	482a      	ldr	r0, [pc, #168]	; (8006bf4 <vRegisterCLICommands+0xe8>)
 8006b4c:	f005 feda 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 8006b50:	4829      	ldr	r0, [pc, #164]	; (8006bf8 <vRegisterCLICommands+0xec>)
 8006b52:	f005 fed7 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8006b56:	4829      	ldr	r0, [pc, #164]	; (8006bfc <vRegisterCLICommands+0xf0>)
 8006b58:	f005 fed4 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 8006b5c:	4828      	ldr	r0, [pc, #160]	; (8006c00 <vRegisterCLICommands+0xf4>)
 8006b5e:	f005 fed1 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 8006b62:	4828      	ldr	r0, [pc, #160]	; (8006c04 <vRegisterCLICommands+0xf8>)
 8006b64:	f005 fece 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8006b68:	4827      	ldr	r0, [pc, #156]	; (8006c08 <vRegisterCLICommands+0xfc>)
 8006b6a:	f005 fecb 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 8006b6e:	4827      	ldr	r0, [pc, #156]	; (8006c0c <vRegisterCLICommands+0x100>)
 8006b70:	f005 fec8 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8006b74:	4826      	ldr	r0, [pc, #152]	; (8006c10 <vRegisterCLICommands+0x104>)
 8006b76:	f005 fec5 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 8006b7a:	4826      	ldr	r0, [pc, #152]	; (8006c14 <vRegisterCLICommands+0x108>)
 8006b7c:	f005 fec2 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 8006b80:	4825      	ldr	r0, [pc, #148]	; (8006c18 <vRegisterCLICommands+0x10c>)
 8006b82:	f005 febf 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8006b86:	4825      	ldr	r0, [pc, #148]	; (8006c1c <vRegisterCLICommands+0x110>)
 8006b88:	f005 febc 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 8006b8c:	4824      	ldr	r0, [pc, #144]	; (8006c20 <vRegisterCLICommands+0x114>)
 8006b8e:	f005 feb9 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 8006b92:	4824      	ldr	r0, [pc, #144]	; (8006c24 <vRegisterCLICommands+0x118>)
 8006b94:	f005 feb6 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8006b98:	4823      	ldr	r0, [pc, #140]	; (8006c28 <vRegisterCLICommands+0x11c>)
 8006b9a:	f005 feb3 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 8006b9e:	4823      	ldr	r0, [pc, #140]	; (8006c2c <vRegisterCLICommands+0x120>)
 8006ba0:	f005 feb0 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8006ba4:	4822      	ldr	r0, [pc, #136]	; (8006c30 <vRegisterCLICommands+0x124>)
 8006ba6:	f005 fead 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 8006baa:	4822      	ldr	r0, [pc, #136]	; (8006c34 <vRegisterCLICommands+0x128>)
 8006bac:	f005 feaa 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 8006bb0:	4821      	ldr	r0, [pc, #132]	; (8006c38 <vRegisterCLICommands+0x12c>)
 8006bb2:	f005 fea7 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8006bb6:	4821      	ldr	r0, [pc, #132]	; (8006c3c <vRegisterCLICommands+0x130>)
 8006bb8:	f005 fea4 	bl	800c904 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands = 31;
 8006bbc:	4b20      	ldr	r3, [pc, #128]	; (8006c40 <vRegisterCLICommands+0x134>)
 8006bbe:	221f      	movs	r2, #31
 8006bc0:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8006bc2:	f003 fe50 	bl	800a866 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 8006bc6:	f7ff ff9f 	bl	8006b08 <RegisterUserCLICommands>
}
 8006bca:	bd10      	pop	{r4, pc}
 8006bcc:	08017524 	.word	0x08017524
 8006bd0:	080174c4 	.word	0x080174c4
 8006bd4:	08017470 	.word	0x08017470
 8006bd8:	08016e94 	.word	0x08016e94
 8006bdc:	0801701c 	.word	0x0801701c
 8006be0:	0801756c 	.word	0x0801756c
 8006be4:	080173e8 	.word	0x080173e8
 8006be8:	080172a8 	.word	0x080172a8
 8006bec:	08017a20 	.word	0x08017a20
 8006bf0:	080173ac 	.word	0x080173ac
 8006bf4:	08017628 	.word	0x08017628
 8006bf8:	08016e60 	.word	0x08016e60
 8006bfc:	0801755c 	.word	0x0801755c
 8006c00:	08017880 	.word	0x08017880
 8006c04:	08017148 	.word	0x08017148
 8006c08:	08016fa0 	.word	0x08016fa0
 8006c0c:	08018908 	.word	0x08018908
 8006c10:	08016f08 	.word	0x08016f08
 8006c14:	08017674 	.word	0x08017674
 8006c18:	0801897c 	.word	0x0801897c
 8006c1c:	08017328 	.word	0x08017328
 8006c20:	0801704c 	.word	0x0801704c
 8006c24:	08017a10 	.word	0x08017a10
 8006c28:	08016de4 	.word	0x08016de4
 8006c2c:	08017430 	.word	0x08017430
 8006c30:	0801700c 	.word	0x0801700c
 8006c34:	08016ee0 	.word	0x08016ee0
 8006c38:	08018954 	.word	0x08018954
 8006c3c:	0801889c 	.word	0x0801889c
 8006c40:	2000690c 	.word	0x2000690c

08006c44 <StopMsgDMA>:
extern void DMA_STREAM_Setup(UART_HandleTypeDef *huartSrc,
    UART_HandleTypeDef *huartDst, uint16_t num);

/* --- Stop a messaging DMA --- 
 */
void StopMsgDMA(uint8_t port){
 8006c44:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 8006c46:	1e45      	subs	r5, r0, #1
 8006c48:	00ec      	lsls	r4, r5, #3
 8006c4a:	1b60      	subs	r0, r4, r5
 8006c4c:	00c0      	lsls	r0, r0, #3
 8006c4e:	4e05      	ldr	r6, [pc, #20]	; (8006c64 <StopMsgDMA+0x20>)
 8006c50:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8006c52:	f008 f820 	bl	800ec96 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 8006c56:	1b64      	subs	r4, r4, r5
 8006c58:	00e4      	lsls	r4, r4, #3
 8006c5a:	59a3      	ldr	r3, [r4, r6]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	605a      	str	r2, [r3, #4]
}
 8006c60:	bd70      	pop	{r4, r5, r6, pc}
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	20001760 	.word	0x20001760

08006c68 <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 8006c68:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 8006c6a:	1e44      	subs	r4, r0, #1
 8006c6c:	00e5      	lsls	r5, r4, #3
 8006c6e:	1b28      	subs	r0, r5, r4
 8006c70:	00c0      	lsls	r0, r0, #3
 8006c72:	4e07      	ldr	r6, [pc, #28]	; (8006c90 <StopStreamDMA+0x28>)
 8006c74:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 8006c76:	f008 f80e 	bl	800ec96 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 8006c7a:	1b2d      	subs	r5, r5, r4
 8006c7c:	00ed      	lsls	r5, r5, #3
 8006c7e:	59aa      	ldr	r2, [r5, r6]
 8006c80:	2300      	movs	r3, #0
 8006c82:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 8006c84:	00a4      	lsls	r4, r4, #2
 8006c86:	4a03      	ldr	r2, [pc, #12]	; (8006c94 <StopStreamDMA+0x2c>)
 8006c88:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] =0;
 8006c8a:	4a03      	ldr	r2, [pc, #12]	; (8006c98 <StopStreamDMA+0x30>)
 8006c8c:	50a3      	str	r3, [r4, r2]
	
}
 8006c8e:	bd70      	pop	{r4, r5, r6, pc}
 8006c90:	20001958 	.word	0x20001958
 8006c94:	20001490 	.word	0x20001490
 8006c98:	200014c0 	.word	0x200014c0

08006c9c <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	0004      	movs	r4, r0
// TODO - Make sure all messages in the RX buffer have been parsed?
	
// Stop the messaging DMA
	StopMsgDMA(port);
 8006ca0:	f7ff ffd0 	bl	8006c44 <StopMsgDMA>
	
// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 8006ca4:	3c01      	subs	r4, #1
 8006ca6:	00e0      	lsls	r0, r4, #3
 8006ca8:	1b02      	subs	r2, r0, r4
 8006caa:	00d2      	lsls	r2, r2, #3
 8006cac:	4903      	ldr	r1, [pc, #12]	; (8006cbc <SwitchMsgDMAToStream+0x20>)
 8006cae:	5851      	ldr	r1, [r2, r1]
 8006cb0:	4b03      	ldr	r3, [pc, #12]	; (8006cc0 <SwitchMsgDMAToStream+0x24>)
 8006cb2:	18d0      	adds	r0, r2, r3
 8006cb4:	f003 fe86 	bl	800a9c4 <DMA_STREAM_CH_Init>
}
 8006cb8:	bd10      	pop	{r4, pc}
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	20001760 	.word	0x20001760
 8006cc0:	20001958 	.word	0x20001958

08006cc4 <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 8006cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	0004      	movs	r4, r0
// Stop the streaming DMA
	StopStreamDMA(port);
 8006cca:	f7ff ffcd 	bl	8006c68 <StopStreamDMA>
	
// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 8006cce:	9401      	str	r4, [sp, #4]
 8006cd0:	3c01      	subs	r4, #1
 8006cd2:	00e7      	lsls	r7, r4, #3
 8006cd4:	1b3d      	subs	r5, r7, r4
 8006cd6:	00ed      	lsls	r5, r5, #3
 8006cd8:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <SwitchStreamDMAToMsg+0x54>)
 8006cda:	18ed      	adds	r5, r5, r3
 8006cdc:	4e0f      	ldr	r6, [pc, #60]	; (8006d1c <SwitchStreamDMAToMsg+0x58>)
 8006cde:	1b3b      	subs	r3, r7, r4
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	5999      	ldr	r1, [r3, r6]
 8006ce4:	0028      	movs	r0, r5
 8006ce6:	f003 fdef 	bl	800a8c8 <DMA_MSG_RX_CH_Init>
	
// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 8006cea:	1b3b      	subs	r3, r7, r4
 8006cec:	00db      	lsls	r3, r3, #3
 8006cee:	18f3      	adds	r3, r6, r3
 8006cf0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006cf2:	f003 fdb9 	bl	800a868 <GetPort>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	4a09      	ldr	r2, [pc, #36]	; (8006d20 <SwitchStreamDMAToMsg+0x5c>)
 8006cfa:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance =0;
 8006cfc:	1b3f      	subs	r7, r7, r4
 8006cfe:	00ff      	lsls	r7, r7, #3
 8006d00:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port - 1] =0;
 8006d02:	00a4      	lsls	r4, r4, #2
 8006d04:	4a07      	ldr	r2, [pc, #28]	; (8006d24 <SwitchStreamDMAToMsg+0x60>)
 8006d06:	50a3      	str	r3, [r4, r2]
	
// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 8006d08:	9801      	ldr	r0, [sp, #4]
 8006d0a:	f005 fc31 	bl	800c570 <GetUart>
 8006d0e:	0029      	movs	r1, r5
 8006d10:	f004 fa4c 	bl	800b1ac <DMA_MSG_RX_Setup>
	
}
 8006d14:	b003      	add	sp, #12
 8006d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d18:	20001760 	.word	0x20001760
 8006d1c:	20001958 	.word	0x20001958
 8006d20:	200010f8 	.word	0x200010f8
 8006d24:	200014a8 	.word	0x200014a8

08006d28 <StartDMAstream>:
/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,
    UART_HandleTypeDef *huartDst, uint16_t num){
 8006d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2a:	0005      	movs	r5, r0
 8006d2c:	000e      	movs	r6, r1
 8006d2e:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 8006d30:	f003 fd9a 	bl	800a868 <GetPort>
 8006d34:	0004      	movs	r4, r0
	
// 1. Check if single- or multi-cast 
// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG
 8006d36:	4b0d      	ldr	r3, [pc, #52]	; (8006d6c <StartDMAstream+0x44>)
 8006d38:	5c1b      	ldrb	r3, [r3, r0]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d902      	bls.n	8006d44 <StartDMAstream+0x1c>
	    {
		SwitchMsgDMAToStream(srcPort);
	}
// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM) {
		return BOS_ERR_PORT_BUSY;// Multi-casting not implemented right now
 8006d3e:	2017      	movs	r0, #23
	    || portStatus[srcPort] == CLI)// This port is not streaming so it's single-cast
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d112      	bne.n	8006d6a <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 8006d44:	0020      	movs	r0, r4
 8006d46:	f7ff ffa9 	bl	8006c9c <SwitchMsgDMAToStream>
	}
	else
	return BOS_ERR_PORT_BUSY;
	
// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 8006d4a:	1e63      	subs	r3, r4, #1
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4a08      	ldr	r2, [pc, #32]	; (8006d70 <StartDMAstream+0x48>)
 8006d50:	509e      	str	r6, [r3, r2]
	
// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 8006d52:	4a06      	ldr	r2, [pc, #24]	; (8006d6c <StartDMAstream+0x44>)
 8006d54:	2102      	movs	r1, #2
 8006d56:	5511      	strb	r1, [r2, r4]
	
// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 8006d58:	4a06      	ldr	r2, [pc, #24]	; (8006d74 <StartDMAstream+0x4c>)
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	5099      	str	r1, [r3, r2]
	
// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 8006d5e:	003a      	movs	r2, r7
 8006d60:	0031      	movs	r1, r6
 8006d62:	0028      	movs	r0, r5
 8006d64:	f004 fa8c 	bl	800b280 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8006d68:	2000      	movs	r0, #0
}
 8006d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d6c:	200010f8 	.word	0x200010f8
 8006d70:	200014a8 	.word	0x200014a8
 8006d74:	20001490 	.word	0x20001490

08006d78 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 8006d78:	b570      	push	{r4, r5, r6, lr}
 8006d7a:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM) {
 8006d7c:	4b12      	ldr	r3, [pc, #72]	; (8006dc8 <DMA_IRQHandler+0x50>)
 8006d7e:	5c1b      	ldrb	r3, [r3, r0]
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d008      	beq.n	8006d96 <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 8006d84:	3c01      	subs	r4, #1
 8006d86:	00e0      	lsls	r0, r4, #3
 8006d88:	1b00      	subs	r0, r0, r4
 8006d8a:	00c0      	lsls	r0, r0, #3
 8006d8c:	4c0f      	ldr	r4, [pc, #60]	; (8006dcc <DMA_IRQHandler+0x54>)
 8006d8e:	1900      	adds	r0, r0, r4
 8006d90:	f007 ffaa 	bl	800ece8 <HAL_DMA_IRQHandler>
		++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]) {
			StopStreamDMA(port);
		}
	}
}
 8006d94:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 8006d96:	1e45      	subs	r5, r0, #1
 8006d98:	00e8      	lsls	r0, r5, #3
 8006d9a:	1b40      	subs	r0, r0, r5
 8006d9c:	00c0      	lsls	r0, r0, #3
 8006d9e:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <DMA_IRQHandler+0x58>)
 8006da0:	18c0      	adds	r0, r0, r3
 8006da2:	f007 ffa1 	bl	800ece8 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 8006da6:	00aa      	lsls	r2, r5, #2
 8006da8:	4b0a      	ldr	r3, [pc, #40]	; (8006dd4 <DMA_IRQHandler+0x5c>)
 8006daa:	58d2      	ldr	r2, [r2, r3]
 8006dac:	2a00      	cmp	r2, #0
 8006dae:	d006      	beq.n	8006dbe <DMA_IRQHandler+0x46>
		++dmaStreamCount[port - 1];
 8006db0:	4909      	ldr	r1, [pc, #36]	; (8006dd8 <DMA_IRQHandler+0x60>)
 8006db2:	00ad      	lsls	r5, r5, #2
 8006db4:	586b      	ldr	r3, [r5, r1]
 8006db6:	3301      	adds	r3, #1
 8006db8:	506b      	str	r3, [r5, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]) {
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d8ea      	bhi.n	8006d94 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8006dbe:	0020      	movs	r0, r4
 8006dc0:	f7ff ff52 	bl	8006c68 <StopStreamDMA>
}
 8006dc4:	e7e6      	b.n	8006d94 <DMA_IRQHandler+0x1c>
 8006dc6:	46c0      	nop			; (mov r8, r8)
 8006dc8:	200010f8 	.word	0x200010f8
 8006dcc:	20001760 	.word	0x20001760
 8006dd0:	20001958 	.word	0x20001958
 8006dd4:	200014c0 	.word	0x200014c0
 8006dd8:	20001490 	.word	0x20001490

08006ddc <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8006ddc:	4b08      	ldr	r3, [pc, #32]	; (8006e00 <ResetUartORE+0x24>)
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	2308      	movs	r3, #8
 8006de2:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8006de4:	4a07      	ldr	r2, [pc, #28]	; (8006e04 <ResetUartORE+0x28>)
 8006de6:	6812      	ldr	r2, [r2, #0]
 8006de8:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8006dea:	4a07      	ldr	r2, [pc, #28]	; (8006e08 <ResetUartORE+0x2c>)
 8006dec:	6812      	ldr	r2, [r2, #0]
 8006dee:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
//__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8006df0:	4a06      	ldr	r2, [pc, #24]	; (8006e0c <ResetUartORE+0x30>)
 8006df2:	6812      	ldr	r2, [r2, #0]
 8006df4:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8006df6:	4a06      	ldr	r2, [pc, #24]	; (8006e10 <ResetUartORE+0x34>)
 8006df8:	6812      	ldr	r2, [r2, #0]
 8006dfa:	6213      	str	r3, [r2, #32]
#endif
}
 8006dfc:	4770      	bx	lr
 8006dfe:	46c0      	nop			; (mov r8, r8)
 8006e00:	20006b3c 	.word	0x20006b3c
 8006e04:	20006c8c 	.word	0x20006c8c
 8006e08:	20006a5c 	.word	0x20006a5c
 8006e0c:	20006acc 	.word	0x20006acc
 8006e10:	20006bac 	.word	0x20006bac

08006e14 <EE_VerifyPageFullWriteVariable>:
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,
    uint16_t Data){
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	0006      	movs	r6, r0
 8006e18:	000d      	movs	r5, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 8006e1a:	f008 fbd5 	bl	800f5c8 <HAL_FLASH_Unlock>
	PageStatusA = (*(__IO uint16_t*) PAGEA1_BASE_ADDRESS);
 8006e1e:	4b2b      	ldr	r3, [pc, #172]	; (8006ecc <EE_VerifyPageFullWriteVariable+0xb8>)
 8006e20:	881a      	ldrh	r2, [r3, #0]
 8006e22:	b292      	uxth	r2, r2
	PageStatusB = (*(__IO uint16_t*) PAGEB1_BASE_ADDRESS);
 8006e24:	4b2a      	ldr	r3, [pc, #168]	; (8006ed0 <EE_VerifyPageFullWriteVariable+0xbc>)
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b29b      	uxth	r3, r3
		if(PageStatusB == VALID_PAGE) {
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d104      	bne.n	8006e38 <EE_VerifyPageFullWriteVariable+0x24>
			if(PageStatusA == RECEIVE_DATA) {
 8006e2e:	4929      	ldr	r1, [pc, #164]	; (8006ed4 <EE_VerifyPageFullWriteVariable+0xc0>)
 8006e30:	428a      	cmp	r2, r1
 8006e32:	d007      	beq.n	8006e44 <EE_VerifyPageFullWriteVariable+0x30>
				return PAGEB; /* PageB valid */
 8006e34:	3302      	adds	r3, #2
 8006e36:	e005      	b.n	8006e44 <EE_VerifyPageFullWriteVariable+0x30>
		else if(PageStatusA == VALID_PAGE) {
 8006e38:	2a00      	cmp	r2, #0
 8006e3a:	d143      	bne.n	8006ec4 <EE_VerifyPageFullWriteVariable+0xb0>
			if(PageStatusB == RECEIVE_DATA) {
 8006e3c:	4925      	ldr	r1, [pc, #148]	; (8006ed4 <EE_VerifyPageFullWriteVariable+0xc0>)
 8006e3e:	428b      	cmp	r3, r1
 8006e40:	d042      	beq.n	8006ec8 <EE_VerifyPageFullWriteVariable+0xb4>
				return PAGEA; /* PageA valid */
 8006e42:	0013      	movs	r3, r2
	if(ValidPage == NO_VALID_PAGE) {
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t) (EEPROM_START_ADDRESS
 8006e44:	4a24      	ldr	r2, [pc, #144]	; (8006ed8 <EE_VerifyPageFullWriteVariable+0xc4>)
 8006e46:	189c      	adds	r4, r3, r2
 8006e48:	02e4      	lsls	r4, r4, #11
	    + (uint32_t) (ValidPage * PAGE_SIZE));
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t) ( (EEPROM_START_ADDRESS - 2)
	    + (uint32_t) ( (2 + ValidPage) * PAGE_SIZE));
 8006e4a:	02db      	lsls	r3, r3, #11
	PageEndAddress =(uint32_t) ( (EEPROM_START_ADDRESS - 2)
 8006e4c:	4a23      	ldr	r2, [pc, #140]	; (8006edc <EE_VerifyPageFullWriteVariable+0xc8>)
 8006e4e:	4694      	mov	ip, r2
 8006e50:	4463      	add	r3, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress) {
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if( (*(__IO uint32_t*) Address) == 0xFFFFFFFF) {
 8006e52:	6822      	ldr	r2, [r4, #0]
 8006e54:	3201      	adds	r2, #1
 8006e56:	d005      	beq.n	8006e64 <EE_VerifyPageFullWriteVariable+0x50>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else {
			/* Next address location */
			Address =Address + 4;
 8006e58:	3404      	adds	r4, #4
	while(Address < PageEndAddress) {
 8006e5a:	429c      	cmp	r4, r3
 8006e5c:	d22e      	bcs.n	8006ebc <EE_VerifyPageFullWriteVariable+0xa8>
		if( (*(__IO uint32_t*) Address) == 0xFFFFFFFF) {
 8006e5e:	6822      	ldr	r2, [r4, #0]
 8006e60:	3201      	adds	r2, #1
 8006e62:	d1f9      	bne.n	8006e58 <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 8006e64:	002a      	movs	r2, r5
 8006e66:	2300      	movs	r3, #0
 8006e68:	0021      	movs	r1, r4
 8006e6a:	2001      	movs	r0, #1
 8006e6c:	f008 fbf6 	bl	800f65c <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation(
 8006e70:	481b      	ldr	r0, [pc, #108]	; (8006ee0 <EE_VerifyPageFullWriteVariable+0xcc>)
 8006e72:	f008 fbc5 	bl	800f600 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK) {
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d003      	beq.n	8006e82 <EE_VerifyPageFullWriteVariable+0x6e>
				return pFlash.ErrorCode;
 8006e7a:	4b1a      	ldr	r3, [pc, #104]	; (8006ee4 <EE_VerifyPageFullWriteVariable+0xd0>)
 8006e7c:	69d8      	ldr	r0, [r3, #28]
 8006e7e:	b280      	uxth	r0, r0
 8006e80:	e01f      	b.n	8006ec2 <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8006e82:	4a19      	ldr	r2, [pc, #100]	; (8006ee8 <EE_VerifyPageFullWriteVariable+0xd4>)
 8006e84:	6913      	ldr	r3, [r2, #16]
 8006e86:	2101      	movs	r1, #1
 8006e88:	438b      	bics	r3, r1
 8006e8a:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,
 8006e8c:	1ca1      	adds	r1, r4, #2
 8006e8e:	0032      	movs	r2, r6
 8006e90:	2300      	movs	r3, #0
 8006e92:	2001      	movs	r0, #1
 8006e94:	f008 fbe2 	bl	800f65c <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation(
 8006e98:	4811      	ldr	r0, [pc, #68]	; (8006ee0 <EE_VerifyPageFullWriteVariable+0xcc>)
 8006e9a:	f008 fbb1 	bl	800f600 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK) {
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d003      	beq.n	8006eaa <EE_VerifyPageFullWriteVariable+0x96>
				return pFlash.ErrorCode;
 8006ea2:	4b10      	ldr	r3, [pc, #64]	; (8006ee4 <EE_VerifyPageFullWriteVariable+0xd0>)
 8006ea4:	69d8      	ldr	r0, [r3, #28]
 8006ea6:	b280      	uxth	r0, r0
 8006ea8:	e00b      	b.n	8006ec2 <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8006eaa:	4a0f      	ldr	r2, [pc, #60]	; (8006ee8 <EE_VerifyPageFullWriteVariable+0xd4>)
 8006eac:	6913      	ldr	r3, [r2, #16]
 8006eae:	2101      	movs	r1, #1
 8006eb0:	438b      	bics	r3, r1
 8006eb2:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 8006eb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ee4 <EE_VerifyPageFullWriteVariable+0xd0>)
 8006eb6:	69d8      	ldr	r0, [r3, #28]
 8006eb8:	b280      	uxth	r0, r0
 8006eba:	e002      	b.n	8006ec2 <EE_VerifyPageFullWriteVariable+0xae>
		}
	}
	
	HAL_FLASH_Lock();
 8006ebc:	f008 fb96 	bl	800f5ec <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 8006ec0:	2080      	movs	r0, #128	; 0x80
}
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
		return NO_VALID_PAGE;
 8006ec4:	20ab      	movs	r0, #171	; 0xab
 8006ec6:	e7fc      	b.n	8006ec2 <EE_VerifyPageFullWriteVariable+0xae>
				return PAGEB; /* PageB valid */
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e7bb      	b.n	8006e44 <EE_VerifyPageFullWriteVariable+0x30>
 8006ecc:	0801e000 	.word	0x0801e000
 8006ed0:	0801f000 	.word	0x0801f000
 8006ed4:	0000eeee 	.word	0x0000eeee
 8006ed8:	0001003c 	.word	0x0001003c
 8006edc:	0801effe 	.word	0x0801effe
 8006ee0:	0000c350 	.word	0x0000c350
 8006ee4:	20006e30 	.word	0x20006e30
 8006ee8:	40022000 	.word	0x40022000

08006eec <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t *Data){
 8006eec:	b510      	push	{r4, lr}
	PageStatusA = (*(__IO uint16_t*) PAGEA1_BASE_ADDRESS);
 8006eee:	4b13      	ldr	r3, [pc, #76]	; (8006f3c <EE_ReadVariable+0x50>)
 8006ef0:	881c      	ldrh	r4, [r3, #0]
 8006ef2:	b2a4      	uxth	r4, r4
	PageStatusB = (*(__IO uint16_t*) PAGEB1_BASE_ADDRESS);
 8006ef4:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <EE_ReadVariable+0x54>)
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	b29b      	uxth	r3, r3
		if(PageStatusA == VALID_PAGE) {
 8006efa:	2c00      	cmp	r4, #0
 8006efc:	d006      	beq.n	8006f0c <EE_ReadVariable+0x20>
		else if(PageStatusB == VALID_PAGE) {
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <EE_ReadVariable+0x1e>
		return NO_VALID_PAGE;
 8006f02:	20ab      	movs	r0, #171	; 0xab
 8006f04:	e019      	b.n	8006f3a <EE_ReadVariable+0x4e>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 8006f06:	2001      	movs	r0, #1
 8006f08:	e017      	b.n	8006f3a <EE_ReadVariable+0x4e>
			return PAGEB; /* PageB valid */
 8006f0a:	2402      	movs	r4, #2
	    + (uint32_t) ( (2 + ValidPage) * PAGE_SIZE));
 8006f0c:	02e3      	lsls	r3, r4, #11
	Address =(uint32_t) ( (EEPROM_START_ADDRESS - 2)
 8006f0e:	4a0d      	ldr	r2, [pc, #52]	; (8006f44 <EE_ReadVariable+0x58>)
 8006f10:	4694      	mov	ip, r2
 8006f12:	4463      	add	r3, ip
	PageStartAddress =(uint32_t) (EEPROM_START_ADDRESS
 8006f14:	02e4      	lsls	r4, r4, #11
	while(Address > (PageStartAddress + 2)) {
 8006f16:	4a0c      	ldr	r2, [pc, #48]	; (8006f48 <EE_ReadVariable+0x5c>)
 8006f18:	4694      	mov	ip, r2
 8006f1a:	4464      	add	r4, ip
		AddressValue = (*(__IO uint16_t*) Address);
 8006f1c:	881a      	ldrh	r2, [r3, #0]
 8006f1e:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress) {
 8006f20:	4290      	cmp	r0, r2
 8006f22:	d006      	beq.n	8006f32 <EE_ReadVariable+0x46>
			Address =Address - 4;
 8006f24:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)) {
 8006f26:	42a3      	cmp	r3, r4
 8006f28:	d9ed      	bls.n	8006f06 <EE_ReadVariable+0x1a>
		AddressValue = (*(__IO uint16_t*) Address);
 8006f2a:	881a      	ldrh	r2, [r3, #0]
 8006f2c:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress) {
 8006f2e:	4282      	cmp	r2, r0
 8006f30:	d1f8      	bne.n	8006f24 <EE_ReadVariable+0x38>
			*Data = (*(__IO uint16_t*) (Address - 2));
 8006f32:	3b02      	subs	r3, #2
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	800b      	strh	r3, [r1, #0]
			ReadStatus =0;
 8006f38:	2000      	movs	r0, #0
}
 8006f3a:	bd10      	pop	{r4, pc}
 8006f3c:	0801e000 	.word	0x0801e000
 8006f40:	0801f000 	.word	0x0801f000
 8006f44:	0801effe 	.word	0x0801effe
 8006f48:	0801e002 	.word	0x0801e002

08006f4c <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data){
 8006f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f4e:	46de      	mov	lr, fp
 8006f50:	4647      	mov	r7, r8
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b083      	sub	sp, #12
 8006f56:	0005      	movs	r5, r0
 8006f58:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 8006f5a:	f008 fb35 	bl	800f5c8 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8006f5e:	0031      	movs	r1, r6
 8006f60:	0028      	movs	r0, r5
 8006f62:	f7ff ff57 	bl	8006e14 <EE_VerifyPageFullWriteVariable>
 8006f66:	0004      	movs	r4, r0
	if(Status == PAGE_FULL) {
 8006f68:	2880      	cmp	r0, #128	; 0x80
 8006f6a:	d007      	beq.n	8006f7c <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 8006f6c:	f008 fb3e 	bl	800f5ec <HAL_FLASH_Lock>
}
 8006f70:	0020      	movs	r0, r4
 8006f72:	b003      	add	sp, #12
 8006f74:	bc0c      	pop	{r2, r3}
 8006f76:	4690      	mov	r8, r2
 8006f78:	469b      	mov	fp, r3
 8006f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 8006f7c:	f008 fb24 	bl	800f5c8 <HAL_FLASH_Unlock>
	PageStatusA = (*(__IO uint16_t*) PAGEA1_BASE_ADDRESS);
 8006f80:	4b3e      	ldr	r3, [pc, #248]	; (800707c <EE_WriteVariable+0x130>)
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b29b      	uxth	r3, r3
	PageStatusB = (*(__IO uint16_t*) PAGEB1_BASE_ADDRESS);
 8006f86:	4a3e      	ldr	r2, [pc, #248]	; (8007080 <EE_WriteVariable+0x134>)
 8006f88:	8812      	ldrh	r2, [r2, #0]
 8006f8a:	b292      	uxth	r2, r2
		if(PageStatusA == VALID_PAGE) {
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d007      	beq.n	8006fa0 <EE_WriteVariable+0x54>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else {
		return NO_VALID_PAGE; /* No valid Page */
 8006f90:	342b      	adds	r4, #43	; 0x2b
		else if(PageStatusB == VALID_PAGE) {
 8006f92:	2a00      	cmp	r2, #0
 8006f94:	d1ea      	bne.n	8006f6c <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 8006f96:	4b3a      	ldr	r3, [pc, #232]	; (8007080 <EE_WriteVariable+0x134>)
 8006f98:	469b      	mov	fp, r3
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 8006f9a:	4b38      	ldr	r3, [pc, #224]	; (800707c <EE_WriteVariable+0x130>)
 8006f9c:	9301      	str	r3, [sp, #4]
 8006f9e:	e003      	b.n	8006fa8 <EE_WriteVariable+0x5c>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 8006fa0:	4b36      	ldr	r3, [pc, #216]	; (800707c <EE_WriteVariable+0x130>)
 8006fa2:	469b      	mov	fp, r3
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 8006fa4:	4b36      	ldr	r3, [pc, #216]	; (8007080 <EE_WriteVariable+0x134>)
 8006fa6:	9301      	str	r3, [sp, #4]
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 8006fa8:	4a36      	ldr	r2, [pc, #216]	; (8007084 <EE_WriteVariable+0x138>)
 8006faa:	2300      	movs	r3, #0
 8006fac:	9901      	ldr	r1, [sp, #4]
 8006fae:	2001      	movs	r0, #1
 8006fb0:	f008 fb54 	bl	800f65c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation(
 8006fb4:	4834      	ldr	r0, [pc, #208]	; (8007088 <EE_WriteVariable+0x13c>)
 8006fb6:	f008 fb23 	bl	800f600 <FLASH_WaitForLastOperation>
	    (uint32_t) HAL_FLASH_TIMEOUT_VALUE);
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK) {
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d003      	beq.n	8006fc6 <EE_WriteVariable+0x7a>
		return pFlash.ErrorCode;
 8006fbe:	4b33      	ldr	r3, [pc, #204]	; (800708c <EE_WriteVariable+0x140>)
 8006fc0:	69dc      	ldr	r4, [r3, #28]
 8006fc2:	b2a4      	uxth	r4, r4
 8006fc4:	e7d2      	b.n	8006f6c <EE_WriteVariable+0x20>
	}
	else {
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8006fc6:	4a32      	ldr	r2, [pc, #200]	; (8007090 <EE_WriteVariable+0x144>)
 8006fc8:	6913      	ldr	r3, [r2, #16]
 8006fca:	2101      	movs	r1, #1
 8006fcc:	438b      	bics	r3, r1
 8006fce:	6113      	str	r3, [r2, #16]
	}
	
	/* Write the variable passed as parameter in the new active page */
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8006fd0:	0031      	movs	r1, r6
 8006fd2:	0028      	movs	r0, r5
 8006fd4:	f7ff ff1e 	bl	8006e14 <EE_VerifyPageFullWriteVariable>
 8006fd8:	1e04      	subs	r4, r0, #0
	/* If program operation was failed, a Flash error code is returned */
	if(EepromStatus != HAL_OK) {
 8006fda:	d1c7      	bne.n	8006f6c <EE_WriteVariable+0x20>
		return EepromStatus;
	}
	
	/* Transfer process: transfer variables from old to the new active page */
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++) {
 8006fdc:	2701      	movs	r7, #1
			/* Read the other last variable updates */
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
			/* In case variable corresponding to the virtual address was found */
			if(ReadStatus != 0x1) {
				/* Transfer the variable to the new active page */
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8006fde:	4b2d      	ldr	r3, [pc, #180]	; (8007094 <EE_WriteVariable+0x148>)
 8006fe0:	4698      	mov	r8, r3
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++) {
 8006fe2:	4e2d      	ldr	r6, [pc, #180]	; (8007098 <EE_WriteVariable+0x14c>)
 8006fe4:	e003      	b.n	8006fee <EE_WriteVariable+0xa2>
 8006fe6:	3701      	adds	r7, #1
 8006fe8:	b2bf      	uxth	r7, r7
 8006fea:	42b7      	cmp	r7, r6
 8006fec:	d00f      	beq.n	800700e <EE_WriteVariable+0xc2>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 8006fee:	42bd      	cmp	r5, r7
 8006ff0:	d0f9      	beq.n	8006fe6 <EE_WriteVariable+0x9a>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8006ff2:	4928      	ldr	r1, [pc, #160]	; (8007094 <EE_WriteVariable+0x148>)
 8006ff4:	0038      	movs	r0, r7
 8006ff6:	f7ff ff79 	bl	8006eec <EE_ReadVariable>
			if(ReadStatus != 0x1) {
 8006ffa:	2801      	cmp	r0, #1
 8006ffc:	d0f3      	beq.n	8006fe6 <EE_WriteVariable+0x9a>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8006ffe:	4643      	mov	r3, r8
 8007000:	8819      	ldrh	r1, [r3, #0]
 8007002:	0038      	movs	r0, r7
 8007004:	f7ff ff06 	bl	8006e14 <EE_VerifyPageFullWriteVariable>
 8007008:	1e04      	subs	r4, r0, #0
				/* If program operation was failed, a Flash error code is returned */
				if(EepromStatus != HAL_OK) {
 800700a:	d0ec      	beq.n	8006fe6 <EE_WriteVariable+0x9a>
 800700c:	e7ae      	b.n	8006f6c <EE_WriteVariable+0x20>
			}
		}
	}
	
	/* Erase the old Page: Set old Page status to ERASED status */
	FLASH_PageErase(OldPageAddress);
 800700e:	4658      	mov	r0, fp
 8007010:	f008 fb9c 	bl	800f74c <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation(
 8007014:	481c      	ldr	r0, [pc, #112]	; (8007088 <EE_WriteVariable+0x13c>)
 8007016:	f008 faf3 	bl	800f600 <FLASH_WaitForLastOperation>
	    (uint32_t) HAL_FLASH_TIMEOUT_VALUE);
	/* If erase operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK) {
 800701a:	2800      	cmp	r0, #0
 800701c:	d003      	beq.n	8007026 <EE_WriteVariable+0xda>
		return pFlash.ErrorCode;
 800701e:	4b1b      	ldr	r3, [pc, #108]	; (800708c <EE_WriteVariable+0x140>)
 8007020:	69dc      	ldr	r4, [r3, #28]
 8007022:	b2a4      	uxth	r4, r4
 8007024:	e7a2      	b.n	8006f6c <EE_WriteVariable+0x20>
	}
	else {
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 8007026:	2080      	movs	r0, #128	; 0x80
 8007028:	0100      	lsls	r0, r0, #4
 800702a:	4458      	add	r0, fp
 800702c:	f008 fb8e 	bl	800f74c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation(
 8007030:	4815      	ldr	r0, [pc, #84]	; (8007088 <EE_WriteVariable+0x13c>)
 8007032:	f008 fae5 	bl	800f600 <FLASH_WaitForLastOperation>
		    (uint32_t) HAL_FLASH_TIMEOUT_VALUE);
		if(FlashStatus != HAL_OK) {
 8007036:	2800      	cmp	r0, #0
 8007038:	d003      	beq.n	8007042 <EE_WriteVariable+0xf6>
			return pFlash.ErrorCode;
 800703a:	4b14      	ldr	r3, [pc, #80]	; (800708c <EE_WriteVariable+0x140>)
 800703c:	69dc      	ldr	r4, [r3, #28]
 800703e:	b2a4      	uxth	r4, r4
 8007040:	e794      	b.n	8006f6c <EE_WriteVariable+0x20>
		}
		else {
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007042:	4a13      	ldr	r2, [pc, #76]	; (8007090 <EE_WriteVariable+0x144>)
 8007044:	6913      	ldr	r3, [r2, #16]
 8007046:	2102      	movs	r1, #2
 8007048:	438b      	bics	r3, r1
 800704a:	6113      	str	r3, [r2, #16]
		}
	}
	
	/* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800704c:	2200      	movs	r2, #0
 800704e:	2300      	movs	r3, #0
 8007050:	9901      	ldr	r1, [sp, #4]
 8007052:	2001      	movs	r0, #1
 8007054:	f008 fb02 	bl	800f65c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation(
 8007058:	480b      	ldr	r0, [pc, #44]	; (8007088 <EE_WriteVariable+0x13c>)
 800705a:	f008 fad1 	bl	800f600 <FLASH_WaitForLastOperation>
	    (uint32_t) HAL_FLASH_TIMEOUT_VALUE);
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK) {
 800705e:	2800      	cmp	r0, #0
 8007060:	d003      	beq.n	800706a <EE_WriteVariable+0x11e>
		return pFlash.ErrorCode;
 8007062:	4b0a      	ldr	r3, [pc, #40]	; (800708c <EE_WriteVariable+0x140>)
 8007064:	69dc      	ldr	r4, [r3, #28]
 8007066:	b2a4      	uxth	r4, r4
 8007068:	e780      	b.n	8006f6c <EE_WriteVariable+0x20>
	}
	else {
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800706a:	4a09      	ldr	r2, [pc, #36]	; (8007090 <EE_WriteVariable+0x144>)
 800706c:	6913      	ldr	r3, [r2, #16]
 800706e:	2101      	movs	r1, #1
 8007070:	438b      	bics	r3, r1
 8007072:	6113      	str	r3, [r2, #16]
	}
	
	HAL_FLASH_Lock();
 8007074:	f008 faba 	bl	800f5ec <HAL_FLASH_Lock>
	
	/* Return last operation flash status */
	return FlashStatus;
 8007078:	2400      	movs	r4, #0
 800707a:	e777      	b.n	8006f6c <EE_WriteVariable+0x20>
 800707c:	0801e000 	.word	0x0801e000
 8007080:	0801f000 	.word	0x0801f000
 8007084:	0000eeee 	.word	0x0000eeee
 8007088:	0000c350 	.word	0x0000c350
 800708c:	20006e30 	.word	0x20006e30
 8007090:	40022000 	.word	0x40022000
 8007094:	200014d8 	.word	0x200014d8
 8007098:	00000401 	.word	0x00000401

0800709c <EE_Format>:
uint16_t EE_Format(void){
 800709c:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 800709e:	f008 fa93 	bl	800f5c8 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 80070a2:	4829      	ldr	r0, [pc, #164]	; (8007148 <EE_Format+0xac>)
 80070a4:	f008 fb52 	bl	800f74c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation(
 80070a8:	4828      	ldr	r0, [pc, #160]	; (800714c <EE_Format+0xb0>)
 80070aa:	f008 faa9 	bl	800f600 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d003      	beq.n	80070ba <EE_Format+0x1e>
		return pFlash.ErrorCode;
 80070b2:	4b27      	ldr	r3, [pc, #156]	; (8007150 <EE_Format+0xb4>)
 80070b4:	69d8      	ldr	r0, [r3, #28]
 80070b6:	b280      	uxth	r0, r0
}
 80070b8:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80070ba:	4826      	ldr	r0, [pc, #152]	; (8007154 <EE_Format+0xb8>)
 80070bc:	f008 fb46 	bl	800f74c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation(
 80070c0:	4822      	ldr	r0, [pc, #136]	; (800714c <EE_Format+0xb0>)
 80070c2:	f008 fa9d 	bl	800f600 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK) {
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d003      	beq.n	80070d2 <EE_Format+0x36>
			return pFlash.ErrorCode;
 80070ca:	4b21      	ldr	r3, [pc, #132]	; (8007150 <EE_Format+0xb4>)
 80070cc:	69d8      	ldr	r0, [r3, #28]
 80070ce:	b280      	uxth	r0, r0
 80070d0:	e7f2      	b.n	80070b8 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80070d2:	4a21      	ldr	r2, [pc, #132]	; (8007158 <EE_Format+0xbc>)
 80070d4:	6913      	ldr	r3, [r2, #16]
 80070d6:	2102      	movs	r1, #2
 80070d8:	438b      	bics	r3, r1
 80070da:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,
 80070dc:	2200      	movs	r2, #0
 80070de:	2300      	movs	r3, #0
 80070e0:	4919      	ldr	r1, [pc, #100]	; (8007148 <EE_Format+0xac>)
 80070e2:	2001      	movs	r0, #1
 80070e4:	f008 faba 	bl	800f65c <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation(
 80070e8:	4818      	ldr	r0, [pc, #96]	; (800714c <EE_Format+0xb0>)
 80070ea:	f008 fa89 	bl	800f600 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 80070ee:	2800      	cmp	r0, #0
 80070f0:	d003      	beq.n	80070fa <EE_Format+0x5e>
		return pFlash.ErrorCode;
 80070f2:	4b17      	ldr	r3, [pc, #92]	; (8007150 <EE_Format+0xb4>)
 80070f4:	69d8      	ldr	r0, [r3, #28]
 80070f6:	b280      	uxth	r0, r0
 80070f8:	e7de      	b.n	80070b8 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80070fa:	4a17      	ldr	r2, [pc, #92]	; (8007158 <EE_Format+0xbc>)
 80070fc:	6913      	ldr	r3, [r2, #16]
 80070fe:	2101      	movs	r1, #1
 8007100:	438b      	bics	r3, r1
 8007102:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007104:	4815      	ldr	r0, [pc, #84]	; (800715c <EE_Format+0xc0>)
 8007106:	f008 fb21 	bl	800f74c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation(
 800710a:	4810      	ldr	r0, [pc, #64]	; (800714c <EE_Format+0xb0>)
 800710c:	f008 fa78 	bl	800f600 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 8007110:	2800      	cmp	r0, #0
 8007112:	d003      	beq.n	800711c <EE_Format+0x80>
		return pFlash.ErrorCode;
 8007114:	4b0e      	ldr	r3, [pc, #56]	; (8007150 <EE_Format+0xb4>)
 8007116:	69d8      	ldr	r0, [r3, #28]
 8007118:	b280      	uxth	r0, r0
 800711a:	e7cd      	b.n	80070b8 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800711c:	4810      	ldr	r0, [pc, #64]	; (8007160 <EE_Format+0xc4>)
 800711e:	f008 fb15 	bl	800f74c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation(
 8007122:	480a      	ldr	r0, [pc, #40]	; (800714c <EE_Format+0xb0>)
 8007124:	f008 fa6c 	bl	800f600 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK) {
 8007128:	2800      	cmp	r0, #0
 800712a:	d003      	beq.n	8007134 <EE_Format+0x98>
			return pFlash.ErrorCode;
 800712c:	4b08      	ldr	r3, [pc, #32]	; (8007150 <EE_Format+0xb4>)
 800712e:	69d8      	ldr	r0, [r3, #28]
 8007130:	b280      	uxth	r0, r0
 8007132:	e7c1      	b.n	80070b8 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007134:	4a08      	ldr	r2, [pc, #32]	; (8007158 <EE_Format+0xbc>)
 8007136:	6913      	ldr	r3, [r2, #16]
 8007138:	2101      	movs	r1, #1
 800713a:	438b      	bics	r3, r1
 800713c:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800713e:	f008 fa55 	bl	800f5ec <HAL_FLASH_Lock>
	return FlashStatus;
 8007142:	2000      	movs	r0, #0
 8007144:	e7b8      	b.n	80070b8 <EE_Format+0x1c>
 8007146:	46c0      	nop			; (mov r8, r8)
 8007148:	0801e000 	.word	0x0801e000
 800714c:	0000c350 	.word	0x0000c350
 8007150:	20006e30 	.word	0x20006e30
 8007154:	0801e800 	.word	0x0801e800
 8007158:	40022000 	.word	0x40022000
 800715c:	0801f000 	.word	0x0801f000
 8007160:	0801f800 	.word	0x0801f800

08007164 <EE_Init>:
uint16_t EE_Init(void){
 8007164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007166:	46c6      	mov	lr, r8
 8007168:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 800716a:	f008 fa2d 	bl	800f5c8 <HAL_FLASH_Unlock>
	PageStatusA = (*(__IO uint16_t*) PAGEA1_BASE_ADDRESS);
 800716e:	4bbe      	ldr	r3, [pc, #760]	; (8007468 <EE_Init+0x304>)
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	b29b      	uxth	r3, r3
	PageStatusB = (*(__IO uint16_t*) PAGEB1_BASE_ADDRESS);
 8007174:	4abd      	ldr	r2, [pc, #756]	; (800746c <EE_Init+0x308>)
 8007176:	8812      	ldrh	r2, [r2, #0]
 8007178:	b292      	uxth	r2, r2
	switch(PageStatusA){
 800717a:	49bd      	ldr	r1, [pc, #756]	; (8007470 <EE_Init+0x30c>)
 800717c:	428b      	cmp	r3, r1
 800717e:	d100      	bne.n	8007182 <EE_Init+0x1e>
 8007180:	e074      	b.n	800726c <EE_Init+0x108>
 8007182:	49bc      	ldr	r1, [pc, #752]	; (8007474 <EE_Init+0x310>)
 8007184:	428b      	cmp	r3, r1
 8007186:	d011      	beq.n	80071ac <EE_Init+0x48>
 8007188:	2b00      	cmp	r3, #0
 800718a:	d100      	bne.n	800718e <EE_Init+0x2a>
 800718c:	e109      	b.n	80073a2 <EE_Init+0x23e>
		FlashStatus =EE_Format();
 800718e:	f7ff ff85 	bl	800709c <EE_Format>
		FlashStatus =FLASH_WaitForLastOperation(
 8007192:	48b9      	ldr	r0, [pc, #740]	; (8007478 <EE_Init+0x314>)
 8007194:	f008 fa34 	bl	800f600 <FLASH_WaitForLastOperation>
 8007198:	b286      	uxth	r6, r0
		if(FlashStatus != HAL_OK) {
 800719a:	2e00      	cmp	r6, #0
 800719c:	d102      	bne.n	80071a4 <EE_Init+0x40>
	HAL_FLASH_Lock();
 800719e:	f008 fa25 	bl	800f5ec <HAL_FLASH_Lock>
	return HAL_OK;
 80071a2:	2600      	movs	r6, #0
}
 80071a4:	0030      	movs	r0, r6
 80071a6:	bc04      	pop	{r2}
 80071a8:	4690      	mov	r8, r2
 80071aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 80071ac:	2a00      	cmp	r2, #0
 80071ae:	d00d      	beq.n	80071cc <EE_Init+0x68>
		else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 80071b0:	4baf      	ldr	r3, [pc, #700]	; (8007470 <EE_Init+0x30c>)
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d028      	beq.n	8007208 <EE_Init+0xa4>
			FlashStatus =EE_Format();
 80071b6:	f7ff ff71 	bl	800709c <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation(
 80071ba:	48af      	ldr	r0, [pc, #700]	; (8007478 <EE_Init+0x314>)
 80071bc:	f008 fa20 	bl	800f600 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK) {
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d0ec      	beq.n	800719e <EE_Init+0x3a>
				return pFlash.ErrorCode;
 80071c4:	4bad      	ldr	r3, [pc, #692]	; (800747c <EE_Init+0x318>)
 80071c6:	69de      	ldr	r6, [r3, #28]
 80071c8:	b2b6      	uxth	r6, r6
 80071ca:	e7eb      	b.n	80071a4 <EE_Init+0x40>
			FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 80071cc:	48a6      	ldr	r0, [pc, #664]	; (8007468 <EE_Init+0x304>)
 80071ce:	f008 fabd 	bl	800f74c <FLASH_PageErase>
			FlashStatus =FLASH_WaitForLastOperation(
 80071d2:	48a9      	ldr	r0, [pc, #676]	; (8007478 <EE_Init+0x314>)
 80071d4:	f008 fa14 	bl	800f600 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK) {
 80071d8:	2800      	cmp	r0, #0
 80071da:	d003      	beq.n	80071e4 <EE_Init+0x80>
				return pFlash.ErrorCode;
 80071dc:	4ba7      	ldr	r3, [pc, #668]	; (800747c <EE_Init+0x318>)
 80071de:	69de      	ldr	r6, [r3, #28]
 80071e0:	b2b6      	uxth	r6, r6
 80071e2:	e7df      	b.n	80071a4 <EE_Init+0x40>
				FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80071e4:	48a6      	ldr	r0, [pc, #664]	; (8007480 <EE_Init+0x31c>)
 80071e6:	f008 fab1 	bl	800f74c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation(
 80071ea:	48a3      	ldr	r0, [pc, #652]	; (8007478 <EE_Init+0x314>)
 80071ec:	f008 fa08 	bl	800f600 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK) {
 80071f0:	2800      	cmp	r0, #0
 80071f2:	d105      	bne.n	8007200 <EE_Init+0x9c>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80071f4:	4aa3      	ldr	r2, [pc, #652]	; (8007484 <EE_Init+0x320>)
 80071f6:	6913      	ldr	r3, [r2, #16]
 80071f8:	2102      	movs	r1, #2
 80071fa:	438b      	bics	r3, r1
 80071fc:	6113      	str	r3, [r2, #16]
 80071fe:	e7ce      	b.n	800719e <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007200:	4b9e      	ldr	r3, [pc, #632]	; (800747c <EE_Init+0x318>)
 8007202:	69de      	ldr	r6, [r3, #28]
 8007204:	b2b6      	uxth	r6, r6
 8007206:	e7cd      	b.n	80071a4 <EE_Init+0x40>
			FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007208:	4897      	ldr	r0, [pc, #604]	; (8007468 <EE_Init+0x304>)
 800720a:	f008 fa9f 	bl	800f74c <FLASH_PageErase>
			FlashStatus =FLASH_WaitForLastOperation(
 800720e:	489a      	ldr	r0, [pc, #616]	; (8007478 <EE_Init+0x314>)
 8007210:	f008 f9f6 	bl	800f600 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK) {
 8007214:	2800      	cmp	r0, #0
 8007216:	d003      	beq.n	8007220 <EE_Init+0xbc>
				return pFlash.ErrorCode;
 8007218:	4b98      	ldr	r3, [pc, #608]	; (800747c <EE_Init+0x318>)
 800721a:	69de      	ldr	r6, [r3, #28]
 800721c:	b2b6      	uxth	r6, r6
 800721e:	e7c1      	b.n	80071a4 <EE_Init+0x40>
				FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007220:	4897      	ldr	r0, [pc, #604]	; (8007480 <EE_Init+0x31c>)
 8007222:	f008 fa93 	bl	800f74c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation(
 8007226:	4894      	ldr	r0, [pc, #592]	; (8007478 <EE_Init+0x314>)
 8007228:	f008 f9ea 	bl	800f600 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK) {
 800722c:	2800      	cmp	r0, #0
 800722e:	d003      	beq.n	8007238 <EE_Init+0xd4>
					return pFlash.ErrorCode;
 8007230:	4b92      	ldr	r3, [pc, #584]	; (800747c <EE_Init+0x318>)
 8007232:	69de      	ldr	r6, [r3, #28]
 8007234:	b2b6      	uxth	r6, r6
 8007236:	e7b5      	b.n	80071a4 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007238:	4a92      	ldr	r2, [pc, #584]	; (8007484 <EE_Init+0x320>)
 800723a:	6913      	ldr	r3, [r2, #16]
 800723c:	2102      	movs	r1, #2
 800723e:	438b      	bics	r3, r1
 8007240:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,
 8007242:	2200      	movs	r2, #0
 8007244:	2300      	movs	r3, #0
 8007246:	4989      	ldr	r1, [pc, #548]	; (800746c <EE_Init+0x308>)
 8007248:	2001      	movs	r0, #1
 800724a:	f008 fa07 	bl	800f65c <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation(
 800724e:	488a      	ldr	r0, [pc, #552]	; (8007478 <EE_Init+0x314>)
 8007250:	f008 f9d6 	bl	800f600 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK) {
 8007254:	2800      	cmp	r0, #0
 8007256:	d105      	bne.n	8007264 <EE_Init+0x100>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007258:	4a8a      	ldr	r2, [pc, #552]	; (8007484 <EE_Init+0x320>)
 800725a:	6913      	ldr	r3, [r2, #16]
 800725c:	2101      	movs	r1, #1
 800725e:	438b      	bics	r3, r1
 8007260:	6113      	str	r3, [r2, #16]
 8007262:	e79c      	b.n	800719e <EE_Init+0x3a>
				return pFlash.ErrorCode;
 8007264:	4b85      	ldr	r3, [pc, #532]	; (800747c <EE_Init+0x318>)
 8007266:	69de      	ldr	r6, [r3, #28]
 8007268:	b2b6      	uxth	r6, r6
 800726a:	e79b      	b.n	80071a4 <EE_Init+0x40>
		if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800726c:	2a00      	cmp	r2, #0
 800726e:	d157      	bne.n	8007320 <EE_Init+0x1bc>
 8007270:	2401      	movs	r4, #1
	int16_t x =-1;
 8007272:	2701      	movs	r7, #1
 8007274:	427f      	negs	r7, r7
				if( (*(__IO uint16_t*) (PAGEA1_BASE_ADDRESS + 6)) == VarIdx) {
 8007276:	4d84      	ldr	r5, [pc, #528]	; (8007488 <EE_Init+0x324>)
						EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,
 8007278:	4b84      	ldr	r3, [pc, #528]	; (800748c <EE_Init+0x328>)
 800727a:	4698      	mov	r8, r3
 800727c:	e005      	b.n	800728a <EE_Init+0x126>
					x =VarIdx;
 800727e:	b227      	sxth	r7, r4
 8007280:	e008      	b.n	8007294 <EE_Init+0x130>
 8007282:	3401      	adds	r4, #1
			for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++) {
 8007284:	4b82      	ldr	r3, [pc, #520]	; (8007490 <EE_Init+0x32c>)
 8007286:	429c      	cmp	r4, r3
 8007288:	d018      	beq.n	80072bc <EE_Init+0x158>
 800728a:	b2a6      	uxth	r6, r4
				if( (*(__IO uint16_t*) (PAGEA1_BASE_ADDRESS + 6)) == VarIdx) {
 800728c:	882b      	ldrh	r3, [r5, #0]
 800728e:	b29b      	uxth	r3, r3
 8007290:	42b3      	cmp	r3, r6
 8007292:	d0f4      	beq.n	800727e <EE_Init+0x11a>
				if(VarIdx != x) {
 8007294:	42bc      	cmp	r4, r7
 8007296:	d0f4      	beq.n	8007282 <EE_Init+0x11e>
					ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007298:	497c      	ldr	r1, [pc, #496]	; (800748c <EE_Init+0x328>)
 800729a:	0030      	movs	r0, r6
 800729c:	f7ff fe26 	bl	8006eec <EE_ReadVariable>
					if(ReadStatus != 0x1) {
 80072a0:	2801      	cmp	r0, #1
 80072a2:	d0ee      	beq.n	8007282 <EE_Init+0x11e>
						EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,
 80072a4:	4643      	mov	r3, r8
 80072a6:	8819      	ldrh	r1, [r3, #0]
 80072a8:	0030      	movs	r0, r6
 80072aa:	f7ff fdb3 	bl	8006e14 <EE_VerifyPageFullWriteVariable>
 80072ae:	0006      	movs	r6, r0
						FlashStatus =FLASH_WaitForLastOperation(
 80072b0:	4871      	ldr	r0, [pc, #452]	; (8007478 <EE_Init+0x314>)
 80072b2:	f008 f9a5 	bl	800f600 <FLASH_WaitForLastOperation>
						if(FlashStatus != HAL_OK) {
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d0e3      	beq.n	8007282 <EE_Init+0x11e>
 80072ba:	e773      	b.n	80071a4 <EE_Init+0x40>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,
 80072bc:	2200      	movs	r2, #0
 80072be:	2300      	movs	r3, #0
 80072c0:	4969      	ldr	r1, [pc, #420]	; (8007468 <EE_Init+0x304>)
 80072c2:	2001      	movs	r0, #1
 80072c4:	f008 f9ca 	bl	800f65c <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation(
 80072c8:	486b      	ldr	r0, [pc, #428]	; (8007478 <EE_Init+0x314>)
 80072ca:	f008 f999 	bl	800f600 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK) {
 80072ce:	2800      	cmp	r0, #0
 80072d0:	d003      	beq.n	80072da <EE_Init+0x176>
				return pFlash.ErrorCode;
 80072d2:	4b6a      	ldr	r3, [pc, #424]	; (800747c <EE_Init+0x318>)
 80072d4:	69de      	ldr	r6, [r3, #28]
 80072d6:	b2b6      	uxth	r6, r6
 80072d8:	e764      	b.n	80071a4 <EE_Init+0x40>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80072da:	4a6a      	ldr	r2, [pc, #424]	; (8007484 <EE_Init+0x320>)
 80072dc:	6913      	ldr	r3, [r2, #16]
 80072de:	2101      	movs	r1, #1
 80072e0:	438b      	bics	r3, r1
 80072e2:	6113      	str	r3, [r2, #16]
			FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80072e4:	4861      	ldr	r0, [pc, #388]	; (800746c <EE_Init+0x308>)
 80072e6:	f008 fa31 	bl	800f74c <FLASH_PageErase>
			FlashStatus =FLASH_WaitForLastOperation(
 80072ea:	4863      	ldr	r0, [pc, #396]	; (8007478 <EE_Init+0x314>)
 80072ec:	f008 f988 	bl	800f600 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK) {
 80072f0:	2800      	cmp	r0, #0
 80072f2:	d003      	beq.n	80072fc <EE_Init+0x198>
				return pFlash.ErrorCode;
 80072f4:	4b61      	ldr	r3, [pc, #388]	; (800747c <EE_Init+0x318>)
 80072f6:	69de      	ldr	r6, [r3, #28]
 80072f8:	b2b6      	uxth	r6, r6
 80072fa:	e753      	b.n	80071a4 <EE_Init+0x40>
				FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80072fc:	4865      	ldr	r0, [pc, #404]	; (8007494 <EE_Init+0x330>)
 80072fe:	f008 fa25 	bl	800f74c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation(
 8007302:	485d      	ldr	r0, [pc, #372]	; (8007478 <EE_Init+0x314>)
 8007304:	f008 f97c 	bl	800f600 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK) {
 8007308:	2800      	cmp	r0, #0
 800730a:	d105      	bne.n	8007318 <EE_Init+0x1b4>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800730c:	4a5d      	ldr	r2, [pc, #372]	; (8007484 <EE_Init+0x320>)
 800730e:	6913      	ldr	r3, [r2, #16]
 8007310:	2102      	movs	r1, #2
 8007312:	438b      	bics	r3, r1
 8007314:	6113      	str	r3, [r2, #16]
 8007316:	e742      	b.n	800719e <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007318:	4b58      	ldr	r3, [pc, #352]	; (800747c <EE_Init+0x318>)
 800731a:	69de      	ldr	r6, [r3, #28]
 800731c:	b2b6      	uxth	r6, r6
 800731e:	e741      	b.n	80071a4 <EE_Init+0x40>
		else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007320:	4b54      	ldr	r3, [pc, #336]	; (8007474 <EE_Init+0x310>)
 8007322:	429a      	cmp	r2, r3
 8007324:	d00b      	beq.n	800733e <EE_Init+0x1da>
			FlashStatus =EE_Format();
 8007326:	f7ff feb9 	bl	800709c <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation(
 800732a:	4853      	ldr	r0, [pc, #332]	; (8007478 <EE_Init+0x314>)
 800732c:	f008 f968 	bl	800f600 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK) {
 8007330:	2800      	cmp	r0, #0
 8007332:	d100      	bne.n	8007336 <EE_Init+0x1d2>
 8007334:	e733      	b.n	800719e <EE_Init+0x3a>
				return pFlash.ErrorCode;
 8007336:	4b51      	ldr	r3, [pc, #324]	; (800747c <EE_Init+0x318>)
 8007338:	69de      	ldr	r6, [r3, #28]
 800733a:	b2b6      	uxth	r6, r6
 800733c:	e732      	b.n	80071a4 <EE_Init+0x40>
			FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800733e:	484b      	ldr	r0, [pc, #300]	; (800746c <EE_Init+0x308>)
 8007340:	f008 fa04 	bl	800f74c <FLASH_PageErase>
			FlashStatus =FLASH_WaitForLastOperation(
 8007344:	484c      	ldr	r0, [pc, #304]	; (8007478 <EE_Init+0x314>)
 8007346:	f008 f95b 	bl	800f600 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK) {
 800734a:	2800      	cmp	r0, #0
 800734c:	d003      	beq.n	8007356 <EE_Init+0x1f2>
				return pFlash.ErrorCode;
 800734e:	4b4b      	ldr	r3, [pc, #300]	; (800747c <EE_Init+0x318>)
 8007350:	69de      	ldr	r6, [r3, #28]
 8007352:	b2b6      	uxth	r6, r6
 8007354:	e726      	b.n	80071a4 <EE_Init+0x40>
				FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007356:	484f      	ldr	r0, [pc, #316]	; (8007494 <EE_Init+0x330>)
 8007358:	f008 f9f8 	bl	800f74c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation(
 800735c:	4846      	ldr	r0, [pc, #280]	; (8007478 <EE_Init+0x314>)
 800735e:	f008 f94f 	bl	800f600 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK) {
 8007362:	2800      	cmp	r0, #0
 8007364:	d003      	beq.n	800736e <EE_Init+0x20a>
					return pFlash.ErrorCode;
 8007366:	4b45      	ldr	r3, [pc, #276]	; (800747c <EE_Init+0x318>)
 8007368:	69de      	ldr	r6, [r3, #28]
 800736a:	b2b6      	uxth	r6, r6
 800736c:	e71a      	b.n	80071a4 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800736e:	4a45      	ldr	r2, [pc, #276]	; (8007484 <EE_Init+0x320>)
 8007370:	6913      	ldr	r3, [r2, #16]
 8007372:	2102      	movs	r1, #2
 8007374:	438b      	bics	r3, r1
 8007376:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,
 8007378:	2200      	movs	r2, #0
 800737a:	2300      	movs	r3, #0
 800737c:	493a      	ldr	r1, [pc, #232]	; (8007468 <EE_Init+0x304>)
 800737e:	2001      	movs	r0, #1
 8007380:	f008 f96c 	bl	800f65c <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation(
 8007384:	483c      	ldr	r0, [pc, #240]	; (8007478 <EE_Init+0x314>)
 8007386:	f008 f93b 	bl	800f600 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK) {
 800738a:	2800      	cmp	r0, #0
 800738c:	d003      	beq.n	8007396 <EE_Init+0x232>
				return pFlash.ErrorCode;
 800738e:	4b3b      	ldr	r3, [pc, #236]	; (800747c <EE_Init+0x318>)
 8007390:	69de      	ldr	r6, [r3, #28]
 8007392:	b2b6      	uxth	r6, r6
 8007394:	e706      	b.n	80071a4 <EE_Init+0x40>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007396:	4a3b      	ldr	r2, [pc, #236]	; (8007484 <EE_Init+0x320>)
 8007398:	6913      	ldr	r3, [r2, #16]
 800739a:	2101      	movs	r1, #1
 800739c:	438b      	bics	r3, r1
 800739e:	6113      	str	r3, [r2, #16]
 80073a0:	e6fd      	b.n	800719e <EE_Init+0x3a>
		if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 80073a2:	2a00      	cmp	r2, #0
 80073a4:	d009      	beq.n	80073ba <EE_Init+0x256>
		else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 80073a6:	4b33      	ldr	r3, [pc, #204]	; (8007474 <EE_Init+0x310>)
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d010      	beq.n	80073ce <EE_Init+0x26a>
 80073ac:	2401      	movs	r4, #1
	int16_t x =-1;
 80073ae:	2701      	movs	r7, #1
 80073b0:	427f      	negs	r7, r7
				if( (*(__IO uint16_t*) (PAGEB1_BASE_ADDRESS + 6)) == VarIdx) {
 80073b2:	4d39      	ldr	r5, [pc, #228]	; (8007498 <EE_Init+0x334>)
						EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,
 80073b4:	4b35      	ldr	r3, [pc, #212]	; (800748c <EE_Init+0x328>)
 80073b6:	4698      	mov	r8, r3
 80073b8:	e02d      	b.n	8007416 <EE_Init+0x2b2>
			FlashStatus =EE_Format();
 80073ba:	f7ff fe6f 	bl	800709c <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation(
 80073be:	482e      	ldr	r0, [pc, #184]	; (8007478 <EE_Init+0x314>)
 80073c0:	f008 f91e 	bl	800f600 <FLASH_WaitForLastOperation>
 80073c4:	b286      	uxth	r6, r0
			if(FlashStatus != HAL_OK) {
 80073c6:	2e00      	cmp	r6, #0
 80073c8:	d100      	bne.n	80073cc <EE_Init+0x268>
 80073ca:	e6e8      	b.n	800719e <EE_Init+0x3a>
 80073cc:	e6ea      	b.n	80071a4 <EE_Init+0x40>
			FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80073ce:	4827      	ldr	r0, [pc, #156]	; (800746c <EE_Init+0x308>)
 80073d0:	f008 f9bc 	bl	800f74c <FLASH_PageErase>
			FlashStatus =FLASH_WaitForLastOperation(
 80073d4:	4828      	ldr	r0, [pc, #160]	; (8007478 <EE_Init+0x314>)
 80073d6:	f008 f913 	bl	800f600 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK) {
 80073da:	2800      	cmp	r0, #0
 80073dc:	d003      	beq.n	80073e6 <EE_Init+0x282>
				return pFlash.ErrorCode;
 80073de:	4b27      	ldr	r3, [pc, #156]	; (800747c <EE_Init+0x318>)
 80073e0:	69de      	ldr	r6, [r3, #28]
 80073e2:	b2b6      	uxth	r6, r6
 80073e4:	e6de      	b.n	80071a4 <EE_Init+0x40>
				FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80073e6:	482b      	ldr	r0, [pc, #172]	; (8007494 <EE_Init+0x330>)
 80073e8:	f008 f9b0 	bl	800f74c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation(
 80073ec:	4822      	ldr	r0, [pc, #136]	; (8007478 <EE_Init+0x314>)
 80073ee:	f008 f907 	bl	800f600 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK) {
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d105      	bne.n	8007402 <EE_Init+0x29e>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80073f6:	4a23      	ldr	r2, [pc, #140]	; (8007484 <EE_Init+0x320>)
 80073f8:	6913      	ldr	r3, [r2, #16]
 80073fa:	2102      	movs	r1, #2
 80073fc:	438b      	bics	r3, r1
 80073fe:	6113      	str	r3, [r2, #16]
 8007400:	e6cd      	b.n	800719e <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007402:	4b1e      	ldr	r3, [pc, #120]	; (800747c <EE_Init+0x318>)
 8007404:	69de      	ldr	r6, [r3, #28]
 8007406:	b2b6      	uxth	r6, r6
 8007408:	e6cc      	b.n	80071a4 <EE_Init+0x40>
					x =VarIdx;
 800740a:	b227      	sxth	r7, r4
 800740c:	e008      	b.n	8007420 <EE_Init+0x2bc>
 800740e:	3401      	adds	r4, #1
			for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++) {
 8007410:	4b1f      	ldr	r3, [pc, #124]	; (8007490 <EE_Init+0x32c>)
 8007412:	429c      	cmp	r4, r3
 8007414:	d018      	beq.n	8007448 <EE_Init+0x2e4>
 8007416:	b2a6      	uxth	r6, r4
				if( (*(__IO uint16_t*) (PAGEB1_BASE_ADDRESS + 6)) == VarIdx) {
 8007418:	882b      	ldrh	r3, [r5, #0]
 800741a:	b29b      	uxth	r3, r3
 800741c:	42b3      	cmp	r3, r6
 800741e:	d0f4      	beq.n	800740a <EE_Init+0x2a6>
				if(VarIdx != x) {
 8007420:	42bc      	cmp	r4, r7
 8007422:	d0f4      	beq.n	800740e <EE_Init+0x2aa>
					ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007424:	4919      	ldr	r1, [pc, #100]	; (800748c <EE_Init+0x328>)
 8007426:	0030      	movs	r0, r6
 8007428:	f7ff fd60 	bl	8006eec <EE_ReadVariable>
					if(ReadStatus != 0x1) {
 800742c:	2801      	cmp	r0, #1
 800742e:	d0ee      	beq.n	800740e <EE_Init+0x2aa>
						EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,
 8007430:	4643      	mov	r3, r8
 8007432:	8819      	ldrh	r1, [r3, #0]
 8007434:	0030      	movs	r0, r6
 8007436:	f7ff fced 	bl	8006e14 <EE_VerifyPageFullWriteVariable>
 800743a:	0006      	movs	r6, r0
						FlashStatus =FLASH_WaitForLastOperation(
 800743c:	480e      	ldr	r0, [pc, #56]	; (8007478 <EE_Init+0x314>)
 800743e:	f008 f8df 	bl	800f600 <FLASH_WaitForLastOperation>
						if(FlashStatus != HAL_OK) {
 8007442:	2800      	cmp	r0, #0
 8007444:	d0e3      	beq.n	800740e <EE_Init+0x2aa>
 8007446:	e6ad      	b.n	80071a4 <EE_Init+0x40>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,
 8007448:	2200      	movs	r2, #0
 800744a:	2300      	movs	r3, #0
 800744c:	4907      	ldr	r1, [pc, #28]	; (800746c <EE_Init+0x308>)
 800744e:	2001      	movs	r0, #1
 8007450:	f008 f904 	bl	800f65c <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation(
 8007454:	4808      	ldr	r0, [pc, #32]	; (8007478 <EE_Init+0x314>)
 8007456:	f008 f8d3 	bl	800f600 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK) {
 800745a:	2800      	cmp	r0, #0
 800745c:	d01e      	beq.n	800749c <EE_Init+0x338>
				return pFlash.ErrorCode;
 800745e:	4b07      	ldr	r3, [pc, #28]	; (800747c <EE_Init+0x318>)
 8007460:	69de      	ldr	r6, [r3, #28]
 8007462:	b2b6      	uxth	r6, r6
 8007464:	e69e      	b.n	80071a4 <EE_Init+0x40>
 8007466:	46c0      	nop			; (mov r8, r8)
 8007468:	0801e000 	.word	0x0801e000
 800746c:	0801f000 	.word	0x0801f000
 8007470:	0000eeee 	.word	0x0000eeee
 8007474:	0000ffff 	.word	0x0000ffff
 8007478:	0000c350 	.word	0x0000c350
 800747c:	20006e30 	.word	0x20006e30
 8007480:	0801e800 	.word	0x0801e800
 8007484:	40022000 	.word	0x40022000
 8007488:	0801e006 	.word	0x0801e006
 800748c:	200014d8 	.word	0x200014d8
 8007490:	00000401 	.word	0x00000401
 8007494:	0801f800 	.word	0x0801f800
 8007498:	0801f006 	.word	0x0801f006
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800749c:	4a11      	ldr	r2, [pc, #68]	; (80074e4 <EE_Init+0x380>)
 800749e:	6913      	ldr	r3, [r2, #16]
 80074a0:	2101      	movs	r1, #1
 80074a2:	438b      	bics	r3, r1
 80074a4:	6113      	str	r3, [r2, #16]
			FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 80074a6:	4810      	ldr	r0, [pc, #64]	; (80074e8 <EE_Init+0x384>)
 80074a8:	f008 f950 	bl	800f74c <FLASH_PageErase>
			FlashStatus =FLASH_WaitForLastOperation(
 80074ac:	480f      	ldr	r0, [pc, #60]	; (80074ec <EE_Init+0x388>)
 80074ae:	f008 f8a7 	bl	800f600 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK) {
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d003      	beq.n	80074be <EE_Init+0x35a>
				return pFlash.ErrorCode;
 80074b6:	4b0e      	ldr	r3, [pc, #56]	; (80074f0 <EE_Init+0x38c>)
 80074b8:	69de      	ldr	r6, [r3, #28]
 80074ba:	b2b6      	uxth	r6, r6
 80074bc:	e672      	b.n	80071a4 <EE_Init+0x40>
				FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80074be:	480d      	ldr	r0, [pc, #52]	; (80074f4 <EE_Init+0x390>)
 80074c0:	f008 f944 	bl	800f74c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation(
 80074c4:	4809      	ldr	r0, [pc, #36]	; (80074ec <EE_Init+0x388>)
 80074c6:	f008 f89b 	bl	800f600 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK) {
 80074ca:	2800      	cmp	r0, #0
 80074cc:	d105      	bne.n	80074da <EE_Init+0x376>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80074ce:	4a05      	ldr	r2, [pc, #20]	; (80074e4 <EE_Init+0x380>)
 80074d0:	6913      	ldr	r3, [r2, #16]
 80074d2:	2102      	movs	r1, #2
 80074d4:	438b      	bics	r3, r1
 80074d6:	6113      	str	r3, [r2, #16]
 80074d8:	e661      	b.n	800719e <EE_Init+0x3a>
					return pFlash.ErrorCode;
 80074da:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <EE_Init+0x38c>)
 80074dc:	69de      	ldr	r6, [r3, #28]
 80074de:	b2b6      	uxth	r6, r6
 80074e0:	e660      	b.n	80071a4 <EE_Init+0x40>
 80074e2:	46c0      	nop			; (mov r8, r8)
 80074e4:	40022000 	.word	0x40022000
 80074e8:	0801e000 	.word	0x0801e000
 80074ec:	0000c350 	.word	0x0000c350
 80074f0:	20006e30 	.word	0x20006e30
 80074f4:	0801e800 	.word	0x0801e800

080074f8 <StartDefaultTask>:
}

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void *argument){
 80074f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074fa:	46c6      	mov	lr, r8
 80074fc:	b500      	push	{lr}
	
	/* Infinite loop */
	for(;;) {
		/* Switch indicator LED according to mode */
		switch(indMode){
 80074fe:	4c2b      	ldr	r4, [pc, #172]	; (80075ac <StartDefaultTask+0xb4>)
				break;
			
			case IND_TOPOLOGY:
			RTOS_IND_blink(100)
			;
			indMode =IND_OFF;
 8007500:	46a0      	mov	r8, r4
				break;
			
			case IND_SHORT_BLINK:
			RTOS_IND_blink(30)
			;
			indMode =IND_OFF;
 8007502:	0027      	movs	r7, r4
 8007504:	e020      	b.n	8007548 <StartDefaultTask+0x50>
			RTOS_IND_blink(200)
 8007506:	2680      	movs	r6, #128	; 0x80
 8007508:	0136      	lsls	r6, r6, #4
 800750a:	2590      	movs	r5, #144	; 0x90
 800750c:	05ed      	lsls	r5, r5, #23
 800750e:	2201      	movs	r2, #1
 8007510:	0031      	movs	r1, r6
 8007512:	0028      	movs	r0, r5
 8007514:	f008 fa72 	bl	800f9fc <HAL_GPIO_WritePin>
 8007518:	20c8      	movs	r0, #200	; 0xc8
 800751a:	f005 f978 	bl	800c80e <osDelay>
 800751e:	2200      	movs	r2, #0
 8007520:	0031      	movs	r1, r6
 8007522:	0028      	movs	r0, r5
 8007524:	f008 fa6a 	bl	800f9fc <HAL_GPIO_WritePin>
			indMode =IND_OFF;
 8007528:	4b20      	ldr	r3, [pc, #128]	; (80075ac <StartDefaultTask+0xb4>)
 800752a:	2200      	movs	r2, #0
 800752c:	701a      	strb	r2, [r3, #0]
				break;
			
		}
		
		/* Read button state */
		CheckAttachedButtons();
 800752e:	f000 fc6d 	bl	8007e0c <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8007532:	f7fd fc41 	bl	8004db8 <ExecuteSnippet>
		
		
		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)
 8007536:	4b1e      	ldr	r3, [pc, #120]	; (80075b0 <StartDefaultTask+0xb8>)
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d102      	bne.n	8007544 <StartDefaultTask+0x4c>
		delayButtonStateReset = false;
 800753e:	4b1d      	ldr	r3, [pc, #116]	; (80075b4 <StartDefaultTask+0xbc>)
 8007540:	2200      	movs	r2, #0
 8007542:	701a      	strb	r2, [r3, #0]
		
		taskYIELD();
 8007544:	f007 f810 	bl	800e568 <vPortYield>
		switch(indMode){
 8007548:	7823      	ldrb	r3, [r4, #0]
 800754a:	2b02      	cmp	r3, #2
 800754c:	d004      	beq.n	8007558 <StartDefaultTask+0x60>
 800754e:	2b03      	cmp	r3, #3
 8007550:	d017      	beq.n	8007582 <StartDefaultTask+0x8a>
 8007552:	2b01      	cmp	r3, #1
 8007554:	d1eb      	bne.n	800752e <StartDefaultTask+0x36>
 8007556:	e7d6      	b.n	8007506 <StartDefaultTask+0xe>
			RTOS_IND_blink(100)
 8007558:	2680      	movs	r6, #128	; 0x80
 800755a:	0136      	lsls	r6, r6, #4
 800755c:	2590      	movs	r5, #144	; 0x90
 800755e:	05ed      	lsls	r5, r5, #23
 8007560:	2201      	movs	r2, #1
 8007562:	0031      	movs	r1, r6
 8007564:	0028      	movs	r0, r5
 8007566:	f008 fa49 	bl	800f9fc <HAL_GPIO_WritePin>
 800756a:	2064      	movs	r0, #100	; 0x64
 800756c:	f005 f94f 	bl	800c80e <osDelay>
 8007570:	2200      	movs	r2, #0
 8007572:	0031      	movs	r1, r6
 8007574:	0028      	movs	r0, r5
 8007576:	f008 fa41 	bl	800f9fc <HAL_GPIO_WritePin>
			indMode =IND_OFF;
 800757a:	2300      	movs	r3, #0
 800757c:	4642      	mov	r2, r8
 800757e:	7013      	strb	r3, [r2, #0]
				break;
 8007580:	e7d5      	b.n	800752e <StartDefaultTask+0x36>
			RTOS_IND_blink(30)
 8007582:	2680      	movs	r6, #128	; 0x80
 8007584:	0136      	lsls	r6, r6, #4
 8007586:	2590      	movs	r5, #144	; 0x90
 8007588:	05ed      	lsls	r5, r5, #23
 800758a:	2201      	movs	r2, #1
 800758c:	0031      	movs	r1, r6
 800758e:	0028      	movs	r0, r5
 8007590:	f008 fa34 	bl	800f9fc <HAL_GPIO_WritePin>
 8007594:	201e      	movs	r0, #30
 8007596:	f005 f93a 	bl	800c80e <osDelay>
 800759a:	2200      	movs	r2, #0
 800759c:	0031      	movs	r1, r6
 800759e:	0028      	movs	r0, r5
 80075a0:	f008 fa2c 	bl	800f9fc <HAL_GPIO_WritePin>
			indMode =IND_OFF;
 80075a4:	2300      	movs	r3, #0
 80075a6:	703b      	strb	r3, [r7, #0]
				break;
 80075a8:	e7c1      	b.n	800752e <StartDefaultTask+0x36>
 80075aa:	46c0      	nop			; (mov r8, r8)
 80075ac:	20000ef4 	.word	0x20000ef4
 80075b0:	20001550 	.word	0x20001550
 80075b4:	2000154f 	.word	0x2000154f

080075b8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void){
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	b090      	sub	sp, #64	; 0x40
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",
 80075bc:	25a0      	movs	r5, #160	; 0xa0
 80075be:	006d      	lsls	r5, r5, #1
 80075c0:	2400      	movs	r4, #0
 80075c2:	9403      	str	r4, [sp, #12]
 80075c4:	9402      	str	r4, [sp, #8]
 80075c6:	4b5e      	ldr	r3, [pc, #376]	; (8007740 <MX_FREERTOS_Init+0x188>)
 80075c8:	9301      	str	r3, [sp, #4]
 80075ca:	2603      	movs	r6, #3
 80075cc:	9600      	str	r6, [sp, #0]
 80075ce:	2300      	movs	r3, #0
 80075d0:	002a      	movs	r2, r5
 80075d2:	495c      	ldr	r1, [pc, #368]	; (8007744 <MX_FREERTOS_Init+0x18c>)
 80075d4:	485c      	ldr	r0, [pc, #368]	; (8007748 <MX_FREERTOS_Init+0x190>)
 80075d6:	f005 ff15 	bl	800d404 <xTaskGenericCreate>
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",
 80075da:	9403      	str	r4, [sp, #12]
 80075dc:	9402      	str	r4, [sp, #8]
 80075de:	4b5b      	ldr	r3, [pc, #364]	; (800774c <MX_FREERTOS_Init+0x194>)
 80075e0:	9301      	str	r3, [sp, #4]
 80075e2:	9600      	str	r6, [sp, #0]
 80075e4:	2300      	movs	r3, #0
 80075e6:	002a      	movs	r2, r5
 80075e8:	4959      	ldr	r1, [pc, #356]	; (8007750 <MX_FREERTOS_Init+0x198>)
 80075ea:	485a      	ldr	r0, [pc, #360]	; (8007754 <MX_FREERTOS_Init+0x19c>)
 80075ec:	f005 ff0a 	bl	800d404 <xTaskGenericCreate>
	xTaskCreate(UserTask,(const char* ) "UserTask",
 80075f0:	9403      	str	r4, [sp, #12]
 80075f2:	9402      	str	r4, [sp, #8]
 80075f4:	4b58      	ldr	r3, [pc, #352]	; (8007758 <MX_FREERTOS_Init+0x1a0>)
 80075f6:	9301      	str	r3, [sp, #4]
 80075f8:	9600      	str	r6, [sp, #0]
 80075fa:	2300      	movs	r3, #0
 80075fc:	002a      	movs	r2, r5
 80075fe:	4957      	ldr	r1, [pc, #348]	; (800775c <MX_FREERTOS_Init+0x1a4>)
 8007600:	4857      	ldr	r0, [pc, #348]	; (8007760 <MX_FREERTOS_Init+0x1a8>)
 8007602:	f005 feff 	bl	800d404 <xTaskGenericCreate>
	vRegisterCLICommands();
 8007606:	f7ff fa81 	bl	8006b0c <vRegisterCLICommands>
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,
 800760a:	9403      	str	r4, [sp, #12]
 800760c:	9402      	str	r4, [sp, #8]
 800760e:	4b55      	ldr	r3, [pc, #340]	; (8007764 <MX_FREERTOS_Init+0x1ac>)
 8007610:	9301      	str	r3, [sp, #4]
 8007612:	9600      	str	r6, [sp, #0]
 8007614:	2300      	movs	r3, #0
 8007616:	002a      	movs	r2, r5
 8007618:	4953      	ldr	r1, [pc, #332]	; (8007768 <MX_FREERTOS_Init+0x1b0>)
 800761a:	4854      	ldr	r0, [pc, #336]	; (800776c <MX_FREERTOS_Init+0x1b4>)
 800761c:	f005 fef2 	bl	800d404 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",
 8007620:	4d53      	ldr	r5, [pc, #332]	; (8007770 <MX_FREERTOS_Init+0x1b8>)
 8007622:	9403      	str	r4, [sp, #12]
 8007624:	9402      	str	r4, [sp, #8]
 8007626:	4b53      	ldr	r3, [pc, #332]	; (8007774 <MX_FREERTOS_Init+0x1bc>)
 8007628:	9301      	str	r3, [sp, #4]
 800762a:	3601      	adds	r6, #1
 800762c:	9600      	str	r6, [sp, #0]
 800762e:	2301      	movs	r3, #1
 8007630:	22a0      	movs	r2, #160	; 0xa0
 8007632:	4951      	ldr	r1, [pc, #324]	; (8007778 <MX_FREERTOS_Init+0x1c0>)
 8007634:	0028      	movs	r0, r5
 8007636:	f005 fee5 	bl	800d404 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",
 800763a:	9403      	str	r4, [sp, #12]
 800763c:	9402      	str	r4, [sp, #8]
 800763e:	4b4f      	ldr	r3, [pc, #316]	; (800777c <MX_FREERTOS_Init+0x1c4>)
 8007640:	9301      	str	r3, [sp, #4]
 8007642:	9600      	str	r6, [sp, #0]
 8007644:	2302      	movs	r3, #2
 8007646:	22a0      	movs	r2, #160	; 0xa0
 8007648:	494d      	ldr	r1, [pc, #308]	; (8007780 <MX_FREERTOS_Init+0x1c8>)
 800764a:	0028      	movs	r0, r5
 800764c:	f005 feda 	bl	800d404 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",
 8007650:	9403      	str	r4, [sp, #12]
 8007652:	9402      	str	r4, [sp, #8]
 8007654:	4b4b      	ldr	r3, [pc, #300]	; (8007784 <MX_FREERTOS_Init+0x1cc>)
 8007656:	9301      	str	r3, [sp, #4]
 8007658:	9600      	str	r6, [sp, #0]
 800765a:	2303      	movs	r3, #3
 800765c:	22a0      	movs	r2, #160	; 0xa0
 800765e:	494a      	ldr	r1, [pc, #296]	; (8007788 <MX_FREERTOS_Init+0x1d0>)
 8007660:	0028      	movs	r0, r5
 8007662:	f005 fecf 	bl	800d404 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",
 8007666:	9403      	str	r4, [sp, #12]
 8007668:	9402      	str	r4, [sp, #8]
 800766a:	4b48      	ldr	r3, [pc, #288]	; (800778c <MX_FREERTOS_Init+0x1d4>)
 800766c:	9301      	str	r3, [sp, #4]
 800766e:	9600      	str	r6, [sp, #0]
 8007670:	2304      	movs	r3, #4
 8007672:	22a0      	movs	r2, #160	; 0xa0
 8007674:	4946      	ldr	r1, [pc, #280]	; (8007790 <MX_FREERTOS_Init+0x1d8>)
 8007676:	0028      	movs	r0, r5
 8007678:	f005 fec4 	bl	800d404 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",
 800767c:	9403      	str	r4, [sp, #12]
 800767e:	9402      	str	r4, [sp, #8]
 8007680:	4b44      	ldr	r3, [pc, #272]	; (8007794 <MX_FREERTOS_Init+0x1dc>)
 8007682:	9301      	str	r3, [sp, #4]
 8007684:	9600      	str	r6, [sp, #0]
 8007686:	2305      	movs	r3, #5
 8007688:	22a0      	movs	r2, #160	; 0xa0
 800768a:	4943      	ldr	r1, [pc, #268]	; (8007798 <MX_FREERTOS_Init+0x1e0>)
 800768c:	0028      	movs	r0, r5
 800768e:	f005 feb9 	bl	800d404 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",
 8007692:	9403      	str	r4, [sp, #12]
 8007694:	9402      	str	r4, [sp, #8]
 8007696:	4b41      	ldr	r3, [pc, #260]	; (800779c <MX_FREERTOS_Init+0x1e4>)
 8007698:	9301      	str	r3, [sp, #4]
 800769a:	9600      	str	r6, [sp, #0]
 800769c:	2306      	movs	r3, #6
 800769e:	22a0      	movs	r2, #160	; 0xa0
 80076a0:	493f      	ldr	r1, [pc, #252]	; (80077a0 <MX_FREERTOS_Init+0x1e8>)
 80076a2:	0028      	movs	r0, r5
 80076a4:	f005 feae 	bl	800d404 <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1);
 80076a8:	940f      	str	r4, [sp, #60]	; 0x3c
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 80076aa:	2101      	movs	r1, #1
 80076ac:	a80f      	add	r0, sp, #60	; 0x3c
 80076ae:	f005 f8b6 	bl	800c81e <osSemaphoreCreate>
 80076b2:	4e3c      	ldr	r6, [pc, #240]	; (80077a4 <MX_FREERTOS_Init+0x1ec>)
 80076b4:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 80076b6:	940e      	str	r4, [sp, #56]	; 0x38
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 80076b8:	2101      	movs	r1, #1
 80076ba:	a80e      	add	r0, sp, #56	; 0x38
 80076bc:	f005 f8af 	bl	800c81e <osSemaphoreCreate>
 80076c0:	4d39      	ldr	r5, [pc, #228]	; (80077a8 <MX_FREERTOS_Init+0x1f0>)
 80076c2:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3);
 80076c4:	940d      	str	r4, [sp, #52]	; 0x34
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 80076c6:	2101      	movs	r1, #1
 80076c8:	a80d      	add	r0, sp, #52	; 0x34
 80076ca:	f005 f8a8 	bl	800c81e <osSemaphoreCreate>
 80076ce:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 80076d0:	940c      	str	r4, [sp, #48]	; 0x30
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 80076d2:	2101      	movs	r1, #1
 80076d4:	a80c      	add	r0, sp, #48	; 0x30
 80076d6:	f005 f8a2 	bl	800c81e <osSemaphoreCreate>
 80076da:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5);
 80076dc:	940b      	str	r4, [sp, #44]	; 0x2c
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 80076de:	2101      	movs	r1, #1
 80076e0:	a80b      	add	r0, sp, #44	; 0x2c
 80076e2:	f005 f89c 	bl	800c81e <osSemaphoreCreate>
 80076e6:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 80076e8:	940a      	str	r4, [sp, #40]	; 0x28
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 80076ea:	2101      	movs	r1, #1
 80076ec:	a80a      	add	r0, sp, #40	; 0x28
 80076ee:	f005 f896 	bl	800c81e <osSemaphoreCreate>
 80076f2:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7);
 80076f4:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 80076f6:	2101      	movs	r1, #1
 80076f8:	a809      	add	r0, sp, #36	; 0x24
 80076fa:	f005 f890 	bl	800c81e <osSemaphoreCreate>
 80076fe:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8);
 8007700:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007702:	2101      	movs	r1, #1
 8007704:	a808      	add	r0, sp, #32
 8007706:	f005 f88a 	bl	800c81e <osSemaphoreCreate>
 800770a:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9);
 800770c:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 800770e:	2101      	movs	r1, #1
 8007710:	a807      	add	r0, sp, #28
 8007712:	f005 f884 	bl	800c81e <osSemaphoreCreate>
 8007716:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10);
 8007718:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 800771a:	2101      	movs	r1, #1
 800771c:	a806      	add	r0, sp, #24
 800771e:	f005 f87e 	bl	800c81e <osSemaphoreCreate>
 8007722:	6168      	str	r0, [r5, #20]
	osSemaphoreDef(SemaphoreP11);
 8007724:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007726:	2101      	movs	r1, #1
 8007728:	a805      	add	r0, sp, #20
 800772a:	f005 f878 	bl	800c81e <osSemaphoreCreate>
 800772e:	61b0      	str	r0, [r6, #24]
	osSemaphoreDef(SemaphoreP12);
 8007730:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8007732:	2101      	movs	r1, #1
 8007734:	a804      	add	r0, sp, #16
 8007736:	f005 f872 	bl	800c81e <osSemaphoreCreate>
 800773a:	61a8      	str	r0, [r5, #24]
}
 800773c:	b010      	add	sp, #64	; 0x40
 800773e:	bd70      	pop	{r4, r5, r6, pc}
 8007740:	200014fc 	.word	0x200014fc
 8007744:	0801898c 	.word	0x0801898c
 8007748:	080074f9 	.word	0x080074f9
 800774c:	200014dc 	.word	0x200014dc
 8007750:	08018998 	.word	0x08018998
 8007754:	08008ae5 	.word	0x08008ae5
 8007758:	200014f8 	.word	0x200014f8
 800775c:	080189a4 	.word	0x080189a4
 8007760:	0801152b 	.word	0x0801152b
 8007764:	20001504 	.word	0x20001504
 8007768:	080189b0 	.word	0x080189b0
 800776c:	08004a39 	.word	0x08004a39
 8007770:	08008e85 	.word	0x08008e85
 8007774:	200014e0 	.word	0x200014e0
 8007778:	080189b8 	.word	0x080189b8
 800777c:	200014e4 	.word	0x200014e4
 8007780:	080189c4 	.word	0x080189c4
 8007784:	200014e8 	.word	0x200014e8
 8007788:	080189d0 	.word	0x080189d0
 800778c:	200014ec 	.word	0x200014ec
 8007790:	080189dc 	.word	0x080189dc
 8007794:	200014f0 	.word	0x200014f0
 8007798:	080189e8 	.word	0x080189e8
 800779c:	200014f4 	.word	0x200014f4
 80077a0:	080189f4 	.word	0x080189f4
 80077a4:	20006a24 	.word	0x20006a24
 80077a8:	20006a08 	.word	0x20006a08

080077ac <vMainConfigureTimerForRunTimeStats>:
	
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats(void){
 80077ac:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 80077ae:	4b04      	ldr	r3, [pc, #16]	; (80077c0 <vMainConfigureTimerForRunTimeStats+0x14>)
 80077b0:	6818      	ldr	r0, [r3, #0]
 80077b2:	4904      	ldr	r1, [pc, #16]	; (80077c4 <vMainConfigureTimerForRunTimeStats+0x18>)
 80077b4:	f7f8 fccc 	bl	8000150 <__udivsi3>
 80077b8:	4b03      	ldr	r3, [pc, #12]	; (80077c8 <vMainConfigureTimerForRunTimeStats+0x1c>)
 80077ba:	6018      	str	r0, [r3, #0]
}
 80077bc:	bd10      	pop	{r4, pc}
 80077be:	46c0      	nop			; (mov r8, r8)
 80077c0:	20000090 	.word	0x20000090
 80077c4:	00002710 	.word	0x00002710
 80077c8:	20001500 	.word	0x20001500

080077cc <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 80077cc:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue = ( configCPU_CLOCK_HZ
	    / configTICK_RATE_HZ) - 1UL;
 80077ce:	4b0f      	ldr	r3, [pc, #60]	; (800780c <ulMainGetRunTimeCounterValue+0x40>)
 80077d0:	6818      	ldr	r0, [r3, #0]
 80077d2:	21fa      	movs	r1, #250	; 0xfa
 80077d4:	0089      	lsls	r1, r1, #2
 80077d6:	f7f8 fcbb 	bl	8000150 <__udivsi3>
	const uint32_t ulSysTickReloadValue = ( configCPU_CLOCK_HZ
 80077da:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80077dc:	4b0c      	ldr	r3, [pc, #48]	; (8007810 <ulMainGetRunTimeCounterValue+0x44>)
 80077de:	681c      	ldr	r4, [r3, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 80077e0:	f005 ffa2 	bl	800d728 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if( (*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL) {
 80077e4:	4b0b      	ldr	r3, [pc, #44]	; (8007814 <ulMainGetRunTimeCounterValue+0x48>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	015b      	lsls	r3, r3, #5
 80077ea:	d50d      	bpl.n	8007808 <ulMainGetRunTimeCounterValue+0x3c>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 80077ec:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80077ee:	4b08      	ldr	r3, [pc, #32]	; (8007810 <ulMainGetRunTimeCounterValue+0x44>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	1aed      	subs	r5, r5, r3
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn = (ulTickCount * 10UL);
 80077f4:	0084      	lsls	r4, r0, #2
 80077f6:	1824      	adds	r4, r4, r0
 80077f8:	0064      	lsls	r4, r4, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn += (ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 80077fa:	4b07      	ldr	r3, [pc, #28]	; (8007818 <ulMainGetRunTimeCounterValue+0x4c>)
 80077fc:	6819      	ldr	r1, [r3, #0]
 80077fe:	0028      	movs	r0, r5
 8007800:	f7f8 fca6 	bl	8000150 <__udivsi3>
 8007804:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8007806:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007808:	1b2d      	subs	r5, r5, r4
 800780a:	e7f3      	b.n	80077f4 <ulMainGetRunTimeCounterValue+0x28>
 800780c:	20000090 	.word	0x20000090
 8007810:	e000e018 	.word	0xe000e018
 8007814:	e000ed04 	.word	0xe000ed04
 8007818:	20001500 	.word	0x20001500

0800781c <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port){
}
 800781c:	4770      	bx	lr
	...

08007820 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port){
 8007820:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec,
 8007822:	00c2      	lsls	r2, r0, #3
 8007824:	1812      	adds	r2, r2, r0
 8007826:	4b1b      	ldr	r3, [pc, #108]	; (8007894 <CheckForTimedButtonPress+0x74>)
 8007828:	189b      	adds	r3, r3, r2
 800782a:	789c      	ldrb	r4, [r3, #2]
	/* Convert to ms */
	t1 *=1000;
	t2 *=1000;
	t3 *=1000;
	
	if(pressCounter[port] == t1) {
 800782c:	0082      	lsls	r2, r0, #2
 800782e:	4b1a      	ldr	r3, [pc, #104]	; (8007898 <CheckForTimedButtonPress+0x78>)
 8007830:	58d1      	ldr	r1, [r2, r3]
	t1 *=1000;
 8007832:	0163      	lsls	r3, r4, #5
 8007834:	1b1b      	subs	r3, r3, r4
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	191b      	adds	r3, r3, r4
 800783a:	00db      	lsls	r3, r3, #3
	if(pressCounter[port] == t1) {
 800783c:	4299      	cmp	r1, r3
 800783e:	d01c      	beq.n	800787a <CheckForTimedButtonPress+0x5a>
	uint32_t t1 =button[port].pressedX1Sec, t2 =button[port].pressedX2Sec,
 8007840:	00c2      	lsls	r2, r0, #3
 8007842:	1812      	adds	r2, r2, r0
 8007844:	4b13      	ldr	r3, [pc, #76]	; (8007894 <CheckForTimedButtonPress+0x74>)
 8007846:	189b      	adds	r3, r3, r2
 8007848:	78dc      	ldrb	r4, [r3, #3]
	t2 *=1000;
 800784a:	0163      	lsls	r3, r4, #5
 800784c:	1b1b      	subs	r3, r3, r4
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	191b      	adds	r3, r3, r4
 8007852:	00db      	lsls	r3, r3, #3
		button[port].state =PRESSED_FOR_X1_SEC;
	}
	else if(pressCounter[port] == t2) {
 8007854:	4299      	cmp	r1, r3
 8007856:	d017      	beq.n	8007888 <CheckForTimedButtonPress+0x68>
	    t3 =button[port].pressedX3Sec;
 8007858:	00c2      	lsls	r2, r0, #3
 800785a:	1812      	adds	r2, r2, r0
 800785c:	4b0d      	ldr	r3, [pc, #52]	; (8007894 <CheckForTimedButtonPress+0x74>)
 800785e:	189b      	adds	r3, r3, r2
 8007860:	791c      	ldrb	r4, [r3, #4]
	t3 *=1000;
 8007862:	0163      	lsls	r3, r4, #5
 8007864:	1b1b      	subs	r3, r3, r4
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	191b      	adds	r3, r3, r4
 800786a:	00db      	lsls	r3, r3, #3
		button[port].state =PRESSED_FOR_X2_SEC;
	}
	else if(pressCounter[port] == t3) {
 800786c:	4299      	cmp	r1, r3
 800786e:	d109      	bne.n	8007884 <CheckForTimedButtonPress+0x64>
		button[port].state =PRESSED_FOR_X2_SEC;
 8007870:	0010      	movs	r0, r2
 8007872:	4b08      	ldr	r3, [pc, #32]	; (8007894 <CheckForTimedButtonPress+0x74>)
 8007874:	220a      	movs	r2, #10
 8007876:	54c2      	strb	r2, [r0, r3]
 8007878:	e004      	b.n	8007884 <CheckForTimedButtonPress+0x64>
		button[port].state =PRESSED_FOR_X1_SEC;
 800787a:	00c3      	lsls	r3, r0, #3
 800787c:	1818      	adds	r0, r3, r0
 800787e:	4b05      	ldr	r3, [pc, #20]	; (8007894 <CheckForTimedButtonPress+0x74>)
 8007880:	2209      	movs	r2, #9
 8007882:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 8007884:	2000      	movs	r0, #0
 8007886:	bd10      	pop	{r4, pc}
		button[port].state =PRESSED_FOR_X2_SEC;
 8007888:	0010      	movs	r0, r2
 800788a:	4b02      	ldr	r3, [pc, #8]	; (8007894 <CheckForTimedButtonPress+0x74>)
 800788c:	220a      	movs	r2, #10
 800788e:	54c2      	strb	r2, [r0, r3]
 8007890:	e7f8      	b.n	8007884 <CheckForTimedButtonPress+0x64>
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	20001508 	.word	0x20001508
 8007898:	20001554 	.word	0x20001554

0800789c <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port){
 800789c:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec,
 800789e:	00c2      	lsls	r2, r0, #3
 80078a0:	1812      	adds	r2, r2, r0
 80078a2:	4b1b      	ldr	r3, [pc, #108]	; (8007910 <CheckForTimedButtonRelease+0x74>)
 80078a4:	189b      	adds	r3, r3, r2
 80078a6:	795c      	ldrb	r4, [r3, #5]
	/* Convert to ms */
	t1 *=1000;
	t2 *=1000;
	t3 *=1000;
	
	if(releaseCounter[port] == t1) {
 80078a8:	0082      	lsls	r2, r0, #2
 80078aa:	4b1a      	ldr	r3, [pc, #104]	; (8007914 <CheckForTimedButtonRelease+0x78>)
 80078ac:	58d1      	ldr	r1, [r2, r3]
	t1 *=1000;
 80078ae:	0163      	lsls	r3, r4, #5
 80078b0:	1b1b      	subs	r3, r3, r4
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	191b      	adds	r3, r3, r4
 80078b6:	00db      	lsls	r3, r3, #3
	if(releaseCounter[port] == t1) {
 80078b8:	4299      	cmp	r1, r3
 80078ba:	d01c      	beq.n	80078f6 <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 =button[port].releasedY1Sec, t2 =button[port].releasedY2Sec,
 80078bc:	00c2      	lsls	r2, r0, #3
 80078be:	1812      	adds	r2, r2, r0
 80078c0:	4b13      	ldr	r3, [pc, #76]	; (8007910 <CheckForTimedButtonRelease+0x74>)
 80078c2:	189b      	adds	r3, r3, r2
 80078c4:	799c      	ldrb	r4, [r3, #6]
	t2 *=1000;
 80078c6:	0163      	lsls	r3, r4, #5
 80078c8:	1b1b      	subs	r3, r3, r4
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	191b      	adds	r3, r3, r4
 80078ce:	00db      	lsls	r3, r3, #3
		button[port].state =RELEASED_FOR_Y1_SEC;
	}
	else if(releaseCounter[port] == t2) {
 80078d0:	4299      	cmp	r1, r3
 80078d2:	d017      	beq.n	8007904 <CheckForTimedButtonRelease+0x68>
	    t3 =button[port].releasedY3Sec;
 80078d4:	00c2      	lsls	r2, r0, #3
 80078d6:	1812      	adds	r2, r2, r0
 80078d8:	4b0d      	ldr	r3, [pc, #52]	; (8007910 <CheckForTimedButtonRelease+0x74>)
 80078da:	189b      	adds	r3, r3, r2
 80078dc:	79dc      	ldrb	r4, [r3, #7]
	t3 *=1000;
 80078de:	0163      	lsls	r3, r4, #5
 80078e0:	1b1b      	subs	r3, r3, r4
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	191b      	adds	r3, r3, r4
 80078e6:	00db      	lsls	r3, r3, #3
		button[port].state =RELEASED_FOR_Y2_SEC;
	}
	else if(releaseCounter[port] == t3) {
 80078e8:	4299      	cmp	r1, r3
 80078ea:	d109      	bne.n	8007900 <CheckForTimedButtonRelease+0x64>
		button[port].state =RELEASED_FOR_Y2_SEC;
 80078ec:	0010      	movs	r0, r2
 80078ee:	4b08      	ldr	r3, [pc, #32]	; (8007910 <CheckForTimedButtonRelease+0x74>)
 80078f0:	220d      	movs	r2, #13
 80078f2:	54c2      	strb	r2, [r0, r3]
 80078f4:	e004      	b.n	8007900 <CheckForTimedButtonRelease+0x64>
		button[port].state =RELEASED_FOR_Y1_SEC;
 80078f6:	00c3      	lsls	r3, r0, #3
 80078f8:	1818      	adds	r0, r3, r0
 80078fa:	4b05      	ldr	r3, [pc, #20]	; (8007910 <CheckForTimedButtonRelease+0x74>)
 80078fc:	220c      	movs	r2, #12
 80078fe:	54c2      	strb	r2, [r0, r3]
	}
	
	return result;
}
 8007900:	2000      	movs	r0, #0
 8007902:	bd10      	pop	{r4, pc}
		button[port].state =RELEASED_FOR_Y2_SEC;
 8007904:	0010      	movs	r0, r2
 8007906:	4b02      	ldr	r3, [pc, #8]	; (8007910 <CheckForTimedButtonRelease+0x74>)
 8007908:	220d      	movs	r2, #13
 800790a:	54c2      	strb	r2, [r0, r3]
 800790c:	e7f8      	b.n	8007900 <CheckForTimedButtonRelease+0x64>
 800790e:	46c0      	nop			; (mov r8, r8)
 8007910:	20001508 	.word	0x20001508
 8007914:	20001570 	.word	0x20001570

08007918 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port){
 8007918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800791a:	b08d      	sub	sp, #52	; 0x34
 800791c:	0006      	movs	r6, r0
 800791e:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 =0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if(BOS_initialized) {
 8007920:	4b41      	ldr	r3, [pc, #260]	; (8007a28 <AddPortButton+0x110>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d157      	bne.n	80079d8 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] =PORTBUTTON;
 8007928:	4b40      	ldr	r3, [pc, #256]	; (8007a2c <AddPortButton+0x114>)
 800792a:	2204      	movs	r2, #4
 800792c:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if(BOS_initialized) {
 800792e:	4b3e      	ldr	r3, [pc, #248]	; (8007a28 <AddPortButton+0x110>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d15a      	bne.n	80079ec <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 8007936:	2512      	movs	r5, #18
 8007938:	446d      	add	r5, sp
 800793a:	af04      	add	r7, sp, #16
 800793c:	9700      	str	r7, [sp, #0]
 800793e:	ab05      	add	r3, sp, #20
 8007940:	002a      	movs	r2, r5
 8007942:	a906      	add	r1, sp, #24
 8007944:	0020      	movs	r0, r4
 8007946:	f004 f895 	bl	800ba74 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin =TX_Pin;
 800794a:	882b      	ldrh	r3, [r5, #0]
 800794c:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800794e:	2301      	movs	r3, #1
 8007950:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007952:	2500      	movs	r5, #0
 8007954:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8007956:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port,&GPIO_InitStruct);
 8007958:	a907      	add	r1, sp, #28
 800795a:	9806      	ldr	r0, [sp, #24]
 800795c:	f007 ff68 	bl	800f830 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin =RX_Pin;
 8007960:	883b      	ldrh	r3, [r7, #0]
 8007962:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007964:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007966:	2302      	movs	r3, #2
 8007968:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port,&GPIO_InitStruct);
 800796a:	a907      	add	r1, sp, #28
 800796c:	9805      	ldr	r0, [sp, #20]
 800796e:	f007 ff5f 	bl	800f830 <HAL_GPIO_Init>
	
	/* 4. Update button struct */
	button[port].type =buttonType;
 8007972:	00e2      	lsls	r2, r4, #3
 8007974:	1912      	adds	r2, r2, r4
 8007976:	4b2e      	ldr	r3, [pc, #184]	; (8007a30 <AddPortButton+0x118>)
 8007978:	189b      	adds	r3, r3, r2
 800797a:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 800797c:	0025      	movs	r5, r4
 800797e:	353a      	adds	r5, #58	; 0x3a
 8007980:	00ad      	lsls	r5, r5, #2
 8007982:	210e      	movs	r1, #14
 8007984:	4469      	add	r1, sp
 8007986:	0028      	movs	r0, r5
 8007988:	f7ff fab0 	bl	8006eec <EE_ReadVariable>
	if(!res)// This variable exists
 800798c:	2800      	cmp	r0, #0
 800798e:	d133      	bne.n	80079f8 <AddPortButton+0xe0>
	{
		temp8 =(uint8_t) (temp16 >> 8);
 8007990:	230e      	movs	r3, #14
 8007992:	446b      	add	r3, sp
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	0a1b      	lsrs	r3, r3, #8
		if( ( (temp8 >> 4) == port) && ( (temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 8007998:	091a      	lsrs	r2, r3, #4
 800799a:	42a2      	cmp	r2, r4
 800799c:	d103      	bne.n	80079a6 <AddPortButton+0x8e>
 800799e:	220f      	movs	r2, #15
 80079a0:	4013      	ands	r3, r2
 80079a2:	42b3      	cmp	r3, r6
 80079a4:	d015      	beq.n	80079d2 <AddPortButton+0xba>
		return BOS_OK;
		else// Update the variable
		{
			temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 80079a6:	0324      	lsls	r4, r4, #12
 80079a8:	0231      	lsls	r1, r6, #8
 80079aa:	4321      	orrs	r1, r4
 80079ac:	b289      	uxth	r1, r1
 80079ae:	230e      	movs	r3, #14
 80079b0:	446b      	add	r3, sp
 80079b2:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 80079b4:	0028      	movs	r0, r5
 80079b6:	f7ff fac9 	bl	8006f4c <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 80079ba:	1c68      	adds	r0, r5, #1
 80079bc:	2100      	movs	r1, #0
 80079be:	f7ff fac5 	bl	8006f4c <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 80079c2:	1ca8      	adds	r0, r5, #2
 80079c4:	2100      	movs	r1, #0
 80079c6:	f7ff fac1 	bl	8006f4c <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 80079ca:	1ce8      	adds	r0, r5, #3
 80079cc:	2100      	movs	r1, #0
 80079ce:	f7ff fabd 	bl	8006f4c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	return result;
}
 80079d2:	2000      	movs	r0, #0
 80079d4:	b00d      	add	sp, #52	; 0x34
 80079d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 80079d8:	008d      	lsls	r5, r1, #2
 80079da:	4b16      	ldr	r3, [pc, #88]	; (8007a34 <AddPortButton+0x11c>)
 80079dc:	58e8      	ldr	r0, [r5, r3]
 80079de:	f004 ff61 	bl	800c8a4 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 80079e2:	4b15      	ldr	r3, [pc, #84]	; (8007a38 <AddPortButton+0x120>)
 80079e4:	58e8      	ldr	r0, [r5, r3]
 80079e6:	f004 ff5d 	bl	800c8a4 <osSemaphoreRelease>
 80079ea:	e79d      	b.n	8007928 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 80079ec:	0020      	movs	r0, r4
 80079ee:	f004 fdbf 	bl	800c570 <GetUart>
 80079f2:	f008 ffe0 	bl	80109b6 <HAL_UART_DeInit>
 80079f6:	e79e      	b.n	8007936 <AddPortButton+0x1e>
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 80079f8:	0324      	lsls	r4, r4, #12
 80079fa:	0231      	lsls	r1, r6, #8
 80079fc:	4321      	orrs	r1, r4
 80079fe:	b289      	uxth	r1, r1
 8007a00:	230e      	movs	r3, #14
 8007a02:	446b      	add	r3, sp
 8007a04:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8007a06:	0028      	movs	r0, r5
 8007a08:	f7ff faa0 	bl	8006f4c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 8007a0c:	1c68      	adds	r0, r5, #1
 8007a0e:	2100      	movs	r1, #0
 8007a10:	f7ff fa9c 	bl	8006f4c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 8007a14:	1ca8      	adds	r0, r5, #2
 8007a16:	2100      	movs	r1, #0
 8007a18:	f7ff fa98 	bl	8006f4c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 8007a1c:	1ce8      	adds	r0, r5, #3
 8007a1e:	2100      	movs	r1, #0
 8007a20:	f7ff fa94 	bl	8006f4c <EE_WriteVariable>
 8007a24:	e7d5      	b.n	80079d2 <AddPortButton+0xba>
 8007a26:	46c0      	nop			; (mov r8, r8)
 8007a28:	20000a75 	.word	0x20000a75
 8007a2c:	200010f8 	.word	0x200010f8
 8007a30:	20001508 	.word	0x20001508
 8007a34:	20006a24 	.word	0x20006a24
 8007a38:	20006a08 	.word	0x20006a08

08007a3c <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port){
 8007a3c:	b570      	push	{r4, r5, r6, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	0005      	movs	r5, r0
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type =NONE;
 8007a42:	4837      	ldr	r0, [pc, #220]	; (8007b20 <RemovePortButton+0xe4>)
 8007a44:	00e9      	lsls	r1, r5, #3
 8007a46:	1949      	adds	r1, r1, r5
 8007a48:	1842      	adds	r2, r0, r1
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	7053      	strb	r3, [r2, #1]
	button[port].state =NONE;
 8007a4e:	540b      	strb	r3, [r1, r0]
	button[port].events =0;
 8007a50:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec =0;
 8007a52:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec =0;
 8007a54:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec =0;
 8007a56:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec =0;
 8007a58:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec =0;
 8007a5a:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec =0;
 8007a5c:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 8007a5e:	002c      	movs	r4, r5
 8007a60:	343a      	adds	r4, #58	; 0x3a
 8007a62:	00a4      	lsls	r4, r4, #2
 8007a64:	466b      	mov	r3, sp
 8007a66:	1d99      	adds	r1, r3, #6
 8007a68:	0020      	movs	r0, r4
 8007a6a:	f7ff fa3f 	bl	8006eec <EE_ReadVariable>
	if(!res)// This variable exists, reset all to zeros
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d02b      	beq.n	8007aca <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart =GetUart(port);
 8007a72:	0028      	movs	r0, r5
 8007a74:	f004 fd7c 	bl	800c570 <GetUart>
 8007a78:	0006      	movs	r6, r0
	
	if(huart->Instance == USART1) {
 8007a7a:	6803      	ldr	r3, [r0, #0]
 8007a7c:	4a29      	ldr	r2, [pc, #164]	; (8007b24 <RemovePortButton+0xe8>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d034      	beq.n	8007aec <RemovePortButton+0xb0>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	}
	else if(huart->Instance == USART2) {
 8007a82:	4a29      	ldr	r2, [pc, #164]	; (8007b28 <RemovePortButton+0xec>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d035      	beq.n	8007af4 <RemovePortButton+0xb8>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	}
	else if(huart->Instance == USART3) {
 8007a88:	4a28      	ldr	r2, [pc, #160]	; (8007b2c <RemovePortButton+0xf0>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d036      	beq.n	8007afc <RemovePortButton+0xc0>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	}
	else if(huart->Instance == USART4) {
 8007a8e:	4a28      	ldr	r2, [pc, #160]	; (8007b30 <RemovePortButton+0xf4>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d037      	beq.n	8007b04 <RemovePortButton+0xc8>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	}
	else if(huart->Instance == USART5) {
 8007a94:	4a27      	ldr	r2, [pc, #156]	; (8007b34 <RemovePortButton+0xf8>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d038      	beq.n	8007b0c <RemovePortButton+0xd0>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	}
	else if(huart->Instance == USART6) {
 8007a9a:	4a27      	ldr	r2, [pc, #156]	; (8007b38 <RemovePortButton+0xfc>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d039      	beq.n	8007b14 <RemovePortButton+0xd8>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	}
	else if(huart->Instance == USART7) {
 8007aa0:	4a26      	ldr	r2, [pc, #152]	; (8007b3c <RemovePortButton+0x100>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d03a      	beq.n	8007b1c <RemovePortButton+0xe0>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	}
	else if(huart->Instance == USART8) {
 8007aa6:	4a26      	ldr	r2, [pc, #152]	; (8007b40 <RemovePortButton+0x104>)
 8007aa8:	4694      	mov	ip, r2
 8007aaa:	4463      	add	r3, ip
 8007aac:	1e5c      	subs	r4, r3, #1
 8007aae:	41a3      	sbcs	r3, r4
 8007ab0:	425c      	negs	r4, r3
 8007ab2:	b2e4      	uxtb	r4, r4
	}
	else
	result =BOS_ERROR;
	
	/* 4. Start scanning this port */
	portStatus[port] =FREE;
 8007ab4:	4b23      	ldr	r3, [pc, #140]	; (8007b44 <RemovePortButton+0x108>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart,(uint8_t*) &cRxedChar,1);
 8007aba:	3201      	adds	r2, #1
 8007abc:	4922      	ldr	r1, [pc, #136]	; (8007b48 <RemovePortButton+0x10c>)
 8007abe:	0030      	movs	r0, r6
 8007ac0:	f008 ffd2 	bl	8010a68 <HAL_UART_Receive_IT>
	
	return result;
}
 8007ac4:	0020      	movs	r0, r4
 8007ac6:	b002      	add	sp, #8
 8007ac8:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),0);
 8007aca:	2100      	movs	r1, #0
 8007acc:	0020      	movs	r0, r4
 8007ace:	f7ff fa3d 	bl	8006f4c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,0);
 8007ad2:	1c60      	adds	r0, r4, #1
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	f7ff fa39 	bl	8006f4c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,0);
 8007ada:	1ca0      	adds	r0, r4, #2
 8007adc:	2100      	movs	r1, #0
 8007ade:	f7ff fa35 	bl	8006f4c <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,0);
 8007ae2:	1ce0      	adds	r0, r4, #3
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	f7ff fa31 	bl	8006f4c <EE_WriteVariable>
 8007aea:	e7c2      	b.n	8007a72 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8007aec:	f004 fb78 	bl	800c1e0 <MX_USART1_UART_Init>
	BOS_Status result =BOS_OK;
 8007af0:	2400      	movs	r4, #0
 8007af2:	e7df      	b.n	8007ab4 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 8007af4:	f004 fb8c 	bl	800c210 <MX_USART2_UART_Init>
	BOS_Status result =BOS_OK;
 8007af8:	2400      	movs	r4, #0
 8007afa:	e7db      	b.n	8007ab4 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 8007afc:	f004 fba0 	bl	800c240 <MX_USART3_UART_Init>
	BOS_Status result =BOS_OK;
 8007b00:	2400      	movs	r4, #0
 8007b02:	e7d7      	b.n	8007ab4 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 8007b04:	f004 fbb4 	bl	800c270 <MX_USART4_UART_Init>
	BOS_Status result =BOS_OK;
 8007b08:	2400      	movs	r4, #0
 8007b0a:	e7d3      	b.n	8007ab4 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 8007b0c:	f004 fbc8 	bl	800c2a0 <MX_USART5_UART_Init>
	BOS_Status result =BOS_OK;
 8007b10:	2400      	movs	r4, #0
 8007b12:	e7cf      	b.n	8007ab4 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 8007b14:	f004 fbdc 	bl	800c2d0 <MX_USART6_UART_Init>
	BOS_Status result =BOS_OK;
 8007b18:	2400      	movs	r4, #0
 8007b1a:	e7cb      	b.n	8007ab4 <RemovePortButton+0x78>
 8007b1c:	2400      	movs	r4, #0
 8007b1e:	e7c9      	b.n	8007ab4 <RemovePortButton+0x78>
 8007b20:	20001508 	.word	0x20001508
 8007b24:	40013800 	.word	0x40013800
 8007b28:	40004400 	.word	0x40004400
 8007b2c:	40004800 	.word	0x40004800
 8007b30:	40004c00 	.word	0x40004c00
 8007b34:	40005000 	.word	0x40005000
 8007b38:	40011400 	.word	0x40011400
 8007b3c:	40011800 	.word	0x40011800
 8007b40:	bffee400 	.word	0xbffee400
 8007b44:	200010f8 	.word	0x200010f8
 8007b48:	20000e58 	.word	0x20000e58

08007b4c <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
    uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
    uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
    uint8_t mode){
 8007b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b4e:	46de      	mov	lr, fp
 8007b50:	4657      	mov	r7, sl
 8007b52:	464e      	mov	r6, r9
 8007b54:	4645      	mov	r5, r8
 8007b56:	b5e0      	push	{r5, r6, r7, lr}
 8007b58:	b085      	sub	sp, #20
 8007b5a:	0007      	movs	r7, r0
 8007b5c:	001e      	movs	r6, r3
 8007b5e:	ab0e      	add	r3, sp, #56	; 0x38
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	4698      	mov	r8, r3
 8007b64:	ab0f      	add	r3, sp, #60	; 0x3c
 8007b66:	781d      	ldrb	r5, [r3, #0]
 8007b68:	ab10      	add	r3, sp, #64	; 0x40
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	469b      	mov	fp, r3
 8007b6e:	ab11      	add	r3, sp, #68	; 0x44
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	469a      	mov	sl, r3
 8007b74:	ab12      	add	r3, sp, #72	; 0x48
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	4699      	mov	r9, r3
 8007b7a:	ab13      	add	r3, sp, #76	; 0x4c
 8007b7c:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result =BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;
	
	if(button[port].type == NONE)
 8007b7e:	00fc      	lsls	r4, r7, #3
 8007b80:	19e4      	adds	r4, r4, r7
 8007b82:	4b9e      	ldr	r3, [pc, #632]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007b84:	191b      	adds	r3, r3, r4
 8007b86:	785b      	ldrb	r3, [r3, #1]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d04c      	beq.n	8007c26 <SetButtonEvents+0xda>
	return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec =pressed_x1sec;
 8007b8c:	00fc      	lsls	r4, r7, #3
 8007b8e:	19e4      	adds	r4, r4, r7
 8007b90:	4b9a      	ldr	r3, [pc, #616]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007b92:	191b      	adds	r3, r3, r4
 8007b94:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec =pressed_x2sec;
 8007b96:	4644      	mov	r4, r8
 8007b98:	70dc      	strb	r4, [r3, #3]
	button[port].pressedX3Sec =pressed_x3sec;
 8007b9a:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec =released_y1sec;
 8007b9c:	465c      	mov	r4, fp
 8007b9e:	715c      	strb	r4, [r3, #5]
	button[port].releasedY2Sec =released_y2sec;
 8007ba0:	4654      	mov	r4, sl
 8007ba2:	719c      	strb	r4, [r3, #6]
	button[port].releasedY3Sec =released_y3sec;
 8007ba4:	464c      	mov	r4, r9
 8007ba6:	71dc      	strb	r4, [r3, #7]
	
	if(mode == BUTTON_EVENT_MODE_OR
 8007ba8:	2801      	cmp	r0, #1
 8007baa:	d003      	beq.n	8007bb4 <SetButtonEvents+0x68>
	    || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d113      	bne.n	8007bd8 <SetButtonEvents+0x8c>
 8007bb0:	2900      	cmp	r1, #0
 8007bb2:	d042      	beq.n	8007c3a <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 8007bb4:	00f9      	lsls	r1, r7, #3
 8007bb6:	19c9      	adds	r1, r1, r7
 8007bb8:	4b90      	ldr	r3, [pc, #576]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007bba:	185b      	adds	r3, r3, r1
 8007bbc:	7a19      	ldrb	r1, [r3, #8]
 8007bbe:	2401      	movs	r4, #1
 8007bc0:	4321      	orrs	r1, r4
 8007bc2:	7219      	strb	r1, [r3, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &=~BUTTON_EVENT_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR
 8007bc4:	2801      	cmp	r0, #1
 8007bc6:	d10c      	bne.n	8007be2 <SetButtonEvents+0x96>
	    || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8007bc8:	00fa      	lsls	r2, r7, #3
 8007bca:	19d2      	adds	r2, r2, r7
 8007bcc:	4b8b      	ldr	r3, [pc, #556]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007bce:	189b      	adds	r3, r3, r2
 8007bd0:	7a1a      	ldrb	r2, [r3, #8]
 8007bd2:	2102      	movs	r1, #2
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	721a      	strb	r2, [r3, #8]
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
	}
	if(mode == BUTTON_EVENT_MODE_OR
 8007bd8:	2801      	cmp	r0, #1
 8007bda:	d042      	beq.n	8007c62 <SetButtonEvents+0x116>
	    || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d152      	bne.n	8007c86 <SetButtonEvents+0x13a>
 8007be0:	e03d      	b.n	8007c5e <SetButtonEvents+0x112>
	    || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 8007be2:	2800      	cmp	r0, #0
 8007be4:	d031      	beq.n	8007c4a <SetButtonEvents+0xfe>
 8007be6:	e044      	b.n	8007c72 <SetButtonEvents+0x126>
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR
	    || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 8007be8:	2800      	cmp	r0, #0
 8007bea:	d059      	beq.n	8007ca0 <SetButtonEvents+0x154>
 8007bec:	e06d      	b.n	8007cca <SetButtonEvents+0x17e>
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR
	    || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d100      	bne.n	8007bf4 <SetButtonEvents+0xa8>
 8007bf2:	e082      	b.n	8007cfa <SetButtonEvents+0x1ae>
 8007bf4:	e097      	b.n	8007d26 <SetButtonEvents+0x1da>
	}
	else if(mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if(mode == BUTTON_EVENT_MODE_OR
	    || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d100      	bne.n	8007bfc <SetButtonEvents+0xb0>
 8007bfa:	e0f2      	b.n	8007de2 <SetButtonEvents+0x296>
 8007bfc:	e09f      	b.n	8007d3e <SetButtonEvents+0x1f2>
	if(!res)// This variable exists
	{
		temp8 =(uint8_t) (temp16 >> 8);// Keep upper byte
		/* Store event flags */
		if((uint8_t) (temp16) != button[port].events) {// Update only if different
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 8007bfe:	0a19      	lsrs	r1, r3, #8
 8007c00:	0209      	lsls	r1, r1, #8
 8007c02:	4311      	orrs	r1, r2
 8007c04:	ab02      	add	r3, sp, #8
 8007c06:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1),temp16);
 8007c08:	0020      	movs	r0, r4
 8007c0a:	f7ff f99f 	bl	8006f4c <EE_WriteVariable>
 8007c0e:	e0ad      	b.n	8007d6c <SetButtonEvents+0x220>
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
		if(temp16
		    != ( ((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 8007c10:	0019      	movs	r1, r3
 8007c12:	9801      	ldr	r0, [sp, #4]
 8007c14:	f7ff f99a 	bl	8006f4c <EE_WriteVariable>
 8007c18:	e0b7      	b.n	8007d8a <SetButtonEvents+0x23e>
		        | (uint16_t) released_y1sec);
		
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
		if(temp16
		    != ( ((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 8007c1a:	4653      	mov	r3, sl
 8007c1c:	4319      	orrs	r1, r3
 8007c1e:	0030      	movs	r0, r6
 8007c20:	f7ff f994 	bl	8006f4c <EE_WriteVariable>
 8007c24:	e0c0      	b.n	8007da8 <SetButtonEvents+0x25c>
	return BOS_ERR_BUTTON_NOT_DEFINED;
 8007c26:	200b      	movs	r0, #11
	else
	// Variable does not exist. Return error
	return BOS_ERR_BUTTON_NOT_DEFINED;
	
	return result;
}
 8007c28:	b005      	add	sp, #20
 8007c2a:	bc3c      	pop	{r2, r3, r4, r5}
 8007c2c:	4690      	mov	r8, r2
 8007c2e:	4699      	mov	r9, r3
 8007c30:	46a2      	mov	sl, r4
 8007c32:	46ab      	mov	fp, r5
 8007c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BOS_ERR_BUTTON_NOT_DEFINED;
 8007c36:	200b      	movs	r0, #11
 8007c38:	e7f6      	b.n	8007c28 <SetButtonEvents+0xdc>
		button[port].events &=~BUTTON_EVENT_CLICKED;
 8007c3a:	00f9      	lsls	r1, r7, #3
 8007c3c:	19c9      	adds	r1, r1, r7
 8007c3e:	4b6f      	ldr	r3, [pc, #444]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007c40:	185b      	adds	r3, r3, r1
 8007c42:	7a19      	ldrb	r1, [r3, #8]
 8007c44:	2401      	movs	r4, #1
 8007c46:	43a1      	bics	r1, r4
 8007c48:	7219      	strb	r1, [r3, #8]
	    || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 8007c4a:	2a00      	cmp	r2, #0
 8007c4c:	d1bc      	bne.n	8007bc8 <SetButtonEvents+0x7c>
		button[port].events &=~BUTTON_EVENT_DBL_CLICKED;
 8007c4e:	00fa      	lsls	r2, r7, #3
 8007c50:	19d2      	adds	r2, r2, r7
 8007c52:	4b6a      	ldr	r3, [pc, #424]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007c54:	189b      	adds	r3, r3, r2
 8007c56:	7a1a      	ldrb	r2, [r3, #8]
 8007c58:	2102      	movs	r1, #2
 8007c5a:	438a      	bics	r2, r1
 8007c5c:	721a      	strb	r2, [r3, #8]
	    || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 8007c5e:	2e00      	cmp	r6, #0
 8007c60:	d016      	beq.n	8007c90 <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8007c62:	00fa      	lsls	r2, r7, #3
 8007c64:	19d2      	adds	r2, r2, r7
 8007c66:	4b65      	ldr	r3, [pc, #404]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007c68:	189b      	adds	r3, r3, r2
 8007c6a:	7a1a      	ldrb	r2, [r3, #8]
 8007c6c:	2104      	movs	r1, #4
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR
 8007c72:	2801      	cmp	r0, #1
 8007c74:	d1b8      	bne.n	8007be8 <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8007c76:	00fa      	lsls	r2, r7, #3
 8007c78:	19d2      	adds	r2, r2, r7
 8007c7a:	4b60      	ldr	r3, [pc, #384]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007c7c:	189b      	adds	r3, r3, r2
 8007c7e:	7a1a      	ldrb	r2, [r3, #8]
 8007c80:	2108      	movs	r1, #8
 8007c82:	430a      	orrs	r2, r1
 8007c84:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR
 8007c86:	2801      	cmp	r0, #1
 8007c88:	d017      	beq.n	8007cba <SetButtonEvents+0x16e>
	    || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d128      	bne.n	8007ce0 <SetButtonEvents+0x194>
 8007c8e:	e012      	b.n	8007cb6 <SetButtonEvents+0x16a>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8007c90:	00fa      	lsls	r2, r7, #3
 8007c92:	19d2      	adds	r2, r2, r7
 8007c94:	4b59      	ldr	r3, [pc, #356]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007c96:	189b      	adds	r3, r3, r2
 8007c98:	7a1a      	ldrb	r2, [r3, #8]
 8007c9a:	2104      	movs	r1, #4
 8007c9c:	438a      	bics	r2, r1
 8007c9e:	721a      	strb	r2, [r3, #8]
	    || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 8007ca0:	4643      	mov	r3, r8
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1e7      	bne.n	8007c76 <SetButtonEvents+0x12a>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8007ca6:	00fa      	lsls	r2, r7, #3
 8007ca8:	19d2      	adds	r2, r2, r7
 8007caa:	4b54      	ldr	r3, [pc, #336]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007cac:	189b      	adds	r3, r3, r2
 8007cae:	7a1a      	ldrb	r2, [r3, #8]
 8007cb0:	2108      	movs	r1, #8
 8007cb2:	438a      	bics	r2, r1
 8007cb4:	721a      	strb	r2, [r3, #8]
	    || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 8007cb6:	2d00      	cmp	r5, #0
 8007cb8:	d017      	beq.n	8007cea <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8007cba:	00fa      	lsls	r2, r7, #3
 8007cbc:	19d2      	adds	r2, r2, r7
 8007cbe:	4b4f      	ldr	r3, [pc, #316]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007cc0:	189b      	adds	r3, r3, r2
 8007cc2:	7a1a      	ldrb	r2, [r3, #8]
 8007cc4:	2110      	movs	r1, #16
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR
 8007cca:	2801      	cmp	r0, #1
 8007ccc:	d000      	beq.n	8007cd0 <SetButtonEvents+0x184>
 8007cce:	e78e      	b.n	8007bee <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8007cd0:	00fa      	lsls	r2, r7, #3
 8007cd2:	19d2      	adds	r2, r2, r7
 8007cd4:	4b49      	ldr	r3, [pc, #292]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007cd6:	189b      	adds	r3, r3, r2
 8007cd8:	7a1a      	ldrb	r2, [r3, #8]
 8007cda:	2120      	movs	r1, #32
 8007cdc:	430a      	orrs	r2, r1
 8007cde:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR
 8007ce0:	2801      	cmp	r0, #1
 8007ce2:	d018      	beq.n	8007d16 <SetButtonEvents+0x1ca>
	    || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d12a      	bne.n	8007d3e <SetButtonEvents+0x1f2>
 8007ce8:	e012      	b.n	8007d10 <SetButtonEvents+0x1c4>
		button[port].events &=~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8007cea:	00fa      	lsls	r2, r7, #3
 8007cec:	19d2      	adds	r2, r2, r7
 8007cee:	4b43      	ldr	r3, [pc, #268]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007cf0:	189b      	adds	r3, r3, r2
 8007cf2:	7a1a      	ldrb	r2, [r3, #8]
 8007cf4:	2110      	movs	r1, #16
 8007cf6:	438a      	bics	r2, r1
 8007cf8:	721a      	strb	r2, [r3, #8]
	    || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 8007cfa:	465b      	mov	r3, fp
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e7      	bne.n	8007cd0 <SetButtonEvents+0x184>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8007d00:	00fa      	lsls	r2, r7, #3
 8007d02:	19d2      	adds	r2, r2, r7
 8007d04:	4b3d      	ldr	r3, [pc, #244]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007d06:	189b      	adds	r3, r3, r2
 8007d08:	7a1a      	ldrb	r2, [r3, #8]
 8007d0a:	2120      	movs	r1, #32
 8007d0c:	438a      	bics	r2, r1
 8007d0e:	721a      	strb	r2, [r3, #8]
	    || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 8007d10:	4653      	mov	r3, sl
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d05d      	beq.n	8007dd2 <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8007d16:	00fa      	lsls	r2, r7, #3
 8007d18:	19d2      	adds	r2, r2, r7
 8007d1a:	4b38      	ldr	r3, [pc, #224]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007d1c:	189b      	adds	r3, r3, r2
 8007d1e:	7a1a      	ldrb	r2, [r3, #8]
 8007d20:	2140      	movs	r1, #64	; 0x40
 8007d22:	430a      	orrs	r2, r1
 8007d24:	721a      	strb	r2, [r3, #8]
	if(mode == BUTTON_EVENT_MODE_OR
 8007d26:	2801      	cmp	r0, #1
 8007d28:	d000      	beq.n	8007d2c <SetButtonEvents+0x1e0>
 8007d2a:	e764      	b.n	8007bf6 <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8007d2c:	00fa      	lsls	r2, r7, #3
 8007d2e:	19d2      	adds	r2, r2, r7
 8007d30:	4b32      	ldr	r3, [pc, #200]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007d32:	189b      	adds	r3, r3, r2
 8007d34:	7a19      	ldrb	r1, [r3, #8]
 8007d36:	2280      	movs	r2, #128	; 0x80
 8007d38:	4252      	negs	r2, r2
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	721a      	strb	r2, [r3, #8]
	res =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1),&temp16);
 8007d3e:	003c      	movs	r4, r7
 8007d40:	343a      	adds	r4, #58	; 0x3a
 8007d42:	00a4      	lsls	r4, r4, #2
 8007d44:	ab02      	add	r3, sp, #8
 8007d46:	1d99      	adds	r1, r3, #6
 8007d48:	0020      	movs	r0, r4
 8007d4a:	f7ff f8cf 	bl	8006eec <EE_ReadVariable>
	if(!res)// This variable exists
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d000      	beq.n	8007d54 <SetButtonEvents+0x208>
 8007d52:	e770      	b.n	8007c36 <SetButtonEvents+0xea>
		temp8 =(uint8_t) (temp16 >> 8);// Keep upper byte
 8007d54:	ab02      	add	r3, sp, #8
 8007d56:	3306      	adds	r3, #6
 8007d58:	881b      	ldrh	r3, [r3, #0]
		if((uint8_t) (temp16) != button[port].events) {// Update only if different
 8007d5a:	00fa      	lsls	r2, r7, #3
 8007d5c:	19d2      	adds	r2, r2, r7
 8007d5e:	4f27      	ldr	r7, [pc, #156]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007d60:	18bf      	adds	r7, r7, r2
 8007d62:	7a3a      	ldrb	r2, [r7, #8]
 8007d64:	b2d9      	uxtb	r1, r3
 8007d66:	4291      	cmp	r1, r2
 8007d68:	d000      	beq.n	8007d6c <SetButtonEvents+0x220>
 8007d6a:	e748      	b.n	8007bfe <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,&temp16);
 8007d6c:	1c63      	adds	r3, r4, #1
 8007d6e:	aa02      	add	r2, sp, #8
 8007d70:	1d97      	adds	r7, r2, #6
 8007d72:	0039      	movs	r1, r7
 8007d74:	9301      	str	r3, [sp, #4]
 8007d76:	0018      	movs	r0, r3
 8007d78:	f7ff f8b8 	bl	8006eec <EE_ReadVariable>
		    != ( ((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 8007d7c:	0236      	lsls	r6, r6, #8
 8007d7e:	883a      	ldrh	r2, [r7, #0]
 8007d80:	465b      	mov	r3, fp
 8007d82:	4333      	orrs	r3, r6
		if(temp16
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d000      	beq.n	8007d8a <SetButtonEvents+0x23e>
 8007d88:	e742      	b.n	8007c10 <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,&temp16);
 8007d8a:	1ca6      	adds	r6, r4, #2
 8007d8c:	ab02      	add	r3, sp, #8
 8007d8e:	1d9f      	adds	r7, r3, #6
 8007d90:	0039      	movs	r1, r7
 8007d92:	0030      	movs	r0, r6
 8007d94:	f7ff f8aa 	bl	8006eec <EE_ReadVariable>
		    != ( ((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 8007d98:	4643      	mov	r3, r8
 8007d9a:	0219      	lsls	r1, r3, #8
 8007d9c:	883a      	ldrh	r2, [r7, #0]
 8007d9e:	4653      	mov	r3, sl
 8007da0:	430b      	orrs	r3, r1
		if(temp16
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d000      	beq.n	8007da8 <SetButtonEvents+0x25c>
 8007da6:	e738      	b.n	8007c1a <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,&temp16);
 8007da8:	3403      	adds	r4, #3
 8007daa:	ab02      	add	r3, sp, #8
 8007dac:	1d9e      	adds	r6, r3, #6
 8007dae:	0031      	movs	r1, r6
 8007db0:	0020      	movs	r0, r4
 8007db2:	f7ff f89b 	bl	8006eec <EE_ReadVariable>
		    != ( ((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 8007db6:	022d      	lsls	r5, r5, #8
 8007db8:	8832      	ldrh	r2, [r6, #0]
 8007dba:	464b      	mov	r3, r9
 8007dbc:	432b      	orrs	r3, r5
	return result;
 8007dbe:	2000      	movs	r0, #0
		if(temp16
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d100      	bne.n	8007dc6 <SetButtonEvents+0x27a>
 8007dc4:	e730      	b.n	8007c28 <SetButtonEvents+0xdc>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 8007dc6:	0019      	movs	r1, r3
 8007dc8:	0020      	movs	r0, r4
 8007dca:	f7ff f8bf 	bl	8006f4c <EE_WriteVariable>
	return result;
 8007dce:	2000      	movs	r0, #0
 8007dd0:	e72a      	b.n	8007c28 <SetButtonEvents+0xdc>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8007dd2:	00fa      	lsls	r2, r7, #3
 8007dd4:	19d2      	adds	r2, r2, r7
 8007dd6:	4b09      	ldr	r3, [pc, #36]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007dd8:	189b      	adds	r3, r3, r2
 8007dda:	7a1a      	ldrb	r2, [r3, #8]
 8007ddc:	2140      	movs	r1, #64	; 0x40
 8007dde:	438a      	bics	r2, r1
 8007de0:	721a      	strb	r2, [r3, #8]
	    || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 8007de2:	464b      	mov	r3, r9
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1a1      	bne.n	8007d2c <SetButtonEvents+0x1e0>
		button[port].events &=~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8007de8:	00fa      	lsls	r2, r7, #3
 8007dea:	19d2      	adds	r2, r2, r7
 8007dec:	4b03      	ldr	r3, [pc, #12]	; (8007dfc <SetButtonEvents+0x2b0>)
 8007dee:	189b      	adds	r3, r3, r2
 8007df0:	7a19      	ldrb	r1, [r3, #8]
 8007df2:	227f      	movs	r2, #127	; 0x7f
 8007df4:	400a      	ands	r2, r1
 8007df6:	721a      	strb	r2, [r3, #8]
 8007df8:	e7a1      	b.n	8007d3e <SetButtonEvents+0x1f2>
 8007dfa:	46c0      	nop			; (mov r8, r8)
 8007dfc:	20001508 	.word	0x20001508

08007e00 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port){
}
 8007e00:	4770      	bx	lr

08007e02 <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port){
}
 8007e02:	4770      	bx	lr

08007e04 <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port){
}
 8007e04:	4770      	bx	lr

08007e06 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType){
}
 8007e06:	4770      	bx	lr

08007e08 <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType){
}
 8007e08:	4770      	bx	lr
	...

08007e0c <CheckAttachedButtons>:
void CheckAttachedButtons(void){
 8007e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e0e:	46de      	mov	lr, fp
 8007e10:	4657      	mov	r7, sl
 8007e12:	464e      	mov	r6, r9
 8007e14:	4645      	mov	r5, r8
 8007e16:	b5e0      	push	{r5, r6, r7, lr}
 8007e18:	b089      	sub	sp, #36	; 0x24
 8007e1a:	4dbd      	ldr	r5, [pc, #756]	; (8008110 <CheckAttachedButtons+0x304>)
 8007e1c:	3509      	adds	r5, #9
 8007e1e:	2404      	movs	r4, #4
 8007e20:	2601      	movs	r6, #1
	uint8_t connected =GPIO_PIN_RESET, state =0;
 8007e22:	2300      	movs	r3, #0
 8007e24:	469b      	mov	fp, r3
 8007e26:	4699      	mov	r9, r3
 8007e28:	e111      	b.n	800804e <CheckAttachedButtons+0x242>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port,TX_Pin,
 8007e2a:	230e      	movs	r3, #14
 8007e2c:	aa02      	add	r2, sp, #8
 8007e2e:	4694      	mov	ip, r2
 8007e30:	4463      	add	r3, ip
 8007e32:	8819      	ldrh	r1, [r3, #0]
 8007e34:	2201      	movs	r2, #1
 8007e36:	9807      	ldr	r0, [sp, #28]
 8007e38:	f007 fde0 	bl	800f9fc <HAL_GPIO_WritePin>
				Delay_us(10);
 8007e3c:	200a      	movs	r0, #10
 8007e3e:	f004 f9ab 	bl	800c198 <StartMicroDelay>
				connected =HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port,RX_Pin);
 8007e42:	ab05      	add	r3, sp, #20
 8007e44:	8819      	ldrh	r1, [r3, #0]
 8007e46:	9806      	ldr	r0, [sp, #24]
 8007e48:	f007 fdd2 	bl	800f9f0 <HAL_GPIO_ReadPin>
 8007e4c:	4681      	mov	r9, r0
 8007e4e:	e126      	b.n	800809e <CheckAttachedButtons+0x292>
			switch(button[i].type){
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d105      	bne.n	8007e60 <CheckAttachedButtons+0x54>
				if(connected == GPIO_PIN_SET)
 8007e54:	464b      	mov	r3, r9
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d046      	beq.n	8007ee8 <CheckAttachedButtons+0xdc>
				else if(connected == GPIO_PIN_RESET)
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d100      	bne.n	8007e60 <CheckAttachedButtons+0x54>
 8007e5e:	e1c5      	b.n	80081ec <CheckAttachedButtons+0x3e0>
			if(state == CLOSED || state == ON) {
 8007e60:	465b      	mov	r3, fp
 8007e62:	2b04      	cmp	r3, #4
 8007e64:	d001      	beq.n	8007e6a <CheckAttachedButtons+0x5e>
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d107      	bne.n	8007e7a <CheckAttachedButtons+0x6e>
				if(pressCounter[i] < 0xFFFF)
 8007e6a:	4baa      	ldr	r3, [pc, #680]	; (8008114 <CheckAttachedButtons+0x308>)
 8007e6c:	58e3      	ldr	r3, [r4, r3]
 8007e6e:	4aaa      	ldr	r2, [pc, #680]	; (8008118 <CheckAttachedButtons+0x30c>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d842      	bhi.n	8007efa <CheckAttachedButtons+0xee>
				++pressCounter[i];// Advance the debounce counter
 8007e74:	3301      	adds	r3, #1
 8007e76:	4aa7      	ldr	r2, [pc, #668]	; (8008114 <CheckAttachedButtons+0x308>)
 8007e78:	50a3      	str	r3, [r4, r2]
			if(state == OPEN || state == OFF) {
 8007e7a:	23fd      	movs	r3, #253	; 0xfd
 8007e7c:	465a      	mov	r2, fp
 8007e7e:	4013      	ands	r3, r2
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d100      	bne.n	8007e86 <CheckAttachedButtons+0x7a>
 8007e84:	e1b6      	b.n	80081f4 <CheckAttachedButtons+0x3e8>
			if(pressCounter[i] < BOS.buttons.debounce) {
 8007e86:	4ba3      	ldr	r3, [pc, #652]	; (8008114 <CheckAttachedButtons+0x308>)
 8007e88:	58e3      	ldr	r3, [r4, r3]
 8007e8a:	4aa4      	ldr	r2, [pc, #656]	; (800811c <CheckAttachedButtons+0x310>)
 8007e8c:	8812      	ldrh	r2, [r2, #0]
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d36f      	bcc.n	8007f72 <CheckAttachedButtons+0x166>
				if(pressCounter[i] == BOS.buttons.debounce) {
 8007e92:	d045      	beq.n	8007f20 <CheckAttachedButtons+0x114>
				if(releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8007e94:	4ba2      	ldr	r3, [pc, #648]	; (8008120 <CheckAttachedButtons+0x314>)
 8007e96:	58e3      	ldr	r3, [r4, r3]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d202      	bcs.n	8007ea2 <CheckAttachedButtons+0x96>
				releaseCounter[i] =0;
 8007e9c:	4ba0      	ldr	r3, [pc, #640]	; (8008120 <CheckAttachedButtons+0x314>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	50e2      	str	r2, [r4, r3]
				if(pressCounter[i] > BOS.buttons.singleClickTime
 8007ea2:	4b9c      	ldr	r3, [pc, #624]	; (8008114 <CheckAttachedButtons+0x308>)
 8007ea4:	58e3      	ldr	r3, [r4, r3]
 8007ea6:	4a9d      	ldr	r2, [pc, #628]	; (800811c <CheckAttachedButtons+0x310>)
 8007ea8:	8852      	ldrh	r2, [r2, #2]
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d952      	bls.n	8007f54 <CheckAttachedButtons+0x148>
				    && pressCounter[i] < 500) {
 8007eae:	22f4      	movs	r2, #244	; 0xf4
 8007eb0:	32ff      	adds	r2, #255	; 0xff
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d84e      	bhi.n	8007f54 <CheckAttachedButtons+0x148>
					if(clicked == 0)
 8007eb6:	4b9b      	ldr	r3, [pc, #620]	; (8008124 <CheckAttachedButtons+0x318>)
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d137      	bne.n	8007f2e <CheckAttachedButtons+0x122>
					clicked =1;// Record a possible single click
 8007ebe:	4b99      	ldr	r3, [pc, #612]	; (8008124 <CheckAttachedButtons+0x318>)
 8007ec0:	3af3      	subs	r2, #243	; 0xf3
 8007ec2:	3aff      	subs	r2, #255	; 0xff
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	e054      	b.n	8007f72 <CheckAttachedButtons+0x166>
				if(connected == GPIO_PIN_SET)
 8007ec8:	464b      	mov	r3, r9
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d00f      	beq.n	8007eee <CheckAttachedButtons+0xe2>
				else if(connected == GPIO_PIN_RESET)
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1c6      	bne.n	8007e60 <CheckAttachedButtons+0x54>
				state =OPEN;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	469b      	mov	fp, r3
 8007ed6:	e18d      	b.n	80081f4 <CheckAttachedButtons+0x3e8>
				if(connected == GPIO_PIN_SET)
 8007ed8:	464b      	mov	r3, r9
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d00a      	beq.n	8007ef4 <CheckAttachedButtons+0xe8>
				else if(connected == GPIO_PIN_RESET)
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1be      	bne.n	8007e60 <CheckAttachedButtons+0x54>
				state =OFF;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	469b      	mov	fp, r3
 8007ee6:	e185      	b.n	80081f4 <CheckAttachedButtons+0x3e8>
				state =CLOSED;
 8007ee8:	2304      	movs	r3, #4
 8007eea:	469b      	mov	fp, r3
 8007eec:	e7bd      	b.n	8007e6a <CheckAttachedButtons+0x5e>
				state =CLOSED;
 8007eee:	2304      	movs	r3, #4
 8007ef0:	469b      	mov	fp, r3
 8007ef2:	e7ba      	b.n	8007e6a <CheckAttachedButtons+0x5e>
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	469b      	mov	fp, r3
 8007ef8:	e7b7      	b.n	8007e6a <CheckAttachedButtons+0x5e>
				pressCounter[i] =0;// Reset debounce counter
 8007efa:	4b86      	ldr	r3, [pc, #536]	; (8008114 <CheckAttachedButtons+0x308>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	50e2      	str	r2, [r4, r3]
 8007f00:	e7bb      	b.n	8007e7a <CheckAttachedButtons+0x6e>
				releaseCounter[i] =0;// Reset debounce counter
 8007f02:	4b87      	ldr	r3, [pc, #540]	; (8008120 <CheckAttachedButtons+0x314>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	50e2      	str	r2, [r4, r3]
 8007f08:	e17d      	b.n	8008206 <CheckAttachedButtons+0x3fa>
				    && dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 8007f0a:	4b87      	ldr	r3, [pc, #540]	; (8008128 <CheckAttachedButtons+0x31c>)
 8007f0c:	5cf3      	ldrb	r3, [r6, r3]
 8007f0e:	4a83      	ldr	r2, [pc, #524]	; (800811c <CheckAttachedButtons+0x310>)
 8007f10:	7952      	ldrb	r2, [r2, #5]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d200      	bcs.n	8007f18 <CheckAttachedButtons+0x10c>
 8007f16:	e182      	b.n	800821e <CheckAttachedButtons+0x412>
				++dblCounter[i];
 8007f18:	3301      	adds	r3, #1
 8007f1a:	4a83      	ldr	r2, [pc, #524]	; (8008128 <CheckAttachedButtons+0x31c>)
 8007f1c:	54b3      	strb	r3, [r6, r2]
 8007f1e:	e7b2      	b.n	8007e86 <CheckAttachedButtons+0x7a>
					button[i].state =PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 8007f20:	2107      	movs	r1, #7
 8007f22:	4640      	mov	r0, r8
 8007f24:	7001      	strb	r1, [r0, #0]
					++pressCounter[i];
 8007f26:	3301      	adds	r3, #1
 8007f28:	497a      	ldr	r1, [pc, #488]	; (8008114 <CheckAttachedButtons+0x308>)
 8007f2a:	5063      	str	r3, [r4, r1]
 8007f2c:	e7b2      	b.n	8007e94 <CheckAttachedButtons+0x88>
					else if(clicked == 2) {
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d11f      	bne.n	8007f72 <CheckAttachedButtons+0x166>
						if(dblCounter[i] > BOS.buttons.minInterClickTime
 8007f32:	4b7d      	ldr	r3, [pc, #500]	; (8008128 <CheckAttachedButtons+0x31c>)
 8007f34:	5cf3      	ldrb	r3, [r6, r3]
 8007f36:	4a79      	ldr	r2, [pc, #484]	; (800811c <CheckAttachedButtons+0x310>)
 8007f38:	7912      	ldrb	r2, [r2, #4]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d219      	bcs.n	8007f72 <CheckAttachedButtons+0x166>
						        < BOS.buttons.maxInterClickTime) {
 8007f3e:	4a77      	ldr	r2, [pc, #476]	; (800811c <CheckAttachedButtons+0x310>)
						    && dblCounter[i]
 8007f40:	7952      	ldrb	r2, [r2, #5]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d915      	bls.n	8007f72 <CheckAttachedButtons+0x166>
							clicked =3;// Record a possible double click
 8007f46:	4b77      	ldr	r3, [pc, #476]	; (8008124 <CheckAttachedButtons+0x318>)
 8007f48:	2203      	movs	r2, #3
 8007f4a:	701a      	strb	r2, [r3, #0]
							dblCounter[i] =0;// Reset the inter-click counter
 8007f4c:	4b76      	ldr	r3, [pc, #472]	; (8008128 <CheckAttachedButtons+0x31c>)
 8007f4e:	2200      	movs	r2, #0
 8007f50:	54f2      	strb	r2, [r6, r3]
 8007f52:	e00e      	b.n	8007f72 <CheckAttachedButtons+0x166>
				else if(pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 8007f54:	3bf5      	subs	r3, #245	; 0xf5
 8007f56:	3bff      	subs	r3, #255	; 0xff
 8007f58:	4a74      	ldr	r2, [pc, #464]	; (800812c <CheckAttachedButtons+0x320>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d809      	bhi.n	8007f72 <CheckAttachedButtons+0x166>
					if(clicked)
 8007f5e:	4b71      	ldr	r3, [pc, #452]	; (8008124 <CheckAttachedButtons+0x318>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <CheckAttachedButtons+0x160>
					clicked =0;// Cannot be a click
 8007f66:	4b6f      	ldr	r3, [pc, #444]	; (8008124 <CheckAttachedButtons+0x318>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 8007f6c:	9803      	ldr	r0, [sp, #12]
 8007f6e:	f7ff fc57 	bl	8007820 <CheckForTimedButtonPress>
			if(releaseCounter[i] < BOS.buttons.debounce) {
 8007f72:	4b6b      	ldr	r3, [pc, #428]	; (8008120 <CheckAttachedButtons+0x314>)
 8007f74:	58e3      	ldr	r3, [r4, r3]
 8007f76:	4a69      	ldr	r2, [pc, #420]	; (800811c <CheckAttachedButtons+0x310>)
 8007f78:	8812      	ldrh	r2, [r2, #0]
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d34d      	bcc.n	800801a <CheckAttachedButtons+0x20e>
				if(releaseCounter[i] == BOS.buttons.debounce) {
 8007f7e:	d02b      	beq.n	8007fd8 <CheckAttachedButtons+0x1cc>
				if(pressCounter[i] > BOS.buttons.debounce)// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8007f80:	4b64      	ldr	r3, [pc, #400]	; (8008114 <CheckAttachedButtons+0x308>)
 8007f82:	58e3      	ldr	r3, [r4, r3]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d202      	bcs.n	8007f8e <CheckAttachedButtons+0x182>
				pressCounter[i] =0;
 8007f88:	4b62      	ldr	r3, [pc, #392]	; (8008114 <CheckAttachedButtons+0x308>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	50e2      	str	r2, [r4, r3]
				if(releaseCounter[i] > BOS.buttons.singleClickTime
 8007f8e:	4b64      	ldr	r3, [pc, #400]	; (8008120 <CheckAttachedButtons+0x314>)
 8007f90:	58e3      	ldr	r3, [r4, r3]
 8007f92:	4a62      	ldr	r2, [pc, #392]	; (800811c <CheckAttachedButtons+0x310>)
 8007f94:	8852      	ldrh	r2, [r2, #2]
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d93a      	bls.n	8008010 <CheckAttachedButtons+0x204>
				    && releaseCounter[i] < 500) {
 8007f9a:	22f4      	movs	r2, #244	; 0xf4
 8007f9c:	32ff      	adds	r2, #255	; 0xff
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d836      	bhi.n	8008010 <CheckAttachedButtons+0x204>
					if(clicked == 1) {
 8007fa2:	4b60      	ldr	r3, [pc, #384]	; (8008124 <CheckAttachedButtons+0x318>)
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d01d      	beq.n	8007fe6 <CheckAttachedButtons+0x1da>
					else if(clicked == 3) {
 8007faa:	2b03      	cmp	r3, #3
 8007fac:	d135      	bne.n	800801a <CheckAttachedButtons+0x20e>
						button[i].state =DBL_CLICKED;// Record a double button click event
 8007fae:	3303      	adds	r3, #3
 8007fb0:	4642      	mov	r2, r8
 8007fb2:	7013      	strb	r3, [r2, #0]
						clicked =0;// Prepare for a single click
 8007fb4:	4b5b      	ldr	r3, [pc, #364]	; (8008124 <CheckAttachedButtons+0x318>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	701a      	strb	r2, [r3, #0]
				if(!delayButtonStateReset
 8007fba:	4b5d      	ldr	r3, [pc, #372]	; (8008130 <CheckAttachedButtons+0x324>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d13f      	bne.n	8008042 <CheckAttachedButtons+0x236>
				    && (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 8007fc2:	4643      	mov	r3, r8
 8007fc4:	7a1b      	ldrb	r3, [r3, #8]
 8007fc6:	079b      	lsls	r3, r3, #30
 8007fc8:	d53b      	bpl.n	8008042 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 8007fca:	4b59      	ldr	r3, [pc, #356]	; (8008130 <CheckAttachedButtons+0x324>)
 8007fcc:	2201      	movs	r2, #1
 8007fce:	701a      	strb	r2, [r3, #0]
					buttonDblClickedCallback(i);
 8007fd0:	9803      	ldr	r0, [sp, #12]
 8007fd2:	f7ff ff17 	bl	8007e04 <buttonDblClickedCallback>
 8007fd6:	e034      	b.n	8008042 <CheckAttachedButtons+0x236>
					button[i].state =RELEASED;// Record a RELEASED event. This event is always reset on next tick.
 8007fd8:	2108      	movs	r1, #8
 8007fda:	4640      	mov	r0, r8
 8007fdc:	7001      	strb	r1, [r0, #0]
					++releaseCounter[i];
 8007fde:	3301      	adds	r3, #1
 8007fe0:	494f      	ldr	r1, [pc, #316]	; (8008120 <CheckAttachedButtons+0x314>)
 8007fe2:	5063      	str	r3, [r4, r1]
 8007fe4:	e7cc      	b.n	8007f80 <CheckAttachedButtons+0x174>
						button[i].state =CLICKED;// Record a single button click event
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	4642      	mov	r2, r8
 8007fea:	7013      	strb	r3, [r2, #0]
						clicked =2;// Prepare for a double click
 8007fec:	4b4d      	ldr	r3, [pc, #308]	; (8008124 <CheckAttachedButtons+0x318>)
 8007fee:	2202      	movs	r2, #2
 8007ff0:	701a      	strb	r2, [r3, #0]
				if(!delayButtonStateReset
 8007ff2:	4b4f      	ldr	r3, [pc, #316]	; (8008130 <CheckAttachedButtons+0x324>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d123      	bne.n	8008042 <CheckAttachedButtons+0x236>
				    && (button[i].events & BUTTON_EVENT_CLICKED)) {
 8007ffa:	4643      	mov	r3, r8
 8007ffc:	7a1b      	ldrb	r3, [r3, #8]
 8007ffe:	07db      	lsls	r3, r3, #31
 8008000:	d51f      	bpl.n	8008042 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 8008002:	4b4b      	ldr	r3, [pc, #300]	; (8008130 <CheckAttachedButtons+0x324>)
 8008004:	2201      	movs	r2, #1
 8008006:	701a      	strb	r2, [r3, #0]
					buttonClickedCallback(i);
 8008008:	9803      	ldr	r0, [sp, #12]
 800800a:	f7ff fefa 	bl	8007e02 <buttonClickedCallback>
 800800e:	e018      	b.n	8008042 <CheckAttachedButtons+0x236>
				    && releaseCounter[i] < 0xFFFF) {
 8008010:	3bf5      	subs	r3, #245	; 0xf5
 8008012:	3bff      	subs	r3, #255	; 0xff
				else if(releaseCounter[i] >= 500
 8008014:	4a45      	ldr	r2, [pc, #276]	; (800812c <CheckAttachedButtons+0x320>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d909      	bls.n	800802e <CheckAttachedButtons+0x222>
			switch(button[i].state){
 800801a:	4643      	mov	r3, r8
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	3b05      	subs	r3, #5
 8008020:	b2da      	uxtb	r2, r3
 8008022:	2a09      	cmp	r2, #9
 8008024:	d80d      	bhi.n	8008042 <CheckAttachedButtons+0x236>
 8008026:	0093      	lsls	r3, r2, #2
 8008028:	4a42      	ldr	r2, [pc, #264]	; (8008134 <CheckAttachedButtons+0x328>)
 800802a:	58d3      	ldr	r3, [r2, r3]
 800802c:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 800802e:	9803      	ldr	r0, [sp, #12]
 8008030:	f7ff fc34 	bl	800789c <CheckForTimedButtonRelease>
 8008034:	e7f1      	b.n	800801a <CheckAttachedButtons+0x20e>
				buttonPressedCallback(i);
 8008036:	9803      	ldr	r0, [sp, #12]
 8008038:	f7ff fbf0 	bl	800781c <buttonPressedCallback>
				button[i].state =NONE;
 800803c:	2300      	movs	r3, #0
 800803e:	4642      	mov	r2, r8
 8008040:	7013      	strb	r3, [r2, #0]
 8008042:	3601      	adds	r6, #1
 8008044:	3509      	adds	r5, #9
 8008046:	3404      	adds	r4, #4
	for(uint8_t i =1; i <= NumOfPorts; i++) {
 8008048:	2c1c      	cmp	r4, #28
 800804a:	d100      	bne.n	800804e <CheckAttachedButtons+0x242>
 800804c:	e0ed      	b.n	800822a <CheckAttachedButtons+0x41e>
 800804e:	b2f3      	uxtb	r3, r6
 8008050:	9303      	str	r3, [sp, #12]
 8008052:	46a8      	mov	r8, r5
		if(button[i].type)// Only check defined butons
 8008054:	786b      	ldrb	r3, [r5, #1]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d0f3      	beq.n	8008042 <CheckAttachedButtons+0x236>
			if(delayButtonStateReset == false)
 800805a:	4b35      	ldr	r3, [pc, #212]	; (8008130 <CheckAttachedButtons+0x324>)
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d100      	bne.n	8008064 <CheckAttachedButtons+0x258>
			button[i].state =NONE;
 8008062:	702b      	strb	r3, [r5, #0]
			GetPortGPIOs(i,&TX_Port,&TX_Pin,&RX_Port,&RX_Pin);
 8008064:	230e      	movs	r3, #14
 8008066:	aa02      	add	r2, sp, #8
 8008068:	4694      	mov	ip, r2
 800806a:	4463      	add	r3, ip
 800806c:	469a      	mov	sl, r3
 800806e:	af05      	add	r7, sp, #20
 8008070:	9700      	str	r7, [sp, #0]
 8008072:	ab06      	add	r3, sp, #24
 8008074:	4652      	mov	r2, sl
 8008076:	a907      	add	r1, sp, #28
 8008078:	9803      	ldr	r0, [sp, #12]
 800807a:	f003 fcfb 	bl	800ba74 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port,TX_Pin,GPIO_PIN_RESET);
 800807e:	4653      	mov	r3, sl
 8008080:	8819      	ldrh	r1, [r3, #0]
 8008082:	2200      	movs	r2, #0
 8008084:	9807      	ldr	r0, [sp, #28]
 8008086:	f007 fcb9 	bl	800f9fc <HAL_GPIO_WritePin>
			Delay_us(10);
 800808a:	200a      	movs	r0, #10
 800808c:	f004 f884 	bl	800c198 <StartMicroDelay>
			if(HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port,RX_Pin)
 8008090:	8839      	ldrh	r1, [r7, #0]
 8008092:	9806      	ldr	r0, [sp, #24]
 8008094:	f007 fcac 	bl	800f9f0 <HAL_GPIO_ReadPin>
 8008098:	2800      	cmp	r0, #0
 800809a:	d100      	bne.n	800809e <CheckAttachedButtons+0x292>
 800809c:	e6c5      	b.n	8007e2a <CheckAttachedButtons+0x1e>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port,TX_Pin,GPIO_PIN_RESET);
 800809e:	230e      	movs	r3, #14
 80080a0:	aa02      	add	r2, sp, #8
 80080a2:	4694      	mov	ip, r2
 80080a4:	4463      	add	r3, ip
 80080a6:	8819      	ldrh	r1, [r3, #0]
 80080a8:	2200      	movs	r2, #0
 80080aa:	9807      	ldr	r0, [sp, #28]
 80080ac:	f007 fca6 	bl	800f9fc <HAL_GPIO_WritePin>
			switch(button[i].type){
 80080b0:	4643      	mov	r3, r8
 80080b2:	785b      	ldrb	r3, [r3, #1]
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d100      	bne.n	80080ba <CheckAttachedButtons+0x2ae>
 80080b8:	e706      	b.n	8007ec8 <CheckAttachedButtons+0xbc>
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	2a02      	cmp	r2, #2
 80080be:	d800      	bhi.n	80080c2 <CheckAttachedButtons+0x2b6>
 80080c0:	e6c6      	b.n	8007e50 <CheckAttachedButtons+0x44>
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d100      	bne.n	80080c8 <CheckAttachedButtons+0x2bc>
 80080c6:	e707      	b.n	8007ed8 <CheckAttachedButtons+0xcc>
 80080c8:	2b04      	cmp	r3, #4
 80080ca:	d000      	beq.n	80080ce <CheckAttachedButtons+0x2c2>
 80080cc:	e6c8      	b.n	8007e60 <CheckAttachedButtons+0x54>
				if(connected == GPIO_PIN_SET)
 80080ce:	464b      	mov	r3, r9
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d100      	bne.n	80080d6 <CheckAttachedButtons+0x2ca>
 80080d4:	e08d      	b.n	80081f2 <CheckAttachedButtons+0x3e6>
				else if(connected == GPIO_PIN_RESET)
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d000      	beq.n	80080dc <CheckAttachedButtons+0x2d0>
 80080da:	e6c1      	b.n	8007e60 <CheckAttachedButtons+0x54>
 80080dc:	2302      	movs	r3, #2
 80080de:	469b      	mov	fp, r3
 80080e0:	e6c3      	b.n	8007e6a <CheckAttachedButtons+0x5e>
				buttonReleasedCallback(i);
 80080e2:	9803      	ldr	r0, [sp, #12]
 80080e4:	f7ff fe8c 	bl	8007e00 <buttonReleasedCallback>
				button[i].state =NONE;
 80080e8:	2300      	movs	r3, #0
 80080ea:	4642      	mov	r2, r8
 80080ec:	7013      	strb	r3, [r2, #0]
					break;
 80080ee:	e7a8      	b.n	8008042 <CheckAttachedButtons+0x236>
				if(!delayButtonStateReset
 80080f0:	4b0f      	ldr	r3, [pc, #60]	; (8008130 <CheckAttachedButtons+0x324>)
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1a4      	bne.n	8008042 <CheckAttachedButtons+0x236>
				    && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 80080f8:	4643      	mov	r3, r8
 80080fa:	7a1b      	ldrb	r3, [r3, #8]
 80080fc:	075b      	lsls	r3, r3, #29
 80080fe:	d5a0      	bpl.n	8008042 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 8008100:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <CheckAttachedButtons+0x324>)
 8008102:	2201      	movs	r2, #1
 8008104:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i,PRESSED_FOR_X1_SEC - 8);
 8008106:	2101      	movs	r1, #1
 8008108:	9803      	ldr	r0, [sp, #12]
 800810a:	f7ff fe7c 	bl	8007e06 <buttonPressedForXCallback>
 800810e:	e798      	b.n	8008042 <CheckAttachedButtons+0x236>
 8008110:	20001508 	.word	0x20001508
 8008114:	20001554 	.word	0x20001554
 8008118:	0000fffe 	.word	0x0000fffe
 800811c:	20006988 	.word	0x20006988
 8008120:	20001570 	.word	0x20001570
 8008124:	20001547 	.word	0x20001547
 8008128:	20001548 	.word	0x20001548
 800812c:	0000fe0a 	.word	0x0000fe0a
 8008130:	2000154f 	.word	0x2000154f
 8008134:	08018a00 	.word	0x08018a00
				if(!delayButtonStateReset
 8008138:	4b3f      	ldr	r3, [pc, #252]	; (8008238 <CheckAttachedButtons+0x42c>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d000      	beq.n	8008142 <CheckAttachedButtons+0x336>
 8008140:	e77f      	b.n	8008042 <CheckAttachedButtons+0x236>
				    && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 8008142:	4643      	mov	r3, r8
 8008144:	7a1b      	ldrb	r3, [r3, #8]
 8008146:	071b      	lsls	r3, r3, #28
 8008148:	d400      	bmi.n	800814c <CheckAttachedButtons+0x340>
 800814a:	e77a      	b.n	8008042 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800814c:	4b3a      	ldr	r3, [pc, #232]	; (8008238 <CheckAttachedButtons+0x42c>)
 800814e:	2201      	movs	r2, #1
 8008150:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i,PRESSED_FOR_X2_SEC - 8);
 8008152:	2102      	movs	r1, #2
 8008154:	9803      	ldr	r0, [sp, #12]
 8008156:	f7ff fe56 	bl	8007e06 <buttonPressedForXCallback>
 800815a:	e772      	b.n	8008042 <CheckAttachedButtons+0x236>
				if(!delayButtonStateReset
 800815c:	4b36      	ldr	r3, [pc, #216]	; (8008238 <CheckAttachedButtons+0x42c>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d000      	beq.n	8008166 <CheckAttachedButtons+0x35a>
 8008164:	e76d      	b.n	8008042 <CheckAttachedButtons+0x236>
				    && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 8008166:	4643      	mov	r3, r8
 8008168:	7a1b      	ldrb	r3, [r3, #8]
 800816a:	06db      	lsls	r3, r3, #27
 800816c:	d400      	bmi.n	8008170 <CheckAttachedButtons+0x364>
 800816e:	e768      	b.n	8008042 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 8008170:	4b31      	ldr	r3, [pc, #196]	; (8008238 <CheckAttachedButtons+0x42c>)
 8008172:	2201      	movs	r2, #1
 8008174:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i,PRESSED_FOR_X3_SEC - 8);
 8008176:	2103      	movs	r1, #3
 8008178:	9803      	ldr	r0, [sp, #12]
 800817a:	f7ff fe44 	bl	8007e06 <buttonPressedForXCallback>
 800817e:	e760      	b.n	8008042 <CheckAttachedButtons+0x236>
				if(!delayButtonStateReset
 8008180:	4b2d      	ldr	r3, [pc, #180]	; (8008238 <CheckAttachedButtons+0x42c>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d000      	beq.n	800818a <CheckAttachedButtons+0x37e>
 8008188:	e75b      	b.n	8008042 <CheckAttachedButtons+0x236>
				    && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800818a:	4643      	mov	r3, r8
 800818c:	7a1b      	ldrb	r3, [r3, #8]
 800818e:	069b      	lsls	r3, r3, #26
 8008190:	d400      	bmi.n	8008194 <CheckAttachedButtons+0x388>
 8008192:	e756      	b.n	8008042 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 8008194:	4b28      	ldr	r3, [pc, #160]	; (8008238 <CheckAttachedButtons+0x42c>)
 8008196:	2201      	movs	r2, #1
 8008198:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i,RELEASED_FOR_Y1_SEC - 11);
 800819a:	2101      	movs	r1, #1
 800819c:	9803      	ldr	r0, [sp, #12]
 800819e:	f7ff fe33 	bl	8007e08 <buttonReleasedForYCallback>
 80081a2:	e74e      	b.n	8008042 <CheckAttachedButtons+0x236>
				if(!delayButtonStateReset
 80081a4:	4b24      	ldr	r3, [pc, #144]	; (8008238 <CheckAttachedButtons+0x42c>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d000      	beq.n	80081ae <CheckAttachedButtons+0x3a2>
 80081ac:	e749      	b.n	8008042 <CheckAttachedButtons+0x236>
				    && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 80081ae:	4643      	mov	r3, r8
 80081b0:	7a1b      	ldrb	r3, [r3, #8]
 80081b2:	065b      	lsls	r3, r3, #25
 80081b4:	d400      	bmi.n	80081b8 <CheckAttachedButtons+0x3ac>
 80081b6:	e744      	b.n	8008042 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 80081b8:	4b1f      	ldr	r3, [pc, #124]	; (8008238 <CheckAttachedButtons+0x42c>)
 80081ba:	2201      	movs	r2, #1
 80081bc:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i,RELEASED_FOR_Y2_SEC - 11);
 80081be:	2102      	movs	r1, #2
 80081c0:	9803      	ldr	r0, [sp, #12]
 80081c2:	f7ff fe21 	bl	8007e08 <buttonReleasedForYCallback>
 80081c6:	e73c      	b.n	8008042 <CheckAttachedButtons+0x236>
				if(!delayButtonStateReset
 80081c8:	4b1b      	ldr	r3, [pc, #108]	; (8008238 <CheckAttachedButtons+0x42c>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d000      	beq.n	80081d2 <CheckAttachedButtons+0x3c6>
 80081d0:	e737      	b.n	8008042 <CheckAttachedButtons+0x236>
				    && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 80081d2:	4643      	mov	r3, r8
 80081d4:	7a1b      	ldrb	r3, [r3, #8]
 80081d6:	2b7f      	cmp	r3, #127	; 0x7f
 80081d8:	d800      	bhi.n	80081dc <CheckAttachedButtons+0x3d0>
 80081da:	e732      	b.n	8008042 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 80081dc:	4b16      	ldr	r3, [pc, #88]	; (8008238 <CheckAttachedButtons+0x42c>)
 80081de:	2201      	movs	r2, #1
 80081e0:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i,RELEASED_FOR_Y3_SEC - 11);
 80081e2:	2103      	movs	r1, #3
 80081e4:	9803      	ldr	r0, [sp, #12]
 80081e6:	f7ff fe0f 	bl	8007e08 <buttonReleasedForYCallback>
 80081ea:	e72a      	b.n	8008042 <CheckAttachedButtons+0x236>
				state =OPEN;
 80081ec:	2303      	movs	r3, #3
 80081ee:	469b      	mov	fp, r3
 80081f0:	e000      	b.n	80081f4 <CheckAttachedButtons+0x3e8>
				state =OFF;
 80081f2:	46cb      	mov	fp, r9
				if(releaseCounter[i] < 0xFFFF)
 80081f4:	4b11      	ldr	r3, [pc, #68]	; (800823c <CheckAttachedButtons+0x430>)
 80081f6:	58e3      	ldr	r3, [r4, r3]
 80081f8:	4a11      	ldr	r2, [pc, #68]	; (8008240 <CheckAttachedButtons+0x434>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d900      	bls.n	8008200 <CheckAttachedButtons+0x3f4>
 80081fe:	e680      	b.n	8007f02 <CheckAttachedButtons+0xf6>
				++releaseCounter[i];// Advance the debounce counter
 8008200:	3301      	adds	r3, #1
 8008202:	4a0e      	ldr	r2, [pc, #56]	; (800823c <CheckAttachedButtons+0x430>)
 8008204:	50a3      	str	r3, [r4, r2]
				if(clicked == 2
 8008206:	4b0f      	ldr	r3, [pc, #60]	; (8008244 <CheckAttachedButtons+0x438>)
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	2b02      	cmp	r3, #2
 800820c:	d100      	bne.n	8008210 <CheckAttachedButtons+0x404>
 800820e:	e67c      	b.n	8007f0a <CheckAttachedButtons+0xfe>
				else if(dblCounter[i] > BOS.buttons.maxInterClickTime) {
 8008210:	4b0d      	ldr	r3, [pc, #52]	; (8008248 <CheckAttachedButtons+0x43c>)
 8008212:	5cf2      	ldrb	r2, [r6, r3]
 8008214:	4b0d      	ldr	r3, [pc, #52]	; (800824c <CheckAttachedButtons+0x440>)
 8008216:	795b      	ldrb	r3, [r3, #5]
 8008218:	429a      	cmp	r2, r3
 800821a:	d800      	bhi.n	800821e <CheckAttachedButtons+0x412>
 800821c:	e633      	b.n	8007e86 <CheckAttachedButtons+0x7a>
					clicked =0;
 800821e:	2300      	movs	r3, #0
 8008220:	4a08      	ldr	r2, [pc, #32]	; (8008244 <CheckAttachedButtons+0x438>)
 8008222:	7013      	strb	r3, [r2, #0]
					dblCounter[i] =0;// Reset the inter-click counter
 8008224:	4a08      	ldr	r2, [pc, #32]	; (8008248 <CheckAttachedButtons+0x43c>)
 8008226:	54b3      	strb	r3, [r6, r2]
 8008228:	e62d      	b.n	8007e86 <CheckAttachedButtons+0x7a>
}
 800822a:	b009      	add	sp, #36	; 0x24
 800822c:	bc3c      	pop	{r2, r3, r4, r5}
 800822e:	4690      	mov	r8, r2
 8008230:	4699      	mov	r9, r3
 8008232:	46a2      	mov	sl, r4
 8008234:	46ab      	mov	fp, r5
 8008236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008238:	2000154f 	.word	0x2000154f
 800823c:	20001570 	.word	0x20001570
 8008240:	0000fffe 	.word	0x0000fffe
 8008244:	20001547 	.word	0x20001547
 8008248:	20001548 	.word	0x20001548
 800824c:	20006988 	.word	0x20006988

08008250 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8008250:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t) pvTimerGetTimerID(xTimerStream);
 8008252:	f006 f927 	bl	800e4a4 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8008256:	b2c4      	uxtb	r4, r0
 8008258:	0020      	movs	r0, r4
 800825a:	f7fe fd05 	bl	8006c68 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 800825e:	0020      	movs	r0, r4
 8008260:	f7fe fd30 	bl	8006cc4 <SwitchStreamDMAToMsg>
}
 8008264:	bd10      	pop	{r4, pc}
	...

08008268 <SetupDMAStreams>:
    uint8_t src, uint8_t dst){
 8008268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800826a:	b085      	sub	sp, #20
 800826c:	000d      	movs	r5, r1
 800826e:	0014      	movs	r4, r2
 8008270:	220f      	movs	r2, #15
 8008272:	446a      	add	r2, sp
 8008274:	7013      	strb	r3, [r2, #0]
	if(src == dst) {// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8008276:	aa0a      	add	r2, sp, #40	; 0x28
 8008278:	7812      	ldrb	r2, [r2, #0]
 800827a:	4293      	cmp	r3, r2
 800827c:	d058      	beq.n	8008330 <SetupDMAStreams+0xc8>
	else if(src == 0 || dst == 0)// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 800827e:	2b00      	cmp	r3, #0
 8008280:	d100      	bne.n	8008284 <SetupDMAStreams+0x1c>
 8008282:	e0be      	b.n	8008402 <SetupDMAStreams+0x19a>
 8008284:	2a00      	cmp	r2, #0
 8008286:	d100      	bne.n	800828a <SetupDMAStreams+0x22>
 8008288:	e0bf      	b.n	800840a <SetupDMAStreams+0x1a2>
	if(direction == FORWARD) {
 800828a:	2800      	cmp	r0, #0
 800828c:	d055      	beq.n	800833a <SetupDMAStreams+0xd2>
	else if(direction == BACKWARD) {
 800828e:	2801      	cmp	r0, #1
 8008290:	d100      	bne.n	8008294 <SetupDMAStreams+0x2c>
 8008292:	e08b      	b.n	80083ac <SetupDMAStreams+0x144>
	return BOS_ERR_WrongParam;
 8008294:	2267      	movs	r2, #103	; 0x67
	else if(direction == BIDIRECTIONAL) {
 8008296:	2802      	cmp	r0, #2
 8008298:	d000      	beq.n	800829c <SetupDMAStreams+0x34>
 800829a:	e0b3      	b.n	8008404 <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 800829c:	0018      	movs	r0, r3
 800829e:	f004 f967 	bl	800c570 <GetUart>
 80082a2:	0006      	movs	r6, r0
 80082a4:	ab0a      	add	r3, sp, #40	; 0x28
 80082a6:	7818      	ldrb	r0, [r3, #0]
 80082a8:	f004 f962 	bl	800c570 <GetUart>
 80082ac:	0001      	movs	r1, r0
 80082ae:	2201      	movs	r2, #1
 80082b0:	0030      	movs	r0, r6
 80082b2:	f7fe fd39 	bl	8006d28 <StartDMAstream>
 80082b6:	0002      	movs	r2, r0
 80082b8:	2817      	cmp	r0, #23
 80082ba:	d100      	bne.n	80082be <SetupDMAStreams+0x56>
 80082bc:	e0a2      	b.n	8008404 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),
 80082be:	0160      	lsls	r0, r4, #5
 80082c0:	1b00      	subs	r0, r0, r4
 80082c2:	0080      	lsls	r0, r0, #2
 80082c4:	1900      	adds	r0, r0, r4
 80082c6:	00c0      	lsls	r0, r0, #3
 80082c8:	21fa      	movs	r1, #250	; 0xfa
 80082ca:	0089      	lsls	r1, r1, #2
 80082cc:	f7f7 ff40 	bl	8000150 <__udivsi3>
 80082d0:	0004      	movs	r4, r0
 80082d2:	260f      	movs	r6, #15
 80082d4:	446e      	add	r6, sp
 80082d6:	4b4e      	ldr	r3, [pc, #312]	; (8008410 <SetupDMAStreams+0x1a8>)
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	0033      	movs	r3, r6
 80082dc:	2200      	movs	r2, #0
 80082de:	0001      	movs	r1, r0
 80082e0:	484c      	ldr	r0, [pc, #304]	; (8008414 <SetupDMAStreams+0x1ac>)
 80082e2:	f005 ff83 	bl	800e1ec <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 80082e6:	7833      	ldrb	r3, [r6, #0]
 80082e8:	3b01      	subs	r3, #1
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4a4a      	ldr	r2, [pc, #296]	; (8008418 <SetupDMAStreams+0x1b0>)
 80082ee:	509d      	str	r5, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 80082f0:	ab0a      	add	r3, sp, #40	; 0x28
 80082f2:	7818      	ldrb	r0, [r3, #0]
 80082f4:	f004 f93c 	bl	800c570 <GetUart>
 80082f8:	0007      	movs	r7, r0
 80082fa:	7830      	ldrb	r0, [r6, #0]
 80082fc:	f004 f938 	bl	800c570 <GetUart>
 8008300:	0001      	movs	r1, r0
 8008302:	2201      	movs	r2, #1
 8008304:	0038      	movs	r0, r7
 8008306:	f7fe fd0f 	bl	8006d28 <StartDMAstream>
 800830a:	0002      	movs	r2, r0
 800830c:	2817      	cmp	r0, #23
 800830e:	d079      	beq.n	8008404 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),
 8008310:	4b3f      	ldr	r3, [pc, #252]	; (8008410 <SetupDMAStreams+0x1a8>)
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	ab0a      	add	r3, sp, #40	; 0x28
 8008316:	2200      	movs	r2, #0
 8008318:	0021      	movs	r1, r4
 800831a:	483e      	ldr	r0, [pc, #248]	; (8008414 <SetupDMAStreams+0x1ac>)
 800831c:	f005 ff66 	bl	800e1ec <xTimerCreate>
 8008320:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 8008322:	ab0a      	add	r3, sp, #40	; 0x28
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	3b01      	subs	r3, #1
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4a3b      	ldr	r2, [pc, #236]	; (8008418 <SetupDMAStreams+0x1b0>)
 800832c:	509d      	str	r5, [r3, r2]
 800832e:	e02d      	b.n	800838c <SetupDMAStreams+0x124>
		portStatus[src] =STREAM;
 8008330:	4a3a      	ldr	r2, [pc, #232]	; (800841c <SetupDMAStreams+0x1b4>)
 8008332:	2102      	movs	r1, #2
 8008334:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8008336:	2267      	movs	r2, #103	; 0x67
 8008338:	e064      	b.n	8008404 <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 800833a:	0018      	movs	r0, r3
 800833c:	f004 f918 	bl	800c570 <GetUart>
 8008340:	0006      	movs	r6, r0
 8008342:	ab0a      	add	r3, sp, #40	; 0x28
 8008344:	7818      	ldrb	r0, [r3, #0]
 8008346:	f004 f913 	bl	800c570 <GetUart>
 800834a:	0001      	movs	r1, r0
 800834c:	2201      	movs	r2, #1
 800834e:	0030      	movs	r0, r6
 8008350:	f7fe fcea 	bl	8006d28 <StartDMAstream>
 8008354:	0002      	movs	r2, r0
 8008356:	2817      	cmp	r0, #23
 8008358:	d054      	beq.n	8008404 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),
 800835a:	260f      	movs	r6, #15
 800835c:	446e      	add	r6, sp
 800835e:	0160      	lsls	r0, r4, #5
 8008360:	1b00      	subs	r0, r0, r4
 8008362:	0080      	lsls	r0, r0, #2
 8008364:	1900      	adds	r0, r0, r4
 8008366:	00c0      	lsls	r0, r0, #3
 8008368:	21fa      	movs	r1, #250	; 0xfa
 800836a:	0089      	lsls	r1, r1, #2
 800836c:	f7f7 fef0 	bl	8000150 <__udivsi3>
 8008370:	0001      	movs	r1, r0
 8008372:	4b27      	ldr	r3, [pc, #156]	; (8008410 <SetupDMAStreams+0x1a8>)
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	0033      	movs	r3, r6
 8008378:	2200      	movs	r2, #0
 800837a:	4826      	ldr	r0, [pc, #152]	; (8008414 <SetupDMAStreams+0x1ac>)
 800837c:	f005 ff36 	bl	800e1ec <xTimerCreate>
 8008380:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8008382:	7833      	ldrb	r3, [r6, #0]
 8008384:	3b01      	subs	r3, #1
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4a23      	ldr	r2, [pc, #140]	; (8008418 <SetupDMAStreams+0x1b0>)
 800838a:	509d      	str	r5, [r3, r2]
	return BOS_OK;
 800838c:	2200      	movs	r2, #0
	if(xTimerStream != NULL)
 800838e:	2c00      	cmp	r4, #0
 8008390:	d038      	beq.n	8008404 <SetupDMAStreams+0x19c>
	xTimerStart(xTimerStream,portMAX_DELAY);
 8008392:	f005 f9c3 	bl	800d71c <xTaskGetTickCount>
 8008396:	0002      	movs	r2, r0
 8008398:	2301      	movs	r3, #1
 800839a:	425b      	negs	r3, r3
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	2300      	movs	r3, #0
 80083a0:	2101      	movs	r1, #1
 80083a2:	0020      	movs	r0, r4
 80083a4:	f005 ff42 	bl	800e22c <xTimerGenericCommand>
	return BOS_OK;
 80083a8:	2200      	movs	r2, #0
 80083aa:	e02b      	b.n	8008404 <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 80083ac:	0010      	movs	r0, r2
 80083ae:	f004 f8df 	bl	800c570 <GetUart>
 80083b2:	0006      	movs	r6, r0
 80083b4:	230f      	movs	r3, #15
 80083b6:	446b      	add	r3, sp
 80083b8:	7818      	ldrb	r0, [r3, #0]
 80083ba:	f004 f8d9 	bl	800c570 <GetUart>
 80083be:	0001      	movs	r1, r0
 80083c0:	2201      	movs	r2, #1
 80083c2:	0030      	movs	r0, r6
 80083c4:	f7fe fcb0 	bl	8006d28 <StartDMAstream>
 80083c8:	0002      	movs	r2, r0
 80083ca:	2817      	cmp	r0, #23
 80083cc:	d01a      	beq.n	8008404 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),
 80083ce:	0160      	lsls	r0, r4, #5
 80083d0:	1b00      	subs	r0, r0, r4
 80083d2:	0080      	lsls	r0, r0, #2
 80083d4:	1900      	adds	r0, r0, r4
 80083d6:	00c0      	lsls	r0, r0, #3
 80083d8:	21fa      	movs	r1, #250	; 0xfa
 80083da:	0089      	lsls	r1, r1, #2
 80083dc:	f7f7 feb8 	bl	8000150 <__udivsi3>
 80083e0:	0001      	movs	r1, r0
 80083e2:	4b0b      	ldr	r3, [pc, #44]	; (8008410 <SetupDMAStreams+0x1a8>)
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	ab0a      	add	r3, sp, #40	; 0x28
 80083e8:	2200      	movs	r2, #0
 80083ea:	480a      	ldr	r0, [pc, #40]	; (8008414 <SetupDMAStreams+0x1ac>)
 80083ec:	f005 fefe 	bl	800e1ec <xTimerCreate>
 80083f0:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 80083f2:	230f      	movs	r3, #15
 80083f4:	446b      	add	r3, sp
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	3b01      	subs	r3, #1
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4a06      	ldr	r2, [pc, #24]	; (8008418 <SetupDMAStreams+0x1b0>)
 80083fe:	509d      	str	r5, [r3, r2]
 8008400:	e7c4      	b.n	800838c <SetupDMAStreams+0x124>
	return BOS_ERR_WrongParam;
 8008402:	2267      	movs	r2, #103	; 0x67
}
 8008404:	0010      	movs	r0, r2
 8008406:	b005      	add	sp, #20
 8008408:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BOS_ERR_WrongParam;
 800840a:	2267      	movs	r2, #103	; 0x67
 800840c:	e7fa      	b.n	8008404 <SetupDMAStreams+0x19c>
 800840e:	46c0      	nop			; (mov r8, r8)
 8008410:	08008251 	.word	0x08008251
 8008414:	08018a44 	.word	0x08018a44
 8008418:	200014c0 	.word	0x200014c0
 800841c:	200010f8 	.word	0x200010f8

08008420 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8008420:	b510      	push	{r4, lr}
	switch(port){
 8008422:	2806      	cmp	r0, #6
 8008424:	d80a      	bhi.n	800843c <NotifyMessagingTask+0x1c>
 8008426:	0080      	lsls	r0, r0, #2
 8008428:	4b19      	ldr	r3, [pc, #100]	; (8008490 <NotifyMessagingTask+0x70>)
 800842a:	581b      	ldr	r3, [r3, r0]
 800842c:	469f      	mov	pc, r3
#ifdef _P1
		case P1:
		xTaskNotifyGive(P1MsgTaskHandle)
 800842e:	4b19      	ldr	r3, [pc, #100]	; (8008494 <NotifyMessagingTask+0x74>)
 8008430:	6818      	ldr	r0, [r3, #0]
 8008432:	2300      	movs	r3, #0
 8008434:	2202      	movs	r2, #2
 8008436:	2100      	movs	r1, #0
 8008438:	f005 fe08 	bl	800e04c <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 800843c:	bd10      	pop	{r4, pc}
		xTaskNotifyGive(P2MsgTaskHandle)
 800843e:	4b16      	ldr	r3, [pc, #88]	; (8008498 <NotifyMessagingTask+0x78>)
 8008440:	6818      	ldr	r0, [r3, #0]
 8008442:	2300      	movs	r3, #0
 8008444:	2202      	movs	r2, #2
 8008446:	2100      	movs	r1, #0
 8008448:	f005 fe00 	bl	800e04c <xTaskGenericNotify>
			break;
 800844c:	e7f6      	b.n	800843c <NotifyMessagingTask+0x1c>
		xTaskNotifyGive(P3MsgTaskHandle)
 800844e:	4b13      	ldr	r3, [pc, #76]	; (800849c <NotifyMessagingTask+0x7c>)
 8008450:	6818      	ldr	r0, [r3, #0]
 8008452:	2300      	movs	r3, #0
 8008454:	2202      	movs	r2, #2
 8008456:	2100      	movs	r1, #0
 8008458:	f005 fdf8 	bl	800e04c <xTaskGenericNotify>
			break;
 800845c:	e7ee      	b.n	800843c <NotifyMessagingTask+0x1c>
		xTaskNotifyGive(P4MsgTaskHandle)
 800845e:	4b10      	ldr	r3, [pc, #64]	; (80084a0 <NotifyMessagingTask+0x80>)
 8008460:	6818      	ldr	r0, [r3, #0]
 8008462:	2300      	movs	r3, #0
 8008464:	2202      	movs	r2, #2
 8008466:	2100      	movs	r1, #0
 8008468:	f005 fdf0 	bl	800e04c <xTaskGenericNotify>
			break;
 800846c:	e7e6      	b.n	800843c <NotifyMessagingTask+0x1c>
		xTaskNotifyGive(P5MsgTaskHandle)
 800846e:	4b0d      	ldr	r3, [pc, #52]	; (80084a4 <NotifyMessagingTask+0x84>)
 8008470:	6818      	ldr	r0, [r3, #0]
 8008472:	2300      	movs	r3, #0
 8008474:	2202      	movs	r2, #2
 8008476:	2100      	movs	r1, #0
 8008478:	f005 fde8 	bl	800e04c <xTaskGenericNotify>
			break;
 800847c:	e7de      	b.n	800843c <NotifyMessagingTask+0x1c>
		xTaskNotifyGive(P6MsgTaskHandle)
 800847e:	4b0a      	ldr	r3, [pc, #40]	; (80084a8 <NotifyMessagingTask+0x88>)
 8008480:	6818      	ldr	r0, [r3, #0]
 8008482:	2300      	movs	r3, #0
 8008484:	2202      	movs	r2, #2
 8008486:	2100      	movs	r1, #0
 8008488:	f005 fde0 	bl	800e04c <xTaskGenericNotify>
}
 800848c:	e7d6      	b.n	800843c <NotifyMessagingTask+0x1c>
 800848e:	46c0      	nop			; (mov r8, r8)
 8008490:	08018a28 	.word	0x08018a28
 8008494:	200014e0 	.word	0x200014e0
 8008498:	200014e4 	.word	0x200014e4
 800849c:	200014e8 	.word	0x200014e8
 80084a0:	200014ec 	.word	0x200014ec
 80084a4:	200014f0 	.word	0x200014f0
 80084a8:	200014f4 	.word	0x200014f4

080084ac <SendMessageFromPort>:
 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7   !0        !0				0								Not allowed.
 8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port, uint8_t src, uint8_t dst,
    uint16_t code, uint16_t numberOfParams){
 80084ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ae:	46de      	mov	lr, fp
 80084b0:	4657      	mov	r7, sl
 80084b2:	464e      	mov	r6, r9
 80084b4:	4645      	mov	r5, r8
 80084b6:	b5e0      	push	{r5, r6, r7, lr}
 80084b8:	b085      	sub	sp, #20
 80084ba:	4680      	mov	r8, r0
 80084bc:	468b      	mov	fp, r1
 80084be:	0014      	movs	r4, r2
 80084c0:	469a      	mov	sl, r3
 80084c2:	ab0e      	add	r3, sp, #56	; 0x38
 80084c4:	881d      	ldrh	r5, [r3, #0]
	static uint16_t ptrShift =0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if( (port == 0 && dst == 0) ||// cases 3 & 4
 80084c6:	0003      	movs	r3, r0
 80084c8:	4313      	orrs	r3, r2
 80084ca:	d100      	bne.n	80084ce <SendMessageFromPort+0x22>
 80084cc:	e170      	b.n	80087b0 <SendMessageFromPort+0x304>
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d147      	bne.n	8008562 <SendMessageFromPort+0xb6>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) ||// cases 1 & 2
 80084d2:	1c93      	adds	r3, r2, #2
 80084d4:	b2db      	uxtb	r3, r3
	(port != 0 && src != 0 && dst == 0)) {// case 7
		return BOS_ERR_WrongParam;
 80084d6:	2067      	movs	r0, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) ||// cases 1 & 2
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d900      	bls.n	80084de <SendMessageFromPort+0x32>
 80084dc:	e149      	b.n	8008772 <SendMessageFromPort+0x2c6>
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 80084de:	2000      	movs	r0, #0
 80084e0:	f005 f884 	bl	800d5ec <uxTaskPriorityGet>
 80084e4:	9002      	str	r0, [sp, #8]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80084e6:	2105      	movs	r1, #5
 80084e8:	2000      	movs	r0, #0
 80084ea:	f005 f88f 	bl	800d60c <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 80084ee:	4bbe      	ldr	r3, [pc, #760]	; (80087e8 <SendMessageFromPort+0x33c>)
 80084f0:	2248      	movs	r2, #72	; 0x48
 80084f2:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 80084f4:	3212      	adds	r2, #18
 80084f6:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if( (port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST))
 80084f8:	465b      	mov	r3, fp
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d000      	beq.n	8008500 <SendMessageFromPort+0x54>
 80084fe:	e16d      	b.n	80087dc <SendMessageFromPort+0x330>
	    || code == 0)// case 2 and part of case 6
	    {
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 8008500:	3d01      	subs	r5, #1
 8008502:	4bba      	ldr	r3, [pc, #744]	; (80087ec <SendMessageFromPort+0x340>)
 8008504:	5d5f      	ldrb	r7, [r3, r5]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t) length);
 8008506:	4eba      	ldr	r6, [pc, #744]	; (80087f0 <SendMessageFromPort+0x344>)
 8008508:	00e9      	lsls	r1, r5, #3
 800850a:	1b49      	subs	r1, r1, r5
 800850c:	00c9      	lsls	r1, r1, #3
 800850e:	4db9      	ldr	r5, [pc, #740]	; (80087f4 <SendMessageFromPort+0x348>)
 8008510:	1949      	adds	r1, r1, r5
 8008512:	003a      	movs	r2, r7
 8008514:	0030      	movs	r0, r6
 8008516:	f009 fa9e 	bl	8011a56 <memcpy>
			length +=groupMembers + 2;// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 800851a:	3e03      	subs	r6, #3
 800851c:	70b7      	strb	r7, [r6, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 800851e:	1cfd      	adds	r5, r7, #3
 8008520:	002a      	movs	r2, r5
 8008522:	0031      	movs	r1, r6
 8008524:	48b4      	ldr	r0, [pc, #720]	; (80087f8 <SendMessageFromPort+0x34c>)
 8008526:	f009 fa96 	bl	8011a56 <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8((uint32_t*) &crcBuffer, (length + 3));
 800852a:	b2bf      	uxth	r7, r7
 800852c:	1cf9      	adds	r1, r7, #3
 800852e:	48b2      	ldr	r0, [pc, #712]	; (80087f8 <SendMessageFromPort+0x34c>)
 8008530:	f003 fa38 	bl	800b9a4 <CalculateCRC8>
 8008534:	5570      	strb	r0, [r6, r5]
	/* end of crc calculation function addition */

//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);
	memset(crcBuffer,0,sizeof (crcBuffer));
 8008536:	2238      	movs	r2, #56	; 0x38
 8008538:	2100      	movs	r1, #0
 800853a:	48af      	ldr	r0, [pc, #700]	; (80087f8 <SendMessageFromPort+0x34c>)
 800853c:	f009 fa94 	bl	8011a68 <memset>
//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST) {
 8008540:	3402      	adds	r4, #2
 8008542:	b2e4      	uxtb	r4, r4
 8008544:	2c01      	cmp	r4, #1
 8008546:	d900      	bls.n	800854a <SendMessageFromPort+0x9e>
 8008548:	e104      	b.n	8008754 <SendMessageFromPort+0x2a8>
		writePxDMAMutex(port,message,length + 4,cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else {
		if(code == 0 && src == 0) {// Forwarded broadcast or multicast. Update with original source.
 800854a:	4653      	mov	r3, sl
 800854c:	2b00      	cmp	r3, #0
 800854e:	d000      	beq.n	8008552 <SendMessageFromPort+0xa6>
 8008550:	e0f5      	b.n	800873e <SendMessageFromPort+0x292>
 8008552:	465b      	mov	r3, fp
 8008554:	2b00      	cmp	r3, #0
 8008556:	d000      	beq.n	800855a <SendMessageFromPort+0xae>
 8008558:	e0f1      	b.n	800873e <SendMessageFromPort+0x292>
			src =message[4];
 800855a:	4ba3      	ldr	r3, [pc, #652]	; (80087e8 <SendMessageFromPort+0x33c>)
 800855c:	791b      	ldrb	r3, [r3, #4]
 800855e:	469b      	mov	fp, r3
 8008560:	e0ed      	b.n	800873e <SendMessageFromPort+0x292>
	(port != 0 && src != 0 && dst == 0)) {// case 7
 8008562:	2900      	cmp	r1, #0
 8008564:	d002      	beq.n	800856c <SendMessageFromPort+0xc0>
 8008566:	2a00      	cmp	r2, #0
 8008568:	d100      	bne.n	800856c <SendMessageFromPort+0xc0>
 800856a:	e123      	b.n	80087b4 <SendMessageFromPort+0x308>
	TaskPriority =uxTaskPriorityGet( NULL);
 800856c:	2000      	movs	r0, #0
 800856e:	f005 f83d 	bl	800d5ec <uxTaskPriorityGet>
 8008572:	9002      	str	r0, [sp, #8]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8008574:	2105      	movs	r1, #5
 8008576:	2000      	movs	r0, #0
 8008578:	f005 f848 	bl	800d60c <vTaskPrioritySet>
	message[0] ='H';
 800857c:	4b9a      	ldr	r3, [pc, #616]	; (80087e8 <SendMessageFromPort+0x33c>)
 800857e:	2248      	movs	r2, #72	; 0x48
 8008580:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8008582:	3212      	adds	r2, #18
 8008584:	705a      	strb	r2, [r3, #1]
	    || code == 0)// case 2 and part of case 6
 8008586:	4653      	mov	r3, sl
 8008588:	2b00      	cmp	r3, #0
 800858a:	d0b9      	beq.n	8008500 <SendMessageFromPort+0x54>
		if(src == 0)
 800858c:	465b      	mov	r3, fp
 800858e:	2b00      	cmp	r3, #0
 8008590:	d102      	bne.n	8008598 <SendMessageFromPort+0xec>
		src =myID;
 8008592:	4b9a      	ldr	r3, [pc, #616]	; (80087fc <SendMessageFromPort+0x350>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	469b      	mov	fp, r3
		message[2] =length;
 8008598:	4993      	ldr	r1, [pc, #588]	; (80087e8 <SendMessageFromPort+0x33c>)
 800859a:	2300      	movs	r3, #0
 800859c:	708b      	strb	r3, [r1, #2]
		message[3] =dst;
 800859e:	70cc      	strb	r4, [r1, #3]
		message[4] =src;
 80085a0:	465b      	mov	r3, fp
 80085a2:	710b      	strb	r3, [r1, #4]
		message[5] = (BOS.response) | (BOS.trace << 2) | (extendCode << 1)
 80085a4:	4a96      	ldr	r2, [pc, #600]	; (8008800 <SendMessageFromPort+0x354>)
 80085a6:	79d3      	ldrb	r3, [r2, #7]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	7992      	ldrb	r2, [r2, #6]
 80085ac:	4313      	orrs	r3, r2
		if(code > 0xFF)
 80085ae:	22ff      	movs	r2, #255	; 0xff
 80085b0:	4552      	cmp	r2, sl
 80085b2:	4192      	sbcs	r2, r2
 80085b4:	4252      	negs	r2, r2
		message[5] = (BOS.response) | (BOS.trace << 2) | (extendCode << 1)
 80085b6:	0052      	lsls	r2, r2, #1
 80085b8:	4313      	orrs	r3, r2
		    | (extendOptions);
 80085ba:	b2db      	uxtb	r3, r3
		message[5] = (BOS.response) | (BOS.trace << 2) | (extendCode << 1)
 80085bc:	714b      	strb	r3, [r1, #5]
		message[6 + shift] =(uint8_t) code;
 80085be:	4652      	mov	r2, sl
 80085c0:	718a      	strb	r2, [r1, #6]
 80085c2:	2200      	movs	r2, #0
 80085c4:	4691      	mov	r9, r2
		if(extendCode == true) {
 80085c6:	4652      	mov	r2, sl
 80085c8:	2aff      	cmp	r2, #255	; 0xff
 80085ca:	d903      	bls.n	80085d4 <SendMessageFromPort+0x128>
			message[6 + shift] =(uint8_t) (code >> 8);
 80085cc:	0a12      	lsrs	r2, r2, #8
 80085ce:	71ca      	strb	r2, [r1, #7]
			++shift;
 80085d0:	2201      	movs	r2, #1
 80085d2:	4691      	mov	r9, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE) {
 80085d4:	2d2e      	cmp	r5, #46	; 0x2e
 80085d6:	d92f      	bls.n	8008638 <SendMessageFromPort+0x18c>
			message[5] |=0x80;
 80085d8:	2280      	movs	r2, #128	; 0x80
 80085da:	4252      	negs	r2, r2
 80085dc:	4313      	orrs	r3, r2
 80085de:	4a82      	ldr	r2, [pc, #520]	; (80087e8 <SendMessageFromPort+0x33c>)
 80085e0:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 80085e2:	4b88      	ldr	r3, [pc, #544]	; (8008804 <SendMessageFromPort+0x358>)
 80085e4:	801d      	strh	r5, [r3, #0]
	uint8_t length =0, shift =0;
 80085e6:	2600      	movs	r6, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 80085e8:	252e      	movs	r5, #46	; 0x2e
					memcpy((char*) &message[7 + shift],
 80085ea:	464b      	mov	r3, r9
 80085ec:	3307      	adds	r3, #7
 80085ee:	4694      	mov	ip, r2
 80085f0:	4463      	add	r3, ip
 80085f2:	9303      	str	r3, [sp, #12]
			while(totalNumberOfParams != 0) {
 80085f4:	4b83      	ldr	r3, [pc, #524]	; (8008804 <SendMessageFromPort+0x358>)
 80085f6:	881f      	ldrh	r7, [r3, #0]
 80085f8:	2f00      	cmp	r7, #0
 80085fa:	d02b      	beq.n	8008654 <SendMessageFromPort+0x1a8>
				if( (totalNumberOfParams / numberOfParams) >= 1) {
 80085fc:	0029      	movs	r1, r5
 80085fe:	0038      	movs	r0, r7
 8008600:	f7f7 fda6 	bl	8000150 <__udivsi3>
 8008604:	b280      	uxth	r0, r0
 8008606:	2800      	cmp	r0, #0
 8008608:	d140      	bne.n	800868c <SendMessageFromPort+0x1e0>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 800860a:	4b77      	ldr	r3, [pc, #476]	; (80087e8 <SendMessageFromPort+0x33c>)
 800860c:	795a      	ldrb	r2, [r3, #5]
 800860e:	237f      	movs	r3, #127	; 0x7f
 8008610:	4013      	ands	r3, r2
 8008612:	4a75      	ldr	r2, [pc, #468]	; (80087e8 <SendMessageFromPort+0x33c>)
 8008614:	7153      	strb	r3, [r2, #5]
					memcpy((char*) &message[7 + shift],
 8008616:	4d7c      	ldr	r5, [pc, #496]	; (8008808 <SendMessageFromPort+0x35c>)
 8008618:	8829      	ldrh	r1, [r5, #0]
					    (&messageParams[0] + ptrShift),numberOfParams);
 800861a:	4b7c      	ldr	r3, [pc, #496]	; (800880c <SendMessageFromPort+0x360>)
 800861c:	18c9      	adds	r1, r1, r3
					memcpy((char*) &message[7 + shift],
 800861e:	003a      	movs	r2, r7
 8008620:	9803      	ldr	r0, [sp, #12]
 8008622:	f009 fa18 	bl	8011a56 <memcpy>
					ptrShift =0;
 8008626:	2300      	movs	r3, #0
 8008628:	802b      	strh	r3, [r5, #0]
					totalNumberOfParams =0;
 800862a:	4a76      	ldr	r2, [pc, #472]	; (8008804 <SendMessageFromPort+0x358>)
 800862c:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 800862e:	1d3e      	adds	r6, r7, #4
 8008630:	444e      	add	r6, r9
 8008632:	b2f6      	uxtb	r6, r6
					numberOfParams =totalNumberOfParams;
 8008634:	003d      	movs	r5, r7
 8008636:	e7dd      	b.n	80085f4 <SendMessageFromPort+0x148>
			memcpy((char*) &message[7 + shift], (&messageParams[0] + ptrShift),
 8008638:	464b      	mov	r3, r9
 800863a:	3307      	adds	r3, #7
 800863c:	486a      	ldr	r0, [pc, #424]	; (80087e8 <SendMessageFromPort+0x33c>)
 800863e:	1818      	adds	r0, r3, r0
 8008640:	4b71      	ldr	r3, [pc, #452]	; (8008808 <SendMessageFromPort+0x35c>)
 8008642:	8819      	ldrh	r1, [r3, #0]
 8008644:	4b71      	ldr	r3, [pc, #452]	; (800880c <SendMessageFromPort+0x360>)
 8008646:	18c9      	adds	r1, r1, r3
 8008648:	002a      	movs	r2, r5
 800864a:	f009 fa04 	bl	8011a56 <memcpy>
			length =numberOfParams + shift + 4;
 800864e:	1d2e      	adds	r6, r5, #4
 8008650:	444e      	add	r6, r9
 8008652:	b2f6      	uxtb	r6, r6
		if(AddBcastPayload == true) {
 8008654:	4b6e      	ldr	r3, [pc, #440]	; (8008810 <SendMessageFromPort+0x364>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d057      	beq.n	800870c <SendMessageFromPort+0x260>
			if(dstGroupID < BOS_BROADCAST) {
 800865c:	4b6d      	ldr	r3, [pc, #436]	; (8008814 <SendMessageFromPort+0x368>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2bff      	cmp	r3, #255	; 0xff
 8008662:	d100      	bne.n	8008666 <SendMessageFromPort+0x1ba>
 8008664:	e0aa      	b.n	80087bc <SendMessageFromPort+0x310>
				for(uint16_t i =1; i <= N; i++)// N modules
 8008666:	4a6c      	ldr	r2, [pc, #432]	; (8008818 <SendMessageFromPort+0x36c>)
 8008668:	7812      	ldrb	r2, [r2, #0]
 800866a:	4694      	mov	ip, r2
 800866c:	2a00      	cmp	r2, #0
 800866e:	d06f      	beq.n	8008750 <SendMessageFromPort+0x2a4>
 8008670:	2701      	movs	r7, #1
 8008672:	409f      	lsls	r7, r3
 8008674:	4869      	ldr	r0, [pc, #420]	; (800881c <SendMessageFromPort+0x370>)
 8008676:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 8008678:	2200      	movs	r2, #0
						    - 1] =i;
 800867a:	495b      	ldr	r1, [pc, #364]	; (80087e8 <SendMessageFromPort+0x33c>)
 800867c:	468a      	mov	sl, r1
 800867e:	44aa      	add	sl, r5
 8008680:	0021      	movs	r1, r4
 8008682:	4664      	mov	r4, ip
 8008684:	46b4      	mov	ip, r6
 8008686:	464e      	mov	r6, r9
 8008688:	4689      	mov	r9, r1
 800868a:	e017      	b.n	80086bc <SendMessageFromPort+0x210>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 800868c:	9500      	str	r5, [sp, #0]
 800868e:	4653      	mov	r3, sl
 8008690:	0022      	movs	r2, r4
 8008692:	4659      	mov	r1, fp
 8008694:	4640      	mov	r0, r8
 8008696:	f7ff ff09 	bl	80084ac <SendMessageFromPort>
					osDelay(10);
 800869a:	200a      	movs	r0, #10
 800869c:	f004 f8b7 	bl	800c80e <osDelay>
					totalNumberOfParams -=numberOfParams;
 80086a0:	4a58      	ldr	r2, [pc, #352]	; (8008804 <SendMessageFromPort+0x358>)
 80086a2:	8813      	ldrh	r3, [r2, #0]
 80086a4:	1b5b      	subs	r3, r3, r5
 80086a6:	8013      	strh	r3, [r2, #0]
					ptrShift +=numberOfParams;
 80086a8:	4a57      	ldr	r2, [pc, #348]	; (8008808 <SendMessageFromPort+0x35c>)
 80086aa:	8813      	ldrh	r3, [r2, #0]
 80086ac:	18eb      	adds	r3, r5, r3
 80086ae:	8013      	strh	r3, [r2, #0]
 80086b0:	e7a0      	b.n	80085f4 <SendMessageFromPort+0x148>
				for(uint16_t i =1; i <= N; i++)// N modules
 80086b2:	3301      	adds	r3, #1
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	3002      	adds	r0, #2
 80086b8:	42a3      	cmp	r3, r4
 80086ba:	d80e      	bhi.n	80086da <SendMessageFromPort+0x22e>
					if(InGroup(i,dstGroupID)) {
 80086bc:	8801      	ldrh	r1, [r0, #0]
 80086be:	420f      	tst	r7, r1
 80086c0:	d0f7      	beq.n	80086b2 <SendMessageFromPort+0x206>
						++groupMembers;// Add this member
 80086c2:	3201      	adds	r2, #1
 80086c4:	b2d2      	uxtb	r2, r2
						if( (numberOfParams + groupMembers + 1)
 80086c6:	18a9      	adds	r1, r5, r2
 80086c8:	3101      	adds	r1, #1
 80086ca:	292d      	cmp	r1, #45	; 0x2d
 80086cc:	dd00      	ble.n	80086d0 <SendMessageFromPort+0x224>
 80086ce:	e073      	b.n	80087b8 <SendMessageFromPort+0x30c>
						    - 1] =i;
 80086d0:	4651      	mov	r1, sl
 80086d2:	1889      	adds	r1, r1, r2
 80086d4:	1989      	adds	r1, r1, r6
 80086d6:	718b      	strb	r3, [r1, #6]
 80086d8:	e7eb      	b.n	80086b2 <SendMessageFromPort+0x206>
 80086da:	464c      	mov	r4, r9
 80086dc:	46b1      	mov	r9, r6
 80086de:	4666      	mov	r6, ip
				message[7 + shift + numberOfParams + groupMembers] =
 80086e0:	464b      	mov	r3, r9
 80086e2:	3307      	adds	r3, #7
 80086e4:	195b      	adds	r3, r3, r5
 80086e6:	189b      	adds	r3, r3, r2
 80086e8:	493f      	ldr	r1, [pc, #252]	; (80087e8 <SendMessageFromPort+0x33c>)
 80086ea:	54ca      	strb	r2, [r1, r3]
			    && ( (numberOfParams + groupMembers + 2)
 80086ec:	18ad      	adds	r5, r5, r2
 80086ee:	3502      	adds	r5, #2
			return BOS_ERR_MSG_DOES_NOT_FIT;
 80086f0:	2069      	movs	r0, #105	; 0x69
			    && ( (numberOfParams + groupMembers + 2)
 80086f2:	2d2d      	cmp	r5, #45	; 0x2d
 80086f4:	dc3d      	bgt.n	8008772 <SendMessageFromPort+0x2c6>
			    ++bcastID;
 80086f6:	484a      	ldr	r0, [pc, #296]	; (8008820 <SendMessageFromPort+0x374>)
 80086f8:	7801      	ldrb	r1, [r0, #0]
 80086fa:	3101      	adds	r1, #1
 80086fc:	b2c9      	uxtb	r1, r1
			message[7 + shift + numberOfParams + groupMembers + 1] =
 80086fe:	7001      	strb	r1, [r0, #0]
 8008700:	4839      	ldr	r0, [pc, #228]	; (80087e8 <SendMessageFromPort+0x33c>)
 8008702:	18c3      	adds	r3, r0, r3
 8008704:	7059      	strb	r1, [r3, #1]
 8008706:	3602      	adds	r6, #2
			length +=groupMembers + 2;// + bcastID + number of group member + group members IDs 
 8008708:	18b6      	adds	r6, r6, r2
 800870a:	b2f6      	uxtb	r6, r6
	message[2] =length;
 800870c:	4b36      	ldr	r3, [pc, #216]	; (80087e8 <SendMessageFromPort+0x33c>)
 800870e:	469a      	mov	sl, r3
 8008710:	709e      	strb	r6, [r3, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8008712:	1cf5      	adds	r5, r6, #3
 8008714:	002a      	movs	r2, r5
 8008716:	0019      	movs	r1, r3
 8008718:	4837      	ldr	r0, [pc, #220]	; (80087f8 <SendMessageFromPort+0x34c>)
 800871a:	f009 f99c 	bl	8011a56 <memcpy>
	message[length + 3] =CalculateCRC8((uint32_t*) &crcBuffer, (length + 3));
 800871e:	b2b7      	uxth	r7, r6
 8008720:	0029      	movs	r1, r5
 8008722:	4835      	ldr	r0, [pc, #212]	; (80087f8 <SendMessageFromPort+0x34c>)
 8008724:	f003 f93e 	bl	800b9a4 <CalculateCRC8>
 8008728:	4653      	mov	r3, sl
 800872a:	5558      	strb	r0, [r3, r5]
	memset(crcBuffer,0,sizeof (crcBuffer));
 800872c:	2238      	movs	r2, #56	; 0x38
 800872e:	2100      	movs	r1, #0
 8008730:	4831      	ldr	r0, [pc, #196]	; (80087f8 <SendMessageFromPort+0x34c>)
 8008732:	f009 f999 	bl	8011a68 <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST) {
 8008736:	3402      	adds	r4, #2
 8008738:	b2e4      	uxtb	r4, r4
 800873a:	2c01      	cmp	r4, #1
 800873c:	d80a      	bhi.n	8008754 <SendMessageFromPort+0x2a8>
		}
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 800873e:	4658      	mov	r0, fp
 8008740:	f7fa fd28 	bl	8003194 <FindBroadcastRoutes>
 8008744:	2500      	movs	r5, #0
		
		/* Send to all my broadcast ports */
		for(uint8_t p =1; p <= NumOfPorts; p++) {
 8008746:	2401      	movs	r4, #1
			if( (bcastRoutes[myID - 1] >> (p - 1)) & 0x01) {
 8008748:	4b36      	ldr	r3, [pc, #216]	; (8008824 <SendMessageFromPort+0x378>)
 800874a:	4698      	mov	r8, r3
 800874c:	4e2b      	ldr	r6, [pc, #172]	; (80087fc <SendMessageFromPort+0x350>)
 800874e:	e01c      	b.n	800878a <SendMessageFromPort+0x2de>
			uint8_t groupMembers =0;
 8008750:	2200      	movs	r2, #0
 8008752:	e7c5      	b.n	80086e0 <SendMessageFromPort+0x234>
		writePxDMAMutex(port,message,length + 4,cmd50ms);
 8008754:	1d3a      	adds	r2, r7, #4
 8008756:	b292      	uxth	r2, r2
 8008758:	2332      	movs	r3, #50	; 0x32
 800875a:	4923      	ldr	r1, [pc, #140]	; (80087e8 <SendMessageFromPort+0x33c>)
 800875c:	4640      	mov	r0, r8
 800875e:	f003 ff73 	bl	800c648 <writePxDMAMutex>
			}
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 8008762:	9902      	ldr	r1, [sp, #8]
 8008764:	2000      	movs	r0, #0
 8008766:	f004 ff51 	bl	800d60c <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 800876a:	4b2f      	ldr	r3, [pc, #188]	; (8008828 <SendMessageFromPort+0x37c>)
 800876c:	2202      	movs	r2, #2
 800876e:	701a      	strb	r2, [r3, #0]
	
	return result;
 8008770:	2000      	movs	r0, #0
}
 8008772:	b005      	add	sp, #20
 8008774:	bc3c      	pop	{r2, r3, r4, r5}
 8008776:	4690      	mov	r8, r2
 8008778:	4699      	mov	r9, r3
 800877a:	46a2      	mov	sl, r4
 800877c:	46ab      	mov	fp, r5
 800877e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(uint8_t p =1; p <= NumOfPorts; p++) {
 8008780:	3401      	adds	r4, #1
 8008782:	b2e4      	uxtb	r4, r4
 8008784:	3501      	adds	r5, #1
 8008786:	2c07      	cmp	r4, #7
 8008788:	d0eb      	beq.n	8008762 <SendMessageFromPort+0x2b6>
			if( (bcastRoutes[myID - 1] >> (p - 1)) & 0x01) {
 800878a:	7833      	ldrb	r3, [r6, #0]
 800878c:	3b01      	subs	r3, #1
 800878e:	005b      	lsls	r3, r3, #1
 8008790:	4642      	mov	r2, r8
 8008792:	5a9b      	ldrh	r3, [r3, r2]
 8008794:	412b      	asrs	r3, r5
 8008796:	07db      	lsls	r3, r3, #31
 8008798:	d5f2      	bpl.n	8008780 <SendMessageFromPort+0x2d4>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 800879a:	1d3a      	adds	r2, r7, #4
 800879c:	b292      	uxth	r2, r2
 800879e:	2332      	movs	r3, #50	; 0x32
 80087a0:	4911      	ldr	r1, [pc, #68]	; (80087e8 <SendMessageFromPort+0x33c>)
 80087a2:	0020      	movs	r0, r4
 80087a4:	f003 ff50 	bl	800c648 <writePxDMAMutex>
				Delay_ms(1);
 80087a8:	2001      	movs	r0, #1
 80087aa:	f006 f85b 	bl	800e864 <HAL_Delay>
 80087ae:	e7e7      	b.n	8008780 <SendMessageFromPort+0x2d4>
		return BOS_ERR_WrongParam;
 80087b0:	2067      	movs	r0, #103	; 0x67
 80087b2:	e7de      	b.n	8008772 <SendMessageFromPort+0x2c6>
 80087b4:	2067      	movs	r0, #103	; 0x67
 80087b6:	e7dc      	b.n	8008772 <SendMessageFromPort+0x2c6>
						return BOS_ERR_MSG_DOES_NOT_FIT;
 80087b8:	2069      	movs	r0, #105	; 0x69
 80087ba:	e7da      	b.n	8008772 <SendMessageFromPort+0x2c6>
			    && ( (numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 80087bc:	1c6b      	adds	r3, r5, #1
			return BOS_ERR_MSG_DOES_NOT_FIT;
 80087be:	2069      	movs	r0, #105	; 0x69
			    && ( (numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 80087c0:	2b2d      	cmp	r3, #45	; 0x2d
 80087c2:	dcd6      	bgt.n	8008772 <SendMessageFromPort+0x2c6>
			message[7 + shift + numberOfParams] =++bcastID;
 80087c4:	4a16      	ldr	r2, [pc, #88]	; (8008820 <SendMessageFromPort+0x374>)
 80087c6:	7813      	ldrb	r3, [r2, #0]
 80087c8:	3301      	adds	r3, #1
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	7013      	strb	r3, [r2, #0]
 80087ce:	4a06      	ldr	r2, [pc, #24]	; (80087e8 <SendMessageFromPort+0x33c>)
 80087d0:	1955      	adds	r5, r2, r5
 80087d2:	444d      	add	r5, r9
 80087d4:	71eb      	strb	r3, [r5, #7]
			length +=1;// + bcastID
 80087d6:	3601      	adds	r6, #1
 80087d8:	b2f6      	uxtb	r6, r6
 80087da:	e797      	b.n	800870c <SendMessageFromPort+0x260>
	    || code == 0)// case 2 and part of case 6
 80087dc:	4653      	mov	r3, sl
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d100      	bne.n	80087e4 <SendMessageFromPort+0x338>
 80087e2:	e68d      	b.n	8008500 <SendMessageFromPort+0x54>
 80087e4:	e6d8      	b.n	8008598 <SendMessageFromPort+0xec>
 80087e6:	46c0      	nop			; (mov r8, r8)
 80087e8:	20000ef8 	.word	0x20000ef8
 80087ec:	20000f30 	.word	0x20000f30
 80087f0:	20000efb 	.word	0x20000efb
 80087f4:	20000d08 	.word	0x20000d08
 80087f8:	20001458 	.word	0x20001458
 80087fc:	20001076 	.word	0x20001076
 8008800:	20006988 	.word	0x20006988
 8008804:	2000158e 	.word	0x2000158e
 8008808:	2000158c 	.word	0x2000158c
 800880c:	20000f38 	.word	0x20000f38
 8008810:	20000a74 	.word	0x20000a74
 8008814:	2000001d 	.word	0x2000001d
 8008818:	2000001c 	.word	0x2000001c
 800881c:	20000ec0 	.word	0x20000ec0
 8008820:	20000cb4 	.word	0x20000cb4
 8008824:	20000cb8 	.word	0x20000cb8
 8008828:	20001110 	.word	0x20001110

0800882c <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 800882c:	b530      	push	{r4, r5, lr}
 800882e:	b083      	sub	sp, #12
 8008830:	0005      	movs	r5, r0
	AddBcastPayload = false;
 8008832:	4b0b      	ldr	r3, [pc, #44]	; (8008860 <ForwardReceivedMessage+0x34>)
 8008834:	2200      	movs	r2, #0
 8008836:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8008838:	1e42      	subs	r2, r0, #1
 800883a:	00d3      	lsls	r3, r2, #3
 800883c:	1a9b      	subs	r3, r3, r2
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	4a08      	ldr	r2, [pc, #32]	; (8008864 <ForwardReceivedMessage+0x38>)
 8008842:	5c9c      	ldrb	r4, [r3, r2]
	port =FindRoute(myID,dst);
 8008844:	4b08      	ldr	r3, [pc, #32]	; (8008868 <ForwardReceivedMessage+0x3c>)
 8008846:	7818      	ldrb	r0, [r3, #0]
 8008848:	0021      	movs	r1, r4
 800884a:	f7fa fd41 	bl	80032d0 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 800884e:	9500      	str	r5, [sp, #0]
 8008850:	2300      	movs	r3, #0
 8008852:	0022      	movs	r2, r4
 8008854:	2100      	movs	r1, #0
 8008856:	f7ff fe29 	bl	80084ac <SendMessageFromPort>
}
 800885a:	2000      	movs	r0, #0
 800885c:	b003      	add	sp, #12
 800885e:	bd30      	pop	{r4, r5, pc}
 8008860:	20000a74 	.word	0x20000a74
 8008864:	20000d08 	.word	0x20000d08
 8008868:	20001076 	.word	0x20001076

0800886c <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup, uint8_t incomingPort){
 800886c:	b500      	push	{lr}
 800886e:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8008870:	4b0c      	ldr	r3, [pc, #48]	; (80088a4 <BroadcastReceivedMessage+0x38>)
 8008872:	2200      	movs	r2, #0
 8008874:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 8008876:	4b0c      	ldr	r3, [pc, #48]	; (80088a8 <BroadcastReceivedMessage+0x3c>)
 8008878:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 800887a:	28ff      	cmp	r0, #255	; 0xff
 800887c:	d009      	beq.n	8008892 <BroadcastReceivedMessage+0x26>
	SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 800887e:	9100      	str	r1, [sp, #0]
 8008880:	2300      	movs	r3, #0
 8008882:	22fe      	movs	r2, #254	; 0xfe
 8008884:	2100      	movs	r1, #0
 8008886:	2000      	movs	r0, #0
 8008888:	f7ff fe10 	bl	80084ac <SendMessageFromPort>
}
 800888c:	2000      	movs	r0, #0
 800888e:	b003      	add	sp, #12
 8008890:	bd00      	pop	{pc}
	SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 8008892:	9100      	str	r1, [sp, #0]
 8008894:	2300      	movs	r3, #0
 8008896:	32ff      	adds	r2, #255	; 0xff
 8008898:	2100      	movs	r1, #0
 800889a:	2000      	movs	r0, #0
 800889c:	f7ff fe06 	bl	80084ac <SendMessageFromPort>
 80088a0:	e7f4      	b.n	800888c <BroadcastReceivedMessage+0x20>
 80088a2:	46c0      	nop			; (mov r8, r8)
 80088a4:	20000a74 	.word	0x20000a74
 80088a8:	2000001d 	.word	0x2000001d

080088ac <BroadcastMessage>:
    uint16_t numberOfParams){
 80088ac:	b530      	push	{r4, r5, lr}
 80088ae:	b083      	sub	sp, #12
 80088b0:	001c      	movs	r4, r3
	AddBcastPayload = true;
 80088b2:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <BroadcastMessage+0x44>)
 80088b4:	2501      	movs	r5, #1
 80088b6:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 80088b8:	4b0e      	ldr	r3, [pc, #56]	; (80088f4 <BroadcastMessage+0x48>)
 80088ba:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 80088bc:	29ff      	cmp	r1, #255	; 0xff
 80088be:	d00e      	beq.n	80088de <BroadcastMessage+0x32>
	SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 80088c0:	9400      	str	r4, [sp, #0]
 80088c2:	0013      	movs	r3, r2
 80088c4:	22fe      	movs	r2, #254	; 0xfe
 80088c6:	0001      	movs	r1, r0
 80088c8:	2000      	movs	r0, #0
 80088ca:	f7ff fdef 	bl	80084ac <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 80088ce:	0022      	movs	r2, r4
 80088d0:	2100      	movs	r1, #0
 80088d2:	4809      	ldr	r0, [pc, #36]	; (80088f8 <BroadcastMessage+0x4c>)
 80088d4:	f009 f8c8 	bl	8011a68 <memset>
}
 80088d8:	2000      	movs	r0, #0
 80088da:	b003      	add	sp, #12
 80088dc:	bd30      	pop	{r4, r5, pc}
	SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 80088de:	9400      	str	r4, [sp, #0]
 80088e0:	0013      	movs	r3, r2
 80088e2:	22ff      	movs	r2, #255	; 0xff
 80088e4:	0001      	movs	r1, r0
 80088e6:	2000      	movs	r0, #0
 80088e8:	f7ff fde0 	bl	80084ac <SendMessageFromPort>
 80088ec:	e7ef      	b.n	80088ce <BroadcastMessage+0x22>
 80088ee:	46c0      	nop			; (mov r8, r8)
 80088f0:	20000a74 	.word	0x20000a74
 80088f4:	2000001d 	.word	0x2000001d
 80088f8:	20000f38 	.word	0x20000f38

080088fc <SendMessageToModule>:
    uint16_t numberOfParams){
 80088fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088fe:	b083      	sub	sp, #12
 8008900:	0004      	movs	r4, r0
 8008902:	000e      	movs	r6, r1
 8008904:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST) {
 8008906:	28ff      	cmp	r0, #255	; 0xff
 8008908:	d012      	beq.n	8008930 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 800890a:	4f0d      	ldr	r7, [pc, #52]	; (8008940 <SendMessageToModule+0x44>)
 800890c:	7838      	ldrb	r0, [r7, #0]
 800890e:	0021      	movs	r1, r4
 8008910:	f7fa fcde 	bl	80032d0 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8008914:	7839      	ldrb	r1, [r7, #0]
 8008916:	9500      	str	r5, [sp, #0]
 8008918:	0033      	movs	r3, r6
 800891a:	0022      	movs	r2, r4
 800891c:	f7ff fdc6 	bl	80084ac <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8008920:	002a      	movs	r2, r5
 8008922:	2100      	movs	r1, #0
 8008924:	4807      	ldr	r0, [pc, #28]	; (8008944 <SendMessageToModule+0x48>)
 8008926:	f009 f89f 	bl	8011a68 <memset>
}
 800892a:	2000      	movs	r0, #0
 800892c:	b003      	add	sp, #12
 800892e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8008930:	4b03      	ldr	r3, [pc, #12]	; (8008940 <SendMessageToModule+0x44>)
 8008932:	7818      	ldrb	r0, [r3, #0]
 8008934:	0013      	movs	r3, r2
 8008936:	000a      	movs	r2, r1
 8008938:	21ff      	movs	r1, #255	; 0xff
 800893a:	f7ff ffb7 	bl	80088ac <BroadcastMessage>
 800893e:	e7f4      	b.n	800892a <SendMessageToModule+0x2e>
 8008940:	20001076 	.word	0x20001076
 8008944:	20000f38 	.word	0x20000f38

08008948 <StartScastDMAStream>:
/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP, uint8_t srcM, uint8_t dstP,
    uint8_t dstM, uint8_t direction, uint32_t count, uint32_t timeout,
    bool stored){
 8008948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800894a:	46de      	mov	lr, fp
 800894c:	4657      	mov	r7, sl
 800894e:	464e      	mov	r6, r9
 8008950:	4645      	mov	r5, r8
 8008952:	b5e0      	push	{r5, r6, r7, lr}
 8008954:	b091      	sub	sp, #68	; 0x44
 8008956:	900f      	str	r0, [sp, #60]	; 0x3c
 8008958:	000c      	movs	r4, r1
 800895a:	9106      	str	r1, [sp, #24]
 800895c:	0015      	movs	r5, r2
 800895e:	920e      	str	r2, [sp, #56]	; 0x38
 8008960:	001e      	movs	r6, r3
 8008962:	ab1a      	add	r3, sp, #104	; 0x68
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	4698      	mov	r8, r3
 8008968:	ab1d      	add	r3, sp, #116	; 0x74
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID) {
 800896e:	4b5a      	ldr	r3, [pc, #360]	; (8008ad8 <StartScastDMAStream+0x190>)
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	428b      	cmp	r3, r1
 8008974:	d11d      	bne.n	80089b2 <StartScastDMAStream+0x6a>
			}
			else {
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t) (count >> 24); /* Count */
 8008976:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008978:	0e1b      	lsrs	r3, r3, #24
 800897a:	9308      	str	r3, [sp, #32]
			messageParams[1] =(uint8_t) (count >> 16);
 800897c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800897e:	0c1b      	lsrs	r3, r3, #16
 8008980:	b2db      	uxtb	r3, r3
 8008982:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] =(uint8_t) (count >> 8);
 8008984:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008986:	0a1b      	lsrs	r3, r3, #8
 8008988:	b2db      	uxtb	r3, r3
 800898a:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] =(uint8_t) count;
			messageParams[4] =(uint8_t) (timeout >> 24); /* Timeout */
 800898c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800898e:	0e1b      	lsrs	r3, r3, #24
 8008990:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] =(uint8_t) (timeout >> 16);
 8008992:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008994:	0c1b      	lsrs	r3, r3, #16
 8008996:	b2db      	uxtb	r3, r3
 8008998:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] =(uint8_t) (timeout >> 8);
 800899a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800899c:	0a1b      	lsrs	r3, r3, #8
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	469b      	mov	fp, r3
 80089a2:	4d4e      	ldr	r5, [pc, #312]	; (8008adc <StartScastDMAStream+0x194>)
 80089a4:	231a      	movs	r3, #26
 80089a6:	4699      	mov	r9, r3
 80089a8:	44a9      	add	r9, r5
				temp2 =dstP;
 80089aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089ac:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] =(uint8_t) (count >> 24); /* Count */
 80089ae:	4c4c      	ldr	r4, [pc, #304]	; (8008ae0 <StartScastDMAStream+0x198>)
 80089b0:	e05c      	b.n	8008a6c <StartScastDMAStream+0x124>
		messageParams[0] =(uint8_t) (count >> 24); /* Count */
 80089b2:	4b4b      	ldr	r3, [pc, #300]	; (8008ae0 <StartScastDMAStream+0x198>)
 80089b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80089b6:	0e12      	lsrs	r2, r2, #24
 80089b8:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t) (count >> 16);
 80089ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80089bc:	0c12      	lsrs	r2, r2, #16
 80089be:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t) (count >> 8);
 80089c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80089c2:	0a12      	lsrs	r2, r2, #8
 80089c4:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t) count;
 80089c6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80089c8:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t) (timeout >> 24); /* Timeout */
 80089ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80089cc:	0e12      	lsrs	r2, r2, #24
 80089ce:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t) (timeout >> 16);
 80089d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80089d2:	0c12      	lsrs	r2, r2, #16
 80089d4:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t) (timeout >> 8);
 80089d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80089d8:	0a12      	lsrs	r2, r2, #8
 80089da:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t) timeout;
 80089dc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80089de:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 80089e0:	4642      	mov	r2, r8
 80089e2:	721a      	strb	r2, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 80089e4:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 80089e6:	729e      	strb	r6, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 80089e8:	72dd      	strb	r5, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 80089ea:	4652      	mov	r2, sl
 80089ec:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80089ee:	220d      	movs	r2, #13
 80089f0:	211c      	movs	r1, #28
 80089f2:	0020      	movs	r0, r4
 80089f4:	f7ff ff82 	bl	80088fc <SendMessageToModule>
	if(stored) {
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 80089f8:	2000      	movs	r0, #0
 80089fa:	b011      	add	sp, #68	; 0x44
 80089fc:	bc3c      	pop	{r2, r3, r4, r5}
 80089fe:	4690      	mov	r8, r2
 8008a00:	4699      	mov	r9, r3
 8008a02:	46a2      	mov	sl, r4
 8008a04:	46ab      	mov	fp, r5
 8008a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 =FindRoute(route[i],srcM);
 8008a08:	9906      	ldr	r1, [sp, #24]
 8008a0a:	f7fa fc61 	bl	80032d0 <FindRoute>
 8008a0e:	9007      	str	r0, [sp, #28]
			FindRoute(srcM,dstM);
 8008a10:	0031      	movs	r1, r6
 8008a12:	9806      	ldr	r0, [sp, #24]
 8008a14:	f7fa fc5c 	bl	80032d0 <FindRoute>
			if(route[i] == dstM) {
 8008a18:	7878      	ldrb	r0, [r7, #1]
				temp2 =dstP;
 8008a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if(route[i] == dstM) {
 8008a1c:	42b0      	cmp	r0, r6
 8008a1e:	d134      	bne.n	8008a8a <StartScastDMAStream+0x142>
			messageParams[0] =(uint8_t) (count >> 24); /* Count */
 8008a20:	9a08      	ldr	r2, [sp, #32]
 8008a22:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t) (count >> 16);
 8008a24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a26:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t) (count >> 8);
 8008a28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a2a:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t) count;
 8008a2c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008a2e:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t) (timeout >> 24); /* Timeout */
 8008a30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a32:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t) (timeout >> 16);
 8008a34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a36:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t) (timeout >> 8);
 8008a38:	465a      	mov	r2, fp
 8008a3a:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t) timeout;
 8008a3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008a3e:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8008a40:	4642      	mov	r2, r8
 8008a42:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8008a44:	9a07      	ldr	r2, [sp, #28]
 8008a46:	7262      	strb	r2, [r4, #9]
			messageParams[10] =temp2; /* destination port */
 8008a48:	72a3      	strb	r3, [r4, #10]
			messageParams[11] =stored; /* EEPROM storage */
 8008a4a:	4653      	mov	r3, sl
 8008a4c:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM,dstM);
 8008a4e:	0031      	movs	r1, r6
 8008a50:	9806      	ldr	r0, [sp, #24]
 8008a52:	f7fa fc3d 	bl	80032d0 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8008a56:	7878      	ldrb	r0, [r7, #1]
 8008a58:	220c      	movs	r2, #12
 8008a5a:	211b      	movs	r1, #27
 8008a5c:	f7ff ff4e 	bl	80088fc <SendMessageToModule>
			osDelay(10);
 8008a60:	200a      	movs	r0, #10
 8008a62:	f003 fed4 	bl	800c80e <osDelay>
 8008a66:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof (route); i++) {
 8008a68:	454d      	cmp	r5, r9
 8008a6a:	d013      	beq.n	8008a94 <StartScastDMAStream+0x14c>
		FindRoute(srcM,dstM);
 8008a6c:	0031      	movs	r1, r6
 8008a6e:	9806      	ldr	r0, [sp, #24]
 8008a70:	f7fa fc2e 	bl	80032d0 <FindRoute>
 8008a74:	002f      	movs	r7, r5
		if(route[i]) {
 8008a76:	7868      	ldrb	r0, [r5, #1]
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d0f4      	beq.n	8008a66 <StartScastDMAStream+0x11e>
			if(route[i + 1]) {
 8008a7c:	78a9      	ldrb	r1, [r5, #2]
 8008a7e:	2900      	cmp	r1, #0
 8008a80:	d0c2      	beq.n	8008a08 <StartScastDMAStream+0xc0>
				temp1 =FindRoute(route[i],route[i + 1]);
 8008a82:	f7fa fc25 	bl	80032d0 <FindRoute>
 8008a86:	9007      	str	r0, [sp, #28]
 8008a88:	e7c2      	b.n	8008a10 <StartScastDMAStream+0xc8>
				temp2 =FindRoute(route[i],route[i - 1]);
 8008a8a:	7839      	ldrb	r1, [r7, #0]
 8008a8c:	f7fa fc20 	bl	80032d0 <FindRoute>
 8008a90:	0003      	movs	r3, r0
 8008a92:	e7c5      	b.n	8008a20 <StartScastDMAStream+0xd8>
	if(srcM == dstM)
 8008a94:	9806      	ldr	r0, [sp, #24]
 8008a96:	42b0      	cmp	r0, r6
 8008a98:	d118      	bne.n	8008acc <StartScastDMAStream+0x184>
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8008a9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008aa0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008aa2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008aa4:	4640      	mov	r0, r8
 8008aa6:	f7ff fbdf 	bl	8008268 <SetupDMAStreams>
	if(stored) {
 8008aaa:	4653      	mov	r3, sl
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d0a3      	beq.n	80089f8 <StartScastDMAStream+0xb0>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	9304      	str	r3, [sp, #16]
 8008ab4:	9303      	str	r3, [sp, #12]
 8008ab6:	9302      	str	r3, [sp, #8]
 8008ab8:	9301      	str	r3, [sp, #4]
 8008aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ac0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008ac2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008ac4:	4640      	mov	r0, r8
 8008ac6:	f7fa f8c5 	bl	8002c54 <SaveEEstreams>
 8008aca:	e795      	b.n	80089f8 <StartScastDMAStream+0xb0>
	port =FindRoute(srcM,dstM);
 8008acc:	0031      	movs	r1, r6
 8008ace:	f7fa fbff 	bl	80032d0 <FindRoute>
 8008ad2:	900e      	str	r0, [sp, #56]	; 0x38
 8008ad4:	e7e1      	b.n	8008a9a <StartScastDMAStream+0x152>
 8008ad6:	46c0      	nop			; (mov r8, r8)
 8008ad8:	20001076 	.word	0x20001076
 8008adc:	20006a3f 	.word	0x20006a3f
 8008ae0:	20000f38 	.word	0x20000f38

08008ae4 <BackEndTask>:
}

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void *argument){
 8008ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ae6:	46de      	mov	lr, fp
 8008ae8:	4657      	mov	r7, sl
 8008aea:	464e      	mov	r6, r9
 8008aec:	4645      	mov	r5, r8
 8008aee:	b5e0      	push	{r5, r6, r7, lr}
 8008af0:	b087      	sub	sp, #28
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
 8008af2:	2300      	movs	r3, #0
 8008af4:	469b      	mov	fp, r3
							memcpy(&cMessage[port - 1][0],
							    &UARTRxBuf[port - 1][parseStart],
							    packetLength);
						}
						else {// Message wraps around
							memcpy(&cMessage[port - 1][0],
 8008af6:	4bd5      	ldr	r3, [pc, #852]	; (8008e4c <BackEndTask+0x368>)
 8008af8:	3b70      	subs	r3, #112	; 0x70
 8008afa:	9304      	str	r3, [sp, #16]
							memcpy(&cMessage[port - 1][0],
 8008afc:	4bd3      	ldr	r3, [pc, #844]	; (8008e4c <BackEndTask+0x368>)
 8008afe:	3b70      	subs	r3, #112	; 0x70
 8008b00:	9305      	str	r3, [sp, #20]
 8008b02:	e19e      	b.n	8008e42 <BackEndTask+0x35e>
 8008b04:	1ebb      	subs	r3, r7, #2
 8008b06:	4698      	mov	r8, r3
 8008b08:	4bd1      	ldr	r3, [pc, #836]	; (8008e50 <BackEndTask+0x36c>)
 8008b0a:	4443      	add	r3, r8
 8008b0c:	4699      	mov	r9, r3
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE;
 8008b0e:	7819      	ldrb	r1, [r3, #0]
 8008b10:	293f      	cmp	r1, #63	; 0x3f
 8008b12:	dc17      	bgt.n	8008b44 <BackEndTask+0x60>
							if(BOS.disableCLI == false) {
 8008b14:	4bcf      	ldr	r3, [pc, #828]	; (8008e54 <BackEndTask+0x370>)
 8008b16:	7edb      	ldrb	r3, [r3, #27]
 8008b18:	469c      	mov	ip, r3
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE;
 8008b1a:	000b      	movs	r3, r1
							if(BOS.disableCLI == false) {
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	e004      	b.n	8008b2a <BackEndTask+0x46>
					else if(i == (MSG_RX_BUF_SIZE - 1)
 8008b20:	2b3f      	cmp	r3, #63	; 0x3f
 8008b22:	d023      	beq.n	8008b6c <BackEndTask+0x88>
				    i++) {
 8008b24:	3301      	adds	r3, #1
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE;
 8008b26:	2b40      	cmp	r3, #64	; 0x40
 8008b28:	d009      	beq.n	8008b3e <BackEndTask+0x5a>
					if(i < (MSG_RX_BUF_SIZE - 1)
 8008b2a:	2b3e      	cmp	r3, #62	; 0x3e
 8008b2c:	dcf8      	bgt.n	8008b20 <BackEndTask+0x3c>
					    && UARTRxBuf[port - 1][i] == 'H'
 8008b2e:	5cf2      	ldrb	r2, [r6, r3]
 8008b30:	2a48      	cmp	r2, #72	; 0x48
 8008b32:	d1f5      	bne.n	8008b20 <BackEndTask+0x3c>
					    && UARTRxBuf[port - 1][i + 1] == 'Z') {
 8008b34:	18f2      	adds	r2, r6, r3
 8008b36:	7852      	ldrb	r2, [r2, #1]
 8008b38:	2a5a      	cmp	r2, #90	; 0x5a
 8008b3a:	d1f1      	bne.n	8008b20 <BackEndTask+0x3c>
 8008b3c:	469b      	mov	fp, r3
				if(emptyBuffer) {
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d000      	beq.n	8008b44 <BackEndTask+0x60>
 8008b42:	e15f      	b.n	8008e04 <BackEndTask+0x320>
				if(packetStart == MSG_RX_BUF_SIZE - 3) {
 8008b44:	465b      	mov	r3, fp
 8008b46:	2b3d      	cmp	r3, #61	; 0x3d
 8008b48:	d051      	beq.n	8008bee <BackEndTask+0x10a>
				else if(packetStart == MSG_RX_BUF_SIZE - 2) {
 8008b4a:	2b3e      	cmp	r3, #62	; 0x3e
 8008b4c:	d100      	bne.n	8008b50 <BackEndTask+0x6c>
 8008b4e:	e090      	b.n	8008c72 <BackEndTask+0x18e>
				else if(packetStart == MSG_RX_BUF_SIZE - 1) {
 8008b50:	2b3f      	cmp	r3, #63	; 0x3f
 8008b52:	d100      	bne.n	8008b56 <BackEndTask+0x72>
 8008b54:	e092      	b.n	8008c7c <BackEndTask+0x198>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 8008b56:	4643      	mov	r3, r8
 8008b58:	019a      	lsls	r2, r3, #6
 8008b5a:	4bbf      	ldr	r3, [pc, #764]	; (8008e58 <BackEndTask+0x374>)
 8008b5c:	189b      	adds	r3, r3, r2
 8008b5e:	445b      	add	r3, fp
 8008b60:	789b      	ldrb	r3, [r3, #2]
 8008b62:	9300      	str	r3, [sp, #0]
					parseStart =packetStart + 3;
 8008b64:	465b      	mov	r3, fp
 8008b66:	3303      	adds	r3, #3
 8008b68:	9302      	str	r3, [sp, #8]
 8008b6a:	e046      	b.n	8008bfa <BackEndTask+0x116>
 8008b6c:	9600      	str	r6, [sp, #0]
					    && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H'
 8008b6e:	223f      	movs	r2, #63	; 0x3f
 8008b70:	4692      	mov	sl, r2
 8008b72:	44b2      	add	sl, r6
 8008b74:	4652      	mov	r2, sl
 8008b76:	7812      	ldrb	r2, [r2, #0]
 8008b78:	2a48      	cmp	r2, #72	; 0x48
 8008b7a:	d005      	beq.n	8008b88 <BackEndTask+0xa4>
							if(BOS.disableCLI == false) {
 8008b7c:	4663      	mov	r3, ip
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d000      	beq.n	8008b84 <BackEndTask+0xa0>
 8008b82:	e13f      	b.n	8008e04 <BackEndTask+0x320>
 8008b84:	9a00      	ldr	r2, [sp, #0]
 8008b86:	e00c      	b.n	8008ba2 <BackEndTask+0xbe>
					    && UARTRxBuf[port - 1][0] == 'Z')// HZ wrap around
 8008b88:	7832      	ldrb	r2, [r6, #0]
 8008b8a:	2a5a      	cmp	r2, #90	; 0x5a
 8008b8c:	d1f6      	bne.n	8008b7c <BackEndTask+0x98>
				if(emptyBuffer) {
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	d074      	beq.n	8008c7c <BackEndTask+0x198>
						packetStart = MSG_RX_BUF_SIZE - 1;
 8008b92:	469b      	mov	fp, r3
 8008b94:	e136      	b.n	8008e04 <BackEndTask+0x320>
									        || (j == MSG_RX_BUF_SIZE - 1
 8008b96:	293f      	cmp	r1, #63	; 0x3f
 8008b98:	d024      	beq.n	8008be4 <BackEndTask+0x100>
								    j < MSG_RX_BUF_SIZE; j++) {
 8008b9a:	3101      	adds	r1, #1
								for(int j =UARTRxBufIndex[port - 1];
 8008b9c:	2940      	cmp	r1, #64	; 0x40
 8008b9e:	d100      	bne.n	8008ba2 <BackEndTask+0xbe>
 8008ba0:	e130      	b.n	8008e04 <BackEndTask+0x320>
									if(UARTRxBuf[port - 1][j] == 0xD
 8008ba2:	5c53      	ldrb	r3, [r2, r1]
 8008ba4:	2b0d      	cmp	r3, #13
 8008ba6:	d1f8      	bne.n	8008b9a <BackEndTask+0xb6>
									    && ( (j < MSG_RX_BUF_SIZE - 1
 8008ba8:	293e      	cmp	r1, #62	; 0x3e
 8008baa:	dcf4      	bgt.n	8008b96 <BackEndTask+0xb2>
									        && UARTRxBuf[port - 1][j + 1]
 8008bac:	1850      	adds	r0, r2, r1
 8008bae:	7843      	ldrb	r3, [r0, #1]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1f0      	bne.n	8008b96 <BackEndTask+0xb2>
										UARTRxBuf[port - 1][j] =0;
 8008bb4:	4643      	mov	r3, r8
 8008bb6:	019a      	lsls	r2, r3, #6
 8008bb8:	4ba7      	ldr	r3, [pc, #668]	; (8008e58 <BackEndTask+0x374>)
 8008bba:	189b      	adds	r3, r3, r2
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	545a      	strb	r2, [r3, r1]
										UARTRxBufIndex[port - 1] =j + 1;// Advance buffer index
 8008bc0:	3101      	adds	r1, #1
 8008bc2:	464b      	mov	r3, r9
 8008bc4:	7019      	strb	r1, [r3, #0]
										portStatus[PcPort] =FREE;// Free the previous CLI port 
 8008bc6:	4ba5      	ldr	r3, [pc, #660]	; (8008e5c <BackEndTask+0x378>)
 8008bc8:	7819      	ldrb	r1, [r3, #0]
 8008bca:	48a5      	ldr	r0, [pc, #660]	; (8008e60 <BackEndTask+0x37c>)
 8008bcc:	5442      	strb	r2, [r0, r1]
										portStatus[port] =CLI;// Continue the CLI session on this port
 8008bce:	3203      	adds	r2, #3
 8008bd0:	7022      	strb	r2, [r4, #0]
										PcPort =port;
 8008bd2:	701d      	strb	r5, [r3, #0]
										xTaskNotifyGive(
 8008bd4:	4ba3      	ldr	r3, [pc, #652]	; (8008e64 <BackEndTask+0x380>)
 8008bd6:	6818      	ldr	r0, [r3, #0]
 8008bd8:	2300      	movs	r3, #0
 8008bda:	3a01      	subs	r2, #1
 8008bdc:	2100      	movs	r1, #0
 8008bde:	f005 fa35 	bl	800e04c <xTaskGenericNotify>
										break;
 8008be2:	e10f      	b.n	8008e04 <BackEndTask+0x320>
									            && UARTRxBuf[port
 8008be4:	7813      	ldrb	r3, [r2, #0]
							emptyBuffer = true;
 8008be6:	2001      	movs	r0, #1
									            && UARTRxBuf[port
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1a8      	bne.n	8008b3e <BackEndTask+0x5a>
 8008bec:	e7e2      	b.n	8008bb4 <BackEndTask+0xd0>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8008bee:	0033      	movs	r3, r6
 8008bf0:	333f      	adds	r3, #63	; 0x3f
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	9300      	str	r3, [sp, #0]
					parseStart =0;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	9302      	str	r3, [sp, #8]
				packetEnd =packetStart + (packetLength + 3);// Packet length is counted from Dst to before CRC
 8008bfa:	9b00      	ldr	r3, [sp, #0]
 8008bfc:	3303      	adds	r3, #3
 8008bfe:	9301      	str	r3, [sp, #4]
 8008c00:	445b      	add	r3, fp
 8008c02:	469a      	mov	sl, r3
				if(packetEnd > MSG_RX_BUF_SIZE - 1)// wrap-around
 8008c04:	2b3f      	cmp	r3, #63	; 0x3f
 8008c06:	dd03      	ble.n	8008c10 <BackEndTask+0x12c>
				packetEnd -= MSG_RX_BUF_SIZE;
 8008c08:	2340      	movs	r3, #64	; 0x40
 8008c0a:	425b      	negs	r3, r3
 8008c0c:	469c      	mov	ip, r3
 8008c0e:	44e2      	add	sl, ip
				if(packetStart != packetEnd)// Non-empty packet
 8008c10:	45da      	cmp	sl, fp
 8008c12:	d100      	bne.n	8008c16 <BackEndTask+0x132>
 8008c14:	e0d0      	b.n	8008db8 <BackEndTask+0x2d4>
					Delay_ms(1);
 8008c16:	2001      	movs	r0, #1
 8008c18:	f005 fe24 	bl	800e864 <HAL_Delay>
					if(packetStart < packetEnd) {
 8008c1c:	45da      	cmp	sl, fp
 8008c1e:	dd34      	ble.n	8008c8a <BackEndTask+0x1a6>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8008c20:	4b91      	ldr	r3, [pc, #580]	; (8008e68 <BackEndTask+0x384>)
 8008c22:	18fb      	adds	r3, r7, r3
 8008c24:	019b      	lsls	r3, r3, #6
 8008c26:	445b      	add	r3, fp
 8008c28:	4a8b      	ldr	r2, [pc, #556]	; (8008e58 <BackEndTask+0x374>)
 8008c2a:	4694      	mov	ip, r2
 8008c2c:	4463      	add	r3, ip
 8008c2e:	9303      	str	r3, [sp, #12]
 8008c30:	9a01      	ldr	r2, [sp, #4]
 8008c32:	0019      	movs	r1, r3
 8008c34:	488d      	ldr	r0, [pc, #564]	; (8008e6c <BackEndTask+0x388>)
 8008c36:	f008 ff0e 	bl	8011a56 <memcpy>
					crc8 =CalculateCRC8((uint32_t*) &crcBuffer,
 8008c3a:	9b00      	ldr	r3, [sp, #0]
 8008c3c:	1cd9      	adds	r1, r3, #3
 8008c3e:	488b      	ldr	r0, [pc, #556]	; (8008e6c <BackEndTask+0x388>)
 8008c40:	f002 feb0 	bl	800b9a4 <CalculateCRC8>
 8008c44:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof (crcBuffer));
 8008c46:	2238      	movs	r2, #56	; 0x38
 8008c48:	2100      	movs	r1, #0
 8008c4a:	4888      	ldr	r0, [pc, #544]	; (8008e6c <BackEndTask+0x388>)
 8008c4c:	f008 ff0c 	bl	8011a68 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]) {
 8008c50:	4643      	mov	r3, r8
 8008c52:	019b      	lsls	r3, r3, #6
 8008c54:	4a80      	ldr	r2, [pc, #512]	; (8008e58 <BackEndTask+0x374>)
 8008c56:	4694      	mov	ip, r2
 8008c58:	4463      	add	r3, ip
 8008c5a:	4652      	mov	r2, sl
 8008c5c:	5c9b      	ldrb	r3, [r3, r2]
 8008c5e:	9a01      	ldr	r2, [sp, #4]
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d040      	beq.n	8008ce6 <BackEndTask+0x202>
				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */
				if(packetStart < packetEnd) {
					memset(&UARTRxBuf[port - 1][packetStart],0,
					    (packetLength) + 4);
 8008c64:	9a00      	ldr	r2, [sp, #0]
 8008c66:	3204      	adds	r2, #4
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8008c68:	2100      	movs	r1, #0
 8008c6a:	9803      	ldr	r0, [sp, #12]
 8008c6c:	f008 fefc 	bl	8011a68 <memset>
 8008c70:	e0b8      	b.n	8008de4 <BackEndTask+0x300>
					packetLength =UARTRxBuf[port - 1][0];
 8008c72:	7833      	ldrb	r3, [r6, #0]
 8008c74:	9300      	str	r3, [sp, #0]
					parseStart =1;
 8008c76:	2301      	movs	r3, #1
 8008c78:	9302      	str	r3, [sp, #8]
 8008c7a:	e7be      	b.n	8008bfa <BackEndTask+0x116>
					packetLength =UARTRxBuf[port - 1][1];
 8008c7c:	7873      	ldrb	r3, [r6, #1]
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	233f      	movs	r3, #63	; 0x3f
 8008c82:	469b      	mov	fp, r3
					parseStart =2;
 8008c84:	3b3d      	subs	r3, #61	; 0x3d
 8008c86:	9302      	str	r3, [sp, #8]
 8008c88:	e7b7      	b.n	8008bfa <BackEndTask+0x116>
						MSG_RX_BUF_SIZE - packetStart);
 8008c8a:	2240      	movs	r2, #64	; 0x40
 8008c8c:	465b      	mov	r3, fp
 8008c8e:	1ad3      	subs	r3, r2, r3
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8008c90:	4a75      	ldr	r2, [pc, #468]	; (8008e68 <BackEndTask+0x384>)
 8008c92:	18b9      	adds	r1, r7, r2
 8008c94:	0189      	lsls	r1, r1, #6
 8008c96:	4459      	add	r1, fp
 8008c98:	4a6f      	ldr	r2, [pc, #444]	; (8008e58 <BackEndTask+0x374>)
 8008c9a:	4694      	mov	ip, r2
 8008c9c:	4461      	add	r1, ip
 8008c9e:	9303      	str	r3, [sp, #12]
 8008ca0:	001a      	movs	r2, r3
 8008ca2:	4872      	ldr	r0, [pc, #456]	; (8008e6c <BackEndTask+0x388>)
 8008ca4:	f008 fed7 	bl	8011a56 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],
 8008ca8:	4a70      	ldr	r2, [pc, #448]	; (8008e6c <BackEndTask+0x388>)
 8008caa:	0010      	movs	r0, r2
 8008cac:	9b03      	ldr	r3, [sp, #12]
 8008cae:	469c      	mov	ip, r3
 8008cb0:	4460      	add	r0, ip
						        - (MSG_RX_BUF_SIZE - packetStart));
 8008cb2:	9a01      	ldr	r2, [sp, #4]
 8008cb4:	1ad2      	subs	r2, r2, r3
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],
 8008cb6:	0031      	movs	r1, r6
 8008cb8:	f008 fecd 	bl	8011a56 <memcpy>
					crc8 =CalculateCRC8((uint32_t*) &crcBuffer,
 8008cbc:	9b00      	ldr	r3, [sp, #0]
 8008cbe:	1cd9      	adds	r1, r3, #3
 8008cc0:	486a      	ldr	r0, [pc, #424]	; (8008e6c <BackEndTask+0x388>)
 8008cc2:	f002 fe6f 	bl	800b9a4 <CalculateCRC8>
 8008cc6:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof (crcBuffer));
 8008cc8:	2238      	movs	r2, #56	; 0x38
 8008cca:	2100      	movs	r1, #0
 8008ccc:	4867      	ldr	r0, [pc, #412]	; (8008e6c <BackEndTask+0x388>)
 8008cce:	f008 fecb 	bl	8011a68 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]) {
 8008cd2:	4643      	mov	r3, r8
 8008cd4:	019b      	lsls	r3, r3, #6
 8008cd6:	4a60      	ldr	r2, [pc, #384]	; (8008e58 <BackEndTask+0x374>)
 8008cd8:	4694      	mov	ip, r2
 8008cda:	4463      	add	r3, ip
 8008cdc:	4652      	mov	r2, sl
 8008cde:	5c9b      	ldrb	r3, [r3, r2]
 8008ce0:	9a01      	ldr	r2, [sp, #4]
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d168      	bne.n	8008db8 <BackEndTask+0x2d4>
						portStatus[port] =MSG;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	7023      	strb	r3, [r4, #0]
						messageLength[port - 1] =packetLength;
 8008cea:	1ebb      	subs	r3, r7, #2
 8008cec:	4a60      	ldr	r2, [pc, #384]	; (8008e70 <BackEndTask+0x38c>)
 8008cee:	9900      	ldr	r1, [sp, #0]
 8008cf0:	54d1      	strb	r1, [r2, r3]
						    <= (MSG_RX_BUF_SIZE - parseStart - 1)) {
 8008cf2:	233f      	movs	r3, #63	; 0x3f
 8008cf4:	9c02      	ldr	r4, [sp, #8]
 8008cf6:	1b1b      	subs	r3, r3, r4
						if( (packetLength)
 8008cf8:	000a      	movs	r2, r1
 8008cfa:	428b      	cmp	r3, r1
 8008cfc:	db27      	blt.n	8008d4e <BackEndTask+0x26a>
							memcpy(&cMessage[port - 1][0],
 8008cfe:	00f8      	lsls	r0, r7, #3
 8008d00:	1bc0      	subs	r0, r0, r7
 8008d02:	00c0      	lsls	r0, r0, #3
 8008d04:	9b05      	ldr	r3, [sp, #20]
 8008d06:	469c      	mov	ip, r3
 8008d08:	4460      	add	r0, ip
							    &UARTRxBuf[port - 1][parseStart],
 8008d0a:	4b57      	ldr	r3, [pc, #348]	; (8008e68 <BackEndTask+0x384>)
 8008d0c:	18f9      	adds	r1, r7, r3
 8008d0e:	0189      	lsls	r1, r1, #6
 8008d10:	46a4      	mov	ip, r4
 8008d12:	4461      	add	r1, ip
 8008d14:	4b50      	ldr	r3, [pc, #320]	; (8008e58 <BackEndTask+0x374>)
 8008d16:	18c9      	adds	r1, r1, r3
							memcpy(&cMessage[port - 1][0],
 8008d18:	f008 fe9d 	bl	8011a56 <memcpy>
						if(packetStart < packetEnd) {
 8008d1c:	45da      	cmp	sl, fp
 8008d1e:	dd36      	ble.n	8008d8e <BackEndTask+0x2aa>
							    (packetLength) + 4);
 8008d20:	9a00      	ldr	r2, [sp, #0]
 8008d22:	3204      	adds	r2, #4
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8008d24:	4b50      	ldr	r3, [pc, #320]	; (8008e68 <BackEndTask+0x384>)
 8008d26:	18f8      	adds	r0, r7, r3
 8008d28:	0180      	lsls	r0, r0, #6
 8008d2a:	4458      	add	r0, fp
 8008d2c:	4b4a      	ldr	r3, [pc, #296]	; (8008e58 <BackEndTask+0x374>)
 8008d2e:	18c0      	adds	r0, r0, r3
 8008d30:	2100      	movs	r1, #0
 8008d32:	f008 fe99 	bl	8011a68 <memset>
						UARTRxBufIndex[port - 1] = (packetEnd + 1);// Set buffer pointer after the CRC byte 
 8008d36:	4653      	mov	r3, sl
 8008d38:	3301      	adds	r3, #1
 8008d3a:	464a      	mov	r2, r9
 8008d3c:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8008d3e:	4a4d      	ldr	r2, [pc, #308]	; (8008e74 <BackEndTask+0x390>)
 8008d40:	8813      	ldrh	r3, [r2, #0]
 8008d42:	3301      	adds	r3, #1
 8008d44:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);
 8008d46:	0028      	movs	r0, r5
 8008d48:	f7ff fb6a 	bl	8008420 <NotifyMessagingTask>
						continue;// Inspect the next port circular buffer
 8008d4c:	e05a      	b.n	8008e04 <BackEndTask+0x320>
 8008d4e:	00fb      	lsls	r3, r7, #3
 8008d50:	1bdb      	subs	r3, r3, r7
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	4698      	mov	r8, r3
							    MSG_RX_BUF_SIZE - parseStart);
 8008d56:	2440      	movs	r4, #64	; 0x40
 8008d58:	9b02      	ldr	r3, [sp, #8]
 8008d5a:	1ae4      	subs	r4, r4, r3
							memcpy(&cMessage[port - 1][0],
 8008d5c:	9a04      	ldr	r2, [sp, #16]
 8008d5e:	4442      	add	r2, r8
 8008d60:	0010      	movs	r0, r2
							    &UARTRxBuf[port - 1][parseStart],
 8008d62:	4a41      	ldr	r2, [pc, #260]	; (8008e68 <BackEndTask+0x384>)
 8008d64:	18b9      	adds	r1, r7, r2
 8008d66:	0189      	lsls	r1, r1, #6
 8008d68:	469c      	mov	ip, r3
 8008d6a:	4461      	add	r1, ip
 8008d6c:	4b3a      	ldr	r3, [pc, #232]	; (8008e58 <BackEndTask+0x374>)
 8008d6e:	18c9      	adds	r1, r1, r3
							memcpy(&cMessage[port - 1][0],
 8008d70:	0022      	movs	r2, r4
 8008d72:	f008 fe70 	bl	8011a56 <memcpy>
							    &cMessage[port - 1][MSG_RX_BUF_SIZE
 8008d76:	4640      	mov	r0, r8
 8008d78:	3870      	subs	r0, #112	; 0x70
 8008d7a:	1900      	adds	r0, r0, r4
 8008d7c:	4b33      	ldr	r3, [pc, #204]	; (8008e4c <BackEndTask+0x368>)
 8008d7e:	469c      	mov	ip, r3
 8008d80:	4460      	add	r0, ip
							        - (MSG_RX_BUF_SIZE - parseStart));// wrap-around
 8008d82:	9b00      	ldr	r3, [sp, #0]
 8008d84:	1b1a      	subs	r2, r3, r4
							memcpy(
 8008d86:	0031      	movs	r1, r6
 8008d88:	f008 fe65 	bl	8011a56 <memcpy>
 8008d8c:	e7c6      	b.n	8008d1c <BackEndTask+0x238>
							MSG_RX_BUF_SIZE - packetStart);
 8008d8e:	2440      	movs	r4, #64	; 0x40
 8008d90:	465b      	mov	r3, fp
 8008d92:	1ae4      	subs	r4, r4, r3
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8008d94:	4b34      	ldr	r3, [pc, #208]	; (8008e68 <BackEndTask+0x384>)
 8008d96:	18f8      	adds	r0, r7, r3
 8008d98:	0180      	lsls	r0, r0, #6
 8008d9a:	4458      	add	r0, fp
 8008d9c:	4b2e      	ldr	r3, [pc, #184]	; (8008e58 <BackEndTask+0x374>)
 8008d9e:	18c0      	adds	r0, r0, r3
 8008da0:	0022      	movs	r2, r4
 8008da2:	2100      	movs	r1, #0
 8008da4:	f008 fe60 	bl	8011a68 <memset>
							    ( (packetLength) + 4)
 8008da8:	9a00      	ldr	r2, [sp, #0]
 8008daa:	3204      	adds	r2, #4
							        - (MSG_RX_BUF_SIZE - packetStart));
 8008dac:	1b12      	subs	r2, r2, r4
							memset(&UARTRxBuf[port - 1][0],0,
 8008dae:	2100      	movs	r1, #0
 8008db0:	0030      	movs	r0, r6
 8008db2:	f008 fe59 	bl	8011a68 <memset>
 8008db6:	e7be      	b.n	8008d36 <BackEndTask+0x252>
				}
				else {// wrap around
					memset(&UARTRxBuf[port - 1][packetStart],0,
					MSG_RX_BUF_SIZE - packetStart);
 8008db8:	2240      	movs	r2, #64	; 0x40
 8008dba:	465b      	mov	r3, fp
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	4698      	mov	r8, r3
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8008dc0:	4b29      	ldr	r3, [pc, #164]	; (8008e68 <BackEndTask+0x384>)
 8008dc2:	18f8      	adds	r0, r7, r3
 8008dc4:	0180      	lsls	r0, r0, #6
 8008dc6:	4458      	add	r0, fp
 8008dc8:	4b23      	ldr	r3, [pc, #140]	; (8008e58 <BackEndTask+0x374>)
 8008dca:	18c0      	adds	r0, r0, r3
 8008dcc:	4642      	mov	r2, r8
 8008dce:	2100      	movs	r1, #0
 8008dd0:	f008 fe4a 	bl	8011a68 <memset>
					memset(&UARTRxBuf[port - 1][0],0,
					    ( (packetLength) + 4)
 8008dd4:	9a00      	ldr	r2, [sp, #0]
 8008dd6:	3204      	adds	r2, #4
					        - (MSG_RX_BUF_SIZE - packetStart));
 8008dd8:	4643      	mov	r3, r8
 8008dda:	1ad2      	subs	r2, r2, r3
					memset(&UARTRxBuf[port - 1][0],0,
 8008ddc:	2100      	movs	r1, #0
 8008dde:	0030      	movs	r0, r6
 8008de0:	f008 fe42 	bl	8011a68 <memset>
				}
				
				/* A.6.2 Advance buffer index */
				UARTRxBufIndex[port - 1] = (packetEnd + 1);// Set buffer pointer after the CRC byte 
 8008de4:	4653      	mov	r3, sl
 8008de6:	3301      	adds	r3, #1
 8008de8:	464a      	mov	r2, r9
 8008dea:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;
 8008dec:	4a22      	ldr	r2, [pc, #136]	; (8008e78 <BackEndTask+0x394>)
 8008dee:	8813      	ldrh	r3, [r2, #0]
 8008df0:	3301      	adds	r3, #1
 8008df2:	8013      	strh	r3, [r2, #0]
 8008df4:	e014      	b.n	8008e20 <BackEndTask+0x33c>
			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true) {
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
				portStatus[port] =FREE;
				HAL_UART_Receive_DMA(GetUart(port),
 8008df6:	0028      	movs	r0, r5
 8008df8:	f003 fbba 	bl	800c570 <GetUart>
 8008dfc:	2240      	movs	r2, #64	; 0x40
 8008dfe:	0031      	movs	r1, r6
 8008e00:	f007 fef2 	bl	8010be8 <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++) {
 8008e04:	3501      	adds	r5, #1
 8008e06:	b2ed      	uxtb	r5, r5
 8008e08:	3701      	adds	r7, #1
 8008e0a:	3640      	adds	r6, #64	; 0x40
 8008e0c:	2d07      	cmp	r5, #7
 8008e0e:	d016      	beq.n	8008e3e <BackEndTask+0x35a>
 8008e10:	1e7c      	subs	r4, r7, #1
 8008e12:	4b13      	ldr	r3, [pc, #76]	; (8008e60 <BackEndTask+0x37c>)
 8008e14:	469c      	mov	ip, r3
 8008e16:	4464      	add	r4, ip
			if(portStatus[port] == MSG || portStatus[port] == FREE) {
 8008e18:	7823      	ldrb	r3, [r4, #0]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d800      	bhi.n	8008e20 <BackEndTask+0x33c>
 8008e1e:	e671      	b.n	8008b04 <BackEndTask+0x20>
 8008e20:	1ebb      	subs	r3, r7, #2
 8008e22:	4a16      	ldr	r2, [pc, #88]	; (8008e7c <BackEndTask+0x398>)
 8008e24:	4694      	mov	ip, r2
 8008e26:	4463      	add	r3, ip
			if(MsgDMAStopped[port - 1] == true) {
 8008e28:	781a      	ldrb	r2, [r3, #0]
 8008e2a:	2a00      	cmp	r2, #0
 8008e2c:	d0ea      	beq.n	8008e04 <BackEndTask+0x320>
				MsgDMAStopped[port - 1] = false;
 8008e2e:	2200      	movs	r2, #0
 8008e30:	701a      	strb	r2, [r3, #0]
				if(portStatus[port] == OVERRUN)
 8008e32:	7823      	ldrb	r3, [r4, #0]
 8008e34:	2b05      	cmp	r3, #5
 8008e36:	d1de      	bne.n	8008df6 <BackEndTask+0x312>
				portStatus[port] =FREE;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	7023      	strb	r3, [r4, #0]
 8008e3c:	e7db      	b.n	8008df6 <BackEndTask+0x312>
				    (uint8_t*) &UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
			}
		}

		taskYIELD();
 8008e3e:	f005 fb93 	bl	800e568 <vPortYield>
 8008e42:	4e05      	ldr	r6, [pc, #20]	; (8008e58 <BackEndTask+0x374>)
	int packetStart =0, packetEnd =0, packetLength =0, parseStart =0;
 8008e44:	2702      	movs	r7, #2
		for(port =1; port <= NumOfPorts; port++) {
 8008e46:	2501      	movs	r5, #1
 8008e48:	e7e2      	b.n	8008e10 <BackEndTask+0x32c>
 8008e4a:	46c0      	nop			; (mov r8, r8)
 8008e4c:	20000d08 	.word	0x20000d08
 8008e50:	20001450 	.word	0x20001450
 8008e54:	20006988 	.word	0x20006988
 8008e58:	200012d0 	.word	0x200012d0
 8008e5c:	20000a77 	.word	0x20000a77
 8008e60:	200010f8 	.word	0x200010f8
 8008e64:	20001504 	.word	0x20001504
 8008e68:	03fffffe 	.word	0x03fffffe
 8008e6c:	20001458 	.word	0x20001458
 8008e70:	20000f30 	.word	0x20000f30
 8008e74:	200015b4 	.word	0x200015b4
 8008e78:	2000175c 	.word	0x2000175c
 8008e7c:	200012c8 	.word	0x200012c8

08008e80 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8008e80:	2001      	movs	r0, #1
 8008e82:	4770      	bx	lr

08008e84 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8008e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e86:	46de      	mov	lr, fp
 8008e88:	4657      	mov	r7, sl
 8008e8a:	464e      	mov	r6, r9
 8008e8c:	4645      	mov	r5, r8
 8008e8e:	b5e0      	push	{r5, r6, r7, lr}
 8008e90:	b097      	sub	sp, #92	; 0x5c
	port =(int8_t) (unsigned) argument;
 8008e92:	b2c3      	uxtb	r3, r0
 8008e94:	9308      	str	r3, [sp, #32]
 8008e96:	23ff      	movs	r3, #255	; 0xff
 8008e98:	4003      	ands	r3, r0
 8008e9a:	4698      	mov	r8, r3
		if(messageLength[port - 1]) {
 8008e9c:	1e5d      	subs	r5, r3, #1
 8008e9e:	00eb      	lsls	r3, r5, #3
 8008ea0:	1b5b      	subs	r3, r3, r5
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	0019      	movs	r1, r3
		memset(cMessage[port - 1],0,(size_t) messageLength[port - 1]);
 8008ea6:	4ad8      	ldr	r2, [pc, #864]	; (8009208 <PxMessagingTask+0x384>)
 8008ea8:	18d3      	adds	r3, r2, r3
 8008eaa:	9307      	str	r3, [sp, #28]
	HAL_StatusTypeDef status =HAL_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	930a      	str	r3, [sp, #40]	; 0x28
	BOS_Status result =BOS_OK;
 8008eb0:	4699      	mov	r9, r3
			if(cMessage[port - 1][2] >> 7) {
 8008eb2:	000e      	movs	r6, r1
 8008eb4:	1853      	adds	r3, r2, r1
 8008eb6:	3302      	adds	r3, #2
 8008eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8008eba:	468a      	mov	sl, r1
 8008ebc:	e025      	b.n	8008f0a <PxMessagingTask+0x86>
				longMessage =1;
 8008ebe:	4ad3      	ldr	r2, [pc, #844]	; (800920c <PxMessagingTask+0x388>)
 8008ec0:	2001      	movs	r0, #1
 8008ec2:	7010      	strb	r0, [r2, #0]
 8008ec4:	e032      	b.n	8008f2c <PxMessagingTask+0xa8>
				code =cMessage[port - 1][3 + shift];
 8008ec6:	4bd0      	ldr	r3, [pc, #832]	; (8009208 <PxMessagingTask+0x384>)
 8008ec8:	199b      	adds	r3, r3, r6
 8008eca:	189a      	adds	r2, r3, r2
 8008ecc:	78d7      	ldrb	r7, [r2, #3]
 8008ece:	e048      	b.n	8008f62 <PxMessagingTask+0xde>
				if(code == CODE_UPDATE) {// Remote bootloader update
 8008ed0:	2f19      	cmp	r7, #25
 8008ed2:	d062      	beq.n	8008f9a <PxMessagingTask+0x116>
				else if(code == CODE_UPDATE_VIA_PORT) {// Remote 'via port' bootloader update
 8008ed4:	2f1a      	cmp	r7, #26
 8008ed6:	d06a      	beq.n	8008fae <PxMessagingTask+0x12a>
		if(result == BOS_ERR_UnknownMessage) {
 8008ed8:	464b      	mov	r3, r9
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d101      	bne.n	8008ee2 <PxMessagingTask+0x5e>
 8008ede:	f001 fa9e 	bl	800a41e <PxMessagingTask+0x159a>
		memset(cMessage[port - 1],0,(size_t) messageLength[port - 1]);
 8008ee2:	4ccb      	ldr	r4, [pc, #812]	; (8009210 <PxMessagingTask+0x38c>)
 8008ee4:	5d62      	ldrb	r2, [r4, r5]
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	9807      	ldr	r0, [sp, #28]
 8008eea:	f008 fdbd 	bl	8011a68 <memset>
		messageLength[port - 1] =0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	5563      	strb	r3, [r4, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI
 8008ef2:	4bc8      	ldr	r3, [pc, #800]	; (8009214 <PxMessagingTask+0x390>)
		    && portStatus[port] != PORTBUTTON) {
 8008ef4:	4642      	mov	r2, r8
 8008ef6:	5c9b      	ldrb	r3, [r3, r2]
		if(portStatus[port] != STREAM && portStatus[port] != CLI
 8008ef8:	3b02      	subs	r3, #2
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d903      	bls.n	8008f06 <PxMessagingTask+0x82>
			portStatus[port] =FREE;
 8008efe:	4bc5      	ldr	r3, [pc, #788]	; (8009214 <PxMessagingTask+0x390>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	4641      	mov	r1, r8
 8008f04:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8008f06:	f005 fb2f 	bl	800e568 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8008f0a:	2101      	movs	r1, #1
 8008f0c:	4249      	negs	r1, r1
 8008f0e:	2001      	movs	r0, #1
 8008f10:	f005 f850 	bl	800dfb4 <ulTaskNotifyTake>
		if(messageLength[port - 1]) {
 8008f14:	4bbe      	ldr	r3, [pc, #760]	; (8009210 <PxMessagingTask+0x38c>)
 8008f16:	5d59      	ldrb	r1, [r3, r5]
 8008f18:	2900      	cmp	r1, #0
 8008f1a:	d0dd      	beq.n	8008ed8 <PxMessagingTask+0x54>
			if(cMessage[port - 1][2] >> 7) {
 8008f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	b25a      	sxtb	r2, r3
 8008f22:	2a00      	cmp	r2, #0
 8008f24:	dbcb      	blt.n	8008ebe <PxMessagingTask+0x3a>
				longMessage =0;
 8008f26:	4ab9      	ldr	r2, [pc, #740]	; (800920c <PxMessagingTask+0x388>)
 8008f28:	2000      	movs	r0, #0
 8008f2a:	7010      	strb	r0, [r2, #0]
			dst =cMessage[port - 1][0];
 8008f2c:	4ab6      	ldr	r2, [pc, #728]	; (8009208 <PxMessagingTask+0x384>)
 8008f2e:	5cb0      	ldrb	r0, [r6, r2]
 8008f30:	4683      	mov	fp, r0
			src =cMessage[port - 1][1];
 8008f32:	1992      	adds	r2, r2, r6
 8008f34:	7852      	ldrb	r2, [r2, #1]
 8008f36:	9204      	str	r2, [sp, #16]
			if(cMessage[port - 1][2] & 0x01) {// 1st bit (LSB) Extended options - TODO handle extended options case
 8008f38:	2201      	movs	r2, #1
 8008f3a:	401a      	ands	r2, r3
			shift =0;
 8008f3c:	0014      	movs	r4, r2
			BOS.trace =(traceOptions_t) ( (cMessage[port - 1][2] >> 2) & 0x03);// 3rd-4th bits Trace 
 8008f3e:	4fb6      	ldr	r7, [pc, #728]	; (8009218 <PxMessagingTask+0x394>)
 8008f40:	0718      	lsls	r0, r3, #28
 8008f42:	0f80      	lsrs	r0, r0, #30
 8008f44:	71f8      	strb	r0, [r7, #7]
			BOS.response = (cMessage[port - 1][2]) & 0x60;// 6th-7th bits Response mode
 8008f46:	2060      	movs	r0, #96	; 0x60
 8008f48:	4018      	ands	r0, r3
 8008f4a:	71b8      	strb	r0, [r7, #6]
			if(extendCode == true) {
 8008f4c:	079b      	lsls	r3, r3, #30
 8008f4e:	d5ba      	bpl.n	8008ec6 <PxMessagingTask+0x42>
				code = ( ((uint16_t) cMessage[port - 1][4 + shift] << 8)
 8008f50:	4bad      	ldr	r3, [pc, #692]	; (8009208 <PxMessagingTask+0x384>)
 8008f52:	199b      	adds	r3, r3, r6
 8008f54:	189b      	adds	r3, r3, r2
 8008f56:	7918      	ldrb	r0, [r3, #4]
 8008f58:	0200      	lsls	r0, r0, #8
				    + cMessage[port - 1][3 + shift]);
 8008f5a:	78df      	ldrb	r7, [r3, #3]
				code = ( ((uint16_t) cMessage[port - 1][4 + shift] << 8)
 8008f5c:	183f      	adds	r7, r7, r0
 8008f5e:	b2bf      	uxth	r7, r7
				++shift;
 8008f60:	1c54      	adds	r4, r2, #1
			if( (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1))
 8008f62:	465b      	mov	r3, fp
 8008f64:	3b01      	subs	r3, #1
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	2bfc      	cmp	r3, #252	; 0xfc
 8008f6a:	d901      	bls.n	8008f70 <PxMessagingTask+0xec>
 8008f6c:	f001 fa73 	bl	800a456 <PxMessagingTask+0x15d2>
 8008f70:	4baa      	ldr	r3, [pc, #680]	; (800921c <PxMessagingTask+0x398>)
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	455b      	cmp	r3, fp
 8008f76:	d101      	bne.n	8008f7c <PxMessagingTask+0xf8>
 8008f78:	f001 fa6d 	bl	800a456 <PxMessagingTask+0x15d2>
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d101      	bne.n	8008f84 <PxMessagingTask+0x100>
 8008f80:	f001 fa63 	bl	800a44a <PxMessagingTask+0x15c6>
				ForwardReceivedMessage(port);
 8008f84:	9808      	ldr	r0, [sp, #32]
 8008f86:	f7ff fc51 	bl	800882c <ForwardReceivedMessage>
				if(BOS.trace)
 8008f8a:	4ba3      	ldr	r3, [pc, #652]	; (8009218 <PxMessagingTask+0x394>)
 8008f8c:	79db      	ldrb	r3, [r3, #7]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d09e      	beq.n	8008ed0 <PxMessagingTask+0x4c>
				indMode =IND_SHORT_BLINK;
 8008f92:	4ba3      	ldr	r3, [pc, #652]	; (8009220 <PxMessagingTask+0x39c>)
 8008f94:	2203      	movs	r2, #3
 8008f96:	701a      	strb	r2, [r3, #0]
 8008f98:	e79a      	b.n	8008ed0 <PxMessagingTask+0x4c>
					Delay_ms(100);
 8008f9a:	2064      	movs	r0, #100	; 0x64
 8008f9c:	f005 fc62 	bl	800e864 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	9a08      	ldr	r2, [sp, #32]
 8008fa4:	4659      	mov	r1, fp
 8008fa6:	9804      	ldr	r0, [sp, #16]
 8008fa8:	f7fa fa62 	bl	8003470 <remoteBootloaderUpdate>
 8008fac:	e794      	b.n	8008ed8 <PxMessagingTask+0x54>
					Delay_ms(100);
 8008fae:	2064      	movs	r0, #100	; 0x64
 8008fb0:	f005 fc58 	bl	800e864 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,
 8008fb4:	4b94      	ldr	r3, [pc, #592]	; (8009208 <PxMessagingTask+0x384>)
 8008fb6:	199b      	adds	r3, r3, r6
 8008fb8:	5d1b      	ldrb	r3, [r3, r4]
 8008fba:	9a08      	ldr	r2, [sp, #32]
 8008fbc:	4659      	mov	r1, fp
 8008fbe:	9804      	ldr	r0, [sp, #16]
 8008fc0:	f7fa fa56 	bl	8003470 <remoteBootloaderUpdate>
 8008fc4:	e788      	b.n	8008ed8 <PxMessagingTask+0x54>
				    && cMessage[port - 1][messageLength[port - 1] - 1]
 8008fc6:	4b90      	ldr	r3, [pc, #576]	; (8009208 <PxMessagingTask+0x384>)
 8008fc8:	199b      	adds	r3, r3, r6
 8008fca:	1859      	adds	r1, r3, r1
 8008fcc:	3901      	subs	r1, #1
 8008fce:	780b      	ldrb	r3, [r1, #0]
				        != bcastLastID) {
 8008fd0:	4a94      	ldr	r2, [pc, #592]	; (8009224 <PxMessagingTask+0x3a0>)
				    && cMessage[port - 1][messageLength[port - 1] - 1]
 8008fd2:	7812      	ldrb	r2, [r2, #0]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d113      	bne.n	8009000 <PxMessagingTask+0x17c>
					result =BOS_ERR_MSG_Reflection;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	4699      	mov	r9, r3
				if(result == BOS_OK) {
 8008fdc:	464b      	mov	r3, r9
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d000      	beq.n	8008fe4 <PxMessagingTask+0x160>
 8008fe2:	e779      	b.n	8008ed8 <PxMessagingTask+0x54>
				shift +=4;
 8008fe4:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 8008fe6:	4b8a      	ldr	r3, [pc, #552]	; (8009210 <PxMessagingTask+0x38c>)
 8008fe8:	5d59      	ldrb	r1, [r3, r5]
 8008fea:	1b0a      	subs	r2, r1, r4
 8008fec:	b2d3      	uxtb	r3, r2
 8008fee:	9306      	str	r3, [sp, #24]
					switch(code){
 8008ff0:	2f24      	cmp	r7, #36	; 0x24
 8008ff2:	d901      	bls.n	8008ff8 <PxMessagingTask+0x174>
 8008ff4:	f001 f98f 	bl	800a316 <PxMessagingTask+0x1492>
 8008ff8:	00bb      	lsls	r3, r7, #2
 8008ffa:	4a8b      	ldr	r2, [pc, #556]	; (8009228 <PxMessagingTask+0x3a4>)
 8008ffc:	58d3      	ldr	r3, [r2, r3]
 8008ffe:	469f      	mov	pc, r3
					bcastID =bcastLastID =
 8009000:	4a88      	ldr	r2, [pc, #544]	; (8009224 <PxMessagingTask+0x3a0>)
 8009002:	7013      	strb	r3, [r2, #0]
 8009004:	4a89      	ldr	r2, [pc, #548]	; (800922c <PxMessagingTask+0x3a8>)
 8009006:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8009008:	9908      	ldr	r1, [sp, #32]
 800900a:	20ff      	movs	r0, #255	; 0xff
 800900c:	f7ff fc2e 	bl	800886c <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0;// Reset bcastID location 
 8009010:	4b7f      	ldr	r3, [pc, #508]	; (8009210 <PxMessagingTask+0x38c>)
 8009012:	5d5a      	ldrb	r2, [r3, r5]
 8009014:	4b7c      	ldr	r3, [pc, #496]	; (8009208 <PxMessagingTask+0x384>)
 8009016:	199b      	adds	r3, r3, r6
 8009018:	189b      	adds	r3, r3, r2
 800901a:	3b01      	subs	r3, #1
 800901c:	2200      	movs	r2, #0
 800901e:	701a      	strb	r2, [r3, #0]
 8009020:	e7dc      	b.n	8008fdc <PxMessagingTask+0x158>
						for(p =0; p < numOfParams; p++) {
 8009022:	9b06      	ldr	r3, [sp, #24]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d01f      	beq.n	8009068 <PxMessagingTask+0x1e4>
							arrayPortsDir[src - 1] |= (0x8000
 8009028:	9b04      	ldr	r3, [sp, #16]
 800902a:	1e58      	subs	r0, r3, #1
 800902c:	0042      	lsls	r2, r0, #1
 800902e:	4b80      	ldr	r3, [pc, #512]	; (8009230 <PxMessagingTask+0x3ac>)
 8009030:	5ad3      	ldrh	r3, [r2, r3]
 8009032:	4652      	mov	r2, sl
 8009034:	18a1      	adds	r1, r4, r2
 8009036:	4a74      	ldr	r2, [pc, #464]	; (8009208 <PxMessagingTask+0x384>)
 8009038:	1889      	adds	r1, r1, r2
 800903a:	3201      	adds	r2, #1
 800903c:	4452      	add	r2, sl
 800903e:	1914      	adds	r4, r2, r4
 8009040:	9a06      	ldr	r2, [sp, #24]
 8009042:	3a01      	subs	r2, #1
 8009044:	b2d2      	uxtb	r2, r2
 8009046:	18a4      	adds	r4, r4, r2
							    >> ( (cMessage[port - 1][shift + p]) - 1));
 8009048:	2780      	movs	r7, #128	; 0x80
 800904a:	023f      	lsls	r7, r7, #8
 800904c:	4684      	mov	ip, r0
 800904e:	780a      	ldrb	r2, [r1, #0]
 8009050:	3a01      	subs	r2, #1
 8009052:	0038      	movs	r0, r7
 8009054:	4110      	asrs	r0, r2
							arrayPortsDir[src - 1] |= (0x8000
 8009056:	4303      	orrs	r3, r0
 8009058:	b29b      	uxth	r3, r3
 800905a:	3101      	adds	r1, #1
						for(p =0; p < numOfParams; p++) {
 800905c:	42a1      	cmp	r1, r4
 800905e:	d1f6      	bne.n	800904e <PxMessagingTask+0x1ca>
 8009060:	4660      	mov	r0, ip
 8009062:	0040      	lsls	r0, r0, #1
 8009064:	4a72      	ldr	r2, [pc, #456]	; (8009230 <PxMessagingTask+0x3ac>)
 8009066:	5283      	strh	r3, [r0, r2]
						responseStatus =BOS_OK;
 8009068:	4b72      	ldr	r3, [pc, #456]	; (8009234 <PxMessagingTask+0x3b0>)
 800906a:	2200      	movs	r2, #0
 800906c:	701a      	strb	r2, [r3, #0]
							break;
 800906e:	2300      	movs	r3, #0
 8009070:	4699      	mov	r9, r3
 8009072:	e736      	b.n	8008ee2 <PxMessagingTask+0x5e>
						indMode =IND_PING;
 8009074:	4b6a      	ldr	r3, [pc, #424]	; (8009220 <PxMessagingTask+0x39c>)
 8009076:	2201      	movs	r2, #1
 8009078:	701a      	strb	r2, [r3, #0]
						osDelay(10);
 800907a:	200a      	movs	r0, #10
 800907c:	f003 fbc7 	bl	800c80e <osDelay>
						if(BOS.response == BOS_RESPONSE_ALL
 8009080:	4b65      	ldr	r3, [pc, #404]	; (8009218 <PxMessagingTask+0x394>)
						    || BOS.response == BOS_RESPONSE_MSG)
 8009082:	799b      	ldrb	r3, [r3, #6]
 8009084:	2240      	movs	r2, #64	; 0x40
 8009086:	4393      	bics	r3, r2
 8009088:	2200      	movs	r2, #0
 800908a:	4691      	mov	r9, r2
 800908c:	2b20      	cmp	r3, #32
 800908e:	d000      	beq.n	8009092 <PxMessagingTask+0x20e>
 8009090:	e727      	b.n	8008ee2 <PxMessagingTask+0x5e>
						SendMessageToModule(src,CODE_PING_RESPONSE,0);
 8009092:	2102      	movs	r1, #2
 8009094:	9804      	ldr	r0, [sp, #16]
 8009096:	f7ff fc31 	bl	80088fc <SendMessageToModule>
 800909a:	e722      	b.n	8008ee2 <PxMessagingTask+0x5e>
						if(!moduleAlias[myID][0])
 800909c:	4b5f      	ldr	r3, [pc, #380]	; (800921c <PxMessagingTask+0x398>)
 800909e:	781a      	ldrb	r2, [r3, #0]
 80090a0:	0093      	lsls	r3, r2, #2
 80090a2:	189b      	adds	r3, r3, r2
 80090a4:	005b      	lsls	r3, r3, #1
 80090a6:	4a64      	ldr	r2, [pc, #400]	; (8009238 <PxMessagingTask+0x3b4>)
 80090a8:	5c9b      	ldrb	r3, [r3, r2]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d118      	bne.n	80090e0 <PxMessagingTask+0x25c>
						sprintf((char*) pcUserMessage,
 80090ae:	9a04      	ldr	r2, [sp, #16]
 80090b0:	4962      	ldr	r1, [pc, #392]	; (800923c <PxMessagingTask+0x3b8>)
 80090b2:	4863      	ldr	r0, [pc, #396]	; (8009240 <PxMessagingTask+0x3bc>)
 80090b4:	f008 fed2 	bl	8011e5c <sprintf>
						    strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 80090b8:	4c61      	ldr	r4, [pc, #388]	; (8009240 <PxMessagingTask+0x3bc>)
 80090ba:	0020      	movs	r0, r4
 80090bc:	f7f7 f82c 	bl	8000118 <strlen>
						writePxMutex(PcPort,pcUserMessage,
 80090c0:	b282      	uxth	r2, r0
 80090c2:	4b60      	ldr	r3, [pc, #384]	; (8009244 <PxMessagingTask+0x3c0>)
 80090c4:	7818      	ldrb	r0, [r3, #0]
 80090c6:	2301      	movs	r3, #1
 80090c8:	425b      	negs	r3, r3
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	3333      	adds	r3, #51	; 0x33
 80090ce:	0021      	movs	r1, r4
 80090d0:	f003 fa70 	bl	800c5b4 <writePxMutex>
						responseStatus =BOS_OK;
 80090d4:	4b57      	ldr	r3, [pc, #348]	; (8009234 <PxMessagingTask+0x3b0>)
 80090d6:	2200      	movs	r2, #0
 80090d8:	701a      	strb	r2, [r3, #0]
							break;
 80090da:	2300      	movs	r3, #0
 80090dc:	4699      	mov	r9, r3
 80090de:	e700      	b.n	8008ee2 <PxMessagingTask+0x5e>
						    moduleAlias[src]);
 80090e0:	230a      	movs	r3, #10
 80090e2:	9904      	ldr	r1, [sp, #16]
 80090e4:	434b      	muls	r3, r1
 80090e6:	4a54      	ldr	r2, [pc, #336]	; (8009238 <PxMessagingTask+0x3b4>)
 80090e8:	189b      	adds	r3, r3, r2
						sprintf((char*) pcUserMessage,
 80090ea:	000a      	movs	r2, r1
 80090ec:	4956      	ldr	r1, [pc, #344]	; (8009248 <PxMessagingTask+0x3c4>)
 80090ee:	4854      	ldr	r0, [pc, #336]	; (8009240 <PxMessagingTask+0x3bc>)
 80090f0:	f008 feb4 	bl	8011e5c <sprintf>
 80090f4:	e7e0      	b.n	80090b8 <PxMessagingTask+0x234>
						IND_ON();
 80090f6:	2180      	movs	r1, #128	; 0x80
 80090f8:	2090      	movs	r0, #144	; 0x90
 80090fa:	2201      	movs	r2, #1
 80090fc:	0109      	lsls	r1, r1, #4
 80090fe:	05c0      	lsls	r0, r0, #23
 8009100:	f006 fc7c 	bl	800f9fc <HAL_GPIO_WritePin>
							break;
 8009104:	2300      	movs	r3, #0
 8009106:	4699      	mov	r9, r3
 8009108:	e6eb      	b.n	8008ee2 <PxMessagingTask+0x5e>
						IND_OFF();
 800910a:	2180      	movs	r1, #128	; 0x80
 800910c:	2090      	movs	r0, #144	; 0x90
 800910e:	2200      	movs	r2, #0
 8009110:	0109      	lsls	r1, r1, #4
 8009112:	05c0      	lsls	r0, r0, #23
 8009114:	f006 fc72 	bl	800f9fc <HAL_GPIO_WritePin>
							break;
 8009118:	2300      	movs	r3, #0
 800911a:	4699      	mov	r9, r3
 800911c:	e6e1      	b.n	8008ee2 <PxMessagingTask+0x5e>
						IND_toggle();
 800911e:	2180      	movs	r1, #128	; 0x80
 8009120:	2090      	movs	r0, #144	; 0x90
 8009122:	0109      	lsls	r1, r1, #4
 8009124:	05c0      	lsls	r0, r0, #23
 8009126:	f006 fc6f 	bl	800fa08 <HAL_GPIO_TogglePin>
							break;
 800912a:	2300      	movs	r3, #0
 800912c:	4699      	mov	r9, r3
 800912e:	e6d8      	b.n	8008ee2 <PxMessagingTask+0x5e>
						neighbors[port - 1][0] = ((uint16_t) src << 8)
 8009130:	4f46      	ldr	r7, [pc, #280]	; (800924c <PxMessagingTask+0x3c8>)
 8009132:	00ab      	lsls	r3, r5, #2
						    + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009134:	4a34      	ldr	r2, [pc, #208]	; (8009208 <PxMessagingTask+0x384>)
 8009136:	1992      	adds	r2, r2, r6
 8009138:	1910      	adds	r0, r2, r4
 800913a:	7881      	ldrb	r1, [r0, #2]
 800913c:	468c      	mov	ip, r1
						neighbors[port - 1][0] = ((uint16_t) src << 8)
 800913e:	9904      	ldr	r1, [sp, #16]
 8009140:	0209      	lsls	r1, r1, #8
						    + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009142:	4461      	add	r1, ip
						neighbors[port - 1][0] = ((uint16_t) src << 8)
 8009144:	53d9      	strh	r1, [r3, r7]
						neighbors[port - 1][1] =
 8009146:	18fb      	adds	r3, r7, r3
						    ((uint16_t) cMessage[port - 1][shift] << 8)
 8009148:	5d11      	ldrb	r1, [r2, r4]
 800914a:	0209      	lsls	r1, r1, #8
						        + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800914c:	7842      	ldrb	r2, [r0, #1]
 800914e:	1852      	adds	r2, r2, r1
						neighbors[port - 1][1] =
 8009150:	805a      	strh	r2, [r3, #2]
						messageParams[1] =(uint8_t) myPN;
 8009152:	4b3f      	ldr	r3, [pc, #252]	; (8009250 <PxMessagingTask+0x3cc>)
 8009154:	881b      	ldrh	r3, [r3, #0]
 8009156:	4a3f      	ldr	r2, [pc, #252]	; (8009254 <PxMessagingTask+0x3d0>)
 8009158:	7053      	strb	r3, [r2, #1]
						messageParams[0] =(uint8_t) (myPN >> 8);
 800915a:	0a1b      	lsrs	r3, r3, #8
 800915c:	7013      	strb	r3, [r2, #0]
						messageParams[2] =port;
 800915e:	9c08      	ldr	r4, [sp, #32]
 8009160:	7094      	strb	r4, [r2, #2]
						osDelay(2);
 8009162:	2002      	movs	r0, #2
 8009164:	f003 fb53 	bl	800c80e <osDelay>
						SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8009168:	2303      	movs	r3, #3
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	3308      	adds	r3, #8
 800916e:	2200      	movs	r2, #0
 8009170:	2100      	movs	r1, #0
 8009172:	0020      	movs	r0, r4
 8009174:	f7ff f99a 	bl	80084ac <SendMessageFromPort>
							break;
 8009178:	2300      	movs	r3, #0
 800917a:	4699      	mov	r9, r3
 800917c:	e6b1      	b.n	8008ee2 <PxMessagingTask+0x5e>
						neighbors[port - 1][0] = ((uint16_t) src << 8)
 800917e:	4f33      	ldr	r7, [pc, #204]	; (800924c <PxMessagingTask+0x3c8>)
 8009180:	00ab      	lsls	r3, r5, #2
						    + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009182:	4a21      	ldr	r2, [pc, #132]	; (8009208 <PxMessagingTask+0x384>)
 8009184:	1992      	adds	r2, r2, r6
 8009186:	1910      	adds	r0, r2, r4
 8009188:	7881      	ldrb	r1, [r0, #2]
 800918a:	468c      	mov	ip, r1
						neighbors[port - 1][0] = ((uint16_t) src << 8)
 800918c:	9904      	ldr	r1, [sp, #16]
 800918e:	0209      	lsls	r1, r1, #8
						    + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009190:	4461      	add	r1, ip
						neighbors[port - 1][0] = ((uint16_t) src << 8)
 8009192:	53d9      	strh	r1, [r3, r7]
						neighbors[port - 1][1] =
 8009194:	18fb      	adds	r3, r7, r3
						    ((uint16_t) cMessage[port - 1][shift] << 8)
 8009196:	5d11      	ldrb	r1, [r2, r4]
 8009198:	0209      	lsls	r1, r1, #8
						        + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800919a:	7842      	ldrb	r2, [r0, #1]
 800919c:	1852      	adds	r2, r2, r1
						neighbors[port - 1][1] =
 800919e:	805a      	strh	r2, [r3, #2]
						responseStatus =BOS_OK;
 80091a0:	4b24      	ldr	r3, [pc, #144]	; (8009234 <PxMessagingTask+0x3b0>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	701a      	strb	r2, [r3, #0]
							break;
 80091a6:	2300      	movs	r3, #0
 80091a8:	4699      	mov	r9, r3
 80091aa:	e69a      	b.n	8008ee2 <PxMessagingTask+0x5e>
						ExploreNeighbors(port);
 80091ac:	9808      	ldr	r0, [sp, #32]
 80091ae:	f7f9 ffc7 	bl	8003140 <ExploreNeighbors>
						indMode = IND_TOPOLOGY;
 80091b2:	4b1b      	ldr	r3, [pc, #108]	; (8009220 <PxMessagingTask+0x39c>)
 80091b4:	2202      	movs	r2, #2
 80091b6:	701a      	strb	r2, [r3, #0]
						osDelay(10);
 80091b8:	200a      	movs	r0, #10
 80091ba:	f003 fb28 	bl	800c80e <osDelay>
 80091be:	4f23      	ldr	r7, [pc, #140]	; (800924c <PxMessagingTask+0x3c8>)
						for (uint8_t p = 1; p <= NumOfPorts; p++) {
 80091c0:	2401      	movs	r4, #1
						temp = 0;
 80091c2:	2300      	movs	r3, #0
 80091c4:	9305      	str	r3, [sp, #20]
 80091c6:	e004      	b.n	80091d2 <PxMessagingTask+0x34e>
						for (uint8_t p = 1; p <= NumOfPorts; p++) {
 80091c8:	3401      	adds	r4, #1
 80091ca:	b2e4      	uxtb	r4, r4
 80091cc:	3704      	adds	r7, #4
 80091ce:	2c07      	cmp	r4, #7
 80091d0:	d011      	beq.n	80091f6 <PxMessagingTask+0x372>
							if (neighbors[p - 1][0]) {
 80091d2:	883b      	ldrh	r3, [r7, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d0f7      	beq.n	80091c8 <PxMessagingTask+0x344>
								messageParams[temp] = p;
 80091d8:	4a1e      	ldr	r2, [pc, #120]	; (8009254 <PxMessagingTask+0x3d0>)
 80091da:	9b05      	ldr	r3, [sp, #20]
 80091dc:	54d4      	strb	r4, [r2, r3]
								memcpy(messageParams + temp + 1,
 80091de:	1c58      	adds	r0, r3, #1
 80091e0:	4694      	mov	ip, r2
 80091e2:	4460      	add	r0, ip
 80091e4:	2204      	movs	r2, #4
 80091e6:	0039      	movs	r1, r7
 80091e8:	f008 fc35 	bl	8011a56 <memcpy>
								temp += 5;
 80091ec:	9b05      	ldr	r3, [sp, #20]
 80091ee:	3305      	adds	r3, #5
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	9305      	str	r3, [sp, #20]
 80091f4:	e7e8      	b.n	80091c8 <PxMessagingTask+0x344>
						SendMessageToModule(src, CODE_EXPLORE_ADJ_RESPONSE,
 80091f6:	466b      	mov	r3, sp
 80091f8:	8a9a      	ldrh	r2, [r3, #20]
 80091fa:	210d      	movs	r1, #13
 80091fc:	9804      	ldr	r0, [sp, #16]
 80091fe:	f7ff fb7d 	bl	80088fc <SendMessageToModule>
						break;
 8009202:	2300      	movs	r3, #0
 8009204:	4699      	mov	r9, r3
 8009206:	e66c      	b.n	8008ee2 <PxMessagingTask+0x5e>
 8009208:	20000d08 	.word	0x20000d08
 800920c:	20000ef5 	.word	0x20000ef5
 8009210:	20000f30 	.word	0x20000f30
 8009214:	200010f8 	.word	0x200010f8
 8009218:	20006988 	.word	0x20006988
 800921c:	20001076 	.word	0x20001076
 8009220:	20000ef4 	.word	0x20000ef4
 8009224:	200015b6 	.word	0x200015b6
 8009228:	08018a50 	.word	0x08018a50
 800922c:	20000cb4 	.word	0x20000cb4
 8009230:	20006db8 	.word	0x20006db8
 8009234:	20001110 	.word	0x20001110
 8009238:	20000f68 	.word	0x20000f68
 800923c:	08017440 	.word	0x08017440
 8009240:	2000170c 	.word	0x2000170c
 8009244:	20000a77 	.word	0x20000a77
 8009248:	08017454 	.word	0x08017454
 800924c:	20001078 	.word	0x20001078
 8009250:	20000050 	.word	0x20000050
 8009254:	20000f38 	.word	0x20000f38
						temp = numOfParams / 5;
 8009258:	2105      	movs	r1, #5
 800925a:	9806      	ldr	r0, [sp, #24]
 800925c:	f7f6 ff78 	bl	8000150 <__udivsi3>
 8009260:	b2c2      	uxtb	r2, r0
 8009262:	9205      	str	r2, [sp, #20]
						for (uint8_t k = 0; k < temp; k++) {
 8009264:	2a00      	cmp	r2, #0
 8009266:	d018      	beq.n	800929a <PxMessagingTask+0x416>
 8009268:	4653      	mov	r3, sl
 800926a:	18e7      	adds	r7, r4, r3
 800926c:	4bdb      	ldr	r3, [pc, #876]	; (80095dc <PxMessagingTask+0x758>)
 800926e:	18ff      	adds	r7, r7, r3
 8009270:	3305      	adds	r3, #5
 8009272:	4453      	add	r3, sl
 8009274:	191c      	adds	r4, r3, r4
 8009276:	1e53      	subs	r3, r2, #1
 8009278:	b2db      	uxtb	r3, r3
 800927a:	009a      	lsls	r2, r3, #2
 800927c:	18d3      	adds	r3, r2, r3
 800927e:	18e4      	adds	r4, r4, r3
									&neighbors2[(cMessage[port - 1][shift
 8009280:	4bd7      	ldr	r3, [pc, #860]	; (80095e0 <PxMessagingTask+0x75c>)
 8009282:	4699      	mov	r9, r3
 8009284:	7838      	ldrb	r0, [r7, #0]
											+ k * 5]) - 1][0],
 8009286:	3801      	subs	r0, #1
									&neighbors2[(cMessage[port - 1][shift
 8009288:	0080      	lsls	r0, r0, #2
 800928a:	4448      	add	r0, r9
							memcpy(
 800928c:	1c79      	adds	r1, r7, #1
 800928e:	2204      	movs	r2, #4
 8009290:	f008 fbe1 	bl	8011a56 <memcpy>
 8009294:	3705      	adds	r7, #5
						for (uint8_t k = 0; k < temp; k++) {
 8009296:	42bc      	cmp	r4, r7
 8009298:	d1f4      	bne.n	8009284 <PxMessagingTask+0x400>
						responseStatus = BOS_OK;
 800929a:	4bd2      	ldr	r3, [pc, #840]	; (80095e4 <PxMessagingTask+0x760>)
 800929c:	2200      	movs	r2, #0
 800929e:	701a      	strb	r2, [r3, #0]
						break;
 80092a0:	2300      	movs	r3, #0
 80092a2:	4699      	mov	r9, r3
 80092a4:	e61d      	b.n	8008ee2 <PxMessagingTask+0x5e>
 80092a6:	4653      	mov	r3, sl
 80092a8:	18e3      	adds	r3, r4, r3
 80092aa:	4acc      	ldr	r2, [pc, #816]	; (80095dc <PxMessagingTask+0x758>)
 80092ac:	4699      	mov	r9, r3
 80092ae:	4491      	add	r9, r2
						for(uint8_t p =1; p <= NumOfPorts; p++) {
 80092b0:	2701      	movs	r7, #1
							if(p != port)
 80092b2:	9b08      	ldr	r3, [sp, #32]
 80092b4:	42bb      	cmp	r3, r7
 80092b6:	d006      	beq.n	80092c6 <PxMessagingTask+0x442>
							SwapUartPins(GetUart(p),
 80092b8:	0038      	movs	r0, r7
 80092ba:	f003 f959 	bl	800c570 <GetUart>
 80092be:	464b      	mov	r3, r9
 80092c0:	7819      	ldrb	r1, [r3, #0]
 80092c2:	f003 f9ef 	bl	800c6a4 <SwapUartPins>
						for(uint8_t p =1; p <= NumOfPorts; p++) {
 80092c6:	3701      	adds	r7, #1
 80092c8:	b2ff      	uxtb	r7, r7
 80092ca:	2301      	movs	r3, #1
 80092cc:	469c      	mov	ip, r3
 80092ce:	44e1      	add	r9, ip
 80092d0:	2f07      	cmp	r7, #7
 80092d2:	d1ee      	bne.n	80092b2 <PxMessagingTask+0x42e>
						SwapUartPins(GetUart(port),
 80092d4:	9808      	ldr	r0, [sp, #32]
 80092d6:	f003 f94b 	bl	800c570 <GetUart>
 80092da:	4bc0      	ldr	r3, [pc, #768]	; (80095dc <PxMessagingTask+0x758>)
 80092dc:	199b      	adds	r3, r3, r6
 80092de:	191c      	adds	r4, r3, r4
 80092e0:	7aa1      	ldrb	r1, [r4, #10]
 80092e2:	f003 f9df 	bl	800c6a4 <SwapUartPins>
							break;
 80092e6:	2300      	movs	r3, #0
 80092e8:	4699      	mov	r9, r3
 80092ea:	e5fa      	b.n	8008ee2 <PxMessagingTask+0x5e>
						if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 80092ec:	0020      	movs	r0, r4
 80092ee:	4bbb      	ldr	r3, [pc, #748]	; (80095dc <PxMessagingTask+0x758>)
 80092f0:	199b      	adds	r3, r3, r6
 80092f2:	5d1b      	ldrb	r3, [r3, r4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10a      	bne.n	800930e <PxMessagingTask+0x48a>
						myID =cMessage[port - 1][1 + shift];
 80092f8:	2238      	movs	r2, #56	; 0x38
 80092fa:	436a      	muls	r2, r5
 80092fc:	4bb7      	ldr	r3, [pc, #732]	; (80095dc <PxMessagingTask+0x758>)
 80092fe:	189b      	adds	r3, r3, r2
 8009300:	191c      	adds	r4, r3, r4
 8009302:	7862      	ldrb	r2, [r4, #1]
 8009304:	4bb8      	ldr	r3, [pc, #736]	; (80095e8 <PxMessagingTask+0x764>)
 8009306:	701a      	strb	r2, [r3, #0]
 8009308:	2300      	movs	r3, #0
 800930a:	4699      	mov	r9, r3
 800930c:	e5e9      	b.n	8008ee2 <PxMessagingTask+0x5e>
 800930e:	2200      	movs	r2, #0
 8009310:	4691      	mov	r9, r2
						else if(cMessage[port - 1][shift] == 1) { /* Change my neighbor's ID */
 8009312:	2b01      	cmp	r3, #1
 8009314:	d000      	beq.n	8009318 <PxMessagingTask+0x494>
 8009316:	e5e4      	b.n	8008ee2 <PxMessagingTask+0x5e>
							messageParams[0] =0; /* change own ID */
 8009318:	49b4      	ldr	r1, [pc, #720]	; (80095ec <PxMessagingTask+0x768>)
 800931a:	700a      	strb	r2, [r1, #0]
							messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800931c:	3238      	adds	r2, #56	; 0x38
 800931e:	436a      	muls	r2, r5
 8009320:	4bae      	ldr	r3, [pc, #696]	; (80095dc <PxMessagingTask+0x758>)
 8009322:	189b      	adds	r3, r3, r2
 8009324:	181b      	adds	r3, r3, r0
 8009326:	785a      	ldrb	r2, [r3, #1]
 8009328:	704a      	strb	r2, [r1, #1]
							SendMessageFromPort(cMessage[port - 1][2 + shift],
 800932a:	7898      	ldrb	r0, [r3, #2]
 800932c:	2303      	movs	r3, #3
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	330d      	adds	r3, #13
 8009332:	464a      	mov	r2, r9
 8009334:	4649      	mov	r1, r9
 8009336:	f7ff f8b9 	bl	80084ac <SendMessageFromPort>
 800933a:	e5d2      	b.n	8008ee2 <PxMessagingTask+0x5e>
						if(longMessage) {
 800933c:	4bac      	ldr	r3, [pc, #688]	; (80095f0 <PxMessagingTask+0x76c>)
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d012      	beq.n	800936a <PxMessagingTask+0x4e6>
							memcpy(
 8009344:	4bab      	ldr	r3, [pc, #684]	; (80095f4 <PxMessagingTask+0x770>)
 8009346:	4699      	mov	r9, r3
 8009348:	881f      	ldrh	r7, [r3, #0]
							        + longMessageLastPtr,
 800934a:	48ab      	ldr	r0, [pc, #684]	; (80095f8 <PxMessagingTask+0x774>)
 800934c:	1838      	adds	r0, r7, r0
							    &cMessage[port - 1][shift],
 800934e:	4454      	add	r4, sl
 8009350:	49a2      	ldr	r1, [pc, #648]	; (80095dc <PxMessagingTask+0x758>)
 8009352:	1861      	adds	r1, r4, r1
							memcpy(
 8009354:	9c06      	ldr	r4, [sp, #24]
 8009356:	0022      	movs	r2, r4
 8009358:	f008 fb7d 	bl	8011a56 <memcpy>
							longMessageLastPtr +=numOfParams;
 800935c:	46a4      	mov	ip, r4
 800935e:	4467      	add	r7, ip
 8009360:	464b      	mov	r3, r9
 8009362:	801f      	strh	r7, [r3, #0]
 8009364:	2300      	movs	r3, #0
 8009366:	4699      	mov	r9, r3
 8009368:	e5bb      	b.n	8008ee2 <PxMessagingTask+0x5e>
							memcpy(
 800936a:	4ba2      	ldr	r3, [pc, #648]	; (80095f4 <PxMessagingTask+0x770>)
 800936c:	469b      	mov	fp, r3
 800936e:	881f      	ldrh	r7, [r3, #0]
							        + longMessageLastPtr,
 8009370:	4ba1      	ldr	r3, [pc, #644]	; (80095f8 <PxMessagingTask+0x774>)
 8009372:	4699      	mov	r9, r3
 8009374:	18f8      	adds	r0, r7, r3
							    &cMessage[port - 1][shift],
 8009376:	4454      	add	r4, sl
 8009378:	4998      	ldr	r1, [pc, #608]	; (80095dc <PxMessagingTask+0x758>)
 800937a:	1861      	adds	r1, r4, r1
							memcpy(
 800937c:	9c06      	ldr	r4, [sp, #24]
 800937e:	0022      	movs	r2, r4
 8009380:	f008 fb69 	bl	8011a56 <memcpy>
							longMessageLastPtr +=numOfParams;
 8009384:	193c      	adds	r4, r7, r4
 8009386:	b2a4      	uxth	r4, r4
							N = (longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 8009388:	2116      	movs	r1, #22
 800938a:	0020      	movs	r0, r4
 800938c:	f7f6 fee0 	bl	8000150 <__udivsi3>
 8009390:	4b9a      	ldr	r3, [pc, #616]	; (80095fc <PxMessagingTask+0x778>)
 8009392:	7018      	strb	r0, [r3, #0]
							memcpy(&array,&longMessageScratchpad,
 8009394:	0022      	movs	r2, r4
 8009396:	4649      	mov	r1, r9
 8009398:	4899      	ldr	r0, [pc, #612]	; (8009600 <PxMessagingTask+0x77c>)
 800939a:	f008 fb5c 	bl	8011a56 <memcpy>
							longMessageLastPtr =0;
 800939e:	2400      	movs	r4, #0
 80093a0:	465b      	mov	r3, fp
 80093a2:	801c      	strh	r4, [r3, #0]
 80093a4:	46a1      	mov	r9, r4
 80093a6:	e59c      	b.n	8008ee2 <PxMessagingTask+0x5e>
						for(p =1; p <= NumOfPorts; p++) {
 80093a8:	2401      	movs	r4, #1
						temp =0;
 80093aa:	2300      	movs	r3, #0
 80093ac:	9305      	str	r3, [sp, #20]
							if(GetUart(p)->AdvancedInit.Swap
 80093ae:	2780      	movs	r7, #128	; 0x80
 80093b0:	023f      	lsls	r7, r7, #8
 80093b2:	e003      	b.n	80093bc <PxMessagingTask+0x538>
						for(p =1; p <= NumOfPorts; p++) {
 80093b4:	3401      	adds	r4, #1
 80093b6:	b2e4      	uxtb	r4, r4
 80093b8:	2c07      	cmp	r4, #7
 80093ba:	d00c      	beq.n	80093d6 <PxMessagingTask+0x552>
							if(GetUart(p)->AdvancedInit.Swap
 80093bc:	0020      	movs	r0, r4
 80093be:	f003 f8d7 	bl	800c570 <GetUart>
 80093c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80093c4:	42bb      	cmp	r3, r7
 80093c6:	d1f5      	bne.n	80093b4 <PxMessagingTask+0x530>
								messageParams[temp++] =p;
 80093c8:	9a05      	ldr	r2, [sp, #20]
 80093ca:	1c53      	adds	r3, r2, #1
 80093cc:	4987      	ldr	r1, [pc, #540]	; (80095ec <PxMessagingTask+0x768>)
 80093ce:	548c      	strb	r4, [r1, r2]
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	9305      	str	r3, [sp, #20]
 80093d4:	e7ee      	b.n	80093b4 <PxMessagingTask+0x530>
						SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,
 80093d6:	466b      	mov	r3, sp
 80093d8:	8a9a      	ldrh	r2, [r3, #20]
 80093da:	2114      	movs	r1, #20
 80093dc:	9804      	ldr	r0, [sp, #16]
 80093de:	f7ff fa8d 	bl	80088fc <SendMessageToModule>
							break;
 80093e2:	2300      	movs	r3, #0
 80093e4:	4699      	mov	r9, r3
 80093e6:	e57c      	b.n	8008ee2 <PxMessagingTask+0x5e>
						    ((uint32_t) cMessage[port - 1][shift] << 24)
 80093e8:	4b7c      	ldr	r3, [pc, #496]	; (80095dc <PxMessagingTask+0x758>)
 80093ea:	199b      	adds	r3, r3, r6
 80093ec:	5d1a      	ldrb	r2, [r3, r4]
 80093ee:	0612      	lsls	r2, r2, #24
						        + cMessage[port - 1][3 + shift];
 80093f0:	191b      	adds	r3, r3, r4
 80093f2:	78d9      	ldrb	r1, [r3, #3]
						temp32 =
 80093f4:	1852      	adds	r2, r2, r1
						        + ((uint32_t) cMessage[port - 1][1
 80093f6:	7859      	ldrb	r1, [r3, #1]
						            + shift] << 16)
 80093f8:	0409      	lsls	r1, r1, #16
						temp32 =
 80093fa:	1852      	adds	r2, r2, r1
						        + ((uint32_t) cMessage[port - 1][2
 80093fc:	7899      	ldrb	r1, [r3, #2]
						            + shift] << 8)
 80093fe:	0209      	lsls	r1, r1, #8
						temp32 =
 8009400:	1852      	adds	r2, r2, r1
 8009402:	920b      	str	r2, [sp, #44]	; 0x2c
						if(cMessage[port - 1][4 + shift] == 0xFF)// All ports
 8009404:	791b      	ldrb	r3, [r3, #4]
 8009406:	2bff      	cmp	r3, #255	; 0xff
 8009408:	d01c      	beq.n	8009444 <PxMessagingTask+0x5c0>
							for(p =0; p < numOfParams; p++) {
 800940a:	9b06      	ldr	r3, [sp, #24]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d016      	beq.n	800943e <PxMessagingTask+0x5ba>
 8009410:	4653      	mov	r3, sl
 8009412:	1d1f      	adds	r7, r3, #4
 8009414:	193f      	adds	r7, r7, r4
 8009416:	4b71      	ldr	r3, [pc, #452]	; (80095dc <PxMessagingTask+0x758>)
 8009418:	18ff      	adds	r7, r7, r3
 800941a:	3305      	adds	r3, #5
 800941c:	4453      	add	r3, sl
 800941e:	191c      	adds	r4, r3, r4
 8009420:	9b06      	ldr	r3, [sp, #24]
 8009422:	3b01      	subs	r3, #1
 8009424:	b2db      	uxtb	r3, r3
 8009426:	18e4      	adds	r4, r4, r3
								temp =cMessage[port - 1][4 + shift + p];
 8009428:	783b      	ldrb	r3, [r7, #0]
 800942a:	9305      	str	r3, [sp, #20]
								if(temp > 0 && temp <= NumOfPorts) {
 800942c:	3b01      	subs	r3, #1
 800942e:	2b05      	cmp	r3, #5
 8009430:	d915      	bls.n	800945e <PxMessagingTask+0x5da>
 8009432:	3701      	adds	r7, #1
							for(p =0; p < numOfParams; p++) {
 8009434:	42a7      	cmp	r7, r4
 8009436:	d1f7      	bne.n	8009428 <PxMessagingTask+0x5a4>
 8009438:	2300      	movs	r3, #0
 800943a:	4699      	mov	r9, r3
 800943c:	e551      	b.n	8008ee2 <PxMessagingTask+0x5e>
						temp =temp32 =0;
 800943e:	9305      	str	r3, [sp, #20]
							for(p =0; p < numOfParams; p++) {
 8009440:	4699      	mov	r9, r3
 8009442:	e54e      	b.n	8008ee2 <PxMessagingTask+0x5e>
							for(p =1; p <= NumOfPorts; p++) {
 8009444:	2401      	movs	r4, #1
								UpdateBaudrate(p,temp32);
 8009446:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009448:	0020      	movs	r0, r4
 800944a:	f003 f921 	bl	800c690 <UpdateBaudrate>
							for(p =1; p <= NumOfPorts; p++) {
 800944e:	3401      	adds	r4, #1
 8009450:	b2e4      	uxtb	r4, r4
 8009452:	2c07      	cmp	r4, #7
 8009454:	d1f7      	bne.n	8009446 <PxMessagingTask+0x5c2>
						temp =temp32 =0;
 8009456:	2300      	movs	r3, #0
 8009458:	9305      	str	r3, [sp, #20]
 800945a:	4699      	mov	r9, r3
 800945c:	e541      	b.n	8008ee2 <PxMessagingTask+0x5e>
									UpdateBaudrate(temp,temp32);
 800945e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009460:	9805      	ldr	r0, [sp, #20]
 8009462:	f003 f915 	bl	800c690 <UpdateBaudrate>
 8009466:	e7e4      	b.n	8009432 <PxMessagingTask+0x5ae>
						SaveToRO();
 8009468:	f001 f8ca 	bl	800a600 <SaveToRO>
						SaveEEportsDir();
 800946c:	f7f9 f9f6 	bl	800285c <SaveEEportsDir>
						indMode =IND_PING;
 8009470:	4b64      	ldr	r3, [pc, #400]	; (8009604 <PxMessagingTask+0x780>)
 8009472:	2201      	movs	r2, #1
 8009474:	701a      	strb	r2, [r3, #0]
							break;
 8009476:	2300      	movs	r3, #0
 8009478:	4699      	mov	r9, r3
 800947a:	e532      	b.n	8008ee2 <PxMessagingTask+0x5e>
						ClearEEportsDir();
 800947c:	f7f9 fa18 	bl	80028b0 <ClearEEportsDir>
						ClearROtopology();
 8009480:	f001 f9c6 	bl	800a810 <ClearROtopology>
						osDelay(100);
 8009484:	2064      	movs	r0, #100	; 0x64
 8009486:	f003 f9c2 	bl	800c80e <osDelay>
						indMode =IND_TOPOLOGY;
 800948a:	4b5e      	ldr	r3, [pc, #376]	; (8009604 <PxMessagingTask+0x780>)
 800948c:	2202      	movs	r2, #2
 800948e:	701a      	strb	r2, [r3, #0]
							break;
 8009490:	2300      	movs	r3, #0
 8009492:	4699      	mov	r9, r3
 8009494:	e525      	b.n	8008ee2 <PxMessagingTask+0x5e>
						pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009496:	f003 facf 	bl	800ca38 <FreeRTOS_CLIGetOutputBuffer>
 800949a:	900b      	str	r0, [sp, #44]	; 0x2c
						if(dst == BOS_BROADCAST)
 800949c:	465b      	mov	r3, fp
 800949e:	2bff      	cmp	r3, #255	; 0xff
 80094a0:	d028      	beq.n	80094f4 <PxMessagingTask+0x670>
						else if(dst == BOS_MULTICAST)
 80094a2:	2bfe      	cmp	r3, #254	; 0xfe
 80094a4:	d02f      	beq.n	8009506 <PxMessagingTask+0x682>
						memcpy(cCLIString,&cMessage[port - 1][shift],
 80094a6:	4454      	add	r4, sl
 80094a8:	494c      	ldr	r1, [pc, #304]	; (80095dc <PxMessagingTask+0x758>)
 80094aa:	1861      	adds	r1, r4, r1
 80094ac:	9a06      	ldr	r2, [sp, #24]
 80094ae:	4856      	ldr	r0, [pc, #344]	; (8009608 <PxMessagingTask+0x784>)
 80094b0:	f008 fad1 	bl	8011a56 <memcpy>
							temp =PcPort;
 80094b4:	4c55      	ldr	r4, [pc, #340]	; (800960c <PxMessagingTask+0x788>)
							xReturned =FreeRTOS_CLIProcessCommand(cCLIString,
 80094b6:	4b54      	ldr	r3, [pc, #336]	; (8009608 <PxMessagingTask+0x784>)
 80094b8:	469b      	mov	fp, r3
							if(BOS.response == BOS_RESPONSE_ALL) {
 80094ba:	4b55      	ldr	r3, [pc, #340]	; (8009610 <PxMessagingTask+0x78c>)
 80094bc:	4699      	mov	r9, r3
							temp =PcPort;
 80094be:	7823      	ldrb	r3, [r4, #0]
 80094c0:	9305      	str	r3, [sp, #20]
							PcPort =port;
 80094c2:	9a08      	ldr	r2, [sp, #32]
 80094c4:	7022      	strb	r2, [r4, #0]
							xReturned =FreeRTOS_CLIProcessCommand(cCLIString,
 80094c6:	2299      	movs	r2, #153	; 0x99
 80094c8:	0092      	lsls	r2, r2, #2
 80094ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094cc:	4658      	mov	r0, fp
 80094ce:	f003 fa35 	bl	800c93c <FreeRTOS_CLIProcessCommand>
 80094d2:	0007      	movs	r7, r0
							PcPort =temp;
 80094d4:	9b05      	ldr	r3, [sp, #20]
 80094d6:	7023      	strb	r3, [r4, #0]
							if(BOS.response == BOS_RESPONSE_ALL) {
 80094d8:	464b      	mov	r3, r9
 80094da:	799b      	ldrb	r3, [r3, #6]
 80094dc:	2b60      	cmp	r3, #96	; 0x60
 80094de:	d01d      	beq.n	800951c <PxMessagingTask+0x698>
						} while(xReturned != pdFALSE);
 80094e0:	2f00      	cmp	r7, #0
 80094e2:	d1ec      	bne.n	80094be <PxMessagingTask+0x63a>
						memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 80094e4:	2232      	movs	r2, #50	; 0x32
 80094e6:	2100      	movs	r1, #0
 80094e8:	4847      	ldr	r0, [pc, #284]	; (8009608 <PxMessagingTask+0x784>)
 80094ea:	f008 fabd 	bl	8011a68 <memset>
							break;
 80094ee:	2300      	movs	r3, #0
 80094f0:	4699      	mov	r9, r3
 80094f2:	e4f6      	b.n	8008ee2 <PxMessagingTask+0x5e>
						    (size_t) (numOfParams - 1));// remove bcastID
 80094f4:	9a06      	ldr	r2, [sp, #24]
 80094f6:	3a01      	subs	r2, #1
						memcpy(cCLIString,&cMessage[port - 1][shift],
 80094f8:	4454      	add	r4, sl
 80094fa:	4938      	ldr	r1, [pc, #224]	; (80095dc <PxMessagingTask+0x758>)
 80094fc:	1861      	adds	r1, r4, r1
 80094fe:	4842      	ldr	r0, [pc, #264]	; (8009608 <PxMessagingTask+0x784>)
 8009500:	f008 faa9 	bl	8011a56 <memcpy>
 8009504:	e7d6      	b.n	80094b4 <PxMessagingTask+0x630>
						    (size_t) (numOfParams - temp - 2));// remove bcastID + groupm members + group count
 8009506:	9b06      	ldr	r3, [sp, #24]
 8009508:	9a05      	ldr	r2, [sp, #20]
 800950a:	1a9a      	subs	r2, r3, r2
 800950c:	3a02      	subs	r2, #2
						memcpy(cCLIString,&cMessage[port - 1][shift],
 800950e:	4454      	add	r4, sl
 8009510:	4932      	ldr	r1, [pc, #200]	; (80095dc <PxMessagingTask+0x758>)
 8009512:	1861      	adds	r1, r4, r1
 8009514:	483c      	ldr	r0, [pc, #240]	; (8009608 <PxMessagingTask+0x784>)
 8009516:	f008 fa9e 	bl	8011a56 <memcpy>
 800951a:	e7cb      	b.n	80094b4 <PxMessagingTask+0x630>
								memcpy(messageParams,pcOutputString,
 800951c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800951e:	f7f6 fdfb 	bl	8000118 <strlen>
 8009522:	0002      	movs	r2, r0
 8009524:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009526:	4831      	ldr	r0, [pc, #196]	; (80095ec <PxMessagingTask+0x768>)
 8009528:	f008 fa95 	bl	8011a56 <memcpy>
								    strlen((char*) pcOutputString));
 800952c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800952e:	f7f6 fdf3 	bl	8000118 <strlen>
								SendMessageToModule(src,CODE_CLI_RESPONSE,
 8009532:	b282      	uxth	r2, r0
 8009534:	2118      	movs	r1, #24
 8009536:	9804      	ldr	r0, [sp, #16]
 8009538:	f7ff f9e0 	bl	80088fc <SendMessageToModule>
								osDelay(10);
 800953c:	200a      	movs	r0, #10
 800953e:	f003 f966 	bl	800c80e <osDelay>
 8009542:	e7cd      	b.n	80094e0 <PxMessagingTask+0x65c>
						pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009544:	f003 fa78 	bl	800ca38 <FreeRTOS_CLIGetOutputBuffer>
 8009548:	0007      	movs	r7, r0
						memset(pcOutputString,0x00,
 800954a:	f7f6 fde5 	bl	8000118 <strlen>
 800954e:	0002      	movs	r2, r0
 8009550:	2100      	movs	r1, #0
 8009552:	0038      	movs	r0, r7
 8009554:	f008 fa88 	bl	8011a68 <memset>
						if(longMessage) {
 8009558:	4b25      	ldr	r3, [pc, #148]	; (80095f0 <PxMessagingTask+0x76c>)
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d013      	beq.n	8009588 <PxMessagingTask+0x704>
							memcpy(&pcOutputString[0] + longMessageLastPtr,
 8009560:	4b24      	ldr	r3, [pc, #144]	; (80095f4 <PxMessagingTask+0x770>)
 8009562:	4699      	mov	r9, r3
 8009564:	8818      	ldrh	r0, [r3, #0]
 8009566:	1838      	adds	r0, r7, r0
							    &cMessage[port - 1][shift],
 8009568:	4454      	add	r4, sl
 800956a:	491c      	ldr	r1, [pc, #112]	; (80095dc <PxMessagingTask+0x758>)
 800956c:	1861      	adds	r1, r4, r1
							memcpy(&pcOutputString[0] + longMessageLastPtr,
 800956e:	9c06      	ldr	r4, [sp, #24]
 8009570:	0022      	movs	r2, r4
 8009572:	f008 fa70 	bl	8011a56 <memcpy>
							longMessageLastPtr +=numOfParams;
 8009576:	464b      	mov	r3, r9
 8009578:	881a      	ldrh	r2, [r3, #0]
 800957a:	46a4      	mov	ip, r4
 800957c:	4462      	add	r2, ip
 800957e:	464b      	mov	r3, r9
 8009580:	801a      	strh	r2, [r3, #0]
 8009582:	2300      	movs	r3, #0
 8009584:	4699      	mov	r9, r3
 8009586:	e4ac      	b.n	8008ee2 <PxMessagingTask+0x5e>
							memcpy(&pcOutputString[0] + longMessageLastPtr,
 8009588:	4b1a      	ldr	r3, [pc, #104]	; (80095f4 <PxMessagingTask+0x770>)
 800958a:	4699      	mov	r9, r3
 800958c:	8818      	ldrh	r0, [r3, #0]
 800958e:	1838      	adds	r0, r7, r0
							    &cMessage[port - 1][shift],
 8009590:	4454      	add	r4, sl
 8009592:	4912      	ldr	r1, [pc, #72]	; (80095dc <PxMessagingTask+0x758>)
 8009594:	1861      	adds	r1, r4, r1
							memcpy(&pcOutputString[0] + longMessageLastPtr,
 8009596:	9a06      	ldr	r2, [sp, #24]
 8009598:	f008 fa5d 	bl	8011a56 <memcpy>
							longMessageLastPtr =0;
 800959c:	2400      	movs	r4, #0
 800959e:	464b      	mov	r3, r9
 80095a0:	801c      	strh	r4, [r3, #0]
							responseStatus =BOS_OK;
 80095a2:	4b10      	ldr	r3, [pc, #64]	; (80095e4 <PxMessagingTask+0x760>)
 80095a4:	701c      	strb	r4, [r3, #0]
							xTaskNotify( (xCommandConsoleTaskHandle),0,
 80095a6:	0023      	movs	r3, r4
 80095a8:	0022      	movs	r2, r4
 80095aa:	0021      	movs	r1, r4
 80095ac:	4819      	ldr	r0, [pc, #100]	; (8009614 <PxMessagingTask+0x790>)
 80095ae:	6800      	ldr	r0, [r0, #0]
 80095b0:	f004 fd4c 	bl	800e04c <xTaskGenericNotify>
 80095b4:	46a1      	mov	r9, r4
 80095b6:	e494      	b.n	8008ee2 <PxMessagingTask+0x5e>
						* ((unsigned long*) 0x20007FF0) =0xDEADBEEF;
 80095b8:	4b17      	ldr	r3, [pc, #92]	; (8009618 <PxMessagingTask+0x794>)
 80095ba:	4a18      	ldr	r2, [pc, #96]	; (800961c <PxMessagingTask+0x798>)
 80095bc:	601a      	str	r2, [r3, #0]
						indMode =IND_PING;
 80095be:	4b11      	ldr	r3, [pc, #68]	; (8009604 <PxMessagingTask+0x780>)
 80095c0:	2201      	movs	r2, #1
 80095c2:	701a      	strb	r2, [r3, #0]
						osDelay(10);
 80095c4:	200a      	movs	r0, #10
 80095c6:	f003 f922 	bl	800c80e <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	4b14      	ldr	r3, [pc, #80]	; (8009620 <PxMessagingTask+0x79c>)
 80095d0:	4a14      	ldr	r2, [pc, #80]	; (8009624 <PxMessagingTask+0x7a0>)
 80095d2:	60da      	str	r2, [r3, #12]
 80095d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80095d8:	46c0      	nop			; (mov r8, r8)
 80095da:	e7fd      	b.n	80095d8 <PxMessagingTask+0x754>
 80095dc:	20000d08 	.word	0x20000d08
 80095e0:	20001090 	.word	0x20001090
 80095e4:	20001110 	.word	0x20001110
 80095e8:	20001076 	.word	0x20001076
 80095ec:	20000f38 	.word	0x20000f38
 80095f0:	20000ef5 	.word	0x20000ef5
 80095f4:	20000ef6 	.word	0x20000ef6
 80095f8:	200015ec 	.word	0x200015ec
 80095fc:	2000001c 	.word	0x2000001c
 8009600:	20000a78 	.word	0x20000a78
 8009604:	20000ef4 	.word	0x20000ef4
 8009608:	200015b8 	.word	0x200015b8
 800960c:	20000a77 	.word	0x20000a77
 8009610:	20006988 	.word	0x20006988
 8009614:	20001504 	.word	0x20001504
 8009618:	20007ff0 	.word	0x20007ff0
 800961c:	deadbeef 	.word	0xdeadbeef
 8009620:	e000ed00 	.word	0xe000ed00
 8009624:	05fa0004 	.word	0x05fa0004
						SendMessageFromPort(cMessage[port - 1][shift],0,0,
 8009628:	4fec      	ldr	r7, [pc, #944]	; (80099dc <PxMessagingTask+0xb58>)
 800962a:	19bf      	adds	r7, r7, r6
 800962c:	5d38      	ldrb	r0, [r7, r4]
 800962e:	2300      	movs	r3, #0
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	3319      	adds	r3, #25
 8009634:	2200      	movs	r2, #0
 8009636:	2100      	movs	r1, #0
 8009638:	f7fe ff38 	bl	80084ac <SendMessageFromPort>
						osDelay(100);
 800963c:	2064      	movs	r0, #100	; 0x64
 800963e:	f003 f8e6 	bl	800c80e <osDelay>
						remoteBootloaderUpdate(src,myID,port,
 8009642:	5d3b      	ldrb	r3, [r7, r4]
 8009644:	4ae6      	ldr	r2, [pc, #920]	; (80099e0 <PxMessagingTask+0xb5c>)
 8009646:	7811      	ldrb	r1, [r2, #0]
 8009648:	9a08      	ldr	r2, [sp, #32]
 800964a:	9804      	ldr	r0, [sp, #16]
 800964c:	f7f9 ff10 	bl	8003470 <remoteBootloaderUpdate>
							break;
 8009650:	2300      	movs	r3, #0
 8009652:	4699      	mov	r9, r3
 8009654:	e445      	b.n	8008ee2 <PxMessagingTask+0x5e>
						temp =cMessage[port - 1][11 + shift];
 8009656:	46a3      	mov	fp, r4
 8009658:	230b      	movs	r3, #11
 800965a:	4699      	mov	r9, r3
 800965c:	44a1      	add	r9, r4
 800965e:	4bdf      	ldr	r3, [pc, #892]	; (80099dc <PxMessagingTask+0xb58>)
 8009660:	199b      	adds	r3, r3, r6
 8009662:	464a      	mov	r2, r9
 8009664:	5c9b      	ldrb	r3, [r3, r2]
 8009666:	930b      	str	r3, [sp, #44]	; 0x2c
						if(numOfParams == 15)
 8009668:	9b06      	ldr	r3, [sp, #24]
 800966a:	2b0f      	cmp	r3, #15
 800966c:	d100      	bne.n	8009670 <PxMessagingTask+0x7ec>
 800966e:	e088      	b.n	8009782 <PxMessagingTask+0x8fe>
						if(numOfParams == 17)
 8009670:	9b06      	ldr	r3, [sp, #24]
 8009672:	2b11      	cmp	r3, #17
 8009674:	d100      	bne.n	8009678 <PxMessagingTask+0x7f4>
 8009676:	e08c      	b.n	8009792 <PxMessagingTask+0x90e>
						            + shift] << 16)
 8009678:	465b      	mov	r3, fp
 800967a:	1c59      	adds	r1, r3, #1
 800967c:	910c      	str	r1, [sp, #48]	; 0x30
						            + shift] << 8)
 800967e:	1c98      	adds	r0, r3, #2
 8009680:	900d      	str	r0, [sp, #52]	; 0x34
						        + cMessage[port - 1][3 + shift];
 8009682:	1cda      	adds	r2, r3, #3
 8009684:	920e      	str	r2, [sp, #56]	; 0x38
						    ((uint32_t) cMessage[port - 1][shift] << 24)
 8009686:	4bd5      	ldr	r3, [pc, #852]	; (80099dc <PxMessagingTask+0xb58>)
 8009688:	199b      	adds	r3, r3, r6
 800968a:	465c      	mov	r4, fp
 800968c:	5d1c      	ldrb	r4, [r3, r4]
 800968e:	0624      	lsls	r4, r4, #24
						        + cMessage[port - 1][3 + shift];
 8009690:	5c9a      	ldrb	r2, [r3, r2]
						count =
 8009692:	18a4      	adds	r4, r4, r2
						        + ((uint32_t) cMessage[port - 1][1
 8009694:	5c5a      	ldrb	r2, [r3, r1]
						            + shift] << 16)
 8009696:	0412      	lsls	r2, r2, #16
						count =
 8009698:	18a4      	adds	r4, r4, r2
						        + ((uint32_t) cMessage[port - 1][2
 800969a:	5c1a      	ldrb	r2, [r3, r0]
						            + shift] << 8)
 800969c:	0212      	lsls	r2, r2, #8
						count =
 800969e:	18a4      	adds	r4, r4, r2
						    ((uint32_t) cMessage[port - 1][4 + shift] << 24)
 80096a0:	465a      	mov	r2, fp
 80096a2:	3204      	adds	r2, #4
 80096a4:	920f      	str	r2, [sp, #60]	; 0x3c
						            + shift] << 16)
 80096a6:	4659      	mov	r1, fp
 80096a8:	3105      	adds	r1, #5
 80096aa:	9110      	str	r1, [sp, #64]	; 0x40
						            + shift] << 8)
 80096ac:	4658      	mov	r0, fp
 80096ae:	3006      	adds	r0, #6
 80096b0:	9011      	str	r0, [sp, #68]	; 0x44
						        + cMessage[port - 1][7 + shift];
 80096b2:	465f      	mov	r7, fp
 80096b4:	3707      	adds	r7, #7
 80096b6:	9705      	str	r7, [sp, #20]
						    ((uint32_t) cMessage[port - 1][4 + shift] << 24)
 80096b8:	5c9f      	ldrb	r7, [r3, r2]
 80096ba:	063f      	lsls	r7, r7, #24
						        + ((uint32_t) cMessage[port - 1][5
 80096bc:	5c5a      	ldrb	r2, [r3, r1]
						            + shift] << 16)
 80096be:	0412      	lsls	r2, r2, #16
						        + ((uint32_t) cMessage[port - 1][5
 80096c0:	18bf      	adds	r7, r7, r2
						        + cMessage[port - 1][7 + shift];
 80096c2:	9a05      	ldr	r2, [sp, #20]
 80096c4:	5c9a      	ldrb	r2, [r3, r2]
						timeout =
 80096c6:	18bf      	adds	r7, r7, r2
						        + ((uint32_t) cMessage[port - 1][6
 80096c8:	5c1b      	ldrb	r3, [r3, r0]
						            + shift] << 8)
 80096ca:	021b      	lsls	r3, r3, #8
						timeout =
 80096cc:	18ff      	adds	r7, r7, r3
						if(temp == false) {
 80096ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d166      	bne.n	80097a2 <PxMessagingTask+0x91e>
							if(cMessage[port - 1][9 + shift]
 80096d4:	4bc1      	ldr	r3, [pc, #772]	; (80099dc <PxMessagingTask+0xb58>)
 80096d6:	199b      	adds	r3, r3, r6
 80096d8:	445b      	add	r3, fp
 80096da:	7a5b      	ldrb	r3, [r3, #9]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d012      	beq.n	8009706 <PxMessagingTask+0x882>
							    && cMessage[port - 1][10 + shift])
 80096e0:	2138      	movs	r1, #56	; 0x38
 80096e2:	4369      	muls	r1, r5
 80096e4:	4abd      	ldr	r2, [pc, #756]	; (80099dc <PxMessagingTask+0xb58>)
 80096e6:	1852      	adds	r2, r2, r1
 80096e8:	445a      	add	r2, fp
 80096ea:	7a91      	ldrb	r1, [r2, #10]
 80096ec:	2900      	cmp	r1, #0
 80096ee:	d00a      	beq.n	8009706 <PxMessagingTask+0x882>
							SetupDMAStreams(cMessage[port - 1][8 + shift],
 80096f0:	2038      	movs	r0, #56	; 0x38
 80096f2:	4368      	muls	r0, r5
 80096f4:	4ab9      	ldr	r2, [pc, #740]	; (80099dc <PxMessagingTask+0xb58>)
 80096f6:	1812      	adds	r2, r2, r0
 80096f8:	445a      	add	r2, fp
 80096fa:	7a10      	ldrb	r0, [r2, #8]
 80096fc:	9100      	str	r1, [sp, #0]
 80096fe:	003a      	movs	r2, r7
 8009700:	0021      	movs	r1, r4
 8009702:	f7fe fdb1 	bl	8008268 <SetupDMAStreams>
							if(cMessage[port - 1][11 + shift]
 8009706:	4bb5      	ldr	r3, [pc, #724]	; (80099dc <PxMessagingTask+0xb58>)
 8009708:	199b      	adds	r3, r3, r6
 800970a:	464a      	mov	r2, r9
 800970c:	5c9b      	ldrb	r3, [r3, r2]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d012      	beq.n	8009738 <PxMessagingTask+0x8b4>
							    && cMessage[port - 1][12 + shift])
 8009712:	2138      	movs	r1, #56	; 0x38
 8009714:	4369      	muls	r1, r5
 8009716:	4ab1      	ldr	r2, [pc, #708]	; (80099dc <PxMessagingTask+0xb58>)
 8009718:	1852      	adds	r2, r2, r1
 800971a:	445a      	add	r2, fp
 800971c:	7b11      	ldrb	r1, [r2, #12]
 800971e:	2900      	cmp	r1, #0
 8009720:	d00a      	beq.n	8009738 <PxMessagingTask+0x8b4>
							SetupDMAStreams(cMessage[port - 1][8 + shift],
 8009722:	2038      	movs	r0, #56	; 0x38
 8009724:	4368      	muls	r0, r5
 8009726:	4aad      	ldr	r2, [pc, #692]	; (80099dc <PxMessagingTask+0xb58>)
 8009728:	1812      	adds	r2, r2, r0
 800972a:	445a      	add	r2, fp
 800972c:	7a10      	ldrb	r0, [r2, #8]
 800972e:	9100      	str	r1, [sp, #0]
 8009730:	003a      	movs	r2, r7
 8009732:	0021      	movs	r1, r4
 8009734:	f7fe fd98 	bl	8008268 <SetupDMAStreams>
							if(cMessage[port - 1][13 + shift]
 8009738:	4ba8      	ldr	r3, [pc, #672]	; (80099dc <PxMessagingTask+0xb58>)
 800973a:	199b      	adds	r3, r3, r6
 800973c:	445b      	add	r3, fp
 800973e:	7b5b      	ldrb	r3, [r3, #13]
 8009740:	9305      	str	r3, [sp, #20]
 8009742:	2200      	movs	r2, #0
 8009744:	4691      	mov	r9, r2
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <PxMessagingTask+0x8ca>
 800974a:	f7ff fbca 	bl	8008ee2 <PxMessagingTask+0x5e>
							    && cMessage[port - 1][14 + shift])
 800974e:	3238      	adds	r2, #56	; 0x38
 8009750:	436a      	muls	r2, r5
 8009752:	4ba2      	ldr	r3, [pc, #648]	; (80099dc <PxMessagingTask+0xb58>)
 8009754:	189b      	adds	r3, r3, r2
 8009756:	445b      	add	r3, fp
 8009758:	7b9a      	ldrb	r2, [r3, #14]
 800975a:	454a      	cmp	r2, r9
 800975c:	d101      	bne.n	8009762 <PxMessagingTask+0x8de>
 800975e:	f000 fe6b 	bl	800a438 <PxMessagingTask+0x15b4>
							SetupDMAStreams(cMessage[port - 1][8 + shift],
 8009762:	2138      	movs	r1, #56	; 0x38
 8009764:	4369      	muls	r1, r5
 8009766:	4b9d      	ldr	r3, [pc, #628]	; (80099dc <PxMessagingTask+0xb58>)
 8009768:	185b      	adds	r3, r3, r1
 800976a:	445b      	add	r3, fp
 800976c:	7a18      	ldrb	r0, [r3, #8]
 800976e:	9200      	str	r2, [sp, #0]
 8009770:	9b05      	ldr	r3, [sp, #20]
 8009772:	003a      	movs	r2, r7
 8009774:	0021      	movs	r1, r4
 8009776:	f7fe fd77 	bl	8008268 <SetupDMAStreams>
 800977a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800977c:	9305      	str	r3, [sp, #20]
 800977e:	f7ff fbb0 	bl	8008ee2 <PxMessagingTask+0x5e>
						temp =cMessage[port - 1][13 + shift];
 8009782:	2238      	movs	r2, #56	; 0x38
 8009784:	436a      	muls	r2, r5
 8009786:	4b95      	ldr	r3, [pc, #596]	; (80099dc <PxMessagingTask+0xb58>)
 8009788:	189b      	adds	r3, r3, r2
 800978a:	191c      	adds	r4, r3, r4
 800978c:	7b63      	ldrb	r3, [r4, #13]
 800978e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009790:	e772      	b.n	8009678 <PxMessagingTask+0x7f4>
						temp =cMessage[port - 1][15 + shift];
 8009792:	2238      	movs	r2, #56	; 0x38
 8009794:	436a      	muls	r2, r5
 8009796:	4b91      	ldr	r3, [pc, #580]	; (80099dc <PxMessagingTask+0xb58>)
 8009798:	189b      	adds	r3, r3, r2
 800979a:	445b      	add	r3, fp
 800979c:	7bdb      	ldrb	r3, [r3, #15]
 800979e:	930b      	str	r3, [sp, #44]	; 0x2c
 80097a0:	e76a      	b.n	8009678 <PxMessagingTask+0x7f4>
							    cMessage[port - 1][8 + shift]); /* Direction */
 80097a2:	2338      	movs	r3, #56	; 0x38
 80097a4:	436b      	muls	r3, r5
 80097a6:	4c8d      	ldr	r4, [pc, #564]	; (80099dc <PxMessagingTask+0xb58>)
 80097a8:	18e4      	adds	r4, r4, r3
 80097aa:	465b      	mov	r3, fp
 80097ac:	18e6      	adds	r6, r4, r3
							EE_WriteVariable(_EE_DMA_STREAM_BASE,
 80097ae:	7a31      	ldrb	r1, [r6, #8]
 80097b0:	20e4      	movs	r0, #228	; 0xe4
 80097b2:	f7fd fbcb 	bl	8006f4c <EE_WriteVariable>
							    ((uint16_t) cMessage[port - 1][shift] << 8)
 80097b6:	465b      	mov	r3, fp
 80097b8:	5ce3      	ldrb	r3, [r4, r3]
 80097ba:	021b      	lsls	r3, r3, #8
							        + cMessage[port - 1][1 + shift]); /* Count high half-word */
 80097bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097be:	5ca1      	ldrb	r1, [r4, r2]
							EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,
 80097c0:	18c9      	adds	r1, r1, r3
 80097c2:	b289      	uxth	r1, r1
 80097c4:	20e5      	movs	r0, #229	; 0xe5
 80097c6:	f7fd fbc1 	bl	8006f4c <EE_WriteVariable>
							    ((uint16_t) cMessage[port - 1][2 + shift]
 80097ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097cc:	5ce3      	ldrb	r3, [r4, r3]
							        << 8)
 80097ce:	021b      	lsls	r3, r3, #8
							        + cMessage[port - 1][3 + shift]); /* Count low half-word */
 80097d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097d2:	5ca1      	ldrb	r1, [r4, r2]
							EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,
 80097d4:	18c9      	adds	r1, r1, r3
 80097d6:	b289      	uxth	r1, r1
 80097d8:	20e6      	movs	r0, #230	; 0xe6
 80097da:	f7fd fbb7 	bl	8006f4c <EE_WriteVariable>
							    ((uint16_t) cMessage[port - 1][4 + shift]
 80097de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097e0:	5ce3      	ldrb	r3, [r4, r3]
							        << 8)
 80097e2:	021b      	lsls	r3, r3, #8
							        + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 80097e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097e6:	5ca1      	ldrb	r1, [r4, r2]
							EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,
 80097e8:	18c9      	adds	r1, r1, r3
 80097ea:	b289      	uxth	r1, r1
 80097ec:	20e7      	movs	r0, #231	; 0xe7
 80097ee:	f7fd fbad 	bl	8006f4c <EE_WriteVariable>
							    ((uint16_t) cMessage[port - 1][6 + shift]
 80097f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097f4:	5ce3      	ldrb	r3, [r4, r3]
							        << 8)
 80097f6:	021b      	lsls	r3, r3, #8
							        + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 80097f8:	9a05      	ldr	r2, [sp, #20]
 80097fa:	5ca1      	ldrb	r1, [r4, r2]
							EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,
 80097fc:	18c9      	adds	r1, r1, r3
 80097fe:	b289      	uxth	r1, r1
 8009800:	20e8      	movs	r0, #232	; 0xe8
 8009802:	f7fd fba3 	bl	8006f4c <EE_WriteVariable>
							    ((uint16_t) cMessage[port - 1][9 + shift]
 8009806:	7a73      	ldrb	r3, [r6, #9]
							        << 8)
 8009808:	021b      	lsls	r3, r3, #8
							        + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800980a:	7ab1      	ldrb	r1, [r6, #10]
							EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,
 800980c:	18c9      	adds	r1, r1, r3
 800980e:	b289      	uxth	r1, r1
 8009810:	20e9      	movs	r0, #233	; 0xe9
 8009812:	f7fd fb9b 	bl	8006f4c <EE_WriteVariable>
							if(numOfParams == 19)
 8009816:	9b06      	ldr	r3, [sp, #24]
 8009818:	2b13      	cmp	r3, #19
 800981a:	d116      	bne.n	800984a <PxMessagingTask+0x9c6>
							    ((uint16_t) cMessage[port - 1][11
 800981c:	3325      	adds	r3, #37	; 0x25
 800981e:	436b      	muls	r3, r5
 8009820:	4d6e      	ldr	r5, [pc, #440]	; (80099dc <PxMessagingTask+0xb58>)
 8009822:	18ed      	adds	r5, r5, r3
 8009824:	464b      	mov	r3, r9
 8009826:	5ceb      	ldrb	r3, [r5, r3]
							        + shift] << 8)
 8009828:	021b      	lsls	r3, r3, #8
							        + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800982a:	445d      	add	r5, fp
 800982c:	7b29      	ldrb	r1, [r5, #12]
							EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,
 800982e:	18c9      	adds	r1, r1, r3
 8009830:	b289      	uxth	r1, r1
 8009832:	20ea      	movs	r0, #234	; 0xea
 8009834:	f7fd fb8a 	bl	8006f4c <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	4b69      	ldr	r3, [pc, #420]	; (80099e4 <PxMessagingTask+0xb60>)
 800983e:	4a6a      	ldr	r2, [pc, #424]	; (80099e8 <PxMessagingTask+0xb64>)
 8009840:	60da      	str	r2, [r3, #12]
 8009842:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8009846:	46c0      	nop			; (mov r8, r8)
 8009848:	e7fd      	b.n	8009846 <PxMessagingTask+0x9c2>
							if(numOfParams == 21)
 800984a:	9b06      	ldr	r3, [sp, #24]
 800984c:	2b15      	cmp	r3, #21
 800984e:	d1f3      	bne.n	8009838 <PxMessagingTask+0x9b4>
							    ((uint16_t) cMessage[port - 1][13
 8009850:	3323      	adds	r3, #35	; 0x23
 8009852:	435d      	muls	r5, r3
 8009854:	4b61      	ldr	r3, [pc, #388]	; (80099dc <PxMessagingTask+0xb58>)
 8009856:	195b      	adds	r3, r3, r5
 8009858:	445b      	add	r3, fp
 800985a:	7b5a      	ldrb	r2, [r3, #13]
							        + shift] << 8)
 800985c:	0212      	lsls	r2, r2, #8
							        + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800985e:	7b99      	ldrb	r1, [r3, #14]
							EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,
 8009860:	1889      	adds	r1, r1, r2
 8009862:	b289      	uxth	r1, r1
 8009864:	20eb      	movs	r0, #235	; 0xeb
 8009866:	f7fd fb71 	bl	8006f4c <EE_WriteVariable>
 800986a:	e7e5      	b.n	8009838 <PxMessagingTask+0x9b4>
						StartScastDMAStream(cMessage[port - 1][9 + shift],myID,
 800986c:	4f5b      	ldr	r7, [pc, #364]	; (80099dc <PxMessagingTask+0xb58>)
 800986e:	19bf      	adds	r7, r7, r6
 8009870:	1939      	adds	r1, r7, r4
 8009872:	7a8b      	ldrb	r3, [r1, #10]
 8009874:	9306      	str	r3, [sp, #24]
 8009876:	7aca      	ldrb	r2, [r1, #11]
 8009878:	4859      	ldr	r0, [pc, #356]	; (80099e0 <PxMessagingTask+0xb5c>)
 800987a:	7803      	ldrb	r3, [r0, #0]
 800987c:	4699      	mov	r9, r3
 800987e:	7a4b      	ldrb	r3, [r1, #9]
 8009880:	469b      	mov	fp, r3
 8009882:	7b08      	ldrb	r0, [r1, #12]
 8009884:	0003      	movs	r3, r0
 8009886:	1e58      	subs	r0, r3, #1
 8009888:	4183      	sbcs	r3, r0
 800988a:	9303      	str	r3, [sp, #12]
						    ((uint32_t) cMessage[port - 1][4 + shift] << 24)
 800988c:	7908      	ldrb	r0, [r1, #4]
 800988e:	0603      	lsls	r3, r0, #24
 8009890:	469c      	mov	ip, r3
						        + ((uint32_t) cMessage[port - 1][5
 8009892:	7948      	ldrb	r0, [r1, #5]
						            + shift] << 16)
 8009894:	0400      	lsls	r0, r0, #16
						        + ((uint32_t) cMessage[port - 1][5
 8009896:	4460      	add	r0, ip
						        + cMessage[port - 1][7 + shift];
 8009898:	79cb      	ldrb	r3, [r1, #7]
 800989a:	469c      	mov	ip, r3
						timeout =
 800989c:	4460      	add	r0, ip
						        + ((uint32_t) cMessage[port - 1][6
 800989e:	798b      	ldrb	r3, [r1, #6]
						            + shift] << 8)
 80098a0:	021b      	lsls	r3, r3, #8
 80098a2:	469c      	mov	ip, r3
						timeout =
 80098a4:	4460      	add	r0, ip
						StartScastDMAStream(cMessage[port - 1][9 + shift],myID,
 80098a6:	9002      	str	r0, [sp, #8]
						    ((uint32_t) cMessage[port - 1][shift] << 24)
 80098a8:	5d38      	ldrb	r0, [r7, r4]
 80098aa:	0600      	lsls	r0, r0, #24
						        + cMessage[port - 1][3 + shift];
 80098ac:	78cc      	ldrb	r4, [r1, #3]
						count =
 80098ae:	1900      	adds	r0, r0, r4
						        + ((uint32_t) cMessage[port - 1][1
 80098b0:	784c      	ldrb	r4, [r1, #1]
						            + shift] << 16)
 80098b2:	0424      	lsls	r4, r4, #16
						count =
 80098b4:	1900      	adds	r0, r0, r4
						        + ((uint32_t) cMessage[port - 1][2
 80098b6:	788c      	ldrb	r4, [r1, #2]
						            + shift] << 8)
 80098b8:	0224      	lsls	r4, r4, #8
						count =
 80098ba:	1900      	adds	r0, r0, r4
						StartScastDMAStream(cMessage[port - 1][9 + shift],myID,
 80098bc:	9001      	str	r0, [sp, #4]
 80098be:	7a09      	ldrb	r1, [r1, #8]
 80098c0:	9100      	str	r1, [sp, #0]
 80098c2:	9b06      	ldr	r3, [sp, #24]
 80098c4:	4649      	mov	r1, r9
 80098c6:	4658      	mov	r0, fp
 80098c8:	f7ff f83e 	bl	8008948 <StartScastDMAStream>
							break;
 80098cc:	2300      	movs	r3, #0
 80098ce:	4699      	mov	r9, r3
 80098d0:	f7ff fb07 	bl	8008ee2 <PxMessagingTask+0x5e>
						if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD)// request for a memory address
 80098d4:	0023      	movs	r3, r4
 80098d6:	4a41      	ldr	r2, [pc, #260]	; (80099dc <PxMessagingTask+0xb58>)
 80098d8:	1992      	adds	r2, r2, r6
 80098da:	5d12      	ldrb	r2, [r2, r4]
 80098dc:	2a00      	cmp	r2, #0
 80098de:	d000      	beq.n	80098e2 <PxMessagingTask+0xa5e>
 80098e0:	e09a      	b.n	8009a18 <PxMessagingTask+0xb94>
							temp32 = ((uint32_t) cMessage[port - 1][2 + shift]
 80098e2:	3238      	adds	r2, #56	; 0x38
 80098e4:	436a      	muls	r2, r5
 80098e6:	4b3d      	ldr	r3, [pc, #244]	; (80099dc <PxMessagingTask+0xb58>)
 80098e8:	189b      	adds	r3, r3, r2
 80098ea:	191c      	adds	r4, r3, r4
 80098ec:	78a3      	ldrb	r3, [r4, #2]
							    << 24)
 80098ee:	061b      	lsls	r3, r3, #24
							    + ((uint32_t) cMessage[port - 1][3 + shift]
 80098f0:	78e2      	ldrb	r2, [r4, #3]
							        << 16)
 80098f2:	0412      	lsls	r2, r2, #16
							    + ((uint32_t) cMessage[port - 1][3 + shift]
 80098f4:	189b      	adds	r3, r3, r2
							    + cMessage[port - 1][5 + shift];
 80098f6:	7962      	ldrb	r2, [r4, #5]
							temp32 = ((uint32_t) cMessage[port - 1][2 + shift]
 80098f8:	189b      	adds	r3, r3, r2
							    + ((uint32_t) cMessage[port - 1][4 + shift]
 80098fa:	7922      	ldrb	r2, [r4, #4]
							        << 8)
 80098fc:	0212      	lsls	r2, r2, #8
							temp32 = ((uint32_t) cMessage[port - 1][2 + shift]
 80098fe:	189b      	adds	r3, r3, r2
							switch(cMessage[port - 1][1 + shift])// requested format
 8009900:	7862      	ldrb	r2, [r4, #1]
 8009902:	3a01      	subs	r2, #1
 8009904:	b2d1      	uxtb	r1, r2
 8009906:	2907      	cmp	r1, #7
 8009908:	d901      	bls.n	800990e <PxMessagingTask+0xa8a>
 800990a:	f000 fd7c 	bl	800a406 <PxMessagingTask+0x1582>
 800990e:	b2d2      	uxtb	r2, r2
 8009910:	0092      	lsls	r2, r2, #2
 8009912:	4936      	ldr	r1, [pc, #216]	; (80099ec <PxMessagingTask+0xb68>)
 8009914:	588a      	ldr	r2, [r1, r2]
 8009916:	4697      	mov	pc, r2
								messageParams[0] =*(__IO uint8_t*) temp32;
 8009918:	781a      	ldrb	r2, [r3, #0]
 800991a:	4b35      	ldr	r3, [pc, #212]	; (80099f0 <PxMessagingTask+0xb6c>)
 800991c:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,
 800991e:	2201      	movs	r2, #1
 8009920:	211f      	movs	r1, #31
 8009922:	9804      	ldr	r0, [sp, #16]
 8009924:	f7fe ffea 	bl	80088fc <SendMessageToModule>
									break;
 8009928:	2300      	movs	r3, #0
 800992a:	4699      	mov	r9, r3
 800992c:	f7ff fad9 	bl	8008ee2 <PxMessagingTask+0x5e>
								messageParams[0] =*(__IO int8_t*) temp32;
 8009930:	781a      	ldrb	r2, [r3, #0]
 8009932:	4b2f      	ldr	r3, [pc, #188]	; (80099f0 <PxMessagingTask+0xb6c>)
 8009934:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,
 8009936:	2201      	movs	r2, #1
 8009938:	211f      	movs	r1, #31
 800993a:	9804      	ldr	r0, [sp, #16]
 800993c:	f7fe ffde 	bl	80088fc <SendMessageToModule>
									break;
 8009940:	2300      	movs	r3, #0
 8009942:	4699      	mov	r9, r3
 8009944:	f7ff facd 	bl	8008ee2 <PxMessagingTask+0x5e>
								    (uint8_t) ( (*(__IO uint16_t*) temp32)
 8009948:	8819      	ldrh	r1, [r3, #0]
								messageParams[0] =
 800994a:	4a29      	ldr	r2, [pc, #164]	; (80099f0 <PxMessagingTask+0xb6c>)
 800994c:	7011      	strb	r1, [r2, #0]
								    (uint8_t) ( (*(__IO uint16_t*) temp32)
 800994e:	881b      	ldrh	r3, [r3, #0]
 8009950:	0a1b      	lsrs	r3, r3, #8
								messageParams[1] =
 8009952:	7053      	strb	r3, [r2, #1]
								SendMessageToModule(src,
 8009954:	2202      	movs	r2, #2
 8009956:	211f      	movs	r1, #31
 8009958:	9804      	ldr	r0, [sp, #16]
 800995a:	f7fe ffcf 	bl	80088fc <SendMessageToModule>
									break;
 800995e:	2300      	movs	r3, #0
 8009960:	4699      	mov	r9, r3
 8009962:	f7ff fabe 	bl	8008ee2 <PxMessagingTask+0x5e>
								    (uint8_t) ( (*(__IO int16_t*) temp32)
 8009966:	8819      	ldrh	r1, [r3, #0]
								messageParams[0] =
 8009968:	4a21      	ldr	r2, [pc, #132]	; (80099f0 <PxMessagingTask+0xb6c>)
 800996a:	7011      	strb	r1, [r2, #0]
								    (uint8_t) ( (*(__IO int16_t*) temp32)
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	b21b      	sxth	r3, r3
 8009970:	121b      	asrs	r3, r3, #8
								messageParams[1] =
 8009972:	7053      	strb	r3, [r2, #1]
								SendMessageToModule(src,
 8009974:	2202      	movs	r2, #2
 8009976:	211f      	movs	r1, #31
 8009978:	9804      	ldr	r0, [sp, #16]
 800997a:	f7fe ffbf 	bl	80088fc <SendMessageToModule>
									break;
 800997e:	2300      	movs	r3, #0
 8009980:	4699      	mov	r9, r3
 8009982:	f7ff faae 	bl	8008ee2 <PxMessagingTask+0x5e>
								    (uint8_t) ( (*(__IO uint32_t*) temp32)
 8009986:	6819      	ldr	r1, [r3, #0]
								messageParams[0] =
 8009988:	4a19      	ldr	r2, [pc, #100]	; (80099f0 <PxMessagingTask+0xb6c>)
 800998a:	7011      	strb	r1, [r2, #0]
								    (uint8_t) ( (*(__IO uint32_t*) temp32)
 800998c:	6819      	ldr	r1, [r3, #0]
								        >> 8);
 800998e:	0a09      	lsrs	r1, r1, #8
								messageParams[1] =
 8009990:	7051      	strb	r1, [r2, #1]
								    (uint8_t) ( (*(__IO uint32_t*) temp32)
 8009992:	6819      	ldr	r1, [r3, #0]
								        >> 16);
 8009994:	0c09      	lsrs	r1, r1, #16
								messageParams[2] =
 8009996:	7091      	strb	r1, [r2, #2]
								    (uint8_t) ( (*(__IO uint32_t*) temp32)
 8009998:	681b      	ldr	r3, [r3, #0]
								        >> 24);
 800999a:	0e1b      	lsrs	r3, r3, #24
								messageParams[3] =
 800999c:	70d3      	strb	r3, [r2, #3]
								SendMessageToModule(src,
 800999e:	2204      	movs	r2, #4
 80099a0:	211f      	movs	r1, #31
 80099a2:	9804      	ldr	r0, [sp, #16]
 80099a4:	f7fe ffaa 	bl	80088fc <SendMessageToModule>
									break;
 80099a8:	2300      	movs	r3, #0
 80099aa:	4699      	mov	r9, r3
 80099ac:	f7ff fa99 	bl	8008ee2 <PxMessagingTask+0x5e>
								    (uint8_t) ( (*(__IO int32_t*) temp32)
 80099b0:	6819      	ldr	r1, [r3, #0]
								messageParams[0] =
 80099b2:	4a0f      	ldr	r2, [pc, #60]	; (80099f0 <PxMessagingTask+0xb6c>)
 80099b4:	7011      	strb	r1, [r2, #0]
								    (uint8_t) ( (*(__IO int32_t*) temp32)
 80099b6:	6819      	ldr	r1, [r3, #0]
								        >> 8);
 80099b8:	1209      	asrs	r1, r1, #8
								messageParams[1] =
 80099ba:	7051      	strb	r1, [r2, #1]
								    (uint8_t) ( (*(__IO int32_t*) temp32)
 80099bc:	6819      	ldr	r1, [r3, #0]
								        >> 16);
 80099be:	1409      	asrs	r1, r1, #16
								messageParams[2] =
 80099c0:	7091      	strb	r1, [r2, #2]
								    (uint8_t) ( (*(__IO int32_t*) temp32)
 80099c2:	681b      	ldr	r3, [r3, #0]
								        >> 24);
 80099c4:	161b      	asrs	r3, r3, #24
								messageParams[3] =
 80099c6:	70d3      	strb	r3, [r2, #3]
								SendMessageToModule(src,
 80099c8:	2204      	movs	r2, #4
 80099ca:	211f      	movs	r1, #31
 80099cc:	9804      	ldr	r0, [sp, #16]
 80099ce:	f7fe ff95 	bl	80088fc <SendMessageToModule>
									break;
 80099d2:	2300      	movs	r3, #0
 80099d4:	4699      	mov	r9, r3
 80099d6:	f7ff fa84 	bl	8008ee2 <PxMessagingTask+0x5e>
 80099da:	46c0      	nop			; (mov r8, r8)
 80099dc:	20000d08 	.word	0x20000d08
 80099e0:	20001076 	.word	0x20001076
 80099e4:	e000ed00 	.word	0xe000ed00
 80099e8:	05fa0004 	.word	0x05fa0004
 80099ec:	08018ae4 	.word	0x08018ae4
 80099f0:	20000f38 	.word	0x20000f38
								    *(__IO uint8_t*) (temp32 + 0);
 80099f4:	7819      	ldrb	r1, [r3, #0]
								messageParams[0] =
 80099f6:	4aee      	ldr	r2, [pc, #952]	; (8009db0 <PxMessagingTask+0xf2c>)
 80099f8:	7011      	strb	r1, [r2, #0]
								    *(__IO uint8_t*) (temp32 + 1);
 80099fa:	7859      	ldrb	r1, [r3, #1]
								messageParams[1] =
 80099fc:	7051      	strb	r1, [r2, #1]
								    *(__IO uint8_t*) (temp32 + 2);
 80099fe:	7899      	ldrb	r1, [r3, #2]
								messageParams[2] =
 8009a00:	7091      	strb	r1, [r2, #2]
								    *(__IO uint8_t*) (temp32 + 3);
 8009a02:	78db      	ldrb	r3, [r3, #3]
								messageParams[3] =
 8009a04:	70d3      	strb	r3, [r2, #3]
								SendMessageToModule(src,
 8009a06:	2208      	movs	r2, #8
 8009a08:	211f      	movs	r1, #31
 8009a0a:	9804      	ldr	r0, [sp, #16]
 8009a0c:	f7fe ff76 	bl	80088fc <SendMessageToModule>
									break;// You cannot bitwise floats	
 8009a10:	2300      	movs	r3, #0
 8009a12:	4699      	mov	r9, r3
 8009a14:	f7ff fa65 	bl	8008ee2 <PxMessagingTask+0x5e>
						else if(cMessage[port - 1][shift]
 8009a18:	2a02      	cmp	r2, #2
 8009a1a:	d000      	beq.n	8009a1e <PxMessagingTask+0xb9a>
 8009a1c:	e09f      	b.n	8009b5e <PxMessagingTask+0xcda>
							cMessage[port - 1][messageLength[port - 1] - 1] =0;// adding string termination
 8009a1e:	48e5      	ldr	r0, [pc, #916]	; (8009db4 <PxMessagingTask+0xf30>)
 8009a20:	3236      	adds	r2, #54	; 0x36
 8009a22:	436a      	muls	r2, r5
 8009a24:	1882      	adds	r2, r0, r2
 8009a26:	1851      	adds	r1, r2, r1
 8009a28:	3901      	subs	r1, #1
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	700a      	strb	r2, [r1, #0]
							    (char*) &cMessage[port - 1][1 + shift]);// extrating module parameter
 8009a2e:	3301      	adds	r3, #1
 8009a30:	4453      	add	r3, sl
 8009a32:	1818      	adds	r0, r3, r0
							temp =IsModuleParameter(
 8009a34:	f7f9 fb32 	bl	800309c <IsModuleParameter>
 8009a38:	9005      	str	r0, [sp, #20]
							if(temp == 0) {// Parameter does not exist
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	d108      	bne.n	8009a50 <PxMessagingTask+0xbcc>
								SendMessageToModule(src,
 8009a3e:	2201      	movs	r2, #1
 8009a40:	211f      	movs	r1, #31
 8009a42:	9804      	ldr	r0, [sp, #16]
 8009a44:	f7fe ff5a 	bl	80088fc <SendMessageToModule>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	4699      	mov	r9, r3
 8009a4c:	f7ff fa49 	bl	8008ee2 <PxMessagingTask+0x5e>
								temp32 =(uint32_t) modParam[temp - 1].paramPtr;
 8009a50:	3801      	subs	r0, #1
 8009a52:	4ad9      	ldr	r2, [pc, #868]	; (8009db8 <PxMessagingTask+0xf34>)
 8009a54:	210c      	movs	r1, #12
 8009a56:	4341      	muls	r1, r0
 8009a58:	588b      	ldr	r3, [r1, r2]
								    modParam[temp - 1].paramFormat;
 8009a5a:	1852      	adds	r2, r2, r1
 8009a5c:	7912      	ldrb	r2, [r2, #4]
								messageParams[0] =
 8009a5e:	49d4      	ldr	r1, [pc, #848]	; (8009db0 <PxMessagingTask+0xf2c>)
 8009a60:	700a      	strb	r2, [r1, #0]
								switch(messageParams[0])// requested format
 8009a62:	3a01      	subs	r2, #1
 8009a64:	b2d1      	uxtb	r1, r2
 8009a66:	2907      	cmp	r1, #7
 8009a68:	d901      	bls.n	8009a6e <PxMessagingTask+0xbea>
 8009a6a:	f000 fcd0 	bl	800a40e <PxMessagingTask+0x158a>
 8009a6e:	b2d2      	uxtb	r2, r2
 8009a70:	0092      	lsls	r2, r2, #2
 8009a72:	49d2      	ldr	r1, [pc, #840]	; (8009dbc <PxMessagingTask+0xf38>)
 8009a74:	588a      	ldr	r2, [r1, r2]
 8009a76:	4697      	mov	pc, r2
									messageParams[1] =*(__IO uint8_t*) temp32;
 8009a78:	781a      	ldrb	r2, [r3, #0]
 8009a7a:	4bcd      	ldr	r3, [pc, #820]	; (8009db0 <PxMessagingTask+0xf2c>)
 8009a7c:	705a      	strb	r2, [r3, #1]
									SendMessageToModule(src,
 8009a7e:	2202      	movs	r2, #2
 8009a80:	211f      	movs	r1, #31
 8009a82:	9804      	ldr	r0, [sp, #16]
 8009a84:	f7fe ff3a 	bl	80088fc <SendMessageToModule>
										break;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	4699      	mov	r9, r3
 8009a8c:	f7ff fa29 	bl	8008ee2 <PxMessagingTask+0x5e>
									messageParams[1] =*(__IO int8_t*) temp32;
 8009a90:	781a      	ldrb	r2, [r3, #0]
 8009a92:	4bc7      	ldr	r3, [pc, #796]	; (8009db0 <PxMessagingTask+0xf2c>)
 8009a94:	705a      	strb	r2, [r3, #1]
									SendMessageToModule(src,
 8009a96:	2202      	movs	r2, #2
 8009a98:	211f      	movs	r1, #31
 8009a9a:	9804      	ldr	r0, [sp, #16]
 8009a9c:	f7fe ff2e 	bl	80088fc <SendMessageToModule>
										break;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	4699      	mov	r9, r3
 8009aa4:	f7ff fa1d 	bl	8008ee2 <PxMessagingTask+0x5e>
									    (uint8_t) ( (*(__IO uint16_t*) temp32)
 8009aa8:	8819      	ldrh	r1, [r3, #0]
									messageParams[1] =
 8009aaa:	4ac1      	ldr	r2, [pc, #772]	; (8009db0 <PxMessagingTask+0xf2c>)
 8009aac:	7051      	strb	r1, [r2, #1]
									    (uint8_t) ( (*(__IO uint16_t*) temp32)
 8009aae:	881b      	ldrh	r3, [r3, #0]
 8009ab0:	0a1b      	lsrs	r3, r3, #8
									messageParams[2] =
 8009ab2:	7093      	strb	r3, [r2, #2]
									SendMessageToModule(src,
 8009ab4:	2203      	movs	r2, #3
 8009ab6:	211f      	movs	r1, #31
 8009ab8:	9804      	ldr	r0, [sp, #16]
 8009aba:	f7fe ff1f 	bl	80088fc <SendMessageToModule>
										break;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	4699      	mov	r9, r3
 8009ac2:	f7ff fa0e 	bl	8008ee2 <PxMessagingTask+0x5e>
									    (uint8_t) ( (*(__IO int16_t*) temp32)
 8009ac6:	8819      	ldrh	r1, [r3, #0]
									messageParams[1] =
 8009ac8:	4ab9      	ldr	r2, [pc, #740]	; (8009db0 <PxMessagingTask+0xf2c>)
 8009aca:	7051      	strb	r1, [r2, #1]
									    (uint8_t) ( (*(__IO int16_t*) temp32)
 8009acc:	881b      	ldrh	r3, [r3, #0]
 8009ace:	b21b      	sxth	r3, r3
 8009ad0:	121b      	asrs	r3, r3, #8
									messageParams[2] =
 8009ad2:	7093      	strb	r3, [r2, #2]
									SendMessageToModule(src,
 8009ad4:	2203      	movs	r2, #3
 8009ad6:	211f      	movs	r1, #31
 8009ad8:	9804      	ldr	r0, [sp, #16]
 8009ada:	f7fe ff0f 	bl	80088fc <SendMessageToModule>
										break;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	4699      	mov	r9, r3
 8009ae2:	f7ff f9fe 	bl	8008ee2 <PxMessagingTask+0x5e>
									    (uint8_t) ( (*(__IO uint32_t*) temp32)
 8009ae6:	6819      	ldr	r1, [r3, #0]
									messageParams[1] =
 8009ae8:	4ab1      	ldr	r2, [pc, #708]	; (8009db0 <PxMessagingTask+0xf2c>)
 8009aea:	7051      	strb	r1, [r2, #1]
									    (uint8_t) ( (*(__IO uint32_t*) temp32)
 8009aec:	6819      	ldr	r1, [r3, #0]
									        >> 8);
 8009aee:	0a09      	lsrs	r1, r1, #8
									messageParams[2] =
 8009af0:	7091      	strb	r1, [r2, #2]
									    (uint8_t) ( (*(__IO uint32_t*) temp32)
 8009af2:	6819      	ldr	r1, [r3, #0]
									        >> 16);
 8009af4:	0c09      	lsrs	r1, r1, #16
									messageParams[3] =
 8009af6:	70d1      	strb	r1, [r2, #3]
									    (uint8_t) ( (*(__IO uint32_t*) temp32)
 8009af8:	681b      	ldr	r3, [r3, #0]
									        >> 24);
 8009afa:	0e1b      	lsrs	r3, r3, #24
									messageParams[4] =
 8009afc:	7113      	strb	r3, [r2, #4]
									SendMessageToModule(src,
 8009afe:	2205      	movs	r2, #5
 8009b00:	211f      	movs	r1, #31
 8009b02:	9804      	ldr	r0, [sp, #16]
 8009b04:	f7fe fefa 	bl	80088fc <SendMessageToModule>
										break;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	4699      	mov	r9, r3
 8009b0c:	f7ff f9e9 	bl	8008ee2 <PxMessagingTask+0x5e>
									    (uint8_t) ( (*(__IO int32_t*) temp32)
 8009b10:	6819      	ldr	r1, [r3, #0]
									messageParams[1] =
 8009b12:	4aa7      	ldr	r2, [pc, #668]	; (8009db0 <PxMessagingTask+0xf2c>)
 8009b14:	7051      	strb	r1, [r2, #1]
									    (uint8_t) ( (*(__IO int32_t*) temp32)
 8009b16:	6819      	ldr	r1, [r3, #0]
									        >> 8);
 8009b18:	1209      	asrs	r1, r1, #8
									messageParams[2] =
 8009b1a:	7091      	strb	r1, [r2, #2]
									    (uint8_t) ( (*(__IO int32_t*) temp32)
 8009b1c:	6819      	ldr	r1, [r3, #0]
									        >> 16);
 8009b1e:	1409      	asrs	r1, r1, #16
									messageParams[3] =
 8009b20:	70d1      	strb	r1, [r2, #3]
									    (uint8_t) ( (*(__IO int32_t*) temp32)
 8009b22:	681b      	ldr	r3, [r3, #0]
									        >> 24);
 8009b24:	161b      	asrs	r3, r3, #24
									messageParams[4] =
 8009b26:	7113      	strb	r3, [r2, #4]
									SendMessageToModule(src,
 8009b28:	2205      	movs	r2, #5
 8009b2a:	211f      	movs	r1, #31
 8009b2c:	9804      	ldr	r0, [sp, #16]
 8009b2e:	f7fe fee5 	bl	80088fc <SendMessageToModule>
										break;
 8009b32:	2300      	movs	r3, #0
 8009b34:	4699      	mov	r9, r3
 8009b36:	f7ff f9d4 	bl	8008ee2 <PxMessagingTask+0x5e>
									messageParams[1] =*(__IO uint8_t*) (temp32
 8009b3a:	7819      	ldrb	r1, [r3, #0]
 8009b3c:	4a9c      	ldr	r2, [pc, #624]	; (8009db0 <PxMessagingTask+0xf2c>)
 8009b3e:	7051      	strb	r1, [r2, #1]
									messageParams[2] =*(__IO uint8_t*) (temp32
 8009b40:	7859      	ldrb	r1, [r3, #1]
 8009b42:	7091      	strb	r1, [r2, #2]
									messageParams[3] =*(__IO uint8_t*) (temp32
 8009b44:	7899      	ldrb	r1, [r3, #2]
 8009b46:	70d1      	strb	r1, [r2, #3]
									messageParams[4] =*(__IO uint8_t*) (temp32
 8009b48:	78db      	ldrb	r3, [r3, #3]
 8009b4a:	7113      	strb	r3, [r2, #4]
									SendMessageToModule(src,
 8009b4c:	2209      	movs	r2, #9
 8009b4e:	211f      	movs	r1, #31
 8009b50:	9804      	ldr	r0, [sp, #16]
 8009b52:	f7fe fed3 	bl	80088fc <SendMessageToModule>
										break;
 8009b56:	2300      	movs	r3, #0
 8009b58:	4699      	mov	r9, r3
 8009b5a:	f7ff f9c2 	bl	8008ee2 <PxMessagingTask+0x5e>
							}
 8009b5e:	2300      	movs	r3, #0
 8009b60:	4699      	mov	r9, r3
						else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR)// request for a BOS var
 8009b62:	2a02      	cmp	r2, #2
 8009b64:	d801      	bhi.n	8009b6a <PxMessagingTask+0xce6>
 8009b66:	f7ff f9bc 	bl	8008ee2 <PxMessagingTask+0x5e>
							    BOS_var_reg[cMessage[port - 1][shift]
 8009b6a:	3a04      	subs	r2, #4
 8009b6c:	0092      	lsls	r2, r2, #2
 8009b6e:	4b94      	ldr	r3, [pc, #592]	; (8009dc0 <PxMessagingTask+0xf3c>)
 8009b70:	58d1      	ldr	r1, [r2, r3]
							        - REMOTE_BOS_VAR - 1] & 0x000F;// send variable format (lower 4 bits)
 8009b72:	220f      	movs	r2, #15
 8009b74:	400a      	ands	r2, r1
							messageParams[0] =
 8009b76:	4b8e      	ldr	r3, [pc, #568]	; (8009db0 <PxMessagingTask+0xf2c>)
 8009b78:	701a      	strb	r2, [r3, #0]
							if(messageParams[0] == 0) {// Variable does not exist
 8009b7a:	454a      	cmp	r2, r9
 8009b7c:	d106      	bne.n	8009b8c <PxMessagingTask+0xd08>
								SendMessageToModule(src,
 8009b7e:	2201      	movs	r2, #1
 8009b80:	211f      	movs	r1, #31
 8009b82:	9804      	ldr	r0, [sp, #16]
 8009b84:	f7fe feba 	bl	80088fc <SendMessageToModule>
 8009b88:	f7ff f9ab 	bl	8008ee2 <PxMessagingTask+0x5e>
								        - REMOTE_BOS_VAR - 1] >> 16)
 8009b8c:	0c09      	lsrs	r1, r1, #16
								temp32 =
 8009b8e:	2380      	movs	r3, #128	; 0x80
 8009b90:	059b      	lsls	r3, r3, #22
 8009b92:	18cb      	adds	r3, r1, r3
								switch(messageParams[0])// requested format
 8009b94:	3a01      	subs	r2, #1
 8009b96:	b2d0      	uxtb	r0, r2
 8009b98:	2807      	cmp	r0, #7
 8009b9a:	d901      	bls.n	8009ba0 <PxMessagingTask+0xd1c>
 8009b9c:	f000 fc3b 	bl	800a416 <PxMessagingTask+0x1592>
 8009ba0:	b2d2      	uxtb	r2, r2
 8009ba2:	0092      	lsls	r2, r2, #2
 8009ba4:	4887      	ldr	r0, [pc, #540]	; (8009dc4 <PxMessagingTask+0xf40>)
 8009ba6:	5882      	ldr	r2, [r0, r2]
 8009ba8:	4697      	mov	pc, r2
									messageParams[1] =*(__IO uint8_t*) temp32;
 8009baa:	781a      	ldrb	r2, [r3, #0]
 8009bac:	4b80      	ldr	r3, [pc, #512]	; (8009db0 <PxMessagingTask+0xf2c>)
 8009bae:	705a      	strb	r2, [r3, #1]
									SendMessageToModule(src,
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	211f      	movs	r1, #31
 8009bb4:	9804      	ldr	r0, [sp, #16]
 8009bb6:	f7fe fea1 	bl	80088fc <SendMessageToModule>
										break;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	4699      	mov	r9, r3
 8009bbe:	f7ff f990 	bl	8008ee2 <PxMessagingTask+0x5e>
									messageParams[1] =*(__IO int8_t*) temp32;
 8009bc2:	781a      	ldrb	r2, [r3, #0]
 8009bc4:	4b7a      	ldr	r3, [pc, #488]	; (8009db0 <PxMessagingTask+0xf2c>)
 8009bc6:	705a      	strb	r2, [r3, #1]
									SendMessageToModule(src,
 8009bc8:	2202      	movs	r2, #2
 8009bca:	211f      	movs	r1, #31
 8009bcc:	9804      	ldr	r0, [sp, #16]
 8009bce:	f7fe fe95 	bl	80088fc <SendMessageToModule>
										break;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	4699      	mov	r9, r3
 8009bd6:	f7ff f984 	bl	8008ee2 <PxMessagingTask+0x5e>
									    (uint8_t) ( (*(__IO uint16_t*) temp32)
 8009bda:	8819      	ldrh	r1, [r3, #0]
									messageParams[1] =
 8009bdc:	4a74      	ldr	r2, [pc, #464]	; (8009db0 <PxMessagingTask+0xf2c>)
 8009bde:	7051      	strb	r1, [r2, #1]
									    (uint8_t) ( (*(__IO uint16_t*) temp32)
 8009be0:	881b      	ldrh	r3, [r3, #0]
 8009be2:	0a1b      	lsrs	r3, r3, #8
									messageParams[2] =
 8009be4:	7093      	strb	r3, [r2, #2]
									SendMessageToModule(src,
 8009be6:	2203      	movs	r2, #3
 8009be8:	211f      	movs	r1, #31
 8009bea:	9804      	ldr	r0, [sp, #16]
 8009bec:	f7fe fe86 	bl	80088fc <SendMessageToModule>
										break;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	4699      	mov	r9, r3
 8009bf4:	f7ff f975 	bl	8008ee2 <PxMessagingTask+0x5e>
									    (uint8_t) ( (*(__IO int16_t*) temp32)
 8009bf8:	8819      	ldrh	r1, [r3, #0]
									messageParams[1] =
 8009bfa:	4a6d      	ldr	r2, [pc, #436]	; (8009db0 <PxMessagingTask+0xf2c>)
 8009bfc:	7051      	strb	r1, [r2, #1]
									    (uint8_t) ( (*(__IO int16_t*) temp32)
 8009bfe:	881b      	ldrh	r3, [r3, #0]
 8009c00:	b21b      	sxth	r3, r3
 8009c02:	121b      	asrs	r3, r3, #8
									messageParams[2] =
 8009c04:	7093      	strb	r3, [r2, #2]
									SendMessageToModule(src,
 8009c06:	2203      	movs	r2, #3
 8009c08:	211f      	movs	r1, #31
 8009c0a:	9804      	ldr	r0, [sp, #16]
 8009c0c:	f7fe fe76 	bl	80088fc <SendMessageToModule>
										break;
 8009c10:	2300      	movs	r3, #0
 8009c12:	4699      	mov	r9, r3
 8009c14:	f7ff f965 	bl	8008ee2 <PxMessagingTask+0x5e>
									    (uint8_t) ( (*(__IO uint32_t*) temp32)
 8009c18:	6819      	ldr	r1, [r3, #0]
									messageParams[1] =
 8009c1a:	4a65      	ldr	r2, [pc, #404]	; (8009db0 <PxMessagingTask+0xf2c>)
 8009c1c:	7051      	strb	r1, [r2, #1]
									    (uint8_t) ( (*(__IO uint32_t*) temp32)
 8009c1e:	6819      	ldr	r1, [r3, #0]
									        >> 8);
 8009c20:	0a09      	lsrs	r1, r1, #8
									messageParams[2] =
 8009c22:	7091      	strb	r1, [r2, #2]
									    (uint8_t) ( (*(__IO uint32_t*) temp32)
 8009c24:	6819      	ldr	r1, [r3, #0]
									        >> 16);
 8009c26:	0c09      	lsrs	r1, r1, #16
									messageParams[3] =
 8009c28:	70d1      	strb	r1, [r2, #3]
									    (uint8_t) ( (*(__IO uint32_t*) temp32)
 8009c2a:	681b      	ldr	r3, [r3, #0]
									        >> 24);
 8009c2c:	0e1b      	lsrs	r3, r3, #24
									messageParams[4] =
 8009c2e:	7113      	strb	r3, [r2, #4]
									SendMessageToModule(src,
 8009c30:	2205      	movs	r2, #5
 8009c32:	211f      	movs	r1, #31
 8009c34:	9804      	ldr	r0, [sp, #16]
 8009c36:	f7fe fe61 	bl	80088fc <SendMessageToModule>
										break;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	4699      	mov	r9, r3
 8009c3e:	f7ff f950 	bl	8008ee2 <PxMessagingTask+0x5e>
									    (uint8_t) ( (*(__IO int32_t*) temp32)
 8009c42:	6819      	ldr	r1, [r3, #0]
									messageParams[1] =
 8009c44:	4a5a      	ldr	r2, [pc, #360]	; (8009db0 <PxMessagingTask+0xf2c>)
 8009c46:	7051      	strb	r1, [r2, #1]
									    (uint8_t) ( (*(__IO int32_t*) temp32)
 8009c48:	6819      	ldr	r1, [r3, #0]
									        >> 8);
 8009c4a:	1209      	asrs	r1, r1, #8
									messageParams[2] =
 8009c4c:	7091      	strb	r1, [r2, #2]
									    (uint8_t) ( (*(__IO int32_t*) temp32)
 8009c4e:	6819      	ldr	r1, [r3, #0]
									        >> 16);
 8009c50:	1409      	asrs	r1, r1, #16
									messageParams[3] =
 8009c52:	70d1      	strb	r1, [r2, #3]
									    (uint8_t) ( (*(__IO int32_t*) temp32)
 8009c54:	681b      	ldr	r3, [r3, #0]
									        >> 24);
 8009c56:	161b      	asrs	r3, r3, #24
									messageParams[4] =
 8009c58:	7113      	strb	r3, [r2, #4]
									SendMessageToModule(src,
 8009c5a:	2205      	movs	r2, #5
 8009c5c:	211f      	movs	r1, #31
 8009c5e:	9804      	ldr	r0, [sp, #16]
 8009c60:	f7fe fe4c 	bl	80088fc <SendMessageToModule>
										break;
 8009c64:	2300      	movs	r3, #0
 8009c66:	4699      	mov	r9, r3
 8009c68:	f7ff f93b 	bl	8008ee2 <PxMessagingTask+0x5e>
									messageParams[1] =*(__IO uint8_t*) (temp32
 8009c6c:	781a      	ldrb	r2, [r3, #0]
 8009c6e:	4b50      	ldr	r3, [pc, #320]	; (8009db0 <PxMessagingTask+0xf2c>)
 8009c70:	705a      	strb	r2, [r3, #1]
									    + 1);
 8009c72:	4a55      	ldr	r2, [pc, #340]	; (8009dc8 <PxMessagingTask+0xf44>)
 8009c74:	188a      	adds	r2, r1, r2
									messageParams[2] =*(__IO uint8_t*) (temp32
 8009c76:	7812      	ldrb	r2, [r2, #0]
 8009c78:	709a      	strb	r2, [r3, #2]
									    + 2);
 8009c7a:	4a54      	ldr	r2, [pc, #336]	; (8009dcc <PxMessagingTask+0xf48>)
 8009c7c:	188a      	adds	r2, r1, r2
									messageParams[3] =*(__IO uint8_t*) (temp32
 8009c7e:	7812      	ldrb	r2, [r2, #0]
 8009c80:	70da      	strb	r2, [r3, #3]
									    + 3);// You cannot bitwise floats	
 8009c82:	4a53      	ldr	r2, [pc, #332]	; (8009dd0 <PxMessagingTask+0xf4c>)
 8009c84:	4694      	mov	ip, r2
 8009c86:	4461      	add	r1, ip
									messageParams[4] =*(__IO uint8_t*) (temp32
 8009c88:	780a      	ldrb	r2, [r1, #0]
 8009c8a:	711a      	strb	r2, [r3, #4]
									SendMessageToModule(src,
 8009c8c:	2209      	movs	r2, #9
 8009c8e:	211f      	movs	r1, #31
 8009c90:	9804      	ldr	r0, [sp, #16]
 8009c92:	f7fe fe33 	bl	80088fc <SendMessageToModule>
										break;
 8009c96:	2300      	movs	r3, #0
 8009c98:	4699      	mov	r9, r3
 8009c9a:	f7ff f922 	bl	8008ee2 <PxMessagingTask+0x5e>
						    || remoteBuffer == REMOTE_MODULE_PARAM)// We requested a BOS variable or module param
 8009c9e:	4b4d      	ldr	r3, [pc, #308]	; (8009dd4 <PxMessagingTask+0xf50>)
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	2002      	movs	r0, #2
 8009ca6:	4240      	negs	r0, r0
 8009ca8:	17c1      	asrs	r1, r0, #31
 8009caa:	1812      	adds	r2, r2, r0
 8009cac:	414b      	adcs	r3, r1
						if(remoteBuffer == REMOTE_BOS_VAR
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00b      	beq.n	8009cca <PxMessagingTask+0xe46>
						if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 8009cb2:	4b49      	ldr	r3, [pc, #292]	; (8009dd8 <PxMessagingTask+0xf54>)
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	2b10      	cmp	r3, #16
 8009cb8:	d100      	bne.n	8009cbc <PxMessagingTask+0xe38>
 8009cba:	e3c2      	b.n	800a442 <PxMessagingTask+0x15be>
						responseStatus =BOS_OK;
 8009cbc:	4b46      	ldr	r3, [pc, #280]	; (8009dd8 <PxMessagingTask+0xf54>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	701a      	strb	r2, [r3, #0]
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	4699      	mov	r9, r3
 8009cc6:	f7ff f90c 	bl	8008ee2 <PxMessagingTask+0x5e>
						if(remoteBuffer == REMOTE_BOS_VAR
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d101      	bne.n	8009cd2 <PxMessagingTask+0xe4e>
 8009cce:	2a01      	cmp	r2, #1
 8009cd0:	d8ef      	bhi.n	8009cb2 <PxMessagingTask+0xe2e>
							    (varFormat_t) cMessage[port - 1][shift];
 8009cd2:	2138      	movs	r1, #56	; 0x38
 8009cd4:	4369      	muls	r1, r5
 8009cd6:	4a37      	ldr	r2, [pc, #220]	; (8009db4 <PxMessagingTask+0xf30>)
 8009cd8:	1852      	adds	r2, r2, r1
 8009cda:	5d12      	ldrb	r2, [r2, r4]
							remoteVarFormat =
 8009cdc:	493f      	ldr	r1, [pc, #252]	; (8009ddc <PxMessagingTask+0xf58>)
 8009cde:	700a      	strb	r2, [r1, #0]
							switch(cMessage[port - 1][shift])// Remote format
 8009ce0:	2a08      	cmp	r2, #8
 8009ce2:	d8e6      	bhi.n	8009cb2 <PxMessagingTask+0xe2e>
 8009ce4:	0092      	lsls	r2, r2, #2
 8009ce6:	493e      	ldr	r1, [pc, #248]	; (8009de0 <PxMessagingTask+0xf5c>)
 8009ce8:	588a      	ldr	r2, [r1, r2]
 8009cea:	4697      	mov	pc, r2
								responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 8009cec:	4b3a      	ldr	r3, [pc, #232]	; (8009dd8 <PxMessagingTask+0xf54>)
 8009cee:	2210      	movs	r2, #16
 8009cf0:	701a      	strb	r2, [r3, #0]
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	4699      	mov	r9, r3
 8009cf6:	f7ff f8f4 	bl	8008ee2 <PxMessagingTask+0x5e>
								remoteBuffer =cMessage[port - 1][1 + shift];
 8009cfa:	4a36      	ldr	r2, [pc, #216]	; (8009dd4 <PxMessagingTask+0xf50>)
 8009cfc:	2038      	movs	r0, #56	; 0x38
 8009cfe:	4368      	muls	r0, r5
 8009d00:	492c      	ldr	r1, [pc, #176]	; (8009db4 <PxMessagingTask+0xf30>)
 8009d02:	1809      	adds	r1, r1, r0
 8009d04:	1909      	adds	r1, r1, r4
 8009d06:	784b      	ldrb	r3, [r1, #1]
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	6053      	str	r3, [r2, #4]
									break;
 8009d0e:	e7d0      	b.n	8009cb2 <PxMessagingTask+0xe2e>
								remoteBuffer =(int8_t) cMessage[port - 1][1
 8009d10:	4a30      	ldr	r2, [pc, #192]	; (8009dd4 <PxMessagingTask+0xf50>)
 8009d12:	2038      	movs	r0, #56	; 0x38
 8009d14:	4368      	muls	r0, r5
 8009d16:	4927      	ldr	r1, [pc, #156]	; (8009db4 <PxMessagingTask+0xf30>)
 8009d18:	1809      	adds	r1, r1, r0
 8009d1a:	1909      	adds	r1, r1, r4
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	56cb      	ldrsb	r3, [r1, r3]
 8009d20:	6013      	str	r3, [r2, #0]
 8009d22:	17db      	asrs	r3, r3, #31
 8009d24:	6053      	str	r3, [r2, #4]
									break;
 8009d26:	e7c4      	b.n	8009cb2 <PxMessagingTask+0xe2e>
								remoteBuffer = ((uint16_t) cMessage[port - 1][1
 8009d28:	4a2a      	ldr	r2, [pc, #168]	; (8009dd4 <PxMessagingTask+0xf50>)
								    + ((uint16_t) cMessage[port - 1][2
 8009d2a:	2038      	movs	r0, #56	; 0x38
 8009d2c:	4368      	muls	r0, r5
 8009d2e:	4921      	ldr	r1, [pc, #132]	; (8009db4 <PxMessagingTask+0xf30>)
 8009d30:	1809      	adds	r1, r1, r0
 8009d32:	1909      	adds	r1, r1, r4
 8009d34:	788b      	ldrb	r3, [r1, #2]
								        + shift] << 8);
 8009d36:	021b      	lsls	r3, r3, #8
								    + shift] << 0)
 8009d38:	7849      	ldrb	r1, [r1, #1]
								    + ((uint16_t) cMessage[port - 1][2
 8009d3a:	185b      	adds	r3, r3, r1
 8009d3c:	6013      	str	r3, [r2, #0]
 8009d3e:	17db      	asrs	r3, r3, #31
 8009d40:	6053      	str	r3, [r2, #4]
									break;
 8009d42:	e7b6      	b.n	8009cb2 <PxMessagingTask+0xe2e>
								remoteBuffer = ((int16_t) cMessage[port - 1][1
 8009d44:	4a23      	ldr	r2, [pc, #140]	; (8009dd4 <PxMessagingTask+0xf50>)
								    + ((int16_t) cMessage[port - 1][2
 8009d46:	2038      	movs	r0, #56	; 0x38
 8009d48:	4368      	muls	r0, r5
 8009d4a:	491a      	ldr	r1, [pc, #104]	; (8009db4 <PxMessagingTask+0xf30>)
 8009d4c:	1809      	adds	r1, r1, r0
 8009d4e:	1909      	adds	r1, r1, r4
 8009d50:	788b      	ldrb	r3, [r1, #2]
								        + shift] << 8);
 8009d52:	021b      	lsls	r3, r3, #8
								    + shift] << 0)
 8009d54:	7849      	ldrb	r1, [r1, #1]
								    + ((int16_t) cMessage[port - 1][2
 8009d56:	185b      	adds	r3, r3, r1
 8009d58:	6013      	str	r3, [r2, #0]
 8009d5a:	17db      	asrs	r3, r3, #31
 8009d5c:	6053      	str	r3, [r2, #4]
									break;
 8009d5e:	e7a8      	b.n	8009cb2 <PxMessagingTask+0xe2e>
								remoteBuffer = ((uint32_t) cMessage[port - 1][1
 8009d60:	4a1c      	ldr	r2, [pc, #112]	; (8009dd4 <PxMessagingTask+0xf50>)
								    + ((uint32_t) cMessage[port - 1][2
 8009d62:	2038      	movs	r0, #56	; 0x38
 8009d64:	4368      	muls	r0, r5
 8009d66:	4913      	ldr	r1, [pc, #76]	; (8009db4 <PxMessagingTask+0xf30>)
 8009d68:	1809      	adds	r1, r1, r0
 8009d6a:	1909      	adds	r1, r1, r4
 8009d6c:	788b      	ldrb	r3, [r1, #2]
								        + shift] << 8)
 8009d6e:	021b      	lsls	r3, r3, #8
								    + ((uint32_t) cMessage[port - 1][3
 8009d70:	78c8      	ldrb	r0, [r1, #3]
								        + shift] << 16)
 8009d72:	0400      	lsls	r0, r0, #16
								    + ((uint32_t) cMessage[port - 1][3
 8009d74:	181b      	adds	r3, r3, r0
								    + shift] << 0)
 8009d76:	7848      	ldrb	r0, [r1, #1]
								    + ((uint32_t) cMessage[port - 1][3
 8009d78:	181b      	adds	r3, r3, r0
								    + ((uint32_t) cMessage[port - 1][4
 8009d7a:	7909      	ldrb	r1, [r1, #4]
								        + shift] << 24);
 8009d7c:	0609      	lsls	r1, r1, #24
								    + ((uint32_t) cMessage[port - 1][4
 8009d7e:	185b      	adds	r3, r3, r1
 8009d80:	6013      	str	r3, [r2, #0]
 8009d82:	2300      	movs	r3, #0
 8009d84:	6053      	str	r3, [r2, #4]
									break;
 8009d86:	e794      	b.n	8009cb2 <PxMessagingTask+0xe2e>
								remoteBuffer = ((int32_t) cMessage[port - 1][1
 8009d88:	4a12      	ldr	r2, [pc, #72]	; (8009dd4 <PxMessagingTask+0xf50>)
								    + ((int32_t) cMessage[port - 1][2
 8009d8a:	2038      	movs	r0, #56	; 0x38
 8009d8c:	4368      	muls	r0, r5
 8009d8e:	4909      	ldr	r1, [pc, #36]	; (8009db4 <PxMessagingTask+0xf30>)
 8009d90:	1809      	adds	r1, r1, r0
 8009d92:	1909      	adds	r1, r1, r4
 8009d94:	788b      	ldrb	r3, [r1, #2]
								        + shift] << 8)
 8009d96:	021b      	lsls	r3, r3, #8
								    + shift] << 0)
 8009d98:	7848      	ldrb	r0, [r1, #1]
								    + ((int32_t) cMessage[port - 1][2
 8009d9a:	181b      	adds	r3, r3, r0
								    + ((int32_t) cMessage[port - 1][3
 8009d9c:	78c8      	ldrb	r0, [r1, #3]
								        + shift] << 16)
 8009d9e:	0400      	lsls	r0, r0, #16
								    + ((int32_t) cMessage[port - 1][3
 8009da0:	181b      	adds	r3, r3, r0
								    + ((int32_t) cMessage[port - 1][4
 8009da2:	7909      	ldrb	r1, [r1, #4]
								        + shift] << 24);
 8009da4:	0609      	lsls	r1, r1, #24
								    + ((int32_t) cMessage[port - 1][4
 8009da6:	185b      	adds	r3, r3, r1
 8009da8:	6013      	str	r3, [r2, #0]
 8009daa:	17db      	asrs	r3, r3, #31
 8009dac:	6053      	str	r3, [r2, #4]
									break;
 8009dae:	e780      	b.n	8009cb2 <PxMessagingTask+0xe2e>
 8009db0:	20000f38 	.word	0x20000f38
 8009db4:	20000d08 	.word	0x20000d08
 8009db8:	20000084 	.word	0x20000084
 8009dbc:	08018b04 	.word	0x08018b04
 8009dc0:	20006910 	.word	0x20006910
 8009dc4:	08018b24 	.word	0x08018b24
 8009dc8:	20000001 	.word	0x20000001
 8009dcc:	20000002 	.word	0x20000002
 8009dd0:	20000003 	.word	0x20000003
 8009dd4:	20001108 	.word	0x20001108
 8009dd8:	20001110 	.word	0x20001110
 8009ddc:	20000070 	.word	0x20000070
 8009de0:	08018b44 	.word	0x08018b44
								remoteBuffer = ((uint32_t) cMessage[port - 1][1
 8009de4:	4ad7      	ldr	r2, [pc, #860]	; (800a144 <PxMessagingTask+0x12c0>)
								    + ((uint32_t) cMessage[port - 1][2
 8009de6:	2038      	movs	r0, #56	; 0x38
 8009de8:	4368      	muls	r0, r5
 8009dea:	49d7      	ldr	r1, [pc, #860]	; (800a148 <PxMessagingTask+0x12c4>)
 8009dec:	1809      	adds	r1, r1, r0
 8009dee:	1909      	adds	r1, r1, r4
 8009df0:	788b      	ldrb	r3, [r1, #2]
								        + shift] << 8)
 8009df2:	021b      	lsls	r3, r3, #8
								    + ((uint32_t) cMessage[port - 1][3
 8009df4:	78c8      	ldrb	r0, [r1, #3]
								        + shift] << 16)
 8009df6:	0400      	lsls	r0, r0, #16
								    + ((uint32_t) cMessage[port - 1][3
 8009df8:	181b      	adds	r3, r3, r0
								    + shift] << 0)
 8009dfa:	7848      	ldrb	r0, [r1, #1]
								    + ((uint32_t) cMessage[port - 1][3
 8009dfc:	181b      	adds	r3, r3, r0
								    + ((uint32_t) cMessage[port - 1][4
 8009dfe:	7909      	ldrb	r1, [r1, #4]
								        + shift] << 24);
 8009e00:	0609      	lsls	r1, r1, #24
								    + ((uint32_t) cMessage[port - 1][4
 8009e02:	185b      	adds	r3, r3, r1
 8009e04:	6013      	str	r3, [r2, #0]
 8009e06:	2300      	movs	r3, #0
 8009e08:	6053      	str	r3, [r2, #4]
									break;
 8009e0a:	e752      	b.n	8009cb2 <PxMessagingTask+0xe2e>
						responseStatus =BOS_OK;// Initialize response
 8009e0c:	4bcf      	ldr	r3, [pc, #828]	; (800a14c <PxMessagingTask+0x12c8>)
 8009e0e:	2200      	movs	r2, #0
 8009e10:	701a      	strb	r2, [r3, #0]
						if(cMessage[port - 1][shift])// request for a BOS var
 8009e12:	46a1      	mov	r9, r4
 8009e14:	4bcc      	ldr	r3, [pc, #816]	; (800a148 <PxMessagingTask+0x12c4>)
 8009e16:	199b      	adds	r3, r3, r6
 8009e18:	5d1b      	ldrb	r3, [r3, r4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d100      	bne.n	8009e20 <PxMessagingTask+0xf9c>
 8009e1e:	e10b      	b.n	800a038 <PxMessagingTask+0x11b4>
							if(cMessage[port - 1][shift] <= MAX_BOS_VARS) {
 8009e20:	2b1e      	cmp	r3, #30
 8009e22:	d900      	bls.n	8009e26 <PxMessagingTask+0xfa2>
 8009e24:	e104      	b.n	800a030 <PxMessagingTask+0x11ac>
								    - 1] >> 16) + SRAM_BASE;// Get var memory addres
 8009e26:	1e5c      	subs	r4, r3, #1
								temp32 = (BOS_var_reg[cMessage[port - 1][shift]
 8009e28:	00a2      	lsls	r2, r4, #2
 8009e2a:	4bc9      	ldr	r3, [pc, #804]	; (800a150 <PxMessagingTask+0x12cc>)
 8009e2c:	58d1      	ldr	r1, [r2, r3]
								    - 1] >> 16) + SRAM_BASE;// Get var memory addres
 8009e2e:	0c0b      	lsrs	r3, r1, #16
								temp32 = (BOS_var_reg[cMessage[port - 1][shift]
 8009e30:	2280      	movs	r2, #128	; 0x80
 8009e32:	0592      	lsls	r2, r2, #22
 8009e34:	4694      	mov	ip, r2
 8009e36:	4463      	add	r3, ip
								switch(cMessage[port - 1][1 + shift])// requested format
 8009e38:	464a      	mov	r2, r9
 8009e3a:	1c57      	adds	r7, r2, #1
 8009e3c:	2038      	movs	r0, #56	; 0x38
 8009e3e:	4368      	muls	r0, r5
 8009e40:	4ac1      	ldr	r2, [pc, #772]	; (800a148 <PxMessagingTask+0x12c4>)
 8009e42:	1812      	adds	r2, r2, r0
 8009e44:	5dd2      	ldrb	r2, [r2, r7]
 8009e46:	4693      	mov	fp, r2
 8009e48:	3a01      	subs	r2, #1
 8009e4a:	b2d0      	uxtb	r0, r2
 8009e4c:	2807      	cmp	r0, #7
 8009e4e:	d81b      	bhi.n	8009e88 <PxMessagingTask+0x1004>
 8009e50:	b2d2      	uxtb	r2, r2
 8009e52:	0092      	lsls	r2, r2, #2
 8009e54:	48bf      	ldr	r0, [pc, #764]	; (800a154 <PxMessagingTask+0x12d0>)
 8009e56:	5882      	ldr	r2, [r0, r2]
 8009e58:	4697      	mov	pc, r2
									if( (BOS_var_reg[cMessage[port - 1][shift]
 8009e5a:	070a      	lsls	r2, r1, #28
 8009e5c:	d109      	bne.n	8009e72 <PxMessagingTask+0xfee>
										temp32 =(uint32_t) malloc(
 8009e5e:	2001      	movs	r0, #1
 8009e60:	f007 fbac 	bl	80115bc <malloc>
 8009e64:	1e03      	subs	r3, r0, #0
										if(temp32 != 0) {
 8009e66:	d00c      	beq.n	8009e82 <PxMessagingTask+0xffe>
											    - 1] = ( (temp32 - SRAM_BASE)
 8009e68:	00a4      	lsls	r4, r4, #2
											    << 16)
 8009e6a:	0400      	lsls	r0, r0, #16
											    + cMessage[port - 1][1
 8009e6c:	4458      	add	r0, fp
											    - 1] = ( (temp32 - SRAM_BASE)
 8009e6e:	4ab8      	ldr	r2, [pc, #736]	; (800a150 <PxMessagingTask+0x12cc>)
 8009e70:	50a0      	str	r0, [r4, r2]
									    - 1][2 + shift];
 8009e72:	2138      	movs	r1, #56	; 0x38
 8009e74:	4369      	muls	r1, r5
 8009e76:	4ab4      	ldr	r2, [pc, #720]	; (800a148 <PxMessagingTask+0x12c4>)
 8009e78:	1852      	adds	r2, r2, r1
 8009e7a:	444a      	add	r2, r9
 8009e7c:	7892      	ldrb	r2, [r2, #2]
									*(__IO uint8_t*) temp32 =cMessage[port
 8009e7e:	701a      	strb	r2, [r3, #0]
 8009e80:	e002      	b.n	8009e88 <PxMessagingTask+0x1004>
											responseStatus =
 8009e82:	4bb2      	ldr	r3, [pc, #712]	; (800a14c <PxMessagingTask+0x12c8>)
 8009e84:	2212      	movs	r2, #18
 8009e86:	701a      	strb	r2, [r3, #0]
								if( (BOS_var_reg[cMessage[port - 1][shift] - 1]
 8009e88:	2338      	movs	r3, #56	; 0x38
 8009e8a:	436b      	muls	r3, r5
 8009e8c:	4aae      	ldr	r2, [pc, #696]	; (800a148 <PxMessagingTask+0x12c4>)
 8009e8e:	18d2      	adds	r2, r2, r3
 8009e90:	464b      	mov	r3, r9
 8009e92:	5cd3      	ldrb	r3, [r2, r3]
 8009e94:	3b01      	subs	r3, #1
 8009e96:	0098      	lsls	r0, r3, #2
 8009e98:	49ad      	ldr	r1, [pc, #692]	; (800a150 <PxMessagingTask+0x12cc>)
 8009e9a:	5841      	ldr	r1, [r0, r1]
								    != cMessage[port - 1][1 + shift]) {
 8009e9c:	5dd2      	ldrb	r2, [r2, r7]
								    & 0x000F)
 8009e9e:	200f      	movs	r0, #15
 8009ea0:	4008      	ands	r0, r1
								if( (BOS_var_reg[cMessage[port - 1][shift] - 1]
 8009ea2:	4290      	cmp	r0, r2
 8009ea4:	d009      	beq.n	8009eba <PxMessagingTask+0x1036>
									BOS_var_reg[cMessage[port - 1][shift] - 1] &=
 8009ea6:	009b      	lsls	r3, r3, #2
									        + cMessage[port - 1][1
 8009ea8:	48ab      	ldr	r0, [pc, #684]	; (800a158 <PxMessagingTask+0x12d4>)
 8009eaa:	4684      	mov	ip, r0
 8009eac:	4462      	add	r2, ip
									BOS_var_reg[cMessage[port - 1][shift] - 1] &=
 8009eae:	400a      	ands	r2, r1
 8009eb0:	49a7      	ldr	r1, [pc, #668]	; (800a150 <PxMessagingTask+0x12cc>)
 8009eb2:	505a      	str	r2, [r3, r1]
									responseStatus =
 8009eb4:	4ba5      	ldr	r3, [pc, #660]	; (800a14c <PxMessagingTask+0x12c8>)
 8009eb6:	2214      	movs	r2, #20
 8009eb8:	701a      	strb	r2, [r3, #0]
						if(BOS.response == BOS_RESPONSE_ALL
 8009eba:	4ba8      	ldr	r3, [pc, #672]	; (800a15c <PxMessagingTask+0x12d8>)
						    || BOS.response == BOS_RESPONSE_MSG) {
 8009ebc:	799b      	ldrb	r3, [r3, #6]
 8009ebe:	2240      	movs	r2, #64	; 0x40
 8009ec0:	4393      	bics	r3, r2
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	4691      	mov	r9, r2
 8009ec6:	2b20      	cmp	r3, #32
 8009ec8:	d001      	beq.n	8009ece <PxMessagingTask+0x104a>
 8009eca:	f7ff f80a 	bl	8008ee2 <PxMessagingTask+0x5e>
							messageParams[0] =responseStatus;
 8009ece:	4b9f      	ldr	r3, [pc, #636]	; (800a14c <PxMessagingTask+0x12c8>)
 8009ed0:	781a      	ldrb	r2, [r3, #0]
 8009ed2:	4ba3      	ldr	r3, [pc, #652]	; (800a160 <PxMessagingTask+0x12dc>)
 8009ed4:	701a      	strb	r2, [r3, #0]
							SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	2121      	movs	r1, #33	; 0x21
 8009eda:	9804      	ldr	r0, [sp, #16]
 8009edc:	f7fe fd0e 	bl	80088fc <SendMessageToModule>
 8009ee0:	f7fe ffff 	bl	8008ee2 <PxMessagingTask+0x5e>
									if( (BOS_var_reg[cMessage[port - 1][shift]
 8009ee4:	070a      	lsls	r2, r1, #28
 8009ee6:	d10a      	bne.n	8009efe <PxMessagingTask+0x107a>
										temp32 =(uint32_t) malloc(
 8009ee8:	2001      	movs	r0, #1
 8009eea:	f007 fb67 	bl	80115bc <malloc>
 8009eee:	1e03      	subs	r3, r0, #0
										if(temp32 != 0) {
 8009ef0:	d100      	bne.n	8009ef4 <PxMessagingTask+0x1070>
 8009ef2:	e319      	b.n	800a528 <PxMessagingTask+0x16a4>
											    - 1] = ( (temp32 - SRAM_BASE)
 8009ef4:	00a4      	lsls	r4, r4, #2
											    << 16)
 8009ef6:	0400      	lsls	r0, r0, #16
											    + cMessage[port - 1][1
 8009ef8:	3002      	adds	r0, #2
											    - 1] = ( (temp32 - SRAM_BASE)
 8009efa:	4a95      	ldr	r2, [pc, #596]	; (800a150 <PxMessagingTask+0x12cc>)
 8009efc:	50a0      	str	r0, [r4, r2]
									    (int8_t) cMessage[port - 1][2
 8009efe:	2138      	movs	r1, #56	; 0x38
 8009f00:	4369      	muls	r1, r5
 8009f02:	4a91      	ldr	r2, [pc, #580]	; (800a148 <PxMessagingTask+0x12c4>)
 8009f04:	1852      	adds	r2, r2, r1
 8009f06:	444a      	add	r2, r9
 8009f08:	7892      	ldrb	r2, [r2, #2]
 8009f0a:	b252      	sxtb	r2, r2
									*(__IO int8_t*) temp32 =
 8009f0c:	701a      	strb	r2, [r3, #0]
 8009f0e:	e7bb      	b.n	8009e88 <PxMessagingTask+0x1004>
									if( (BOS_var_reg[cMessage[port - 1][shift]
 8009f10:	070a      	lsls	r2, r1, #28
 8009f12:	d10a      	bne.n	8009f2a <PxMessagingTask+0x10a6>
										temp32 =(uint32_t) malloc(
 8009f14:	2002      	movs	r0, #2
 8009f16:	f007 fb51 	bl	80115bc <malloc>
 8009f1a:	1e03      	subs	r3, r0, #0
										if(temp32 != 0) {
 8009f1c:	d100      	bne.n	8009f20 <PxMessagingTask+0x109c>
 8009f1e:	e303      	b.n	800a528 <PxMessagingTask+0x16a4>
											    - 1] = ( (temp32 - SRAM_BASE)
 8009f20:	00a4      	lsls	r4, r4, #2
											    << 16)
 8009f22:	0400      	lsls	r0, r0, #16
											    + cMessage[port - 1][1
 8009f24:	3003      	adds	r0, #3
											    - 1] = ( (temp32 - SRAM_BASE)
 8009f26:	4a8a      	ldr	r2, [pc, #552]	; (800a150 <PxMessagingTask+0x12cc>)
 8009f28:	50a0      	str	r0, [r4, r2]
									            - 1][3 + shift]
 8009f2a:	2138      	movs	r1, #56	; 0x38
 8009f2c:	4369      	muls	r1, r5
 8009f2e:	4a86      	ldr	r2, [pc, #536]	; (800a148 <PxMessagingTask+0x12c4>)
 8009f30:	1852      	adds	r2, r2, r1
 8009f32:	444a      	add	r2, r9
 8009f34:	78d1      	ldrb	r1, [r2, #3]
									            << 8);
 8009f36:	0209      	lsls	r1, r1, #8
									    ((uint16_t) cMessage[port - 1][2
 8009f38:	7892      	ldrb	r2, [r2, #2]
									        + ((uint16_t) cMessage[port
 8009f3a:	1852      	adds	r2, r2, r1
 8009f3c:	b292      	uxth	r2, r2
									*(__IO uint16_t*) temp32 =
 8009f3e:	801a      	strh	r2, [r3, #0]
 8009f40:	e7a2      	b.n	8009e88 <PxMessagingTask+0x1004>
									if( (BOS_var_reg[cMessage[port - 1][shift]
 8009f42:	070a      	lsls	r2, r1, #28
 8009f44:	d10a      	bne.n	8009f5c <PxMessagingTask+0x10d8>
										temp32 =(uint32_t) malloc(
 8009f46:	2002      	movs	r0, #2
 8009f48:	f007 fb38 	bl	80115bc <malloc>
 8009f4c:	1e03      	subs	r3, r0, #0
										if(temp32 != 0) {
 8009f4e:	d100      	bne.n	8009f52 <PxMessagingTask+0x10ce>
 8009f50:	e2ea      	b.n	800a528 <PxMessagingTask+0x16a4>
											    - 1] = ( (temp32 - SRAM_BASE)
 8009f52:	00a4      	lsls	r4, r4, #2
											    << 16)
 8009f54:	0400      	lsls	r0, r0, #16
											    + cMessage[port - 1][1
 8009f56:	3004      	adds	r0, #4
											    - 1] = ( (temp32 - SRAM_BASE)
 8009f58:	4a7d      	ldr	r2, [pc, #500]	; (800a150 <PxMessagingTask+0x12cc>)
 8009f5a:	50a0      	str	r0, [r4, r2]
									            - 1][3 + shift]
 8009f5c:	2138      	movs	r1, #56	; 0x38
 8009f5e:	4369      	muls	r1, r5
 8009f60:	4a79      	ldr	r2, [pc, #484]	; (800a148 <PxMessagingTask+0x12c4>)
 8009f62:	1852      	adds	r2, r2, r1
 8009f64:	444a      	add	r2, r9
 8009f66:	78d1      	ldrb	r1, [r2, #3]
									            << 8);
 8009f68:	0209      	lsls	r1, r1, #8
									    ((int16_t) cMessage[port - 1][2
 8009f6a:	7892      	ldrb	r2, [r2, #2]
									        + ((int16_t) cMessage[port
 8009f6c:	1852      	adds	r2, r2, r1
 8009f6e:	b212      	sxth	r2, r2
									*(__IO int16_t*) temp32 =
 8009f70:	801a      	strh	r2, [r3, #0]
 8009f72:	e789      	b.n	8009e88 <PxMessagingTask+0x1004>
									if( (BOS_var_reg[cMessage[port - 1][shift]
 8009f74:	070a      	lsls	r2, r1, #28
 8009f76:	d10a      	bne.n	8009f8e <PxMessagingTask+0x110a>
										temp32 =(uint32_t) malloc(
 8009f78:	2004      	movs	r0, #4
 8009f7a:	f007 fb1f 	bl	80115bc <malloc>
 8009f7e:	1e03      	subs	r3, r0, #0
										if(temp32 != 0) {
 8009f80:	d100      	bne.n	8009f84 <PxMessagingTask+0x1100>
 8009f82:	e2d1      	b.n	800a528 <PxMessagingTask+0x16a4>
											    - 1] = ( (temp32 - SRAM_BASE)
 8009f84:	00a4      	lsls	r4, r4, #2
											    << 16)
 8009f86:	0400      	lsls	r0, r0, #16
											    + cMessage[port - 1][1
 8009f88:	3005      	adds	r0, #5
											    - 1] = ( (temp32 - SRAM_BASE)
 8009f8a:	4a71      	ldr	r2, [pc, #452]	; (800a150 <PxMessagingTask+0x12cc>)
 8009f8c:	50a0      	str	r0, [r4, r2]
									            - 1][3 + shift]
 8009f8e:	2238      	movs	r2, #56	; 0x38
 8009f90:	436a      	muls	r2, r5
 8009f92:	496d      	ldr	r1, [pc, #436]	; (800a148 <PxMessagingTask+0x12c4>)
 8009f94:	1889      	adds	r1, r1, r2
 8009f96:	4449      	add	r1, r9
									        + ((uint32_t) cMessage[port
 8009f98:	78ca      	ldrb	r2, [r1, #3]
									            << 8)
 8009f9a:	0212      	lsls	r2, r2, #8
									        + ((uint32_t) cMessage[port
 8009f9c:	7908      	ldrb	r0, [r1, #4]
									            << 16)
 8009f9e:	0400      	lsls	r0, r0, #16
									        + ((uint32_t) cMessage[port
 8009fa0:	1812      	adds	r2, r2, r0
									        + shift] << 0)
 8009fa2:	7888      	ldrb	r0, [r1, #2]
									        + ((uint32_t) cMessage[port
 8009fa4:	1812      	adds	r2, r2, r0
									        + ((uint32_t) cMessage[port
 8009fa6:	7949      	ldrb	r1, [r1, #5]
									            << 24);
 8009fa8:	0609      	lsls	r1, r1, #24
									        + ((uint32_t) cMessage[port
 8009faa:	1852      	adds	r2, r2, r1
									*(__IO uint32_t*) temp32 =
 8009fac:	601a      	str	r2, [r3, #0]
 8009fae:	e76b      	b.n	8009e88 <PxMessagingTask+0x1004>
									if( (BOS_var_reg[cMessage[port - 1][shift]
 8009fb0:	070a      	lsls	r2, r1, #28
 8009fb2:	d10a      	bne.n	8009fca <PxMessagingTask+0x1146>
										temp32 =(uint32_t) malloc(
 8009fb4:	2004      	movs	r0, #4
 8009fb6:	f007 fb01 	bl	80115bc <malloc>
 8009fba:	1e03      	subs	r3, r0, #0
										if(temp32 != 0) {
 8009fbc:	d100      	bne.n	8009fc0 <PxMessagingTask+0x113c>
 8009fbe:	e2b3      	b.n	800a528 <PxMessagingTask+0x16a4>
											    - 1] = ( (temp32 - SRAM_BASE)
 8009fc0:	00a4      	lsls	r4, r4, #2
											    << 16)
 8009fc2:	0400      	lsls	r0, r0, #16
											    + cMessage[port - 1][1
 8009fc4:	3006      	adds	r0, #6
											    - 1] = ( (temp32 - SRAM_BASE)
 8009fc6:	4a62      	ldr	r2, [pc, #392]	; (800a150 <PxMessagingTask+0x12cc>)
 8009fc8:	50a0      	str	r0, [r4, r2]
									            - 1][3 + shift]
 8009fca:	2238      	movs	r2, #56	; 0x38
 8009fcc:	436a      	muls	r2, r5
 8009fce:	495e      	ldr	r1, [pc, #376]	; (800a148 <PxMessagingTask+0x12c4>)
 8009fd0:	1889      	adds	r1, r1, r2
 8009fd2:	4449      	add	r1, r9
									        + ((int32_t) cMessage[port
 8009fd4:	78ca      	ldrb	r2, [r1, #3]
									            << 8)
 8009fd6:	0212      	lsls	r2, r2, #8
									        + shift] << 0)
 8009fd8:	7888      	ldrb	r0, [r1, #2]
									        + ((int32_t) cMessage[port
 8009fda:	1812      	adds	r2, r2, r0
									        + ((int32_t) cMessage[port
 8009fdc:	7908      	ldrb	r0, [r1, #4]
									            << 16)
 8009fde:	0400      	lsls	r0, r0, #16
									        + ((int32_t) cMessage[port
 8009fe0:	1812      	adds	r2, r2, r0
									        + ((int32_t) cMessage[port
 8009fe2:	7949      	ldrb	r1, [r1, #5]
									            << 24);
 8009fe4:	0609      	lsls	r1, r1, #24
									        + ((int32_t) cMessage[port
 8009fe6:	1852      	adds	r2, r2, r1
									*(__IO int32_t*) temp32 =
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	e74d      	b.n	8009e88 <PxMessagingTask+0x1004>
									if( (BOS_var_reg[cMessage[port - 1][shift]
 8009fec:	070a      	lsls	r2, r1, #28
 8009fee:	d10a      	bne.n	800a006 <PxMessagingTask+0x1182>
										temp32 =(uint32_t) malloc(
 8009ff0:	2004      	movs	r0, #4
 8009ff2:	f007 fae3 	bl	80115bc <malloc>
 8009ff6:	1e03      	subs	r3, r0, #0
										if(temp32 != 0) {
 8009ff8:	d100      	bne.n	8009ffc <PxMessagingTask+0x1178>
 8009ffa:	e295      	b.n	800a528 <PxMessagingTask+0x16a4>
											    - 1] = ( (temp32 - SRAM_BASE)
 8009ffc:	00a4      	lsls	r4, r4, #2
											    << 16)
 8009ffe:	0400      	lsls	r0, r0, #16
											    + cMessage[port - 1][1
 800a000:	3007      	adds	r0, #7
											    - 1] = ( (temp32 - SRAM_BASE)
 800a002:	4a53      	ldr	r2, [pc, #332]	; (800a150 <PxMessagingTask+0x12cc>)
 800a004:	50a0      	str	r0, [r4, r2]
										            - 1][3 + shift]
 800a006:	2238      	movs	r2, #56	; 0x38
 800a008:	436a      	muls	r2, r5
 800a00a:	494f      	ldr	r1, [pc, #316]	; (800a148 <PxMessagingTask+0x12c4>)
 800a00c:	1889      	adds	r1, r1, r2
 800a00e:	4449      	add	r1, r9
										        + ((uint32_t) cMessage[port
 800a010:	78ca      	ldrb	r2, [r1, #3]
										            << 8)
 800a012:	0212      	lsls	r2, r2, #8
										        + ((uint32_t) cMessage[port
 800a014:	7908      	ldrb	r0, [r1, #4]
										            << 16)
 800a016:	0400      	lsls	r0, r0, #16
										        + ((uint32_t) cMessage[port
 800a018:	1812      	adds	r2, r2, r0
										        + shift] << 0)
 800a01a:	7888      	ldrb	r0, [r1, #2]
										        + ((uint32_t) cMessage[port
 800a01c:	1812      	adds	r2, r2, r0
										        + ((uint32_t) cMessage[port
 800a01e:	7949      	ldrb	r1, [r1, #5]
										            << 24);
 800a020:	0609      	lsls	r1, r1, #24
										        + ((uint32_t) cMessage[port
 800a022:	1852      	adds	r2, r2, r1
										remoteBuffer =
 800a024:	4947      	ldr	r1, [pc, #284]	; (800a144 <PxMessagingTask+0x12c0>)
 800a026:	600a      	str	r2, [r1, #0]
 800a028:	2000      	movs	r0, #0
 800a02a:	6048      	str	r0, [r1, #4]
										*(float*) temp32 =
 800a02c:	601a      	str	r2, [r3, #0]
 800a02e:	e72b      	b.n	8009e88 <PxMessagingTask+0x1004>
								responseStatus =BOS_ERR_REMOTE_WRITE_INDEX;// BOS var index out of range
 800a030:	4b46      	ldr	r3, [pc, #280]	; (800a14c <PxMessagingTask+0x12c8>)
 800a032:	2213      	movs	r2, #19
 800a034:	701a      	strb	r2, [r3, #0]
 800a036:	e740      	b.n	8009eba <PxMessagingTask+0x1036>
							temp32 = ((uint32_t) cMessage[port - 1][2 + shift]
 800a038:	2238      	movs	r2, #56	; 0x38
 800a03a:	436a      	muls	r2, r5
 800a03c:	4b42      	ldr	r3, [pc, #264]	; (800a148 <PxMessagingTask+0x12c4>)
 800a03e:	189b      	adds	r3, r3, r2
 800a040:	191b      	adds	r3, r3, r4
 800a042:	789c      	ldrb	r4, [r3, #2]
							    << 24)
 800a044:	0624      	lsls	r4, r4, #24
							    + ((uint32_t) cMessage[port - 1][3 + shift]
 800a046:	78da      	ldrb	r2, [r3, #3]
							        << 16)
 800a048:	0412      	lsls	r2, r2, #16
							    + ((uint32_t) cMessage[port - 1][3 + shift]
 800a04a:	18a4      	adds	r4, r4, r2
							    + cMessage[port - 1][5 + shift];
 800a04c:	795a      	ldrb	r2, [r3, #5]
							temp32 = ((uint32_t) cMessage[port - 1][2 + shift]
 800a04e:	18a4      	adds	r4, r4, r2
							    + ((uint32_t) cMessage[port - 1][4 + shift]
 800a050:	791b      	ldrb	r3, [r3, #4]
							        << 8)
 800a052:	021b      	lsls	r3, r3, #8
							temp32 = ((uint32_t) cMessage[port - 1][2 + shift]
 800a054:	18e4      	adds	r4, r4, r3
							    && temp32 < (SRAM_BASE + SRAM_SIZE))// SRAM
 800a056:	23e0      	movs	r3, #224	; 0xe0
 800a058:	061b      	lsls	r3, r3, #24
 800a05a:	18e2      	adds	r2, r4, r3
							if(temp32 >= SRAM_BASE
 800a05c:	4b41      	ldr	r3, [pc, #260]	; (800a164 <PxMessagingTask+0x12e0>)
 800a05e:	429a      	cmp	r2, r3
 800a060:	d900      	bls.n	800a064 <PxMessagingTask+0x11e0>
 800a062:	e083      	b.n	800a16c <PxMessagingTask+0x12e8>
								switch(cMessage[port - 1][1 + shift])// Requested format
 800a064:	2238      	movs	r2, #56	; 0x38
 800a066:	436a      	muls	r2, r5
 800a068:	4b37      	ldr	r3, [pc, #220]	; (800a148 <PxMessagingTask+0x12c4>)
 800a06a:	189b      	adds	r3, r3, r2
 800a06c:	444b      	add	r3, r9
 800a06e:	785b      	ldrb	r3, [r3, #1]
 800a070:	3b01      	subs	r3, #1
 800a072:	b2da      	uxtb	r2, r3
 800a074:	2a07      	cmp	r2, #7
 800a076:	d900      	bls.n	800a07a <PxMessagingTask+0x11f6>
 800a078:	e71f      	b.n	8009eba <PxMessagingTask+0x1036>
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4a3a      	ldr	r2, [pc, #232]	; (800a168 <PxMessagingTask+0x12e4>)
 800a080:	58d3      	ldr	r3, [r2, r3]
 800a082:	469f      	mov	pc, r3
									    cMessage[port - 1][6 + shift];
 800a084:	2238      	movs	r2, #56	; 0x38
 800a086:	436a      	muls	r2, r5
 800a088:	4b2f      	ldr	r3, [pc, #188]	; (800a148 <PxMessagingTask+0x12c4>)
 800a08a:	189b      	adds	r3, r3, r2
 800a08c:	444b      	add	r3, r9
 800a08e:	799b      	ldrb	r3, [r3, #6]
									*(__IO uint8_t*) temp32 =
 800a090:	7023      	strb	r3, [r4, #0]
										break;
 800a092:	e712      	b.n	8009eba <PxMessagingTask+0x1036>
									    (int8_t) cMessage[port - 1][6
 800a094:	2238      	movs	r2, #56	; 0x38
 800a096:	436a      	muls	r2, r5
 800a098:	4b2b      	ldr	r3, [pc, #172]	; (800a148 <PxMessagingTask+0x12c4>)
 800a09a:	189b      	adds	r3, r3, r2
 800a09c:	444b      	add	r3, r9
 800a09e:	799b      	ldrb	r3, [r3, #6]
 800a0a0:	b25b      	sxtb	r3, r3
									*(__IO int8_t*) temp32 =
 800a0a2:	7023      	strb	r3, [r4, #0]
										break;
 800a0a4:	e709      	b.n	8009eba <PxMessagingTask+0x1036>
									            - 1][7 + shift] << 8);
 800a0a6:	2238      	movs	r2, #56	; 0x38
 800a0a8:	436a      	muls	r2, r5
 800a0aa:	4b27      	ldr	r3, [pc, #156]	; (800a148 <PxMessagingTask+0x12c4>)
 800a0ac:	189b      	adds	r3, r3, r2
 800a0ae:	444b      	add	r3, r9
 800a0b0:	79da      	ldrb	r2, [r3, #7]
 800a0b2:	0212      	lsls	r2, r2, #8
									    ((uint16_t) cMessage[port - 1][6
 800a0b4:	799b      	ldrb	r3, [r3, #6]
									        + ((uint16_t) cMessage[port
 800a0b6:	189b      	adds	r3, r3, r2
 800a0b8:	b29b      	uxth	r3, r3
									*(__IO uint16_t*) temp32 =
 800a0ba:	8023      	strh	r3, [r4, #0]
										break;
 800a0bc:	e6fd      	b.n	8009eba <PxMessagingTask+0x1036>
									            - 1][7 + shift] << 8);
 800a0be:	2238      	movs	r2, #56	; 0x38
 800a0c0:	436a      	muls	r2, r5
 800a0c2:	4b21      	ldr	r3, [pc, #132]	; (800a148 <PxMessagingTask+0x12c4>)
 800a0c4:	189b      	adds	r3, r3, r2
 800a0c6:	444b      	add	r3, r9
 800a0c8:	79da      	ldrb	r2, [r3, #7]
 800a0ca:	0212      	lsls	r2, r2, #8
									    ((int16_t) cMessage[port - 1][6
 800a0cc:	799b      	ldrb	r3, [r3, #6]
									        + ((int16_t) cMessage[port
 800a0ce:	189b      	adds	r3, r3, r2
 800a0d0:	b21b      	sxth	r3, r3
									*(__IO int16_t*) temp32 =
 800a0d2:	8023      	strh	r3, [r4, #0]
										break;
 800a0d4:	e6f1      	b.n	8009eba <PxMessagingTask+0x1036>
									            - 1][7 + shift] << 8)
 800a0d6:	2338      	movs	r3, #56	; 0x38
 800a0d8:	436b      	muls	r3, r5
 800a0da:	4a1b      	ldr	r2, [pc, #108]	; (800a148 <PxMessagingTask+0x12c4>)
 800a0dc:	18d2      	adds	r2, r2, r3
 800a0de:	444a      	add	r2, r9
									        + ((uint32_t) cMessage[port
 800a0e0:	79d3      	ldrb	r3, [r2, #7]
									            - 1][7 + shift] << 8)
 800a0e2:	021b      	lsls	r3, r3, #8
									        + ((uint32_t) cMessage[port
 800a0e4:	7a11      	ldrb	r1, [r2, #8]
									            << 16)
 800a0e6:	0409      	lsls	r1, r1, #16
									        + ((uint32_t) cMessage[port
 800a0e8:	185b      	adds	r3, r3, r1
									        + shift] << 0)
 800a0ea:	7991      	ldrb	r1, [r2, #6]
									        + ((uint32_t) cMessage[port
 800a0ec:	185b      	adds	r3, r3, r1
									        + ((uint32_t) cMessage[port
 800a0ee:	7a52      	ldrb	r2, [r2, #9]
									            << 24);
 800a0f0:	0612      	lsls	r2, r2, #24
									        + ((uint32_t) cMessage[port
 800a0f2:	189b      	adds	r3, r3, r2
									*(__IO uint32_t*) temp32 =
 800a0f4:	6023      	str	r3, [r4, #0]
										break;
 800a0f6:	e6e0      	b.n	8009eba <PxMessagingTask+0x1036>
									            - 1][7 + shift] << 8)
 800a0f8:	2338      	movs	r3, #56	; 0x38
 800a0fa:	436b      	muls	r3, r5
 800a0fc:	4a12      	ldr	r2, [pc, #72]	; (800a148 <PxMessagingTask+0x12c4>)
 800a0fe:	18d2      	adds	r2, r2, r3
 800a100:	444a      	add	r2, r9
									        + ((int32_t) cMessage[port
 800a102:	79d3      	ldrb	r3, [r2, #7]
									            - 1][7 + shift] << 8)
 800a104:	021b      	lsls	r3, r3, #8
									        + shift] << 0)
 800a106:	7991      	ldrb	r1, [r2, #6]
									        + ((int32_t) cMessage[port
 800a108:	185b      	adds	r3, r3, r1
									        + ((int32_t) cMessage[port
 800a10a:	7a11      	ldrb	r1, [r2, #8]
									            << 16)
 800a10c:	0409      	lsls	r1, r1, #16
									        + ((int32_t) cMessage[port
 800a10e:	185b      	adds	r3, r3, r1
									        + ((int32_t) cMessage[port
 800a110:	7a52      	ldrb	r2, [r2, #9]
									            << 24);
 800a112:	0612      	lsls	r2, r2, #24
									        + ((int32_t) cMessage[port
 800a114:	189b      	adds	r3, r3, r2
									*(__IO int32_t*) temp32 =
 800a116:	6023      	str	r3, [r4, #0]
										break;
 800a118:	e6cf      	b.n	8009eba <PxMessagingTask+0x1036>
									            - 1][7 + shift] << 8)
 800a11a:	2338      	movs	r3, #56	; 0x38
 800a11c:	436b      	muls	r3, r5
 800a11e:	4a0a      	ldr	r2, [pc, #40]	; (800a148 <PxMessagingTask+0x12c4>)
 800a120:	18d2      	adds	r2, r2, r3
 800a122:	444a      	add	r2, r9
									        + ((uint32_t) cMessage[port
 800a124:	79d3      	ldrb	r3, [r2, #7]
									            - 1][7 + shift] << 8)
 800a126:	021b      	lsls	r3, r3, #8
									        + ((uint32_t) cMessage[port
 800a128:	7a11      	ldrb	r1, [r2, #8]
									            << 16)
 800a12a:	0409      	lsls	r1, r1, #16
									        + ((uint32_t) cMessage[port
 800a12c:	185b      	adds	r3, r3, r1
									        + shift] << 0)
 800a12e:	7991      	ldrb	r1, [r2, #6]
									        + ((uint32_t) cMessage[port
 800a130:	185b      	adds	r3, r3, r1
									        + ((uint32_t) cMessage[port
 800a132:	7a52      	ldrb	r2, [r2, #9]
									            << 24);
 800a134:	0612      	lsls	r2, r2, #24
									        + ((uint32_t) cMessage[port
 800a136:	189b      	adds	r3, r3, r2
									remoteBuffer =
 800a138:	4a02      	ldr	r2, [pc, #8]	; (800a144 <PxMessagingTask+0x12c0>)
 800a13a:	6013      	str	r3, [r2, #0]
 800a13c:	2100      	movs	r1, #0
 800a13e:	6051      	str	r1, [r2, #4]
									*(float*) temp32 =*(float*) &remoteBuffer;
 800a140:	6023      	str	r3, [r4, #0]
										break;
 800a142:	e6ba      	b.n	8009eba <PxMessagingTask+0x1036>
 800a144:	20001108 	.word	0x20001108
 800a148:	20000d08 	.word	0x20000d08
 800a14c:	20001110 	.word	0x20001110
 800a150:	20006910 	.word	0x20006910
 800a154:	08018b68 	.word	0x08018b68
 800a158:	0000fff0 	.word	0x0000fff0
 800a15c:	20006988 	.word	0x20006988
 800a160:	20000f38 	.word	0x20000f38
 800a164:	00007fff 	.word	0x00007fff
 800a168:	08018b88 	.word	0x08018b88
							else if(temp32 >= FLASH_BASE
 800a16c:	4ae3      	ldr	r2, [pc, #908]	; (800a4fc <PxMessagingTask+0x1678>)
 800a16e:	23f8      	movs	r3, #248	; 0xf8
 800a170:	061b      	lsls	r3, r3, #24
 800a172:	18e3      	adds	r3, r4, r3
 800a174:	4293      	cmp	r3, r2
 800a176:	d900      	bls.n	800a17a <PxMessagingTask+0x12f6>
 800a178:	e0a6      	b.n	800a2c8 <PxMessagingTask+0x1444>
								HAL_FLASH_Unlock();
 800a17a:	f005 fa25 	bl	800f5c8 <HAL_FLASH_Unlock>
								if(code == CODE_WRITE_REMOTE_FORCE) {
 800a17e:	2f22      	cmp	r7, #34	; 0x22
 800a180:	d111      	bne.n	800a1a6 <PxMessagingTask+0x1322>
									erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800a182:	2300      	movs	r3, #0
 800a184:	9313      	str	r3, [sp, #76]	; 0x4c
									erase.PageAddress =temp32;
 800a186:	9414      	str	r4, [sp, #80]	; 0x50
									erase.NbPages =1;
 800a188:	3301      	adds	r3, #1
 800a18a:	9315      	str	r3, [sp, #84]	; 0x54
									status =HAL_FLASHEx_Erase(&erase,
 800a18c:	a912      	add	r1, sp, #72	; 0x48
 800a18e:	a813      	add	r0, sp, #76	; 0x4c
 800a190:	f005 faee 	bl	800f770 <HAL_FLASHEx_Erase>
 800a194:	900a      	str	r0, [sp, #40]	; 0x28
									if(status != HAL_OK
 800a196:	2800      	cmp	r0, #0
 800a198:	d102      	bne.n	800a1a0 <PxMessagingTask+0x131c>
									    || eraseError != 0xFFFFFFFF)
 800a19a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a19c:	3301      	adds	r3, #1
 800a19e:	d002      	beq.n	800a1a6 <PxMessagingTask+0x1322>
									responseStatus =
 800a1a0:	4bd7      	ldr	r3, [pc, #860]	; (800a500 <PxMessagingTask+0x167c>)
 800a1a2:	2216      	movs	r2, #22
 800a1a4:	701a      	strb	r2, [r3, #0]
								if(responseStatus == BOS_OK) {
 800a1a6:	4bd6      	ldr	r3, [pc, #856]	; (800a500 <PxMessagingTask+0x167c>)
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d116      	bne.n	800a1dc <PxMessagingTask+0x1358>
									switch(cMessage[port - 1][1 + shift])// Requested format
 800a1ae:	2238      	movs	r2, #56	; 0x38
 800a1b0:	436a      	muls	r2, r5
 800a1b2:	4bd4      	ldr	r3, [pc, #848]	; (800a504 <PxMessagingTask+0x1680>)
 800a1b4:	189b      	adds	r3, r3, r2
 800a1b6:	444b      	add	r3, r9
 800a1b8:	785b      	ldrb	r3, [r3, #1]
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	b2da      	uxtb	r2, r3
 800a1be:	2a07      	cmp	r2, #7
 800a1c0:	d80c      	bhi.n	800a1dc <PxMessagingTask+0x1358>
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	4ad0      	ldr	r2, [pc, #832]	; (800a508 <PxMessagingTask+0x1684>)
 800a1c8:	58d3      	ldr	r3, [r2, r3]
 800a1ca:	469f      	mov	pc, r3
										if(*(__IO uint16_t*) temp32
 800a1cc:	8823      	ldrh	r3, [r4, #0]
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	4ace      	ldr	r2, [pc, #824]	; (800a50c <PxMessagingTask+0x1688>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d00c      	beq.n	800a1f0 <PxMessagingTask+0x136c>
											responseStatus =
 800a1d6:	4bca      	ldr	r3, [pc, #808]	; (800a500 <PxMessagingTask+0x167c>)
 800a1d8:	2216      	movs	r2, #22
 800a1da:	701a      	strb	r2, [r3, #0]
								HAL_FLASH_Lock();
 800a1dc:	f005 fa06 	bl	800f5ec <HAL_FLASH_Lock>
								if(status != HAL_OK)
 800a1e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d100      	bne.n	800a1e8 <PxMessagingTask+0x1364>
 800a1e6:	e668      	b.n	8009eba <PxMessagingTask+0x1036>
								responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800a1e8:	4bc5      	ldr	r3, [pc, #788]	; (800a500 <PxMessagingTask+0x167c>)
 800a1ea:	2216      	movs	r2, #22
 800a1ec:	701a      	strb	r2, [r3, #0]
 800a1ee:	e664      	b.n	8009eba <PxMessagingTask+0x1036>
											remoteBuffer =cMessage[port - 1][6
 800a1f0:	2238      	movs	r2, #56	; 0x38
 800a1f2:	436a      	muls	r2, r5
 800a1f4:	4bc3      	ldr	r3, [pc, #780]	; (800a504 <PxMessagingTask+0x1680>)
 800a1f6:	189b      	adds	r3, r3, r2
 800a1f8:	444b      	add	r3, r9
 800a1fa:	799a      	ldrb	r2, [r3, #6]
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	49c4      	ldr	r1, [pc, #784]	; (800a510 <PxMessagingTask+0x168c>)
 800a200:	600a      	str	r2, [r1, #0]
 800a202:	604b      	str	r3, [r1, #4]
											status =HAL_FLASH_Program(
 800a204:	0021      	movs	r1, r4
 800a206:	2001      	movs	r0, #1
 800a208:	f005 fa28 	bl	800f65c <HAL_FLASH_Program>
 800a20c:	900a      	str	r0, [sp, #40]	; 0x28
											break;
 800a20e:	e7e5      	b.n	800a1dc <PxMessagingTask+0x1358>
										if(*(__IO uint16_t*) temp32
 800a210:	8823      	ldrh	r3, [r4, #0]
 800a212:	b29b      	uxth	r3, r3
 800a214:	4abd      	ldr	r2, [pc, #756]	; (800a50c <PxMessagingTask+0x1688>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d003      	beq.n	800a222 <PxMessagingTask+0x139e>
											responseStatus =
 800a21a:	4bb9      	ldr	r3, [pc, #740]	; (800a500 <PxMessagingTask+0x167c>)
 800a21c:	2216      	movs	r2, #22
 800a21e:	701a      	strb	r2, [r3, #0]
											break;
 800a220:	e7dc      	b.n	800a1dc <PxMessagingTask+0x1358>
											            - 1][7
 800a222:	2238      	movs	r2, #56	; 0x38
 800a224:	436a      	muls	r2, r5
 800a226:	4bb7      	ldr	r3, [pc, #732]	; (800a504 <PxMessagingTask+0x1680>)
 800a228:	189b      	adds	r3, r3, r2
 800a22a:	444b      	add	r3, r9
											        + ((uint16_t) cMessage[port
 800a22c:	79da      	ldrb	r2, [r3, #7]
											            << 8);
 800a22e:	0212      	lsls	r2, r2, #8
											        - 1][6 + shift] << 0)
 800a230:	799b      	ldrb	r3, [r3, #6]
											        + ((uint16_t) cMessage[port
 800a232:	18d2      	adds	r2, r2, r3
 800a234:	17d3      	asrs	r3, r2, #31
											remoteBuffer =
 800a236:	49b6      	ldr	r1, [pc, #728]	; (800a510 <PxMessagingTask+0x168c>)
 800a238:	600a      	str	r2, [r1, #0]
 800a23a:	604b      	str	r3, [r1, #4]
											status =HAL_FLASH_Program(
 800a23c:	0021      	movs	r1, r4
 800a23e:	2001      	movs	r0, #1
 800a240:	f005 fa0c 	bl	800f65c <HAL_FLASH_Program>
 800a244:	900a      	str	r0, [sp, #40]	; 0x28
											break;
 800a246:	e7c9      	b.n	800a1dc <PxMessagingTask+0x1358>
										if(*(__IO uint32_t*) temp32
 800a248:	6823      	ldr	r3, [r4, #0]
 800a24a:	3301      	adds	r3, #1
 800a24c:	d003      	beq.n	800a256 <PxMessagingTask+0x13d2>
											responseStatus =
 800a24e:	4bac      	ldr	r3, [pc, #688]	; (800a500 <PxMessagingTask+0x167c>)
 800a250:	2216      	movs	r2, #22
 800a252:	701a      	strb	r2, [r3, #0]
											break;
 800a254:	e7c2      	b.n	800a1dc <PxMessagingTask+0x1358>
											            - 1][7
 800a256:	2238      	movs	r2, #56	; 0x38
 800a258:	436a      	muls	r2, r5
 800a25a:	4baa      	ldr	r3, [pc, #680]	; (800a504 <PxMessagingTask+0x1680>)
 800a25c:	189b      	adds	r3, r3, r2
 800a25e:	444b      	add	r3, r9
											        + ((uint32_t) cMessage[port
 800a260:	79da      	ldrb	r2, [r3, #7]
											            << 8)
 800a262:	0212      	lsls	r2, r2, #8
											        + ((uint32_t) cMessage[port
 800a264:	7a19      	ldrb	r1, [r3, #8]
											            << 16)
 800a266:	0409      	lsls	r1, r1, #16
											        + ((uint32_t) cMessage[port
 800a268:	1852      	adds	r2, r2, r1
											        - 1][6 + shift] << 0)
 800a26a:	7999      	ldrb	r1, [r3, #6]
											        + ((uint32_t) cMessage[port
 800a26c:	1852      	adds	r2, r2, r1
											        + ((uint32_t) cMessage[port
 800a26e:	7a5b      	ldrb	r3, [r3, #9]
											            << 24);
 800a270:	061b      	lsls	r3, r3, #24
											        + ((uint32_t) cMessage[port
 800a272:	18d2      	adds	r2, r2, r3
 800a274:	2300      	movs	r3, #0
											remoteBuffer =
 800a276:	49a6      	ldr	r1, [pc, #664]	; (800a510 <PxMessagingTask+0x168c>)
 800a278:	600a      	str	r2, [r1, #0]
 800a27a:	604b      	str	r3, [r1, #4]
											status =HAL_FLASH_Program(
 800a27c:	0021      	movs	r1, r4
 800a27e:	2002      	movs	r0, #2
 800a280:	f005 f9ec 	bl	800f65c <HAL_FLASH_Program>
 800a284:	900a      	str	r0, [sp, #40]	; 0x28
											break;
 800a286:	e7a9      	b.n	800a1dc <PxMessagingTask+0x1358>
										if(*(__IO uint32_t*) temp32
 800a288:	6823      	ldr	r3, [r4, #0]
 800a28a:	3301      	adds	r3, #1
 800a28c:	d003      	beq.n	800a296 <PxMessagingTask+0x1412>
											responseStatus =
 800a28e:	4b9c      	ldr	r3, [pc, #624]	; (800a500 <PxMessagingTask+0x167c>)
 800a290:	2216      	movs	r2, #22
 800a292:	701a      	strb	r2, [r3, #0]
											break;
 800a294:	e7a2      	b.n	800a1dc <PxMessagingTask+0x1358>
											            - 1][7
 800a296:	2238      	movs	r2, #56	; 0x38
 800a298:	436a      	muls	r2, r5
 800a29a:	4b9a      	ldr	r3, [pc, #616]	; (800a504 <PxMessagingTask+0x1680>)
 800a29c:	189b      	adds	r3, r3, r2
 800a29e:	444b      	add	r3, r9
											        + ((uint32_t) cMessage[port
 800a2a0:	79da      	ldrb	r2, [r3, #7]
											            << 8)
 800a2a2:	0212      	lsls	r2, r2, #8
											        + ((uint32_t) cMessage[port
 800a2a4:	7a19      	ldrb	r1, [r3, #8]
											            << 16)
 800a2a6:	0409      	lsls	r1, r1, #16
											        + ((uint32_t) cMessage[port
 800a2a8:	1852      	adds	r2, r2, r1
											        - 1][6 + shift] << 0)
 800a2aa:	7999      	ldrb	r1, [r3, #6]
											        + ((uint32_t) cMessage[port
 800a2ac:	1852      	adds	r2, r2, r1
											        + ((uint32_t) cMessage[port
 800a2ae:	7a5b      	ldrb	r3, [r3, #9]
											            << 24);
 800a2b0:	061b      	lsls	r3, r3, #24
											        + ((uint32_t) cMessage[port
 800a2b2:	18d2      	adds	r2, r2, r3
 800a2b4:	2300      	movs	r3, #0
											remoteBuffer =
 800a2b6:	4996      	ldr	r1, [pc, #600]	; (800a510 <PxMessagingTask+0x168c>)
 800a2b8:	600a      	str	r2, [r1, #0]
 800a2ba:	604b      	str	r3, [r1, #4]
											status =HAL_FLASH_Program(
 800a2bc:	0021      	movs	r1, r4
 800a2be:	2003      	movs	r0, #3
 800a2c0:	f005 f9cc 	bl	800f65c <HAL_FLASH_Program>
 800a2c4:	900a      	str	r0, [sp, #40]	; 0x28
											break;
 800a2c6:	e789      	b.n	800a1dc <PxMessagingTask+0x1358>
							responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800a2c8:	4b8d      	ldr	r3, [pc, #564]	; (800a500 <PxMessagingTask+0x167c>)
 800a2ca:	2215      	movs	r2, #21
 800a2cc:	701a      	strb	r2, [r3, #0]
 800a2ce:	e5f4      	b.n	8009eba <PxMessagingTask+0x1036>
						responseStatus =(BOS_Status) cMessage[port - 1][shift];
 800a2d0:	4b8c      	ldr	r3, [pc, #560]	; (800a504 <PxMessagingTask+0x1680>)
 800a2d2:	199b      	adds	r3, r3, r6
 800a2d4:	5d1a      	ldrb	r2, [r3, r4]
 800a2d6:	4b8a      	ldr	r3, [pc, #552]	; (800a500 <PxMessagingTask+0x167c>)
 800a2d8:	701a      	strb	r2, [r3, #0]
							break;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	4699      	mov	r9, r3
 800a2de:	f7fe fe00 	bl	8008ee2 <PxMessagingTask+0x5e>
						writePxMutex(cMessage[port - 1][shift],
 800a2e2:	9a06      	ldr	r2, [sp, #24]
 800a2e4:	3a01      	subs	r2, #1
 800a2e6:	b292      	uxth	r2, r2
						    (char*) &cMessage[port - 1][shift + 1],
 800a2e8:	1c61      	adds	r1, r4, #1
 800a2ea:	4451      	add	r1, sl
 800a2ec:	4b85      	ldr	r3, [pc, #532]	; (800a504 <PxMessagingTask+0x1680>)
 800a2ee:	18c9      	adds	r1, r1, r3
						writePxMutex(cMessage[port - 1][shift],
 800a2f0:	199b      	adds	r3, r3, r6
 800a2f2:	5d18      	ldrb	r0, [r3, r4]
 800a2f4:	230a      	movs	r3, #10
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	f002 f95c 	bl	800c5b4 <writePxMutex>
							break;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	4699      	mov	r9, r3
 800a300:	f7fe fdef 	bl	8008ee2 <PxMessagingTask+0x5e>
						switch(cMessage[port - 1][0 + shift]){
 800a304:	4a7f      	ldr	r2, [pc, #508]	; (800a504 <PxMessagingTask+0x1680>)
 800a306:	1992      	adds	r2, r2, r6
 800a308:	5d12      	ldrb	r2, [r2, r4]
 800a30a:	2a01      	cmp	r2, #1
 800a30c:	d041      	beq.n	800a392 <PxMessagingTask+0x150e>
 800a30e:	2a00      	cmp	r2, #0
 800a310:	d017      	beq.n	800a342 <PxMessagingTask+0x14be>
 800a312:	2a02      	cmp	r2, #2
 800a314:	d065      	beq.n	800a3e2 <PxMessagingTask+0x155e>
						result =(BOS_Status) User_MessagingParser(code,port,
 800a316:	9400      	str	r4, [sp, #0]
 800a318:	465b      	mov	r3, fp
 800a31a:	9a04      	ldr	r2, [sp, #16]
 800a31c:	9908      	ldr	r1, [sp, #32]
 800a31e:	0038      	movs	r0, r7
 800a320:	f7fe fdae 	bl	8008e80 <User_MessagingParser>
 800a324:	4681      	mov	r9, r0
						if(result == BOS_ERR_UnknownMessage) {
 800a326:	2801      	cmp	r0, #1
 800a328:	d001      	beq.n	800a32e <PxMessagingTask+0x14aa>
 800a32a:	f7fe fdda 	bl	8008ee2 <PxMessagingTask+0x5e>
							result =(BOS_Status) Module_MessagingTask(code,
 800a32e:	9400      	str	r4, [sp, #0]
 800a330:	465b      	mov	r3, fp
 800a332:	9a04      	ldr	r2, [sp, #16]
 800a334:	9908      	ldr	r1, [sp, #32]
 800a336:	0038      	movs	r0, r7
 800a338:	f000 fa93 	bl	800a862 <Module_MessagingTask>
 800a33c:	4681      	mov	r9, r0
 800a33e:	f7fe fdcb 	bl	8008ed8 <PxMessagingTask+0x54>
							        + ((uint32_t) cMessage[port - 1][2
 800a342:	2138      	movs	r1, #56	; 0x38
 800a344:	4369      	muls	r1, r5
 800a346:	4a6f      	ldr	r2, [pc, #444]	; (800a504 <PxMessagingTask+0x1680>)
 800a348:	1852      	adds	r2, r2, r1
 800a34a:	1913      	adds	r3, r2, r4
 800a34c:	789a      	ldrb	r2, [r3, #2]
							            + shift] << 8)
 800a34e:	0212      	lsls	r2, r2, #8
							        + ((uint32_t) cMessage[port - 1][3
 800a350:	78d9      	ldrb	r1, [r3, #3]
							            + shift] << 16)
 800a352:	0409      	lsls	r1, r1, #16
							        + ((uint32_t) cMessage[port - 1][3
 800a354:	1852      	adds	r2, r2, r1
							        << 0)
 800a356:	7859      	ldrb	r1, [r3, #1]
							        + ((uint32_t) cMessage[port - 1][3
 800a358:	1852      	adds	r2, r2, r1
							        + ((uint32_t) cMessage[port - 1][4
 800a35a:	7919      	ldrb	r1, [r3, #4]
							            + shift] << 24);
 800a35c:	0609      	lsls	r1, r1, #24
							        + ((uint32_t) cMessage[port - 1][4
 800a35e:	1852      	adds	r2, r2, r1
							MBmessageParams[0] =
 800a360:	496c      	ldr	r1, [pc, #432]	; (800a514 <PxMessagingTask+0x1690>)
 800a362:	600a      	str	r2, [r1, #0]
							        + ((uint32_t) cMessage[port - 1][6
 800a364:	799a      	ldrb	r2, [r3, #6]
							            + shift] << 8)
 800a366:	0212      	lsls	r2, r2, #8
							        + ((uint32_t) cMessage[port - 1][7
 800a368:	79d8      	ldrb	r0, [r3, #7]
							            + shift] << 16)
 800a36a:	0400      	lsls	r0, r0, #16
							        + ((uint32_t) cMessage[port - 1][7
 800a36c:	1812      	adds	r2, r2, r0
							        << 0)
 800a36e:	7958      	ldrb	r0, [r3, #5]
							        + ((uint32_t) cMessage[port - 1][7
 800a370:	1812      	adds	r2, r2, r0
							        + ((uint32_t) cMessage[port - 1][8
 800a372:	7a18      	ldrb	r0, [r3, #8]
							            + shift] << 24);
 800a374:	0600      	lsls	r0, r0, #24
							        + ((uint32_t) cMessage[port - 1][8
 800a376:	1812      	adds	r2, r2, r0
							MBmessageParams[1] =
 800a378:	604a      	str	r2, [r1, #4]
							        + ((uint32_t) cMessage[port - 1][10
 800a37a:	7a9a      	ldrb	r2, [r3, #10]
							            + shift] << 8)
 800a37c:	0212      	lsls	r2, r2, #8
							        + ((uint32_t) cMessage[port - 1][11
 800a37e:	7ad8      	ldrb	r0, [r3, #11]
							            + shift] << 16)
 800a380:	0400      	lsls	r0, r0, #16
							        + ((uint32_t) cMessage[port - 1][11
 800a382:	1812      	adds	r2, r2, r0
							        << 0)
 800a384:	7a58      	ldrb	r0, [r3, #9]
							        + ((uint32_t) cMessage[port - 1][11
 800a386:	1812      	adds	r2, r2, r0
							        + ((uint32_t) cMessage[port - 1][12
 800a388:	7b1b      	ldrb	r3, [r3, #12]
							            + shift] << 24);
 800a38a:	061b      	lsls	r3, r3, #24
							        + ((uint32_t) cMessage[port - 1][12
 800a38c:	18d3      	adds	r3, r2, r3
							MBmessageParams[2] =
 800a38e:	608b      	str	r3, [r1, #8]
								break;
 800a390:	e7c1      	b.n	800a316 <PxMessagingTask+0x1492>
							        + ((uint32_t) cMessage[port - 1][2
 800a392:	2238      	movs	r2, #56	; 0x38
 800a394:	436a      	muls	r2, r5
 800a396:	4b5b      	ldr	r3, [pc, #364]	; (800a504 <PxMessagingTask+0x1680>)
 800a398:	189b      	adds	r3, r3, r2
 800a39a:	191b      	adds	r3, r3, r4
 800a39c:	789a      	ldrb	r2, [r3, #2]
							            + shift] << 8)
 800a39e:	0212      	lsls	r2, r2, #8
							        + ((uint32_t) cMessage[port - 1][3
 800a3a0:	78d9      	ldrb	r1, [r3, #3]
							            + shift] << 16)
 800a3a2:	0409      	lsls	r1, r1, #16
							        + ((uint32_t) cMessage[port - 1][3
 800a3a4:	1852      	adds	r2, r2, r1
							        << 0)
 800a3a6:	7859      	ldrb	r1, [r3, #1]
							        + ((uint32_t) cMessage[port - 1][3
 800a3a8:	1852      	adds	r2, r2, r1
							        + ((uint32_t) cMessage[port - 1][4
 800a3aa:	7919      	ldrb	r1, [r3, #4]
							            + shift] << 24);
 800a3ac:	0609      	lsls	r1, r1, #24
							        + ((uint32_t) cMessage[port - 1][4
 800a3ae:	1852      	adds	r2, r2, r1
							MBmessageParams[3] =
 800a3b0:	4958      	ldr	r1, [pc, #352]	; (800a514 <PxMessagingTask+0x1690>)
 800a3b2:	60ca      	str	r2, [r1, #12]
							        + ((uint32_t) cMessage[port - 1][6
 800a3b4:	799a      	ldrb	r2, [r3, #6]
							            + shift] << 8)
 800a3b6:	0212      	lsls	r2, r2, #8
							        + ((uint32_t) cMessage[port - 1][7
 800a3b8:	79d8      	ldrb	r0, [r3, #7]
							            + shift] << 16)
 800a3ba:	0400      	lsls	r0, r0, #16
							        + ((uint32_t) cMessage[port - 1][7
 800a3bc:	1812      	adds	r2, r2, r0
							        << 0)
 800a3be:	7958      	ldrb	r0, [r3, #5]
							        + ((uint32_t) cMessage[port - 1][7
 800a3c0:	1812      	adds	r2, r2, r0
							        + ((uint32_t) cMessage[port - 1][8
 800a3c2:	7a18      	ldrb	r0, [r3, #8]
							            + shift] << 24);
 800a3c4:	0600      	lsls	r0, r0, #24
							        + ((uint32_t) cMessage[port - 1][8
 800a3c6:	1812      	adds	r2, r2, r0
							MBmessageParams[4] =
 800a3c8:	610a      	str	r2, [r1, #16]
							        + ((uint32_t) cMessage[port - 1][10
 800a3ca:	7a9a      	ldrb	r2, [r3, #10]
							            + shift] << 8)
 800a3cc:	0212      	lsls	r2, r2, #8
							        + ((uint32_t) cMessage[port - 1][11
 800a3ce:	7ad8      	ldrb	r0, [r3, #11]
							            + shift] << 16)
 800a3d0:	0400      	lsls	r0, r0, #16
							        + ((uint32_t) cMessage[port - 1][11
 800a3d2:	1812      	adds	r2, r2, r0
							        << 0)
 800a3d4:	7a58      	ldrb	r0, [r3, #9]
							        + ((uint32_t) cMessage[port - 1][11
 800a3d6:	1812      	adds	r2, r2, r0
							        + ((uint32_t) cMessage[port - 1][12
 800a3d8:	7b1b      	ldrb	r3, [r3, #12]
							            + shift] << 24);
 800a3da:	061b      	lsls	r3, r3, #24
							        + ((uint32_t) cMessage[port - 1][12
 800a3dc:	18d3      	adds	r3, r2, r3
							MBmessageParams[5] =
 800a3de:	614b      	str	r3, [r1, #20]
								break;
 800a3e0:	e799      	b.n	800a316 <PxMessagingTask+0x1492>
							        + ((uint32_t) cMessage[port - 1][2
 800a3e2:	2138      	movs	r1, #56	; 0x38
 800a3e4:	4369      	muls	r1, r5
 800a3e6:	4a47      	ldr	r2, [pc, #284]	; (800a504 <PxMessagingTask+0x1680>)
 800a3e8:	1852      	adds	r2, r2, r1
 800a3ea:	1912      	adds	r2, r2, r4
 800a3ec:	7893      	ldrb	r3, [r2, #2]
							            + shift] << 8)
 800a3ee:	021b      	lsls	r3, r3, #8
							        + ((uint32_t) cMessage[port - 1][3
 800a3f0:	78d1      	ldrb	r1, [r2, #3]
							            + shift] << 16)
 800a3f2:	0409      	lsls	r1, r1, #16
							        + ((uint32_t) cMessage[port - 1][3
 800a3f4:	185b      	adds	r3, r3, r1
							        << 0)
 800a3f6:	7851      	ldrb	r1, [r2, #1]
							        + ((uint32_t) cMessage[port - 1][3
 800a3f8:	185b      	adds	r3, r3, r1
							        + ((uint32_t) cMessage[port - 1][4
 800a3fa:	7912      	ldrb	r2, [r2, #4]
							            + shift] << 24);
 800a3fc:	0612      	lsls	r2, r2, #24
							        + ((uint32_t) cMessage[port - 1][4
 800a3fe:	189b      	adds	r3, r3, r2
							MBmessageParams[6] =
 800a400:	4a44      	ldr	r2, [pc, #272]	; (800a514 <PxMessagingTask+0x1690>)
 800a402:	6193      	str	r3, [r2, #24]
 800a404:	e787      	b.n	800a316 <PxMessagingTask+0x1492>
							switch(cMessage[port - 1][1 + shift])// requested format
 800a406:	2300      	movs	r3, #0
 800a408:	4699      	mov	r9, r3
 800a40a:	f7fe fd65 	bl	8008ed8 <PxMessagingTask+0x54>
								switch(messageParams[0])// requested format
 800a40e:	2300      	movs	r3, #0
 800a410:	4699      	mov	r9, r3
 800a412:	f7fe fd61 	bl	8008ed8 <PxMessagingTask+0x54>
								switch(messageParams[0])// requested format
 800a416:	2300      	movs	r3, #0
 800a418:	4699      	mov	r9, r3
 800a41a:	f7fe fd5d 	bl	8008ed8 <PxMessagingTask+0x54>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800a41e:	2200      	movs	r2, #0
 800a420:	2100      	movs	r1, #0
 800a422:	9804      	ldr	r0, [sp, #16]
 800a424:	f7fe fa6a 	bl	80088fc <SendMessageToModule>
			result =BOS_OK;
 800a428:	2300      	movs	r3, #0
 800a42a:	4699      	mov	r9, r3
 800a42c:	f7fe fd59 	bl	8008ee2 <PxMessagingTask+0x5e>
					switch(code){
 800a430:	2300      	movs	r3, #0
 800a432:	4699      	mov	r9, r3
 800a434:	f7fe fd55 	bl	8008ee2 <PxMessagingTask+0x5e>
 800a438:	9205      	str	r2, [sp, #20]
 800a43a:	2300      	movs	r3, #0
 800a43c:	4699      	mov	r9, r3
 800a43e:	f7fe fd50 	bl	8008ee2 <PxMessagingTask+0x5e>
 800a442:	2300      	movs	r3, #0
 800a444:	4699      	mov	r9, r3
 800a446:	f7fe fd4c 	bl	8008ee2 <PxMessagingTask+0x5e>
			    || (dst && (dst < BOS_MULTICAST) && (dst != myID)
 800a44a:	455b      	cmp	r3, fp
 800a44c:	d003      	beq.n	800a456 <PxMessagingTask+0x15d2>
			        && (myID == 1) && (code != CODE_MODULE_ID))) {
 800a44e:	2f10      	cmp	r7, #16
 800a450:	d001      	beq.n	800a456 <PxMessagingTask+0x15d2>
 800a452:	f7fe fd97 	bl	8008f84 <PxMessagingTask+0x100>
				if(dst == BOS_BROADCAST
 800a456:	465b      	mov	r3, fp
 800a458:	2bff      	cmp	r3, #255	; 0xff
 800a45a:	d101      	bne.n	800a460 <PxMessagingTask+0x15dc>
 800a45c:	f7fe fdb3 	bl	8008fc6 <PxMessagingTask+0x142>
				if(dst == BOS_MULTICAST
 800a460:	2bfe      	cmp	r3, #254	; 0xfe
 800a462:	d001      	beq.n	800a468 <PxMessagingTask+0x15e4>
 800a464:	f7fe fdba 	bl	8008fdc <PxMessagingTask+0x158>
				    && cMessage[port - 1][messageLength[port - 1] - 1]
 800a468:	4b26      	ldr	r3, [pc, #152]	; (800a504 <PxMessagingTask+0x1680>)
 800a46a:	199b      	adds	r3, r3, r6
 800a46c:	1859      	adds	r1, r3, r1
 800a46e:	3901      	subs	r1, #1
 800a470:	780b      	ldrb	r3, [r1, #0]
				        != bcastLastID) {
 800a472:	4a29      	ldr	r2, [pc, #164]	; (800a518 <PxMessagingTask+0x1694>)
				    && cMessage[port - 1][messageLength[port - 1] - 1]
 800a474:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 800a476:	2103      	movs	r1, #3
 800a478:	4689      	mov	r9, r1
				    && cMessage[port - 1][messageLength[port - 1] - 1]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d101      	bne.n	800a482 <PxMessagingTask+0x15fe>
 800a47e:	f7fe fd2b 	bl	8008ed8 <PxMessagingTask+0x54>
					bcastID =bcastLastID =
 800a482:	4a25      	ldr	r2, [pc, #148]	; (800a518 <PxMessagingTask+0x1694>)
 800a484:	7013      	strb	r3, [r2, #0]
 800a486:	4a25      	ldr	r2, [pc, #148]	; (800a51c <PxMessagingTask+0x1698>)
 800a488:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800a48a:	9908      	ldr	r1, [sp, #32]
 800a48c:	20fe      	movs	r0, #254	; 0xfe
 800a48e:	f7fe f9ed 	bl	800886c <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0;// Reset bcastID location 
 800a492:	4b23      	ldr	r3, [pc, #140]	; (800a520 <PxMessagingTask+0x169c>)
 800a494:	5d59      	ldrb	r1, [r3, r5]
 800a496:	4b1b      	ldr	r3, [pc, #108]	; (800a504 <PxMessagingTask+0x1680>)
 800a498:	199b      	adds	r3, r3, r6
 800a49a:	185a      	adds	r2, r3, r1
 800a49c:	3a01      	subs	r2, #1
 800a49e:	2000      	movs	r0, #0
 800a4a0:	7010      	strb	r0, [r2, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2];// Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800a4a2:	1e8a      	subs	r2, r1, #2
 800a4a4:	5c9b      	ldrb	r3, [r3, r2]
 800a4a6:	9305      	str	r3, [sp, #20]
					for(i =0; i < temp; i++) {
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d049      	beq.n	800a540 <PxMessagingTask+0x16bc>
						        - 2 - temp + i]) {
 800a4ac:	1ad2      	subs	r2, r2, r3
 800a4ae:	4691      	mov	r9, r2
						    == cMessage[port - 1][messageLength[port - 1]
 800a4b0:	4b1c      	ldr	r3, [pc, #112]	; (800a524 <PxMessagingTask+0x16a0>)
 800a4b2:	7818      	ldrb	r0, [r3, #0]
 800a4b4:	4b13      	ldr	r3, [pc, #76]	; (800a504 <PxMessagingTask+0x1680>)
 800a4b6:	199b      	adds	r3, r3, r6
						if(myID
 800a4b8:	5c9b      	ldrb	r3, [r3, r2]
 800a4ba:	4283      	cmp	r3, r0
 800a4bc:	d018      	beq.n	800a4f0 <PxMessagingTask+0x166c>
 800a4be:	4652      	mov	r2, sl
 800a4c0:	1c53      	adds	r3, r2, #1
 800a4c2:	444b      	add	r3, r9
 800a4c4:	4a0f      	ldr	r2, [pc, #60]	; (800a504 <PxMessagingTask+0x1680>)
 800a4c6:	189b      	adds	r3, r3, r2
 800a4c8:	9306      	str	r3, [sp, #24]
 800a4ca:	3201      	adds	r2, #1
 800a4cc:	4452      	add	r2, sl
 800a4ce:	9b05      	ldr	r3, [sp, #20]
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	469c      	mov	ip, r3
 800a4d6:	4462      	add	r2, ip
 800a4d8:	444a      	add	r2, r9
 800a4da:	468c      	mov	ip, r1
 800a4dc:	9b06      	ldr	r3, [sp, #24]
 800a4de:	0011      	movs	r1, r2
					for(i =0; i < temp; i++) {
 800a4e0:	428b      	cmp	r3, r1
 800a4e2:	d02d      	beq.n	800a540 <PxMessagingTask+0x16bc>
 800a4e4:	3301      	adds	r3, #1
						    == cMessage[port - 1][messageLength[port - 1]
 800a4e6:	1e5a      	subs	r2, r3, #1
						if(myID
 800a4e8:	7812      	ldrb	r2, [r2, #0]
 800a4ea:	4282      	cmp	r2, r0
 800a4ec:	d1f8      	bne.n	800a4e0 <PxMessagingTask+0x165c>
 800a4ee:	4661      	mov	r1, ip
				shift +=4;
 800a4f0:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800a4f2:	1b0a      	subs	r2, r1, r4
 800a4f4:	b2d3      	uxtb	r3, r2
 800a4f6:	9306      	str	r3, [sp, #24]
 800a4f8:	f7fe fd7a 	bl	8008ff0 <PxMessagingTask+0x16c>
 800a4fc:	0001ffff 	.word	0x0001ffff
 800a500:	20001110 	.word	0x20001110
 800a504:	20000d08 	.word	0x20000d08
 800a508:	08018ba8 	.word	0x08018ba8
 800a50c:	0000ffff 	.word	0x0000ffff
 800a510:	20001108 	.word	0x20001108
 800a514:	20001590 	.word	0x20001590
 800a518:	200015b6 	.word	0x200015b6
 800a51c:	20000cb4 	.word	0x20000cb4
 800a520:	20000f30 	.word	0x20000f30
 800a524:	20001076 	.word	0x20001076
								if( (BOS_var_reg[cMessage[port - 1][shift] - 1]
 800a528:	2338      	movs	r3, #56	; 0x38
 800a52a:	436b      	muls	r3, r5
 800a52c:	4a06      	ldr	r2, [pc, #24]	; (800a548 <PxMessagingTask+0x16c4>)
 800a52e:	18d2      	adds	r2, r2, r3
 800a530:	464b      	mov	r3, r9
 800a532:	5cd3      	ldrb	r3, [r2, r3]
 800a534:	3b01      	subs	r3, #1
 800a536:	0098      	lsls	r0, r3, #2
 800a538:	4904      	ldr	r1, [pc, #16]	; (800a54c <PxMessagingTask+0x16c8>)
 800a53a:	5841      	ldr	r1, [r0, r1]
								    != cMessage[port - 1][1 + shift]) {
 800a53c:	5dd2      	ldrb	r2, [r2, r7]
 800a53e:	e4b2      	b.n	8009ea6 <PxMessagingTask+0x1022>
								responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800a540:	2366      	movs	r3, #102	; 0x66
 800a542:	4699      	mov	r9, r3
 800a544:	f7fe fccd 	bl	8008ee2 <PxMessagingTask+0x5e>
 800a548:	20000d08 	.word	0x20000d08
 800a54c:	20006910 	.word	0x20006910

0800a550 <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800a550:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a552:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a554:	2401      	movs	r4, #1
 800a556:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a558:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a55a:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800a55c:	2310      	movs	r3, #16
 800a55e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a560:	2702      	movs	r7, #2
 800a562:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a564:	2680      	movs	r6, #128	; 0x80
 800a566:	0276      	lsls	r6, r6, #9
 800a568:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800a56a:	2380      	movs	r3, #128	; 0x80
 800a56c:	035b      	lsls	r3, r3, #13
 800a56e:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800a570:	2500      	movs	r5, #0
 800a572:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800a574:	a80d      	add	r0, sp, #52	; 0x34
 800a576:	f005 fa57 	bl	800fa28 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800a57a:	2307      	movs	r3, #7
 800a57c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a57e:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a580:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a582:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800a584:	2101      	movs	r1, #1
 800a586:	a809      	add	r0, sp, #36	; 0x24
 800a588:	f005 fd10 	bl	800ffac <HAL_RCC_ClockConfig>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800a58c:	4b1a      	ldr	r3, [pc, #104]	; (800a5f8 <SystemClock_Config+0xa8>)
 800a58e:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800a590:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a592:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a594:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a596:	a802      	add	r0, sp, #8
 800a598:	f005 feb6 	bl	8010308 <HAL_RCCEx_PeriphCLKConfig>
	
	__HAL_RCC_PWR_CLK_ENABLE();
 800a59c:	4d17      	ldr	r5, [pc, #92]	; (800a5fc <SystemClock_Config+0xac>)
 800a59e:	69ea      	ldr	r2, [r5, #28]
 800a5a0:	2180      	movs	r1, #128	; 0x80
 800a5a2:	0549      	lsls	r1, r1, #21
 800a5a4:	430a      	orrs	r2, r1
 800a5a6:	61ea      	str	r2, [r5, #28]
 800a5a8:	69eb      	ldr	r3, [r5, #28]
 800a5aa:	400b      	ands	r3, r1
 800a5ac:	9300      	str	r3, [sp, #0]
 800a5ae:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800a5b0:	f005 fa30 	bl	800fa14 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a5b4:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800a5b6:	23c0      	movs	r3, #192	; 0xc0
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a5bc:	a802      	add	r0, sp, #8
 800a5be:	f005 fea3 	bl	8010308 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800a5c2:	f005 fe7d 	bl	80102c0 <HAL_RCC_GetHCLKFreq>
 800a5c6:	21fa      	movs	r1, #250	; 0xfa
 800a5c8:	0089      	lsls	r1, r1, #2
 800a5ca:	f7f5 fdc1 	bl	8000150 <__udivsi3>
 800a5ce:	f004 f9ad 	bl	800e92c <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800a5d2:	2004      	movs	r0, #4
 800a5d4:	f004 f9c6 	bl	800e964 <HAL_SYSTICK_CLKSourceConfig>
	

	__SYSCFG_CLK_ENABLE();
 800a5d8:	69ab      	ldr	r3, [r5, #24]
 800a5da:	4323      	orrs	r3, r4
 800a5dc:	61ab      	str	r3, [r5, #24]
 800a5de:	69ab      	ldr	r3, [r5, #24]
 800a5e0:	401c      	ands	r4, r3
 800a5e2:	9401      	str	r4, [sp, #4]
 800a5e4:	9b01      	ldr	r3, [sp, #4]

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a5e6:	2001      	movs	r0, #1
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	4240      	negs	r0, r0
 800a5ee:	f004 f955 	bl	800e89c <HAL_NVIC_SetPriority>
	
}
 800a5f2:	b01b      	add	sp, #108	; 0x6c
 800a5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5f6:	46c0      	nop			; (mov r8, r8)
 800a5f8:	00040003 	.word	0x00040003
 800a5fc:	40021000 	.word	0x40021000

0800a600 <SaveToRO>:
/* --- Save array topology and Command Snippets in Flash RO --- 
*/
uint8_t SaveToRO(void)
{
 800a600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a602:	46de      	mov	lr, fp
 800a604:	4657      	mov	r7, sl
 800a606:	464e      	mov	r6, r9
 800a608:	4645      	mov	r5, r8
 800a60a:	b5e0      	push	{r5, r6, r7, lr}
 800a60c:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800a60e:	2215      	movs	r2, #21
 800a610:	2100      	movs	r1, #0
 800a612:	a802      	add	r0, sp, #8
 800a614:	f007 fa28 	bl	8011a68 <memset>
	
	HAL_FLASH_Unlock();
 800a618:	f004 ffd6 	bl	800f5c8 <HAL_FLASH_Unlock>
	
	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 800a61c:	4872      	ldr	r0, [pc, #456]	; (800a7e8 <SaveToRO+0x1e8>)
 800a61e:	f005 f895 	bl	800f74c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a622:	4872      	ldr	r0, [pc, #456]	; (800a7ec <SaveToRO+0x1ec>)
 800a624:	f004 ffec 	bl	800f600 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 800a628:	2800      	cmp	r0, #0
 800a62a:	d112      	bne.n	800a652 <SaveToRO+0x52>
		return pFlash.ErrorCode;
	} else {			
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a62c:	4a70      	ldr	r2, [pc, #448]	; (800a7f0 <SaveToRO+0x1f0>)
 800a62e:	6913      	ldr	r3, [r2, #16]
 800a630:	2102      	movs	r1, #2
 800a632:	438b      	bics	r3, r1
 800a634:	6113      	str	r3, [r2, #16]
	}	
	
	/* Save number of modules and myID */
	if (myID)
 800a636:	4b6f      	ldr	r3, [pc, #444]	; (800a7f4 <SaveToRO+0x1f4>)
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d113      	bne.n	800a666 <SaveToRO+0x66>
		}
	}
	
	// Save Command Snippets
	int currentAdd = RO_MID_ADDRESS;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800a63e:	4b6e      	ldr	r3, [pc, #440]	; (800a7f8 <SaveToRO+0x1f8>)
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d100      	bne.n	800a648 <SaveToRO+0x48>
 800a646:	e0ca      	b.n	800a7de <SaveToRO+0x1de>
 800a648:	2500      	movs	r5, #0
 800a64a:	4c6c      	ldr	r4, [pc, #432]	; (800a7fc <SaveToRO+0x1fc>)
	{
		if (snippets[s].cond.conditionType) 
 800a64c:	4b6c      	ldr	r3, [pc, #432]	; (800a800 <SaveToRO+0x200>)
 800a64e:	4698      	mov	r8, r3
 800a650:	e06e      	b.n	800a730 <SaveToRO+0x130>
		return pFlash.ErrorCode;
 800a652:	4b6c      	ldr	r3, [pc, #432]	; (800a804 <SaveToRO+0x204>)
 800a654:	69d8      	ldr	r0, [r3, #28]
 800a656:	b2c0      	uxtb	r0, r0
	}
	
	HAL_FLASH_Lock();
	
	return result;
}
 800a658:	b009      	add	sp, #36	; 0x24
 800a65a:	bc3c      	pop	{r2, r3, r4, r5}
 800a65c:	4690      	mov	r8, r2
 800a65e:	4699      	mov	r9, r3
 800a660:	46a2      	mov	sl, r4
 800a662:	46ab      	mov	fp, r5
 800a664:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800a666:	4a68      	ldr	r2, [pc, #416]	; (800a808 <SaveToRO+0x208>)
 800a668:	7812      	ldrb	r2, [r2, #0]
 800a66a:	0212      	lsls	r2, r2, #8
 800a66c:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800a66e:	b292      	uxth	r2, r2
 800a670:	2300      	movs	r3, #0
 800a672:	495d      	ldr	r1, [pc, #372]	; (800a7e8 <SaveToRO+0x1e8>)
 800a674:	2001      	movs	r0, #1
 800a676:	f004 fff1 	bl	800f65c <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a67a:	485c      	ldr	r0, [pc, #368]	; (800a7ec <SaveToRO+0x1ec>)
 800a67c:	f004 ffc0 	bl	800f600 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800a680:	2800      	cmp	r0, #0
 800a682:	d111      	bne.n	800a6a8 <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a684:	4a5a      	ldr	r2, [pc, #360]	; (800a7f0 <SaveToRO+0x1f0>)
 800a686:	6913      	ldr	r3, [r2, #16]
 800a688:	2101      	movs	r1, #1
 800a68a:	438b      	bics	r3, r1
 800a68c:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800a68e:	4b5e      	ldr	r3, [pc, #376]	; (800a808 <SaveToRO+0x208>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	2201      	movs	r2, #1
 800a694:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800a696:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d0d0      	beq.n	800a63e <SaveToRO+0x3e>
 800a69c:	2316      	movs	r3, #22
 800a69e:	469b      	mov	fp, r3
 800a6a0:	4b5a      	ldr	r3, [pc, #360]	; (800a80c <SaveToRO+0x20c>)
 800a6a2:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 800a6a4:	4698      	mov	r8, r3
 800a6a6:	e02a      	b.n	800a6fe <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 800a6a8:	4b56      	ldr	r3, [pc, #344]	; (800a804 <SaveToRO+0x204>)
 800a6aa:	69d8      	ldr	r0, [r3, #28]
 800a6ac:	b2c0      	uxtb	r0, r0
 800a6ae:	e7d3      	b.n	800a658 <SaveToRO+0x58>
						return pFlash.ErrorCode;
 800a6b0:	4b54      	ldr	r3, [pc, #336]	; (800a804 <SaveToRO+0x204>)
 800a6b2:	69d8      	ldr	r0, [r3, #28]
 800a6b4:	b2c0      	uxtb	r0, r0
 800a6b6:	e7cf      	b.n	800a658 <SaveToRO+0x58>
 800a6b8:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800a6ba:	42b4      	cmp	r4, r6
 800a6bc:	d017      	beq.n	800a6ee <SaveToRO+0xee>
				if (array[i-1][0]) {
 800a6be:	4643      	mov	r3, r8
 800a6c0:	5afb      	ldrh	r3, [r7, r3]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d0f8      	beq.n	800a6b8 <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800a6c6:	8822      	ldrh	r2, [r4, #0]
 800a6c8:	4b47      	ldr	r3, [pc, #284]	; (800a7e8 <SaveToRO+0x1e8>)
 800a6ca:	18e9      	adds	r1, r5, r3
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	2001      	movs	r0, #1
 800a6d0:	f004 ffc4 	bl	800f65c <HAL_FLASH_Program>
					add += 2;
 800a6d4:	3502      	adds	r5, #2
 800a6d6:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a6d8:	4844      	ldr	r0, [pc, #272]	; (800a7ec <SaveToRO+0x1ec>)
 800a6da:	f004 ff91 	bl	800f600 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	d1e6      	bne.n	800a6b0 <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a6e2:	4a43      	ldr	r2, [pc, #268]	; (800a7f0 <SaveToRO+0x1f0>)
 800a6e4:	6913      	ldr	r3, [r2, #16]
 800a6e6:	2101      	movs	r1, #1
 800a6e8:	438b      	bics	r3, r1
 800a6ea:	6113      	str	r3, [r2, #16]
 800a6ec:	e7e4      	b.n	800a6b8 <SaveToRO+0xb8>
		for(uint8_t i=1 ; i<=N ; i++)
 800a6ee:	464b      	mov	r3, r9
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	4699      	mov	r9, r3
 800a6f6:	4b44      	ldr	r3, [pc, #272]	; (800a808 <SaveToRO+0x208>)
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	454b      	cmp	r3, r9
 800a6fc:	d39f      	bcc.n	800a63e <SaveToRO+0x3e>
 800a6fe:	465e      	mov	r6, fp
 800a700:	464b      	mov	r3, r9
 800a702:	435e      	muls	r6, r3
 800a704:	0034      	movs	r4, r6
 800a706:	3c16      	subs	r4, #22
 800a708:	4454      	add	r4, sl
 800a70a:	4456      	add	r6, sl
				if (array[i-1][0]) {
 800a70c:	1e5f      	subs	r7, r3, #1
 800a70e:	465b      	mov	r3, fp
 800a710:	435f      	muls	r7, r3
 800a712:	e7d4      	b.n	800a6be <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 800a714:	4b3b      	ldr	r3, [pc, #236]	; (800a804 <SaveToRO+0x204>)
 800a716:	69d8      	ldr	r0, [r3, #28]
 800a718:	b2c0      	uxtb	r0, r0
 800a71a:	e79d      	b.n	800a658 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800a71c:	4b39      	ldr	r3, [pc, #228]	; (800a804 <SaveToRO+0x204>)
 800a71e:	69d8      	ldr	r0, [r3, #28]
 800a720:	b2c0      	uxtb	r0, r0
 800a722:	e799      	b.n	800a658 <SaveToRO+0x58>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800a724:	3501      	adds	r5, #1
 800a726:	b2ed      	uxtb	r5, r5
 800a728:	4b33      	ldr	r3, [pc, #204]	; (800a7f8 <SaveToRO+0x1f8>)
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	42ab      	cmp	r3, r5
 800a72e:	d956      	bls.n	800a7de <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType) 
 800a730:	9501      	str	r5, [sp, #4]
 800a732:	00ab      	lsls	r3, r5, #2
 800a734:	195b      	adds	r3, r3, r5
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4642      	mov	r2, r8
 800a73a:	5c9b      	ldrb	r3, [r3, r2]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d0f1      	beq.n	800a724 <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800a740:	23fe      	movs	r3, #254	; 0xfe
 800a742:	aa02      	add	r2, sp, #8
 800a744:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800a746:	00a9      	lsls	r1, r5, #2
 800a748:	1949      	adds	r1, r1, r5
 800a74a:	0089      	lsls	r1, r1, #2
 800a74c:	4b2c      	ldr	r3, [pc, #176]	; (800a800 <SaveToRO+0x200>)
 800a74e:	469c      	mov	ip, r3
 800a750:	4461      	add	r1, ip
 800a752:	2214      	movs	r2, #20
 800a754:	ab02      	add	r3, sp, #8
 800a756:	1c58      	adds	r0, r3, #1
 800a758:	f007 f97d 	bl	8011a56 <memcpy>
 800a75c:	2314      	movs	r3, #20
 800a75e:	469b      	mov	fp, r3
 800a760:	44a3      	add	fp, r4
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800a762:	ae02      	add	r6, sp, #8
 800a764:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a766:	4f22      	ldr	r7, [pc, #136]	; (800a7f0 <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800a768:	5b32      	ldrh	r2, [r6, r4]
 800a76a:	2300      	movs	r3, #0
 800a76c:	0021      	movs	r1, r4
 800a76e:	2001      	movs	r0, #1
 800a770:	f004 ff74 	bl	800f65c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a774:	481d      	ldr	r0, [pc, #116]	; (800a7ec <SaveToRO+0x1ec>)
 800a776:	f004 ff43 	bl	800f600 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a77a:	2800      	cmp	r0, #0
 800a77c:	d1ca      	bne.n	800a714 <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	2201      	movs	r2, #1
 800a782:	4393      	bics	r3, r2
 800a784:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800a786:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800a788:	455c      	cmp	r4, fp
 800a78a:	d1ed      	bne.n	800a768 <SaveToRO+0x168>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800a78c:	2700      	movs	r7, #0
 800a78e:	9a01      	ldr	r2, [sp, #4]
 800a790:	0093      	lsls	r3, r2, #2
 800a792:	189e      	adds	r6, r3, r2
 800a794:	00b6      	lsls	r6, r6, #2
 800a796:	4b1a      	ldr	r3, [pc, #104]	; (800a800 <SaveToRO+0x200>)
 800a798:	469a      	mov	sl, r3
 800a79a:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a79c:	4b14      	ldr	r3, [pc, #80]	; (800a7f0 <SaveToRO+0x1f0>)
 800a79e:	469b      	mov	fp, r3
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800a7a0:	4653      	mov	r3, sl
 800a7a2:	68de      	ldr	r6, [r3, #12]
 800a7a4:	0030      	movs	r0, r6
 800a7a6:	f7f5 fcb7 	bl	8000118 <strlen>
 800a7aa:	3001      	adds	r0, #1
 800a7ac:	0840      	lsrs	r0, r0, #1
 800a7ae:	4287      	cmp	r7, r0
 800a7b0:	d2b8      	bcs.n	800a724 <SaveToRO+0x124>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800a7b2:	007b      	lsls	r3, r7, #1
 800a7b4:	5af2      	ldrh	r2, [r6, r3]
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	0021      	movs	r1, r4
 800a7ba:	2001      	movs	r0, #1
 800a7bc:	f004 ff4e 	bl	800f65c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800a7c0:	480a      	ldr	r0, [pc, #40]	; (800a7ec <SaveToRO+0x1ec>)
 800a7c2:	f004 ff1d 	bl	800f600 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d1a8      	bne.n	800a71c <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a7ca:	465b      	mov	r3, fp
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	4393      	bics	r3, r2
 800a7d2:	465a      	mov	r2, fp
 800a7d4:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800a7d6:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800a7d8:	3701      	adds	r7, #1
 800a7da:	b2ff      	uxtb	r7, r7
 800a7dc:	e7e0      	b.n	800a7a0 <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 800a7de:	f004 ff05 	bl	800f5ec <HAL_FLASH_Lock>
	return result;
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	e738      	b.n	800a658 <SaveToRO+0x58>
 800a7e6:	46c0      	nop			; (mov r8, r8)
 800a7e8:	0801d800 	.word	0x0801d800
 800a7ec:	0000c350 	.word	0x0000c350
 800a7f0:	40022000 	.word	0x40022000
 800a7f4:	20001076 	.word	0x20001076
 800a7f8:	2000121f 	.word	0x2000121f
 800a7fc:	0801dc00 	.word	0x0801dc00
 800a800:	200069a4 	.word	0x200069a4
 800a804:	20006e30 	.word	0x20006e30
 800a808:	2000001c 	.word	0x2000001c
 800a80c:	20000a78 	.word	0x20000a78

0800a810 <ClearROtopology>:

/* --- Clear array topology in SRAM and Flash RO --- 
*/
uint8_t ClearROtopology(void)
{
 800a810:	b510      	push	{r4, lr}
	// Clear the array 
	memset(array, 0, sizeof(array));
 800a812:	228f      	movs	r2, #143	; 0x8f
 800a814:	0092      	lsls	r2, r2, #2
 800a816:	2100      	movs	r1, #0
 800a818:	4805      	ldr	r0, [pc, #20]	; (800a830 <ClearROtopology+0x20>)
 800a81a:	f007 f925 	bl	8011a68 <memset>
	N = 1; myID = 0;
 800a81e:	4b05      	ldr	r3, [pc, #20]	; (800a834 <ClearROtopology+0x24>)
 800a820:	2201      	movs	r2, #1
 800a822:	701a      	strb	r2, [r3, #0]
 800a824:	4b04      	ldr	r3, [pc, #16]	; (800a838 <ClearROtopology+0x28>)
 800a826:	2200      	movs	r2, #0
 800a828:	701a      	strb	r2, [r3, #0]
	
	return SaveToRO();
 800a82a:	f7ff fee9 	bl	800a600 <SaveToRO>
}
 800a82e:	bd10      	pop	{r4, pc}
 800a830:	20000a78 	.word	0x20000a78
 800a834:	2000001c 	.word	0x2000001c
 800a838:	20001076 	.word	0x20001076

0800a83c <Module_Init>:


/* --- H23R0 module initialization.
*/
void Module_Init(void)
{
 800a83c:	b510      	push	{r4, lr}


	/* Array ports */
  MX_USART1_UART_Init();
 800a83e:	f001 fccf 	bl	800c1e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800a842:	f001 fce5 	bl	800c210 <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 800a846:	f001 fd13 	bl	800c270 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 800a84a:	f001 fd29 	bl	800c2a0 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800a84e:	f001 fd3f 	bl	800c2d0 <MX_USART6_UART_Init>

	/* FT234XD/BT900 UART */
  MX_USART3_UART_Init();
 800a852:	f001 fcf5 	bl	800c240 <MX_USART3_UART_Init>
  UpdateBaudrate(6, 115200);
 800a856:	21e1      	movs	r1, #225	; 0xe1
 800a858:	0249      	lsls	r1, r1, #9
 800a85a:	2006      	movs	r0, #6
 800a85c:	f001 ff18 	bl	800c690 <UpdateBaudrate>

}
 800a860:	bd10      	pop	{r4, pc}

0800a862 <Module_MessagingTask>:
	uint8_t lenPar = 0;



	return result;
}
 800a862:	2000      	movs	r0, #0
 800a864:	4770      	bx	lr

0800a866 <RegisterModuleCLICommands>:
/* --- Register this module CLI Commands
*/
void RegisterModuleCLICommands(void)
{

}
 800a866:	4770      	bx	lr

0800a868 <GetPort>:

/* --- Get the port for a given UART.
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART4)
 800a868:	6800      	ldr	r0, [r0, #0]
 800a86a:	4b11      	ldr	r3, [pc, #68]	; (800a8b0 <GetPort+0x48>)
 800a86c:	4298      	cmp	r0, r3
 800a86e:	d014      	beq.n	800a89a <GetPort+0x32>
			return P1;
	else if (huart->Instance == USART2)
 800a870:	4b10      	ldr	r3, [pc, #64]	; (800a8b4 <GetPort+0x4c>)
 800a872:	4298      	cmp	r0, r3
 800a874:	d013      	beq.n	800a89e <GetPort+0x36>
			return P2;
	else if (huart->Instance == USART6)
 800a876:	4b10      	ldr	r3, [pc, #64]	; (800a8b8 <GetPort+0x50>)
 800a878:	4298      	cmp	r0, r3
 800a87a:	d012      	beq.n	800a8a2 <GetPort+0x3a>
			return P3;
	else if (huart->Instance == USART1)
 800a87c:	4b0f      	ldr	r3, [pc, #60]	; (800a8bc <GetPort+0x54>)
 800a87e:	4298      	cmp	r0, r3
 800a880:	d011      	beq.n	800a8a6 <GetPort+0x3e>
			return P4;
	else if (huart->Instance == USART5)
 800a882:	4b0f      	ldr	r3, [pc, #60]	; (800a8c0 <GetPort+0x58>)
 800a884:	4298      	cmp	r0, r3
 800a886:	d010      	beq.n	800a8aa <GetPort+0x42>
			return P5;
	else if (huart->Instance == USART3)
			return P6;

	return 0;
 800a888:	4b0e      	ldr	r3, [pc, #56]	; (800a8c4 <GetPort+0x5c>)
 800a88a:	469c      	mov	ip, r3
 800a88c:	4460      	add	r0, ip
 800a88e:	4243      	negs	r3, r0
 800a890:	4158      	adcs	r0, r3
 800a892:	4240      	negs	r0, r0
 800a894:	2306      	movs	r3, #6
 800a896:	4018      	ands	r0, r3
}
 800a898:	4770      	bx	lr
			return P1;
 800a89a:	2001      	movs	r0, #1
 800a89c:	e7fc      	b.n	800a898 <GetPort+0x30>
			return P2;
 800a89e:	2002      	movs	r0, #2
 800a8a0:	e7fa      	b.n	800a898 <GetPort+0x30>
			return P3;
 800a8a2:	2003      	movs	r0, #3
 800a8a4:	e7f8      	b.n	800a898 <GetPort+0x30>
			return P4;
 800a8a6:	2004      	movs	r0, #4
 800a8a8:	e7f6      	b.n	800a898 <GetPort+0x30>
			return P5;
 800a8aa:	2005      	movs	r0, #5
 800a8ac:	e7f4      	b.n	800a898 <GetPort+0x30>
 800a8ae:	46c0      	nop			; (mov r8, r8)
 800a8b0:	40004c00 	.word	0x40004c00
 800a8b4:	40004400 	.word	0x40004400
 800a8b8:	40011400 	.word	0x40011400
 800a8bc:	40013800 	.word	0x40013800
 800a8c0:	40005000 	.word	0x40005000
 800a8c4:	bfffb800 	.word	0xbfffb800

0800a8c8 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800a8c8:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800a8ca:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a8d0:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a8d2:	2280      	movs	r2, #128	; 0x80
 800a8d4:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a8d6:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a8d8:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a8da:	3320      	adds	r3, #32
 800a8dc:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a8de:	2380      	movs	r3, #128	; 0x80
 800a8e0:	019b      	lsls	r3, r3, #6
 800a8e2:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800a8e4:	f004 f978 	bl	800ebd8 <HAL_DMA_Init>
}
 800a8e8:	bd10      	pop	{r4, pc}

0800a8ea <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800a8ea:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800a8ec:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a8ee:	2310      	movs	r3, #16
 800a8f0:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a8f6:	2280      	movs	r2, #128	; 0x80
 800a8f8:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a8fa:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a8fc:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800a8fe:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a900:	2380      	movs	r3, #128	; 0x80
 800a902:	019b      	lsls	r3, r3, #6
 800a904:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800a906:	f004 f967 	bl	800ebd8 <HAL_DMA_Init>
}
 800a90a:	bd10      	pop	{r4, pc}

0800a90c <DMA_Init>:
{
 800a90c:	b510      	push	{r4, lr}
 800a90e:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800a910:	4b20      	ldr	r3, [pc, #128]	; (800a994 <DMA_Init+0x88>)
 800a912:	6959      	ldr	r1, [r3, #20]
 800a914:	2201      	movs	r2, #1
 800a916:	4311      	orrs	r1, r2
 800a918:	6159      	str	r1, [r3, #20]
 800a91a:	6959      	ldr	r1, [r3, #20]
 800a91c:	400a      	ands	r2, r1
 800a91e:	9200      	str	r2, [sp, #0]
 800a920:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800a922:	6959      	ldr	r1, [r3, #20]
 800a924:	2202      	movs	r2, #2
 800a926:	4311      	orrs	r1, r2
 800a928:	6159      	str	r1, [r3, #20]
 800a92a:	695b      	ldr	r3, [r3, #20]
 800a92c:	401a      	ands	r2, r3
 800a92e:	9201      	str	r2, [sp, #4]
 800a930:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800a932:	4c19      	ldr	r4, [pc, #100]	; (800a998 <DMA_Init+0x8c>)
 800a934:	4919      	ldr	r1, [pc, #100]	; (800a99c <DMA_Init+0x90>)
 800a936:	0020      	movs	r0, r4
 800a938:	f7ff ffc6 	bl	800a8c8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800a93c:	0020      	movs	r0, r4
 800a93e:	3038      	adds	r0, #56	; 0x38
 800a940:	4917      	ldr	r1, [pc, #92]	; (800a9a0 <DMA_Init+0x94>)
 800a942:	f7ff ffc1 	bl	800a8c8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800a946:	0020      	movs	r0, r4
 800a948:	3070      	adds	r0, #112	; 0x70
 800a94a:	4916      	ldr	r1, [pc, #88]	; (800a9a4 <DMA_Init+0x98>)
 800a94c:	f7ff ffbc 	bl	800a8c8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800a950:	0020      	movs	r0, r4
 800a952:	30a8      	adds	r0, #168	; 0xa8
 800a954:	4914      	ldr	r1, [pc, #80]	; (800a9a8 <DMA_Init+0x9c>)
 800a956:	f7ff ffb7 	bl	800a8c8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800a95a:	0020      	movs	r0, r4
 800a95c:	30e0      	adds	r0, #224	; 0xe0
 800a95e:	4913      	ldr	r1, [pc, #76]	; (800a9ac <DMA_Init+0xa0>)
 800a960:	f7ff ffb2 	bl	800a8c8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[5], DMA2_Channel3);
 800a964:	0020      	movs	r0, r4
 800a966:	3019      	adds	r0, #25
 800a968:	30ff      	adds	r0, #255	; 0xff
 800a96a:	4911      	ldr	r1, [pc, #68]	; (800a9b0 <DMA_Init+0xa4>)
 800a96c:	f7ff ffac 	bl	800a8c8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800a970:	4c10      	ldr	r4, [pc, #64]	; (800a9b4 <DMA_Init+0xa8>)
 800a972:	4911      	ldr	r1, [pc, #68]	; (800a9b8 <DMA_Init+0xac>)
 800a974:	0020      	movs	r0, r4
 800a976:	f7ff ffb8 	bl	800a8ea <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800a97a:	0020      	movs	r0, r4
 800a97c:	3038      	adds	r0, #56	; 0x38
 800a97e:	490f      	ldr	r1, [pc, #60]	; (800a9bc <DMA_Init+0xb0>)
 800a980:	f7ff ffb3 	bl	800a8ea <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800a984:	0020      	movs	r0, r4
 800a986:	3070      	adds	r0, #112	; 0x70
 800a988:	490d      	ldr	r1, [pc, #52]	; (800a9c0 <DMA_Init+0xb4>)
 800a98a:	f7ff ffae 	bl	800a8ea <DMA_MSG_TX_CH_Init>
}
 800a98e:	b002      	add	sp, #8
 800a990:	bd10      	pop	{r4, pc}
 800a992:	46c0      	nop			; (mov r8, r8)
 800a994:	40021000 	.word	0x40021000
 800a998:	20001760 	.word	0x20001760
 800a99c:	40020008 	.word	0x40020008
 800a9a0:	40020030 	.word	0x40020030
 800a9a4:	40020058 	.word	0x40020058
 800a9a8:	4002006c 	.word	0x4002006c
 800a9ac:	4002041c 	.word	0x4002041c
 800a9b0:	40020430 	.word	0x40020430
 800a9b4:	200018b0 	.word	0x200018b0
 800a9b8:	4002001c 	.word	0x4002001c
 800a9bc:	40020044 	.word	0x40020044
 800a9c0:	40020080 	.word	0x40020080

0800a9c4 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800a9c4:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800a9c6:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a9cc:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800a9ce:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a9d0:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a9d2:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a9d4:	3320      	adds	r3, #32
 800a9d6:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800a9d8:	2380      	movs	r3, #128	; 0x80
 800a9da:	015b      	lsls	r3, r3, #5
 800a9dc:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800a9de:	f004 f8fb 	bl	800ebd8 <HAL_DMA_Init>
}
 800a9e2:	bd10      	pop	{r4, pc}

0800a9e4 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800a9e4:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800a9e6:	6803      	ldr	r3, [r0, #0]
 800a9e8:	4a20      	ldr	r2, [pc, #128]	; (800aa6c <SetupDMAInterrupts+0x88>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d020      	beq.n	800aa30 <SetupDMAInterrupts+0x4c>
 800a9ee:	d827      	bhi.n	800aa40 <SetupDMAInterrupts+0x5c>
 800a9f0:	4a1f      	ldr	r2, [pc, #124]	; (800aa70 <SetupDMAInterrupts+0x8c>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d00e      	beq.n	800aa14 <SetupDMAInterrupts+0x30>
 800a9f6:	d815      	bhi.n	800aa24 <SetupDMAInterrupts+0x40>
 800a9f8:	4a1e      	ldr	r2, [pc, #120]	; (800aa74 <SetupDMAInterrupts+0x90>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d107      	bne.n	800aa0e <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800a9fe:	2200      	movs	r2, #0
 800aa00:	2009      	movs	r0, #9
 800aa02:	f003 ff4b 	bl	800e89c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800aa06:	2009      	movs	r0, #9
 800aa08:	f003 ff7c 	bl	800e904 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800aa0c:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800aa0e:	4a1a      	ldr	r2, [pc, #104]	; (800aa78 <SetupDMAInterrupts+0x94>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d1fb      	bne.n	800aa0c <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800aa14:	2200      	movs	r2, #0
 800aa16:	200a      	movs	r0, #10
 800aa18:	f003 ff40 	bl	800e89c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800aa1c:	200a      	movs	r0, #10
 800aa1e:	f003 ff71 	bl	800e904 <HAL_NVIC_EnableIRQ>
			break;
 800aa22:	e7f3      	b.n	800aa0c <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800aa24:	4a15      	ldr	r2, [pc, #84]	; (800aa7c <SetupDMAInterrupts+0x98>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d002      	beq.n	800aa30 <SetupDMAInterrupts+0x4c>
 800aa2a:	4a15      	ldr	r2, [pc, #84]	; (800aa80 <SetupDMAInterrupts+0x9c>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d1ed      	bne.n	800aa0c <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800aa30:	2200      	movs	r2, #0
 800aa32:	200b      	movs	r0, #11
 800aa34:	f003 ff32 	bl	800e89c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800aa38:	200b      	movs	r0, #11
 800aa3a:	f003 ff63 	bl	800e904 <HAL_NVIC_EnableIRQ>
}
 800aa3e:	e7e5      	b.n	800aa0c <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800aa40:	4a10      	ldr	r2, [pc, #64]	; (800aa84 <SetupDMAInterrupts+0xa0>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d0e6      	beq.n	800aa14 <SetupDMAInterrupts+0x30>
 800aa46:	d909      	bls.n	800aa5c <SetupDMAInterrupts+0x78>
 800aa48:	4a0f      	ldr	r2, [pc, #60]	; (800aa88 <SetupDMAInterrupts+0xa4>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d0f0      	beq.n	800aa30 <SetupDMAInterrupts+0x4c>
 800aa4e:	4a0f      	ldr	r2, [pc, #60]	; (800aa8c <SetupDMAInterrupts+0xa8>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d0ed      	beq.n	800aa30 <SetupDMAInterrupts+0x4c>
 800aa54:	4a0e      	ldr	r2, [pc, #56]	; (800aa90 <SetupDMAInterrupts+0xac>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d1d8      	bne.n	800aa0c <SetupDMAInterrupts+0x28>
 800aa5a:	e7e9      	b.n	800aa30 <SetupDMAInterrupts+0x4c>
 800aa5c:	4a0d      	ldr	r2, [pc, #52]	; (800aa94 <SetupDMAInterrupts+0xb0>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d0e6      	beq.n	800aa30 <SetupDMAInterrupts+0x4c>
 800aa62:	4a0d      	ldr	r2, [pc, #52]	; (800aa98 <SetupDMAInterrupts+0xb4>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d0d5      	beq.n	800aa14 <SetupDMAInterrupts+0x30>
 800aa68:	e7d0      	b.n	800aa0c <SetupDMAInterrupts+0x28>
 800aa6a:	46c0      	nop			; (mov r8, r8)
 800aa6c:	4002006c 	.word	0x4002006c
 800aa70:	40020030 	.word	0x40020030
 800aa74:	40020008 	.word	0x40020008
 800aa78:	4002001c 	.word	0x4002001c
 800aa7c:	40020044 	.word	0x40020044
 800aa80:	40020058 	.word	0x40020058
 800aa84:	4002041c 	.word	0x4002041c
 800aa88:	40020444 	.word	0x40020444
 800aa8c:	40020458 	.word	0x40020458
 800aa90:	40020430 	.word	0x40020430
 800aa94:	40020080 	.word	0x40020080
 800aa98:	40020408 	.word	0x40020408

0800aa9c <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800aa9c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800aa9e:	6803      	ldr	r3, [r0, #0]
 800aaa0:	4a1a      	ldr	r2, [pc, #104]	; (800ab0c <UnSetupDMAInterrupts+0x70>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d018      	beq.n	800aad8 <UnSetupDMAInterrupts+0x3c>
 800aaa6:	d81b      	bhi.n	800aae0 <UnSetupDMAInterrupts+0x44>
 800aaa8:	4a19      	ldr	r2, [pc, #100]	; (800ab10 <UnSetupDMAInterrupts+0x74>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d00a      	beq.n	800aac4 <UnSetupDMAInterrupts+0x28>
 800aaae:	d80d      	bhi.n	800aacc <UnSetupDMAInterrupts+0x30>
 800aab0:	4a18      	ldr	r2, [pc, #96]	; (800ab14 <UnSetupDMAInterrupts+0x78>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d103      	bne.n	800aabe <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800aab6:	2009      	movs	r0, #9
 800aab8:	f003 ff2e 	bl	800e918 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800aabc:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800aabe:	4a16      	ldr	r2, [pc, #88]	; (800ab18 <UnSetupDMAInterrupts+0x7c>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d1fb      	bne.n	800aabc <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800aac4:	200a      	movs	r0, #10
 800aac6:	f003 ff27 	bl	800e918 <HAL_NVIC_DisableIRQ>
			break;
 800aaca:	e7f7      	b.n	800aabc <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800aacc:	4a13      	ldr	r2, [pc, #76]	; (800ab1c <UnSetupDMAInterrupts+0x80>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d002      	beq.n	800aad8 <UnSetupDMAInterrupts+0x3c>
 800aad2:	4a13      	ldr	r2, [pc, #76]	; (800ab20 <UnSetupDMAInterrupts+0x84>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d1f1      	bne.n	800aabc <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800aad8:	200b      	movs	r0, #11
 800aada:	f003 ff1d 	bl	800e918 <HAL_NVIC_DisableIRQ>
}
 800aade:	e7ed      	b.n	800aabc <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800aae0:	4a10      	ldr	r2, [pc, #64]	; (800ab24 <UnSetupDMAInterrupts+0x88>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d0ee      	beq.n	800aac4 <UnSetupDMAInterrupts+0x28>
 800aae6:	d909      	bls.n	800aafc <UnSetupDMAInterrupts+0x60>
 800aae8:	4a0f      	ldr	r2, [pc, #60]	; (800ab28 <UnSetupDMAInterrupts+0x8c>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d0f4      	beq.n	800aad8 <UnSetupDMAInterrupts+0x3c>
 800aaee:	4a0f      	ldr	r2, [pc, #60]	; (800ab2c <UnSetupDMAInterrupts+0x90>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d0f1      	beq.n	800aad8 <UnSetupDMAInterrupts+0x3c>
 800aaf4:	4a0e      	ldr	r2, [pc, #56]	; (800ab30 <UnSetupDMAInterrupts+0x94>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d1e0      	bne.n	800aabc <UnSetupDMAInterrupts+0x20>
 800aafa:	e7ed      	b.n	800aad8 <UnSetupDMAInterrupts+0x3c>
 800aafc:	4a0d      	ldr	r2, [pc, #52]	; (800ab34 <UnSetupDMAInterrupts+0x98>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d0ea      	beq.n	800aad8 <UnSetupDMAInterrupts+0x3c>
 800ab02:	4a0d      	ldr	r2, [pc, #52]	; (800ab38 <UnSetupDMAInterrupts+0x9c>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d0dd      	beq.n	800aac4 <UnSetupDMAInterrupts+0x28>
 800ab08:	e7d8      	b.n	800aabc <UnSetupDMAInterrupts+0x20>
 800ab0a:	46c0      	nop			; (mov r8, r8)
 800ab0c:	4002006c 	.word	0x4002006c
 800ab10:	40020030 	.word	0x40020030
 800ab14:	40020008 	.word	0x40020008
 800ab18:	4002001c 	.word	0x4002001c
 800ab1c:	40020044 	.word	0x40020044
 800ab20:	40020058 	.word	0x40020058
 800ab24:	4002041c 	.word	0x4002041c
 800ab28:	40020444 	.word	0x40020444
 800ab2c:	40020458 	.word	0x40020458
 800ab30:	40020430 	.word	0x40020430
 800ab34:	40020080 	.word	0x40020080
 800ab38:	40020408 	.word	0x40020408

0800ab3c <DMA_MSG_TX_UnSetup>:
{	
 800ab3c:	b510      	push	{r4, lr}
 800ab3e:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800ab40:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800ab42:	f7ff ffab 	bl	800aa9c <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800ab46:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ab48:	2300      	movs	r3, #0
 800ab4a:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800ab4c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800ab4e:	bd10      	pop	{r4, pc}

0800ab50 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800ab50:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800ab52:	6803      	ldr	r3, [r0, #0]
 800ab54:	4abd      	ldr	r2, [pc, #756]	; (800ae4c <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d02f      	beq.n	800abba <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800ab5a:	4abd      	ldr	r2, [pc, #756]	; (800ae50 <RemapAndLinkDMAtoUARTRx+0x300>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d100      	bne.n	800ab62 <RemapAndLinkDMAtoUARTRx+0x12>
 800ab60:	e087      	b.n	800ac72 <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800ab62:	4abc      	ldr	r2, [pc, #752]	; (800ae54 <RemapAndLinkDMAtoUARTRx+0x304>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d100      	bne.n	800ab6a <RemapAndLinkDMAtoUARTRx+0x1a>
 800ab68:	e0dc      	b.n	800ad24 <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800ab6a:	4abb      	ldr	r2, [pc, #748]	; (800ae58 <RemapAndLinkDMAtoUARTRx+0x308>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d000      	beq.n	800ab72 <RemapAndLinkDMAtoUARTRx+0x22>
 800ab70:	e18a      	b.n	800ae88 <RemapAndLinkDMAtoUARTRx+0x338>
 800ab72:	680b      	ldr	r3, [r1, #0]
 800ab74:	4ab9      	ldr	r2, [pc, #740]	; (800ae5c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d100      	bne.n	800ab7c <RemapAndLinkDMAtoUARTRx+0x2c>
 800ab7a:	e12d      	b.n	800add8 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800ab7c:	4ab8      	ldr	r2, [pc, #736]	; (800ae60 <RemapAndLinkDMAtoUARTRx+0x310>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d100      	bne.n	800ab84 <RemapAndLinkDMAtoUARTRx+0x34>
 800ab82:	e134      	b.n	800adee <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800ab84:	4ab7      	ldr	r2, [pc, #732]	; (800ae64 <RemapAndLinkDMAtoUARTRx+0x314>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d100      	bne.n	800ab8c <RemapAndLinkDMAtoUARTRx+0x3c>
 800ab8a:	e13c      	b.n	800ae06 <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800ab8c:	4ab6      	ldr	r2, [pc, #728]	; (800ae68 <RemapAndLinkDMAtoUARTRx+0x318>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d100      	bne.n	800ab94 <RemapAndLinkDMAtoUARTRx+0x44>
 800ab92:	e144      	b.n	800ae1e <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800ab94:	4ab5      	ldr	r2, [pc, #724]	; (800ae6c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d100      	bne.n	800ab9c <RemapAndLinkDMAtoUARTRx+0x4c>
 800ab9a:	e14c      	b.n	800ae36 <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800ab9c:	4ab4      	ldr	r2, [pc, #720]	; (800ae70 <RemapAndLinkDMAtoUARTRx+0x320>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d11e      	bne.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800aba2:	4ab4      	ldr	r2, [pc, #720]	; (800ae74 <RemapAndLinkDMAtoUARTRx+0x324>)
 800aba4:	23a8      	movs	r3, #168	; 0xa8
 800aba6:	58d4      	ldr	r4, [r2, r3]
 800aba8:	4db3      	ldr	r5, [pc, #716]	; (800ae78 <RemapAndLinkDMAtoUARTRx+0x328>)
 800abaa:	402c      	ands	r4, r5
 800abac:	50d4      	str	r4, [r2, r3]
 800abae:	58d5      	ldr	r5, [r2, r3]
 800abb0:	24b0      	movs	r4, #176	; 0xb0
 800abb2:	0124      	lsls	r4, r4, #4
 800abb4:	432c      	orrs	r4, r5
 800abb6:	50d4      	str	r4, [r2, r3]
 800abb8:	e012      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800abba:	680b      	ldr	r3, [r1, #0]
 800abbc:	4aa7      	ldr	r2, [pc, #668]	; (800ae5c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d011      	beq.n	800abe6 <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800abc2:	4aa7      	ldr	r2, [pc, #668]	; (800ae60 <RemapAndLinkDMAtoUARTRx+0x310>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d019      	beq.n	800abfc <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800abc8:	4aa6      	ldr	r2, [pc, #664]	; (800ae64 <RemapAndLinkDMAtoUARTRx+0x314>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d022      	beq.n	800ac14 <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800abce:	4aa6      	ldr	r2, [pc, #664]	; (800ae68 <RemapAndLinkDMAtoUARTRx+0x318>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d02b      	beq.n	800ac2c <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800abd4:	4aa5      	ldr	r2, [pc, #660]	; (800ae6c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d034      	beq.n	800ac44 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800abda:	4aa5      	ldr	r2, [pc, #660]	; (800ae70 <RemapAndLinkDMAtoUARTRx+0x320>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d03c      	beq.n	800ac5a <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800abe0:	6641      	str	r1, [r0, #100]	; 0x64
 800abe2:	6248      	str	r0, [r1, #36]	; 0x24
}
 800abe4:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800abe6:	4aa5      	ldr	r2, [pc, #660]	; (800ae7c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800abe8:	23a8      	movs	r3, #168	; 0xa8
 800abea:	58d4      	ldr	r4, [r2, r3]
 800abec:	250f      	movs	r5, #15
 800abee:	43ac      	bics	r4, r5
 800abf0:	50d4      	str	r4, [r2, r3]
 800abf2:	58d4      	ldr	r4, [r2, r3]
 800abf4:	3d07      	subs	r5, #7
 800abf6:	432c      	orrs	r4, r5
 800abf8:	50d4      	str	r4, [r2, r3]
 800abfa:	e7f1      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800abfc:	4a9f      	ldr	r2, [pc, #636]	; (800ae7c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800abfe:	23a8      	movs	r3, #168	; 0xa8
 800ac00:	58d4      	ldr	r4, [r2, r3]
 800ac02:	4d9d      	ldr	r5, [pc, #628]	; (800ae78 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ac04:	402c      	ands	r4, r5
 800ac06:	50d4      	str	r4, [r2, r3]
 800ac08:	58d5      	ldr	r5, [r2, r3]
 800ac0a:	2480      	movs	r4, #128	; 0x80
 800ac0c:	0124      	lsls	r4, r4, #4
 800ac0e:	432c      	orrs	r4, r5
 800ac10:	50d4      	str	r4, [r2, r3]
 800ac12:	e7e5      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800ac14:	4a99      	ldr	r2, [pc, #612]	; (800ae7c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ac16:	23a8      	movs	r3, #168	; 0xa8
 800ac18:	58d4      	ldr	r4, [r2, r3]
 800ac1a:	4d99      	ldr	r5, [pc, #612]	; (800ae80 <RemapAndLinkDMAtoUARTRx+0x330>)
 800ac1c:	402c      	ands	r4, r5
 800ac1e:	50d4      	str	r4, [r2, r3]
 800ac20:	58d5      	ldr	r5, [r2, r3]
 800ac22:	2480      	movs	r4, #128	; 0x80
 800ac24:	0324      	lsls	r4, r4, #12
 800ac26:	432c      	orrs	r4, r5
 800ac28:	50d4      	str	r4, [r2, r3]
 800ac2a:	e7d9      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800ac2c:	4a93      	ldr	r2, [pc, #588]	; (800ae7c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ac2e:	23a8      	movs	r3, #168	; 0xa8
 800ac30:	58d4      	ldr	r4, [r2, r3]
 800ac32:	4d94      	ldr	r5, [pc, #592]	; (800ae84 <RemapAndLinkDMAtoUARTRx+0x334>)
 800ac34:	402c      	ands	r4, r5
 800ac36:	50d4      	str	r4, [r2, r3]
 800ac38:	58d5      	ldr	r5, [r2, r3]
 800ac3a:	2480      	movs	r4, #128	; 0x80
 800ac3c:	0424      	lsls	r4, r4, #16
 800ac3e:	432c      	orrs	r4, r5
 800ac40:	50d4      	str	r4, [r2, r3]
 800ac42:	e7cd      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800ac44:	4a8b      	ldr	r2, [pc, #556]	; (800ae74 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ac46:	23a8      	movs	r3, #168	; 0xa8
 800ac48:	58d4      	ldr	r4, [r2, r3]
 800ac4a:	25f0      	movs	r5, #240	; 0xf0
 800ac4c:	43ac      	bics	r4, r5
 800ac4e:	50d4      	str	r4, [r2, r3]
 800ac50:	58d4      	ldr	r4, [r2, r3]
 800ac52:	3d70      	subs	r5, #112	; 0x70
 800ac54:	432c      	orrs	r4, r5
 800ac56:	50d4      	str	r4, [r2, r3]
 800ac58:	e7c2      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800ac5a:	4a86      	ldr	r2, [pc, #536]	; (800ae74 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ac5c:	23a8      	movs	r3, #168	; 0xa8
 800ac5e:	58d4      	ldr	r4, [r2, r3]
 800ac60:	4d85      	ldr	r5, [pc, #532]	; (800ae78 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ac62:	402c      	ands	r4, r5
 800ac64:	50d4      	str	r4, [r2, r3]
 800ac66:	58d5      	ldr	r5, [r2, r3]
 800ac68:	2480      	movs	r4, #128	; 0x80
 800ac6a:	0124      	lsls	r4, r4, #4
 800ac6c:	432c      	orrs	r4, r5
 800ac6e:	50d4      	str	r4, [r2, r3]
 800ac70:	e7b6      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800ac72:	680b      	ldr	r3, [r1, #0]
 800ac74:	4a79      	ldr	r2, [pc, #484]	; (800ae5c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d01a      	beq.n	800acb0 <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800ac7a:	4a79      	ldr	r2, [pc, #484]	; (800ae60 <RemapAndLinkDMAtoUARTRx+0x310>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d022      	beq.n	800acc6 <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800ac80:	4a78      	ldr	r2, [pc, #480]	; (800ae64 <RemapAndLinkDMAtoUARTRx+0x314>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d02b      	beq.n	800acde <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800ac86:	4a78      	ldr	r2, [pc, #480]	; (800ae68 <RemapAndLinkDMAtoUARTRx+0x318>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d034      	beq.n	800acf6 <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800ac8c:	4a77      	ldr	r2, [pc, #476]	; (800ae6c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d03d      	beq.n	800ad0e <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800ac92:	4a77      	ldr	r2, [pc, #476]	; (800ae70 <RemapAndLinkDMAtoUARTRx+0x320>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d1a3      	bne.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800ac98:	4a76      	ldr	r2, [pc, #472]	; (800ae74 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ac9a:	23a8      	movs	r3, #168	; 0xa8
 800ac9c:	58d4      	ldr	r4, [r2, r3]
 800ac9e:	4d76      	ldr	r5, [pc, #472]	; (800ae78 <RemapAndLinkDMAtoUARTRx+0x328>)
 800aca0:	402c      	ands	r4, r5
 800aca2:	50d4      	str	r4, [r2, r3]
 800aca4:	58d5      	ldr	r5, [r2, r3]
 800aca6:	2490      	movs	r4, #144	; 0x90
 800aca8:	0124      	lsls	r4, r4, #4
 800acaa:	432c      	orrs	r4, r5
 800acac:	50d4      	str	r4, [r2, r3]
 800acae:	e797      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800acb0:	4a72      	ldr	r2, [pc, #456]	; (800ae7c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800acb2:	23a8      	movs	r3, #168	; 0xa8
 800acb4:	58d4      	ldr	r4, [r2, r3]
 800acb6:	250f      	movs	r5, #15
 800acb8:	43ac      	bics	r4, r5
 800acba:	50d4      	str	r4, [r2, r3]
 800acbc:	58d4      	ldr	r4, [r2, r3]
 800acbe:	3d06      	subs	r5, #6
 800acc0:	432c      	orrs	r4, r5
 800acc2:	50d4      	str	r4, [r2, r3]
 800acc4:	e78c      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800acc6:	4a6d      	ldr	r2, [pc, #436]	; (800ae7c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800acc8:	23a8      	movs	r3, #168	; 0xa8
 800acca:	58d4      	ldr	r4, [r2, r3]
 800accc:	4d6a      	ldr	r5, [pc, #424]	; (800ae78 <RemapAndLinkDMAtoUARTRx+0x328>)
 800acce:	402c      	ands	r4, r5
 800acd0:	50d4      	str	r4, [r2, r3]
 800acd2:	58d5      	ldr	r5, [r2, r3]
 800acd4:	2490      	movs	r4, #144	; 0x90
 800acd6:	0124      	lsls	r4, r4, #4
 800acd8:	432c      	orrs	r4, r5
 800acda:	50d4      	str	r4, [r2, r3]
 800acdc:	e780      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800acde:	4a67      	ldr	r2, [pc, #412]	; (800ae7c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ace0:	23a8      	movs	r3, #168	; 0xa8
 800ace2:	58d4      	ldr	r4, [r2, r3]
 800ace4:	4d66      	ldr	r5, [pc, #408]	; (800ae80 <RemapAndLinkDMAtoUARTRx+0x330>)
 800ace6:	402c      	ands	r4, r5
 800ace8:	50d4      	str	r4, [r2, r3]
 800acea:	58d5      	ldr	r5, [r2, r3]
 800acec:	2490      	movs	r4, #144	; 0x90
 800acee:	0324      	lsls	r4, r4, #12
 800acf0:	432c      	orrs	r4, r5
 800acf2:	50d4      	str	r4, [r2, r3]
 800acf4:	e774      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800acf6:	4a61      	ldr	r2, [pc, #388]	; (800ae7c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800acf8:	23a8      	movs	r3, #168	; 0xa8
 800acfa:	58d4      	ldr	r4, [r2, r3]
 800acfc:	4d61      	ldr	r5, [pc, #388]	; (800ae84 <RemapAndLinkDMAtoUARTRx+0x334>)
 800acfe:	402c      	ands	r4, r5
 800ad00:	50d4      	str	r4, [r2, r3]
 800ad02:	58d5      	ldr	r5, [r2, r3]
 800ad04:	2490      	movs	r4, #144	; 0x90
 800ad06:	0424      	lsls	r4, r4, #16
 800ad08:	432c      	orrs	r4, r5
 800ad0a:	50d4      	str	r4, [r2, r3]
 800ad0c:	e768      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800ad0e:	4a59      	ldr	r2, [pc, #356]	; (800ae74 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ad10:	23a8      	movs	r3, #168	; 0xa8
 800ad12:	58d4      	ldr	r4, [r2, r3]
 800ad14:	25f0      	movs	r5, #240	; 0xf0
 800ad16:	43ac      	bics	r4, r5
 800ad18:	50d4      	str	r4, [r2, r3]
 800ad1a:	58d4      	ldr	r4, [r2, r3]
 800ad1c:	3d60      	subs	r5, #96	; 0x60
 800ad1e:	432c      	orrs	r4, r5
 800ad20:	50d4      	str	r4, [r2, r3]
 800ad22:	e75d      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800ad24:	680b      	ldr	r3, [r1, #0]
 800ad26:	4a4d      	ldr	r2, [pc, #308]	; (800ae5c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d01b      	beq.n	800ad64 <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800ad2c:	4a4c      	ldr	r2, [pc, #304]	; (800ae60 <RemapAndLinkDMAtoUARTRx+0x310>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d023      	beq.n	800ad7a <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800ad32:	4a4c      	ldr	r2, [pc, #304]	; (800ae64 <RemapAndLinkDMAtoUARTRx+0x314>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d02c      	beq.n	800ad92 <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800ad38:	4a4b      	ldr	r2, [pc, #300]	; (800ae68 <RemapAndLinkDMAtoUARTRx+0x318>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d035      	beq.n	800adaa <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800ad3e:	4a4b      	ldr	r2, [pc, #300]	; (800ae6c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d03e      	beq.n	800adc2 <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800ad44:	4a4a      	ldr	r2, [pc, #296]	; (800ae70 <RemapAndLinkDMAtoUARTRx+0x320>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d000      	beq.n	800ad4c <RemapAndLinkDMAtoUARTRx+0x1fc>
 800ad4a:	e749      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800ad4c:	4a49      	ldr	r2, [pc, #292]	; (800ae74 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ad4e:	23a8      	movs	r3, #168	; 0xa8
 800ad50:	58d4      	ldr	r4, [r2, r3]
 800ad52:	4d49      	ldr	r5, [pc, #292]	; (800ae78 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ad54:	402c      	ands	r4, r5
 800ad56:	50d4      	str	r4, [r2, r3]
 800ad58:	58d5      	ldr	r5, [r2, r3]
 800ad5a:	24a0      	movs	r4, #160	; 0xa0
 800ad5c:	0124      	lsls	r4, r4, #4
 800ad5e:	432c      	orrs	r4, r5
 800ad60:	50d4      	str	r4, [r2, r3]
 800ad62:	e73d      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800ad64:	4a45      	ldr	r2, [pc, #276]	; (800ae7c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ad66:	23a8      	movs	r3, #168	; 0xa8
 800ad68:	58d4      	ldr	r4, [r2, r3]
 800ad6a:	250f      	movs	r5, #15
 800ad6c:	43ac      	bics	r4, r5
 800ad6e:	50d4      	str	r4, [r2, r3]
 800ad70:	58d4      	ldr	r4, [r2, r3]
 800ad72:	3d05      	subs	r5, #5
 800ad74:	432c      	orrs	r4, r5
 800ad76:	50d4      	str	r4, [r2, r3]
 800ad78:	e732      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800ad7a:	4a40      	ldr	r2, [pc, #256]	; (800ae7c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ad7c:	23a8      	movs	r3, #168	; 0xa8
 800ad7e:	58d4      	ldr	r4, [r2, r3]
 800ad80:	4d3d      	ldr	r5, [pc, #244]	; (800ae78 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ad82:	402c      	ands	r4, r5
 800ad84:	50d4      	str	r4, [r2, r3]
 800ad86:	58d5      	ldr	r5, [r2, r3]
 800ad88:	24a0      	movs	r4, #160	; 0xa0
 800ad8a:	0124      	lsls	r4, r4, #4
 800ad8c:	432c      	orrs	r4, r5
 800ad8e:	50d4      	str	r4, [r2, r3]
 800ad90:	e726      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800ad92:	4a3a      	ldr	r2, [pc, #232]	; (800ae7c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ad94:	23a8      	movs	r3, #168	; 0xa8
 800ad96:	58d4      	ldr	r4, [r2, r3]
 800ad98:	4d39      	ldr	r5, [pc, #228]	; (800ae80 <RemapAndLinkDMAtoUARTRx+0x330>)
 800ad9a:	402c      	ands	r4, r5
 800ad9c:	50d4      	str	r4, [r2, r3]
 800ad9e:	58d5      	ldr	r5, [r2, r3]
 800ada0:	24a0      	movs	r4, #160	; 0xa0
 800ada2:	0324      	lsls	r4, r4, #12
 800ada4:	432c      	orrs	r4, r5
 800ada6:	50d4      	str	r4, [r2, r3]
 800ada8:	e71a      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800adaa:	4a34      	ldr	r2, [pc, #208]	; (800ae7c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800adac:	23a8      	movs	r3, #168	; 0xa8
 800adae:	58d4      	ldr	r4, [r2, r3]
 800adb0:	4d34      	ldr	r5, [pc, #208]	; (800ae84 <RemapAndLinkDMAtoUARTRx+0x334>)
 800adb2:	402c      	ands	r4, r5
 800adb4:	50d4      	str	r4, [r2, r3]
 800adb6:	58d5      	ldr	r5, [r2, r3]
 800adb8:	24a0      	movs	r4, #160	; 0xa0
 800adba:	0424      	lsls	r4, r4, #16
 800adbc:	432c      	orrs	r4, r5
 800adbe:	50d4      	str	r4, [r2, r3]
 800adc0:	e70e      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800adc2:	4a2c      	ldr	r2, [pc, #176]	; (800ae74 <RemapAndLinkDMAtoUARTRx+0x324>)
 800adc4:	23a8      	movs	r3, #168	; 0xa8
 800adc6:	58d4      	ldr	r4, [r2, r3]
 800adc8:	25f0      	movs	r5, #240	; 0xf0
 800adca:	43ac      	bics	r4, r5
 800adcc:	50d4      	str	r4, [r2, r3]
 800adce:	58d4      	ldr	r4, [r2, r3]
 800add0:	3d50      	subs	r5, #80	; 0x50
 800add2:	432c      	orrs	r4, r5
 800add4:	50d4      	str	r4, [r2, r3]
 800add6:	e703      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800add8:	4a28      	ldr	r2, [pc, #160]	; (800ae7c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800adda:	23a8      	movs	r3, #168	; 0xa8
 800addc:	58d4      	ldr	r4, [r2, r3]
 800adde:	250f      	movs	r5, #15
 800ade0:	43ac      	bics	r4, r5
 800ade2:	50d4      	str	r4, [r2, r3]
 800ade4:	58d4      	ldr	r4, [r2, r3]
 800ade6:	3d04      	subs	r5, #4
 800ade8:	432c      	orrs	r4, r5
 800adea:	50d4      	str	r4, [r2, r3]
 800adec:	e6f8      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800adee:	4a23      	ldr	r2, [pc, #140]	; (800ae7c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800adf0:	23a8      	movs	r3, #168	; 0xa8
 800adf2:	58d4      	ldr	r4, [r2, r3]
 800adf4:	4d20      	ldr	r5, [pc, #128]	; (800ae78 <RemapAndLinkDMAtoUARTRx+0x328>)
 800adf6:	402c      	ands	r4, r5
 800adf8:	50d4      	str	r4, [r2, r3]
 800adfa:	58d5      	ldr	r5, [r2, r3]
 800adfc:	24b0      	movs	r4, #176	; 0xb0
 800adfe:	0124      	lsls	r4, r4, #4
 800ae00:	432c      	orrs	r4, r5
 800ae02:	50d4      	str	r4, [r2, r3]
 800ae04:	e6ec      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800ae06:	4a1d      	ldr	r2, [pc, #116]	; (800ae7c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ae08:	23a8      	movs	r3, #168	; 0xa8
 800ae0a:	58d4      	ldr	r4, [r2, r3]
 800ae0c:	4d1c      	ldr	r5, [pc, #112]	; (800ae80 <RemapAndLinkDMAtoUARTRx+0x330>)
 800ae0e:	402c      	ands	r4, r5
 800ae10:	50d4      	str	r4, [r2, r3]
 800ae12:	58d5      	ldr	r5, [r2, r3]
 800ae14:	24b0      	movs	r4, #176	; 0xb0
 800ae16:	0324      	lsls	r4, r4, #12
 800ae18:	432c      	orrs	r4, r5
 800ae1a:	50d4      	str	r4, [r2, r3]
 800ae1c:	e6e0      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800ae1e:	4a17      	ldr	r2, [pc, #92]	; (800ae7c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ae20:	23a8      	movs	r3, #168	; 0xa8
 800ae22:	58d4      	ldr	r4, [r2, r3]
 800ae24:	4d17      	ldr	r5, [pc, #92]	; (800ae84 <RemapAndLinkDMAtoUARTRx+0x334>)
 800ae26:	402c      	ands	r4, r5
 800ae28:	50d4      	str	r4, [r2, r3]
 800ae2a:	58d5      	ldr	r5, [r2, r3]
 800ae2c:	24b0      	movs	r4, #176	; 0xb0
 800ae2e:	0424      	lsls	r4, r4, #16
 800ae30:	432c      	orrs	r4, r5
 800ae32:	50d4      	str	r4, [r2, r3]
 800ae34:	e6d4      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800ae36:	4a0f      	ldr	r2, [pc, #60]	; (800ae74 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ae38:	23a8      	movs	r3, #168	; 0xa8
 800ae3a:	58d4      	ldr	r4, [r2, r3]
 800ae3c:	25f0      	movs	r5, #240	; 0xf0
 800ae3e:	43ac      	bics	r4, r5
 800ae40:	50d4      	str	r4, [r2, r3]
 800ae42:	58d4      	ldr	r4, [r2, r3]
 800ae44:	3d40      	subs	r5, #64	; 0x40
 800ae46:	432c      	orrs	r4, r5
 800ae48:	50d4      	str	r4, [r2, r3]
 800ae4a:	e6c9      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
 800ae4c:	40013800 	.word	0x40013800
 800ae50:	40004400 	.word	0x40004400
 800ae54:	40004800 	.word	0x40004800
 800ae58:	40004c00 	.word	0x40004c00
 800ae5c:	40020008 	.word	0x40020008
 800ae60:	40020030 	.word	0x40020030
 800ae64:	40020058 	.word	0x40020058
 800ae68:	4002006c 	.word	0x4002006c
 800ae6c:	4002041c 	.word	0x4002041c
 800ae70:	40020430 	.word	0x40020430
 800ae74:	40020400 	.word	0x40020400
 800ae78:	fffff0ff 	.word	0xfffff0ff
 800ae7c:	40020000 	.word	0x40020000
 800ae80:	fff0ffff 	.word	0xfff0ffff
 800ae84:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800ae88:	4ab9      	ldr	r2, [pc, #740]	; (800b170 <RemapAndLinkDMAtoUARTRx+0x620>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d159      	bne.n	800af42 <RemapAndLinkDMAtoUARTRx+0x3f2>
 800ae8e:	680b      	ldr	r3, [r1, #0]
 800ae90:	4ab8      	ldr	r2, [pc, #736]	; (800b174 <RemapAndLinkDMAtoUARTRx+0x624>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d01b      	beq.n	800aece <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800ae96:	4ab8      	ldr	r2, [pc, #736]	; (800b178 <RemapAndLinkDMAtoUARTRx+0x628>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d023      	beq.n	800aee4 <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800ae9c:	4ab7      	ldr	r2, [pc, #732]	; (800b17c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d02c      	beq.n	800aefc <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800aea2:	4ab7      	ldr	r2, [pc, #732]	; (800b180 <RemapAndLinkDMAtoUARTRx+0x630>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d035      	beq.n	800af14 <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800aea8:	4ab6      	ldr	r2, [pc, #728]	; (800b184 <RemapAndLinkDMAtoUARTRx+0x634>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d03e      	beq.n	800af2c <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800aeae:	4ab6      	ldr	r2, [pc, #728]	; (800b188 <RemapAndLinkDMAtoUARTRx+0x638>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d000      	beq.n	800aeb6 <RemapAndLinkDMAtoUARTRx+0x366>
 800aeb4:	e694      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800aeb6:	4ab5      	ldr	r2, [pc, #724]	; (800b18c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800aeb8:	23a8      	movs	r3, #168	; 0xa8
 800aeba:	58d4      	ldr	r4, [r2, r3]
 800aebc:	4db4      	ldr	r5, [pc, #720]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x640>)
 800aebe:	402c      	ands	r4, r5
 800aec0:	50d4      	str	r4, [r2, r3]
 800aec2:	58d5      	ldr	r5, [r2, r3]
 800aec4:	24c0      	movs	r4, #192	; 0xc0
 800aec6:	0124      	lsls	r4, r4, #4
 800aec8:	432c      	orrs	r4, r5
 800aeca:	50d4      	str	r4, [r2, r3]
 800aecc:	e688      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800aece:	4ab1      	ldr	r2, [pc, #708]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x644>)
 800aed0:	23a8      	movs	r3, #168	; 0xa8
 800aed2:	58d4      	ldr	r4, [r2, r3]
 800aed4:	250f      	movs	r5, #15
 800aed6:	43ac      	bics	r4, r5
 800aed8:	50d4      	str	r4, [r2, r3]
 800aeda:	58d4      	ldr	r4, [r2, r3]
 800aedc:	3d03      	subs	r5, #3
 800aede:	432c      	orrs	r4, r5
 800aee0:	50d4      	str	r4, [r2, r3]
 800aee2:	e67d      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800aee4:	4aab      	ldr	r2, [pc, #684]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x644>)
 800aee6:	23a8      	movs	r3, #168	; 0xa8
 800aee8:	58d4      	ldr	r4, [r2, r3]
 800aeea:	4da9      	ldr	r5, [pc, #676]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x640>)
 800aeec:	402c      	ands	r4, r5
 800aeee:	50d4      	str	r4, [r2, r3]
 800aef0:	58d5      	ldr	r5, [r2, r3]
 800aef2:	24c0      	movs	r4, #192	; 0xc0
 800aef4:	0124      	lsls	r4, r4, #4
 800aef6:	432c      	orrs	r4, r5
 800aef8:	50d4      	str	r4, [r2, r3]
 800aefa:	e671      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800aefc:	4aa5      	ldr	r2, [pc, #660]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x644>)
 800aefe:	23a8      	movs	r3, #168	; 0xa8
 800af00:	58d4      	ldr	r4, [r2, r3]
 800af02:	4da5      	ldr	r5, [pc, #660]	; (800b198 <RemapAndLinkDMAtoUARTRx+0x648>)
 800af04:	402c      	ands	r4, r5
 800af06:	50d4      	str	r4, [r2, r3]
 800af08:	58d5      	ldr	r5, [r2, r3]
 800af0a:	24c0      	movs	r4, #192	; 0xc0
 800af0c:	0324      	lsls	r4, r4, #12
 800af0e:	432c      	orrs	r4, r5
 800af10:	50d4      	str	r4, [r2, r3]
 800af12:	e665      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800af14:	4a9f      	ldr	r2, [pc, #636]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x644>)
 800af16:	23a8      	movs	r3, #168	; 0xa8
 800af18:	58d4      	ldr	r4, [r2, r3]
 800af1a:	4da0      	ldr	r5, [pc, #640]	; (800b19c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800af1c:	402c      	ands	r4, r5
 800af1e:	50d4      	str	r4, [r2, r3]
 800af20:	58d5      	ldr	r5, [r2, r3]
 800af22:	24c0      	movs	r4, #192	; 0xc0
 800af24:	0424      	lsls	r4, r4, #16
 800af26:	432c      	orrs	r4, r5
 800af28:	50d4      	str	r4, [r2, r3]
 800af2a:	e659      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800af2c:	4a97      	ldr	r2, [pc, #604]	; (800b18c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800af2e:	23a8      	movs	r3, #168	; 0xa8
 800af30:	58d4      	ldr	r4, [r2, r3]
 800af32:	25f0      	movs	r5, #240	; 0xf0
 800af34:	43ac      	bics	r4, r5
 800af36:	50d4      	str	r4, [r2, r3]
 800af38:	58d4      	ldr	r4, [r2, r3]
 800af3a:	3d30      	subs	r5, #48	; 0x30
 800af3c:	432c      	orrs	r4, r5
 800af3e:	50d4      	str	r4, [r2, r3]
 800af40:	e64e      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800af42:	4a97      	ldr	r2, [pc, #604]	; (800b1a0 <RemapAndLinkDMAtoUARTRx+0x650>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d159      	bne.n	800affc <RemapAndLinkDMAtoUARTRx+0x4ac>
 800af48:	680b      	ldr	r3, [r1, #0]
 800af4a:	4a8a      	ldr	r2, [pc, #552]	; (800b174 <RemapAndLinkDMAtoUARTRx+0x624>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d01b      	beq.n	800af88 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800af50:	4a89      	ldr	r2, [pc, #548]	; (800b178 <RemapAndLinkDMAtoUARTRx+0x628>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d023      	beq.n	800af9e <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800af56:	4a89      	ldr	r2, [pc, #548]	; (800b17c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d02c      	beq.n	800afb6 <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800af5c:	4a88      	ldr	r2, [pc, #544]	; (800b180 <RemapAndLinkDMAtoUARTRx+0x630>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d035      	beq.n	800afce <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800af62:	4a88      	ldr	r2, [pc, #544]	; (800b184 <RemapAndLinkDMAtoUARTRx+0x634>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d03e      	beq.n	800afe6 <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800af68:	4a87      	ldr	r2, [pc, #540]	; (800b188 <RemapAndLinkDMAtoUARTRx+0x638>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d000      	beq.n	800af70 <RemapAndLinkDMAtoUARTRx+0x420>
 800af6e:	e637      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800af70:	4a86      	ldr	r2, [pc, #536]	; (800b18c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800af72:	23a8      	movs	r3, #168	; 0xa8
 800af74:	58d4      	ldr	r4, [r2, r3]
 800af76:	4d86      	ldr	r5, [pc, #536]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x640>)
 800af78:	402c      	ands	r4, r5
 800af7a:	50d4      	str	r4, [r2, r3]
 800af7c:	58d5      	ldr	r5, [r2, r3]
 800af7e:	24d0      	movs	r4, #208	; 0xd0
 800af80:	0124      	lsls	r4, r4, #4
 800af82:	432c      	orrs	r4, r5
 800af84:	50d4      	str	r4, [r2, r3]
 800af86:	e62b      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800af88:	4a82      	ldr	r2, [pc, #520]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x644>)
 800af8a:	23a8      	movs	r3, #168	; 0xa8
 800af8c:	58d4      	ldr	r4, [r2, r3]
 800af8e:	250f      	movs	r5, #15
 800af90:	43ac      	bics	r4, r5
 800af92:	50d4      	str	r4, [r2, r3]
 800af94:	58d4      	ldr	r4, [r2, r3]
 800af96:	3d02      	subs	r5, #2
 800af98:	432c      	orrs	r4, r5
 800af9a:	50d4      	str	r4, [r2, r3]
 800af9c:	e620      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800af9e:	4a7d      	ldr	r2, [pc, #500]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x644>)
 800afa0:	23a8      	movs	r3, #168	; 0xa8
 800afa2:	58d4      	ldr	r4, [r2, r3]
 800afa4:	4d7a      	ldr	r5, [pc, #488]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x640>)
 800afa6:	402c      	ands	r4, r5
 800afa8:	50d4      	str	r4, [r2, r3]
 800afaa:	58d5      	ldr	r5, [r2, r3]
 800afac:	24d0      	movs	r4, #208	; 0xd0
 800afae:	0124      	lsls	r4, r4, #4
 800afb0:	432c      	orrs	r4, r5
 800afb2:	50d4      	str	r4, [r2, r3]
 800afb4:	e614      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800afb6:	4a77      	ldr	r2, [pc, #476]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x644>)
 800afb8:	23a8      	movs	r3, #168	; 0xa8
 800afba:	58d4      	ldr	r4, [r2, r3]
 800afbc:	4d76      	ldr	r5, [pc, #472]	; (800b198 <RemapAndLinkDMAtoUARTRx+0x648>)
 800afbe:	402c      	ands	r4, r5
 800afc0:	50d4      	str	r4, [r2, r3]
 800afc2:	58d5      	ldr	r5, [r2, r3]
 800afc4:	24d0      	movs	r4, #208	; 0xd0
 800afc6:	0324      	lsls	r4, r4, #12
 800afc8:	432c      	orrs	r4, r5
 800afca:	50d4      	str	r4, [r2, r3]
 800afcc:	e608      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800afce:	4a71      	ldr	r2, [pc, #452]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x644>)
 800afd0:	23a8      	movs	r3, #168	; 0xa8
 800afd2:	58d4      	ldr	r4, [r2, r3]
 800afd4:	4d71      	ldr	r5, [pc, #452]	; (800b19c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800afd6:	402c      	ands	r4, r5
 800afd8:	50d4      	str	r4, [r2, r3]
 800afda:	58d5      	ldr	r5, [r2, r3]
 800afdc:	24d0      	movs	r4, #208	; 0xd0
 800afde:	0424      	lsls	r4, r4, #16
 800afe0:	432c      	orrs	r4, r5
 800afe2:	50d4      	str	r4, [r2, r3]
 800afe4:	e5fc      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800afe6:	4a69      	ldr	r2, [pc, #420]	; (800b18c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800afe8:	23a8      	movs	r3, #168	; 0xa8
 800afea:	58d4      	ldr	r4, [r2, r3]
 800afec:	25f0      	movs	r5, #240	; 0xf0
 800afee:	43ac      	bics	r4, r5
 800aff0:	50d4      	str	r4, [r2, r3]
 800aff2:	58d4      	ldr	r4, [r2, r3]
 800aff4:	3d20      	subs	r5, #32
 800aff6:	432c      	orrs	r4, r5
 800aff8:	50d4      	str	r4, [r2, r3]
 800affa:	e5f1      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800affc:	4a69      	ldr	r2, [pc, #420]	; (800b1a4 <RemapAndLinkDMAtoUARTRx+0x654>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d159      	bne.n	800b0b6 <RemapAndLinkDMAtoUARTRx+0x566>
 800b002:	680b      	ldr	r3, [r1, #0]
 800b004:	4a5b      	ldr	r2, [pc, #364]	; (800b174 <RemapAndLinkDMAtoUARTRx+0x624>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d01b      	beq.n	800b042 <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800b00a:	4a5b      	ldr	r2, [pc, #364]	; (800b178 <RemapAndLinkDMAtoUARTRx+0x628>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d023      	beq.n	800b058 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800b010:	4a5a      	ldr	r2, [pc, #360]	; (800b17c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d02c      	beq.n	800b070 <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800b016:	4a5a      	ldr	r2, [pc, #360]	; (800b180 <RemapAndLinkDMAtoUARTRx+0x630>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d035      	beq.n	800b088 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800b01c:	4a59      	ldr	r2, [pc, #356]	; (800b184 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d03e      	beq.n	800b0a0 <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800b022:	4a59      	ldr	r2, [pc, #356]	; (800b188 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d000      	beq.n	800b02a <RemapAndLinkDMAtoUARTRx+0x4da>
 800b028:	e5da      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800b02a:	4a58      	ldr	r2, [pc, #352]	; (800b18c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b02c:	23a8      	movs	r3, #168	; 0xa8
 800b02e:	58d4      	ldr	r4, [r2, r3]
 800b030:	4d57      	ldr	r5, [pc, #348]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b032:	402c      	ands	r4, r5
 800b034:	50d4      	str	r4, [r2, r3]
 800b036:	58d5      	ldr	r5, [r2, r3]
 800b038:	24e0      	movs	r4, #224	; 0xe0
 800b03a:	0124      	lsls	r4, r4, #4
 800b03c:	432c      	orrs	r4, r5
 800b03e:	50d4      	str	r4, [r2, r3]
 800b040:	e5ce      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800b042:	4a54      	ldr	r2, [pc, #336]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b044:	23a8      	movs	r3, #168	; 0xa8
 800b046:	58d4      	ldr	r4, [r2, r3]
 800b048:	250f      	movs	r5, #15
 800b04a:	43ac      	bics	r4, r5
 800b04c:	50d4      	str	r4, [r2, r3]
 800b04e:	58d4      	ldr	r4, [r2, r3]
 800b050:	3d01      	subs	r5, #1
 800b052:	432c      	orrs	r4, r5
 800b054:	50d4      	str	r4, [r2, r3]
 800b056:	e5c3      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800b058:	4a4e      	ldr	r2, [pc, #312]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b05a:	23a8      	movs	r3, #168	; 0xa8
 800b05c:	58d4      	ldr	r4, [r2, r3]
 800b05e:	4d4c      	ldr	r5, [pc, #304]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b060:	402c      	ands	r4, r5
 800b062:	50d4      	str	r4, [r2, r3]
 800b064:	58d5      	ldr	r5, [r2, r3]
 800b066:	24e0      	movs	r4, #224	; 0xe0
 800b068:	0124      	lsls	r4, r4, #4
 800b06a:	432c      	orrs	r4, r5
 800b06c:	50d4      	str	r4, [r2, r3]
 800b06e:	e5b7      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800b070:	4a48      	ldr	r2, [pc, #288]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b072:	23a8      	movs	r3, #168	; 0xa8
 800b074:	58d4      	ldr	r4, [r2, r3]
 800b076:	4d48      	ldr	r5, [pc, #288]	; (800b198 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b078:	402c      	ands	r4, r5
 800b07a:	50d4      	str	r4, [r2, r3]
 800b07c:	58d5      	ldr	r5, [r2, r3]
 800b07e:	24e0      	movs	r4, #224	; 0xe0
 800b080:	0324      	lsls	r4, r4, #12
 800b082:	432c      	orrs	r4, r5
 800b084:	50d4      	str	r4, [r2, r3]
 800b086:	e5ab      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800b088:	4a42      	ldr	r2, [pc, #264]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b08a:	23a8      	movs	r3, #168	; 0xa8
 800b08c:	58d4      	ldr	r4, [r2, r3]
 800b08e:	4d43      	ldr	r5, [pc, #268]	; (800b19c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b090:	402c      	ands	r4, r5
 800b092:	50d4      	str	r4, [r2, r3]
 800b094:	58d5      	ldr	r5, [r2, r3]
 800b096:	24e0      	movs	r4, #224	; 0xe0
 800b098:	0424      	lsls	r4, r4, #16
 800b09a:	432c      	orrs	r4, r5
 800b09c:	50d4      	str	r4, [r2, r3]
 800b09e:	e59f      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800b0a0:	4a3a      	ldr	r2, [pc, #232]	; (800b18c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b0a2:	23a8      	movs	r3, #168	; 0xa8
 800b0a4:	58d4      	ldr	r4, [r2, r3]
 800b0a6:	25f0      	movs	r5, #240	; 0xf0
 800b0a8:	43ac      	bics	r4, r5
 800b0aa:	50d4      	str	r4, [r2, r3]
 800b0ac:	58d4      	ldr	r4, [r2, r3]
 800b0ae:	3d10      	subs	r5, #16
 800b0b0:	432c      	orrs	r4, r5
 800b0b2:	50d4      	str	r4, [r2, r3]
 800b0b4:	e594      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800b0b6:	4a3c      	ldr	r2, [pc, #240]	; (800b1a8 <RemapAndLinkDMAtoUARTRx+0x658>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d000      	beq.n	800b0be <RemapAndLinkDMAtoUARTRx+0x56e>
 800b0bc:	e590      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
 800b0be:	680b      	ldr	r3, [r1, #0]
 800b0c0:	4a2c      	ldr	r2, [pc, #176]	; (800b174 <RemapAndLinkDMAtoUARTRx+0x624>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d01b      	beq.n	800b0fe <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800b0c6:	4a2c      	ldr	r2, [pc, #176]	; (800b178 <RemapAndLinkDMAtoUARTRx+0x628>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d022      	beq.n	800b112 <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800b0cc:	4a2b      	ldr	r2, [pc, #172]	; (800b17c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d02b      	beq.n	800b12a <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800b0d2:	4a2b      	ldr	r2, [pc, #172]	; (800b180 <RemapAndLinkDMAtoUARTRx+0x630>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d034      	beq.n	800b142 <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800b0d8:	4a2a      	ldr	r2, [pc, #168]	; (800b184 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d03d      	beq.n	800b15a <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800b0de:	4a2a      	ldr	r2, [pc, #168]	; (800b188 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d000      	beq.n	800b0e6 <RemapAndLinkDMAtoUARTRx+0x596>
 800b0e4:	e57c      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800b0e6:	4a29      	ldr	r2, [pc, #164]	; (800b18c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b0e8:	23a8      	movs	r3, #168	; 0xa8
 800b0ea:	58d4      	ldr	r4, [r2, r3]
 800b0ec:	4d28      	ldr	r5, [pc, #160]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b0ee:	402c      	ands	r4, r5
 800b0f0:	50d4      	str	r4, [r2, r3]
 800b0f2:	58d5      	ldr	r5, [r2, r3]
 800b0f4:	24f0      	movs	r4, #240	; 0xf0
 800b0f6:	0124      	lsls	r4, r4, #4
 800b0f8:	432c      	orrs	r4, r5
 800b0fa:	50d4      	str	r4, [r2, r3]
 800b0fc:	e570      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800b0fe:	4a25      	ldr	r2, [pc, #148]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b100:	23a8      	movs	r3, #168	; 0xa8
 800b102:	58d5      	ldr	r5, [r2, r3]
 800b104:	260f      	movs	r6, #15
 800b106:	43b5      	bics	r5, r6
 800b108:	50d5      	str	r5, [r2, r3]
 800b10a:	58d4      	ldr	r4, [r2, r3]
 800b10c:	4334      	orrs	r4, r6
 800b10e:	50d4      	str	r4, [r2, r3]
 800b110:	e566      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800b112:	4a20      	ldr	r2, [pc, #128]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b114:	23a8      	movs	r3, #168	; 0xa8
 800b116:	58d4      	ldr	r4, [r2, r3]
 800b118:	4d1d      	ldr	r5, [pc, #116]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b11a:	402c      	ands	r4, r5
 800b11c:	50d4      	str	r4, [r2, r3]
 800b11e:	58d5      	ldr	r5, [r2, r3]
 800b120:	24f0      	movs	r4, #240	; 0xf0
 800b122:	0124      	lsls	r4, r4, #4
 800b124:	432c      	orrs	r4, r5
 800b126:	50d4      	str	r4, [r2, r3]
 800b128:	e55a      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800b12a:	4a1a      	ldr	r2, [pc, #104]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b12c:	23a8      	movs	r3, #168	; 0xa8
 800b12e:	58d4      	ldr	r4, [r2, r3]
 800b130:	4d19      	ldr	r5, [pc, #100]	; (800b198 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b132:	402c      	ands	r4, r5
 800b134:	50d4      	str	r4, [r2, r3]
 800b136:	58d5      	ldr	r5, [r2, r3]
 800b138:	24f0      	movs	r4, #240	; 0xf0
 800b13a:	0324      	lsls	r4, r4, #12
 800b13c:	432c      	orrs	r4, r5
 800b13e:	50d4      	str	r4, [r2, r3]
 800b140:	e54e      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800b142:	4a14      	ldr	r2, [pc, #80]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b144:	23a8      	movs	r3, #168	; 0xa8
 800b146:	58d4      	ldr	r4, [r2, r3]
 800b148:	4d14      	ldr	r5, [pc, #80]	; (800b19c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b14a:	402c      	ands	r4, r5
 800b14c:	50d4      	str	r4, [r2, r3]
 800b14e:	58d5      	ldr	r5, [r2, r3]
 800b150:	24f0      	movs	r4, #240	; 0xf0
 800b152:	0424      	lsls	r4, r4, #16
 800b154:	432c      	orrs	r4, r5
 800b156:	50d4      	str	r4, [r2, r3]
 800b158:	e542      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800b15a:	4a0c      	ldr	r2, [pc, #48]	; (800b18c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b15c:	23a8      	movs	r3, #168	; 0xa8
 800b15e:	58d5      	ldr	r5, [r2, r3]
 800b160:	26f0      	movs	r6, #240	; 0xf0
 800b162:	43b5      	bics	r5, r6
 800b164:	50d5      	str	r5, [r2, r3]
 800b166:	58d4      	ldr	r4, [r2, r3]
 800b168:	4334      	orrs	r4, r6
 800b16a:	50d4      	str	r4, [r2, r3]
 800b16c:	e538      	b.n	800abe0 <RemapAndLinkDMAtoUARTRx+0x90>
 800b16e:	46c0      	nop			; (mov r8, r8)
 800b170:	40005000 	.word	0x40005000
 800b174:	40020008 	.word	0x40020008
 800b178:	40020030 	.word	0x40020030
 800b17c:	40020058 	.word	0x40020058
 800b180:	4002006c 	.word	0x4002006c
 800b184:	4002041c 	.word	0x4002041c
 800b188:	40020430 	.word	0x40020430
 800b18c:	40020400 	.word	0x40020400
 800b190:	fffff0ff 	.word	0xfffff0ff
 800b194:	40020000 	.word	0x40020000
 800b198:	fff0ffff 	.word	0xfff0ffff
 800b19c:	ff0fffff 	.word	0xff0fffff
 800b1a0:	40011400 	.word	0x40011400
 800b1a4:	40011800 	.word	0x40011800
 800b1a8:	40011c00 	.word	0x40011c00

0800b1ac <DMA_MSG_RX_Setup>:
{	
 800b1ac:	b570      	push	{r4, r5, r6, lr}
 800b1ae:	0004      	movs	r4, r0
 800b1b0:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b1b2:	f7ff fccd 	bl	800ab50 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	0028      	movs	r0, r5
 800b1ba:	f7ff fc13 	bl	800a9e4 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800b1be:	0020      	movs	r0, r4
 800b1c0:	f7ff fb52 	bl	800a868 <GetPort>
 800b1c4:	1e41      	subs	r1, r0, #1
 800b1c6:	0189      	lsls	r1, r1, #6
 800b1c8:	4803      	ldr	r0, [pc, #12]	; (800b1d8 <DMA_MSG_RX_Setup+0x2c>)
 800b1ca:	1809      	adds	r1, r1, r0
 800b1cc:	2240      	movs	r2, #64	; 0x40
 800b1ce:	0020      	movs	r0, r4
 800b1d0:	f005 fd0a 	bl	8010be8 <HAL_UART_Receive_DMA>
}
 800b1d4:	bd70      	pop	{r4, r5, r6, pc}
 800b1d6:	46c0      	nop			; (mov r8, r8)
 800b1d8:	200012d0 	.word	0x200012d0

0800b1dc <SetupMessagingRxDMAs>:
{	
 800b1dc:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800b1de:	4b1b      	ldr	r3, [pc, #108]	; (800b24c <SetupMessagingRxDMAs+0x70>)
 800b1e0:	785b      	ldrb	r3, [r3, #1]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d014      	beq.n	800b210 <SetupMessagingRxDMAs+0x34>
	if (portStatus[P2] == FREE)	
 800b1e6:	4b19      	ldr	r3, [pc, #100]	; (800b24c <SetupMessagingRxDMAs+0x70>)
 800b1e8:	789b      	ldrb	r3, [r3, #2]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d015      	beq.n	800b21a <SetupMessagingRxDMAs+0x3e>
	if (portStatus[P3] == FREE)
 800b1ee:	4b17      	ldr	r3, [pc, #92]	; (800b24c <SetupMessagingRxDMAs+0x70>)
 800b1f0:	78db      	ldrb	r3, [r3, #3]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d016      	beq.n	800b224 <SetupMessagingRxDMAs+0x48>
	if (portStatus[P4] == FREE)
 800b1f6:	4b15      	ldr	r3, [pc, #84]	; (800b24c <SetupMessagingRxDMAs+0x70>)
 800b1f8:	791b      	ldrb	r3, [r3, #4]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d017      	beq.n	800b22e <SetupMessagingRxDMAs+0x52>
	if (portStatus[P5] == FREE)
 800b1fe:	4b13      	ldr	r3, [pc, #76]	; (800b24c <SetupMessagingRxDMAs+0x70>)
 800b200:	795b      	ldrb	r3, [r3, #5]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d018      	beq.n	800b238 <SetupMessagingRxDMAs+0x5c>
	if (portStatus[P6] == FREE)
 800b206:	4b11      	ldr	r3, [pc, #68]	; (800b24c <SetupMessagingRxDMAs+0x70>)
 800b208:	799b      	ldrb	r3, [r3, #6]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d019      	beq.n	800b242 <SetupMessagingRxDMAs+0x66>
}
 800b20e:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800b210:	490f      	ldr	r1, [pc, #60]	; (800b250 <SetupMessagingRxDMAs+0x74>)
 800b212:	4810      	ldr	r0, [pc, #64]	; (800b254 <SetupMessagingRxDMAs+0x78>)
 800b214:	f7ff ffca 	bl	800b1ac <DMA_MSG_RX_Setup>
 800b218:	e7e5      	b.n	800b1e6 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800b21a:	490f      	ldr	r1, [pc, #60]	; (800b258 <SetupMessagingRxDMAs+0x7c>)
 800b21c:	480f      	ldr	r0, [pc, #60]	; (800b25c <SetupMessagingRxDMAs+0x80>)
 800b21e:	f7ff ffc5 	bl	800b1ac <DMA_MSG_RX_Setup>
 800b222:	e7e4      	b.n	800b1ee <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800b224:	490e      	ldr	r1, [pc, #56]	; (800b260 <SetupMessagingRxDMAs+0x84>)
 800b226:	480f      	ldr	r0, [pc, #60]	; (800b264 <SetupMessagingRxDMAs+0x88>)
 800b228:	f7ff ffc0 	bl	800b1ac <DMA_MSG_RX_Setup>
 800b22c:	e7e3      	b.n	800b1f6 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800b22e:	490e      	ldr	r1, [pc, #56]	; (800b268 <SetupMessagingRxDMAs+0x8c>)
 800b230:	480e      	ldr	r0, [pc, #56]	; (800b26c <SetupMessagingRxDMAs+0x90>)
 800b232:	f7ff ffbb 	bl	800b1ac <DMA_MSG_RX_Setup>
 800b236:	e7e2      	b.n	800b1fe <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800b238:	490d      	ldr	r1, [pc, #52]	; (800b270 <SetupMessagingRxDMAs+0x94>)
 800b23a:	480e      	ldr	r0, [pc, #56]	; (800b274 <SetupMessagingRxDMAs+0x98>)
 800b23c:	f7ff ffb6 	bl	800b1ac <DMA_MSG_RX_Setup>
 800b240:	e7e1      	b.n	800b206 <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800b242:	490d      	ldr	r1, [pc, #52]	; (800b278 <SetupMessagingRxDMAs+0x9c>)
 800b244:	480d      	ldr	r0, [pc, #52]	; (800b27c <SetupMessagingRxDMAs+0xa0>)
 800b246:	f7ff ffb1 	bl	800b1ac <DMA_MSG_RX_Setup>
}
 800b24a:	e7e0      	b.n	800b20e <SetupMessagingRxDMAs+0x32>
 800b24c:	200010f8 	.word	0x200010f8
 800b250:	20001760 	.word	0x20001760
 800b254:	20006c1c 	.word	0x20006c1c
 800b258:	20001798 	.word	0x20001798
 800b25c:	20006c8c 	.word	0x20006c8c
 800b260:	200017d0 	.word	0x200017d0
 800b264:	20006bac 	.word	0x20006bac
 800b268:	20001808 	.word	0x20001808
 800b26c:	20006b3c 	.word	0x20006b3c
 800b270:	20001840 	.word	0x20001840
 800b274:	20006acc 	.word	0x20006acc
 800b278:	20001878 	.word	0x20001878
 800b27c:	20006a5c 	.word	0x20006a5c

0800b280 <DMA_STREAM_Setup>:
{	
 800b280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b282:	0005      	movs	r5, r0
 800b284:	000f      	movs	r7, r1
 800b286:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800b288:	f7ff faee 	bl	800a868 <GetPort>
	hDMA = &streamDMA[port-1];
 800b28c:	3801      	subs	r0, #1
 800b28e:	00c4      	lsls	r4, r0, #3
 800b290:	1a24      	subs	r4, r4, r0
 800b292:	00e4      	lsls	r4, r4, #3
 800b294:	4809      	ldr	r0, [pc, #36]	; (800b2bc <DMA_STREAM_Setup+0x3c>)
 800b296:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800b298:	0021      	movs	r1, r4
 800b29a:	0028      	movs	r0, r5
 800b29c:	f7ff fc58 	bl	800ab50 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800b2a0:	2101      	movs	r1, #1
 800b2a2:	0020      	movs	r0, r4
 800b2a4:	f7ff fb9e 	bl	800a9e4 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800b2a8:	2369      	movs	r3, #105	; 0x69
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	3128      	adds	r1, #40	; 0x28
 800b2b2:	0032      	movs	r2, r6
 800b2b4:	0028      	movs	r0, r5
 800b2b6:	f005 fc97 	bl	8010be8 <HAL_UART_Receive_DMA>
}
 800b2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2bc:	20001958 	.word	0x20001958

0800b2c0 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800b2c0:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800b2c2:	6803      	ldr	r3, [r0, #0]
 800b2c4:	4abd      	ldr	r2, [pc, #756]	; (800b5bc <RemapAndLinkDMAtoUARTTx+0x2fc>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d02f      	beq.n	800b32a <RemapAndLinkDMAtoUARTTx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800b2ca:	4abd      	ldr	r2, [pc, #756]	; (800b5c0 <RemapAndLinkDMAtoUARTTx+0x300>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d100      	bne.n	800b2d2 <RemapAndLinkDMAtoUARTTx+0x12>
 800b2d0:	e087      	b.n	800b3e2 <RemapAndLinkDMAtoUARTTx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800b2d2:	4abc      	ldr	r2, [pc, #752]	; (800b5c4 <RemapAndLinkDMAtoUARTTx+0x304>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d100      	bne.n	800b2da <RemapAndLinkDMAtoUARTTx+0x1a>
 800b2d8:	e0dc      	b.n	800b494 <RemapAndLinkDMAtoUARTTx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800b2da:	4abb      	ldr	r2, [pc, #748]	; (800b5c8 <RemapAndLinkDMAtoUARTTx+0x308>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d000      	beq.n	800b2e2 <RemapAndLinkDMAtoUARTTx+0x22>
 800b2e0:	e18a      	b.n	800b5f8 <RemapAndLinkDMAtoUARTTx+0x338>
 800b2e2:	680b      	ldr	r3, [r1, #0]
 800b2e4:	4ab9      	ldr	r2, [pc, #740]	; (800b5cc <RemapAndLinkDMAtoUARTTx+0x30c>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d100      	bne.n	800b2ec <RemapAndLinkDMAtoUARTTx+0x2c>
 800b2ea:	e12d      	b.n	800b548 <RemapAndLinkDMAtoUARTTx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800b2ec:	4ab8      	ldr	r2, [pc, #736]	; (800b5d0 <RemapAndLinkDMAtoUARTTx+0x310>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d100      	bne.n	800b2f4 <RemapAndLinkDMAtoUARTTx+0x34>
 800b2f2:	e134      	b.n	800b55e <RemapAndLinkDMAtoUARTTx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800b2f4:	4ab7      	ldr	r2, [pc, #732]	; (800b5d4 <RemapAndLinkDMAtoUARTTx+0x314>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d100      	bne.n	800b2fc <RemapAndLinkDMAtoUARTTx+0x3c>
 800b2fa:	e13c      	b.n	800b576 <RemapAndLinkDMAtoUARTTx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800b2fc:	4ab6      	ldr	r2, [pc, #728]	; (800b5d8 <RemapAndLinkDMAtoUARTTx+0x318>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d100      	bne.n	800b304 <RemapAndLinkDMAtoUARTTx+0x44>
 800b302:	e144      	b.n	800b58e <RemapAndLinkDMAtoUARTTx+0x2ce>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800b304:	4ab5      	ldr	r2, [pc, #724]	; (800b5dc <RemapAndLinkDMAtoUARTTx+0x31c>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d100      	bne.n	800b30c <RemapAndLinkDMAtoUARTTx+0x4c>
 800b30a:	e14b      	b.n	800b5a4 <RemapAndLinkDMAtoUARTTx+0x2e4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800b30c:	4ab4      	ldr	r2, [pc, #720]	; (800b5e0 <RemapAndLinkDMAtoUARTTx+0x320>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d11e      	bne.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800b312:	4ab4      	ldr	r2, [pc, #720]	; (800b5e4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800b314:	23a8      	movs	r3, #168	; 0xa8
 800b316:	58d4      	ldr	r4, [r2, r3]
 800b318:	4db3      	ldr	r5, [pc, #716]	; (800b5e8 <RemapAndLinkDMAtoUARTTx+0x328>)
 800b31a:	402c      	ands	r4, r5
 800b31c:	50d4      	str	r4, [r2, r3]
 800b31e:	58d5      	ldr	r5, [r2, r3]
 800b320:	24b0      	movs	r4, #176	; 0xb0
 800b322:	0324      	lsls	r4, r4, #12
 800b324:	432c      	orrs	r4, r5
 800b326:	50d4      	str	r4, [r2, r3]
 800b328:	e012      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800b32a:	680b      	ldr	r3, [r1, #0]
 800b32c:	4aa7      	ldr	r2, [pc, #668]	; (800b5cc <RemapAndLinkDMAtoUARTTx+0x30c>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d011      	beq.n	800b356 <RemapAndLinkDMAtoUARTTx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800b332:	4aa7      	ldr	r2, [pc, #668]	; (800b5d0 <RemapAndLinkDMAtoUARTTx+0x310>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d019      	beq.n	800b36c <RemapAndLinkDMAtoUARTTx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800b338:	4aa6      	ldr	r2, [pc, #664]	; (800b5d4 <RemapAndLinkDMAtoUARTTx+0x314>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d022      	beq.n	800b384 <RemapAndLinkDMAtoUARTTx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800b33e:	4aa6      	ldr	r2, [pc, #664]	; (800b5d8 <RemapAndLinkDMAtoUARTTx+0x318>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d02b      	beq.n	800b39c <RemapAndLinkDMAtoUARTTx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800b344:	4aa5      	ldr	r2, [pc, #660]	; (800b5dc <RemapAndLinkDMAtoUARTTx+0x31c>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d033      	beq.n	800b3b2 <RemapAndLinkDMAtoUARTTx+0xf2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800b34a:	4aa5      	ldr	r2, [pc, #660]	; (800b5e0 <RemapAndLinkDMAtoUARTTx+0x320>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d03c      	beq.n	800b3ca <RemapAndLinkDMAtoUARTTx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800b350:	6601      	str	r1, [r0, #96]	; 0x60
 800b352:	6248      	str	r0, [r1, #36]	; 0x24
}
 800b354:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800b356:	4aa5      	ldr	r2, [pc, #660]	; (800b5ec <RemapAndLinkDMAtoUARTTx+0x32c>)
 800b358:	23a8      	movs	r3, #168	; 0xa8
 800b35a:	58d4      	ldr	r4, [r2, r3]
 800b35c:	25f0      	movs	r5, #240	; 0xf0
 800b35e:	43ac      	bics	r4, r5
 800b360:	50d4      	str	r4, [r2, r3]
 800b362:	58d4      	ldr	r4, [r2, r3]
 800b364:	3d70      	subs	r5, #112	; 0x70
 800b366:	432c      	orrs	r4, r5
 800b368:	50d4      	str	r4, [r2, r3]
 800b36a:	e7f1      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800b36c:	4a9f      	ldr	r2, [pc, #636]	; (800b5ec <RemapAndLinkDMAtoUARTTx+0x32c>)
 800b36e:	23a8      	movs	r3, #168	; 0xa8
 800b370:	58d4      	ldr	r4, [r2, r3]
 800b372:	4d9f      	ldr	r5, [pc, #636]	; (800b5f0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800b374:	402c      	ands	r4, r5
 800b376:	50d4      	str	r4, [r2, r3]
 800b378:	58d5      	ldr	r5, [r2, r3]
 800b37a:	2480      	movs	r4, #128	; 0x80
 800b37c:	0224      	lsls	r4, r4, #8
 800b37e:	432c      	orrs	r4, r5
 800b380:	50d4      	str	r4, [r2, r3]
 800b382:	e7e5      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800b384:	4a99      	ldr	r2, [pc, #612]	; (800b5ec <RemapAndLinkDMAtoUARTTx+0x32c>)
 800b386:	23a8      	movs	r3, #168	; 0xa8
 800b388:	58d4      	ldr	r4, [r2, r3]
 800b38a:	4d9a      	ldr	r5, [pc, #616]	; (800b5f4 <RemapAndLinkDMAtoUARTTx+0x334>)
 800b38c:	402c      	ands	r4, r5
 800b38e:	50d4      	str	r4, [r2, r3]
 800b390:	58d5      	ldr	r5, [r2, r3]
 800b392:	2480      	movs	r4, #128	; 0x80
 800b394:	0524      	lsls	r4, r4, #20
 800b396:	432c      	orrs	r4, r5
 800b398:	50d4      	str	r4, [r2, r3]
 800b39a:	e7d9      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800b39c:	4a91      	ldr	r2, [pc, #580]	; (800b5e4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800b39e:	23a8      	movs	r3, #168	; 0xa8
 800b3a0:	58d4      	ldr	r4, [r2, r3]
 800b3a2:	250f      	movs	r5, #15
 800b3a4:	43ac      	bics	r4, r5
 800b3a6:	50d4      	str	r4, [r2, r3]
 800b3a8:	58d4      	ldr	r4, [r2, r3]
 800b3aa:	3d07      	subs	r5, #7
 800b3ac:	432c      	orrs	r4, r5
 800b3ae:	50d4      	str	r4, [r2, r3]
 800b3b0:	e7ce      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800b3b2:	4a8c      	ldr	r2, [pc, #560]	; (800b5e4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800b3b4:	23a8      	movs	r3, #168	; 0xa8
 800b3b6:	58d4      	ldr	r4, [r2, r3]
 800b3b8:	4d8d      	ldr	r5, [pc, #564]	; (800b5f0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800b3ba:	402c      	ands	r4, r5
 800b3bc:	50d4      	str	r4, [r2, r3]
 800b3be:	58d5      	ldr	r5, [r2, r3]
 800b3c0:	2480      	movs	r4, #128	; 0x80
 800b3c2:	0224      	lsls	r4, r4, #8
 800b3c4:	432c      	orrs	r4, r5
 800b3c6:	50d4      	str	r4, [r2, r3]
 800b3c8:	e7c2      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800b3ca:	4a86      	ldr	r2, [pc, #536]	; (800b5e4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800b3cc:	23a8      	movs	r3, #168	; 0xa8
 800b3ce:	58d4      	ldr	r4, [r2, r3]
 800b3d0:	4d85      	ldr	r5, [pc, #532]	; (800b5e8 <RemapAndLinkDMAtoUARTTx+0x328>)
 800b3d2:	402c      	ands	r4, r5
 800b3d4:	50d4      	str	r4, [r2, r3]
 800b3d6:	58d5      	ldr	r5, [r2, r3]
 800b3d8:	2480      	movs	r4, #128	; 0x80
 800b3da:	0324      	lsls	r4, r4, #12
 800b3dc:	432c      	orrs	r4, r5
 800b3de:	50d4      	str	r4, [r2, r3]
 800b3e0:	e7b6      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800b3e2:	680b      	ldr	r3, [r1, #0]
 800b3e4:	4a79      	ldr	r2, [pc, #484]	; (800b5cc <RemapAndLinkDMAtoUARTTx+0x30c>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d01a      	beq.n	800b420 <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800b3ea:	4a79      	ldr	r2, [pc, #484]	; (800b5d0 <RemapAndLinkDMAtoUARTTx+0x310>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d022      	beq.n	800b436 <RemapAndLinkDMAtoUARTTx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800b3f0:	4a78      	ldr	r2, [pc, #480]	; (800b5d4 <RemapAndLinkDMAtoUARTTx+0x314>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d02b      	beq.n	800b44e <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800b3f6:	4a78      	ldr	r2, [pc, #480]	; (800b5d8 <RemapAndLinkDMAtoUARTTx+0x318>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d034      	beq.n	800b466 <RemapAndLinkDMAtoUARTTx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800b3fc:	4a77      	ldr	r2, [pc, #476]	; (800b5dc <RemapAndLinkDMAtoUARTTx+0x31c>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d03c      	beq.n	800b47c <RemapAndLinkDMAtoUARTTx+0x1bc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800b402:	4a77      	ldr	r2, [pc, #476]	; (800b5e0 <RemapAndLinkDMAtoUARTTx+0x320>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d1a3      	bne.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800b408:	4a76      	ldr	r2, [pc, #472]	; (800b5e4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800b40a:	23a8      	movs	r3, #168	; 0xa8
 800b40c:	58d4      	ldr	r4, [r2, r3]
 800b40e:	4d76      	ldr	r5, [pc, #472]	; (800b5e8 <RemapAndLinkDMAtoUARTTx+0x328>)
 800b410:	402c      	ands	r4, r5
 800b412:	50d4      	str	r4, [r2, r3]
 800b414:	58d5      	ldr	r5, [r2, r3]
 800b416:	2490      	movs	r4, #144	; 0x90
 800b418:	0324      	lsls	r4, r4, #12
 800b41a:	432c      	orrs	r4, r5
 800b41c:	50d4      	str	r4, [r2, r3]
 800b41e:	e797      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800b420:	4a72      	ldr	r2, [pc, #456]	; (800b5ec <RemapAndLinkDMAtoUARTTx+0x32c>)
 800b422:	23a8      	movs	r3, #168	; 0xa8
 800b424:	58d4      	ldr	r4, [r2, r3]
 800b426:	25f0      	movs	r5, #240	; 0xf0
 800b428:	43ac      	bics	r4, r5
 800b42a:	50d4      	str	r4, [r2, r3]
 800b42c:	58d4      	ldr	r4, [r2, r3]
 800b42e:	3d60      	subs	r5, #96	; 0x60
 800b430:	432c      	orrs	r4, r5
 800b432:	50d4      	str	r4, [r2, r3]
 800b434:	e78c      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800b436:	4a6d      	ldr	r2, [pc, #436]	; (800b5ec <RemapAndLinkDMAtoUARTTx+0x32c>)
 800b438:	23a8      	movs	r3, #168	; 0xa8
 800b43a:	58d4      	ldr	r4, [r2, r3]
 800b43c:	4d6c      	ldr	r5, [pc, #432]	; (800b5f0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800b43e:	402c      	ands	r4, r5
 800b440:	50d4      	str	r4, [r2, r3]
 800b442:	58d5      	ldr	r5, [r2, r3]
 800b444:	2490      	movs	r4, #144	; 0x90
 800b446:	0224      	lsls	r4, r4, #8
 800b448:	432c      	orrs	r4, r5
 800b44a:	50d4      	str	r4, [r2, r3]
 800b44c:	e780      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800b44e:	4a67      	ldr	r2, [pc, #412]	; (800b5ec <RemapAndLinkDMAtoUARTTx+0x32c>)
 800b450:	23a8      	movs	r3, #168	; 0xa8
 800b452:	58d4      	ldr	r4, [r2, r3]
 800b454:	4d67      	ldr	r5, [pc, #412]	; (800b5f4 <RemapAndLinkDMAtoUARTTx+0x334>)
 800b456:	402c      	ands	r4, r5
 800b458:	50d4      	str	r4, [r2, r3]
 800b45a:	58d5      	ldr	r5, [r2, r3]
 800b45c:	2490      	movs	r4, #144	; 0x90
 800b45e:	0524      	lsls	r4, r4, #20
 800b460:	432c      	orrs	r4, r5
 800b462:	50d4      	str	r4, [r2, r3]
 800b464:	e774      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800b466:	4a5f      	ldr	r2, [pc, #380]	; (800b5e4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800b468:	23a8      	movs	r3, #168	; 0xa8
 800b46a:	58d4      	ldr	r4, [r2, r3]
 800b46c:	250f      	movs	r5, #15
 800b46e:	43ac      	bics	r4, r5
 800b470:	50d4      	str	r4, [r2, r3]
 800b472:	58d4      	ldr	r4, [r2, r3]
 800b474:	3d06      	subs	r5, #6
 800b476:	432c      	orrs	r4, r5
 800b478:	50d4      	str	r4, [r2, r3]
 800b47a:	e769      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800b47c:	4a59      	ldr	r2, [pc, #356]	; (800b5e4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800b47e:	23a8      	movs	r3, #168	; 0xa8
 800b480:	58d4      	ldr	r4, [r2, r3]
 800b482:	4d5b      	ldr	r5, [pc, #364]	; (800b5f0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800b484:	402c      	ands	r4, r5
 800b486:	50d4      	str	r4, [r2, r3]
 800b488:	58d5      	ldr	r5, [r2, r3]
 800b48a:	2490      	movs	r4, #144	; 0x90
 800b48c:	0224      	lsls	r4, r4, #8
 800b48e:	432c      	orrs	r4, r5
 800b490:	50d4      	str	r4, [r2, r3]
 800b492:	e75d      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800b494:	680b      	ldr	r3, [r1, #0]
 800b496:	4a4d      	ldr	r2, [pc, #308]	; (800b5cc <RemapAndLinkDMAtoUARTTx+0x30c>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d01b      	beq.n	800b4d4 <RemapAndLinkDMAtoUARTTx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800b49c:	4a4c      	ldr	r2, [pc, #304]	; (800b5d0 <RemapAndLinkDMAtoUARTTx+0x310>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d023      	beq.n	800b4ea <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800b4a2:	4a4c      	ldr	r2, [pc, #304]	; (800b5d4 <RemapAndLinkDMAtoUARTTx+0x314>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d02c      	beq.n	800b502 <RemapAndLinkDMAtoUARTTx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800b4a8:	4a4b      	ldr	r2, [pc, #300]	; (800b5d8 <RemapAndLinkDMAtoUARTTx+0x318>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d035      	beq.n	800b51a <RemapAndLinkDMAtoUARTTx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800b4ae:	4a4b      	ldr	r2, [pc, #300]	; (800b5dc <RemapAndLinkDMAtoUARTTx+0x31c>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d03d      	beq.n	800b530 <RemapAndLinkDMAtoUARTTx+0x270>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800b4b4:	4a4a      	ldr	r2, [pc, #296]	; (800b5e0 <RemapAndLinkDMAtoUARTTx+0x320>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d000      	beq.n	800b4bc <RemapAndLinkDMAtoUARTTx+0x1fc>
 800b4ba:	e749      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800b4bc:	4a49      	ldr	r2, [pc, #292]	; (800b5e4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800b4be:	23a8      	movs	r3, #168	; 0xa8
 800b4c0:	58d4      	ldr	r4, [r2, r3]
 800b4c2:	4d49      	ldr	r5, [pc, #292]	; (800b5e8 <RemapAndLinkDMAtoUARTTx+0x328>)
 800b4c4:	402c      	ands	r4, r5
 800b4c6:	50d4      	str	r4, [r2, r3]
 800b4c8:	58d5      	ldr	r5, [r2, r3]
 800b4ca:	24a0      	movs	r4, #160	; 0xa0
 800b4cc:	0324      	lsls	r4, r4, #12
 800b4ce:	432c      	orrs	r4, r5
 800b4d0:	50d4      	str	r4, [r2, r3]
 800b4d2:	e73d      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800b4d4:	4a45      	ldr	r2, [pc, #276]	; (800b5ec <RemapAndLinkDMAtoUARTTx+0x32c>)
 800b4d6:	23a8      	movs	r3, #168	; 0xa8
 800b4d8:	58d4      	ldr	r4, [r2, r3]
 800b4da:	25f0      	movs	r5, #240	; 0xf0
 800b4dc:	43ac      	bics	r4, r5
 800b4de:	50d4      	str	r4, [r2, r3]
 800b4e0:	58d4      	ldr	r4, [r2, r3]
 800b4e2:	3d50      	subs	r5, #80	; 0x50
 800b4e4:	432c      	orrs	r4, r5
 800b4e6:	50d4      	str	r4, [r2, r3]
 800b4e8:	e732      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800b4ea:	4a40      	ldr	r2, [pc, #256]	; (800b5ec <RemapAndLinkDMAtoUARTTx+0x32c>)
 800b4ec:	23a8      	movs	r3, #168	; 0xa8
 800b4ee:	58d4      	ldr	r4, [r2, r3]
 800b4f0:	4d3f      	ldr	r5, [pc, #252]	; (800b5f0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800b4f2:	402c      	ands	r4, r5
 800b4f4:	50d4      	str	r4, [r2, r3]
 800b4f6:	58d5      	ldr	r5, [r2, r3]
 800b4f8:	24a0      	movs	r4, #160	; 0xa0
 800b4fa:	0224      	lsls	r4, r4, #8
 800b4fc:	432c      	orrs	r4, r5
 800b4fe:	50d4      	str	r4, [r2, r3]
 800b500:	e726      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800b502:	4a3a      	ldr	r2, [pc, #232]	; (800b5ec <RemapAndLinkDMAtoUARTTx+0x32c>)
 800b504:	23a8      	movs	r3, #168	; 0xa8
 800b506:	58d4      	ldr	r4, [r2, r3]
 800b508:	4d3a      	ldr	r5, [pc, #232]	; (800b5f4 <RemapAndLinkDMAtoUARTTx+0x334>)
 800b50a:	402c      	ands	r4, r5
 800b50c:	50d4      	str	r4, [r2, r3]
 800b50e:	58d5      	ldr	r5, [r2, r3]
 800b510:	24a0      	movs	r4, #160	; 0xa0
 800b512:	0524      	lsls	r4, r4, #20
 800b514:	432c      	orrs	r4, r5
 800b516:	50d4      	str	r4, [r2, r3]
 800b518:	e71a      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800b51a:	4a32      	ldr	r2, [pc, #200]	; (800b5e4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800b51c:	23a8      	movs	r3, #168	; 0xa8
 800b51e:	58d4      	ldr	r4, [r2, r3]
 800b520:	250f      	movs	r5, #15
 800b522:	43ac      	bics	r4, r5
 800b524:	50d4      	str	r4, [r2, r3]
 800b526:	58d4      	ldr	r4, [r2, r3]
 800b528:	3d05      	subs	r5, #5
 800b52a:	432c      	orrs	r4, r5
 800b52c:	50d4      	str	r4, [r2, r3]
 800b52e:	e70f      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800b530:	4a2c      	ldr	r2, [pc, #176]	; (800b5e4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800b532:	23a8      	movs	r3, #168	; 0xa8
 800b534:	58d4      	ldr	r4, [r2, r3]
 800b536:	4d2e      	ldr	r5, [pc, #184]	; (800b5f0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800b538:	402c      	ands	r4, r5
 800b53a:	50d4      	str	r4, [r2, r3]
 800b53c:	58d5      	ldr	r5, [r2, r3]
 800b53e:	24a0      	movs	r4, #160	; 0xa0
 800b540:	0224      	lsls	r4, r4, #8
 800b542:	432c      	orrs	r4, r5
 800b544:	50d4      	str	r4, [r2, r3]
 800b546:	e703      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800b548:	4a28      	ldr	r2, [pc, #160]	; (800b5ec <RemapAndLinkDMAtoUARTTx+0x32c>)
 800b54a:	23a8      	movs	r3, #168	; 0xa8
 800b54c:	58d4      	ldr	r4, [r2, r3]
 800b54e:	25f0      	movs	r5, #240	; 0xf0
 800b550:	43ac      	bics	r4, r5
 800b552:	50d4      	str	r4, [r2, r3]
 800b554:	58d4      	ldr	r4, [r2, r3]
 800b556:	3d40      	subs	r5, #64	; 0x40
 800b558:	432c      	orrs	r4, r5
 800b55a:	50d4      	str	r4, [r2, r3]
 800b55c:	e6f8      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800b55e:	4a23      	ldr	r2, [pc, #140]	; (800b5ec <RemapAndLinkDMAtoUARTTx+0x32c>)
 800b560:	23a8      	movs	r3, #168	; 0xa8
 800b562:	58d4      	ldr	r4, [r2, r3]
 800b564:	4d22      	ldr	r5, [pc, #136]	; (800b5f0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800b566:	402c      	ands	r4, r5
 800b568:	50d4      	str	r4, [r2, r3]
 800b56a:	58d5      	ldr	r5, [r2, r3]
 800b56c:	24b0      	movs	r4, #176	; 0xb0
 800b56e:	0224      	lsls	r4, r4, #8
 800b570:	432c      	orrs	r4, r5
 800b572:	50d4      	str	r4, [r2, r3]
 800b574:	e6ec      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800b576:	4a1d      	ldr	r2, [pc, #116]	; (800b5ec <RemapAndLinkDMAtoUARTTx+0x32c>)
 800b578:	23a8      	movs	r3, #168	; 0xa8
 800b57a:	58d4      	ldr	r4, [r2, r3]
 800b57c:	4d1d      	ldr	r5, [pc, #116]	; (800b5f4 <RemapAndLinkDMAtoUARTTx+0x334>)
 800b57e:	402c      	ands	r4, r5
 800b580:	50d4      	str	r4, [r2, r3]
 800b582:	58d5      	ldr	r5, [r2, r3]
 800b584:	24b0      	movs	r4, #176	; 0xb0
 800b586:	0524      	lsls	r4, r4, #20
 800b588:	432c      	orrs	r4, r5
 800b58a:	50d4      	str	r4, [r2, r3]
 800b58c:	e6e0      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800b58e:	4a15      	ldr	r2, [pc, #84]	; (800b5e4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800b590:	23a8      	movs	r3, #168	; 0xa8
 800b592:	58d4      	ldr	r4, [r2, r3]
 800b594:	250f      	movs	r5, #15
 800b596:	43ac      	bics	r4, r5
 800b598:	50d4      	str	r4, [r2, r3]
 800b59a:	58d4      	ldr	r4, [r2, r3]
 800b59c:	3d04      	subs	r5, #4
 800b59e:	432c      	orrs	r4, r5
 800b5a0:	50d4      	str	r4, [r2, r3]
 800b5a2:	e6d5      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800b5a4:	4a0f      	ldr	r2, [pc, #60]	; (800b5e4 <RemapAndLinkDMAtoUARTTx+0x324>)
 800b5a6:	23a8      	movs	r3, #168	; 0xa8
 800b5a8:	58d4      	ldr	r4, [r2, r3]
 800b5aa:	4d11      	ldr	r5, [pc, #68]	; (800b5f0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800b5ac:	402c      	ands	r4, r5
 800b5ae:	50d4      	str	r4, [r2, r3]
 800b5b0:	58d5      	ldr	r5, [r2, r3]
 800b5b2:	24b0      	movs	r4, #176	; 0xb0
 800b5b4:	0224      	lsls	r4, r4, #8
 800b5b6:	432c      	orrs	r4, r5
 800b5b8:	50d4      	str	r4, [r2, r3]
 800b5ba:	e6c9      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
 800b5bc:	40013800 	.word	0x40013800
 800b5c0:	40004400 	.word	0x40004400
 800b5c4:	40004800 	.word	0x40004800
 800b5c8:	40004c00 	.word	0x40004c00
 800b5cc:	4002001c 	.word	0x4002001c
 800b5d0:	40020044 	.word	0x40020044
 800b5d4:	40020080 	.word	0x40020080
 800b5d8:	40020408 	.word	0x40020408
 800b5dc:	40020444 	.word	0x40020444
 800b5e0:	40020458 	.word	0x40020458
 800b5e4:	40020400 	.word	0x40020400
 800b5e8:	fff0ffff 	.word	0xfff0ffff
 800b5ec:	40020000 	.word	0x40020000
 800b5f0:	ffff0fff 	.word	0xffff0fff
 800b5f4:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800b5f8:	4ab9      	ldr	r2, [pc, #740]	; (800b8e0 <RemapAndLinkDMAtoUARTTx+0x620>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d159      	bne.n	800b6b2 <RemapAndLinkDMAtoUARTTx+0x3f2>
 800b5fe:	680b      	ldr	r3, [r1, #0]
 800b600:	4ab8      	ldr	r2, [pc, #736]	; (800b8e4 <RemapAndLinkDMAtoUARTTx+0x624>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d01b      	beq.n	800b63e <RemapAndLinkDMAtoUARTTx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800b606:	4ab8      	ldr	r2, [pc, #736]	; (800b8e8 <RemapAndLinkDMAtoUARTTx+0x628>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d023      	beq.n	800b654 <RemapAndLinkDMAtoUARTTx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800b60c:	4ab7      	ldr	r2, [pc, #732]	; (800b8ec <RemapAndLinkDMAtoUARTTx+0x62c>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d02c      	beq.n	800b66c <RemapAndLinkDMAtoUARTTx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800b612:	4ab7      	ldr	r2, [pc, #732]	; (800b8f0 <RemapAndLinkDMAtoUARTTx+0x630>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d035      	beq.n	800b684 <RemapAndLinkDMAtoUARTTx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800b618:	4ab6      	ldr	r2, [pc, #728]	; (800b8f4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d03d      	beq.n	800b69a <RemapAndLinkDMAtoUARTTx+0x3da>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800b61e:	4ab6      	ldr	r2, [pc, #728]	; (800b8f8 <RemapAndLinkDMAtoUARTTx+0x638>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d000      	beq.n	800b626 <RemapAndLinkDMAtoUARTTx+0x366>
 800b624:	e694      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800b626:	4ab5      	ldr	r2, [pc, #724]	; (800b8fc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b628:	23a8      	movs	r3, #168	; 0xa8
 800b62a:	58d4      	ldr	r4, [r2, r3]
 800b62c:	4db4      	ldr	r5, [pc, #720]	; (800b900 <RemapAndLinkDMAtoUARTTx+0x640>)
 800b62e:	402c      	ands	r4, r5
 800b630:	50d4      	str	r4, [r2, r3]
 800b632:	58d5      	ldr	r5, [r2, r3]
 800b634:	24c0      	movs	r4, #192	; 0xc0
 800b636:	0324      	lsls	r4, r4, #12
 800b638:	432c      	orrs	r4, r5
 800b63a:	50d4      	str	r4, [r2, r3]
 800b63c:	e688      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800b63e:	4ab1      	ldr	r2, [pc, #708]	; (800b904 <RemapAndLinkDMAtoUARTTx+0x644>)
 800b640:	23a8      	movs	r3, #168	; 0xa8
 800b642:	58d4      	ldr	r4, [r2, r3]
 800b644:	25f0      	movs	r5, #240	; 0xf0
 800b646:	43ac      	bics	r4, r5
 800b648:	50d4      	str	r4, [r2, r3]
 800b64a:	58d4      	ldr	r4, [r2, r3]
 800b64c:	3d30      	subs	r5, #48	; 0x30
 800b64e:	432c      	orrs	r4, r5
 800b650:	50d4      	str	r4, [r2, r3]
 800b652:	e67d      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800b654:	4aab      	ldr	r2, [pc, #684]	; (800b904 <RemapAndLinkDMAtoUARTTx+0x644>)
 800b656:	23a8      	movs	r3, #168	; 0xa8
 800b658:	58d4      	ldr	r4, [r2, r3]
 800b65a:	4dab      	ldr	r5, [pc, #684]	; (800b908 <RemapAndLinkDMAtoUARTTx+0x648>)
 800b65c:	402c      	ands	r4, r5
 800b65e:	50d4      	str	r4, [r2, r3]
 800b660:	58d5      	ldr	r5, [r2, r3]
 800b662:	24c0      	movs	r4, #192	; 0xc0
 800b664:	0224      	lsls	r4, r4, #8
 800b666:	432c      	orrs	r4, r5
 800b668:	50d4      	str	r4, [r2, r3]
 800b66a:	e671      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800b66c:	4aa5      	ldr	r2, [pc, #660]	; (800b904 <RemapAndLinkDMAtoUARTTx+0x644>)
 800b66e:	23a8      	movs	r3, #168	; 0xa8
 800b670:	58d4      	ldr	r4, [r2, r3]
 800b672:	4da6      	ldr	r5, [pc, #664]	; (800b90c <RemapAndLinkDMAtoUARTTx+0x64c>)
 800b674:	402c      	ands	r4, r5
 800b676:	50d4      	str	r4, [r2, r3]
 800b678:	58d5      	ldr	r5, [r2, r3]
 800b67a:	24c0      	movs	r4, #192	; 0xc0
 800b67c:	0524      	lsls	r4, r4, #20
 800b67e:	432c      	orrs	r4, r5
 800b680:	50d4      	str	r4, [r2, r3]
 800b682:	e665      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800b684:	4a9d      	ldr	r2, [pc, #628]	; (800b8fc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b686:	23a8      	movs	r3, #168	; 0xa8
 800b688:	58d4      	ldr	r4, [r2, r3]
 800b68a:	250f      	movs	r5, #15
 800b68c:	43ac      	bics	r4, r5
 800b68e:	50d4      	str	r4, [r2, r3]
 800b690:	58d4      	ldr	r4, [r2, r3]
 800b692:	3d03      	subs	r5, #3
 800b694:	432c      	orrs	r4, r5
 800b696:	50d4      	str	r4, [r2, r3]
 800b698:	e65a      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800b69a:	4a98      	ldr	r2, [pc, #608]	; (800b8fc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b69c:	23a8      	movs	r3, #168	; 0xa8
 800b69e:	58d4      	ldr	r4, [r2, r3]
 800b6a0:	4d99      	ldr	r5, [pc, #612]	; (800b908 <RemapAndLinkDMAtoUARTTx+0x648>)
 800b6a2:	402c      	ands	r4, r5
 800b6a4:	50d4      	str	r4, [r2, r3]
 800b6a6:	58d5      	ldr	r5, [r2, r3]
 800b6a8:	24c0      	movs	r4, #192	; 0xc0
 800b6aa:	0224      	lsls	r4, r4, #8
 800b6ac:	432c      	orrs	r4, r5
 800b6ae:	50d4      	str	r4, [r2, r3]
 800b6b0:	e64e      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800b6b2:	4a97      	ldr	r2, [pc, #604]	; (800b910 <RemapAndLinkDMAtoUARTTx+0x650>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d159      	bne.n	800b76c <RemapAndLinkDMAtoUARTTx+0x4ac>
 800b6b8:	680b      	ldr	r3, [r1, #0]
 800b6ba:	4a8a      	ldr	r2, [pc, #552]	; (800b8e4 <RemapAndLinkDMAtoUARTTx+0x624>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d01b      	beq.n	800b6f8 <RemapAndLinkDMAtoUARTTx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800b6c0:	4a89      	ldr	r2, [pc, #548]	; (800b8e8 <RemapAndLinkDMAtoUARTTx+0x628>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d023      	beq.n	800b70e <RemapAndLinkDMAtoUARTTx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800b6c6:	4a89      	ldr	r2, [pc, #548]	; (800b8ec <RemapAndLinkDMAtoUARTTx+0x62c>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d02c      	beq.n	800b726 <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800b6cc:	4a88      	ldr	r2, [pc, #544]	; (800b8f0 <RemapAndLinkDMAtoUARTTx+0x630>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d035      	beq.n	800b73e <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800b6d2:	4a88      	ldr	r2, [pc, #544]	; (800b8f4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d03d      	beq.n	800b754 <RemapAndLinkDMAtoUARTTx+0x494>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800b6d8:	4a87      	ldr	r2, [pc, #540]	; (800b8f8 <RemapAndLinkDMAtoUARTTx+0x638>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d000      	beq.n	800b6e0 <RemapAndLinkDMAtoUARTTx+0x420>
 800b6de:	e637      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800b6e0:	4a86      	ldr	r2, [pc, #536]	; (800b8fc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b6e2:	23a8      	movs	r3, #168	; 0xa8
 800b6e4:	58d4      	ldr	r4, [r2, r3]
 800b6e6:	4d86      	ldr	r5, [pc, #536]	; (800b900 <RemapAndLinkDMAtoUARTTx+0x640>)
 800b6e8:	402c      	ands	r4, r5
 800b6ea:	50d4      	str	r4, [r2, r3]
 800b6ec:	58d5      	ldr	r5, [r2, r3]
 800b6ee:	24d0      	movs	r4, #208	; 0xd0
 800b6f0:	0324      	lsls	r4, r4, #12
 800b6f2:	432c      	orrs	r4, r5
 800b6f4:	50d4      	str	r4, [r2, r3]
 800b6f6:	e62b      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800b6f8:	4a82      	ldr	r2, [pc, #520]	; (800b904 <RemapAndLinkDMAtoUARTTx+0x644>)
 800b6fa:	23a8      	movs	r3, #168	; 0xa8
 800b6fc:	58d4      	ldr	r4, [r2, r3]
 800b6fe:	25f0      	movs	r5, #240	; 0xf0
 800b700:	43ac      	bics	r4, r5
 800b702:	50d4      	str	r4, [r2, r3]
 800b704:	58d4      	ldr	r4, [r2, r3]
 800b706:	3d20      	subs	r5, #32
 800b708:	432c      	orrs	r4, r5
 800b70a:	50d4      	str	r4, [r2, r3]
 800b70c:	e620      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800b70e:	4a7d      	ldr	r2, [pc, #500]	; (800b904 <RemapAndLinkDMAtoUARTTx+0x644>)
 800b710:	23a8      	movs	r3, #168	; 0xa8
 800b712:	58d4      	ldr	r4, [r2, r3]
 800b714:	4d7c      	ldr	r5, [pc, #496]	; (800b908 <RemapAndLinkDMAtoUARTTx+0x648>)
 800b716:	402c      	ands	r4, r5
 800b718:	50d4      	str	r4, [r2, r3]
 800b71a:	58d5      	ldr	r5, [r2, r3]
 800b71c:	24d0      	movs	r4, #208	; 0xd0
 800b71e:	0224      	lsls	r4, r4, #8
 800b720:	432c      	orrs	r4, r5
 800b722:	50d4      	str	r4, [r2, r3]
 800b724:	e614      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800b726:	4a77      	ldr	r2, [pc, #476]	; (800b904 <RemapAndLinkDMAtoUARTTx+0x644>)
 800b728:	23a8      	movs	r3, #168	; 0xa8
 800b72a:	58d4      	ldr	r4, [r2, r3]
 800b72c:	4d77      	ldr	r5, [pc, #476]	; (800b90c <RemapAndLinkDMAtoUARTTx+0x64c>)
 800b72e:	402c      	ands	r4, r5
 800b730:	50d4      	str	r4, [r2, r3]
 800b732:	58d5      	ldr	r5, [r2, r3]
 800b734:	24d0      	movs	r4, #208	; 0xd0
 800b736:	0524      	lsls	r4, r4, #20
 800b738:	432c      	orrs	r4, r5
 800b73a:	50d4      	str	r4, [r2, r3]
 800b73c:	e608      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800b73e:	4a6f      	ldr	r2, [pc, #444]	; (800b8fc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b740:	23a8      	movs	r3, #168	; 0xa8
 800b742:	58d4      	ldr	r4, [r2, r3]
 800b744:	250f      	movs	r5, #15
 800b746:	43ac      	bics	r4, r5
 800b748:	50d4      	str	r4, [r2, r3]
 800b74a:	58d4      	ldr	r4, [r2, r3]
 800b74c:	3d02      	subs	r5, #2
 800b74e:	432c      	orrs	r4, r5
 800b750:	50d4      	str	r4, [r2, r3]
 800b752:	e5fd      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800b754:	4a69      	ldr	r2, [pc, #420]	; (800b8fc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b756:	23a8      	movs	r3, #168	; 0xa8
 800b758:	58d4      	ldr	r4, [r2, r3]
 800b75a:	4d6b      	ldr	r5, [pc, #428]	; (800b908 <RemapAndLinkDMAtoUARTTx+0x648>)
 800b75c:	402c      	ands	r4, r5
 800b75e:	50d4      	str	r4, [r2, r3]
 800b760:	58d5      	ldr	r5, [r2, r3]
 800b762:	24d0      	movs	r4, #208	; 0xd0
 800b764:	0224      	lsls	r4, r4, #8
 800b766:	432c      	orrs	r4, r5
 800b768:	50d4      	str	r4, [r2, r3]
 800b76a:	e5f1      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800b76c:	4a69      	ldr	r2, [pc, #420]	; (800b914 <RemapAndLinkDMAtoUARTTx+0x654>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d159      	bne.n	800b826 <RemapAndLinkDMAtoUARTTx+0x566>
 800b772:	680b      	ldr	r3, [r1, #0]
 800b774:	4a5b      	ldr	r2, [pc, #364]	; (800b8e4 <RemapAndLinkDMAtoUARTTx+0x624>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d01b      	beq.n	800b7b2 <RemapAndLinkDMAtoUARTTx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800b77a:	4a5b      	ldr	r2, [pc, #364]	; (800b8e8 <RemapAndLinkDMAtoUARTTx+0x628>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d023      	beq.n	800b7c8 <RemapAndLinkDMAtoUARTTx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800b780:	4a5a      	ldr	r2, [pc, #360]	; (800b8ec <RemapAndLinkDMAtoUARTTx+0x62c>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d02c      	beq.n	800b7e0 <RemapAndLinkDMAtoUARTTx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800b786:	4a5a      	ldr	r2, [pc, #360]	; (800b8f0 <RemapAndLinkDMAtoUARTTx+0x630>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d035      	beq.n	800b7f8 <RemapAndLinkDMAtoUARTTx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800b78c:	4a59      	ldr	r2, [pc, #356]	; (800b8f4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d03d      	beq.n	800b80e <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800b792:	4a59      	ldr	r2, [pc, #356]	; (800b8f8 <RemapAndLinkDMAtoUARTTx+0x638>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d000      	beq.n	800b79a <RemapAndLinkDMAtoUARTTx+0x4da>
 800b798:	e5da      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800b79a:	4a58      	ldr	r2, [pc, #352]	; (800b8fc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b79c:	23a8      	movs	r3, #168	; 0xa8
 800b79e:	58d4      	ldr	r4, [r2, r3]
 800b7a0:	4d57      	ldr	r5, [pc, #348]	; (800b900 <RemapAndLinkDMAtoUARTTx+0x640>)
 800b7a2:	402c      	ands	r4, r5
 800b7a4:	50d4      	str	r4, [r2, r3]
 800b7a6:	58d5      	ldr	r5, [r2, r3]
 800b7a8:	24e0      	movs	r4, #224	; 0xe0
 800b7aa:	0324      	lsls	r4, r4, #12
 800b7ac:	432c      	orrs	r4, r5
 800b7ae:	50d4      	str	r4, [r2, r3]
 800b7b0:	e5ce      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800b7b2:	4a54      	ldr	r2, [pc, #336]	; (800b904 <RemapAndLinkDMAtoUARTTx+0x644>)
 800b7b4:	23a8      	movs	r3, #168	; 0xa8
 800b7b6:	58d4      	ldr	r4, [r2, r3]
 800b7b8:	25f0      	movs	r5, #240	; 0xf0
 800b7ba:	43ac      	bics	r4, r5
 800b7bc:	50d4      	str	r4, [r2, r3]
 800b7be:	58d4      	ldr	r4, [r2, r3]
 800b7c0:	3d10      	subs	r5, #16
 800b7c2:	432c      	orrs	r4, r5
 800b7c4:	50d4      	str	r4, [r2, r3]
 800b7c6:	e5c3      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800b7c8:	4a4e      	ldr	r2, [pc, #312]	; (800b904 <RemapAndLinkDMAtoUARTTx+0x644>)
 800b7ca:	23a8      	movs	r3, #168	; 0xa8
 800b7cc:	58d4      	ldr	r4, [r2, r3]
 800b7ce:	4d4e      	ldr	r5, [pc, #312]	; (800b908 <RemapAndLinkDMAtoUARTTx+0x648>)
 800b7d0:	402c      	ands	r4, r5
 800b7d2:	50d4      	str	r4, [r2, r3]
 800b7d4:	58d5      	ldr	r5, [r2, r3]
 800b7d6:	24e0      	movs	r4, #224	; 0xe0
 800b7d8:	0224      	lsls	r4, r4, #8
 800b7da:	432c      	orrs	r4, r5
 800b7dc:	50d4      	str	r4, [r2, r3]
 800b7de:	e5b7      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800b7e0:	4a48      	ldr	r2, [pc, #288]	; (800b904 <RemapAndLinkDMAtoUARTTx+0x644>)
 800b7e2:	23a8      	movs	r3, #168	; 0xa8
 800b7e4:	58d4      	ldr	r4, [r2, r3]
 800b7e6:	4d49      	ldr	r5, [pc, #292]	; (800b90c <RemapAndLinkDMAtoUARTTx+0x64c>)
 800b7e8:	402c      	ands	r4, r5
 800b7ea:	50d4      	str	r4, [r2, r3]
 800b7ec:	58d5      	ldr	r5, [r2, r3]
 800b7ee:	24e0      	movs	r4, #224	; 0xe0
 800b7f0:	0524      	lsls	r4, r4, #20
 800b7f2:	432c      	orrs	r4, r5
 800b7f4:	50d4      	str	r4, [r2, r3]
 800b7f6:	e5ab      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800b7f8:	4a40      	ldr	r2, [pc, #256]	; (800b8fc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b7fa:	23a8      	movs	r3, #168	; 0xa8
 800b7fc:	58d4      	ldr	r4, [r2, r3]
 800b7fe:	250f      	movs	r5, #15
 800b800:	43ac      	bics	r4, r5
 800b802:	50d4      	str	r4, [r2, r3]
 800b804:	58d4      	ldr	r4, [r2, r3]
 800b806:	3d01      	subs	r5, #1
 800b808:	432c      	orrs	r4, r5
 800b80a:	50d4      	str	r4, [r2, r3]
 800b80c:	e5a0      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800b80e:	4a3b      	ldr	r2, [pc, #236]	; (800b8fc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b810:	23a8      	movs	r3, #168	; 0xa8
 800b812:	58d4      	ldr	r4, [r2, r3]
 800b814:	4d3c      	ldr	r5, [pc, #240]	; (800b908 <RemapAndLinkDMAtoUARTTx+0x648>)
 800b816:	402c      	ands	r4, r5
 800b818:	50d4      	str	r4, [r2, r3]
 800b81a:	58d5      	ldr	r5, [r2, r3]
 800b81c:	24e0      	movs	r4, #224	; 0xe0
 800b81e:	0224      	lsls	r4, r4, #8
 800b820:	432c      	orrs	r4, r5
 800b822:	50d4      	str	r4, [r2, r3]
 800b824:	e594      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800b826:	4a3c      	ldr	r2, [pc, #240]	; (800b918 <RemapAndLinkDMAtoUARTTx+0x658>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d000      	beq.n	800b82e <RemapAndLinkDMAtoUARTTx+0x56e>
 800b82c:	e590      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
 800b82e:	680b      	ldr	r3, [r1, #0]
 800b830:	4a2c      	ldr	r2, [pc, #176]	; (800b8e4 <RemapAndLinkDMAtoUARTTx+0x624>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d01b      	beq.n	800b86e <RemapAndLinkDMAtoUARTTx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800b836:	4a2c      	ldr	r2, [pc, #176]	; (800b8e8 <RemapAndLinkDMAtoUARTTx+0x628>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d022      	beq.n	800b882 <RemapAndLinkDMAtoUARTTx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800b83c:	4a2b      	ldr	r2, [pc, #172]	; (800b8ec <RemapAndLinkDMAtoUARTTx+0x62c>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d02b      	beq.n	800b89a <RemapAndLinkDMAtoUARTTx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800b842:	4a2b      	ldr	r2, [pc, #172]	; (800b8f0 <RemapAndLinkDMAtoUARTTx+0x630>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d034      	beq.n	800b8b2 <RemapAndLinkDMAtoUARTTx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800b848:	4a2a      	ldr	r2, [pc, #168]	; (800b8f4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d03b      	beq.n	800b8c6 <RemapAndLinkDMAtoUARTTx+0x606>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800b84e:	4a2a      	ldr	r2, [pc, #168]	; (800b8f8 <RemapAndLinkDMAtoUARTTx+0x638>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d000      	beq.n	800b856 <RemapAndLinkDMAtoUARTTx+0x596>
 800b854:	e57c      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800b856:	4a29      	ldr	r2, [pc, #164]	; (800b8fc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b858:	23a8      	movs	r3, #168	; 0xa8
 800b85a:	58d4      	ldr	r4, [r2, r3]
 800b85c:	4d28      	ldr	r5, [pc, #160]	; (800b900 <RemapAndLinkDMAtoUARTTx+0x640>)
 800b85e:	402c      	ands	r4, r5
 800b860:	50d4      	str	r4, [r2, r3]
 800b862:	58d5      	ldr	r5, [r2, r3]
 800b864:	24f0      	movs	r4, #240	; 0xf0
 800b866:	0324      	lsls	r4, r4, #12
 800b868:	432c      	orrs	r4, r5
 800b86a:	50d4      	str	r4, [r2, r3]
 800b86c:	e570      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800b86e:	4a25      	ldr	r2, [pc, #148]	; (800b904 <RemapAndLinkDMAtoUARTTx+0x644>)
 800b870:	23a8      	movs	r3, #168	; 0xa8
 800b872:	58d5      	ldr	r5, [r2, r3]
 800b874:	26f0      	movs	r6, #240	; 0xf0
 800b876:	43b5      	bics	r5, r6
 800b878:	50d5      	str	r5, [r2, r3]
 800b87a:	58d4      	ldr	r4, [r2, r3]
 800b87c:	4334      	orrs	r4, r6
 800b87e:	50d4      	str	r4, [r2, r3]
 800b880:	e566      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800b882:	4a20      	ldr	r2, [pc, #128]	; (800b904 <RemapAndLinkDMAtoUARTTx+0x644>)
 800b884:	23a8      	movs	r3, #168	; 0xa8
 800b886:	58d4      	ldr	r4, [r2, r3]
 800b888:	4d1f      	ldr	r5, [pc, #124]	; (800b908 <RemapAndLinkDMAtoUARTTx+0x648>)
 800b88a:	402c      	ands	r4, r5
 800b88c:	50d4      	str	r4, [r2, r3]
 800b88e:	58d5      	ldr	r5, [r2, r3]
 800b890:	24f0      	movs	r4, #240	; 0xf0
 800b892:	0224      	lsls	r4, r4, #8
 800b894:	432c      	orrs	r4, r5
 800b896:	50d4      	str	r4, [r2, r3]
 800b898:	e55a      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800b89a:	4a1a      	ldr	r2, [pc, #104]	; (800b904 <RemapAndLinkDMAtoUARTTx+0x644>)
 800b89c:	23a8      	movs	r3, #168	; 0xa8
 800b89e:	58d4      	ldr	r4, [r2, r3]
 800b8a0:	4d1a      	ldr	r5, [pc, #104]	; (800b90c <RemapAndLinkDMAtoUARTTx+0x64c>)
 800b8a2:	402c      	ands	r4, r5
 800b8a4:	50d4      	str	r4, [r2, r3]
 800b8a6:	58d5      	ldr	r5, [r2, r3]
 800b8a8:	24f0      	movs	r4, #240	; 0xf0
 800b8aa:	0524      	lsls	r4, r4, #20
 800b8ac:	432c      	orrs	r4, r5
 800b8ae:	50d4      	str	r4, [r2, r3]
 800b8b0:	e54e      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800b8b2:	4a12      	ldr	r2, [pc, #72]	; (800b8fc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b8b4:	23a8      	movs	r3, #168	; 0xa8
 800b8b6:	58d5      	ldr	r5, [r2, r3]
 800b8b8:	260f      	movs	r6, #15
 800b8ba:	43b5      	bics	r5, r6
 800b8bc:	50d5      	str	r5, [r2, r3]
 800b8be:	58d4      	ldr	r4, [r2, r3]
 800b8c0:	4334      	orrs	r4, r6
 800b8c2:	50d4      	str	r4, [r2, r3]
 800b8c4:	e544      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800b8c6:	4a0d      	ldr	r2, [pc, #52]	; (800b8fc <RemapAndLinkDMAtoUARTTx+0x63c>)
 800b8c8:	23a8      	movs	r3, #168	; 0xa8
 800b8ca:	58d4      	ldr	r4, [r2, r3]
 800b8cc:	4d0e      	ldr	r5, [pc, #56]	; (800b908 <RemapAndLinkDMAtoUARTTx+0x648>)
 800b8ce:	402c      	ands	r4, r5
 800b8d0:	50d4      	str	r4, [r2, r3]
 800b8d2:	58d5      	ldr	r5, [r2, r3]
 800b8d4:	24f0      	movs	r4, #240	; 0xf0
 800b8d6:	0224      	lsls	r4, r4, #8
 800b8d8:	432c      	orrs	r4, r5
 800b8da:	50d4      	str	r4, [r2, r3]
 800b8dc:	e538      	b.n	800b350 <RemapAndLinkDMAtoUARTTx+0x90>
 800b8de:	46c0      	nop			; (mov r8, r8)
 800b8e0:	40005000 	.word	0x40005000
 800b8e4:	4002001c 	.word	0x4002001c
 800b8e8:	40020044 	.word	0x40020044
 800b8ec:	40020080 	.word	0x40020080
 800b8f0:	40020408 	.word	0x40020408
 800b8f4:	40020444 	.word	0x40020444
 800b8f8:	40020458 	.word	0x40020458
 800b8fc:	40020400 	.word	0x40020400
 800b900:	fff0ffff 	.word	0xfff0ffff
 800b904:	40020000 	.word	0x40020000
 800b908:	ffff0fff 	.word	0xffff0fff
 800b90c:	f0ffffff 	.word	0xf0ffffff
 800b910:	40011400 	.word	0x40011400
 800b914:	40011800 	.word	0x40011800
 800b918:	40011c00 	.word	0x40011c00

0800b91c <DMA_MSG_TX_Setup>:
{	
 800b91c:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800b91e:	4b0d      	ldr	r3, [pc, #52]	; (800b954 <DMA_MSG_TX_Setup+0x38>)
 800b920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b922:	2b00      	cmp	r3, #0
 800b924:	d012      	beq.n	800b94c <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800b926:	4b0b      	ldr	r3, [pc, #44]	; (800b954 <DMA_MSG_TX_Setup+0x38>)
 800b928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d010      	beq.n	800b950 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800b92e:	4a09      	ldr	r2, [pc, #36]	; (800b954 <DMA_MSG_TX_Setup+0x38>)
 800b930:	2394      	movs	r3, #148	; 0x94
 800b932:	58d3      	ldr	r3, [r2, r3]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d007      	beq.n	800b948 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800b938:	0021      	movs	r1, r4
 800b93a:	f7ff fcc1 	bl	800b2c0 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b93e:	2100      	movs	r1, #0
 800b940:	0020      	movs	r0, r4
 800b942:	f7ff f84f 	bl	800a9e4 <SetupDMAInterrupts>
}
 800b946:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800b948:	4c03      	ldr	r4, [pc, #12]	; (800b958 <DMA_MSG_TX_Setup+0x3c>)
 800b94a:	e7f5      	b.n	800b938 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800b94c:	4c01      	ldr	r4, [pc, #4]	; (800b954 <DMA_MSG_TX_Setup+0x38>)
 800b94e:	e7f3      	b.n	800b938 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800b950:	4c02      	ldr	r4, [pc, #8]	; (800b95c <DMA_MSG_TX_Setup+0x40>)
 800b952:	e7f1      	b.n	800b938 <DMA_MSG_TX_Setup+0x1c>
 800b954:	200018b0 	.word	0x200018b0
 800b958:	20001920 	.word	0x20001920
 800b95c:	200018e8 	.word	0x200018e8

0800b960 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800b960:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800b962:	4807      	ldr	r0, [pc, #28]	; (800b980 <CRC_Init+0x20>)
 800b964:	4b07      	ldr	r3, [pc, #28]	; (800b984 <CRC_Init+0x24>)
 800b966:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800b968:	2310      	movs	r3, #16
 800b96a:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800b96c:	2300      	movs	r3, #0
 800b96e:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800b970:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800b972:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800b974:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800b976:	3303      	adds	r3, #3
 800b978:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800b97a:	f003 f859 	bl	800ea30 <HAL_CRC_Init>
}
 800b97e:	bd10      	pop	{r4, pc}
 800b980:	20006cfc 	.word	0x20006cfc
 800b984:	40023000 	.word	0x40023000

0800b988 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800b988:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800b98a:	4a05      	ldr	r2, [pc, #20]	; (800b9a0 <HAL_CRC_MspInit+0x18>)
 800b98c:	6951      	ldr	r1, [r2, #20]
 800b98e:	2340      	movs	r3, #64	; 0x40
 800b990:	4319      	orrs	r1, r3
 800b992:	6151      	str	r1, [r2, #20]
 800b994:	6952      	ldr	r2, [r2, #20]
 800b996:	4013      	ands	r3, r2
 800b998:	9301      	str	r3, [sp, #4]
 800b99a:	9b01      	ldr	r3, [sp, #4]
}
 800b99c:	b002      	add	sp, #8
 800b99e:	4770      	bx	lr
 800b9a0:	40021000 	.word	0x40021000

0800b9a4 <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800b9a4:	b570      	push	{r4, r5, r6, lr}
 800b9a6:	0004      	movs	r4, r0
 800b9a8:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	d015      	beq.n	800b9da <CalculateCRC8+0x36>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800b9ae:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800b9b0:	2900      	cmp	r1, #0
 800b9b2:	d100      	bne.n	800b9b6 <CalculateCRC8+0x12>
}
 800b9b4:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800b9b6:	088e      	lsrs	r6, r1, #2
 800b9b8:	0032      	movs	r2, r6
 800b9ba:	0021      	movs	r1, r4
 800b9bc:	4808      	ldr	r0, [pc, #32]	; (800b9e0 <CalculateCRC8+0x3c>)
 800b9be:	f003 f894 	bl	800eaea <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800b9c2:	07ab      	lsls	r3, r5, #30
 800b9c4:	d101      	bne.n	800b9ca <CalculateCRC8+0x26>
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800b9c6:	b2c0      	uxtb	r0, r0
 800b9c8:	e7f4      	b.n	800b9b4 <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800b9ca:	0131      	lsls	r1, r6, #4
 800b9cc:	1861      	adds	r1, r4, r1
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	4803      	ldr	r0, [pc, #12]	; (800b9e0 <CalculateCRC8+0x3c>)
 800b9d2:	f003 f85e 	bl	800ea92 <HAL_CRC_Accumulate>
 800b9d6:	b2c0      	uxtb	r0, r0
 800b9d8:	e7ec      	b.n	800b9b4 <CalculateCRC8+0x10>
	return 0;
 800b9da:	2000      	movs	r0, #0
 800b9dc:	e7ea      	b.n	800b9b4 <CalculateCRC8+0x10>
 800b9de:	46c0      	nop			; (mov r8, r8)
 800b9e0:	20006cfc 	.word	0x20006cfc

0800b9e4 <IND_LED_Init>:
}

/* --- Configure indicator LED ---
*/
void IND_LED_Init(void)
{
 800b9e4:	b500      	push	{lr}
 800b9e6:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800b9e8:	2380      	movs	r3, #128	; 0x80
 800b9ea:	011b      	lsls	r3, r3, #4
 800b9ec:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b9f6:	3303      	adds	r3, #3
 800b9f8:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800b9fa:	2090      	movs	r0, #144	; 0x90
 800b9fc:	a901      	add	r1, sp, #4
 800b9fe:	05c0      	lsls	r0, r0, #23
 800ba00:	f003 ff16 	bl	800f830 <HAL_GPIO_Init>
}
 800ba04:	b007      	add	sp, #28
 800ba06:	bd00      	pop	{pc}

0800ba08 <GPIO_Init>:
{
 800ba08:	b500      	push	{lr}
 800ba0a:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800ba0c:	4b18      	ldr	r3, [pc, #96]	; (800ba70 <GPIO_Init+0x68>)
 800ba0e:	6959      	ldr	r1, [r3, #20]
 800ba10:	2080      	movs	r0, #128	; 0x80
 800ba12:	0300      	lsls	r0, r0, #12
 800ba14:	4301      	orrs	r1, r0
 800ba16:	6159      	str	r1, [r3, #20]
 800ba18:	695a      	ldr	r2, [r3, #20]
 800ba1a:	4002      	ands	r2, r0
 800ba1c:	9201      	str	r2, [sp, #4]
 800ba1e:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800ba20:	6959      	ldr	r1, [r3, #20]
 800ba22:	2080      	movs	r0, #128	; 0x80
 800ba24:	0280      	lsls	r0, r0, #10
 800ba26:	4301      	orrs	r1, r0
 800ba28:	6159      	str	r1, [r3, #20]
 800ba2a:	695a      	ldr	r2, [r3, #20]
 800ba2c:	4002      	ands	r2, r0
 800ba2e:	9202      	str	r2, [sp, #8]
 800ba30:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800ba32:	6959      	ldr	r1, [r3, #20]
 800ba34:	2080      	movs	r0, #128	; 0x80
 800ba36:	0340      	lsls	r0, r0, #13
 800ba38:	4301      	orrs	r1, r0
 800ba3a:	6159      	str	r1, [r3, #20]
 800ba3c:	695a      	ldr	r2, [r3, #20]
 800ba3e:	4002      	ands	r2, r0
 800ba40:	9203      	str	r2, [sp, #12]
 800ba42:	9a03      	ldr	r2, [sp, #12]
	__GPIOB_CLK_ENABLE();
 800ba44:	6959      	ldr	r1, [r3, #20]
 800ba46:	2080      	movs	r0, #128	; 0x80
 800ba48:	02c0      	lsls	r0, r0, #11
 800ba4a:	4301      	orrs	r1, r0
 800ba4c:	6159      	str	r1, [r3, #20]
 800ba4e:	695a      	ldr	r2, [r3, #20]
 800ba50:	4002      	ands	r2, r0
 800ba52:	9204      	str	r2, [sp, #16]
 800ba54:	9a04      	ldr	r2, [sp, #16]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800ba56:	695a      	ldr	r2, [r3, #20]
 800ba58:	2180      	movs	r1, #128	; 0x80
 800ba5a:	03c9      	lsls	r1, r1, #15
 800ba5c:	430a      	orrs	r2, r1
 800ba5e:	615a      	str	r2, [r3, #20]
 800ba60:	695b      	ldr	r3, [r3, #20]
 800ba62:	400b      	ands	r3, r1
 800ba64:	9305      	str	r3, [sp, #20]
 800ba66:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800ba68:	f7ff ffbc 	bl	800b9e4 <IND_LED_Init>
}
 800ba6c:	b007      	add	sp, #28
 800ba6e:	bd00      	pop	{pc}
 800ba70:	40021000 	.word	0x40021000

0800ba74 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800ba74:	b570      	push	{r4, r5, r6, lr}
 800ba76:	000e      	movs	r6, r1
 800ba78:	0015      	movs	r5, r2
 800ba7a:	001c      	movs	r4, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800ba7c:	f000 fd78 	bl	800c570 <GetUart>
	
	if (huart == &huart1) 
 800ba80:	4b2b      	ldr	r3, [pc, #172]	; (800bb30 <GetPortGPIOs+0xbc>)
 800ba82:	4298      	cmp	r0, r3
 800ba84:	d01a      	beq.n	800babc <GetPortGPIOs+0x48>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800ba86:	4b2b      	ldr	r3, [pc, #172]	; (800bb34 <GetPortGPIOs+0xc0>)
 800ba88:	4298      	cmp	r0, r3
 800ba8a:	d025      	beq.n	800bad8 <GetPortGPIOs+0x64>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800ba8c:	4b2a      	ldr	r3, [pc, #168]	; (800bb38 <GetPortGPIOs+0xc4>)
 800ba8e:	4298      	cmp	r0, r3
 800ba90:	d02d      	beq.n	800baee <GetPortGPIOs+0x7a>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800ba92:	4b2a      	ldr	r3, [pc, #168]	; (800bb3c <GetPortGPIOs+0xc8>)
 800ba94:	4298      	cmp	r0, r3
 800ba96:	d036      	beq.n	800bb06 <GetPortGPIOs+0x92>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800ba98:	4b29      	ldr	r3, [pc, #164]	; (800bb40 <GetPortGPIOs+0xcc>)
 800ba9a:	4298      	cmp	r0, r3
 800ba9c:	d03e      	beq.n	800bb1c <GetPortGPIOs+0xa8>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800ba9e:	4a29      	ldr	r2, [pc, #164]	; (800bb44 <GetPortGPIOs+0xd0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800baa0:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 800baa2:	4290      	cmp	r0, r2
 800baa4:	d116      	bne.n	800bad4 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800baa6:	2390      	movs	r3, #144	; 0x90
 800baa8:	05db      	lsls	r3, r3, #23
 800baaa:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800baac:	2210      	movs	r2, #16
 800baae:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800bab0:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800bab2:	2320      	movs	r3, #32
 800bab4:	9a04      	ldr	r2, [sp, #16]
 800bab6:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800bab8:	2300      	movs	r3, #0
 800baba:	e00b      	b.n	800bad4 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800babc:	2390      	movs	r3, #144	; 0x90
 800babe:	05db      	lsls	r3, r3, #23
 800bac0:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800bac2:	2280      	movs	r2, #128	; 0x80
 800bac4:	0092      	lsls	r2, r2, #2
 800bac6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800bac8:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800baca:	2380      	movs	r3, #128	; 0x80
 800bacc:	00db      	lsls	r3, r3, #3
 800bace:	9a04      	ldr	r2, [sp, #16]
 800bad0:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800bad2:	2300      	movs	r3, #0
	
	return result;	
}
 800bad4:	0018      	movs	r0, r3
 800bad6:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800bad8:	2390      	movs	r3, #144	; 0x90
 800bada:	05db      	lsls	r3, r3, #23
 800badc:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800bade:	2204      	movs	r2, #4
 800bae0:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800bae2:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800bae4:	2308      	movs	r3, #8
 800bae6:	9a04      	ldr	r2, [sp, #16]
 800bae8:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800baea:	2300      	movs	r3, #0
 800baec:	e7f2      	b.n	800bad4 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800baee:	4b16      	ldr	r3, [pc, #88]	; (800bb48 <GetPortGPIOs+0xd4>)
 800baf0:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800baf2:	2280      	movs	r2, #128	; 0x80
 800baf4:	00d2      	lsls	r2, r2, #3
 800baf6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800baf8:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800bafa:	2380      	movs	r3, #128	; 0x80
 800bafc:	011b      	lsls	r3, r3, #4
 800bafe:	9a04      	ldr	r2, [sp, #16]
 800bb00:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800bb02:	2300      	movs	r3, #0
 800bb04:	e7e6      	b.n	800bad4 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800bb06:	2390      	movs	r3, #144	; 0x90
 800bb08:	05db      	lsls	r3, r3, #23
 800bb0a:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800bb10:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800bb12:	2302      	movs	r3, #2
 800bb14:	9a04      	ldr	r2, [sp, #16]
 800bb16:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	e7db      	b.n	800bad4 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800bb1c:	4b0a      	ldr	r3, [pc, #40]	; (800bb48 <GetPortGPIOs+0xd4>)
 800bb1e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800bb20:	2208      	movs	r2, #8
 800bb22:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800bb24:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800bb26:	2310      	movs	r3, #16
 800bb28:	9a04      	ldr	r2, [sp, #16]
 800bb2a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	e7d1      	b.n	800bad4 <GetPortGPIOs+0x60>
 800bb30:	20006b3c 	.word	0x20006b3c
 800bb34:	20006c8c 	.word	0x20006c8c
 800bb38:	20006a5c 	.word	0x20006a5c
 800bb3c:	20006c1c 	.word	0x20006c1c
 800bb40:	20006acc 	.word	0x20006acc
 800bb44:	20006bac 	.word	0x20006bac
 800bb48:	48000400 	.word	0x48000400

0800bb4c <IsFactoryReset>:
{
 800bb4c:	b570      	push	{r4, r5, r6, lr}
 800bb4e:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800bb50:	4b39      	ldr	r3, [pc, #228]	; (800bc38 <IsFactoryReset+0xec>)
 800bb52:	6959      	ldr	r1, [r3, #20]
 800bb54:	2080      	movs	r0, #128	; 0x80
 800bb56:	0280      	lsls	r0, r0, #10
 800bb58:	4301      	orrs	r1, r0
 800bb5a:	6159      	str	r1, [r3, #20]
 800bb5c:	695a      	ldr	r2, [r3, #20]
 800bb5e:	4002      	ands	r2, r0
 800bb60:	9203      	str	r2, [sp, #12]
 800bb62:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800bb64:	6959      	ldr	r1, [r3, #20]
 800bb66:	2080      	movs	r0, #128	; 0x80
 800bb68:	02c0      	lsls	r0, r0, #11
 800bb6a:	4301      	orrs	r1, r0
 800bb6c:	6159      	str	r1, [r3, #20]
 800bb6e:	695a      	ldr	r2, [r3, #20]
 800bb70:	4002      	ands	r2, r0
 800bb72:	9204      	str	r2, [sp, #16]
 800bb74:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800bb76:	6959      	ldr	r1, [r3, #20]
 800bb78:	2080      	movs	r0, #128	; 0x80
 800bb7a:	0300      	lsls	r0, r0, #12
 800bb7c:	4301      	orrs	r1, r0
 800bb7e:	6159      	str	r1, [r3, #20]
 800bb80:	695a      	ldr	r2, [r3, #20]
 800bb82:	4002      	ands	r2, r0
 800bb84:	9205      	str	r2, [sp, #20]
 800bb86:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800bb88:	695a      	ldr	r2, [r3, #20]
 800bb8a:	2180      	movs	r1, #128	; 0x80
 800bb8c:	0349      	lsls	r1, r1, #13
 800bb8e:	430a      	orrs	r2, r1
 800bb90:	615a      	str	r2, [r3, #20]
 800bb92:	695b      	ldr	r3, [r3, #20]
 800bb94:	400b      	ands	r3, r1
 800bb96:	9306      	str	r3, [sp, #24]
 800bb98:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800bb9a:	2522      	movs	r5, #34	; 0x22
 800bb9c:	446d      	add	r5, sp
 800bb9e:	ab08      	add	r3, sp, #32
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	ab0b      	add	r3, sp, #44	; 0x2c
 800bba4:	002a      	movs	r2, r5
 800bba6:	a90c      	add	r1, sp, #48	; 0x30
 800bba8:	2001      	movs	r0, #1
 800bbaa:	f7ff ff63 	bl	800ba74 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800bbae:	ac07      	add	r4, sp, #28
 800bbb0:	9400      	str	r4, [sp, #0]
 800bbb2:	ab09      	add	r3, sp, #36	; 0x24
 800bbb4:	221e      	movs	r2, #30
 800bbb6:	446a      	add	r2, sp
 800bbb8:	a90a      	add	r1, sp, #40	; 0x28
 800bbba:	2006      	movs	r0, #6
 800bbbc:	f7ff ff5a 	bl	800ba74 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbc4:	2600      	movs	r6, #0
 800bbc6:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800bbc8:	882b      	ldrh	r3, [r5, #0]
 800bbca:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800bbcc:	a90d      	add	r1, sp, #52	; 0x34
 800bbce:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bbd0:	f003 fe2e 	bl	800f830 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bbd4:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800bbd6:	2302      	movs	r3, #2
 800bbd8:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800bbda:	8823      	ldrh	r3, [r4, #0]
 800bbdc:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800bbde:	a90d      	add	r1, sp, #52	; 0x34
 800bbe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbe2:	f003 fe25 	bl	800f830 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800bbe6:	8829      	ldrh	r1, [r5, #0]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bbec:	f003 ff06 	bl	800f9fc <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800bbf0:	2005      	movs	r0, #5
 800bbf2:	f000 fae3 	bl	800c1bc <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800bbf6:	8821      	ldrh	r1, [r4, #0]
 800bbf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbfa:	f003 fef9 	bl	800f9f0 <HAL_GPIO_ReadPin>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	d006      	beq.n	800bc10 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800bc02:	4b0e      	ldr	r3, [pc, #56]	; (800bc3c <IsFactoryReset+0xf0>)
 800bc04:	2201      	movs	r2, #1
 800bc06:	4252      	negs	r2, r2
 800bc08:	601a      	str	r2, [r3, #0]
	return 0;
 800bc0a:	2000      	movs	r0, #0
}
 800bc0c:	b012      	add	sp, #72	; 0x48
 800bc0e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800bc10:	2322      	movs	r3, #34	; 0x22
 800bc12:	446b      	add	r3, sp
 800bc14:	8819      	ldrh	r1, [r3, #0]
 800bc16:	2201      	movs	r2, #1
 800bc18:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bc1a:	f003 feef 	bl	800f9fc <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800bc1e:	2005      	movs	r0, #5
 800bc20:	f000 facc 	bl	800c1bc <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800bc24:	ab07      	add	r3, sp, #28
 800bc26:	8819      	ldrh	r1, [r3, #0]
 800bc28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc2a:	f003 fee1 	bl	800f9f0 <HAL_GPIO_ReadPin>
 800bc2e:	2801      	cmp	r0, #1
 800bc30:	d1e7      	bne.n	800bc02 <IsFactoryReset+0xb6>
			return 1;
 800bc32:	2001      	movs	r0, #1
 800bc34:	e7ea      	b.n	800bc0c <IsFactoryReset+0xc0>
 800bc36:	46c0      	nop			; (mov r8, r8)
 800bc38:	40021000 	.word	0x40021000
 800bc3c:	20007ff0 	.word	0x20007ff0

0800bc40 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800bc40:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800bc42:	f002 fe01 	bl	800e848 <HAL_IncTick>
  osSystickHandler();  
 800bc46:	f000 fe55 	bl	800c8f4 <osSystickHandler>

}
 800bc4a:	bd10      	pop	{r4, pc}

0800bc4c <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800bc4c:	e7fe      	b.n	800bc4c <HardFault_Handler>
	...

0800bc50 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800bc50:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800bc52:	4802      	ldr	r0, [pc, #8]	; (800bc5c <USART1_IRQHandler+0xc>)
 800bc54:	f005 fbdf 	bl	8011416 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800bc58:	bd10      	pop	{r4, pc}
 800bc5a:	46c0      	nop			; (mov r8, r8)
 800bc5c:	20006b3c 	.word	0x20006b3c

0800bc60 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800bc60:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800bc62:	4802      	ldr	r0, [pc, #8]	; (800bc6c <USART2_IRQHandler+0xc>)
 800bc64:	f005 fbd7 	bl	8011416 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800bc68:	bd10      	pop	{r4, pc}
 800bc6a:	46c0      	nop			; (mov r8, r8)
 800bc6c:	20006c8c 	.word	0x20006c8c

0800bc70 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800bc70:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800bc72:	4806      	ldr	r0, [pc, #24]	; (800bc8c <USART3_8_IRQHandler+0x1c>)
 800bc74:	f005 fbcf 	bl	8011416 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800bc78:	4805      	ldr	r0, [pc, #20]	; (800bc90 <USART3_8_IRQHandler+0x20>)
 800bc7a:	f005 fbcc 	bl	8011416 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800bc7e:	4805      	ldr	r0, [pc, #20]	; (800bc94 <USART3_8_IRQHandler+0x24>)
 800bc80:	f005 fbc9 	bl	8011416 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800bc84:	4804      	ldr	r0, [pc, #16]	; (800bc98 <USART3_8_IRQHandler+0x28>)
 800bc86:	f005 fbc6 	bl	8011416 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800bc8a:	bd10      	pop	{r4, pc}
 800bc8c:	20006a5c 	.word	0x20006a5c
 800bc90:	20006c1c 	.word	0x20006c1c
 800bc94:	20006acc 	.word	0x20006acc
 800bc98:	20006bac 	.word	0x20006bac

0800bc9c <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800bc9c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800bc9e:	2001      	movs	r0, #1
 800bca0:	f7fb f86a 	bl	8006d78 <DMA_IRQHandler>
	
}
 800bca4:	bd10      	pop	{r4, pc}
	...

0800bca8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800bca8:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800bcaa:	4b0c      	ldr	r3, [pc, #48]	; (800bcdc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	06db      	lsls	r3, r3, #27
 800bcb0:	d408      	bmi.n	800bcc4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800bcb2:	4b0b      	ldr	r3, [pc, #44]	; (800bce0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	05db      	lsls	r3, r3, #23
 800bcb8:	d408      	bmi.n	800bccc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800bcba:	4b09      	ldr	r3, [pc, #36]	; (800bce0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	06db      	lsls	r3, r3, #27
 800bcc0:	d408      	bmi.n	800bcd4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800bcc2:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800bcc4:	2005      	movs	r0, #5
 800bcc6:	f7fb f857 	bl	8006d78 <DMA_IRQHandler>
 800bcca:	e7fa      	b.n	800bcc2 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800bccc:	2002      	movs	r0, #2
 800bcce:	f7fb f853 	bl	8006d78 <DMA_IRQHandler>
 800bcd2:	e7f6      	b.n	800bcc2 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800bcd4:	4803      	ldr	r0, [pc, #12]	; (800bce4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800bcd6:	f003 f807 	bl	800ece8 <HAL_DMA_IRQHandler>
}
 800bcda:	e7f2      	b.n	800bcc2 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800bcdc:	40020400 	.word	0x40020400
 800bce0:	40020000 	.word	0x40020000
 800bce4:	200018b0 	.word	0x200018b0

0800bce8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800bce8:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800bcea:	4b14      	ldr	r3, [pc, #80]	; (800bd3c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	03db      	lsls	r3, r3, #15
 800bcf0:	d413      	bmi.n	800bd1a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800bcf2:	4b12      	ldr	r3, [pc, #72]	; (800bd3c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	02db      	lsls	r3, r3, #11
 800bcf8:	d413      	bmi.n	800bd22 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800bcfa:	4b11      	ldr	r3, [pc, #68]	; (800bd40 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	05db      	lsls	r3, r3, #23
 800bd00:	d413      	bmi.n	800bd2a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800bd02:	4b0e      	ldr	r3, [pc, #56]	; (800bd3c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	04db      	lsls	r3, r3, #19
 800bd08:	d413      	bmi.n	800bd32 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800bd0a:	4b0c      	ldr	r3, [pc, #48]	; (800bd3c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	01db      	lsls	r3, r3, #7
 800bd10:	d506      	bpl.n	800bd20 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800bd12:	480c      	ldr	r0, [pc, #48]	; (800bd44 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800bd14:	f002 ffe8 	bl	800ece8 <HAL_DMA_IRQHandler>
	}
}
 800bd18:	e002      	b.n	800bd20 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800bd1a:	2003      	movs	r0, #3
 800bd1c:	f7fb f82c 	bl	8006d78 <DMA_IRQHandler>
}
 800bd20:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800bd22:	2004      	movs	r0, #4
 800bd24:	f7fb f828 	bl	8006d78 <DMA_IRQHandler>
 800bd28:	e7fa      	b.n	800bd20 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800bd2a:	2006      	movs	r0, #6
 800bd2c:	f7fb f824 	bl	8006d78 <DMA_IRQHandler>
 800bd30:	e7f6      	b.n	800bd20 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800bd32:	4805      	ldr	r0, [pc, #20]	; (800bd48 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800bd34:	f002 ffd8 	bl	800ece8 <HAL_DMA_IRQHandler>
 800bd38:	e7f2      	b.n	800bd20 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800bd3a:	46c0      	nop			; (mov r8, r8)
 800bd3c:	40020000 	.word	0x40020000
 800bd40:	40020400 	.word	0x40020400
 800bd44:	20001920 	.word	0x20001920
 800bd48:	200018e8 	.word	0x200018e8

0800bd4c <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd4c:	b510      	push	{r4, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800bd52:	2300      	movs	r3, #0
 800bd54:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800bd56:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d001      	beq.n	800bd60 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800bd5c:	f7fe feee 	bl	800ab3c <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800bd60:	0020      	movs	r0, r4
 800bd62:	f7fe fd81 	bl	800a868 <GetPort>
 800bd66:	0080      	lsls	r0, r0, #2
 800bd68:	4b03      	ldr	r3, [pc, #12]	; (800bd78 <HAL_UART_TxCpltCallback+0x2c>)
 800bd6a:	58c0      	ldr	r0, [r0, r3]
 800bd6c:	a901      	add	r1, sp, #4
 800bd6e:	f001 f945 	bl	800cffc <xQueueGiveFromISR>
}
 800bd72:	b002      	add	sp, #8
 800bd74:	bd10      	pop	{r4, pc}
 800bd76:	46c0      	nop			; (mov r8, r8)
 800bd78:	20006a08 	.word	0x20006a08

0800bd7c <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd7c:	b510      	push	{r4, lr}
 800bd7e:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800bd80:	2369      	movs	r3, #105	; 0x69
 800bd82:	2201      	movs	r2, #1
 800bd84:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800bd86:	f7fe fd6f 	bl	800a868 <GetPort>
	if (portStatus[port] == STREAM) {
 800bd8a:	4b0c      	ldr	r3, [pc, #48]	; (800bdbc <HAL_UART_ErrorCallback+0x40>)
 800bd8c:	5c1b      	ldrb	r3, [r3, r0]
 800bd8e:	2b02      	cmp	r3, #2
 800bd90:	d005      	beq.n	800bd9e <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800bd92:	4b0b      	ldr	r3, [pc, #44]	; (800bdc0 <HAL_UART_ErrorCallback+0x44>)
 800bd94:	1818      	adds	r0, r3, r0
 800bd96:	3801      	subs	r0, #1
 800bd98:	2301      	movs	r3, #1
 800bd9a:	7003      	strb	r3, [r0, #0]
	}	
}
 800bd9c:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800bd9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	685a      	ldr	r2, [r3, #4]
 800bda4:	b292      	uxth	r2, r2
 800bda6:	3801      	subs	r0, #1
 800bda8:	0080      	lsls	r0, r0, #2
 800bdaa:	4b06      	ldr	r3, [pc, #24]	; (800bdc4 <HAL_UART_ErrorCallback+0x48>)
 800bdac:	58c3      	ldr	r3, [r0, r3]
 800bdae:	6819      	ldr	r1, [r3, #0]
 800bdb0:	3128      	adds	r1, #40	; 0x28
 800bdb2:	0020      	movs	r0, r4
 800bdb4:	f004 ff18 	bl	8010be8 <HAL_UART_Receive_DMA>
 800bdb8:	e7f0      	b.n	800bd9c <HAL_UART_ErrorCallback+0x20>
 800bdba:	46c0      	nop			; (mov r8, r8)
 800bdbc:	200010f8 	.word	0x200010f8
 800bdc0:	200012c8 	.word	0x200012c8
 800bdc4:	200014a8 	.word	0x200014a8

0800bdc8 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bdc8:	b510      	push	{r4, lr}
 800bdca:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800bdcc:	f7fe fd4c 	bl	800a868 <GetPort>
 800bdd0:	4b13      	ldr	r3, [pc, #76]	; (800be20 <HAL_UART_RxCpltCallback+0x58>)
 800bdd2:	5c1b      	ldrb	r3, [r3, r0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d006      	beq.n	800bde6 <HAL_UART_RxCpltCallback+0x1e>
 800bdd8:	0020      	movs	r0, r4
 800bdda:	f7fe fd45 	bl	800a868 <GetPort>
 800bdde:	4b10      	ldr	r3, [pc, #64]	; (800be20 <HAL_UART_RxCpltCallback+0x58>)
 800bde0:	5c1b      	ldrb	r3, [r3, r0]
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d11a      	bne.n	800be1c <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800bde6:	0020      	movs	r0, r4
 800bde8:	f7fe fd3e 	bl	800a868 <GetPort>
 800bdec:	4b0d      	ldr	r3, [pc, #52]	; (800be24 <HAL_UART_RxCpltCallback+0x5c>)
 800bdee:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800bdf0:	0020      	movs	r0, r4
 800bdf2:	f7fe fd39 	bl	800a868 <GetPort>
 800bdf6:	4b0a      	ldr	r3, [pc, #40]	; (800be20 <HAL_UART_RxCpltCallback+0x58>)
 800bdf8:	2205      	movs	r2, #5
 800bdfa:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800bdfc:	0020      	movs	r0, r4
 800bdfe:	f7fe fd33 	bl	800a868 <GetPort>
 800be02:	4b09      	ldr	r3, [pc, #36]	; (800be28 <HAL_UART_RxCpltCallback+0x60>)
 800be04:	1818      	adds	r0, r3, r0
 800be06:	3801      	subs	r0, #1
 800be08:	2300      	movs	r3, #0
 800be0a:	7003      	strb	r3, [r0, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800be0c:	0020      	movs	r0, r4
 800be0e:	f7fe fd2b 	bl	800a868 <GetPort>
 800be12:	4b06      	ldr	r3, [pc, #24]	; (800be2c <HAL_UART_RxCpltCallback+0x64>)
 800be14:	1818      	adds	r0, r3, r0
 800be16:	3801      	subs	r0, #1
 800be18:	2301      	movs	r3, #1
 800be1a:	7003      	strb	r3, [r0, #0]
	}
}
 800be1c:	bd10      	pop	{r4, pc}
 800be1e:	46c0      	nop			; (mov r8, r8)
 800be20:	200010f8 	.word	0x200010f8
 800be24:	20006988 	.word	0x20006988
 800be28:	20001450 	.word	0x20001450
 800be2c:	200012c8 	.word	0x200012c8

0800be30 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800be30:	b672      	cpsid	i
 800be32:	e7fe      	b.n	800be32 <vApplicationStackOverflowHook+0x2>

0800be34 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800be34:	b672      	cpsid	i
 800be36:	e7fe      	b.n	800be36 <vApplicationMallocFailedHook+0x2>

0800be38 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800be38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be3a:	46ce      	mov	lr, r9
 800be3c:	b500      	push	{lr}
 800be3e:	b08e      	sub	sp, #56	; 0x38
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800be40:	ac05      	add	r4, sp, #20
 800be42:	4b34      	ldr	r3, [pc, #208]	; (800bf14 <RTC_CalendarConfig+0xdc>)
 800be44:	0022      	movs	r2, r4
 800be46:	cb43      	ldmia	r3!, {r0, r1, r6}
 800be48:	c243      	stmia	r2!, {r0, r1, r6}
 800be4a:	aa02      	add	r2, sp, #8
 800be4c:	4b32      	ldr	r3, [pc, #200]	; (800bf18 <RTC_CalendarConfig+0xe0>)
 800be4e:	cb03      	ldmia	r3!, {r0, r1}
 800be50:	c203      	stmia	r2!, {r0, r1}
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800be56:	2015      	movs	r0, #21
 800be58:	ab02      	add	r3, sp, #8
 800be5a:	469c      	mov	ip, r3
 800be5c:	4460      	add	r0, ip
 800be5e:	f005 fb6a 	bl	8011536 <atoi>
 800be62:	b2c3      	uxtb	r3, r0
 800be64:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800be66:	2600      	movs	r6, #0
 800be68:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 800be6a:	a806      	add	r0, sp, #24
 800be6c:	f005 fb63 	bl	8011536 <atoi>
 800be70:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 800be72:	70e6      	strb	r6, [r4, #3]
 800be74:	2401      	movs	r4, #1
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800be76:	4e29      	ldr	r6, [pc, #164]	; (800bf1c <RTC_CalendarConfig+0xe4>)
 800be78:	e002      	b.n	800be80 <RTC_CalendarConfig+0x48>
 800be7a:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 800be7c:	2c0d      	cmp	r4, #13
 800be7e:	d009      	beq.n	800be94 <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800be80:	00a3      	lsls	r3, r4, #2
 800be82:	3b04      	subs	r3, #4
 800be84:	58f1      	ldr	r1, [r6, r3]
 800be86:	a805      	add	r0, sp, #20
 800be88:	f7f4 f93c 	bl	8000104 <strcmp>
 800be8c:	2800      	cmp	r0, #0
 800be8e:	d1f4      	bne.n	800be7a <RTC_CalendarConfig+0x42>
			month = i + 1;
 800be90:	b2e5      	uxtb	r5, r4
 800be92:	e7f2      	b.n	800be7a <RTC_CalendarConfig+0x42>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800be94:	ab02      	add	r3, sp, #8
 800be96:	1d98      	adds	r0, r3, #6
 800be98:	f005 fb4d 	bl	8011536 <atoi>
 800be9c:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 800be9e:	ac05      	add	r4, sp, #20
 800bea0:	2600      	movs	r6, #0
 800bea2:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 800bea4:	ab02      	add	r3, sp, #8
 800bea6:	1cd8      	adds	r0, r3, #3
 800bea8:	f005 fb45 	bl	8011536 <atoi>
 800beac:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 800beae:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 800beb0:	a802      	add	r0, sp, #8
 800beb2:	f005 fb40 	bl	8011536 <atoi>
 800beb6:	0004      	movs	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800beb8:	a90d      	add	r1, sp, #52	; 0x34
 800beba:	464b      	mov	r3, r9
 800bebc:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800bebe:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800bec0:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800bec2:	2301      	movs	r3, #1
 800bec4:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800bec6:	2200      	movs	r2, #0
 800bec8:	4815      	ldr	r0, [pc, #84]	; (800bf20 <RTC_CalendarConfig+0xe8>)
 800beca:	f004 fbd9 	bl	8010680 <HAL_RTC_SetDate>
		return BOS_ERROR;
 800bece:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d119      	bne.n	800bf08 <RTC_CalendarConfig+0xd0>

  /* Set Time */
  stimestructure.Hours = hours;
 800bed4:	a908      	add	r1, sp, #32
 800bed6:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800bed8:	9b01      	ldr	r3, [sp, #4]
 800beda:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800bedc:	9b00      	ldr	r3, [sp, #0]
 800bede:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800bee0:	2300      	movs	r3, #0
 800bee2:	720b      	strb	r3, [r1, #8]
 800bee4:	4a0f      	ldr	r2, [pc, #60]	; (800bf24 <RTC_CalendarConfig+0xec>)
 800bee6:	3018      	adds	r0, #24
 800bee8:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800beea:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800beec:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800beee:	2200      	movs	r2, #0
 800bef0:	480b      	ldr	r0, [pc, #44]	; (800bf20 <RTC_CalendarConfig+0xe8>)
 800bef2:	f004 fb3f 	bl	8010574 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800bef6:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800bef8:	2800      	cmp	r0, #0
 800befa:	d105      	bne.n	800bf08 <RTC_CalendarConfig+0xd0>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800befc:	4a0a      	ldr	r2, [pc, #40]	; (800bf28 <RTC_CalendarConfig+0xf0>)
 800befe:	2101      	movs	r1, #1
 800bf00:	4807      	ldr	r0, [pc, #28]	; (800bf20 <RTC_CalendarConfig+0xe8>)
 800bf02:	f004 fc81 	bl	8010808 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800bf06:	2300      	movs	r3, #0
}
 800bf08:	0018      	movs	r0, r3
 800bf0a:	b00e      	add	sp, #56	; 0x38
 800bf0c:	bc04      	pop	{r2}
 800bf0e:	4691      	mov	r9, r2
 800bf10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf12:	46c0      	nop			; (mov r8, r8)
 800bf14:	08016388 	.word	0x08016388
 800bf18:	080163ac 	.word	0x080163ac
 800bf1c:	20000020 	.word	0x20000020
 800bf20:	20006d20 	.word	0x20006d20
 800bf24:	20006988 	.word	0x20006988
 800bf28:	000032f2 	.word	0x000032f2

0800bf2c <RTC_Init>:
{
 800bf2c:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800bf2e:	4a1c      	ldr	r2, [pc, #112]	; (800bfa0 <RTC_Init+0x74>)
 800bf30:	6a11      	ldr	r1, [r2, #32]
 800bf32:	2380      	movs	r3, #128	; 0x80
 800bf34:	021b      	lsls	r3, r3, #8
 800bf36:	430b      	orrs	r3, r1
 800bf38:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800bf3a:	481a      	ldr	r0, [pc, #104]	; (800bfa4 <RTC_Init+0x78>)
 800bf3c:	4b1a      	ldr	r3, [pc, #104]	; (800bfa8 <RTC_Init+0x7c>)
 800bf3e:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800bf40:	2300      	movs	r3, #0
 800bf42:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800bf44:	227c      	movs	r2, #124	; 0x7c
 800bf46:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800bf48:	4a18      	ldr	r2, [pc, #96]	; (800bfac <RTC_Init+0x80>)
 800bf4a:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800bf4c:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800bf4e:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800bf50:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800bf52:	f004 fab1 	bl	80104b8 <HAL_RTC_Init>
 800bf56:	23ff      	movs	r3, #255	; 0xff
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	d11e      	bne.n	800bf9a <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800bf5c:	2101      	movs	r1, #1
 800bf5e:	4811      	ldr	r0, [pc, #68]	; (800bfa4 <RTC_Init+0x78>)
 800bf60:	f004 fc58 	bl	8010814 <HAL_RTCEx_BKUPRead>
 800bf64:	4b12      	ldr	r3, [pc, #72]	; (800bfb0 <RTC_Init+0x84>)
 800bf66:	4298      	cmp	r0, r3
 800bf68:	d10e      	bne.n	800bf88 <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800bf6a:	4b0d      	ldr	r3, [pc, #52]	; (800bfa0 <RTC_Init+0x74>)
 800bf6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf6e:	011b      	lsls	r3, r3, #4
 800bf70:	d502      	bpl.n	800bf78 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800bf72:	4b10      	ldr	r3, [pc, #64]	; (800bfb4 <RTC_Init+0x88>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800bf78:	4b09      	ldr	r3, [pc, #36]	; (800bfa0 <RTC_Init+0x74>)
 800bf7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7c:	015b      	lsls	r3, r3, #5
 800bf7e:	d505      	bpl.n	800bf8c <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 800bf80:	4b0c      	ldr	r3, [pc, #48]	; (800bfb4 <RTC_Init+0x88>)
 800bf82:	2201      	movs	r2, #1
 800bf84:	701a      	strb	r2, [r3, #0]
 800bf86:	e001      	b.n	800bf8c <RTC_Init+0x60>
    RTC_CalendarConfig();
 800bf88:	f7ff ff56 	bl	800be38 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800bf8c:	4a04      	ldr	r2, [pc, #16]	; (800bfa0 <RTC_Init+0x74>)
 800bf8e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800bf90:	2380      	movs	r3, #128	; 0x80
 800bf92:	045b      	lsls	r3, r3, #17
 800bf94:	430b      	orrs	r3, r1
 800bf96:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800bf98:	2300      	movs	r3, #0
}
 800bf9a:	0018      	movs	r0, r3
 800bf9c:	bd10      	pop	{r4, pc}
 800bf9e:	46c0      	nop			; (mov r8, r8)
 800bfa0:	40021000 	.word	0x40021000
 800bfa4:	20006d20 	.word	0x20006d20
 800bfa8:	40002800 	.word	0x40002800
 800bfac:	000007cf 	.word	0x000007cf
 800bfb0:	000032f2 	.word	0x000032f2
 800bfb4:	20001aa8 	.word	0x20001aa8

0800bfb8 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800bfb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfba:	46c6      	mov	lr, r8
 800bfbc:	b500      	push	{lr}
 800bfbe:	b086      	sub	sp, #24
 800bfc0:	ac0c      	add	r4, sp, #48	; 0x30
 800bfc2:	7827      	ldrb	r7, [r4, #0]
 800bfc4:	ac0d      	add	r4, sp, #52	; 0x34
 800bfc6:	7824      	ldrb	r4, [r4, #0]
 800bfc8:	46a0      	mov	r8, r4
 800bfca:	ac0e      	add	r4, sp, #56	; 0x38
 800bfcc:	7825      	ldrb	r5, [r4, #0]
 800bfce:	ac0f      	add	r4, sp, #60	; 0x3c
 800bfd0:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800bfd2:	ac05      	add	r4, sp, #20
 800bfd4:	3230      	adds	r2, #48	; 0x30
 800bfd6:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800bfd8:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800bfda:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800bfdc:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800bfde:	2200      	movs	r2, #0
 800bfe0:	0021      	movs	r1, r4
 800bfe2:	481f      	ldr	r0, [pc, #124]	; (800c060 <BOS_CalendarConfig+0xa8>)
 800bfe4:	f004 fb4c 	bl	8010680 <HAL_RTC_SetDate>
 800bfe8:	2800      	cmp	r0, #0
 800bfea:	d136      	bne.n	800c05a <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800bfec:	466b      	mov	r3, sp
 800bfee:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800bff0:	4642      	mov	r2, r8
 800bff2:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800bff4:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800bff6:	2300      	movs	r3, #0
 800bff8:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800bffa:	2e01      	cmp	r6, #1
 800bffc:	d020      	beq.n	800c040 <BOS_CalendarConfig+0x88>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800bffe:	2e02      	cmp	r6, #2
 800c000:	d024      	beq.n	800c04c <BOS_CalendarConfig+0x94>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800c002:	4b18      	ldr	r3, [pc, #96]	; (800c064 <BOS_CalendarConfig+0xac>)
 800c004:	2218      	movs	r2, #24
 800c006:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800c008:	2200      	movs	r2, #0
 800c00a:	4669      	mov	r1, sp
 800c00c:	4814      	ldr	r0, [pc, #80]	; (800c060 <BOS_CalendarConfig+0xa8>)
 800c00e:	f004 fab1 	bl	8010574 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800c012:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800c014:	2800      	cmp	r0, #0
 800c016:	d10e      	bne.n	800c036 <BOS_CalendarConfig+0x7e>
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800c018:	4a12      	ldr	r2, [pc, #72]	; (800c064 <BOS_CalendarConfig+0xac>)
 800c01a:	7b53      	ldrb	r3, [r2, #13]
 800c01c:	021b      	lsls	r3, r3, #8
 800c01e:	7911      	ldrb	r1, [r2, #4]
 800c020:	4319      	orrs	r1, r3
 800c022:	308d      	adds	r0, #141	; 0x8d
 800c024:	0040      	lsls	r0, r0, #1
 800c026:	f7fa ff91 	bl	8006f4c <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800c02a:	4a0f      	ldr	r2, [pc, #60]	; (800c068 <BOS_CalendarConfig+0xb0>)
 800c02c:	2101      	movs	r1, #1
 800c02e:	480c      	ldr	r0, [pc, #48]	; (800c060 <BOS_CalendarConfig+0xa8>)
 800c030:	f004 fbea 	bl	8010808 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800c034:	2300      	movs	r3, #0
}
 800c036:	0018      	movs	r0, r3
 800c038:	b006      	add	sp, #24
 800c03a:	bc04      	pop	{r2}
 800c03c:	4690      	mov	r8, r2
 800c03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800c040:	466a      	mov	r2, sp
 800c042:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800c044:	4b07      	ldr	r3, [pc, #28]	; (800c064 <BOS_CalendarConfig+0xac>)
 800c046:	220c      	movs	r2, #12
 800c048:	735a      	strb	r2, [r3, #13]
 800c04a:	e7dd      	b.n	800c008 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800c04c:	2340      	movs	r3, #64	; 0x40
 800c04e:	466a      	mov	r2, sp
 800c050:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800c052:	4b04      	ldr	r3, [pc, #16]	; (800c064 <BOS_CalendarConfig+0xac>)
 800c054:	220c      	movs	r2, #12
 800c056:	735a      	strb	r2, [r3, #13]
 800c058:	e7d6      	b.n	800c008 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800c05a:	23ff      	movs	r3, #255	; 0xff
 800c05c:	e7eb      	b.n	800c036 <BOS_CalendarConfig+0x7e>
 800c05e:	46c0      	nop			; (mov r8, r8)
 800c060:	20006d20 	.word	0x20006d20
 800c064:	20006988 	.word	0x20006988
 800c068:	000032f2 	.word	0x000032f2

0800c06c <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800c06c:	b530      	push	{r4, r5, lr}
 800c06e:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800c070:	4d16      	ldr	r5, [pc, #88]	; (800c0cc <GetTimeDate+0x60>)
 800c072:	2200      	movs	r2, #0
 800c074:	a902      	add	r1, sp, #8
 800c076:	0028      	movs	r0, r5
 800c078:	f004 fb7e 	bl	8010778 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800c07c:	ac07      	add	r4, sp, #28
 800c07e:	2200      	movs	r2, #0
 800c080:	0021      	movs	r1, r4
 800c082:	0028      	movs	r0, r5
 800c084:	f004 fb9e 	bl	80107c4 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800c088:	4b11      	ldr	r3, [pc, #68]	; (800c0d0 <GetTimeDate+0x64>)
 800c08a:	aa02      	add	r2, sp, #8
 800c08c:	7a12      	ldrb	r2, [r2, #8]
 800c08e:	09d2      	lsrs	r2, r2, #7
 800c090:	3201      	adds	r2, #1
 800c092:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800c094:	9a03      	ldr	r2, [sp, #12]
 800c096:	9201      	str	r2, [sp, #4]
 800c098:	0852      	lsrs	r2, r2, #1
 800c09a:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800c09c:	aa02      	add	r2, sp, #8
 800c09e:	7892      	ldrb	r2, [r2, #2]
 800c0a0:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800c0a2:	aa02      	add	r2, sp, #8
 800c0a4:	7852      	ldrb	r2, [r2, #1]
 800c0a6:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800c0a8:	aa02      	add	r2, sp, #8
 800c0aa:	7812      	ldrb	r2, [r2, #0]
 800c0ac:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800c0ae:	78a2      	ldrb	r2, [r4, #2]
 800c0b0:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800c0b2:	7862      	ldrb	r2, [r4, #1]
 800c0b4:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800c0b6:	7822      	ldrb	r2, [r4, #0]
 800c0b8:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800c0ba:	78e2      	ldrb	r2, [r4, #3]
 800c0bc:	21fa      	movs	r1, #250	; 0xfa
 800c0be:	00c9      	lsls	r1, r1, #3
 800c0c0:	468c      	mov	ip, r1
 800c0c2:	4462      	add	r2, ip
 800c0c4:	831a      	strh	r2, [r3, #24]
}
 800c0c6:	b009      	add	sp, #36	; 0x24
 800c0c8:	bd30      	pop	{r4, r5, pc}
 800c0ca:	46c0      	nop			; (mov r8, r8)
 800c0cc:	20006d20 	.word	0x20006d20
 800c0d0:	20006988 	.word	0x20006988

0800c0d4 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800c0d4:	b530      	push	{r4, r5, lr}
 800c0d6:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800c0d8:	4a12      	ldr	r2, [pc, #72]	; (800c124 <TIM_USEC_Init+0x50>)
 800c0da:	69d1      	ldr	r1, [r2, #28]
 800c0dc:	2080      	movs	r0, #128	; 0x80
 800c0de:	0040      	lsls	r0, r0, #1
 800c0e0:	4301      	orrs	r1, r0
 800c0e2:	61d1      	str	r1, [r2, #28]
 800c0e4:	69d3      	ldr	r3, [r2, #28]
 800c0e6:	4003      	ands	r3, r0
 800c0e8:	9301      	str	r3, [sp, #4]
 800c0ea:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800c0ec:	4c0e      	ldr	r4, [pc, #56]	; (800c128 <TIM_USEC_Init+0x54>)
 800c0ee:	4b0f      	ldr	r3, [pc, #60]	; (800c12c <TIM_USEC_Init+0x58>)
 800c0f0:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800c0f2:	f004 f8f9 	bl	80102e8 <HAL_RCC_GetPCLK1Freq>
 800c0f6:	490e      	ldr	r1, [pc, #56]	; (800c130 <TIM_USEC_Init+0x5c>)
 800c0f8:	f7f4 f82a 	bl	8000150 <__udivsi3>
 800c0fc:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c0fe:	2500      	movs	r5, #0
 800c100:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800c102:	4b0c      	ldr	r3, [pc, #48]	; (800c134 <TIM_USEC_Init+0x60>)
 800c104:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800c106:	0020      	movs	r0, r4
 800c108:	f004 fc14 	bl	8010934 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c10c:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c10e:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800c110:	a902      	add	r1, sp, #8
 800c112:	0020      	movs	r0, r4
 800c114:	f004 fc28 	bl	8010968 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800c118:	0020      	movs	r0, r4
 800c11a:	f004 fb82 	bl	8010822 <HAL_TIM_Base_Start>
}
 800c11e:	b005      	add	sp, #20
 800c120:	bd30      	pop	{r4, r5, pc}
 800c122:	46c0      	nop			; (mov r8, r8)
 800c124:	40021000 	.word	0x40021000
 800c128:	20006d7c 	.word	0x20006d7c
 800c12c:	40002000 	.word	0x40002000
 800c130:	000f4240 	.word	0x000f4240
 800c134:	0000ffff 	.word	0x0000ffff

0800c138 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800c138:	b530      	push	{r4, r5, lr}
 800c13a:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800c13c:	4a12      	ldr	r2, [pc, #72]	; (800c188 <TIM_MSEC_Init+0x50>)
 800c13e:	6991      	ldr	r1, [r2, #24]
 800c140:	2080      	movs	r0, #128	; 0x80
 800c142:	0240      	lsls	r0, r0, #9
 800c144:	4301      	orrs	r1, r0
 800c146:	6191      	str	r1, [r2, #24]
 800c148:	6993      	ldr	r3, [r2, #24]
 800c14a:	4003      	ands	r3, r0
 800c14c:	9301      	str	r3, [sp, #4]
 800c14e:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800c150:	4c0e      	ldr	r4, [pc, #56]	; (800c18c <TIM_MSEC_Init+0x54>)
 800c152:	4b0f      	ldr	r3, [pc, #60]	; (800c190 <TIM_MSEC_Init+0x58>)
 800c154:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800c156:	f004 f8c7 	bl	80102e8 <HAL_RCC_GetPCLK1Freq>
 800c15a:	21fa      	movs	r1, #250	; 0xfa
 800c15c:	0089      	lsls	r1, r1, #2
 800c15e:	f7f3 fff7 	bl	8000150 <__udivsi3>
 800c162:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c164:	2500      	movs	r5, #0
 800c166:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800c168:	4b0a      	ldr	r3, [pc, #40]	; (800c194 <TIM_MSEC_Init+0x5c>)
 800c16a:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800c16c:	0020      	movs	r0, r4
 800c16e:	f004 fbe1 	bl	8010934 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c172:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c174:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800c176:	a902      	add	r1, sp, #8
 800c178:	0020      	movs	r0, r4
 800c17a:	f004 fbf5 	bl	8010968 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800c17e:	0020      	movs	r0, r4
 800c180:	f004 fb4f 	bl	8010822 <HAL_TIM_Base_Start>
}
 800c184:	b005      	add	sp, #20
 800c186:	bd30      	pop	{r4, r5, pc}
 800c188:	40021000 	.word	0x40021000
 800c18c:	20006d40 	.word	0x20006d40
 800c190:	40014000 	.word	0x40014000
 800c194:	0000ffff 	.word	0x0000ffff

0800c198 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800c198:	b510      	push	{r4, lr}
 800c19a:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800c19c:	f002 f9f0 	bl	800e580 <vPortEnterCritical>
	
	if (Delay)
 800c1a0:	2c00      	cmp	r4, #0
 800c1a2:	d006      	beq.n	800c1b2 <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800c1a4:	4b04      	ldr	r3, [pc, #16]	; (800c1b8 <StartMicroDelay+0x20>)
 800c1a6:	681a      	ldr	r2, [r3, #0]
 800c1a8:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800c1aa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c1ac:	1a5b      	subs	r3, r3, r1
 800c1ae:	42a3      	cmp	r3, r4
 800c1b0:	d9fb      	bls.n	800c1aa <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800c1b2:	f002 f9f1 	bl	800e598 <vPortExitCritical>
}
 800c1b6:	bd10      	pop	{r4, pc}
 800c1b8:	20006d7c 	.word	0x20006d7c

0800c1bc <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800c1bc:	b510      	push	{r4, lr}
 800c1be:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800c1c0:	f002 f9de 	bl	800e580 <vPortEnterCritical>
	
	if (Delay)
 800c1c4:	2c00      	cmp	r4, #0
 800c1c6:	d006      	beq.n	800c1d6 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800c1c8:	4b04      	ldr	r3, [pc, #16]	; (800c1dc <StartMilliDelay+0x20>)
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800c1ce:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800c1d0:	1a5b      	subs	r3, r3, r1
 800c1d2:	42a3      	cmp	r3, r4
 800c1d4:	d9fb      	bls.n	800c1ce <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800c1d6:	f002 f9df 	bl	800e598 <vPortExitCritical>
}
 800c1da:	bd10      	pop	{r4, pc}
 800c1dc:	20006d40 	.word	0x20006d40

0800c1e0 <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800c1e0:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800c1e2:	4809      	ldr	r0, [pc, #36]	; (800c208 <MX_USART1_UART_Init+0x28>)
 800c1e4:	4b09      	ldr	r3, [pc, #36]	; (800c20c <MX_USART1_UART_Init+0x2c>)
 800c1e6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c1e8:	23e1      	movs	r3, #225	; 0xe1
 800c1ea:	031b      	lsls	r3, r3, #12
 800c1ec:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c1f2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c1f4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c1f6:	220c      	movs	r2, #12
 800c1f8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c1fa:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c1fc:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c1fe:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c200:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800c202:	f005 f831 	bl	8011268 <HAL_UART_Init>
	#if _P4pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif
}
 800c206:	bd10      	pop	{r4, pc}
 800c208:	20006b3c 	.word	0x20006b3c
 800c20c:	40013800 	.word	0x40013800

0800c210 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800c210:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800c212:	4809      	ldr	r0, [pc, #36]	; (800c238 <MX_USART2_UART_Init+0x28>)
 800c214:	4b09      	ldr	r3, [pc, #36]	; (800c23c <MX_USART2_UART_Init+0x2c>)
 800c216:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c218:	23e1      	movs	r3, #225	; 0xe1
 800c21a:	031b      	lsls	r3, r3, #12
 800c21c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c21e:	2300      	movs	r3, #0
 800c220:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c222:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c224:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c226:	220c      	movs	r2, #12
 800c228:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c22a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c22c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c22e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c230:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800c232:	f005 f819 	bl	8011268 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif
}
 800c236:	bd10      	pop	{r4, pc}
 800c238:	20006c8c 	.word	0x20006c8c
 800c23c:	40004400 	.word	0x40004400

0800c240 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800c240:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800c242:	4809      	ldr	r0, [pc, #36]	; (800c268 <MX_USART3_UART_Init+0x28>)
 800c244:	4b09      	ldr	r3, [pc, #36]	; (800c26c <MX_USART3_UART_Init+0x2c>)
 800c246:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c248:	23e1      	movs	r3, #225	; 0xe1
 800c24a:	031b      	lsls	r3, r3, #12
 800c24c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800c24e:	2300      	movs	r3, #0
 800c250:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800c252:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800c254:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800c256:	220c      	movs	r2, #12
 800c258:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c25a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800c25c:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c25e:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c260:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800c262:	f005 f801 	bl	8011268 <HAL_UART_Init>
	#if _P6pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif
}
 800c266:	bd10      	pop	{r4, pc}
 800c268:	20006a5c 	.word	0x20006a5c
 800c26c:	40004800 	.word	0x40004800

0800c270 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800c270:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800c272:	4809      	ldr	r0, [pc, #36]	; (800c298 <MX_USART4_UART_Init+0x28>)
 800c274:	4b09      	ldr	r3, [pc, #36]	; (800c29c <MX_USART4_UART_Init+0x2c>)
 800c276:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c278:	23e1      	movs	r3, #225	; 0xe1
 800c27a:	031b      	lsls	r3, r3, #12
 800c27c:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800c27e:	2300      	movs	r3, #0
 800c280:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800c282:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800c284:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800c286:	220c      	movs	r2, #12
 800c288:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c28a:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800c28c:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c28e:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c290:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800c292:	f004 ffe9 	bl	8011268 <HAL_UART_Init>
	#if _P1pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif
}
 800c296:	bd10      	pop	{r4, pc}
 800c298:	20006c1c 	.word	0x20006c1c
 800c29c:	40004c00 	.word	0x40004c00

0800c2a0 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800c2a0:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800c2a2:	4809      	ldr	r0, [pc, #36]	; (800c2c8 <MX_USART5_UART_Init+0x28>)
 800c2a4:	4b09      	ldr	r3, [pc, #36]	; (800c2cc <MX_USART5_UART_Init+0x2c>)
 800c2a6:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c2a8:	23e1      	movs	r3, #225	; 0xe1
 800c2aa:	031b      	lsls	r3, r3, #12
 800c2ac:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800c2b2:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800c2b4:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800c2b6:	220c      	movs	r2, #12
 800c2b8:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c2ba:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800c2bc:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c2be:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c2c0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800c2c2:	f004 ffd1 	bl	8011268 <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif
}
 800c2c6:	bd10      	pop	{r4, pc}
 800c2c8:	20006acc 	.word	0x20006acc
 800c2cc:	40005000 	.word	0x40005000

0800c2d0 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800c2d0:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800c2d2:	4809      	ldr	r0, [pc, #36]	; (800c2f8 <MX_USART6_UART_Init+0x28>)
 800c2d4:	4b09      	ldr	r3, [pc, #36]	; (800c2fc <MX_USART6_UART_Init+0x2c>)
 800c2d6:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800c2d8:	23e1      	movs	r3, #225	; 0xe1
 800c2da:	031b      	lsls	r3, r3, #12
 800c2dc:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800c2e2:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800c2e4:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c2e6:	220c      	movs	r2, #12
 800c2e8:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c2ea:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800c2ec:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800c2ee:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c2f0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800c2f2:	f004 ffb9 	bl	8011268 <HAL_UART_Init>
	#if _P3pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif
}
 800c2f6:	bd10      	pop	{r4, pc}
 800c2f8:	20006bac 	.word	0x20006bac
 800c2fc:	40011400 	.word	0x40011400

0800c300 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c300:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c302:	46ce      	mov	lr, r9
 800c304:	b500      	push	{lr}
 800c306:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800c308:	6803      	ldr	r3, [r0, #0]
 800c30a:	4a91      	ldr	r2, [pc, #580]	; (800c550 <HAL_UART_MspInit+0x250>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d015      	beq.n	800c33c <HAL_UART_MspInit+0x3c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800c310:	4a90      	ldr	r2, [pc, #576]	; (800c554 <HAL_UART_MspInit+0x254>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d040      	beq.n	800c398 <HAL_UART_MspInit+0x98>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800c316:	4a90      	ldr	r2, [pc, #576]	; (800c558 <HAL_UART_MspInit+0x258>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d069      	beq.n	800c3f0 <HAL_UART_MspInit+0xf0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800c31c:	4a8f      	ldr	r2, [pc, #572]	; (800c55c <HAL_UART_MspInit+0x25c>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d100      	bne.n	800c324 <HAL_UART_MspInit+0x24>
 800c322:	e092      	b.n	800c44a <HAL_UART_MspInit+0x14a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800c324:	4a8e      	ldr	r2, [pc, #568]	; (800c560 <HAL_UART_MspInit+0x260>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d100      	bne.n	800c32c <HAL_UART_MspInit+0x2c>
 800c32a:	e0b9      	b.n	800c4a0 <HAL_UART_MspInit+0x1a0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800c32c:	4a8d      	ldr	r2, [pc, #564]	; (800c564 <HAL_UART_MspInit+0x264>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d100      	bne.n	800c334 <HAL_UART_MspInit+0x34>
 800c332:	e0e0      	b.n	800c4f6 <HAL_UART_MspInit+0x1f6>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800c334:	b00c      	add	sp, #48	; 0x30
 800c336:	bc04      	pop	{r2}
 800c338:	4691      	mov	r9, r2
 800c33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800c33c:	4a8a      	ldr	r2, [pc, #552]	; (800c568 <HAL_UART_MspInit+0x268>)
 800c33e:	6991      	ldr	r1, [r2, #24]
 800c340:	2080      	movs	r0, #128	; 0x80
 800c342:	01c0      	lsls	r0, r0, #7
 800c344:	4301      	orrs	r1, r0
 800c346:	6191      	str	r1, [r2, #24]
 800c348:	6993      	ldr	r3, [r2, #24]
 800c34a:	4003      	ands	r3, r0
 800c34c:	9301      	str	r3, [sp, #4]
 800c34e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_PIN;
 800c350:	2380      	movs	r3, #128	; 0x80
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c356:	2702      	movs	r7, #2
 800c358:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c35a:	2401      	movs	r4, #1
 800c35c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c35e:	2603      	movs	r6, #3
 800c360:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800c362:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800c364:	2590      	movs	r5, #144	; 0x90
 800c366:	05ed      	lsls	r5, r5, #23
 800c368:	a907      	add	r1, sp, #28
 800c36a:	0028      	movs	r0, r5
 800c36c:	f003 fa60 	bl	800f830 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;
 800c370:	2380      	movs	r3, #128	; 0x80
 800c372:	00db      	lsls	r3, r3, #3
 800c374:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c376:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c378:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c37a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800c37c:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800c37e:	a907      	add	r1, sp, #28
 800c380:	0028      	movs	r0, r5
 800c382:	f003 fa55 	bl	800f830 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800c386:	2200      	movs	r2, #0
 800c388:	2101      	movs	r1, #1
 800c38a:	201b      	movs	r0, #27
 800c38c:	f002 fa86 	bl	800e89c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c390:	201b      	movs	r0, #27
 800c392:	f002 fab7 	bl	800e904 <HAL_NVIC_EnableIRQ>
 800c396:	e7cd      	b.n	800c334 <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800c398:	4a73      	ldr	r2, [pc, #460]	; (800c568 <HAL_UART_MspInit+0x268>)
 800c39a:	69d1      	ldr	r1, [r2, #28]
 800c39c:	2080      	movs	r0, #128	; 0x80
 800c39e:	0280      	lsls	r0, r0, #10
 800c3a0:	4301      	orrs	r1, r0
 800c3a2:	61d1      	str	r1, [r2, #28]
 800c3a4:	69d3      	ldr	r3, [r2, #28]
 800c3a6:	4003      	ands	r3, r0
 800c3a8:	9302      	str	r3, [sp, #8]
 800c3aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART2_TX_PIN;
 800c3ac:	2304      	movs	r3, #4
 800c3ae:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3b0:	2702      	movs	r7, #2
 800c3b2:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c3b4:	2401      	movs	r4, #1
 800c3b6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c3b8:	2603      	movs	r6, #3
 800c3ba:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800c3bc:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800c3be:	2590      	movs	r5, #144	; 0x90
 800c3c0:	05ed      	lsls	r5, r5, #23
 800c3c2:	a907      	add	r1, sp, #28
 800c3c4:	0028      	movs	r0, r5
 800c3c6:	f003 fa33 	bl	800f830 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;
 800c3ca:	2308      	movs	r3, #8
 800c3cc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3ce:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c3d0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c3d2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800c3d4:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800c3d6:	a907      	add	r1, sp, #28
 800c3d8:	0028      	movs	r0, r5
 800c3da:	f003 fa29 	bl	800f830 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800c3de:	2200      	movs	r2, #0
 800c3e0:	2101      	movs	r1, #1
 800c3e2:	201c      	movs	r0, #28
 800c3e4:	f002 fa5a 	bl	800e89c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800c3e8:	201c      	movs	r0, #28
 800c3ea:	f002 fa8b 	bl	800e904 <HAL_NVIC_EnableIRQ>
 800c3ee:	e7a1      	b.n	800c334 <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800c3f0:	4a5d      	ldr	r2, [pc, #372]	; (800c568 <HAL_UART_MspInit+0x268>)
 800c3f2:	69d1      	ldr	r1, [r2, #28]
 800c3f4:	2080      	movs	r0, #128	; 0x80
 800c3f6:	02c0      	lsls	r0, r0, #11
 800c3f8:	4301      	orrs	r1, r0
 800c3fa:	61d1      	str	r1, [r2, #28]
 800c3fc:	69d3      	ldr	r3, [r2, #28]
 800c3fe:	4003      	ands	r3, r0
 800c400:	9303      	str	r3, [sp, #12]
 800c402:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN;
 800c404:	2380      	movs	r3, #128	; 0x80
 800c406:	00db      	lsls	r3, r3, #3
 800c408:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c40a:	2402      	movs	r4, #2
 800c40c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c40e:	2701      	movs	r7, #1
 800c410:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c412:	2603      	movs	r6, #3
 800c414:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800c416:	2504      	movs	r5, #4
 800c418:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800c41a:	a907      	add	r1, sp, #28
 800c41c:	4853      	ldr	r0, [pc, #332]	; (800c56c <HAL_UART_MspInit+0x26c>)
 800c41e:	f003 fa07 	bl	800f830 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;
 800c422:	2380      	movs	r3, #128	; 0x80
 800c424:	011b      	lsls	r3, r3, #4
 800c426:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c428:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c42a:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c42c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800c42e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800c430:	a907      	add	r1, sp, #28
 800c432:	484e      	ldr	r0, [pc, #312]	; (800c56c <HAL_UART_MspInit+0x26c>)
 800c434:	f003 f9fc 	bl	800f830 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800c438:	2200      	movs	r2, #0
 800c43a:	2101      	movs	r1, #1
 800c43c:	201d      	movs	r0, #29
 800c43e:	f002 fa2d 	bl	800e89c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800c442:	201d      	movs	r0, #29
 800c444:	f002 fa5e 	bl	800e904 <HAL_NVIC_EnableIRQ>
 800c448:	e774      	b.n	800c334 <HAL_UART_MspInit+0x34>
    __USART4_CLK_ENABLE();
 800c44a:	4a47      	ldr	r2, [pc, #284]	; (800c568 <HAL_UART_MspInit+0x268>)
 800c44c:	69d1      	ldr	r1, [r2, #28]
 800c44e:	2080      	movs	r0, #128	; 0x80
 800c450:	0300      	lsls	r0, r0, #12
 800c452:	4301      	orrs	r1, r0
 800c454:	61d1      	str	r1, [r2, #28]
 800c456:	69d3      	ldr	r3, [r2, #28]
 800c458:	4003      	ands	r3, r0
 800c45a:	9304      	str	r3, [sp, #16]
 800c45c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN;
 800c45e:	2401      	movs	r4, #1
 800c460:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c462:	2502      	movs	r5, #2
 800c464:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c466:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c468:	2603      	movs	r6, #3
 800c46a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800c46c:	2704      	movs	r7, #4
 800c46e:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800c470:	a907      	add	r1, sp, #28
 800c472:	2090      	movs	r0, #144	; 0x90
 800c474:	05c0      	lsls	r0, r0, #23
 800c476:	f003 f9db 	bl	800f830 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;
 800c47a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c47c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c47e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c480:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800c482:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800c484:	a907      	add	r1, sp, #28
 800c486:	2090      	movs	r0, #144	; 0x90
 800c488:	05c0      	lsls	r0, r0, #23
 800c48a:	f003 f9d1 	bl	800f830 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800c48e:	2200      	movs	r2, #0
 800c490:	2101      	movs	r1, #1
 800c492:	201d      	movs	r0, #29
 800c494:	f002 fa02 	bl	800e89c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800c498:	201d      	movs	r0, #29
 800c49a:	f002 fa33 	bl	800e904 <HAL_NVIC_EnableIRQ>
 800c49e:	e749      	b.n	800c334 <HAL_UART_MspInit+0x34>
    __USART5_CLK_ENABLE();
 800c4a0:	4a31      	ldr	r2, [pc, #196]	; (800c568 <HAL_UART_MspInit+0x268>)
 800c4a2:	69d1      	ldr	r1, [r2, #28]
 800c4a4:	2080      	movs	r0, #128	; 0x80
 800c4a6:	0340      	lsls	r0, r0, #13
 800c4a8:	4301      	orrs	r1, r0
 800c4aa:	61d1      	str	r1, [r2, #28]
 800c4ac:	69d3      	ldr	r3, [r2, #28]
 800c4ae:	4003      	ands	r3, r0
 800c4b0:	9305      	str	r3, [sp, #20]
 800c4b2:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART5_TX_PIN;
 800c4b4:	2308      	movs	r3, #8
 800c4b6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4b8:	2402      	movs	r4, #2
 800c4ba:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c4bc:	2701      	movs	r7, #1
 800c4be:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c4c0:	2603      	movs	r6, #3
 800c4c2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800c4c4:	2504      	movs	r5, #4
 800c4c6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800c4c8:	a907      	add	r1, sp, #28
 800c4ca:	4828      	ldr	r0, [pc, #160]	; (800c56c <HAL_UART_MspInit+0x26c>)
 800c4cc:	f003 f9b0 	bl	800f830 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;
 800c4d0:	2310      	movs	r3, #16
 800c4d2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4d4:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c4d6:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c4d8:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800c4da:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800c4dc:	a907      	add	r1, sp, #28
 800c4de:	4823      	ldr	r0, [pc, #140]	; (800c56c <HAL_UART_MspInit+0x26c>)
 800c4e0:	f003 f9a6 	bl	800f830 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	2101      	movs	r1, #1
 800c4e8:	201d      	movs	r0, #29
 800c4ea:	f002 f9d7 	bl	800e89c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800c4ee:	201d      	movs	r0, #29
 800c4f0:	f002 fa08 	bl	800e904 <HAL_NVIC_EnableIRQ>
 800c4f4:	e71e      	b.n	800c334 <HAL_UART_MspInit+0x34>
    __USART6_CLK_ENABLE();
 800c4f6:	4b1c      	ldr	r3, [pc, #112]	; (800c568 <HAL_UART_MspInit+0x268>)
 800c4f8:	699a      	ldr	r2, [r3, #24]
 800c4fa:	2420      	movs	r4, #32
 800c4fc:	4322      	orrs	r2, r4
 800c4fe:	619a      	str	r2, [r3, #24]
 800c500:	699b      	ldr	r3, [r3, #24]
 800c502:	4023      	ands	r3, r4
 800c504:	9306      	str	r3, [sp, #24]
 800c506:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN;
 800c508:	2310      	movs	r3, #16
 800c50a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c50c:	3b0e      	subs	r3, #14
 800c50e:	4699      	mov	r9, r3
 800c510:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c512:	2501      	movs	r5, #1
 800c514:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c516:	2703      	movs	r7, #3
 800c518:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800c51a:	2605      	movs	r6, #5
 800c51c:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800c51e:	a907      	add	r1, sp, #28
 800c520:	2090      	movs	r0, #144	; 0x90
 800c522:	05c0      	lsls	r0, r0, #23
 800c524:	f003 f984 	bl	800f830 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;
 800c528:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c52a:	464b      	mov	r3, r9
 800c52c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c52e:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c530:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800c532:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800c534:	a907      	add	r1, sp, #28
 800c536:	2090      	movs	r0, #144	; 0x90
 800c538:	05c0      	lsls	r0, r0, #23
 800c53a:	f003 f979 	bl	800f830 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800c53e:	2200      	movs	r2, #0
 800c540:	2101      	movs	r1, #1
 800c542:	201d      	movs	r0, #29
 800c544:	f002 f9aa 	bl	800e89c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800c548:	201d      	movs	r0, #29
 800c54a:	f002 f9db 	bl	800e904 <HAL_NVIC_EnableIRQ>
}
 800c54e:	e6f1      	b.n	800c334 <HAL_UART_MspInit+0x34>
 800c550:	40013800 	.word	0x40013800
 800c554:	40004400 	.word	0x40004400
 800c558:	40004800 	.word	0x40004800
 800c55c:	40004c00 	.word	0x40004c00
 800c560:	40005000 	.word	0x40005000
 800c564:	40011400 	.word	0x40011400
 800c568:	40021000 	.word	0x40021000
 800c56c:	48000400 	.word	0x48000400

0800c570 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800c570:	2806      	cmp	r0, #6
 800c572:	d80d      	bhi.n	800c590 <GetUart+0x20>
 800c574:	0080      	lsls	r0, r0, #2
 800c576:	4b08      	ldr	r3, [pc, #32]	; (800c598 <GetUart+0x28>)
 800c578:	581b      	ldr	r3, [r3, r0]
 800c57a:	469f      	mov	pc, r3
		case P1 : 
			return P1uart;	
	#endif
	#ifdef _P2
		case P2 :
			return P2uart;
 800c57c:	4807      	ldr	r0, [pc, #28]	; (800c59c <GetUart+0x2c>)
 800c57e:	e00a      	b.n	800c596 <GetUart+0x26>
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800c580:	4807      	ldr	r0, [pc, #28]	; (800c5a0 <GetUart+0x30>)
 800c582:	e008      	b.n	800c596 <GetUart+0x26>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800c584:	4807      	ldr	r0, [pc, #28]	; (800c5a4 <GetUart+0x34>)
 800c586:	e006      	b.n	800c596 <GetUart+0x26>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800c588:	4807      	ldr	r0, [pc, #28]	; (800c5a8 <GetUart+0x38>)
 800c58a:	e004      	b.n	800c596 <GetUart+0x26>
	#endif
	#ifdef _P6
		case P6 :
			return P6uart;
 800c58c:	4807      	ldr	r0, [pc, #28]	; (800c5ac <GetUart+0x3c>)
 800c58e:	e002      	b.n	800c596 <GetUart+0x26>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800c590:	2000      	movs	r0, #0
 800c592:	e000      	b.n	800c596 <GetUart+0x26>
			return P1uart;	
 800c594:	4806      	ldr	r0, [pc, #24]	; (800c5b0 <GetUart+0x40>)
	}		
}
 800c596:	4770      	bx	lr
 800c598:	08018bc8 	.word	0x08018bc8
 800c59c:	20006c8c 	.word	0x20006c8c
 800c5a0:	20006bac 	.word	0x20006bac
 800c5a4:	20006b3c 	.word	0x20006b3c
 800c5a8:	20006acc 	.word	0x20006acc
 800c5ac:	20006a5c 	.word	0x20006a5c
 800c5b0:	20006c1c 	.word	0x20006c1c

0800c5b4 <writePxMutex>:
{
 800c5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	0005      	movs	r5, r0
 800c5ba:	9100      	str	r1, [sp, #0]
 800c5bc:	0017      	movs	r7, r2
 800c5be:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800c5c0:	f7ff ffd6 	bl	800c570 <GetUart>
 800c5c4:	0004      	movs	r4, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800c5c6:	2601      	movs	r6, #1
	if (GetUart(port) != NULL) {
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	d016      	beq.n	800c5fa <writePxMutex+0x46>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800c5cc:	00ab      	lsls	r3, r5, #2
 800c5ce:	4a0c      	ldr	r2, [pc, #48]	; (800c600 <writePxMutex+0x4c>)
 800c5d0:	5898      	ldr	r0, [r3, r2]
 800c5d2:	9901      	ldr	r1, [sp, #4]
 800c5d4:	f000 f93a 	bl	800c84c <osSemaphoreWait>
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	d10e      	bne.n	800c5fa <writePxMutex+0x46>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800c5dc:	9b08      	ldr	r3, [sp, #32]
 800c5de:	003a      	movs	r2, r7
 800c5e0:	9900      	ldr	r1, [sp, #0]
 800c5e2:	0020      	movs	r0, r4
 800c5e4:	f004 fd9a 	bl	801111c <HAL_UART_Transmit>
 800c5e8:	1e06      	subs	r6, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800c5ea:	d001      	beq.n	800c5f0 <writePxMutex+0x3c>
 800c5ec:	2803      	cmp	r0, #3
 800c5ee:	d1f5      	bne.n	800c5dc <writePxMutex+0x28>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800c5f0:	00ad      	lsls	r5, r5, #2
 800c5f2:	4b03      	ldr	r3, [pc, #12]	; (800c600 <writePxMutex+0x4c>)
 800c5f4:	58e8      	ldr	r0, [r5, r3]
 800c5f6:	f000 f955 	bl	800c8a4 <osSemaphoreRelease>
}
 800c5fa:	0030      	movs	r0, r6
 800c5fc:	b003      	add	sp, #12
 800c5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c600:	20006a08 	.word	0x20006a08

0800c604 <writePxITMutex>:
{
 800c604:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c606:	b083      	sub	sp, #12
 800c608:	0004      	movs	r4, r0
 800c60a:	9101      	str	r1, [sp, #4]
 800c60c:	0017      	movs	r7, r2
 800c60e:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {
 800c610:	f7ff ffae 	bl	800c570 <GetUart>
 800c614:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800c616:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {
 800c618:	2800      	cmp	r0, #0
 800c61a:	d008      	beq.n	800c62e <writePxITMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800c61c:	00a4      	lsls	r4, r4, #2
 800c61e:	4b09      	ldr	r3, [pc, #36]	; (800c644 <writePxITMutex+0x40>)
 800c620:	58e0      	ldr	r0, [r4, r3]
 800c622:	0029      	movs	r1, r5
 800c624:	f000 f912 	bl	800c84c <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR;
 800c628:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800c62a:	2800      	cmp	r0, #0
 800c62c:	d002      	beq.n	800c634 <writePxITMutex+0x30>
}
 800c62e:	0018      	movs	r0, r3
 800c630:	b003      	add	sp, #12
 800c632:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800c634:	003a      	movs	r2, r7
 800c636:	9901      	ldr	r1, [sp, #4]
 800c638:	0030      	movs	r0, r6
 800c63a:	f004 f9d9 	bl	80109f0 <HAL_UART_Transmit_IT>
 800c63e:	0003      	movs	r3, r0
 800c640:	e7f5      	b.n	800c62e <writePxITMutex+0x2a>
 800c642:	46c0      	nop			; (mov r8, r8)
 800c644:	20006a08 	.word	0x20006a08

0800c648 <writePxDMAMutex>:
{
 800c648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c64a:	b083      	sub	sp, #12
 800c64c:	0004      	movs	r4, r0
 800c64e:	000f      	movs	r7, r1
 800c650:	9201      	str	r2, [sp, #4]
 800c652:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800c654:	f7ff ff8c 	bl	800c570 <GetUart>
 800c658:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800c65a:	2301      	movs	r3, #1
	if (hUart != NULL) {	
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d008      	beq.n	800c672 <writePxDMAMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800c660:	00a4      	lsls	r4, r4, #2
 800c662:	4b0a      	ldr	r3, [pc, #40]	; (800c68c <writePxDMAMutex+0x44>)
 800c664:	58e0      	ldr	r0, [r4, r3]
 800c666:	0031      	movs	r1, r6
 800c668:	f000 f8f0 	bl	800c84c <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800c66c:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800c66e:	2800      	cmp	r0, #0
 800c670:	d002      	beq.n	800c678 <writePxDMAMutex+0x30>
}
 800c672:	0018      	movs	r0, r3
 800c674:	b003      	add	sp, #12
 800c676:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800c678:	0028      	movs	r0, r5
 800c67a:	f7ff f94f 	bl	800b91c <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800c67e:	9a01      	ldr	r2, [sp, #4]
 800c680:	0039      	movs	r1, r7
 800c682:	0028      	movs	r0, r5
 800c684:	f004 fa60 	bl	8010b48 <HAL_UART_Transmit_DMA>
 800c688:	0003      	movs	r3, r0
 800c68a:	e7f2      	b.n	800c672 <writePxDMAMutex+0x2a>
 800c68c:	20006a08 	.word	0x20006a08

0800c690 <UpdateBaudrate>:
{
 800c690:	b510      	push	{r4, lr}
 800c692:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800c694:	f7ff ff6c 	bl	800c570 <GetUart>
	huart->Init.BaudRate = baudrate;
 800c698:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800c69a:	f004 fde5 	bl	8011268 <HAL_UART_Init>
}
 800c69e:	2000      	movs	r0, #0
 800c6a0:	bd10      	pop	{r4, pc}
	...

0800c6a4 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800c6a4:	b570      	push	{r4, r5, r6, lr}
 800c6a6:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800c6a8:	d003      	beq.n	800c6b2 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800c6aa:	2901      	cmp	r1, #1
 800c6ac:	d002      	beq.n	800c6b4 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800c6ae:	2900      	cmp	r1, #0
 800c6b0:	d016      	beq.n	800c6e0 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800c6b2:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800c6b4:	f7fe f8d8 	bl	800a868 <GetPort>
 800c6b8:	4b14      	ldr	r3, [pc, #80]	; (800c70c <SwapUartPins+0x68>)
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	3b01      	subs	r3, #1
 800c6be:	4d14      	ldr	r5, [pc, #80]	; (800c710 <SwapUartPins+0x6c>)
 800c6c0:	005b      	lsls	r3, r3, #1
 800c6c2:	3801      	subs	r0, #1
 800c6c4:	2180      	movs	r1, #128	; 0x80
 800c6c6:	0209      	lsls	r1, r1, #8
 800c6c8:	000a      	movs	r2, r1
 800c6ca:	4102      	asrs	r2, r0
 800c6cc:	5b58      	ldrh	r0, [r3, r5]
 800c6ce:	4302      	orrs	r2, r0
 800c6d0:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800c6d2:	2308      	movs	r3, #8
 800c6d4:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800c6d6:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800c6d8:	0020      	movs	r0, r4
 800c6da:	f004 fdc5 	bl	8011268 <HAL_UART_Init>
 800c6de:	e7e8      	b.n	800c6b2 <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800c6e0:	f7fe f8c2 	bl	800a868 <GetPort>
 800c6e4:	4b09      	ldr	r3, [pc, #36]	; (800c70c <SwapUartPins+0x68>)
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	4d09      	ldr	r5, [pc, #36]	; (800c710 <SwapUartPins+0x6c>)
 800c6ec:	005b      	lsls	r3, r3, #1
 800c6ee:	3801      	subs	r0, #1
 800c6f0:	2180      	movs	r1, #128	; 0x80
 800c6f2:	0209      	lsls	r1, r1, #8
 800c6f4:	4101      	asrs	r1, r0
 800c6f6:	5b5a      	ldrh	r2, [r3, r5]
 800c6f8:	438a      	bics	r2, r1
 800c6fa:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800c6fc:	2308      	movs	r3, #8
 800c6fe:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800c700:	2300      	movs	r3, #0
 800c702:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800c704:	0020      	movs	r0, r4
 800c706:	f004 fdaf 	bl	8011268 <HAL_UART_Init>
}
 800c70a:	e7d2      	b.n	800c6b2 <SwapUartPins+0xe>
 800c70c:	20001076 	.word	0x20001076
 800c710:	20006db8 	.word	0x20006db8

0800c714 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800c714:	4816      	ldr	r0, [pc, #88]	; (800c770 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800c716:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800c718:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800c71a:	e003      	b.n	800c724 <LoopCopyDataInit>

0800c71c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800c71c:	4b15      	ldr	r3, [pc, #84]	; (800c774 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800c71e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800c720:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800c722:	3104      	adds	r1, #4

0800c724 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800c724:	4814      	ldr	r0, [pc, #80]	; (800c778 <LoopForever+0xc>)
  ldr r3, =_edata
 800c726:	4b15      	ldr	r3, [pc, #84]	; (800c77c <LoopForever+0x10>)
  adds r2, r0, r1
 800c728:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800c72a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800c72c:	d3f6      	bcc.n	800c71c <CopyDataInit>
  ldr r2, =_sbss
 800c72e:	4a14      	ldr	r2, [pc, #80]	; (800c780 <LoopForever+0x14>)
  b LoopFillZerobss
 800c730:	e002      	b.n	800c738 <LoopFillZerobss>

0800c732 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800c732:	2300      	movs	r3, #0
  str  r3, [r2]
 800c734:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c736:	3204      	adds	r2, #4

0800c738 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800c738:	4b12      	ldr	r3, [pc, #72]	; (800c784 <LoopForever+0x18>)
  cmp r2, r3
 800c73a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800c73c:	d3f9      	bcc.n	800c732 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800c73e:	4812      	ldr	r0, [pc, #72]	; (800c788 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800c740:	4912      	ldr	r1, [pc, #72]	; (800c78c <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800c742:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800c744:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800c746:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800c748:	d005      	beq.n	800c756 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800c74a:	f000 f82b 	bl	800c7a4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800c74e:	f004 feff 	bl	8011550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800c752:	f004 fede 	bl	8011512 <main>

0800c756 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800c756:	480e      	ldr	r0, [pc, #56]	; (800c790 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800c758:	490e      	ldr	r1, [pc, #56]	; (800c794 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800c75a:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800c75c:	480e      	ldr	r0, [pc, #56]	; (800c798 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800c75e:	490d      	ldr	r1, [pc, #52]	; (800c794 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800c760:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800c762:	480e      	ldr	r0, [pc, #56]	; (800c79c <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800c764:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800c766:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800c768:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800c76a:	4700      	bx	r0

0800c76c <LoopForever>:


LoopForever:
    b LoopForever
 800c76c:	e7fe      	b.n	800c76c <LoopForever>
 800c76e:	0000      	.short	0x0000
  ldr   r0, =_estack
 800c770:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800c774:	08019088 	.word	0x08019088
  ldr r0, =_sdata
 800c778:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800c77c:	20000a58 	.word	0x20000a58
  ldr r2, =_sbss
 800c780:	20000a58 	.word	0x20000a58
  ldr r3, = _ebss
 800c784:	20006e60 	.word	0x20006e60
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800c788:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800c78c:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800c790:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800c794:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800c798:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800c79c:	1fffd800 	.word	0x1fffd800

0800c7a0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c7a0:	e7fe      	b.n	800c7a0 <ADC1_COMP_IRQHandler>
	...

0800c7a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c7a4:	4b11      	ldr	r3, [pc, #68]	; (800c7ec <SystemInit+0x48>)
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	2101      	movs	r1, #1
 800c7aa:	430a      	orrs	r2, r1
 800c7ac:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800c7ae:	685a      	ldr	r2, [r3, #4]
 800c7b0:	480f      	ldr	r0, [pc, #60]	; (800c7f0 <SystemInit+0x4c>)
 800c7b2:	4002      	ands	r2, r0
 800c7b4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	480e      	ldr	r0, [pc, #56]	; (800c7f4 <SystemInit+0x50>)
 800c7ba:	4002      	ands	r2, r0
 800c7bc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	480d      	ldr	r0, [pc, #52]	; (800c7f8 <SystemInit+0x54>)
 800c7c2:	4002      	ands	r2, r0
 800c7c4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800c7c6:	685a      	ldr	r2, [r3, #4]
 800c7c8:	480c      	ldr	r0, [pc, #48]	; (800c7fc <SystemInit+0x58>)
 800c7ca:	4002      	ands	r2, r0
 800c7cc:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800c7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d0:	200f      	movs	r0, #15
 800c7d2:	4382      	bics	r2, r0
 800c7d4:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800c7d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7d8:	4809      	ldr	r0, [pc, #36]	; (800c800 <SystemInit+0x5c>)
 800c7da:	4002      	ands	r2, r0
 800c7dc:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800c7de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7e0:	438a      	bics	r2, r1
 800c7e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	609a      	str	r2, [r3, #8]

}
 800c7e8:	4770      	bx	lr
 800c7ea:	46c0      	nop			; (mov r8, r8)
 800c7ec:	40021000 	.word	0x40021000
 800c7f0:	08ffb80c 	.word	0x08ffb80c
 800c7f4:	fef6ffff 	.word	0xfef6ffff
 800c7f8:	fffbffff 	.word	0xfffbffff
 800c7fc:	ffc0ffff 	.word	0xffc0ffff
 800c800:	fff0feac 	.word	0xfff0feac

0800c804 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c804:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800c806:	f000 ff55 	bl	800d6b4 <vTaskStartScheduler>
  
  return osOK;
}
 800c80a:	2000      	movs	r0, #0
 800c80c:	bd10      	pop	{r4, pc}

0800c80e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c80e:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c810:	2800      	cmp	r0, #0
 800c812:	d100      	bne.n	800c816 <osDelay+0x8>
 800c814:	3001      	adds	r0, #1
 800c816:	f001 f889 	bl	800d92c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c81a:	2000      	movs	r0, #0
 800c81c:	bd10      	pop	{r4, pc}

0800c81e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800c81e:	b510      	push	{r4, lr}
 800c820:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800c822:	2901      	cmp	r1, #1
 800c824:	d005      	beq.n	800c832 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800c826:	2100      	movs	r1, #0
 800c828:	f000 faf6 	bl	800ce18 <xQueueCreateCountingSemaphore>
 800c82c:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800c82e:	0020      	movs	r0, r4
 800c830:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800c832:	2203      	movs	r2, #3
 800c834:	2100      	movs	r1, #0
 800c836:	f000 fac8 	bl	800cdca <xQueueGenericCreate>
 800c83a:	1e04      	subs	r4, r0, #0
 800c83c:	d0f7      	beq.n	800c82e <osSemaphoreCreate+0x10>
 800c83e:	2300      	movs	r3, #0
 800c840:	2200      	movs	r2, #0
 800c842:	2100      	movs	r1, #0
 800c844:	f000 fafc 	bl	800ce40 <xQueueGenericSend>
 800c848:	e7f1      	b.n	800c82e <osSemaphoreCreate+0x10>
	...

0800c84c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c84c:	b500      	push	{lr}
 800c84e:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c850:	2300      	movs	r3, #0
 800c852:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800c854:	2800      	cmp	r0, #0
 800c856:	d021      	beq.n	800c89c <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c858:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d010      	beq.n	800c882 <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c860:	aa01      	add	r2, sp, #4
 800c862:	2100      	movs	r1, #0
 800c864:	f000 fcae 	bl	800d1c4 <xQueueReceiveFromISR>
 800c868:	0003      	movs	r3, r0
      return osErrorOS;
 800c86a:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d113      	bne.n	800c898 <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800c870:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800c872:	9b01      	ldr	r3, [sp, #4]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d00f      	beq.n	800c898 <osSemaphoreWait+0x4c>
 800c878:	4b09      	ldr	r3, [pc, #36]	; (800c8a0 <osSemaphoreWait+0x54>)
 800c87a:	2280      	movs	r2, #128	; 0x80
 800c87c:	0552      	lsls	r2, r2, #21
 800c87e:	601a      	str	r2, [r3, #0]
 800c880:	e00a      	b.n	800c898 <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c882:	2300      	movs	r3, #0
 800c884:	000a      	movs	r2, r1
 800c886:	2100      	movs	r1, #0
 800c888:	f000 fbf3 	bl	800d072 <xQueueGenericReceive>
  return osOK;
 800c88c:	3801      	subs	r0, #1
 800c88e:	1e43      	subs	r3, r0, #1
 800c890:	4198      	sbcs	r0, r3
 800c892:	4240      	negs	r0, r0
 800c894:	23ff      	movs	r3, #255	; 0xff
 800c896:	4018      	ands	r0, r3
}
 800c898:	b003      	add	sp, #12
 800c89a:	bd00      	pop	{pc}
    return osErrorParameter;
 800c89c:	2080      	movs	r0, #128	; 0x80
 800c89e:	e7fb      	b.n	800c898 <osSemaphoreWait+0x4c>
 800c8a0:	e000ed04 	.word	0xe000ed04

0800c8a4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c8a4:	b500      	push	{lr}
 800c8a6:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	9301      	str	r3, [sp, #4]
 800c8ac:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00f      	beq.n	800c8d4 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c8b4:	a901      	add	r1, sp, #4
 800c8b6:	f000 fba1 	bl	800cffc <xQueueGiveFromISR>
 800c8ba:	0003      	movs	r3, r0
      return osErrorOS;
 800c8bc:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d114      	bne.n	800c8ec <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800c8c2:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c8c4:	9b01      	ldr	r3, [sp, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d010      	beq.n	800c8ec <osSemaphoreRelease+0x48>
 800c8ca:	4b09      	ldr	r3, [pc, #36]	; (800c8f0 <osSemaphoreRelease+0x4c>)
 800c8cc:	2280      	movs	r2, #128	; 0x80
 800c8ce:	0552      	lsls	r2, r2, #21
 800c8d0:	601a      	str	r2, [r3, #0]
 800c8d2:	e00b      	b.n	800c8ec <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	2100      	movs	r1, #0
 800c8da:	f000 fab1 	bl	800ce40 <xQueueGenericSend>
      result = osErrorOS;
 800c8de:	3801      	subs	r0, #1
 800c8e0:	4243      	negs	r3, r0
 800c8e2:	4158      	adcs	r0, r3
 800c8e4:	4240      	negs	r0, r0
 800c8e6:	23fe      	movs	r3, #254	; 0xfe
 800c8e8:	4398      	bics	r0, r3
 800c8ea:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800c8ec:	b003      	add	sp, #12
 800c8ee:	bd00      	pop	{pc}
 800c8f0:	e000ed04 	.word	0xe000ed04

0800c8f4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800c8f4:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800c8f6:	f001 fa0f 	bl	800dd18 <xTaskGetSchedulerState>
 800c8fa:	2801      	cmp	r0, #1
 800c8fc:	d001      	beq.n	800c902 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800c8fe:	f001 fe85 	bl	800e60c <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800c902:	bd10      	pop	{r4, pc}

0800c904 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800c904:	b570      	push	{r4, r5, r6, lr}
 800c906:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800c908:	d101      	bne.n	800c90e <FreeRTOS_CLIRegisterCommand+0xa>
 800c90a:	b672      	cpsid	i
 800c90c:	e7fe      	b.n	800c90c <FreeRTOS_CLIRegisterCommand+0x8>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800c90e:	2008      	movs	r0, #8
 800c910:	f001 feb8 	bl	800e684 <pvPortMalloc>
 800c914:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800c916:	d101      	bne.n	800c91c <FreeRTOS_CLIRegisterCommand+0x18>
 800c918:	b672      	cpsid	i
 800c91a:	e7fe      	b.n	800c91a <FreeRTOS_CLIRegisterCommand+0x16>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800c91c:	f001 fe30 	bl	800e580 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800c920:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800c922:	2300      	movs	r3, #0
 800c924:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800c926:	4b04      	ldr	r3, [pc, #16]	; (800c938 <FreeRTOS_CLIRegisterCommand+0x34>)
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800c92c:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800c92e:	f001 fe33 	bl	800e598 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800c932:	2001      	movs	r0, #1
 800c934:	bd70      	pop	{r4, r5, r6, pc}
 800c936:	46c0      	nop			; (mov r8, r8)
 800c938:	20000094 	.word	0x20000094

0800c93c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800c93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c93e:	46d6      	mov	lr, sl
 800c940:	b500      	push	{lr}
 800c942:	b084      	sub	sp, #16
 800c944:	9001      	str	r0, [sp, #4]
 800c946:	9102      	str	r1, [sp, #8]
 800c948:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800c94a:	4b37      	ldr	r3, [pc, #220]	; (800ca28 <FreeRTOS_CLIProcessCommand+0xec>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d00e      	beq.n	800c970 <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	9a01      	ldr	r2, [sp, #4]
 800c958:	9903      	ldr	r1, [sp, #12]
 800c95a:	9802      	ldr	r0, [sp, #8]
 800c95c:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800c95e:	2800      	cmp	r0, #0
 800c960:	d102      	bne.n	800c968 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800c962:	4b31      	ldr	r3, [pc, #196]	; (800ca28 <FreeRTOS_CLIProcessCommand+0xec>)
 800c964:	2200      	movs	r2, #0
 800c966:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800c968:	b004      	add	sp, #16
 800c96a:	bc04      	pop	{r2}
 800c96c:	4692      	mov	sl, r2
 800c96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800c970:	4d2e      	ldr	r5, [pc, #184]	; (800ca2c <FreeRTOS_CLIProcessCommand+0xf0>)
 800c972:	4a2d      	ldr	r2, [pc, #180]	; (800ca28 <FreeRTOS_CLIProcessCommand+0xec>)
 800c974:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800c976:	3320      	adds	r3, #32
 800c978:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800c97a:	0017      	movs	r7, r2
 800c97c:	e00a      	b.n	800c994 <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800c97e:	0002      	movs	r2, r0
 800c980:	0021      	movs	r1, r4
 800c982:	9801      	ldr	r0, [sp, #4]
 800c984:	f005 faae 	bl	8011ee4 <strncmp>
 800c988:	2800      	cmp	r0, #0
 800c98a:	d00e      	beq.n	800c9aa <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800c98c:	686d      	ldr	r5, [r5, #4]
 800c98e:	603d      	str	r5, [r7, #0]
 800c990:	2d00      	cmp	r5, #0
 800c992:	d012      	beq.n	800c9ba <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800c994:	682e      	ldr	r6, [r5, #0]
 800c996:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800c998:	0020      	movs	r0, r4
 800c99a:	f7f3 fbbd 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800c99e:	9b01      	ldr	r3, [sp, #4]
 800c9a0:	5c1b      	ldrb	r3, [r3, r0]
 800c9a2:	4652      	mov	r2, sl
 800c9a4:	4393      	bics	r3, r2
 800c9a6:	d1f1      	bne.n	800c98c <FreeRTOS_CLIProcessCommand+0x50>
 800c9a8:	e7e9      	b.n	800c97e <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800c9aa:	200c      	movs	r0, #12
 800c9ac:	5630      	ldrsb	r0, [r6, r0]
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	da0a      	bge.n	800c9c8 <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800c9b2:	4b1d      	ldr	r3, [pc, #116]	; (800ca28 <FreeRTOS_CLIProcessCommand+0xec>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d1cb      	bne.n	800c952 <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800c9ba:	9a03      	ldr	r2, [sp, #12]
 800c9bc:	491c      	ldr	r1, [pc, #112]	; (800ca30 <FreeRTOS_CLIProcessCommand+0xf4>)
 800c9be:	9802      	ldr	r0, [sp, #8]
 800c9c0:	f005 faa1 	bl	8011f06 <strncpy>
		xReturn = pdFALSE;
 800c9c4:	2000      	movs	r0, #0
	return xReturn;
 800c9c6:	e7cf      	b.n	800c968 <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800c9c8:	9a01      	ldr	r2, [sp, #4]
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	56d3      	ldrsb	r3, [r2, r3]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d027      	beq.n	800ca22 <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800c9d2:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800c9d4:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800c9d6:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800c9d8:	2501      	movs	r5, #1
 800c9da:	e009      	b.n	800c9f0 <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800c9dc:	2901      	cmp	r1, #1
 800c9de:	d002      	beq.n	800c9e6 <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800c9e0:	3401      	adds	r4, #1
 800c9e2:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800c9e4:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800c9e6:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	56d3      	ldrsb	r3, [r2, r3]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d003      	beq.n	800c9f8 <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800c9f0:	2b20      	cmp	r3, #32
 800c9f2:	d0f3      	beq.n	800c9dc <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800c9f4:	0031      	movs	r1, r6
 800c9f6:	e7f6      	b.n	800c9e6 <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800c9f8:	2901      	cmp	r1, #1
 800c9fa:	d00f      	beq.n	800ca1c <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800c9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ca28 <FreeRTOS_CLIProcessCommand+0xec>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d0da      	beq.n	800c9ba <FreeRTOS_CLIProcessCommand+0x7e>
 800ca04:	42a0      	cmp	r0, r4
 800ca06:	d0a4      	beq.n	800c952 <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ca08:	9a03      	ldr	r2, [sp, #12]
 800ca0a:	490a      	ldr	r1, [pc, #40]	; (800ca34 <FreeRTOS_CLIProcessCommand+0xf8>)
 800ca0c:	9802      	ldr	r0, [sp, #8]
 800ca0e:	f005 fa7a 	bl	8011f06 <strncpy>
		pxCommand = NULL;
 800ca12:	4b05      	ldr	r3, [pc, #20]	; (800ca28 <FreeRTOS_CLIProcessCommand+0xec>)
 800ca14:	2200      	movs	r2, #0
 800ca16:	601a      	str	r2, [r3, #0]
 800ca18:	2000      	movs	r0, #0
 800ca1a:	e7a5      	b.n	800c968 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800ca1c:	3c01      	subs	r4, #1
 800ca1e:	b264      	sxtb	r4, r4
 800ca20:	e7ec      	b.n	800c9fc <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800ca22:	2400      	movs	r4, #0
 800ca24:	e7ea      	b.n	800c9fc <FreeRTOS_CLIProcessCommand+0xc0>
 800ca26:	46c0      	nop			; (mov r8, r8)
 800ca28:	20001d14 	.word	0x20001d14
 800ca2c:	20000098 	.word	0x20000098
 800ca30:	08018c3c 	.word	0x08018c3c
 800ca34:	08018be4 	.word	0x08018be4

0800ca38 <FreeRTOS_CLIGetOutputBuffer>:
}
 800ca38:	4800      	ldr	r0, [pc, #0]	; (800ca3c <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800ca3a:	4770      	bx	lr
 800ca3c:	20001aac 	.word	0x20001aac

0800ca40 <FreeRTOS_CLIGetParameter>:
{
 800ca40:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800ca42:	2300      	movs	r3, #0
 800ca44:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800ca46:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800ca48:	2900      	cmp	r1, #0
 800ca4a:	d10b      	bne.n	800ca64 <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	e02a      	b.n	800caa6 <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800ca50:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800ca52:	2300      	movs	r3, #0
 800ca54:	56c3      	ldrsb	r3, [r0, r3]
 800ca56:	2b20      	cmp	r3, #32
 800ca58:	d0fa      	beq.n	800ca50 <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d022      	beq.n	800caa4 <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800ca5e:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800ca60:	42a1      	cmp	r1, r4
 800ca62:	d00d      	beq.n	800ca80 <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ca64:	2300      	movs	r3, #0
 800ca66:	56c3      	ldrsb	r3, [r0, r3]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d01f      	beq.n	800caac <FreeRTOS_CLIGetParameter+0x6c>
 800ca6c:	2b20      	cmp	r3, #32
 800ca6e:	d0ef      	beq.n	800ca50 <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800ca70:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ca72:	2300      	movs	r3, #0
 800ca74:	56c3      	ldrsb	r3, [r0, r3]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d018      	beq.n	800caac <FreeRTOS_CLIGetParameter+0x6c>
 800ca7a:	2b20      	cmp	r3, #32
 800ca7c:	d1f8      	bne.n	800ca70 <FreeRTOS_CLIGetParameter+0x30>
 800ca7e:	e7e7      	b.n	800ca50 <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ca80:	7803      	ldrb	r3, [r0, #0]
 800ca82:	2120      	movs	r1, #32
 800ca84:	438b      	bics	r3, r1
 800ca86:	d00f      	beq.n	800caa8 <FreeRTOS_CLIGetParameter+0x68>
 800ca88:	0004      	movs	r4, r0
 800ca8a:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800ca8c:	6813      	ldr	r3, [r2, #0]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800ca92:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ca94:	7821      	ldrb	r1, [r4, #0]
 800ca96:	43a9      	bics	r1, r5
 800ca98:	d1f8      	bne.n	800ca8c <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800ca9a:	1e5a      	subs	r2, r3, #1
 800ca9c:	4193      	sbcs	r3, r2
 800ca9e:	425b      	negs	r3, r3
 800caa0:	4018      	ands	r0, r3
 800caa2:	e000      	b.n	800caa6 <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800caa4:	2000      	movs	r0, #0
}
 800caa6:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800caa8:	2000      	movs	r0, #0
 800caaa:	e7fc      	b.n	800caa6 <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800caac:	2300      	movs	r3, #0
 800caae:	56c3      	ldrsb	r3, [r0, r3]
 800cab0:	e7d3      	b.n	800ca5a <FreeRTOS_CLIGetParameter+0x1a>
	...

0800cab4 <prvHelpCommand>:
{
 800cab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cab6:	b083      	sub	sp, #12
 800cab8:	0004      	movs	r4, r0
 800caba:	000d      	movs	r5, r1
 800cabc:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800cabe:	2300      	movs	r3, #0
 800cac0:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800cac2:	aa01      	add	r2, sp, #4
 800cac4:	2101      	movs	r1, #1
 800cac6:	f7ff ffbb 	bl	800ca40 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800caca:	2800      	cmp	r0, #0
 800cacc:	d027      	beq.n	800cb1e <prvHelpCommand+0x6a>
 800cace:	2206      	movs	r2, #6
 800cad0:	4930      	ldr	r1, [pc, #192]	; (800cb94 <prvHelpCommand+0xe0>)
 800cad2:	f005 fa07 	bl	8011ee4 <strncmp>
 800cad6:	2800      	cmp	r0, #0
 800cad8:	d149      	bne.n	800cb6e <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800cada:	4b2f      	ldr	r3, [pc, #188]	; (800cb98 <prvHelpCommand+0xe4>)
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	2b07      	cmp	r3, #7
 800cae0:	d012      	beq.n	800cb08 <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800cae2:	1c5f      	adds	r7, r3, #1
 800cae4:	b2ff      	uxtb	r7, r7
 800cae6:	4a2c      	ldr	r2, [pc, #176]	; (800cb98 <prvHelpCommand+0xe4>)
 800cae8:	7017      	strb	r7, [r2, #0]
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	4a2b      	ldr	r2, [pc, #172]	; (800cb9c <prvHelpCommand+0xe8>)
 800caee:	5899      	ldr	r1, [r3, r2]
 800caf0:	002a      	movs	r2, r5
 800caf2:	0020      	movs	r0, r4
 800caf4:	f005 fa07 	bl	8011f06 <strncpy>
			xReturn = pdTRUE;
 800caf8:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800cafa:	2f07      	cmp	r7, #7
 800cafc:	d137      	bne.n	800cb6e <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800cafe:	4b26      	ldr	r3, [pc, #152]	; (800cb98 <prvHelpCommand+0xe4>)
 800cb00:	2200      	movs	r2, #0
 800cb02:	701a      	strb	r2, [r3, #0]
 800cb04:	2600      	movs	r6, #0
 800cb06:	e032      	b.n	800cb6e <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800cb08:	4b23      	ldr	r3, [pc, #140]	; (800cb98 <prvHelpCommand+0xe4>)
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	701a      	strb	r2, [r3, #0]
 800cb0e:	4b23      	ldr	r3, [pc, #140]	; (800cb9c <prvHelpCommand+0xe8>)
 800cb10:	6819      	ldr	r1, [r3, #0]
 800cb12:	002a      	movs	r2, r5
 800cb14:	0020      	movs	r0, r4
 800cb16:	f005 f9f6 	bl	8011f06 <strncpy>
			xReturn = pdTRUE;
 800cb1a:	2601      	movs	r6, #1
 800cb1c:	e027      	b.n	800cb6e <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800cb1e:	4b20      	ldr	r3, [pc, #128]	; (800cba0 <prvHelpCommand+0xec>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d026      	beq.n	800cb74 <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800cb26:	4b1f      	ldr	r3, [pc, #124]	; (800cba4 <prvHelpCommand+0xf0>)
 800cb28:	781a      	ldrb	r2, [r3, #0]
 800cb2a:	4b1f      	ldr	r3, [pc, #124]	; (800cba8 <prvHelpCommand+0xf4>)
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d927      	bls.n	800cb82 <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800cb32:	002a      	movs	r2, r5
 800cb34:	3a08      	subs	r2, #8
 800cb36:	4b1a      	ldr	r3, [pc, #104]	; (800cba0 <prvHelpCommand+0xec>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	6859      	ldr	r1, [r3, #4]
 800cb3e:	0020      	movs	r0, r4
 800cb40:	3008      	adds	r0, #8
 800cb42:	f005 f9e0 	bl	8011f06 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800cb46:	1c60      	adds	r0, r4, #1
 800cb48:	4918      	ldr	r1, [pc, #96]	; (800cbac <prvHelpCommand+0xf8>)
 800cb4a:	f005 f9c3 	bl	8011ed4 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800cb4e:	2328      	movs	r3, #40	; 0x28
 800cb50:	7023      	strb	r3, [r4, #0]
 800cb52:	3301      	adds	r3, #1
 800cb54:	71a3      	strb	r3, [r4, #6]
 800cb56:	3b09      	subs	r3, #9
 800cb58:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800cb5a:	4b11      	ldr	r3, [pc, #68]	; (800cba0 <prvHelpCommand+0xec>)
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	6856      	ldr	r6, [r2, #4]
 800cb60:	601e      	str	r6, [r3, #0]
		counter++;
 800cb62:	4a10      	ldr	r2, [pc, #64]	; (800cba4 <prvHelpCommand+0xf0>)
 800cb64:	7813      	ldrb	r3, [r2, #0]
 800cb66:	3301      	adds	r3, #1
 800cb68:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800cb6a:	1e73      	subs	r3, r6, #1
 800cb6c:	419e      	sbcs	r6, r3
}
 800cb6e:	0030      	movs	r0, r6
 800cb70:	b003      	add	sp, #12
 800cb72:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800cb74:	4b0a      	ldr	r3, [pc, #40]	; (800cba0 <prvHelpCommand+0xec>)
 800cb76:	4a0e      	ldr	r2, [pc, #56]	; (800cbb0 <prvHelpCommand+0xfc>)
 800cb78:	601a      	str	r2, [r3, #0]
			counter = 1;
 800cb7a:	4b0a      	ldr	r3, [pc, #40]	; (800cba4 <prvHelpCommand+0xf0>)
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	701a      	strb	r2, [r3, #0]
 800cb80:	e7d1      	b.n	800cb26 <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800cb82:	4b07      	ldr	r3, [pc, #28]	; (800cba0 <prvHelpCommand+0xec>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	6859      	ldr	r1, [r3, #4]
 800cb8a:	002a      	movs	r2, r5
 800cb8c:	0020      	movs	r0, r4
 800cb8e:	f005 f9ba 	bl	8011f06 <strncpy>
 800cb92:	e7e2      	b.n	800cb5a <prvHelpCommand+0xa6>
 800cb94:	08016f18 	.word	0x08016f18
 800cb98:	20001d1c 	.word	0x20001d1c
 800cb9c:	20000054 	.word	0x20000054
 800cba0:	20001d18 	.word	0x20001d18
 800cba4:	20001d10 	.word	0x20001d10
 800cba8:	2000690c 	.word	0x2000690c
 800cbac:	080165c2 	.word	0x080165c2
 800cbb0:	20000098 	.word	0x20000098

0800cbb4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cbb4:	0003      	movs	r3, r0
 800cbb6:	3308      	adds	r3, #8
 800cbb8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cbba:	2201      	movs	r2, #1
 800cbbc:	4252      	negs	r2, r2
 800cbbe:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cbc0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cbc2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cbc8:	4770      	bx	lr

0800cbca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cbce:	4770      	bx	lr

0800cbd0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800cbd0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cbd2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cbd4:	689a      	ldr	r2, [r3, #8]
 800cbd6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cbd8:	689a      	ldr	r2, [r3, #8]
 800cbda:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cbdc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800cbde:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800cbe0:	6803      	ldr	r3, [r0, #0]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	6003      	str	r3, [r0, #0]
}
 800cbe6:	4770      	bx	lr

0800cbe8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cbe8:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cbea:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cbec:	0002      	movs	r2, r0
 800cbee:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800cbf0:	1c63      	adds	r3, r4, #1
 800cbf2:	d102      	bne.n	800cbfa <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800cbf4:	6902      	ldr	r2, [r0, #16]
 800cbf6:	e004      	b.n	800cc02 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cbf8:	001a      	movs	r2, r3
 800cbfa:	6853      	ldr	r3, [r2, #4]
 800cbfc:	681d      	ldr	r5, [r3, #0]
 800cbfe:	42a5      	cmp	r5, r4
 800cc00:	d9fa      	bls.n	800cbf8 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cc02:	6853      	ldr	r3, [r2, #4]
 800cc04:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cc06:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cc08:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800cc0a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800cc0c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800cc0e:	6803      	ldr	r3, [r0, #0]
 800cc10:	3301      	adds	r3, #1
 800cc12:	6003      	str	r3, [r0, #0]
}
 800cc14:	bd30      	pop	{r4, r5, pc}

0800cc16 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800cc16:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cc18:	6842      	ldr	r2, [r0, #4]
 800cc1a:	6881      	ldr	r1, [r0, #8]
 800cc1c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cc1e:	6882      	ldr	r2, [r0, #8]
 800cc20:	6841      	ldr	r1, [r0, #4]
 800cc22:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cc24:	685a      	ldr	r2, [r3, #4]
 800cc26:	4282      	cmp	r2, r0
 800cc28:	d005      	beq.n	800cc36 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	1e50      	subs	r0, r2, #1
 800cc32:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800cc34:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cc36:	6882      	ldr	r2, [r0, #8]
 800cc38:	605a      	str	r2, [r3, #4]
 800cc3a:	e7f6      	b.n	800cc2a <uxListRemove+0x14>

0800cc3c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cc3c:	b570      	push	{r4, r5, r6, lr}
 800cc3e:	0004      	movs	r4, r0
 800cc40:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cc42:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800cc44:	2a00      	cmp	r2, #0
 800cc46:	d10d      	bne.n	800cc64 <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800cc48:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc4a:	6823      	ldr	r3, [r4, #0]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d003      	beq.n	800cc58 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800cc50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cc52:	3301      	adds	r3, #1
 800cc54:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800cc56:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800cc58:	6860      	ldr	r0, [r4, #4]
 800cc5a:	f001 f8ab 	bl	800ddb4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	6063      	str	r3, [r4, #4]
 800cc62:	e7f5      	b.n	800cc50 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800cc64:	2d00      	cmp	r5, #0
 800cc66:	d10e      	bne.n	800cc86 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800cc68:	6880      	ldr	r0, [r0, #8]
 800cc6a:	f004 fef4 	bl	8011a56 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800cc6e:	68a3      	ldr	r3, [r4, #8]
 800cc70:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800cc72:	4694      	mov	ip, r2
 800cc74:	4463      	add	r3, ip
 800cc76:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800cc78:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc7a:	6862      	ldr	r2, [r4, #4]
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d3e7      	bcc.n	800cc50 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc80:	6823      	ldr	r3, [r4, #0]
 800cc82:	60a3      	str	r3, [r4, #8]
 800cc84:	e7e4      	b.n	800cc50 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc86:	68c0      	ldr	r0, [r0, #12]
 800cc88:	f004 fee5 	bl	8011a56 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800cc8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc8e:	425a      	negs	r2, r3
 800cc90:	68e3      	ldr	r3, [r4, #12]
 800cc92:	189b      	adds	r3, r3, r2
 800cc94:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc96:	6821      	ldr	r1, [r4, #0]
 800cc98:	428b      	cmp	r3, r1
 800cc9a:	d203      	bcs.n	800cca4 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800cc9c:	6863      	ldr	r3, [r4, #4]
 800cc9e:	469c      	mov	ip, r3
 800cca0:	4462      	add	r2, ip
 800cca2:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800cca4:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800cca6:	2d02      	cmp	r5, #2
 800cca8:	d1d2      	bne.n	800cc50 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ccaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d0cf      	beq.n	800cc50 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800ccb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ccb2:	3b01      	subs	r3, #1
 800ccb4:	63a3      	str	r3, [r4, #56]	; 0x38
 800ccb6:	e7cb      	b.n	800cc50 <prvCopyDataToQueue+0x14>

0800ccb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ccb8:	b510      	push	{r4, lr}
 800ccba:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ccbc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ccbe:	2a00      	cmp	r2, #0
 800ccc0:	d00b      	beq.n	800ccda <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ccc2:	68c3      	ldr	r3, [r0, #12]
 800ccc4:	189b      	adds	r3, r3, r2
 800ccc6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ccc8:	6841      	ldr	r1, [r0, #4]
 800ccca:	428b      	cmp	r3, r1
 800cccc:	d301      	bcc.n	800ccd2 <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ccce:	6803      	ldr	r3, [r0, #0]
 800ccd0:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ccd2:	68c1      	ldr	r1, [r0, #12]
 800ccd4:	0020      	movs	r0, r4
 800ccd6:	f004 febe 	bl	8011a56 <memcpy>
	}
}
 800ccda:	bd10      	pop	{r4, pc}

0800ccdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ccdc:	b570      	push	{r4, r5, r6, lr}
 800ccde:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cce0:	f001 fc4e 	bl	800e580 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800cce4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	dd04      	ble.n	800ccf4 <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccea:	0025      	movs	r5, r4
 800ccec:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d11f      	bne.n	800cd34 <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	425b      	negs	r3, r3
 800ccf8:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800ccfa:	f001 fc4d 	bl	800e598 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ccfe:	f001 fc3f 	bl	800e580 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800cd02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	dd04      	ble.n	800cd12 <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd08:	0025      	movs	r5, r4
 800cd0a:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd0c:	6923      	ldr	r3, [r4, #16]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d121      	bne.n	800cd56 <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800cd12:	2301      	movs	r3, #1
 800cd14:	425b      	negs	r3, r3
 800cd16:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cd18:	f001 fc3e 	bl	800e598 <vPortExitCritical>
}
 800cd1c:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800cd1e:	f000 fff5 	bl	800dd0c <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800cd22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cd24:	3b01      	subs	r3, #1
 800cd26:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800cd28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	dde2      	ble.n	800ccf4 <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d0df      	beq.n	800ccf4 <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd34:	0028      	movs	r0, r5
 800cd36:	f000 ff67 	bl	800dc08 <xTaskRemoveFromEventList>
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	d0f1      	beq.n	800cd22 <prvUnlockQueue+0x46>
 800cd3e:	e7ee      	b.n	800cd1e <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800cd40:	f000 ffe4 	bl	800dd0c <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800cd44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cd46:	3b01      	subs	r3, #1
 800cd48:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800cd4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	dde0      	ble.n	800cd12 <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd50:	6923      	ldr	r3, [r4, #16]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d0dd      	beq.n	800cd12 <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd56:	0028      	movs	r0, r5
 800cd58:	f000 ff56 	bl	800dc08 <xTaskRemoveFromEventList>
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	d0f1      	beq.n	800cd44 <prvUnlockQueue+0x68>
 800cd60:	e7ee      	b.n	800cd40 <prvUnlockQueue+0x64>

0800cd62 <xQueueGenericReset>:
{
 800cd62:	b570      	push	{r4, r5, r6, lr}
 800cd64:	0004      	movs	r4, r0
 800cd66:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d101      	bne.n	800cd70 <xQueueGenericReset+0xe>
 800cd6c:	b672      	cpsid	i
 800cd6e:	e7fe      	b.n	800cd6e <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 800cd70:	f001 fc06 	bl	800e580 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800cd74:	6822      	ldr	r2, [r4, #0]
 800cd76:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cd78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cd7a:	434b      	muls	r3, r1
 800cd7c:	18d0      	adds	r0, r2, r3
 800cd7e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cd80:	2000      	movs	r0, #0
 800cd82:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd84:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800cd86:	1a5b      	subs	r3, r3, r1
 800cd88:	18d3      	adds	r3, r2, r3
 800cd8a:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	425b      	negs	r3, r3
 800cd90:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800cd92:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800cd94:	2d00      	cmp	r5, #0
 800cd96:	d10f      	bne.n	800cdb8 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd98:	6923      	ldr	r3, [r4, #16]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d103      	bne.n	800cda6 <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800cd9e:	f001 fbfb 	bl	800e598 <vPortExitCritical>
}
 800cda2:	2001      	movs	r0, #1
 800cda4:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800cda6:	0020      	movs	r0, r4
 800cda8:	3010      	adds	r0, #16
 800cdaa:	f000 ff2d 	bl	800dc08 <xTaskRemoveFromEventList>
 800cdae:	2801      	cmp	r0, #1
 800cdb0:	d1f5      	bne.n	800cd9e <xQueueGenericReset+0x3c>
					queueYIELD_IF_USING_PREEMPTION();
 800cdb2:	f001 fbd9 	bl	800e568 <vPortYield>
 800cdb6:	e7f2      	b.n	800cd9e <xQueueGenericReset+0x3c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cdb8:	0020      	movs	r0, r4
 800cdba:	3010      	adds	r0, #16
 800cdbc:	f7ff fefa 	bl	800cbb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cdc0:	0020      	movs	r0, r4
 800cdc2:	3024      	adds	r0, #36	; 0x24
 800cdc4:	f7ff fef6 	bl	800cbb4 <vListInitialise>
 800cdc8:	e7e9      	b.n	800cd9e <xQueueGenericReset+0x3c>

0800cdca <xQueueGenericCreate>:
{
 800cdca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdcc:	0005      	movs	r5, r0
 800cdce:	000e      	movs	r6, r1
 800cdd0:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cdd2:	2800      	cmp	r0, #0
 800cdd4:	d101      	bne.n	800cdda <xQueueGenericCreate+0x10>
 800cdd6:	b672      	cpsid	i
 800cdd8:	e7fe      	b.n	800cdd8 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800cdda:	2900      	cmp	r1, #0
 800cddc:	d00c      	beq.n	800cdf8 <xQueueGenericCreate+0x2e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdde:	0008      	movs	r0, r1
 800cde0:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800cde2:	3055      	adds	r0, #85	; 0x55
 800cde4:	f001 fc4e 	bl	800e684 <pvPortMalloc>
 800cde8:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800cdea:	d101      	bne.n	800cdf0 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800cdec:	b672      	cpsid	i
 800cdee:	e7fe      	b.n	800cdee <xQueueGenericCreate+0x24>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800cdf0:	0003      	movs	r3, r0
 800cdf2:	3354      	adds	r3, #84	; 0x54
 800cdf4:	6003      	str	r3, [r0, #0]
 800cdf6:	e005      	b.n	800ce04 <xQueueGenericCreate+0x3a>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800cdf8:	2054      	movs	r0, #84	; 0x54
 800cdfa:	f001 fc43 	bl	800e684 <pvPortMalloc>
 800cdfe:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800ce00:	d0f4      	beq.n	800cdec <xQueueGenericCreate+0x22>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ce02:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800ce04:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800ce06:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ce08:	2101      	movs	r1, #1
 800ce0a:	0020      	movs	r0, r4
 800ce0c:	f7ff ffa9 	bl	800cd62 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800ce10:	2350      	movs	r3, #80	; 0x50
 800ce12:	54e7      	strb	r7, [r4, r3]
}
 800ce14:	0020      	movs	r0, r4
 800ce16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ce18 <xQueueCreateCountingSemaphore>:
	{
 800ce18:	b510      	push	{r4, lr}
 800ce1a:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	d101      	bne.n	800ce24 <xQueueCreateCountingSemaphore+0xc>
 800ce20:	b672      	cpsid	i
 800ce22:	e7fe      	b.n	800ce22 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ce24:	4288      	cmp	r0, r1
 800ce26:	d201      	bcs.n	800ce2c <xQueueCreateCountingSemaphore+0x14>
 800ce28:	b672      	cpsid	i
 800ce2a:	e7fe      	b.n	800ce2a <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ce2c:	2202      	movs	r2, #2
 800ce2e:	2100      	movs	r1, #0
 800ce30:	f7ff ffcb 	bl	800cdca <xQueueGenericCreate>
		if( xHandle != NULL )
 800ce34:	2800      	cmp	r0, #0
 800ce36:	d001      	beq.n	800ce3c <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ce38:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800ce3a:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800ce3c:	b672      	cpsid	i
 800ce3e:	e7fe      	b.n	800ce3e <xQueueCreateCountingSemaphore+0x26>

0800ce40 <xQueueGenericSend>:
{
 800ce40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce42:	46ce      	mov	lr, r9
 800ce44:	b500      	push	{lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	0004      	movs	r4, r0
 800ce4a:	9100      	str	r1, [sp, #0]
 800ce4c:	9201      	str	r2, [sp, #4]
 800ce4e:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800ce50:	2800      	cmp	r0, #0
 800ce52:	d007      	beq.n	800ce64 <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce54:	9b00      	ldr	r3, [sp, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d106      	bne.n	800ce68 <xQueueGenericSend+0x28>
 800ce5a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d003      	beq.n	800ce68 <xQueueGenericSend+0x28>
 800ce60:	b672      	cpsid	i
 800ce62:	e7fe      	b.n	800ce62 <xQueueGenericSend+0x22>
	configASSERT( pxQueue );
 800ce64:	b672      	cpsid	i
 800ce66:	e7fe      	b.n	800ce66 <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce68:	2d02      	cmp	r5, #2
 800ce6a:	d104      	bne.n	800ce76 <xQueueGenericSend+0x36>
 800ce6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d001      	beq.n	800ce76 <xQueueGenericSend+0x36>
 800ce72:	b672      	cpsid	i
 800ce74:	e7fe      	b.n	800ce74 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce76:	f000 ff4f 	bl	800dd18 <xTaskGetSchedulerState>
 800ce7a:	2800      	cmp	r0, #0
 800ce7c:	d104      	bne.n	800ce88 <xQueueGenericSend+0x48>
 800ce7e:	9b01      	ldr	r3, [sp, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d004      	beq.n	800ce8e <xQueueGenericSend+0x4e>
 800ce84:	b672      	cpsid	i
 800ce86:	e7fe      	b.n	800ce86 <xQueueGenericSend+0x46>
 800ce88:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800ce8a:	2700      	movs	r7, #0
 800ce8c:	e02f      	b.n	800ceee <xQueueGenericSend+0xae>
 800ce8e:	2600      	movs	r6, #0
 800ce90:	e7fb      	b.n	800ce8a <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce92:	002a      	movs	r2, r5
 800ce94:	9900      	ldr	r1, [sp, #0]
 800ce96:	0020      	movs	r0, r4
 800ce98:	f7ff fed0 	bl	800cc3c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d104      	bne.n	800ceac <xQueueGenericSend+0x6c>
					else if( xYieldRequired != pdFALSE )
 800cea2:	2800      	cmp	r0, #0
 800cea4:	d00a      	beq.n	800cebc <xQueueGenericSend+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 800cea6:	f001 fb5f 	bl	800e568 <vPortYield>
 800ceaa:	e007      	b.n	800cebc <xQueueGenericSend+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800ceac:	0020      	movs	r0, r4
 800ceae:	3024      	adds	r0, #36	; 0x24
 800ceb0:	f000 feaa 	bl	800dc08 <xTaskRemoveFromEventList>
 800ceb4:	2801      	cmp	r0, #1
 800ceb6:	d101      	bne.n	800cebc <xQueueGenericSend+0x7c>
							queueYIELD_IF_USING_PREEMPTION();
 800ceb8:	f001 fb56 	bl	800e568 <vPortYield>
				taskEXIT_CRITICAL();
 800cebc:	f001 fb6c 	bl	800e598 <vPortExitCritical>
				return pdPASS;
 800cec0:	2001      	movs	r0, #1
}
 800cec2:	b004      	add	sp, #16
 800cec4:	bc04      	pop	{r2}
 800cec6:	4691      	mov	r9, r2
 800cec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800ceca:	f001 fb65 	bl	800e598 <vPortExitCritical>
					return errQUEUE_FULL;
 800cece:	2000      	movs	r0, #0
 800ced0:	e7f7      	b.n	800cec2 <xQueueGenericSend+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 800ced2:	a802      	add	r0, sp, #8
 800ced4:	f000 fed8 	bl	800dc88 <vTaskSetTimeOutState>
 800ced8:	e016      	b.n	800cf08 <xQueueGenericSend+0xc8>
		prvLockQueue( pxQueue );
 800ceda:	6467      	str	r7, [r4, #68]	; 0x44
 800cedc:	e01d      	b.n	800cf1a <xQueueGenericSend+0xda>
 800cede:	64a7      	str	r7, [r4, #72]	; 0x48
 800cee0:	e01e      	b.n	800cf20 <xQueueGenericSend+0xe0>
				prvUnlockQueue( pxQueue );
 800cee2:	0020      	movs	r0, r4
 800cee4:	f7ff fefa 	bl	800ccdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cee8:	f000 fcb0 	bl	800d84c <xTaskResumeAll>
 800ceec:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800ceee:	f001 fb47 	bl	800e580 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cef2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cef4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800cef6:	4293      	cmp	r3, r2
 800cef8:	d3cb      	bcc.n	800ce92 <xQueueGenericSend+0x52>
 800cefa:	2d02      	cmp	r5, #2
 800cefc:	d0c9      	beq.n	800ce92 <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800cefe:	9b01      	ldr	r3, [sp, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d0e2      	beq.n	800ceca <xQueueGenericSend+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 800cf04:	2e00      	cmp	r6, #0
 800cf06:	d0e4      	beq.n	800ced2 <xQueueGenericSend+0x92>
		taskEXIT_CRITICAL();
 800cf08:	f001 fb46 	bl	800e598 <vPortExitCritical>
		vTaskSuspendAll();
 800cf0c:	f000 fbfe 	bl	800d70c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf10:	f001 fb36 	bl	800e580 <vPortEnterCritical>
 800cf14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cf16:	3301      	adds	r3, #1
 800cf18:	d0df      	beq.n	800ceda <xQueueGenericSend+0x9a>
 800cf1a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	d0de      	beq.n	800cede <xQueueGenericSend+0x9e>
 800cf20:	f001 fb3a 	bl	800e598 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf24:	a901      	add	r1, sp, #4
 800cf26:	a802      	add	r0, sp, #8
 800cf28:	f000 febe 	bl	800dca8 <xTaskCheckForTimeOut>
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	d117      	bne.n	800cf60 <xQueueGenericSend+0x120>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cf30:	f001 fb26 	bl	800e580 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cf34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cf36:	4699      	mov	r9, r3
 800cf38:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800cf3a:	f001 fb2d 	bl	800e598 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cf3e:	45b1      	cmp	r9, r6
 800cf40:	d1cf      	bne.n	800cee2 <xQueueGenericSend+0xa2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cf42:	0020      	movs	r0, r4
 800cf44:	3010      	adds	r0, #16
 800cf46:	9901      	ldr	r1, [sp, #4]
 800cf48:	f000 fe20 	bl	800db8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cf4c:	0020      	movs	r0, r4
 800cf4e:	f7ff fec5 	bl	800ccdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cf52:	f000 fc7b 	bl	800d84c <xTaskResumeAll>
 800cf56:	2800      	cmp	r0, #0
 800cf58:	d1c8      	bne.n	800ceec <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800cf5a:	f001 fb05 	bl	800e568 <vPortYield>
 800cf5e:	e7c5      	b.n	800ceec <xQueueGenericSend+0xac>
			prvUnlockQueue( pxQueue );
 800cf60:	0020      	movs	r0, r4
 800cf62:	f7ff febb 	bl	800ccdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf66:	f000 fc71 	bl	800d84c <xTaskResumeAll>
			return errQUEUE_FULL;
 800cf6a:	2000      	movs	r0, #0
 800cf6c:	e7a9      	b.n	800cec2 <xQueueGenericSend+0x82>

0800cf6e <xQueueGenericSendFromISR>:
{
 800cf6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf70:	b083      	sub	sp, #12
 800cf72:	0004      	movs	r4, r0
 800cf74:	000d      	movs	r5, r1
 800cf76:	0016      	movs	r6, r2
 800cf78:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d006      	beq.n	800cf8c <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf7e:	2900      	cmp	r1, #0
 800cf80:	d106      	bne.n	800cf90 <xQueueGenericSendFromISR+0x22>
 800cf82:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d003      	beq.n	800cf90 <xQueueGenericSendFromISR+0x22>
 800cf88:	b672      	cpsid	i
 800cf8a:	e7fe      	b.n	800cf8a <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 800cf8c:	b672      	cpsid	i
 800cf8e:	e7fe      	b.n	800cf8e <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf90:	2f02      	cmp	r7, #2
 800cf92:	d12a      	bne.n	800cfea <xQueueGenericSendFromISR+0x7c>
 800cf94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d011      	beq.n	800cfbe <xQueueGenericSendFromISR+0x50>
 800cf9a:	b672      	cpsid	i
 800cf9c:	e7fe      	b.n	800cf9c <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800cf9e:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d01b      	beq.n	800cfde <xQueueGenericSendFromISR+0x70>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfa6:	0020      	movs	r0, r4
 800cfa8:	3024      	adds	r0, #36	; 0x24
 800cfaa:	f000 fe2d 	bl	800dc08 <xTaskRemoveFromEventList>
 800cfae:	2800      	cmp	r0, #0
 800cfb0:	d015      	beq.n	800cfde <xQueueGenericSendFromISR+0x70>
							if( pxHigherPriorityTaskWoken != NULL )
 800cfb2:	2e00      	cmp	r6, #0
 800cfb4:	d001      	beq.n	800cfba <xQueueGenericSendFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cfb6:	6035      	str	r5, [r6, #0]
 800cfb8:	e011      	b.n	800cfde <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
 800cfba:	2501      	movs	r5, #1
 800cfbc:	e00f      	b.n	800cfde <xQueueGenericSendFromISR+0x70>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cfbe:	f001 fafb 	bl	800e5b8 <ulSetInterruptMaskFromISR>
 800cfc2:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cfc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cfc6:	003a      	movs	r2, r7
 800cfc8:	0029      	movs	r1, r5
 800cfca:	0020      	movs	r0, r4
 800cfcc:	f7ff fe36 	bl	800cc3c <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800cfd0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	d0e3      	beq.n	800cf9e <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800cfd6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cfd8:	3301      	adds	r3, #1
 800cfda:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800cfdc:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800cfde:	9801      	ldr	r0, [sp, #4]
 800cfe0:	f001 faef 	bl	800e5c2 <vClearInterruptMaskFromISR>
}
 800cfe4:	0028      	movs	r0, r5
 800cfe6:	b003      	add	sp, #12
 800cfe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cfea:	f001 fae5 	bl	800e5b8 <ulSetInterruptMaskFromISR>
 800cfee:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cff0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cff2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d3e6      	bcc.n	800cfc6 <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 800cff8:	2500      	movs	r5, #0
 800cffa:	e7f0      	b.n	800cfde <xQueueGenericSendFromISR+0x70>

0800cffc <xQueueGiveFromISR>:
{
 800cffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffe:	0004      	movs	r4, r0
 800d000:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800d002:	2800      	cmp	r0, #0
 800d004:	d004      	beq.n	800d010 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800d006:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d003      	beq.n	800d014 <xQueueGiveFromISR+0x18>
 800d00c:	b672      	cpsid	i
 800d00e:	e7fe      	b.n	800d00e <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800d010:	b672      	cpsid	i
 800d012:	e7fe      	b.n	800d012 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800d014:	6803      	ldr	r3, [r0, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d01f      	beq.n	800d05a <xQueueGiveFromISR+0x5e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d01a:	f001 facd 	bl	800e5b8 <ulSetInterruptMaskFromISR>
 800d01e:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800d020:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800d022:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800d024:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d026:	4293      	cmp	r3, r2
 800d028:	d212      	bcs.n	800d050 <xQueueGiveFromISR+0x54>
			++( pxQueue->uxMessagesWaiting );
 800d02a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d02c:	3301      	adds	r3, #1
 800d02e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800d030:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d032:	3301      	adds	r3, #1
 800d034:	d116      	bne.n	800d064 <xQueueGiveFromISR+0x68>
			xReturn = pdPASS;
 800d036:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d008      	beq.n	800d050 <xQueueGiveFromISR+0x54>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d03e:	0020      	movs	r0, r4
 800d040:	3024      	adds	r0, #36	; 0x24
 800d042:	f000 fde1 	bl	800dc08 <xTaskRemoveFromEventList>
 800d046:	2800      	cmp	r0, #0
 800d048:	d002      	beq.n	800d050 <xQueueGiveFromISR+0x54>
							if( pxHigherPriorityTaskWoken != NULL )
 800d04a:	2f00      	cmp	r7, #0
 800d04c:	d00f      	beq.n	800d06e <xQueueGiveFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d04e:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d050:	0030      	movs	r0, r6
 800d052:	f001 fab6 	bl	800e5c2 <vClearInterruptMaskFromISR>
}
 800d056:	0028      	movs	r0, r5
 800d058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800d05a:	6843      	ldr	r3, [r0, #4]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d0dc      	beq.n	800d01a <xQueueGiveFromISR+0x1e>
 800d060:	b672      	cpsid	i
 800d062:	e7fe      	b.n	800d062 <xQueueGiveFromISR+0x66>
				++( pxQueue->xTxLock );
 800d064:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d066:	3301      	adds	r3, #1
 800d068:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800d06a:	2501      	movs	r5, #1
 800d06c:	e7f0      	b.n	800d050 <xQueueGiveFromISR+0x54>
 800d06e:	2501      	movs	r5, #1
 800d070:	e7ee      	b.n	800d050 <xQueueGiveFromISR+0x54>

0800d072 <xQueueGenericReceive>:
{
 800d072:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d074:	46c6      	mov	lr, r8
 800d076:	b500      	push	{lr}
 800d078:	b084      	sub	sp, #16
 800d07a:	0004      	movs	r4, r0
 800d07c:	000e      	movs	r6, r1
 800d07e:	9201      	str	r2, [sp, #4]
 800d080:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800d082:	2800      	cmp	r0, #0
 800d084:	d006      	beq.n	800d094 <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d086:	2900      	cmp	r1, #0
 800d088:	d106      	bne.n	800d098 <xQueueGenericReceive+0x26>
 800d08a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d003      	beq.n	800d098 <xQueueGenericReceive+0x26>
 800d090:	b672      	cpsid	i
 800d092:	e7fe      	b.n	800d092 <xQueueGenericReceive+0x20>
	configASSERT( pxQueue );
 800d094:	b672      	cpsid	i
 800d096:	e7fe      	b.n	800d096 <xQueueGenericReceive+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d098:	f000 fe3e 	bl	800dd18 <xTaskGetSchedulerState>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d104      	bne.n	800d0aa <xQueueGenericReceive+0x38>
 800d0a0:	9b01      	ldr	r3, [sp, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d004      	beq.n	800d0b0 <xQueueGenericReceive+0x3e>
 800d0a6:	b672      	cpsid	i
 800d0a8:	e7fe      	b.n	800d0a8 <xQueueGenericReceive+0x36>
 800d0aa:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800d0ac:	2700      	movs	r7, #0
 800d0ae:	e04b      	b.n	800d148 <xQueueGenericReceive+0xd6>
 800d0b0:	2500      	movs	r5, #0
 800d0b2:	e7fb      	b.n	800d0ac <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800d0b4:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d0b6:	0031      	movs	r1, r6
 800d0b8:	0020      	movs	r0, r4
 800d0ba:	f7ff fdfd 	bl	800ccb8 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800d0be:	4643      	mov	r3, r8
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d11a      	bne.n	800d0fa <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
 800d0c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0ca:	6823      	ldr	r3, [r4, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d102      	bne.n	800d0d6 <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800d0d0:	f000 ff62 	bl	800df98 <pvTaskIncrementMutexHeldCount>
 800d0d4:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0d6:	6923      	ldr	r3, [r4, #16]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d007      	beq.n	800d0ec <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800d0dc:	0020      	movs	r0, r4
 800d0de:	3010      	adds	r0, #16
 800d0e0:	f000 fd92 	bl	800dc08 <xTaskRemoveFromEventList>
 800d0e4:	2801      	cmp	r0, #1
 800d0e6:	d101      	bne.n	800d0ec <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800d0e8:	f001 fa3e 	bl	800e568 <vPortYield>
				taskEXIT_CRITICAL();
 800d0ec:	f001 fa54 	bl	800e598 <vPortExitCritical>
				return pdPASS;
 800d0f0:	2001      	movs	r0, #1
}
 800d0f2:	b004      	add	sp, #16
 800d0f4:	bc04      	pop	{r2}
 800d0f6:	4690      	mov	r8, r2
 800d0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800d0fa:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d0f4      	beq.n	800d0ec <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d102:	0020      	movs	r0, r4
 800d104:	3024      	adds	r0, #36	; 0x24
 800d106:	f000 fd7f 	bl	800dc08 <xTaskRemoveFromEventList>
 800d10a:	2800      	cmp	r0, #0
 800d10c:	d0ee      	beq.n	800d0ec <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800d10e:	f001 fa2b 	bl	800e568 <vPortYield>
 800d112:	e7eb      	b.n	800d0ec <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 800d114:	f001 fa40 	bl	800e598 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d118:	2000      	movs	r0, #0
 800d11a:	e7ea      	b.n	800d0f2 <xQueueGenericReceive+0x80>
					vTaskSetTimeOutState( &xTimeOut );
 800d11c:	a802      	add	r0, sp, #8
 800d11e:	f000 fdb3 	bl	800dc88 <vTaskSetTimeOutState>
 800d122:	e01b      	b.n	800d15c <xQueueGenericReceive+0xea>
		prvLockQueue( pxQueue );
 800d124:	6467      	str	r7, [r4, #68]	; 0x44
 800d126:	e022      	b.n	800d16e <xQueueGenericReceive+0xfc>
 800d128:	64a7      	str	r7, [r4, #72]	; 0x48
 800d12a:	e023      	b.n	800d174 <xQueueGenericReceive+0x102>
						taskENTER_CRITICAL();
 800d12c:	f001 fa28 	bl	800e580 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800d130:	6860      	ldr	r0, [r4, #4]
 800d132:	f000 fe01 	bl	800dd38 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800d136:	f001 fa2f 	bl	800e598 <vPortExitCritical>
 800d13a:	e02d      	b.n	800d198 <xQueueGenericReceive+0x126>
				prvUnlockQueue( pxQueue );
 800d13c:	0020      	movs	r0, r4
 800d13e:	f7ff fdcd 	bl	800ccdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d142:	f000 fb83 	bl	800d84c <xTaskResumeAll>
 800d146:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800d148:	f001 fa1a 	bl	800e580 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d14c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1b0      	bne.n	800d0b4 <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d152:	9b01      	ldr	r3, [sp, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d0dd      	beq.n	800d114 <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800d158:	2d00      	cmp	r5, #0
 800d15a:	d0df      	beq.n	800d11c <xQueueGenericReceive+0xaa>
		taskEXIT_CRITICAL();
 800d15c:	f001 fa1c 	bl	800e598 <vPortExitCritical>
		vTaskSuspendAll();
 800d160:	f000 fad4 	bl	800d70c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d164:	f001 fa0c 	bl	800e580 <vPortEnterCritical>
 800d168:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d16a:	3301      	adds	r3, #1
 800d16c:	d0da      	beq.n	800d124 <xQueueGenericReceive+0xb2>
 800d16e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d170:	3301      	adds	r3, #1
 800d172:	d0d9      	beq.n	800d128 <xQueueGenericReceive+0xb6>
 800d174:	f001 fa10 	bl	800e598 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d178:	a901      	add	r1, sp, #4
 800d17a:	a802      	add	r0, sp, #8
 800d17c:	f000 fd94 	bl	800dca8 <xTaskCheckForTimeOut>
 800d180:	2800      	cmp	r0, #0
 800d182:	d118      	bne.n	800d1b6 <xQueueGenericReceive+0x144>
	taskENTER_CRITICAL();
 800d184:	f001 f9fc 	bl	800e580 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d188:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800d18a:	f001 fa05 	bl	800e598 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d18e:	2d00      	cmp	r5, #0
 800d190:	d1d4      	bne.n	800d13c <xQueueGenericReceive+0xca>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d192:	6823      	ldr	r3, [r4, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d0c9      	beq.n	800d12c <xQueueGenericReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d198:	0020      	movs	r0, r4
 800d19a:	3024      	adds	r0, #36	; 0x24
 800d19c:	9901      	ldr	r1, [sp, #4]
 800d19e:	f000 fcf5 	bl	800db8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1a2:	0020      	movs	r0, r4
 800d1a4:	f7ff fd9a 	bl	800ccdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1a8:	f000 fb50 	bl	800d84c <xTaskResumeAll>
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	d1ca      	bne.n	800d146 <xQueueGenericReceive+0xd4>
					portYIELD_WITHIN_API();
 800d1b0:	f001 f9da 	bl	800e568 <vPortYield>
 800d1b4:	e7c7      	b.n	800d146 <xQueueGenericReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800d1b6:	0020      	movs	r0, r4
 800d1b8:	f7ff fd90 	bl	800ccdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1bc:	f000 fb46 	bl	800d84c <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	e796      	b.n	800d0f2 <xQueueGenericReceive+0x80>

0800d1c4 <xQueueReceiveFromISR>:
{
 800d1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1c6:	b083      	sub	sp, #12
 800d1c8:	0004      	movs	r4, r0
 800d1ca:	000f      	movs	r7, r1
 800d1cc:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	d006      	beq.n	800d1e0 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1d2:	2900      	cmp	r1, #0
 800d1d4:	d106      	bne.n	800d1e4 <xQueueReceiveFromISR+0x20>
 800d1d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d003      	beq.n	800d1e4 <xQueueReceiveFromISR+0x20>
 800d1dc:	b672      	cpsid	i
 800d1de:	e7fe      	b.n	800d1de <xQueueReceiveFromISR+0x1a>
	configASSERT( pxQueue );
 800d1e0:	b672      	cpsid	i
 800d1e2:	e7fe      	b.n	800d1e2 <xQueueReceiveFromISR+0x1e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d1e4:	f001 f9e8 	bl	800e5b8 <ulSetInterruptMaskFromISR>
 800d1e8:	9001      	str	r0, [sp, #4]
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800d1ec:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d01b      	beq.n	800d22a <xQueueReceiveFromISR+0x66>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1f2:	0039      	movs	r1, r7
 800d1f4:	0020      	movs	r0, r4
 800d1f6:	f7ff fd5f 	bl	800ccb8 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800d1fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800d200:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d202:	3301      	adds	r3, #1
 800d204:	d004      	beq.n	800d210 <xQueueReceiveFromISR+0x4c>
				++( pxQueue->xRxLock );
 800d206:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d208:	3301      	adds	r3, #1
 800d20a:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800d20c:	2501      	movs	r5, #1
 800d20e:	e00c      	b.n	800d22a <xQueueReceiveFromISR+0x66>
 800d210:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d212:	6923      	ldr	r3, [r4, #16]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d008      	beq.n	800d22a <xQueueReceiveFromISR+0x66>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d218:	0020      	movs	r0, r4
 800d21a:	3010      	adds	r0, #16
 800d21c:	f000 fcf4 	bl	800dc08 <xTaskRemoveFromEventList>
 800d220:	2800      	cmp	r0, #0
 800d222:	d002      	beq.n	800d22a <xQueueReceiveFromISR+0x66>
						if( pxHigherPriorityTaskWoken != NULL )
 800d224:	2e00      	cmp	r6, #0
 800d226:	d006      	beq.n	800d236 <xQueueReceiveFromISR+0x72>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d228:	6035      	str	r5, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800d22a:	9801      	ldr	r0, [sp, #4]
 800d22c:	f001 f9c9 	bl	800e5c2 <vClearInterruptMaskFromISR>
}
 800d230:	0028      	movs	r0, r5
 800d232:	b003      	add	sp, #12
 800d234:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800d236:	2501      	movs	r5, #1
 800d238:	e7f7      	b.n	800d22a <xQueueReceiveFromISR+0x66>
	...

0800d23c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d23c:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d23e:	4b0a      	ldr	r3, [pc, #40]	; (800d268 <vQueueAddToRegistry+0x2c>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d009      	beq.n	800d25a <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d246:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d248:	4c07      	ldr	r4, [pc, #28]	; (800d268 <vQueueAddToRegistry+0x2c>)
 800d24a:	00da      	lsls	r2, r3, #3
 800d24c:	58a2      	ldr	r2, [r4, r2]
 800d24e:	2a00      	cmp	r2, #0
 800d250:	d004      	beq.n	800d25c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d252:	3301      	adds	r3, #1
 800d254:	2b08      	cmp	r3, #8
 800d256:	d1f8      	bne.n	800d24a <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d258:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d25a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d25c:	4a02      	ldr	r2, [pc, #8]	; (800d268 <vQueueAddToRegistry+0x2c>)
 800d25e:	00db      	lsls	r3, r3, #3
 800d260:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d262:	18d3      	adds	r3, r2, r3
 800d264:	6058      	str	r0, [r3, #4]
				break;
 800d266:	e7f7      	b.n	800d258 <vQueueAddToRegistry+0x1c>
 800d268:	20006dec 	.word	0x20006dec

0800d26c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800d26c:	b570      	push	{r4, r5, r6, lr}
 800d26e:	0004      	movs	r4, r0
 800d270:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d272:	f001 f985 	bl	800e580 <vPortEnterCritical>
 800d276:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d278:	3301      	adds	r3, #1
 800d27a:	d00b      	beq.n	800d294 <vQueueWaitForMessageRestricted+0x28>
 800d27c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d27e:	3301      	adds	r3, #1
 800d280:	d00b      	beq.n	800d29a <vQueueWaitForMessageRestricted+0x2e>
 800d282:	f001 f989 	bl	800e598 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d286:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d009      	beq.n	800d2a0 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d28c:	0020      	movs	r0, r4
 800d28e:	f7ff fd25 	bl	800ccdc <prvUnlockQueue>
	}
 800d292:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800d294:	2300      	movs	r3, #0
 800d296:	6463      	str	r3, [r4, #68]	; 0x44
 800d298:	e7f0      	b.n	800d27c <vQueueWaitForMessageRestricted+0x10>
 800d29a:	2300      	movs	r3, #0
 800d29c:	64a3      	str	r3, [r4, #72]	; 0x48
 800d29e:	e7f0      	b.n	800d282 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d2a0:	0020      	movs	r0, r4
 800d2a2:	3024      	adds	r0, #36	; 0x24
 800d2a4:	0029      	movs	r1, r5
 800d2a6:	f000 fc95 	bl	800dbd4 <vTaskPlaceOnEventListRestricted>
 800d2aa:	e7ef      	b.n	800d28c <vQueueWaitForMessageRestricted+0x20>

0800d2ac <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800d2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ae:	46d6      	mov	lr, sl
 800d2b0:	464f      	mov	r7, r9
 800d2b2:	4646      	mov	r6, r8
 800d2b4:	b5c0      	push	{r6, r7, lr}
 800d2b6:	0006      	movs	r6, r0
 800d2b8:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800d2ba:	6808      	ldr	r0, [r1, #0]
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	d044      	beq.n	800d34a <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800d2c0:	684b      	ldr	r3, [r1, #4]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	604b      	str	r3, [r1, #4]
 800d2c6:	2208      	movs	r2, #8
 800d2c8:	4690      	mov	r8, r2
 800d2ca:	4488      	add	r8, r1
 800d2cc:	4543      	cmp	r3, r8
 800d2ce:	d006      	beq.n	800d2de <prvListTaskWithinSingleList+0x32>
 800d2d0:	684b      	ldr	r3, [r1, #4]
 800d2d2:	68db      	ldr	r3, [r3, #12]
 800d2d4:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800d2d6:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800d2d8:	2302      	movs	r3, #2
 800d2da:	469a      	mov	sl, r3
 800d2dc:	e018      	b.n	800d310 <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800d2de:	68cb      	ldr	r3, [r1, #12]
 800d2e0:	604b      	str	r3, [r1, #4]
 800d2e2:	e7f5      	b.n	800d2d0 <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800d2e4:	68cb      	ldr	r3, [r1, #12]
 800d2e6:	604b      	str	r3, [r1, #4]
 800d2e8:	e017      	b.n	800d31a <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800d2ea:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800d2ec:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800d2ee:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800d2f0:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800d2f2:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d2f4:	783b      	ldrb	r3, [r7, #0]
 800d2f6:	2ba5      	cmp	r3, #165	; 0xa5
 800d2f8:	d125      	bne.n	800d346 <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800d2fa:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800d2fc:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d2fe:	5cfc      	ldrb	r4, [r7, r3]
 800d300:	2ca5      	cmp	r4, #165	; 0xa5
 800d302:	d0fb      	beq.n	800d2fc <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800d304:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800d306:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800d308:	3001      	adds	r0, #1
 800d30a:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800d30c:	45a9      	cmp	r9, r5
 800d30e:	d01c      	beq.n	800d34a <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800d310:	684b      	ldr	r3, [r1, #4]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	604b      	str	r3, [r1, #4]
 800d316:	4598      	cmp	r8, r3
 800d318:	d0e4      	beq.n	800d2e4 <prvListTaskWithinSingleList+0x38>
 800d31a:	684b      	ldr	r3, [r1, #4]
 800d31c:	68dd      	ldr	r5, [r3, #12]
 800d31e:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800d320:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800d322:	002b      	movs	r3, r5
 800d324:	3334      	adds	r3, #52	; 0x34
 800d326:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800d328:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800d32a:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800d32c:	4663      	mov	r3, ip
 800d32e:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800d330:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d332:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800d334:	4663      	mov	r3, ip
 800d336:	2b03      	cmp	r3, #3
 800d338:	d1d7      	bne.n	800d2ea <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800d33a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d0d4      	beq.n	800d2ea <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800d340:	4653      	mov	r3, sl
 800d342:	7333      	strb	r3, [r6, #12]
 800d344:	e7d1      	b.n	800d2ea <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800d346:	2300      	movs	r3, #0
 800d348:	e7dc      	b.n	800d304 <prvListTaskWithinSingleList+0x58>
	}
 800d34a:	bc1c      	pop	{r2, r3, r4}
 800d34c:	4690      	mov	r8, r2
 800d34e:	4699      	mov	r9, r3
 800d350:	46a2      	mov	sl, r4
 800d352:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d354 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d354:	4b08      	ldr	r3, [pc, #32]	; (800d378 <prvResetNextTaskUnblockTime+0x24>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d007      	beq.n	800d36e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d35e:	4b06      	ldr	r3, [pc, #24]	; (800d378 <prvResetNextTaskUnblockTime+0x24>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800d364:	68db      	ldr	r3, [r3, #12]
 800d366:	685a      	ldr	r2, [r3, #4]
 800d368:	4b04      	ldr	r3, [pc, #16]	; (800d37c <prvResetNextTaskUnblockTime+0x28>)
 800d36a:	601a      	str	r2, [r3, #0]
	}
}
 800d36c:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800d36e:	4b03      	ldr	r3, [pc, #12]	; (800d37c <prvResetNextTaskUnblockTime+0x28>)
 800d370:	2201      	movs	r2, #1
 800d372:	4252      	negs	r2, r2
 800d374:	601a      	str	r2, [r3, #0]
 800d376:	e7f9      	b.n	800d36c <prvResetNextTaskUnblockTime+0x18>
 800d378:	20001d24 	.word	0x20001d24
 800d37c:	200000a0 	.word	0x200000a0

0800d380 <prvAddCurrentTaskToDelayedList>:
{
 800d380:	b510      	push	{r4, lr}
 800d382:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800d384:	4b0e      	ldr	r3, [pc, #56]	; (800d3c0 <prvAddCurrentTaskToDelayedList+0x40>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800d38a:	4b0e      	ldr	r3, [pc, #56]	; (800d3c4 <prvAddCurrentTaskToDelayedList+0x44>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4283      	cmp	r3, r0
 800d390:	d80d      	bhi.n	800d3ae <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800d392:	4b0d      	ldr	r3, [pc, #52]	; (800d3c8 <prvAddCurrentTaskToDelayedList+0x48>)
 800d394:	6818      	ldr	r0, [r3, #0]
 800d396:	4b0a      	ldr	r3, [pc, #40]	; (800d3c0 <prvAddCurrentTaskToDelayedList+0x40>)
 800d398:	6819      	ldr	r1, [r3, #0]
 800d39a:	3104      	adds	r1, #4
 800d39c:	f7ff fc24 	bl	800cbe8 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800d3a0:	4b0a      	ldr	r3, [pc, #40]	; (800d3cc <prvAddCurrentTaskToDelayedList+0x4c>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	42a3      	cmp	r3, r4
 800d3a6:	d909      	bls.n	800d3bc <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800d3a8:	4b08      	ldr	r3, [pc, #32]	; (800d3cc <prvAddCurrentTaskToDelayedList+0x4c>)
 800d3aa:	601c      	str	r4, [r3, #0]
}
 800d3ac:	e006      	b.n	800d3bc <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800d3ae:	4b08      	ldr	r3, [pc, #32]	; (800d3d0 <prvAddCurrentTaskToDelayedList+0x50>)
 800d3b0:	6818      	ldr	r0, [r3, #0]
 800d3b2:	4b03      	ldr	r3, [pc, #12]	; (800d3c0 <prvAddCurrentTaskToDelayedList+0x40>)
 800d3b4:	6819      	ldr	r1, [r3, #0]
 800d3b6:	3104      	adds	r1, #4
 800d3b8:	f7ff fc16 	bl	800cbe8 <vListInsert>
}
 800d3bc:	bd10      	pop	{r4, pc}
 800d3be:	46c0      	nop			; (mov r8, r8)
 800d3c0:	20001d20 	.word	0x20001d20
 800d3c4:	20001e40 	.word	0x20001e40
 800d3c8:	20001d24 	.word	0x20001d24
 800d3cc:	200000a0 	.word	0x200000a0
 800d3d0:	20001d28 	.word	0x20001d28

0800d3d4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800d3d4:	b510      	push	{r4, lr}
 800d3d6:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800d3d8:	f004 fd7c 	bl	8011ed4 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800d3dc:	0020      	movs	r0, r4
 800d3de:	f7f2 fe9b 	bl	8000118 <strlen>
 800d3e2:	0003      	movs	r3, r0
 800d3e4:	280b      	cmp	r0, #11
 800d3e6:	dc08      	bgt.n	800d3fa <prvWriteNameToBuffer+0x26>
 800d3e8:	1820      	adds	r0, r4, r0
 800d3ea:	0022      	movs	r2, r4
 800d3ec:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800d3ee:	2320      	movs	r3, #32
 800d3f0:	7003      	strb	r3, [r0, #0]
 800d3f2:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800d3f4:	4290      	cmp	r0, r2
 800d3f6:	d1fb      	bne.n	800d3f0 <prvWriteNameToBuffer+0x1c>
 800d3f8:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800d3fa:	18e0      	adds	r0, r4, r3
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800d400:	bd10      	pop	{r4, pc}
	...

0800d404 <xTaskGenericCreate>:
{
 800d404:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d406:	46d6      	mov	lr, sl
 800d408:	4647      	mov	r7, r8
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b085      	sub	sp, #20
 800d40e:	9002      	str	r0, [sp, #8]
 800d410:	000d      	movs	r5, r1
 800d412:	0016      	movs	r6, r2
 800d414:	9303      	str	r3, [sp, #12]
 800d416:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
 800d418:	2800      	cmp	r0, #0
 800d41a:	d101      	bne.n	800d420 <xTaskGenericCreate+0x1c>
 800d41c:	b672      	cpsid	i
 800d41e:	e7fe      	b.n	800d41e <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800d420:	2f06      	cmp	r7, #6
 800d422:	d901      	bls.n	800d428 <xTaskGenericCreate+0x24>
 800d424:	b672      	cpsid	i
 800d426:	e7fe      	b.n	800d426 <xTaskGenericCreate+0x22>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d428:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d106      	bne.n	800d43c <xTaskGenericCreate+0x38>
 800d42e:	0090      	lsls	r0, r2, #2
 800d430:	f001 f928 	bl	800e684 <pvPortMalloc>
 800d434:	900e      	str	r0, [sp, #56]	; 0x38
		if( pxStack != NULL )
 800d436:	2800      	cmp	r0, #0
 800d438:	d100      	bne.n	800d43c <xTaskGenericCreate+0x38>
 800d43a:	e0b7      	b.n	800d5ac <xTaskGenericCreate+0x1a8>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800d43c:	2060      	movs	r0, #96	; 0x60
 800d43e:	f001 f921 	bl	800e684 <pvPortMalloc>
 800d442:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800d444:	d100      	bne.n	800d448 <xTaskGenericCreate+0x44>
 800d446:	e08b      	b.n	800d560 <xTaskGenericCreate+0x15c>
				pxNewTCB->pxStack = pxStack;
 800d448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d44a:	6303      	str	r3, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800d44c:	00b2      	lsls	r2, r6, #2
 800d44e:	21a5      	movs	r1, #165	; 0xa5
 800d450:	0018      	movs	r0, r3
 800d452:	f004 fb09 	bl	8011a68 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800d456:	4b57      	ldr	r3, [pc, #348]	; (800d5b4 <xTaskGenericCreate+0x1b0>)
 800d458:	18f3      	adds	r3, r6, r3
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d45e:	4694      	mov	ip, r2
 800d460:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800d462:	2207      	movs	r2, #7
 800d464:	4393      	bics	r3, r2
 800d466:	469a      	mov	sl, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800d468:	782a      	ldrb	r2, [r5, #0]
 800d46a:	2334      	movs	r3, #52	; 0x34
 800d46c:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
 800d46e:	782b      	ldrb	r3, [r5, #0]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d000      	beq.n	800d476 <xTaskGenericCreate+0x72>
 800d474:	e07e      	b.n	800d574 <xTaskGenericCreate+0x170>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d476:	2500      	movs	r5, #0
 800d478:	2340      	movs	r3, #64	; 0x40
 800d47a:	54e5      	strb	r5, [r4, r3]
	pxTCB->uxPriority = uxPriority;
 800d47c:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800d47e:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800d480:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800d482:	1d23      	adds	r3, r4, #4
 800d484:	9301      	str	r3, [sp, #4]
 800d486:	0018      	movs	r0, r3
 800d488:	f7ff fb9f 	bl	800cbca <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800d48c:	0020      	movs	r0, r4
 800d48e:	3018      	adds	r0, #24
 800d490:	f7ff fb9b 	bl	800cbca <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800d494:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d496:	2307      	movs	r3, #7
 800d498:	1bdb      	subs	r3, r3, r7
 800d49a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800d49c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800d49e:	6565      	str	r5, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800d4a0:	65a5      	str	r5, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800d4a2:	235c      	movs	r3, #92	; 0x5c
 800d4a4:	54e5      	strb	r5, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d4a6:	9a03      	ldr	r2, [sp, #12]
 800d4a8:	9902      	ldr	r1, [sp, #8]
 800d4aa:	4650      	mov	r0, sl
 800d4ac:	f001 f820 	bl	800e4f0 <pxPortInitialiseStack>
 800d4b0:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800d4b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4b4:	42ab      	cmp	r3, r5
 800d4b6:	d000      	beq.n	800d4ba <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d4b8:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800d4ba:	f001 f861 	bl	800e580 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800d4be:	4a3e      	ldr	r2, [pc, #248]	; (800d5b8 <xTaskGenericCreate+0x1b4>)
 800d4c0:	6813      	ldr	r3, [r2, #0]
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800d4c6:	4b3d      	ldr	r3, [pc, #244]	; (800d5bc <xTaskGenericCreate+0x1b8>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d162      	bne.n	800d594 <xTaskGenericCreate+0x190>
				pxCurrentTCB =  pxNewTCB;
 800d4ce:	4b3b      	ldr	r3, [pc, #236]	; (800d5bc <xTaskGenericCreate+0x1b8>)
 800d4d0:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d4d2:	6813      	ldr	r3, [r2, #0]
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d120      	bne.n	800d51a <xTaskGenericCreate+0x116>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4d8:	2500      	movs	r5, #0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d4da:	3313      	adds	r3, #19
 800d4dc:	4698      	mov	r8, r3
 800d4de:	4e38      	ldr	r6, [pc, #224]	; (800d5c0 <xTaskGenericCreate+0x1bc>)
 800d4e0:	4640      	mov	r0, r8
 800d4e2:	4368      	muls	r0, r5
 800d4e4:	1980      	adds	r0, r0, r6
 800d4e6:	f7ff fb65 	bl	800cbb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4ea:	3501      	adds	r5, #1
 800d4ec:	2d07      	cmp	r5, #7
 800d4ee:	d1f7      	bne.n	800d4e0 <xTaskGenericCreate+0xdc>
	vListInitialise( &xDelayedTaskList1 );
 800d4f0:	4e34      	ldr	r6, [pc, #208]	; (800d5c4 <xTaskGenericCreate+0x1c0>)
 800d4f2:	0030      	movs	r0, r6
 800d4f4:	f7ff fb5e 	bl	800cbb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d4f8:	4d33      	ldr	r5, [pc, #204]	; (800d5c8 <xTaskGenericCreate+0x1c4>)
 800d4fa:	0028      	movs	r0, r5
 800d4fc:	f7ff fb5a 	bl	800cbb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d500:	4832      	ldr	r0, [pc, #200]	; (800d5cc <xTaskGenericCreate+0x1c8>)
 800d502:	f7ff fb57 	bl	800cbb4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800d506:	4832      	ldr	r0, [pc, #200]	; (800d5d0 <xTaskGenericCreate+0x1cc>)
 800d508:	f7ff fb54 	bl	800cbb4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800d50c:	4831      	ldr	r0, [pc, #196]	; (800d5d4 <xTaskGenericCreate+0x1d0>)
 800d50e:	f7ff fb51 	bl	800cbb4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800d512:	4b31      	ldr	r3, [pc, #196]	; (800d5d8 <xTaskGenericCreate+0x1d4>)
 800d514:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d516:	4b31      	ldr	r3, [pc, #196]	; (800d5dc <xTaskGenericCreate+0x1d8>)
 800d518:	601d      	str	r5, [r3, #0]
			uxTaskNumber++;
 800d51a:	4a31      	ldr	r2, [pc, #196]	; (800d5e0 <xTaskGenericCreate+0x1dc>)
 800d51c:	6813      	ldr	r3, [r2, #0]
 800d51e:	3301      	adds	r3, #1
 800d520:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d522:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800d524:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d526:	4a2f      	ldr	r2, [pc, #188]	; (800d5e4 <xTaskGenericCreate+0x1e0>)
 800d528:	6812      	ldr	r2, [r2, #0]
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d901      	bls.n	800d532 <xTaskGenericCreate+0x12e>
 800d52e:	4a2d      	ldr	r2, [pc, #180]	; (800d5e4 <xTaskGenericCreate+0x1e0>)
 800d530:	6013      	str	r3, [r2, #0]
 800d532:	2014      	movs	r0, #20
 800d534:	4358      	muls	r0, r3
 800d536:	4b22      	ldr	r3, [pc, #136]	; (800d5c0 <xTaskGenericCreate+0x1bc>)
 800d538:	18c0      	adds	r0, r0, r3
 800d53a:	9901      	ldr	r1, [sp, #4]
 800d53c:	f7ff fb48 	bl	800cbd0 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800d540:	f001 f82a 	bl	800e598 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800d544:	4b28      	ldr	r3, [pc, #160]	; (800d5e8 <xTaskGenericCreate+0x1e4>)
 800d546:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800d548:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d00d      	beq.n	800d56a <xTaskGenericCreate+0x166>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800d54e:	4b1b      	ldr	r3, [pc, #108]	; (800d5bc <xTaskGenericCreate+0x1b8>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d554:	42bb      	cmp	r3, r7
 800d556:	d208      	bcs.n	800d56a <xTaskGenericCreate+0x166>
				taskYIELD_IF_USING_PREEMPTION();
 800d558:	f001 f806 	bl	800e568 <vPortYield>
			xReturn = pdPASS;
 800d55c:	2001      	movs	r0, #1
 800d55e:	e004      	b.n	800d56a <xTaskGenericCreate+0x166>
				vPortFree( pxStack );
 800d560:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d562:	f001 f925 	bl	800e7b0 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d566:	2001      	movs	r0, #1
 800d568:	4240      	negs	r0, r0
}
 800d56a:	b005      	add	sp, #20
 800d56c:	bc0c      	pop	{r2, r3}
 800d56e:	4690      	mov	r8, r2
 800d570:	469a      	mov	sl, r3
 800d572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d574:	1c6b      	adds	r3, r5, #1
 800d576:	0022      	movs	r2, r4
 800d578:	3235      	adds	r2, #53	; 0x35
 800d57a:	0021      	movs	r1, r4
 800d57c:	3141      	adds	r1, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800d57e:	7818      	ldrb	r0, [r3, #0]
 800d580:	7010      	strb	r0, [r2, #0]
		if( pcName[ x ] == 0x00 )
 800d582:	7818      	ldrb	r0, [r3, #0]
 800d584:	2800      	cmp	r0, #0
 800d586:	d100      	bne.n	800d58a <xTaskGenericCreate+0x186>
 800d588:	e775      	b.n	800d476 <xTaskGenericCreate+0x72>
 800d58a:	3301      	adds	r3, #1
 800d58c:	3201      	adds	r2, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d58e:	4291      	cmp	r1, r2
 800d590:	d1f5      	bne.n	800d57e <xTaskGenericCreate+0x17a>
 800d592:	e770      	b.n	800d476 <xTaskGenericCreate+0x72>
				if( xSchedulerRunning == pdFALSE )
 800d594:	4b14      	ldr	r3, [pc, #80]	; (800d5e8 <xTaskGenericCreate+0x1e4>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1be      	bne.n	800d51a <xTaskGenericCreate+0x116>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800d59c:	4b07      	ldr	r3, [pc, #28]	; (800d5bc <xTaskGenericCreate+0x1b8>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a2:	42bb      	cmp	r3, r7
 800d5a4:	d8b9      	bhi.n	800d51a <xTaskGenericCreate+0x116>
						pxCurrentTCB = pxNewTCB;
 800d5a6:	4b05      	ldr	r3, [pc, #20]	; (800d5bc <xTaskGenericCreate+0x1b8>)
 800d5a8:	601c      	str	r4, [r3, #0]
 800d5aa:	e7b6      	b.n	800d51a <xTaskGenericCreate+0x116>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d5ac:	2001      	movs	r0, #1
 800d5ae:	4240      	negs	r0, r0
 800d5b0:	e7db      	b.n	800d56a <xTaskGenericCreate+0x166>
 800d5b2:	46c0      	nop			; (mov r8, r8)
 800d5b4:	3fffffff 	.word	0x3fffffff
 800d5b8:	20001dbc 	.word	0x20001dbc
 800d5bc:	20001d20 	.word	0x20001d20
 800d5c0:	20001d2c 	.word	0x20001d2c
 800d5c4:	20001dd4 	.word	0x20001dd4
 800d5c8:	20001de8 	.word	0x20001de8
 800d5cc:	20001e00 	.word	0x20001e00
 800d5d0:	20001e2c 	.word	0x20001e2c
 800d5d4:	20001e18 	.word	0x20001e18
 800d5d8:	20001d24 	.word	0x20001d24
 800d5dc:	20001d28 	.word	0x20001d28
 800d5e0:	20001dc8 	.word	0x20001dc8
 800d5e4:	20001dd0 	.word	0x20001dd0
 800d5e8:	20001e14 	.word	0x20001e14

0800d5ec <uxTaskPriorityGet>:
	{
 800d5ec:	b510      	push	{r4, lr}
 800d5ee:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800d5f0:	f000 ffc6 	bl	800e580 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800d5f4:	2c00      	cmp	r4, #0
 800d5f6:	d004      	beq.n	800d602 <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800d5f8:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800d5fa:	f000 ffcd 	bl	800e598 <vPortExitCritical>
	}
 800d5fe:	0020      	movs	r0, r4
 800d600:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800d602:	4b01      	ldr	r3, [pc, #4]	; (800d608 <uxTaskPriorityGet+0x1c>)
 800d604:	681c      	ldr	r4, [r3, #0]
 800d606:	e7f7      	b.n	800d5f8 <uxTaskPriorityGet+0xc>
 800d608:	20001d20 	.word	0x20001d20

0800d60c <vTaskPrioritySet>:
	{
 800d60c:	b570      	push	{r4, r5, r6, lr}
 800d60e:	0004      	movs	r4, r0
 800d610:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800d612:	2906      	cmp	r1, #6
 800d614:	d901      	bls.n	800d61a <vTaskPrioritySet+0xe>
 800d616:	b672      	cpsid	i
 800d618:	e7fe      	b.n	800d618 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800d61a:	f000 ffb1 	bl	800e580 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800d61e:	2c00      	cmp	r4, #0
 800d620:	d101      	bne.n	800d626 <vTaskPrioritySet+0x1a>
 800d622:	4b21      	ldr	r3, [pc, #132]	; (800d6a8 <vTaskPrioritySet+0x9c>)
 800d624:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800d626:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800d628:	4295      	cmp	r5, r2
 800d62a:	d032      	beq.n	800d692 <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 800d62c:	d934      	bls.n	800d698 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 800d62e:	4b1e      	ldr	r3, [pc, #120]	; (800d6a8 <vTaskPrioritySet+0x9c>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	42a3      	cmp	r3, r4
 800d634:	d036      	beq.n	800d6a4 <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800d636:	4b1c      	ldr	r3, [pc, #112]	; (800d6a8 <vTaskPrioritySet+0x9c>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63c:	2600      	movs	r6, #0
 800d63e:	429d      	cmp	r5, r3
 800d640:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d642:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800d644:	428a      	cmp	r2, r1
 800d646:	d100      	bne.n	800d64a <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 800d648:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 800d64a:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d64c:	69a3      	ldr	r3, [r4, #24]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	db02      	blt.n	800d658 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d652:	2207      	movs	r2, #7
 800d654:	1b55      	subs	r5, r2, r5
 800d656:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800d658:	2314      	movs	r3, #20
 800d65a:	434b      	muls	r3, r1
 800d65c:	4a13      	ldr	r2, [pc, #76]	; (800d6ac <vTaskPrioritySet+0xa0>)
 800d65e:	189b      	adds	r3, r3, r2
 800d660:	6962      	ldr	r2, [r4, #20]
 800d662:	429a      	cmp	r2, r3
 800d664:	d111      	bne.n	800d68a <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800d666:	1d25      	adds	r5, r4, #4
 800d668:	0028      	movs	r0, r5
 800d66a:	f7ff fad4 	bl	800cc16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d66e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d670:	4a0f      	ldr	r2, [pc, #60]	; (800d6b0 <vTaskPrioritySet+0xa4>)
 800d672:	6812      	ldr	r2, [r2, #0]
 800d674:	4293      	cmp	r3, r2
 800d676:	d901      	bls.n	800d67c <vTaskPrioritySet+0x70>
 800d678:	4a0d      	ldr	r2, [pc, #52]	; (800d6b0 <vTaskPrioritySet+0xa4>)
 800d67a:	6013      	str	r3, [r2, #0]
 800d67c:	2014      	movs	r0, #20
 800d67e:	4358      	muls	r0, r3
 800d680:	4b0a      	ldr	r3, [pc, #40]	; (800d6ac <vTaskPrioritySet+0xa0>)
 800d682:	18c0      	adds	r0, r0, r3
 800d684:	0029      	movs	r1, r5
 800d686:	f7ff faa3 	bl	800cbd0 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 800d68a:	2e01      	cmp	r6, #1
 800d68c:	d101      	bne.n	800d692 <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800d68e:	f000 ff6b 	bl	800e568 <vPortYield>
		taskEXIT_CRITICAL();
 800d692:	f000 ff81 	bl	800e598 <vPortExitCritical>
	}
 800d696:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 800d698:	4b03      	ldr	r3, [pc, #12]	; (800d6a8 <vTaskPrioritySet+0x9c>)
 800d69a:	681e      	ldr	r6, [r3, #0]
 800d69c:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800d69e:	4273      	negs	r3, r6
 800d6a0:	415e      	adcs	r6, r3
 800d6a2:	e7ce      	b.n	800d642 <vTaskPrioritySet+0x36>
	BaseType_t xYieldRequired = pdFALSE;
 800d6a4:	2600      	movs	r6, #0
 800d6a6:	e7cc      	b.n	800d642 <vTaskPrioritySet+0x36>
 800d6a8:	20001d20 	.word	0x20001d20
 800d6ac:	20001d2c 	.word	0x20001d2c
 800d6b0:	20001dd0 	.word	0x20001dd0

0800d6b4 <vTaskStartScheduler>:
{
 800d6b4:	b500      	push	{lr}
 800d6b6:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	9303      	str	r3, [sp, #12]
 800d6bc:	9302      	str	r3, [sp, #8]
 800d6be:	9301      	str	r3, [sp, #4]
 800d6c0:	9300      	str	r3, [sp, #0]
 800d6c2:	22a0      	movs	r2, #160	; 0xa0
 800d6c4:	490d      	ldr	r1, [pc, #52]	; (800d6fc <vTaskStartScheduler+0x48>)
 800d6c6:	480e      	ldr	r0, [pc, #56]	; (800d700 <vTaskStartScheduler+0x4c>)
 800d6c8:	f7ff fe9c 	bl	800d404 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800d6cc:	2801      	cmp	r0, #1
 800d6ce:	d003      	beq.n	800d6d8 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800d6d0:	2800      	cmp	r0, #0
 800d6d2:	d110      	bne.n	800d6f6 <vTaskStartScheduler+0x42>
 800d6d4:	b672      	cpsid	i
 800d6d6:	e7fe      	b.n	800d6d6 <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800d6d8:	f000 fd68 	bl	800e1ac <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800d6dc:	2801      	cmp	r0, #1
 800d6de:	d1f7      	bne.n	800d6d0 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800d6e0:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800d6e2:	4b08      	ldr	r3, [pc, #32]	; (800d704 <vTaskStartScheduler+0x50>)
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800d6e8:	4b07      	ldr	r3, [pc, #28]	; (800d708 <vTaskStartScheduler+0x54>)
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800d6ee:	f7fa f85d 	bl	80077ac <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800d6f2:	f000 ff0f 	bl	800e514 <xPortStartScheduler>
}
 800d6f6:	b005      	add	sp, #20
 800d6f8:	bd00      	pop	{pc}
 800d6fa:	46c0      	nop			; (mov r8, r8)
 800d6fc:	08018d5c 	.word	0x08018d5c
 800d700:	0800d975 	.word	0x0800d975
 800d704:	20001e14 	.word	0x20001e14
 800d708:	20001e40 	.word	0x20001e40

0800d70c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d70c:	4a02      	ldr	r2, [pc, #8]	; (800d718 <vTaskSuspendAll+0xc>)
 800d70e:	6813      	ldr	r3, [r2, #0]
 800d710:	3301      	adds	r3, #1
 800d712:	6013      	str	r3, [r2, #0]
}
 800d714:	4770      	bx	lr
 800d716:	46c0      	nop			; (mov r8, r8)
 800d718:	20001dc4 	.word	0x20001dc4

0800d71c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800d71c:	4b01      	ldr	r3, [pc, #4]	; (800d724 <xTaskGetTickCount+0x8>)
 800d71e:	6818      	ldr	r0, [r3, #0]
}
 800d720:	4770      	bx	lr
 800d722:	46c0      	nop			; (mov r8, r8)
 800d724:	20001e40 	.word	0x20001e40

0800d728 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800d728:	4b01      	ldr	r3, [pc, #4]	; (800d730 <xTaskGetTickCountFromISR+0x8>)
 800d72a:	6818      	ldr	r0, [r3, #0]
}
 800d72c:	4770      	bx	lr
 800d72e:	46c0      	nop			; (mov r8, r8)
 800d730:	20001e40 	.word	0x20001e40

0800d734 <xTaskIncrementTick>:
{
 800d734:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d736:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d738:	4b39      	ldr	r3, [pc, #228]	; (800d820 <xTaskIncrementTick+0xec>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d161      	bne.n	800d804 <xTaskIncrementTick+0xd0>
		++xTickCount;
 800d740:	4b38      	ldr	r3, [pc, #224]	; (800d824 <xTaskIncrementTick+0xf0>)
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	3201      	adds	r2, #1
 800d746:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800d748:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800d74a:	2e00      	cmp	r6, #0
 800d74c:	d112      	bne.n	800d774 <xTaskIncrementTick+0x40>
				taskSWITCH_DELAYED_LISTS();
 800d74e:	4b36      	ldr	r3, [pc, #216]	; (800d828 <xTaskIncrementTick+0xf4>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d001      	beq.n	800d75c <xTaskIncrementTick+0x28>
 800d758:	b672      	cpsid	i
 800d75a:	e7fe      	b.n	800d75a <xTaskIncrementTick+0x26>
 800d75c:	4a32      	ldr	r2, [pc, #200]	; (800d828 <xTaskIncrementTick+0xf4>)
 800d75e:	6811      	ldr	r1, [r2, #0]
 800d760:	4b32      	ldr	r3, [pc, #200]	; (800d82c <xTaskIncrementTick+0xf8>)
 800d762:	6818      	ldr	r0, [r3, #0]
 800d764:	6010      	str	r0, [r2, #0]
 800d766:	6019      	str	r1, [r3, #0]
 800d768:	4a31      	ldr	r2, [pc, #196]	; (800d830 <xTaskIncrementTick+0xfc>)
 800d76a:	6813      	ldr	r3, [r2, #0]
 800d76c:	3301      	adds	r3, #1
 800d76e:	6013      	str	r3, [r2, #0]
 800d770:	f7ff fdf0 	bl	800d354 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800d774:	4b2f      	ldr	r3, [pc, #188]	; (800d834 <xTaskIncrementTick+0x100>)
 800d776:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800d778:	2700      	movs	r7, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800d77a:	42b3      	cmp	r3, r6
 800d77c:	d833      	bhi.n	800d7e6 <xTaskIncrementTick+0xb2>
BaseType_t xSwitchRequired = pdFALSE;
 800d77e:	2700      	movs	r7, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d780:	4d29      	ldr	r5, [pc, #164]	; (800d828 <xTaskIncrementTick+0xf4>)
 800d782:	682b      	ldr	r3, [r5, #0]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d029      	beq.n	800d7de <xTaskIncrementTick+0xaa>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d78a:	4b27      	ldr	r3, [pc, #156]	; (800d828 <xTaskIncrementTick+0xf4>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800d792:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800d794:	429e      	cmp	r6, r3
 800d796:	d332      	bcc.n	800d7fe <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800d798:	1d23      	adds	r3, r4, #4
 800d79a:	9301      	str	r3, [sp, #4]
 800d79c:	0018      	movs	r0, r3
 800d79e:	f7ff fa3a 	bl	800cc16 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d7a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d003      	beq.n	800d7b0 <xTaskIncrementTick+0x7c>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7a8:	0020      	movs	r0, r4
 800d7aa:	3018      	adds	r0, #24
 800d7ac:	f7ff fa33 	bl	800cc16 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800d7b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d7b2:	4a21      	ldr	r2, [pc, #132]	; (800d838 <xTaskIncrementTick+0x104>)
 800d7b4:	6812      	ldr	r2, [r2, #0]
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d901      	bls.n	800d7be <xTaskIncrementTick+0x8a>
 800d7ba:	4a1f      	ldr	r2, [pc, #124]	; (800d838 <xTaskIncrementTick+0x104>)
 800d7bc:	6013      	str	r3, [r2, #0]
 800d7be:	0098      	lsls	r0, r3, #2
 800d7c0:	18c0      	adds	r0, r0, r3
 800d7c2:	0080      	lsls	r0, r0, #2
 800d7c4:	4b1d      	ldr	r3, [pc, #116]	; (800d83c <xTaskIncrementTick+0x108>)
 800d7c6:	18c0      	adds	r0, r0, r3
 800d7c8:	9901      	ldr	r1, [sp, #4]
 800d7ca:	f7ff fa01 	bl	800cbd0 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d7ce:	4b1c      	ldr	r3, [pc, #112]	; (800d840 <xTaskIncrementTick+0x10c>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d3d3      	bcc.n	800d782 <xTaskIncrementTick+0x4e>
								xSwitchRequired = pdTRUE;
 800d7da:	2701      	movs	r7, #1
 800d7dc:	e7d1      	b.n	800d782 <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800d7de:	4b15      	ldr	r3, [pc, #84]	; (800d834 <xTaskIncrementTick+0x100>)
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	4252      	negs	r2, r2
 800d7e4:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d7e6:	4b16      	ldr	r3, [pc, #88]	; (800d840 <xTaskIncrementTick+0x10c>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ec:	0093      	lsls	r3, r2, #2
 800d7ee:	189b      	adds	r3, r3, r2
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	4a12      	ldr	r2, [pc, #72]	; (800d83c <xTaskIncrementTick+0x108>)
 800d7f4:	589b      	ldr	r3, [r3, r2]
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d909      	bls.n	800d80e <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 800d7fa:	2701      	movs	r7, #1
 800d7fc:	e007      	b.n	800d80e <xTaskIncrementTick+0xda>
							xNextTaskUnblockTime = xItemValue;
 800d7fe:	4a0d      	ldr	r2, [pc, #52]	; (800d834 <xTaskIncrementTick+0x100>)
 800d800:	6013      	str	r3, [r2, #0]
							break;
 800d802:	e7f0      	b.n	800d7e6 <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
 800d804:	4a0f      	ldr	r2, [pc, #60]	; (800d844 <xTaskIncrementTick+0x110>)
 800d806:	6813      	ldr	r3, [r2, #0]
 800d808:	3301      	adds	r3, #1
 800d80a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800d80c:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800d80e:	4b0e      	ldr	r3, [pc, #56]	; (800d848 <xTaskIncrementTick+0x114>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d000      	beq.n	800d818 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 800d816:	2701      	movs	r7, #1
}
 800d818:	0038      	movs	r0, r7
 800d81a:	b003      	add	sp, #12
 800d81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d81e:	46c0      	nop			; (mov r8, r8)
 800d820:	20001dc4 	.word	0x20001dc4
 800d824:	20001e40 	.word	0x20001e40
 800d828:	20001d24 	.word	0x20001d24
 800d82c:	20001d28 	.word	0x20001d28
 800d830:	20001dfc 	.word	0x20001dfc
 800d834:	200000a0 	.word	0x200000a0
 800d838:	20001dd0 	.word	0x20001dd0
 800d83c:	20001d2c 	.word	0x20001d2c
 800d840:	20001d20 	.word	0x20001d20
 800d844:	20001dc0 	.word	0x20001dc0
 800d848:	20001e44 	.word	0x20001e44

0800d84c <xTaskResumeAll>:
{
 800d84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800d84e:	4b2f      	ldr	r3, [pc, #188]	; (800d90c <xTaskResumeAll+0xc0>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d101      	bne.n	800d85a <xTaskResumeAll+0xe>
 800d856:	b672      	cpsid	i
 800d858:	e7fe      	b.n	800d858 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800d85a:	f000 fe91 	bl	800e580 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d85e:	4b2b      	ldr	r3, [pc, #172]	; (800d90c <xTaskResumeAll+0xc0>)
 800d860:	681a      	ldr	r2, [r3, #0]
 800d862:	3a01      	subs	r2, #1
 800d864:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d866:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800d868:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d86a:	42a3      	cmp	r3, r4
 800d86c:	d105      	bne.n	800d87a <xTaskResumeAll+0x2e>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d86e:	4b28      	ldr	r3, [pc, #160]	; (800d910 <xTaskResumeAll+0xc4>)
 800d870:	681b      	ldr	r3, [r3, #0]
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d872:	4d28      	ldr	r5, [pc, #160]	; (800d914 <xTaskResumeAll+0xc8>)
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d874:	42a3      	cmp	r3, r4
 800d876:	d12a      	bne.n	800d8ce <xTaskResumeAll+0x82>
BaseType_t xAlreadyYielded = pdFALSE;
 800d878:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d87a:	f000 fe8d 	bl	800e598 <vPortExitCritical>
}
 800d87e:	0020      	movs	r0, r4
 800d880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
 800d882:	0098      	lsls	r0, r3, #2
 800d884:	18c0      	adds	r0, r0, r3
 800d886:	0080      	lsls	r0, r0, #2
 800d888:	4b23      	ldr	r3, [pc, #140]	; (800d918 <xTaskResumeAll+0xcc>)
 800d88a:	18c0      	adds	r0, r0, r3
 800d88c:	0021      	movs	r1, r4
 800d88e:	f7ff f99f 	bl	800cbd0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d892:	4b22      	ldr	r3, [pc, #136]	; (800d91c <xTaskResumeAll+0xd0>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d214      	bcs.n	800d8c8 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d89e:	6833      	ldr	r3, [r6, #0]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d016      	beq.n	800d8d2 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d8a4:	68eb      	ldr	r3, [r5, #12]
 800d8a6:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d8a8:	0038      	movs	r0, r7
 800d8aa:	3018      	adds	r0, #24
 800d8ac:	f7ff f9b3 	bl	800cc16 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800d8b0:	1d3c      	adds	r4, r7, #4
 800d8b2:	0020      	movs	r0, r4
 800d8b4:	f7ff f9af 	bl	800cc16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ba:	4a19      	ldr	r2, [pc, #100]	; (800d920 <xTaskResumeAll+0xd4>)
 800d8bc:	6812      	ldr	r2, [r2, #0]
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d9df      	bls.n	800d882 <xTaskResumeAll+0x36>
 800d8c2:	4a17      	ldr	r2, [pc, #92]	; (800d920 <xTaskResumeAll+0xd4>)
 800d8c4:	6013      	str	r3, [r2, #0]
 800d8c6:	e7dc      	b.n	800d882 <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
 800d8c8:	4b16      	ldr	r3, [pc, #88]	; (800d924 <xTaskResumeAll+0xd8>)
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d8ce:	4e11      	ldr	r6, [pc, #68]	; (800d914 <xTaskResumeAll+0xc8>)
 800d8d0:	e7e5      	b.n	800d89e <xTaskResumeAll+0x52>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800d8d2:	4b15      	ldr	r3, [pc, #84]	; (800d928 <xTaskResumeAll+0xdc>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d005      	beq.n	800d8e6 <xTaskResumeAll+0x9a>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800d8da:	4e13      	ldr	r6, [pc, #76]	; (800d928 <xTaskResumeAll+0xdc>)
							xYieldPending = pdTRUE;
 800d8dc:	4c11      	ldr	r4, [pc, #68]	; (800d924 <xTaskResumeAll+0xd8>)
 800d8de:	2501      	movs	r5, #1
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800d8e0:	6833      	ldr	r3, [r6, #0]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d108      	bne.n	800d8f8 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
 800d8e6:	4b0f      	ldr	r3, [pc, #60]	; (800d924 <xTaskResumeAll+0xd8>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800d8ea:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d1c4      	bne.n	800d87a <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800d8f0:	f000 fe3a 	bl	800e568 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800d8f4:	3401      	adds	r4, #1
 800d8f6:	e7c0      	b.n	800d87a <xTaskResumeAll+0x2e>
						if( xTaskIncrementTick() != pdFALSE )
 800d8f8:	f7ff ff1c 	bl	800d734 <xTaskIncrementTick>
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	d000      	beq.n	800d902 <xTaskResumeAll+0xb6>
							xYieldPending = pdTRUE;
 800d900:	6025      	str	r5, [r4, #0]
						--uxPendedTicks;
 800d902:	4a09      	ldr	r2, [pc, #36]	; (800d928 <xTaskResumeAll+0xdc>)
 800d904:	6813      	ldr	r3, [r2, #0]
 800d906:	3b01      	subs	r3, #1
 800d908:	6013      	str	r3, [r2, #0]
 800d90a:	e7e9      	b.n	800d8e0 <xTaskResumeAll+0x94>
 800d90c:	20001dc4 	.word	0x20001dc4
 800d910:	20001dbc 	.word	0x20001dbc
 800d914:	20001e00 	.word	0x20001e00
 800d918:	20001d2c 	.word	0x20001d2c
 800d91c:	20001d20 	.word	0x20001d20
 800d920:	20001dd0 	.word	0x20001dd0
 800d924:	20001e44 	.word	0x20001e44
 800d928:	20001dc0 	.word	0x20001dc0

0800d92c <vTaskDelay>:
	{
 800d92c:	b570      	push	{r4, r5, r6, lr}
 800d92e:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d930:	d016      	beq.n	800d960 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800d932:	4b0d      	ldr	r3, [pc, #52]	; (800d968 <vTaskDelay+0x3c>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d001      	beq.n	800d93e <vTaskDelay+0x12>
 800d93a:	b672      	cpsid	i
 800d93c:	e7fe      	b.n	800d93c <vTaskDelay+0x10>
			vTaskSuspendAll();
 800d93e:	f7ff fee5 	bl	800d70c <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800d942:	4b0a      	ldr	r3, [pc, #40]	; (800d96c <vTaskDelay+0x40>)
 800d944:	681c      	ldr	r4, [r3, #0]
 800d946:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800d948:	4b09      	ldr	r3, [pc, #36]	; (800d970 <vTaskDelay+0x44>)
 800d94a:	6818      	ldr	r0, [r3, #0]
 800d94c:	3004      	adds	r0, #4
 800d94e:	f7ff f962 	bl	800cc16 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800d952:	0020      	movs	r0, r4
 800d954:	f7ff fd14 	bl	800d380 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800d958:	f7ff ff78 	bl	800d84c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800d95c:	2800      	cmp	r0, #0
 800d95e:	d101      	bne.n	800d964 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800d960:	f000 fe02 	bl	800e568 <vPortYield>
	}
 800d964:	bd70      	pop	{r4, r5, r6, pc}
 800d966:	46c0      	nop			; (mov r8, r8)
 800d968:	20001dc4 	.word	0x20001dc4
 800d96c:	20001e40 	.word	0x20001e40
 800d970:	20001d20 	.word	0x20001d20

0800d974 <prvIdleTask>:
{
 800d974:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800d976:	4d16      	ldr	r5, [pc, #88]	; (800d9d0 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800d978:	4e16      	ldr	r6, [pc, #88]	; (800d9d4 <prvIdleTask+0x60>)
 800d97a:	e003      	b.n	800d984 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d97c:	4b16      	ldr	r3, [pc, #88]	; (800d9d8 <prvIdleTask+0x64>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	2b01      	cmp	r3, #1
 800d982:	d822      	bhi.n	800d9ca <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800d984:	682b      	ldr	r3, [r5, #0]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d0f8      	beq.n	800d97c <prvIdleTask+0x8>
			vTaskSuspendAll();
 800d98a:	f7ff febf 	bl	800d70c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800d98e:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800d990:	f7ff ff5c 	bl	800d84c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800d994:	2c00      	cmp	r4, #0
 800d996:	d0f5      	beq.n	800d984 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800d998:	f000 fdf2 	bl	800e580 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d99c:	4b0d      	ldr	r3, [pc, #52]	; (800d9d4 <prvIdleTask+0x60>)
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800d9a2:	1d20      	adds	r0, r4, #4
 800d9a4:	f7ff f937 	bl	800cc16 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800d9a8:	4a0c      	ldr	r2, [pc, #48]	; (800d9dc <prvIdleTask+0x68>)
 800d9aa:	6813      	ldr	r3, [r2, #0]
 800d9ac:	3b01      	subs	r3, #1
 800d9ae:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800d9b0:	4a07      	ldr	r2, [pc, #28]	; (800d9d0 <prvIdleTask+0x5c>)
 800d9b2:	6813      	ldr	r3, [r2, #0]
 800d9b4:	3b01      	subs	r3, #1
 800d9b6:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800d9b8:	f000 fdee 	bl	800e598 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800d9bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d9be:	f000 fef7 	bl	800e7b0 <vPortFree>
		vPortFree( pxTCB );
 800d9c2:	0020      	movs	r0, r4
 800d9c4:	f000 fef4 	bl	800e7b0 <vPortFree>
 800d9c8:	e7dc      	b.n	800d984 <prvIdleTask+0x10>
				taskYIELD();
 800d9ca:	f000 fdcd 	bl	800e568 <vPortYield>
 800d9ce:	e7d9      	b.n	800d984 <prvIdleTask+0x10>
 800d9d0:	20001dcc 	.word	0x20001dcc
 800d9d4:	20001e2c 	.word	0x20001e2c
 800d9d8:	20001d2c 	.word	0x20001d2c
 800d9dc:	20001dbc 	.word	0x20001dbc

0800d9e0 <uxTaskGetSystemState>:
	{
 800d9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9e2:	46c6      	mov	lr, r8
 800d9e4:	b500      	push	{lr}
 800d9e6:	0006      	movs	r6, r0
 800d9e8:	000d      	movs	r5, r1
 800d9ea:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800d9ec:	f7ff fe8e 	bl	800d70c <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800d9f0:	4b1e      	ldr	r3, [pc, #120]	; (800da6c <uxTaskGetSystemState+0x8c>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800d9f4:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800d9f6:	42ab      	cmp	r3, r5
 800d9f8:	d831      	bhi.n	800da5e <uxTaskGetSystemState+0x7e>
 800d9fa:	4d1d      	ldr	r5, [pc, #116]	; (800da70 <uxTaskGetSystemState+0x90>)
 800d9fc:	002f      	movs	r7, r5
 800d9fe:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800da00:	0160      	lsls	r0, r4, #5
 800da02:	1830      	adds	r0, r6, r0
 800da04:	2201      	movs	r2, #1
 800da06:	0029      	movs	r1, r5
 800da08:	f7ff fc50 	bl	800d2ac <prvListTaskWithinSingleList>
 800da0c:	1824      	adds	r4, r4, r0
 800da0e:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da10:	42bd      	cmp	r5, r7
 800da12:	d1f5      	bne.n	800da00 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800da14:	4b17      	ldr	r3, [pc, #92]	; (800da74 <uxTaskGetSystemState+0x94>)
 800da16:	6819      	ldr	r1, [r3, #0]
 800da18:	0160      	lsls	r0, r4, #5
 800da1a:	1830      	adds	r0, r6, r0
 800da1c:	2202      	movs	r2, #2
 800da1e:	f7ff fc45 	bl	800d2ac <prvListTaskWithinSingleList>
 800da22:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800da24:	4b14      	ldr	r3, [pc, #80]	; (800da78 <uxTaskGetSystemState+0x98>)
 800da26:	6819      	ldr	r1, [r3, #0]
 800da28:	0160      	lsls	r0, r4, #5
 800da2a:	1830      	adds	r0, r6, r0
 800da2c:	2202      	movs	r2, #2
 800da2e:	f7ff fc3d 	bl	800d2ac <prvListTaskWithinSingleList>
 800da32:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800da34:	0160      	lsls	r0, r4, #5
 800da36:	1830      	adds	r0, r6, r0
 800da38:	2204      	movs	r2, #4
 800da3a:	4910      	ldr	r1, [pc, #64]	; (800da7c <uxTaskGetSystemState+0x9c>)
 800da3c:	f7ff fc36 	bl	800d2ac <prvListTaskWithinSingleList>
 800da40:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800da42:	0160      	lsls	r0, r4, #5
 800da44:	1830      	adds	r0, r6, r0
 800da46:	2203      	movs	r2, #3
 800da48:	490d      	ldr	r1, [pc, #52]	; (800da80 <uxTaskGetSystemState+0xa0>)
 800da4a:	f7ff fc2f 	bl	800d2ac <prvListTaskWithinSingleList>
 800da4e:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800da50:	4643      	mov	r3, r8
 800da52:	2b00      	cmp	r3, #0
 800da54:	d003      	beq.n	800da5e <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800da56:	f7f9 feb9 	bl	80077cc <ulMainGetRunTimeCounterValue>
 800da5a:	4643      	mov	r3, r8
 800da5c:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800da5e:	f7ff fef5 	bl	800d84c <xTaskResumeAll>
	}
 800da62:	0020      	movs	r0, r4
 800da64:	bc04      	pop	{r2}
 800da66:	4690      	mov	r8, r2
 800da68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da6a:	46c0      	nop			; (mov r8, r8)
 800da6c:	20001dbc 	.word	0x20001dbc
 800da70:	20001da4 	.word	0x20001da4
 800da74:	20001d24 	.word	0x20001d24
 800da78:	20001d28 	.word	0x20001d28
 800da7c:	20001e2c 	.word	0x20001e2c
 800da80:	20001e18 	.word	0x20001e18

0800da84 <vTaskSwitchContext>:
{
 800da84:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800da86:	4b3a      	ldr	r3, [pc, #232]	; (800db70 <vTaskSwitchContext+0xec>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d003      	beq.n	800da96 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800da8e:	4b39      	ldr	r3, [pc, #228]	; (800db74 <vTaskSwitchContext+0xf0>)
 800da90:	2201      	movs	r2, #1
 800da92:	601a      	str	r2, [r3, #0]
}
 800da94:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800da96:	4b37      	ldr	r3, [pc, #220]	; (800db74 <vTaskSwitchContext+0xf0>)
 800da98:	2200      	movs	r2, #0
 800da9a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800da9c:	f7f9 fe96 	bl	80077cc <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800daa0:	4b35      	ldr	r3, [pc, #212]	; (800db78 <vTaskSwitchContext+0xf4>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4298      	cmp	r0, r3
 800daa6:	d905      	bls.n	800dab4 <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800daa8:	4a34      	ldr	r2, [pc, #208]	; (800db7c <vTaskSwitchContext+0xf8>)
 800daaa:	6812      	ldr	r2, [r2, #0]
 800daac:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800daae:	1acb      	subs	r3, r1, r3
 800dab0:	181b      	adds	r3, r3, r0
 800dab2:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800dab4:	4b30      	ldr	r3, [pc, #192]	; (800db78 <vTaskSwitchContext+0xf4>)
 800dab6:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800dab8:	4b30      	ldr	r3, [pc, #192]	; (800db7c <vTaskSwitchContext+0xf8>)
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	6812      	ldr	r2, [r2, #0]
 800dac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d805      	bhi.n	800dad2 <vTaskSwitchContext+0x4e>
 800dac6:	4b2d      	ldr	r3, [pc, #180]	; (800db7c <vTaskSwitchContext+0xf8>)
 800dac8:	6818      	ldr	r0, [r3, #0]
 800daca:	6819      	ldr	r1, [r3, #0]
 800dacc:	3134      	adds	r1, #52	; 0x34
 800dace:	f7fe f9af 	bl	800be30 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800dad2:	4b2a      	ldr	r3, [pc, #168]	; (800db7c <vTaskSwitchContext+0xf8>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dad8:	2214      	movs	r2, #20
 800dada:	4929      	ldr	r1, [pc, #164]	; (800db80 <vTaskSwitchContext+0xfc>)
 800dadc:	f003 ffac 	bl	8011a38 <memcmp>
 800dae0:	2800      	cmp	r0, #0
 800dae2:	d005      	beq.n	800daf0 <vTaskSwitchContext+0x6c>
 800dae4:	4b25      	ldr	r3, [pc, #148]	; (800db7c <vTaskSwitchContext+0xf8>)
 800dae6:	6818      	ldr	r0, [r3, #0]
 800dae8:	6819      	ldr	r1, [r3, #0]
 800daea:	3134      	adds	r1, #52	; 0x34
 800daec:	f7fe f9a0 	bl	800be30 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800daf0:	4b24      	ldr	r3, [pc, #144]	; (800db84 <vTaskSwitchContext+0x100>)
 800daf2:	681a      	ldr	r2, [r3, #0]
 800daf4:	0093      	lsls	r3, r2, #2
 800daf6:	189b      	adds	r3, r3, r2
 800daf8:	009b      	lsls	r3, r3, #2
 800dafa:	4a23      	ldr	r2, [pc, #140]	; (800db88 <vTaskSwitchContext+0x104>)
 800dafc:	589b      	ldr	r3, [r3, r2]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d115      	bne.n	800db2e <vTaskSwitchContext+0xaa>
 800db02:	4b20      	ldr	r3, [pc, #128]	; (800db84 <vTaskSwitchContext+0x100>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00f      	beq.n	800db2a <vTaskSwitchContext+0xa6>
 800db0a:	4a1e      	ldr	r2, [pc, #120]	; (800db84 <vTaskSwitchContext+0x100>)
 800db0c:	4c1e      	ldr	r4, [pc, #120]	; (800db88 <vTaskSwitchContext+0x104>)
 800db0e:	0010      	movs	r0, r2
 800db10:	6813      	ldr	r3, [r2, #0]
 800db12:	3b01      	subs	r3, #1
 800db14:	6013      	str	r3, [r2, #0]
 800db16:	6811      	ldr	r1, [r2, #0]
 800db18:	008b      	lsls	r3, r1, #2
 800db1a:	185b      	adds	r3, r3, r1
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	591b      	ldr	r3, [r3, r4]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d104      	bne.n	800db2e <vTaskSwitchContext+0xaa>
 800db24:	6803      	ldr	r3, [r0, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d1f2      	bne.n	800db10 <vTaskSwitchContext+0x8c>
 800db2a:	b672      	cpsid	i
 800db2c:	e7fe      	b.n	800db2c <vTaskSwitchContext+0xa8>
 800db2e:	4b15      	ldr	r3, [pc, #84]	; (800db84 <vTaskSwitchContext+0x100>)
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	4c15      	ldr	r4, [pc, #84]	; (800db88 <vTaskSwitchContext+0x104>)
 800db34:	0093      	lsls	r3, r2, #2
 800db36:	1899      	adds	r1, r3, r2
 800db38:	0089      	lsls	r1, r1, #2
 800db3a:	1861      	adds	r1, r4, r1
 800db3c:	6848      	ldr	r0, [r1, #4]
 800db3e:	6840      	ldr	r0, [r0, #4]
 800db40:	6048      	str	r0, [r1, #4]
 800db42:	189b      	adds	r3, r3, r2
 800db44:	009b      	lsls	r3, r3, #2
 800db46:	3308      	adds	r3, #8
 800db48:	191b      	adds	r3, r3, r4
 800db4a:	4298      	cmp	r0, r3
 800db4c:	d009      	beq.n	800db62 <vTaskSwitchContext+0xde>
 800db4e:	0093      	lsls	r3, r2, #2
 800db50:	189a      	adds	r2, r3, r2
 800db52:	0092      	lsls	r2, r2, #2
 800db54:	4b0c      	ldr	r3, [pc, #48]	; (800db88 <vTaskSwitchContext+0x104>)
 800db56:	189a      	adds	r2, r3, r2
 800db58:	6853      	ldr	r3, [r2, #4]
 800db5a:	68da      	ldr	r2, [r3, #12]
 800db5c:	4b07      	ldr	r3, [pc, #28]	; (800db7c <vTaskSwitchContext+0xf8>)
 800db5e:	601a      	str	r2, [r3, #0]
}
 800db60:	e798      	b.n	800da94 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800db62:	6840      	ldr	r0, [r0, #4]
 800db64:	2114      	movs	r1, #20
 800db66:	4351      	muls	r1, r2
 800db68:	1863      	adds	r3, r4, r1
 800db6a:	6058      	str	r0, [r3, #4]
 800db6c:	e7ef      	b.n	800db4e <vTaskSwitchContext+0xca>
 800db6e:	46c0      	nop			; (mov r8, r8)
 800db70:	20001dc4 	.word	0x20001dc4
 800db74:	20001e44 	.word	0x20001e44
 800db78:	20001db8 	.word	0x20001db8
 800db7c:	20001d20 	.word	0x20001d20
 800db80:	08018d20 	.word	0x08018d20
 800db84:	20001dd0 	.word	0x20001dd0
 800db88:	20001d2c 	.word	0x20001d2c

0800db8c <vTaskPlaceOnEventList>:
{
 800db8c:	b570      	push	{r4, r5, r6, lr}
 800db8e:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800db90:	2800      	cmp	r0, #0
 800db92:	d101      	bne.n	800db98 <vTaskPlaceOnEventList+0xc>
 800db94:	b672      	cpsid	i
 800db96:	e7fe      	b.n	800db96 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800db98:	4d0b      	ldr	r5, [pc, #44]	; (800dbc8 <vTaskPlaceOnEventList+0x3c>)
 800db9a:	6829      	ldr	r1, [r5, #0]
 800db9c:	3118      	adds	r1, #24
 800db9e:	f7ff f823 	bl	800cbe8 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800dba2:	6828      	ldr	r0, [r5, #0]
 800dba4:	3004      	adds	r0, #4
 800dba6:	f7ff f836 	bl	800cc16 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800dbaa:	1c63      	adds	r3, r4, #1
 800dbac:	d005      	beq.n	800dbba <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800dbae:	4b07      	ldr	r3, [pc, #28]	; (800dbcc <vTaskPlaceOnEventList+0x40>)
 800dbb0:	6818      	ldr	r0, [r3, #0]
 800dbb2:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800dbb4:	f7ff fbe4 	bl	800d380 <prvAddCurrentTaskToDelayedList>
}
 800dbb8:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800dbba:	4b03      	ldr	r3, [pc, #12]	; (800dbc8 <vTaskPlaceOnEventList+0x3c>)
 800dbbc:	6819      	ldr	r1, [r3, #0]
 800dbbe:	3104      	adds	r1, #4
 800dbc0:	4803      	ldr	r0, [pc, #12]	; (800dbd0 <vTaskPlaceOnEventList+0x44>)
 800dbc2:	f7ff f805 	bl	800cbd0 <vListInsertEnd>
 800dbc6:	e7f7      	b.n	800dbb8 <vTaskPlaceOnEventList+0x2c>
 800dbc8:	20001d20 	.word	0x20001d20
 800dbcc:	20001e40 	.word	0x20001e40
 800dbd0:	20001e18 	.word	0x20001e18

0800dbd4 <vTaskPlaceOnEventListRestricted>:
	{
 800dbd4:	b570      	push	{r4, r5, r6, lr}
 800dbd6:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	d101      	bne.n	800dbe0 <vTaskPlaceOnEventListRestricted+0xc>
 800dbdc:	b672      	cpsid	i
 800dbde:	e7fe      	b.n	800dbde <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dbe0:	4c07      	ldr	r4, [pc, #28]	; (800dc00 <vTaskPlaceOnEventListRestricted+0x2c>)
 800dbe2:	6821      	ldr	r1, [r4, #0]
 800dbe4:	3118      	adds	r1, #24
 800dbe6:	f7fe fff3 	bl	800cbd0 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800dbea:	6820      	ldr	r0, [r4, #0]
 800dbec:	3004      	adds	r0, #4
 800dbee:	f7ff f812 	bl	800cc16 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800dbf2:	4b04      	ldr	r3, [pc, #16]	; (800dc04 <vTaskPlaceOnEventListRestricted+0x30>)
 800dbf4:	6818      	ldr	r0, [r3, #0]
 800dbf6:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800dbf8:	f7ff fbc2 	bl	800d380 <prvAddCurrentTaskToDelayedList>
	}
 800dbfc:	bd70      	pop	{r4, r5, r6, pc}
 800dbfe:	46c0      	nop			; (mov r8, r8)
 800dc00:	20001d20 	.word	0x20001d20
 800dc04:	20001e40 	.word	0x20001e40

0800dc08 <xTaskRemoveFromEventList>:
{
 800dc08:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800dc0a:	68c3      	ldr	r3, [r0, #12]
 800dc0c:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800dc0e:	2d00      	cmp	r5, #0
 800dc10:	d101      	bne.n	800dc16 <xTaskRemoveFromEventList+0xe>
 800dc12:	b672      	cpsid	i
 800dc14:	e7fe      	b.n	800dc14 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc16:	002c      	movs	r4, r5
 800dc18:	3418      	adds	r4, #24
 800dc1a:	0020      	movs	r0, r4
 800dc1c:	f7fe fffb 	bl	800cc16 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc20:	4b13      	ldr	r3, [pc, #76]	; (800dc70 <xTaskRemoveFromEventList+0x68>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d11e      	bne.n	800dc66 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800dc28:	1d2c      	adds	r4, r5, #4
 800dc2a:	0020      	movs	r0, r4
 800dc2c:	f7fe fff3 	bl	800cc16 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc30:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800dc32:	4a10      	ldr	r2, [pc, #64]	; (800dc74 <xTaskRemoveFromEventList+0x6c>)
 800dc34:	6812      	ldr	r2, [r2, #0]
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d901      	bls.n	800dc3e <xTaskRemoveFromEventList+0x36>
 800dc3a:	4a0e      	ldr	r2, [pc, #56]	; (800dc74 <xTaskRemoveFromEventList+0x6c>)
 800dc3c:	6013      	str	r3, [r2, #0]
 800dc3e:	0098      	lsls	r0, r3, #2
 800dc40:	18c0      	adds	r0, r0, r3
 800dc42:	0080      	lsls	r0, r0, #2
 800dc44:	4b0c      	ldr	r3, [pc, #48]	; (800dc78 <xTaskRemoveFromEventList+0x70>)
 800dc46:	18c0      	adds	r0, r0, r3
 800dc48:	0021      	movs	r1, r4
 800dc4a:	f7fe ffc1 	bl	800cbd0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc4e:	4b0b      	ldr	r3, [pc, #44]	; (800dc7c <xTaskRemoveFromEventList+0x74>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800dc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800dc56:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d903      	bls.n	800dc64 <xTaskRemoveFromEventList+0x5c>
		xYieldPending = pdTRUE;
 800dc5c:	4b08      	ldr	r3, [pc, #32]	; (800dc80 <xTaskRemoveFromEventList+0x78>)
 800dc5e:	2201      	movs	r2, #1
 800dc60:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800dc62:	3001      	adds	r0, #1
}
 800dc64:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dc66:	0021      	movs	r1, r4
 800dc68:	4806      	ldr	r0, [pc, #24]	; (800dc84 <xTaskRemoveFromEventList+0x7c>)
 800dc6a:	f7fe ffb1 	bl	800cbd0 <vListInsertEnd>
 800dc6e:	e7ee      	b.n	800dc4e <xTaskRemoveFromEventList+0x46>
 800dc70:	20001dc4 	.word	0x20001dc4
 800dc74:	20001dd0 	.word	0x20001dd0
 800dc78:	20001d2c 	.word	0x20001d2c
 800dc7c:	20001d20 	.word	0x20001d20
 800dc80:	20001e44 	.word	0x20001e44
 800dc84:	20001e00 	.word	0x20001e00

0800dc88 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800dc88:	2800      	cmp	r0, #0
 800dc8a:	d006      	beq.n	800dc9a <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dc8c:	4b04      	ldr	r3, [pc, #16]	; (800dca0 <vTaskSetTimeOutState+0x18>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dc92:	4b04      	ldr	r3, [pc, #16]	; (800dca4 <vTaskSetTimeOutState+0x1c>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	6043      	str	r3, [r0, #4]
}
 800dc98:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800dc9a:	b672      	cpsid	i
 800dc9c:	e7fe      	b.n	800dc9c <vTaskSetTimeOutState+0x14>
 800dc9e:	46c0      	nop			; (mov r8, r8)
 800dca0:	20001dfc 	.word	0x20001dfc
 800dca4:	20001e40 	.word	0x20001e40

0800dca8 <xTaskCheckForTimeOut>:
{
 800dca8:	b570      	push	{r4, r5, r6, lr}
 800dcaa:	0004      	movs	r4, r0
 800dcac:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	d003      	beq.n	800dcba <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800dcb2:	2900      	cmp	r1, #0
 800dcb4:	d103      	bne.n	800dcbe <xTaskCheckForTimeOut+0x16>
 800dcb6:	b672      	cpsid	i
 800dcb8:	e7fe      	b.n	800dcb8 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 800dcba:	b672      	cpsid	i
 800dcbc:	e7fe      	b.n	800dcbc <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800dcbe:	f000 fc5f 	bl	800e580 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800dcc2:	4b10      	ldr	r3, [pc, #64]	; (800dd04 <xTaskCheckForTimeOut+0x5c>)
 800dcc4:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800dcc6:	6833      	ldr	r3, [r6, #0]
 800dcc8:	1c59      	adds	r1, r3, #1
 800dcca:	d019      	beq.n	800dd00 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dccc:	490e      	ldr	r1, [pc, #56]	; (800dd08 <xTaskCheckForTimeOut+0x60>)
 800dcce:	6809      	ldr	r1, [r1, #0]
 800dcd0:	6820      	ldr	r0, [r4, #0]
 800dcd2:	4288      	cmp	r0, r1
 800dcd4:	d003      	beq.n	800dcde <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800dcd6:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dcd8:	6861      	ldr	r1, [r4, #4]
 800dcda:	4291      	cmp	r1, r2
 800dcdc:	d904      	bls.n	800dce8 <xTaskCheckForTimeOut+0x40>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800dcde:	6861      	ldr	r1, [r4, #4]
 800dce0:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800dce2:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800dce4:	4283      	cmp	r3, r0
 800dce6:	d803      	bhi.n	800dcf0 <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
 800dce8:	f000 fc56 	bl	800e598 <vPortExitCritical>
}
 800dcec:	0028      	movs	r0, r5
 800dcee:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800dcf0:	1a9b      	subs	r3, r3, r2
 800dcf2:	185b      	adds	r3, r3, r1
 800dcf4:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800dcf6:	0020      	movs	r0, r4
 800dcf8:	f7ff ffc6 	bl	800dc88 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800dcfc:	2500      	movs	r5, #0
 800dcfe:	e7f3      	b.n	800dce8 <xTaskCheckForTimeOut+0x40>
				xReturn = pdFALSE;
 800dd00:	2500      	movs	r5, #0
 800dd02:	e7f1      	b.n	800dce8 <xTaskCheckForTimeOut+0x40>
 800dd04:	20001e40 	.word	0x20001e40
 800dd08:	20001dfc 	.word	0x20001dfc

0800dd0c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800dd0c:	4b01      	ldr	r3, [pc, #4]	; (800dd14 <vTaskMissedYield+0x8>)
 800dd0e:	2201      	movs	r2, #1
 800dd10:	601a      	str	r2, [r3, #0]
}
 800dd12:	4770      	bx	lr
 800dd14:	20001e44 	.word	0x20001e44

0800dd18 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800dd18:	4b05      	ldr	r3, [pc, #20]	; (800dd30 <xTaskGetSchedulerState+0x18>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dd1c:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d004      	beq.n	800dd2c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd22:	4b04      	ldr	r3, [pc, #16]	; (800dd34 <xTaskGetSchedulerState+0x1c>)
 800dd24:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800dd26:	4243      	negs	r3, r0
 800dd28:	4158      	adcs	r0, r3
 800dd2a:	0040      	lsls	r0, r0, #1
	}
 800dd2c:	4770      	bx	lr
 800dd2e:	46c0      	nop			; (mov r8, r8)
 800dd30:	20001e14 	.word	0x20001e14
 800dd34:	20001dc4 	.word	0x20001dc4

0800dd38 <vTaskPriorityInherit>:
	{
 800dd38:	b570      	push	{r4, r5, r6, lr}
 800dd3a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800dd3c:	d01a      	beq.n	800dd74 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dd3e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800dd40:	4b19      	ldr	r3, [pc, #100]	; (800dda8 <vTaskPriorityInherit+0x70>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d214      	bcs.n	800dd74 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd4a:	6983      	ldr	r3, [r0, #24]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	db05      	blt.n	800dd5c <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd50:	4b15      	ldr	r3, [pc, #84]	; (800dda8 <vTaskPriorityInherit+0x70>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800dd56:	2307      	movs	r3, #7
 800dd58:	1a5b      	subs	r3, r3, r1
 800dd5a:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800dd5c:	0093      	lsls	r3, r2, #2
 800dd5e:	189b      	adds	r3, r3, r2
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	4a12      	ldr	r2, [pc, #72]	; (800ddac <vTaskPriorityInherit+0x74>)
 800dd64:	189b      	adds	r3, r3, r2
 800dd66:	6962      	ldr	r2, [r4, #20]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d004      	beq.n	800dd76 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dd6c:	4b0e      	ldr	r3, [pc, #56]	; (800dda8 <vTaskPriorityInherit+0x70>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd72:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800dd74:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800dd76:	1d25      	adds	r5, r4, #4
 800dd78:	0028      	movs	r0, r5
 800dd7a:	f7fe ff4c 	bl	800cc16 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dd7e:	4b0a      	ldr	r3, [pc, #40]	; (800dda8 <vTaskPriorityInherit+0x70>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd84:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800dd86:	4a0a      	ldr	r2, [pc, #40]	; (800ddb0 <vTaskPriorityInherit+0x78>)
 800dd88:	6812      	ldr	r2, [r2, #0]
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d808      	bhi.n	800dda0 <vTaskPriorityInherit+0x68>
 800dd8e:	0098      	lsls	r0, r3, #2
 800dd90:	18c0      	adds	r0, r0, r3
 800dd92:	0080      	lsls	r0, r0, #2
 800dd94:	4b05      	ldr	r3, [pc, #20]	; (800ddac <vTaskPriorityInherit+0x74>)
 800dd96:	18c0      	adds	r0, r0, r3
 800dd98:	0029      	movs	r1, r5
 800dd9a:	f7fe ff19 	bl	800cbd0 <vListInsertEnd>
	}
 800dd9e:	e7e9      	b.n	800dd74 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800dda0:	4a03      	ldr	r2, [pc, #12]	; (800ddb0 <vTaskPriorityInherit+0x78>)
 800dda2:	6013      	str	r3, [r2, #0]
 800dda4:	e7f3      	b.n	800dd8e <vTaskPriorityInherit+0x56>
 800dda6:	46c0      	nop			; (mov r8, r8)
 800dda8:	20001d20 	.word	0x20001d20
 800ddac:	20001d2c 	.word	0x20001d2c
 800ddb0:	20001dd0 	.word	0x20001dd0

0800ddb4 <xTaskPriorityDisinherit>:
	{
 800ddb4:	b570      	push	{r4, r5, r6, lr}
 800ddb6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800ddb8:	d02b      	beq.n	800de12 <xTaskPriorityDisinherit+0x5e>
			configASSERT( pxTCB == pxCurrentTCB );
 800ddba:	4b18      	ldr	r3, [pc, #96]	; (800de1c <xTaskPriorityDisinherit+0x68>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4283      	cmp	r3, r0
 800ddc0:	d001      	beq.n	800ddc6 <xTaskPriorityDisinherit+0x12>
 800ddc2:	b672      	cpsid	i
 800ddc4:	e7fe      	b.n	800ddc4 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800ddc6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d101      	bne.n	800ddd0 <xTaskPriorityDisinherit+0x1c>
 800ddcc:	b672      	cpsid	i
 800ddce:	e7fe      	b.n	800ddce <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800ddd0:	3b01      	subs	r3, #1
 800ddd2:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ddd4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ddd6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800ddd8:	428a      	cmp	r2, r1
 800ddda:	d01c      	beq.n	800de16 <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800dddc:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ddde:	4283      	cmp	r3, r0
 800dde0:	d118      	bne.n	800de14 <xTaskPriorityDisinherit+0x60>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800dde2:	1d25      	adds	r5, r4, #4
 800dde4:	0028      	movs	r0, r5
 800dde6:	f7fe ff16 	bl	800cc16 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ddea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ddec:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddee:	2207      	movs	r2, #7
 800ddf0:	1ad2      	subs	r2, r2, r3
 800ddf2:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ddf4:	4a0a      	ldr	r2, [pc, #40]	; (800de20 <xTaskPriorityDisinherit+0x6c>)
 800ddf6:	6812      	ldr	r2, [r2, #0]
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d901      	bls.n	800de00 <xTaskPriorityDisinherit+0x4c>
 800ddfc:	4a08      	ldr	r2, [pc, #32]	; (800de20 <xTaskPriorityDisinherit+0x6c>)
 800ddfe:	6013      	str	r3, [r2, #0]
 800de00:	2014      	movs	r0, #20
 800de02:	4358      	muls	r0, r3
 800de04:	4b07      	ldr	r3, [pc, #28]	; (800de24 <xTaskPriorityDisinherit+0x70>)
 800de06:	18c0      	adds	r0, r0, r3
 800de08:	0029      	movs	r1, r5
 800de0a:	f7fe fee1 	bl	800cbd0 <vListInsertEnd>
					xReturn = pdTRUE;
 800de0e:	2001      	movs	r0, #1
 800de10:	e000      	b.n	800de14 <xTaskPriorityDisinherit+0x60>
	BaseType_t xReturn = pdFALSE;
 800de12:	2000      	movs	r0, #0
	}
 800de14:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800de16:	2000      	movs	r0, #0
 800de18:	e7fc      	b.n	800de14 <xTaskPriorityDisinherit+0x60>
 800de1a:	46c0      	nop			; (mov r8, r8)
 800de1c:	20001d20 	.word	0x20001d20
 800de20:	20001dd0 	.word	0x20001dd0
 800de24:	20001d2c 	.word	0x20001d2c

0800de28 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800de28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de2a:	b085      	sub	sp, #20
 800de2c:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800de2e:	2300      	movs	r3, #0
 800de30:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800de32:	4b2b      	ldr	r3, [pc, #172]	; (800dee0 <vTaskList+0xb8>)
 800de34:	681a      	ldr	r2, [r3, #0]
 800de36:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800de38:	6818      	ldr	r0, [r3, #0]
 800de3a:	0140      	lsls	r0, r0, #5
 800de3c:	f000 fc22 	bl	800e684 <pvPortMalloc>
 800de40:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800de42:	d04a      	beq.n	800deda <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800de44:	9903      	ldr	r1, [sp, #12]
 800de46:	2200      	movs	r2, #0
 800de48:	f7ff fdca 	bl	800d9e0 <uxTaskGetSystemState>
 800de4c:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800de4e:	2300      	movs	r3, #0
 800de50:	9302      	str	r3, [sp, #8]
 800de52:	9a02      	ldr	r2, [sp, #8]
 800de54:	9b03      	ldr	r3, [sp, #12]
 800de56:	429a      	cmp	r2, r3
 800de58:	d23c      	bcs.n	800ded4 <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800de5a:	4e22      	ldr	r6, [pc, #136]	; (800dee4 <vTaskList+0xbc>)
 800de5c:	e027      	b.n	800deae <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 800de5e:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800de60:	2b01      	cmp	r3, #1
 800de62:	d133      	bne.n	800decc <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800de64:	9b02      	ldr	r3, [sp, #8]
 800de66:	015b      	lsls	r3, r3, #5
 800de68:	18fb      	adds	r3, r7, r3
 800de6a:	6859      	ldr	r1, [r3, #4]
 800de6c:	0020      	movs	r0, r4
 800de6e:	f7ff fab1 	bl	800d3d4 <prvWriteNameToBuffer>
 800de72:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800de74:	9b02      	ldr	r3, [sp, #8]
 800de76:	9a02      	ldr	r2, [sp, #8]
 800de78:	9902      	ldr	r1, [sp, #8]
 800de7a:	015b      	lsls	r3, r3, #5
 800de7c:	18fb      	adds	r3, r7, r3
 800de7e:	691b      	ldr	r3, [r3, #16]
 800de80:	0149      	lsls	r1, r1, #5
 800de82:	1879      	adds	r1, r7, r1
 800de84:	6889      	ldr	r1, [r1, #8]
 800de86:	9101      	str	r1, [sp, #4]
 800de88:	0152      	lsls	r2, r2, #5
 800de8a:	18ba      	adds	r2, r7, r2
 800de8c:	8b92      	ldrh	r2, [r2, #28]
 800de8e:	9200      	str	r2, [sp, #0]
 800de90:	002a      	movs	r2, r5
 800de92:	0031      	movs	r1, r6
 800de94:	f003 ffe2 	bl	8011e5c <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800de98:	0020      	movs	r0, r4
 800de9a:	f7f2 f93d 	bl	8000118 <strlen>
 800de9e:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800dea0:	9b02      	ldr	r3, [sp, #8]
 800dea2:	3301      	adds	r3, #1
 800dea4:	9302      	str	r3, [sp, #8]
 800dea6:	9a02      	ldr	r2, [sp, #8]
 800dea8:	9b03      	ldr	r3, [sp, #12]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d212      	bcs.n	800ded4 <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800deae:	9b02      	ldr	r3, [sp, #8]
 800deb0:	015b      	lsls	r3, r3, #5
 800deb2:	18fb      	adds	r3, r7, r3
 800deb4:	7b1b      	ldrb	r3, [r3, #12]
 800deb6:	2b02      	cmp	r3, #2
 800deb8:	d00a      	beq.n	800ded0 <vTaskList+0xa8>
 800deba:	b2da      	uxtb	r2, r3
 800debc:	2a02      	cmp	r2, #2
 800debe:	d9ce      	bls.n	800de5e <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800dec0:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800dec2:	2b03      	cmp	r3, #3
 800dec4:	d0ce      	beq.n	800de64 <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800dec6:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800dec8:	2b04      	cmp	r3, #4
 800deca:	d0cb      	beq.n	800de64 <vTaskList+0x3c>
										cStatus = 0x00;
 800decc:	2500      	movs	r5, #0
										break;
 800dece:	e7c9      	b.n	800de64 <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ded0:	2542      	movs	r5, #66	; 0x42
 800ded2:	e7c7      	b.n	800de64 <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ded4:	0038      	movs	r0, r7
 800ded6:	f000 fc6b 	bl	800e7b0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800deda:	b005      	add	sp, #20
 800dedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dede:	46c0      	nop			; (mov r8, r8)
 800dee0:	20001dbc 	.word	0x20001dbc
 800dee4:	08018d4c 	.word	0x08018d4c

0800dee8 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800dee8:	b570      	push	{r4, r5, r6, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800deee:	2300      	movs	r3, #0
 800def0:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800def2:	4b26      	ldr	r3, [pc, #152]	; (800df8c <vTaskGetRunTimeStats+0xa4>)
 800def4:	681a      	ldr	r2, [r3, #0]
 800def6:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800def8:	6818      	ldr	r0, [r3, #0]
 800defa:	0140      	lsls	r0, r0, #5
 800defc:	f000 fbc2 	bl	800e684 <pvPortMalloc>
 800df00:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800df02:	d014      	beq.n	800df2e <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800df04:	9903      	ldr	r1, [sp, #12]
 800df06:	aa01      	add	r2, sp, #4
 800df08:	f7ff fd6a 	bl	800d9e0 <uxTaskGetSystemState>
 800df0c:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800df0e:	2164      	movs	r1, #100	; 0x64
 800df10:	9801      	ldr	r0, [sp, #4]
 800df12:	f7f2 f91d 	bl	8000150 <__udivsi3>
 800df16:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800df18:	2800      	cmp	r0, #0
 800df1a:	d005      	beq.n	800df28 <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800df1c:	2300      	movs	r3, #0
 800df1e:	9302      	str	r3, [sp, #8]
 800df20:	9a02      	ldr	r2, [sp, #8]
 800df22:	9b03      	ldr	r3, [sp, #12]
 800df24:	429a      	cmp	r2, r3
 800df26:	d316      	bcc.n	800df56 <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800df28:	0030      	movs	r0, r6
 800df2a:	f000 fc41 	bl	800e7b0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df2e:	b004      	add	sp, #16
 800df30:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800df32:	9b02      	ldr	r3, [sp, #8]
 800df34:	015b      	lsls	r3, r3, #5
 800df36:	18f3      	adds	r3, r6, r3
 800df38:	699a      	ldr	r2, [r3, #24]
 800df3a:	4915      	ldr	r1, [pc, #84]	; (800df90 <vTaskGetRunTimeStats+0xa8>)
 800df3c:	f003 ff8e 	bl	8011e5c <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800df40:	0020      	movs	r0, r4
 800df42:	f7f2 f8e9 	bl	8000118 <strlen>
 800df46:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800df48:	9b02      	ldr	r3, [sp, #8]
 800df4a:	3301      	adds	r3, #1
 800df4c:	9302      	str	r3, [sp, #8]
 800df4e:	9a02      	ldr	r2, [sp, #8]
 800df50:	9b03      	ldr	r3, [sp, #12]
 800df52:	429a      	cmp	r2, r3
 800df54:	d2e8      	bcs.n	800df28 <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800df56:	9b02      	ldr	r3, [sp, #8]
 800df58:	015b      	lsls	r3, r3, #5
 800df5a:	18f3      	adds	r3, r6, r3
 800df5c:	9901      	ldr	r1, [sp, #4]
 800df5e:	6998      	ldr	r0, [r3, #24]
 800df60:	f7f2 f8f6 	bl	8000150 <__udivsi3>
 800df64:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800df66:	9b02      	ldr	r3, [sp, #8]
 800df68:	015b      	lsls	r3, r3, #5
 800df6a:	18f3      	adds	r3, r6, r3
 800df6c:	6859      	ldr	r1, [r3, #4]
 800df6e:	0020      	movs	r0, r4
 800df70:	f7ff fa30 	bl	800d3d4 <prvWriteNameToBuffer>
 800df74:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800df76:	2d00      	cmp	r5, #0
 800df78:	d0db      	beq.n	800df32 <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800df7a:	9b02      	ldr	r3, [sp, #8]
 800df7c:	015b      	lsls	r3, r3, #5
 800df7e:	18f3      	adds	r3, r6, r3
 800df80:	699a      	ldr	r2, [r3, #24]
 800df82:	002b      	movs	r3, r5
 800df84:	4903      	ldr	r1, [pc, #12]	; (800df94 <vTaskGetRunTimeStats+0xac>)
 800df86:	f003 ff69 	bl	8011e5c <sprintf>
 800df8a:	e7d9      	b.n	800df40 <vTaskGetRunTimeStats+0x58>
 800df8c:	20001dbc 	.word	0x20001dbc
 800df90:	08018d40 	.word	0x08018d40
 800df94:	08018d34 	.word	0x08018d34

0800df98 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800df98:	4b05      	ldr	r3, [pc, #20]	; (800dfb0 <pvTaskIncrementMutexHeldCount+0x18>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d004      	beq.n	800dfaa <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dfa0:	4b03      	ldr	r3, [pc, #12]	; (800dfb0 <pvTaskIncrementMutexHeldCount+0x18>)
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800dfaa:	4b01      	ldr	r3, [pc, #4]	; (800dfb0 <pvTaskIncrementMutexHeldCount+0x18>)
 800dfac:	6818      	ldr	r0, [r3, #0]
	}
 800dfae:	4770      	bx	lr
 800dfb0:	20001d20 	.word	0x20001d20

0800dfb4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800dfb4:	b570      	push	{r4, r5, r6, lr}
 800dfb6:	0005      	movs	r5, r0
 800dfb8:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800dfba:	f000 fae1 	bl	800e580 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800dfbe:	4b20      	ldr	r3, [pc, #128]	; (800e040 <ulTaskNotifyTake+0x8c>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d106      	bne.n	800dfd6 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800dfc8:	4b1d      	ldr	r3, [pc, #116]	; (800e040 <ulTaskNotifyTake+0x8c>)
 800dfca:	681a      	ldr	r2, [r3, #0]
 800dfcc:	235c      	movs	r3, #92	; 0x5c
 800dfce:	2101      	movs	r1, #1
 800dfd0:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800dfd2:	2c00      	cmp	r4, #0
 800dfd4:	d118      	bne.n	800e008 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800dfd6:	f000 fadf 	bl	800e598 <vPortExitCritical>

		taskENTER_CRITICAL();
 800dfda:	f000 fad1 	bl	800e580 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800dfde:	4b18      	ldr	r3, [pc, #96]	; (800e040 <ulTaskNotifyTake+0x8c>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800dfe4:	2c00      	cmp	r4, #0
 800dfe6:	d006      	beq.n	800dff6 <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 800dfe8:	2d00      	cmp	r5, #0
 800dfea:	d123      	bne.n	800e034 <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800dfec:	4b14      	ldr	r3, [pc, #80]	; (800e040 <ulTaskNotifyTake+0x8c>)
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800dff2:	3b01      	subs	r3, #1
 800dff4:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800dff6:	4b12      	ldr	r3, [pc, #72]	; (800e040 <ulTaskNotifyTake+0x8c>)
 800dff8:	681a      	ldr	r2, [r3, #0]
 800dffa:	235c      	movs	r3, #92	; 0x5c
 800dffc:	2100      	movs	r1, #0
 800dffe:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800e000:	f000 faca 	bl	800e598 <vPortExitCritical>

		return ulReturn;
	}
 800e004:	0020      	movs	r0, r4
 800e006:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e008:	4b0d      	ldr	r3, [pc, #52]	; (800e040 <ulTaskNotifyTake+0x8c>)
 800e00a:	6818      	ldr	r0, [r3, #0]
 800e00c:	3004      	adds	r0, #4
 800e00e:	f7fe fe02 	bl	800cc16 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800e012:	1c63      	adds	r3, r4, #1
 800e014:	d007      	beq.n	800e026 <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 800e016:	4b0b      	ldr	r3, [pc, #44]	; (800e044 <ulTaskNotifyTake+0x90>)
 800e018:	6818      	ldr	r0, [r3, #0]
 800e01a:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800e01c:	f7ff f9b0 	bl	800d380 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800e020:	f000 faa2 	bl	800e568 <vPortYield>
 800e024:	e7d7      	b.n	800dfd6 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e026:	4b06      	ldr	r3, [pc, #24]	; (800e040 <ulTaskNotifyTake+0x8c>)
 800e028:	6819      	ldr	r1, [r3, #0]
 800e02a:	3104      	adds	r1, #4
 800e02c:	4806      	ldr	r0, [pc, #24]	; (800e048 <ulTaskNotifyTake+0x94>)
 800e02e:	f7fe fdcf 	bl	800cbd0 <vListInsertEnd>
 800e032:	e7f5      	b.n	800e020 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800e034:	4b02      	ldr	r3, [pc, #8]	; (800e040 <ulTaskNotifyTake+0x8c>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2200      	movs	r2, #0
 800e03a:	659a      	str	r2, [r3, #88]	; 0x58
 800e03c:	e7db      	b.n	800dff6 <ulTaskNotifyTake+0x42>
 800e03e:	46c0      	nop			; (mov r8, r8)
 800e040:	20001d20 	.word	0x20001d20
 800e044:	20001e40 	.word	0x20001e40
 800e048:	20001e18 	.word	0x20001e18

0800e04c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e04e:	0004      	movs	r4, r0
 800e050:	000e      	movs	r6, r1
 800e052:	0015      	movs	r5, r2
 800e054:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800e056:	2800      	cmp	r0, #0
 800e058:	d101      	bne.n	800e05e <xTaskGenericNotify+0x12>
 800e05a:	b672      	cpsid	i
 800e05c:	e7fe      	b.n	800e05c <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800e05e:	f000 fa8f 	bl	800e580 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e062:	2f00      	cmp	r7, #0
 800e064:	d001      	beq.n	800e06a <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e066:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e068:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800e06a:	225c      	movs	r2, #92	; 0x5c
 800e06c:	5ca3      	ldrb	r3, [r4, r2]
 800e06e:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800e070:	2102      	movs	r1, #2
 800e072:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800e074:	2d02      	cmp	r5, #2
 800e076:	d015      	beq.n	800e0a4 <xTaskGenericNotify+0x58>
 800e078:	d907      	bls.n	800e08a <xTaskGenericNotify+0x3e>
 800e07a:	2d03      	cmp	r5, #3
 800e07c:	d016      	beq.n	800e0ac <xTaskGenericNotify+0x60>
 800e07e:	2d04      	cmp	r5, #4
 800e080:	d105      	bne.n	800e08e <xTaskGenericNotify+0x42>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800e082:	2b02      	cmp	r3, #2
 800e084:	d035      	beq.n	800e0f2 <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e086:	65a6      	str	r6, [r4, #88]	; 0x58
 800e088:	e001      	b.n	800e08e <xTaskGenericNotify+0x42>
			switch( eAction )
 800e08a:	2d01      	cmp	r5, #1
 800e08c:	d006      	beq.n	800e09c <xTaskGenericNotify+0x50>
 800e08e:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800e090:	2b01      	cmp	r3, #1
 800e092:	d00d      	beq.n	800e0b0 <xTaskGenericNotify+0x64>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e094:	f000 fa80 	bl	800e598 <vPortExitCritical>

		return xReturn;
	}
 800e098:	0028      	movs	r0, r5
 800e09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 800e09c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e09e:	4316      	orrs	r6, r2
 800e0a0:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800e0a2:	e7f4      	b.n	800e08e <xTaskGenericNotify+0x42>
					( pxTCB->ulNotifiedValue )++;
 800e0a4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e0a6:	3201      	adds	r2, #1
 800e0a8:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800e0aa:	e7f0      	b.n	800e08e <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue = ulValue;
 800e0ac:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800e0ae:	e7ee      	b.n	800e08e <xTaskGenericNotify+0x42>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e0b0:	1d25      	adds	r5, r4, #4
 800e0b2:	0028      	movs	r0, r5
 800e0b4:	f7fe fdaf 	bl	800cc16 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e0b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e0ba:	4a0f      	ldr	r2, [pc, #60]	; (800e0f8 <xTaskGenericNotify+0xac>)
 800e0bc:	6812      	ldr	r2, [r2, #0]
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d901      	bls.n	800e0c6 <xTaskGenericNotify+0x7a>
 800e0c2:	4a0d      	ldr	r2, [pc, #52]	; (800e0f8 <xTaskGenericNotify+0xac>)
 800e0c4:	6013      	str	r3, [r2, #0]
 800e0c6:	2014      	movs	r0, #20
 800e0c8:	4358      	muls	r0, r3
 800e0ca:	4b0c      	ldr	r3, [pc, #48]	; (800e0fc <xTaskGenericNotify+0xb0>)
 800e0cc:	18c0      	adds	r0, r0, r3
 800e0ce:	0029      	movs	r1, r5
 800e0d0:	f7fe fd7e 	bl	800cbd0 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e0d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d001      	beq.n	800e0de <xTaskGenericNotify+0x92>
 800e0da:	b672      	cpsid	i
 800e0dc:	e7fe      	b.n	800e0dc <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e0de:	4b08      	ldr	r3, [pc, #32]	; (800e100 <xTaskGenericNotify+0xb4>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e6:	2501      	movs	r5, #1
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d9d3      	bls.n	800e094 <xTaskGenericNotify+0x48>
					taskYIELD_IF_USING_PREEMPTION();
 800e0ec:	f000 fa3c 	bl	800e568 <vPortYield>
 800e0f0:	e7d0      	b.n	800e094 <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
 800e0f2:	2500      	movs	r5, #0
 800e0f4:	e7ce      	b.n	800e094 <xTaskGenericNotify+0x48>
 800e0f6:	46c0      	nop			; (mov r8, r8)
 800e0f8:	20001dd0 	.word	0x20001dd0
 800e0fc:	20001d2c 	.word	0x20001d2c
 800e100:	20001d20 	.word	0x20001d20

0800e104 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e104:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e106:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e108:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e10a:	4291      	cmp	r1, r2
 800e10c:	d80b      	bhi.n	800e126 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800e10e:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e110:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800e112:	6983      	ldr	r3, [r0, #24]
 800e114:	429a      	cmp	r2, r3
 800e116:	d211      	bcs.n	800e13c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e118:	1d01      	adds	r1, r0, #4
 800e11a:	4b09      	ldr	r3, [pc, #36]	; (800e140 <prvInsertTimerInActiveList+0x3c>)
 800e11c:	6818      	ldr	r0, [r3, #0]
 800e11e:	f7fe fd63 	bl	800cbe8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e122:	2400      	movs	r4, #0
 800e124:	e00a      	b.n	800e13c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e126:	429a      	cmp	r2, r3
 800e128:	d202      	bcs.n	800e130 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e12a:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e12c:	4299      	cmp	r1, r3
 800e12e:	d205      	bcs.n	800e13c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e130:	1d01      	adds	r1, r0, #4
 800e132:	4b04      	ldr	r3, [pc, #16]	; (800e144 <prvInsertTimerInActiveList+0x40>)
 800e134:	6818      	ldr	r0, [r3, #0]
 800e136:	f7fe fd57 	bl	800cbe8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e13a:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 800e13c:	0020      	movs	r0, r4
 800e13e:	bd10      	pop	{r4, pc}
 800e140:	20001e4c 	.word	0x20001e4c
 800e144:	20001e48 	.word	0x20001e48

0800e148 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e148:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e14a:	f000 fa19 	bl	800e580 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e14e:	4b11      	ldr	r3, [pc, #68]	; (800e194 <prvCheckForValidListAndQueue+0x4c>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d002      	beq.n	800e15c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e156:	f000 fa1f 	bl	800e598 <vPortExitCritical>
}
 800e15a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800e15c:	4d0e      	ldr	r5, [pc, #56]	; (800e198 <prvCheckForValidListAndQueue+0x50>)
 800e15e:	0028      	movs	r0, r5
 800e160:	f7fe fd28 	bl	800cbb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e164:	4c0d      	ldr	r4, [pc, #52]	; (800e19c <prvCheckForValidListAndQueue+0x54>)
 800e166:	0020      	movs	r0, r4
 800e168:	f7fe fd24 	bl	800cbb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e16c:	4b0c      	ldr	r3, [pc, #48]	; (800e1a0 <prvCheckForValidListAndQueue+0x58>)
 800e16e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e170:	4b0c      	ldr	r3, [pc, #48]	; (800e1a4 <prvCheckForValidListAndQueue+0x5c>)
 800e172:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800e174:	2200      	movs	r2, #0
 800e176:	2110      	movs	r1, #16
 800e178:	2004      	movs	r0, #4
 800e17a:	f7fe fe26 	bl	800cdca <xQueueGenericCreate>
 800e17e:	4b05      	ldr	r3, [pc, #20]	; (800e194 <prvCheckForValidListAndQueue+0x4c>)
 800e180:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 800e182:	2800      	cmp	r0, #0
 800e184:	d101      	bne.n	800e18a <prvCheckForValidListAndQueue+0x42>
 800e186:	b672      	cpsid	i
 800e188:	e7fe      	b.n	800e188 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e18a:	4907      	ldr	r1, [pc, #28]	; (800e1a8 <prvCheckForValidListAndQueue+0x60>)
 800e18c:	f7ff f856 	bl	800d23c <vQueueAddToRegistry>
 800e190:	e7e1      	b.n	800e156 <prvCheckForValidListAndQueue+0xe>
 800e192:	46c0      	nop			; (mov r8, r8)
 800e194:	20001e7c 	.word	0x20001e7c
 800e198:	20001e50 	.word	0x20001e50
 800e19c:	20001e64 	.word	0x20001e64
 800e1a0:	20001e48 	.word	0x20001e48
 800e1a4:	20001e4c 	.word	0x20001e4c
 800e1a8:	08018d8c 	.word	0x08018d8c

0800e1ac <xTimerCreateTimerTask>:
{
 800e1ac:	b500      	push	{lr}
 800e1ae:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800e1b0:	f7ff ffca 	bl	800e148 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800e1b4:	4b0a      	ldr	r3, [pc, #40]	; (800e1e0 <xTimerCreateTimerTask+0x34>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d00d      	beq.n	800e1d8 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800e1bc:	2300      	movs	r3, #0
 800e1be:	9303      	str	r3, [sp, #12]
 800e1c0:	9302      	str	r3, [sp, #8]
 800e1c2:	9301      	str	r3, [sp, #4]
 800e1c4:	3303      	adds	r3, #3
 800e1c6:	9300      	str	r3, [sp, #0]
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	22a0      	movs	r2, #160	; 0xa0
 800e1cc:	4905      	ldr	r1, [pc, #20]	; (800e1e4 <xTimerCreateTimerTask+0x38>)
 800e1ce:	4806      	ldr	r0, [pc, #24]	; (800e1e8 <xTimerCreateTimerTask+0x3c>)
 800e1d0:	f7ff f918 	bl	800d404 <xTaskGenericCreate>
	configASSERT( xReturn );
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	d101      	bne.n	800e1dc <xTimerCreateTimerTask+0x30>
 800e1d8:	b672      	cpsid	i
 800e1da:	e7fe      	b.n	800e1da <xTimerCreateTimerTask+0x2e>
}
 800e1dc:	b005      	add	sp, #20
 800e1de:	bd00      	pop	{pc}
 800e1e0:	20001e7c 	.word	0x20001e7c
 800e1e4:	08018d94 	.word	0x08018d94
 800e1e8:	0800e335 	.word	0x0800e335

0800e1ec <xTimerCreate>:
{
 800e1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1ee:	46c6      	mov	lr, r8
 800e1f0:	b500      	push	{lr}
 800e1f2:	4680      	mov	r8, r0
 800e1f4:	000d      	movs	r5, r1
 800e1f6:	0017      	movs	r7, r2
 800e1f8:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800e1fa:	2900      	cmp	r1, #0
 800e1fc:	d014      	beq.n	800e228 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800e1fe:	202c      	movs	r0, #44	; 0x2c
 800e200:	f000 fa40 	bl	800e684 <pvPortMalloc>
 800e204:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800e206:	d00b      	beq.n	800e220 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800e208:	f7ff ff9e 	bl	800e148 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800e20c:	4643      	mov	r3, r8
 800e20e:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800e210:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800e212:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800e214:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800e216:	9b06      	ldr	r3, [sp, #24]
 800e218:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800e21a:	1d20      	adds	r0, r4, #4
 800e21c:	f7fe fcd5 	bl	800cbca <vListInitialiseItem>
}
 800e220:	0020      	movs	r0, r4
 800e222:	bc04      	pop	{r2}
 800e224:	4690      	mov	r8, r2
 800e226:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800e228:	b672      	cpsid	i
 800e22a:	e7fe      	b.n	800e22a <xTimerCreate+0x3e>

0800e22c <xTimerGenericCommand>:
{
 800e22c:	b530      	push	{r4, r5, lr}
 800e22e:	b085      	sub	sp, #20
 800e230:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800e232:	4b13      	ldr	r3, [pc, #76]	; (800e280 <xTimerGenericCommand+0x54>)
 800e234:	681c      	ldr	r4, [r3, #0]
 800e236:	2c00      	cmp	r4, #0
 800e238:	d020      	beq.n	800e27c <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800e23a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e23c:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e23e:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e240:	2905      	cmp	r1, #5
 800e242:	dc13      	bgt.n	800e26c <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e244:	f7ff fd68 	bl	800dd18 <xTaskGetSchedulerState>
 800e248:	2802      	cmp	r0, #2
 800e24a:	d007      	beq.n	800e25c <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e24c:	4b0c      	ldr	r3, [pc, #48]	; (800e280 <xTimerGenericCommand+0x54>)
 800e24e:	6818      	ldr	r0, [r3, #0]
 800e250:	2300      	movs	r3, #0
 800e252:	2200      	movs	r2, #0
 800e254:	4669      	mov	r1, sp
 800e256:	f7fe fdf3 	bl	800ce40 <xQueueGenericSend>
 800e25a:	e00d      	b.n	800e278 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e25c:	4b08      	ldr	r3, [pc, #32]	; (800e280 <xTimerGenericCommand+0x54>)
 800e25e:	6818      	ldr	r0, [r3, #0]
 800e260:	2300      	movs	r3, #0
 800e262:	9a08      	ldr	r2, [sp, #32]
 800e264:	4669      	mov	r1, sp
 800e266:	f7fe fdeb 	bl	800ce40 <xQueueGenericSend>
 800e26a:	e005      	b.n	800e278 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e26c:	2300      	movs	r3, #0
 800e26e:	002a      	movs	r2, r5
 800e270:	4669      	mov	r1, sp
 800e272:	0020      	movs	r0, r4
 800e274:	f7fe fe7b 	bl	800cf6e <xQueueGenericSendFromISR>
}
 800e278:	b005      	add	sp, #20
 800e27a:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800e27c:	2000      	movs	r0, #0
	return xReturn;
 800e27e:	e7fb      	b.n	800e278 <xTimerGenericCommand+0x4c>
 800e280:	20001e7c 	.word	0x20001e7c

0800e284 <prvSampleTimeNow>:
{
 800e284:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e286:	46d6      	mov	lr, sl
 800e288:	464f      	mov	r7, r9
 800e28a:	4646      	mov	r6, r8
 800e28c:	b5c0      	push	{r6, r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 800e292:	f7ff fa43 	bl	800d71c <xTaskGetTickCount>
 800e296:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 800e298:	4b23      	ldr	r3, [pc, #140]	; (800e328 <prvSampleTimeNow+0xa4>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4283      	cmp	r3, r0
 800e29e:	d80b      	bhi.n	800e2b8 <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	4642      	mov	r2, r8
 800e2a4:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 800e2a6:	4b20      	ldr	r3, [pc, #128]	; (800e328 <prvSampleTimeNow+0xa4>)
 800e2a8:	601f      	str	r7, [r3, #0]
}
 800e2aa:	0038      	movs	r0, r7
 800e2ac:	b004      	add	sp, #16
 800e2ae:	bc1c      	pop	{r2, r3, r4}
 800e2b0:	4690      	mov	r8, r2
 800e2b2:	4699      	mov	r9, r3
 800e2b4:	46a2      	mov	sl, r4
 800e2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2b8:	4e1c      	ldr	r6, [pc, #112]	; (800e32c <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2be:	6833      	ldr	r3, [r6, #0]
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	2a00      	cmp	r2, #0
 800e2c4:	d026      	beq.n	800e314 <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e2c6:	68db      	ldr	r3, [r3, #12]
 800e2c8:	681a      	ldr	r2, [r3, #0]
 800e2ca:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e2cc:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2ce:	1d25      	adds	r5, r4, #4
 800e2d0:	0028      	movs	r0, r5
 800e2d2:	f7fe fca0 	bl	800cc16 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2d6:	0020      	movs	r0, r4
 800e2d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2da:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e2dc:	69e3      	ldr	r3, [r4, #28]
 800e2de:	2b01      	cmp	r3, #1
 800e2e0:	d1ed      	bne.n	800e2be <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e2e2:	69a3      	ldr	r3, [r4, #24]
 800e2e4:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800e2e6:	459a      	cmp	sl, r3
 800e2e8:	d209      	bcs.n	800e2fe <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e2ea:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e2ec:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e2ee:	4b0f      	ldr	r3, [pc, #60]	; (800e32c <prvSampleTimeNow+0xa8>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	9303      	str	r3, [sp, #12]
 800e2f4:	0029      	movs	r1, r5
 800e2f6:	0018      	movs	r0, r3
 800e2f8:	f7fe fc76 	bl	800cbe8 <vListInsert>
 800e2fc:	e7df      	b.n	800e2be <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e2fe:	464b      	mov	r3, r9
 800e300:	9300      	str	r3, [sp, #0]
 800e302:	4652      	mov	r2, sl
 800e304:	4649      	mov	r1, r9
 800e306:	0020      	movs	r0, r4
 800e308:	f7ff ff90 	bl	800e22c <xTimerGenericCommand>
				configASSERT( xResult );
 800e30c:	2800      	cmp	r0, #0
 800e30e:	d1d6      	bne.n	800e2be <prvSampleTimeNow+0x3a>
 800e310:	b672      	cpsid	i
 800e312:	e7fe      	b.n	800e312 <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 800e314:	4a06      	ldr	r2, [pc, #24]	; (800e330 <prvSampleTimeNow+0xac>)
 800e316:	4905      	ldr	r1, [pc, #20]	; (800e32c <prvSampleTimeNow+0xa8>)
 800e318:	6810      	ldr	r0, [r2, #0]
 800e31a:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800e31c:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800e31e:	2301      	movs	r3, #1
 800e320:	4642      	mov	r2, r8
 800e322:	6013      	str	r3, [r2, #0]
 800e324:	e7bf      	b.n	800e2a6 <prvSampleTimeNow+0x22>
 800e326:	46c0      	nop			; (mov r8, r8)
 800e328:	20001e78 	.word	0x20001e78
 800e32c:	20001e48 	.word	0x20001e48
 800e330:	20001e4c 	.word	0x20001e4c

0800e334 <prvTimerTask>:
{
 800e334:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e336:	b08d      	sub	sp, #52	; 0x34
			switch( xMessage.xMessageID )
 800e338:	4e57      	ldr	r6, [pc, #348]	; (800e498 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e33a:	4b58      	ldr	r3, [pc, #352]	; (800e49c <prvTimerTask+0x168>)
 800e33c:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e33e:	681a      	ldr	r2, [r3, #0]
 800e340:	2a00      	cmp	r2, #0
 800e342:	d100      	bne.n	800e346 <prvTimerTask+0x12>
 800e344:	e09c      	b.n	800e480 <prvTimerTask+0x14c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 800e34a:	f7ff f9df 	bl	800d70c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e34e:	a808      	add	r0, sp, #32
 800e350:	f7ff ff98 	bl	800e284 <prvSampleTimeNow>
 800e354:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800e356:	9b08      	ldr	r3, [sp, #32]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d000      	beq.n	800e35e <prvTimerTask+0x2a>
 800e35c:	e099      	b.n	800e492 <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e35e:	42a0      	cmp	r0, r4
 800e360:	d233      	bcs.n	800e3ca <prvTimerTask+0x96>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800e362:	1b61      	subs	r1, r4, r5
 800e364:	4b4e      	ldr	r3, [pc, #312]	; (800e4a0 <prvTimerTask+0x16c>)
 800e366:	6818      	ldr	r0, [r3, #0]
 800e368:	f7fe ff80 	bl	800d26c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e36c:	f7ff fa6e 	bl	800d84c <xTaskResumeAll>
 800e370:	2800      	cmp	r0, #0
 800e372:	d050      	beq.n	800e416 <prvTimerTask+0xe2>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e374:	4c4a      	ldr	r4, [pc, #296]	; (800e4a0 <prvTimerTask+0x16c>)
 800e376:	2300      	movs	r3, #0
 800e378:	2200      	movs	r2, #0
 800e37a:	a908      	add	r1, sp, #32
 800e37c:	6820      	ldr	r0, [r4, #0]
 800e37e:	f7fe fe78 	bl	800d072 <xQueueGenericReceive>
 800e382:	2800      	cmp	r0, #0
 800e384:	d0d9      	beq.n	800e33a <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e386:	9b08      	ldr	r3, [sp, #32]
 800e388:	9303      	str	r3, [sp, #12]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	da0c      	bge.n	800e3a8 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e38e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e390:	9303      	str	r3, [sp, #12]
 800e392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e394:	9304      	str	r3, [sp, #16]
 800e396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e398:	9305      	str	r3, [sp, #20]
 800e39a:	9903      	ldr	r1, [sp, #12]
 800e39c:	9804      	ldr	r0, [sp, #16]
 800e39e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e3a0:	9b08      	ldr	r3, [sp, #32]
 800e3a2:	9303      	str	r3, [sp, #12]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	dbe6      	blt.n	800e376 <prvTimerTask+0x42>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e3a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800e3aa:	696b      	ldr	r3, [r5, #20]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d002      	beq.n	800e3b6 <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3b0:	1d28      	adds	r0, r5, #4
 800e3b2:	f7fe fc30 	bl	800cc16 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e3b6:	a807      	add	r0, sp, #28
 800e3b8:	f7ff ff64 	bl	800e284 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800e3bc:	9b08      	ldr	r3, [sp, #32]
 800e3be:	9303      	str	r3, [sp, #12]
 800e3c0:	2b09      	cmp	r3, #9
 800e3c2:	d8d8      	bhi.n	800e376 <prvTimerTask+0x42>
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	58f3      	ldr	r3, [r6, r3]
 800e3c8:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 800e3ca:	f7ff fa3f 	bl	800d84c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e3ce:	4b33      	ldr	r3, [pc, #204]	; (800e49c <prvTimerTask+0x168>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	68db      	ldr	r3, [r3, #12]
 800e3d4:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3d6:	1d38      	adds	r0, r7, #4
 800e3d8:	f7fe fc1d 	bl	800cc16 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e3dc:	69fb      	ldr	r3, [r7, #28]
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	d003      	beq.n	800e3ea <prvTimerTask+0xb6>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e4:	0038      	movs	r0, r7
 800e3e6:	4798      	blx	r3
 800e3e8:	e7c4      	b.n	800e374 <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800e3ea:	69bb      	ldr	r3, [r7, #24]
 800e3ec:	18e1      	adds	r1, r4, r3
 800e3ee:	0023      	movs	r3, r4
 800e3f0:	002a      	movs	r2, r5
 800e3f2:	0038      	movs	r0, r7
 800e3f4:	f7ff fe86 	bl	800e104 <prvInsertTimerInActiveList>
 800e3f8:	2801      	cmp	r0, #1
 800e3fa:	d1f2      	bne.n	800e3e2 <prvTimerTask+0xae>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e3fc:	2100      	movs	r1, #0
 800e3fe:	9100      	str	r1, [sp, #0]
 800e400:	000b      	movs	r3, r1
 800e402:	0022      	movs	r2, r4
 800e404:	0038      	movs	r0, r7
 800e406:	f7ff ff11 	bl	800e22c <xTimerGenericCommand>
			configASSERT( xResult );
 800e40a:	2800      	cmp	r0, #0
 800e40c:	d1e9      	bne.n	800e3e2 <prvTimerTask+0xae>
 800e40e:	b672      	cpsid	i
 800e410:	e7fe      	b.n	800e410 <prvTimerTask+0xdc>
		xNextExpireTime = ( TickType_t ) 0U;
 800e412:	2400      	movs	r4, #0
 800e414:	e7a5      	b.n	800e362 <prvTimerTask+0x2e>
					portYIELD_WITHIN_API();
 800e416:	f000 f8a7 	bl	800e568 <vPortYield>
 800e41a:	e7ab      	b.n	800e374 <prvTimerTask+0x40>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800e41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e41e:	69aa      	ldr	r2, [r5, #24]
 800e420:	4694      	mov	ip, r2
 800e422:	4463      	add	r3, ip
 800e424:	0019      	movs	r1, r3
 800e426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e428:	0002      	movs	r2, r0
 800e42a:	0028      	movs	r0, r5
 800e42c:	f7ff fe6a 	bl	800e104 <prvInsertTimerInActiveList>
 800e430:	2801      	cmp	r0, #1
 800e432:	d1a0      	bne.n	800e376 <prvTimerTask+0x42>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e434:	0028      	movs	r0, r5
 800e436:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e438:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e43a:	69eb      	ldr	r3, [r5, #28]
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	d19a      	bne.n	800e376 <prvTimerTask+0x42>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e442:	69a9      	ldr	r1, [r5, #24]
 800e444:	468c      	mov	ip, r1
 800e446:	4463      	add	r3, ip
 800e448:	001a      	movs	r2, r3
 800e44a:	2300      	movs	r3, #0
 800e44c:	9300      	str	r3, [sp, #0]
 800e44e:	2100      	movs	r1, #0
 800e450:	0028      	movs	r0, r5
 800e452:	f7ff feeb 	bl	800e22c <xTimerGenericCommand>
							configASSERT( xResult );
 800e456:	2800      	cmp	r0, #0
 800e458:	d18d      	bne.n	800e376 <prvTimerTask+0x42>
 800e45a:	b672      	cpsid	i
 800e45c:	e7fe      	b.n	800e45c <prvTimerTask+0x128>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e45e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e460:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e462:	2900      	cmp	r1, #0
 800e464:	d006      	beq.n	800e474 <prvTimerTask+0x140>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e466:	1841      	adds	r1, r0, r1
 800e468:	0003      	movs	r3, r0
 800e46a:	0002      	movs	r2, r0
 800e46c:	0028      	movs	r0, r5
 800e46e:	f7ff fe49 	bl	800e104 <prvInsertTimerInActiveList>
 800e472:	e780      	b.n	800e376 <prvTimerTask+0x42>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e474:	b672      	cpsid	i
 800e476:	e7fe      	b.n	800e476 <prvTimerTask+0x142>
					vPortFree( pxTimer );
 800e478:	0028      	movs	r0, r5
 800e47a:	f000 f999 	bl	800e7b0 <vPortFree>
 800e47e:	e77a      	b.n	800e376 <prvTimerTask+0x42>
	vTaskSuspendAll();
 800e480:	f7ff f944 	bl	800d70c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e484:	a808      	add	r0, sp, #32
 800e486:	f7ff fefd 	bl	800e284 <prvSampleTimeNow>
 800e48a:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800e48c:	9b08      	ldr	r3, [sp, #32]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d0bf      	beq.n	800e412 <prvTimerTask+0xde>
			( void ) xTaskResumeAll();
 800e492:	f7ff f9db 	bl	800d84c <xTaskResumeAll>
 800e496:	e76d      	b.n	800e374 <prvTimerTask+0x40>
 800e498:	08018d64 	.word	0x08018d64
 800e49c:	20001e48 	.word	0x20001e48
 800e4a0:	20001e7c 	.word	0x20001e7c

0800e4a4 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800e4a4:	b510      	push	{r4, lr}
 800e4a6:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800e4a8:	d101      	bne.n	800e4ae <pvTimerGetTimerID+0xa>
 800e4aa:	b672      	cpsid	i
 800e4ac:	e7fe      	b.n	800e4ac <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 800e4ae:	f000 f867 	bl	800e580 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800e4b2:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800e4b4:	f000 f870 	bl	800e598 <vPortExitCritical>

	return pvReturn;
}
 800e4b8:	0020      	movs	r0, r4
 800e4ba:	bd10      	pop	{r4, pc}

0800e4bc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e4bc:	4b03      	ldr	r3, [pc, #12]	; (800e4cc <prvTaskExitError+0x10>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	3301      	adds	r3, #1
 800e4c2:	d001      	beq.n	800e4c8 <prvTaskExitError+0xc>
 800e4c4:	b672      	cpsid	i
 800e4c6:	e7fe      	b.n	800e4c6 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800e4c8:	b672      	cpsid	i
 800e4ca:	e7fe      	b.n	800e4ca <prvTaskExitError+0xe>
 800e4cc:	200000a4 	.word	0x200000a4

0800e4d0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800e4d0:	4a06      	ldr	r2, [pc, #24]	; (800e4ec <pxCurrentTCBConst2>)
 800e4d2:	6813      	ldr	r3, [r2, #0]
 800e4d4:	6818      	ldr	r0, [r3, #0]
 800e4d6:	3020      	adds	r0, #32
 800e4d8:	f380 8809 	msr	PSP, r0
 800e4dc:	2002      	movs	r0, #2
 800e4de:	f380 8814 	msr	CONTROL, r0
 800e4e2:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800e4e4:	46ae      	mov	lr, r5
 800e4e6:	b662      	cpsie	i
 800e4e8:	bd00      	pop	{pc}
 800e4ea:	46c0      	nop			; (mov r8, r8)

0800e4ec <pxCurrentTCBConst2>:
 800e4ec:	20001d20 	.word	0x20001d20

0800e4f0 <pxPortInitialiseStack>:
{
 800e4f0:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e4f2:	1f03      	subs	r3, r0, #4
 800e4f4:	2480      	movs	r4, #128	; 0x80
 800e4f6:	0464      	lsls	r4, r4, #17
 800e4f8:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800e4fa:	3b04      	subs	r3, #4
 800e4fc:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e4fe:	3b04      	subs	r3, #4
 800e500:	4902      	ldr	r1, [pc, #8]	; (800e50c <pxPortInitialiseStack+0x1c>)
 800e502:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e504:	3b14      	subs	r3, #20
 800e506:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800e508:	3840      	subs	r0, #64	; 0x40
}
 800e50a:	bd10      	pop	{r4, pc}
 800e50c:	0800e4bd 	.word	0x0800e4bd

0800e510 <SVC_Handler>:
}
 800e510:	4770      	bx	lr
	...

0800e514 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e514:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800e516:	4b0f      	ldr	r3, [pc, #60]	; (800e554 <xPortStartScheduler+0x40>)
 800e518:	6819      	ldr	r1, [r3, #0]
 800e51a:	22ff      	movs	r2, #255	; 0xff
 800e51c:	0412      	lsls	r2, r2, #16
 800e51e:	430a      	orrs	r2, r1
 800e520:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800e522:	6819      	ldr	r1, [r3, #0]
 800e524:	22ff      	movs	r2, #255	; 0xff
 800e526:	0612      	lsls	r2, r2, #24
 800e528:	430a      	orrs	r2, r1
 800e52a:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e52c:	4b0a      	ldr	r3, [pc, #40]	; (800e558 <xPortStartScheduler+0x44>)
 800e52e:	6818      	ldr	r0, [r3, #0]
 800e530:	21fa      	movs	r1, #250	; 0xfa
 800e532:	0089      	lsls	r1, r1, #2
 800e534:	f7f1 fe0c 	bl	8000150 <__udivsi3>
 800e538:	3801      	subs	r0, #1
 800e53a:	4b08      	ldr	r3, [pc, #32]	; (800e55c <xPortStartScheduler+0x48>)
 800e53c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800e53e:	4b08      	ldr	r3, [pc, #32]	; (800e560 <xPortStartScheduler+0x4c>)
 800e540:	2207      	movs	r2, #7
 800e542:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800e544:	4b07      	ldr	r3, [pc, #28]	; (800e564 <xPortStartScheduler+0x50>)
 800e546:	2200      	movs	r2, #0
 800e548:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800e54a:	f7ff ffc1 	bl	800e4d0 <vPortStartFirstTask>
	prvTaskExitError();
 800e54e:	f7ff ffb5 	bl	800e4bc <prvTaskExitError>
 800e552:	46c0      	nop			; (mov r8, r8)
 800e554:	e000ed20 	.word	0xe000ed20
 800e558:	20000090 	.word	0x20000090
 800e55c:	e000e014 	.word	0xe000e014
 800e560:	e000e010 	.word	0xe000e010
 800e564:	200000a4 	.word	0x200000a4

0800e568 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800e568:	4b04      	ldr	r3, [pc, #16]	; (800e57c <vPortYield+0x14>)
 800e56a:	2280      	movs	r2, #128	; 0x80
 800e56c:	0552      	lsls	r2, r2, #21
 800e56e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800e570:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800e574:	f3bf 8f6f 	isb	sy
}
 800e578:	4770      	bx	lr
 800e57a:	46c0      	nop			; (mov r8, r8)
 800e57c:	e000ed04 	.word	0xe000ed04

0800e580 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800e580:	b672      	cpsid	i
    uxCriticalNesting++;
 800e582:	4a04      	ldr	r2, [pc, #16]	; (800e594 <vPortEnterCritical+0x14>)
 800e584:	6813      	ldr	r3, [r2, #0]
 800e586:	3301      	adds	r3, #1
 800e588:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800e58a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800e58e:	f3bf 8f6f 	isb	sy
}
 800e592:	4770      	bx	lr
 800e594:	200000a4 	.word	0x200000a4

0800e598 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800e598:	4b06      	ldr	r3, [pc, #24]	; (800e5b4 <vPortExitCritical+0x1c>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d101      	bne.n	800e5a4 <vPortExitCritical+0xc>
 800e5a0:	b672      	cpsid	i
 800e5a2:	e7fe      	b.n	800e5a2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 800e5a4:	3b01      	subs	r3, #1
 800e5a6:	4a03      	ldr	r2, [pc, #12]	; (800e5b4 <vPortExitCritical+0x1c>)
 800e5a8:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d100      	bne.n	800e5b0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 800e5ae:	b662      	cpsie	i
}
 800e5b0:	4770      	bx	lr
 800e5b2:	46c0      	nop			; (mov r8, r8)
 800e5b4:	200000a4 	.word	0x200000a4

0800e5b8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800e5b8:	f3ef 8010 	mrs	r0, PRIMASK
 800e5bc:	b672      	cpsid	i
 800e5be:	4770      	bx	lr
}
 800e5c0:	2000      	movs	r0, #0

0800e5c2 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800e5c2:	f380 8810 	msr	PRIMASK, r0
 800e5c6:	4770      	bx	lr

0800e5c8 <PendSV_Handler>:
	__asm volatile
 800e5c8:	f3ef 8009 	mrs	r0, PSP
 800e5cc:	4b0e      	ldr	r3, [pc, #56]	; (800e608 <pxCurrentTCBConst>)
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	3820      	subs	r0, #32
 800e5d2:	6010      	str	r0, [r2, #0]
 800e5d4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800e5d6:	4644      	mov	r4, r8
 800e5d8:	464d      	mov	r5, r9
 800e5da:	4656      	mov	r6, sl
 800e5dc:	465f      	mov	r7, fp
 800e5de:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800e5e0:	b508      	push	{r3, lr}
 800e5e2:	b672      	cpsid	i
 800e5e4:	f7ff fa4e 	bl	800da84 <vTaskSwitchContext>
 800e5e8:	b662      	cpsie	i
 800e5ea:	bc0c      	pop	{r2, r3}
 800e5ec:	6811      	ldr	r1, [r2, #0]
 800e5ee:	6808      	ldr	r0, [r1, #0]
 800e5f0:	3010      	adds	r0, #16
 800e5f2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800e5f4:	46a0      	mov	r8, r4
 800e5f6:	46a9      	mov	r9, r5
 800e5f8:	46b2      	mov	sl, r6
 800e5fa:	46bb      	mov	fp, r7
 800e5fc:	f380 8809 	msr	PSP, r0
 800e600:	3820      	subs	r0, #32
 800e602:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800e604:	4718      	bx	r3
 800e606:	46c0      	nop			; (mov r8, r8)

0800e608 <pxCurrentTCBConst>:
 800e608:	20001d20 	.word	0x20001d20

0800e60c <xPortSysTickHandler>:
{
 800e60c:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800e60e:	f7ff ffd3 	bl	800e5b8 <ulSetInterruptMaskFromISR>
 800e612:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800e614:	f7ff f88e 	bl	800d734 <xTaskIncrementTick>
 800e618:	2800      	cmp	r0, #0
 800e61a:	d003      	beq.n	800e624 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800e61c:	4b03      	ldr	r3, [pc, #12]	; (800e62c <xPortSysTickHandler+0x20>)
 800e61e:	2280      	movs	r2, #128	; 0x80
 800e620:	0552      	lsls	r2, r2, #21
 800e622:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800e624:	0020      	movs	r0, r4
 800e626:	f7ff ffcc 	bl	800e5c2 <vClearInterruptMaskFromISR>
}
 800e62a:	bd10      	pop	{r4, pc}
 800e62c:	e000ed04 	.word	0xe000ed04

0800e630 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e630:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e632:	4b12      	ldr	r3, [pc, #72]	; (800e67c <prvInsertBlockIntoFreeList+0x4c>)
 800e634:	681a      	ldr	r2, [r3, #0]
 800e636:	4282      	cmp	r2, r0
 800e638:	d319      	bcc.n	800e66e <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e63a:	685c      	ldr	r4, [r3, #4]
 800e63c:	1919      	adds	r1, r3, r4
 800e63e:	4288      	cmp	r0, r1
 800e640:	d103      	bne.n	800e64a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e642:	6841      	ldr	r1, [r0, #4]
 800e644:	1909      	adds	r1, r1, r4
 800e646:	6059      	str	r1, [r3, #4]
 800e648:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e64a:	6841      	ldr	r1, [r0, #4]
 800e64c:	1844      	adds	r4, r0, r1
 800e64e:	42a2      	cmp	r2, r4
 800e650:	d111      	bne.n	800e676 <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e652:	4c0b      	ldr	r4, [pc, #44]	; (800e680 <prvInsertBlockIntoFreeList+0x50>)
 800e654:	6824      	ldr	r4, [r4, #0]
 800e656:	42a2      	cmp	r2, r4
 800e658:	d00b      	beq.n	800e672 <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e65a:	6852      	ldr	r2, [r2, #4]
 800e65c:	1852      	adds	r2, r2, r1
 800e65e:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e660:	681a      	ldr	r2, [r3, #0]
 800e662:	6812      	ldr	r2, [r2, #0]
 800e664:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e666:	4298      	cmp	r0, r3
 800e668:	d000      	beq.n	800e66c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e66a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e66c:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e66e:	0013      	movs	r3, r2
 800e670:	e7e0      	b.n	800e634 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e672:	6002      	str	r2, [r0, #0]
 800e674:	e7f7      	b.n	800e666 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e676:	6002      	str	r2, [r0, #0]
 800e678:	e7f5      	b.n	800e666 <prvInsertBlockIntoFreeList+0x36>
 800e67a:	46c0      	nop			; (mov r8, r8)
 800e67c:	200068c8 	.word	0x200068c8
 800e680:	20001e80 	.word	0x20001e80

0800e684 <pvPortMalloc>:
{
 800e684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e686:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800e688:	f7ff f840 	bl	800d70c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800e68c:	4b41      	ldr	r3, [pc, #260]	; (800e794 <pvPortMalloc+0x110>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d00a      	beq.n	800e6aa <pvPortMalloc+0x26>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e694:	4b40      	ldr	r3, [pc, #256]	; (800e798 <pvPortMalloc+0x114>)
 800e696:	681f      	ldr	r7, [r3, #0]
 800e698:	423c      	tst	r4, r7
 800e69a:	d02a      	beq.n	800e6f2 <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 800e69c:	f7ff f8d6 	bl	800d84c <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800e6a0:	f7fd fbc8 	bl	800be34 <vApplicationMallocFailedHook>
 800e6a4:	2500      	movs	r5, #0
}
 800e6a6:	0028      	movs	r0, r5
 800e6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ulAddress = ( uint32_t ) ucHeap;
 800e6aa:	4a3c      	ldr	r2, [pc, #240]	; (800e79c <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e6ac:	0753      	lsls	r3, r2, #29
 800e6ae:	d01e      	beq.n	800e6ee <pvPortMalloc+0x6a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800e6b0:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800e6b2:	2307      	movs	r3, #7
 800e6b4:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800e6b6:	4b3a      	ldr	r3, [pc, #232]	; (800e7a0 <pvPortMalloc+0x11c>)
 800e6b8:	18d3      	adds	r3, r2, r3
 800e6ba:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800e6bc:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e6be:	4839      	ldr	r0, [pc, #228]	; (800e7a4 <pvPortMalloc+0x120>)
 800e6c0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e6c2:	2100      	movs	r1, #0
 800e6c4:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e6c6:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 800e6c8:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800e6ca:	2007      	movs	r0, #7
 800e6cc:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 800e6ce:	4831      	ldr	r0, [pc, #196]	; (800e794 <pvPortMalloc+0x110>)
 800e6d0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800e6d2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e6d4:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800e6d6:	1a99      	subs	r1, r3, r2
 800e6d8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e6da:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6dc:	4b32      	ldr	r3, [pc, #200]	; (800e7a8 <pvPortMalloc+0x124>)
 800e6de:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6e0:	4b32      	ldr	r3, [pc, #200]	; (800e7ac <pvPortMalloc+0x128>)
 800e6e2:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e6e4:	4b2c      	ldr	r3, [pc, #176]	; (800e798 <pvPortMalloc+0x114>)
 800e6e6:	2280      	movs	r2, #128	; 0x80
 800e6e8:	0612      	lsls	r2, r2, #24
 800e6ea:	601a      	str	r2, [r3, #0]
 800e6ec:	e7d2      	b.n	800e694 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e6ee:	4b2c      	ldr	r3, [pc, #176]	; (800e7a0 <pvPortMalloc+0x11c>)
 800e6f0:	e7e5      	b.n	800e6be <pvPortMalloc+0x3a>
			if( xWantedSize > 0 )
 800e6f2:	2c00      	cmp	r4, #0
 800e6f4:	d008      	beq.n	800e708 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 800e6f6:	0023      	movs	r3, r4
 800e6f8:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e6fa:	075a      	lsls	r2, r3, #29
 800e6fc:	d002      	beq.n	800e704 <pvPortMalloc+0x80>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e6fe:	2207      	movs	r2, #7
 800e700:	4393      	bics	r3, r2
 800e702:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e704:	2b00      	cmp	r3, #0
 800e706:	d102      	bne.n	800e70e <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 800e708:	f7ff f8a0 	bl	800d84c <xTaskResumeAll>
 800e70c:	e7c8      	b.n	800e6a0 <pvPortMalloc+0x1c>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e70e:	4a27      	ldr	r2, [pc, #156]	; (800e7ac <pvPortMalloc+0x128>)
 800e710:	6816      	ldr	r6, [r2, #0]
 800e712:	429e      	cmp	r6, r3
 800e714:	d302      	bcc.n	800e71c <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 800e716:	4a23      	ldr	r2, [pc, #140]	; (800e7a4 <pvPortMalloc+0x120>)
 800e718:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e71a:	e004      	b.n	800e726 <pvPortMalloc+0xa2>
	( void ) xTaskResumeAll();
 800e71c:	f7ff f896 	bl	800d84c <xTaskResumeAll>
 800e720:	e7be      	b.n	800e6a0 <pvPortMalloc+0x1c>
 800e722:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800e724:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e726:	6861      	ldr	r1, [r4, #4]
 800e728:	4299      	cmp	r1, r3
 800e72a:	d202      	bcs.n	800e732 <pvPortMalloc+0xae>
 800e72c:	6821      	ldr	r1, [r4, #0]
 800e72e:	2900      	cmp	r1, #0
 800e730:	d1f7      	bne.n	800e722 <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 800e732:	4918      	ldr	r1, [pc, #96]	; (800e794 <pvPortMalloc+0x110>)
 800e734:	6809      	ldr	r1, [r1, #0]
 800e736:	42a1      	cmp	r1, r4
 800e738:	d00b      	beq.n	800e752 <pvPortMalloc+0xce>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e73a:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e73c:	6821      	ldr	r1, [r4, #0]
 800e73e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e740:	6862      	ldr	r2, [r4, #4]
 800e742:	1ad2      	subs	r2, r2, r3
 800e744:	2a10      	cmp	r2, #16
 800e746:	d90b      	bls.n	800e760 <pvPortMalloc+0xdc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e748:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e74a:	0741      	lsls	r1, r0, #29
 800e74c:	d004      	beq.n	800e758 <pvPortMalloc+0xd4>
 800e74e:	b672      	cpsid	i
 800e750:	e7fe      	b.n	800e750 <pvPortMalloc+0xcc>
	( void ) xTaskResumeAll();
 800e752:	f7ff f87b 	bl	800d84c <xTaskResumeAll>
 800e756:	e7a3      	b.n	800e6a0 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e758:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e75a:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800e75c:	f7ff ff68 	bl	800e630 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e760:	6862      	ldr	r2, [r4, #4]
 800e762:	1ab6      	subs	r6, r6, r2
 800e764:	4911      	ldr	r1, [pc, #68]	; (800e7ac <pvPortMalloc+0x128>)
 800e766:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e768:	490f      	ldr	r1, [pc, #60]	; (800e7a8 <pvPortMalloc+0x124>)
 800e76a:	6809      	ldr	r1, [r1, #0]
 800e76c:	428e      	cmp	r6, r1
 800e76e:	d201      	bcs.n	800e774 <pvPortMalloc+0xf0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e770:	490d      	ldr	r1, [pc, #52]	; (800e7a8 <pvPortMalloc+0x124>)
 800e772:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e774:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e776:	4317      	orrs	r7, r2
 800e778:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e77a:	2300      	movs	r3, #0
 800e77c:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800e77e:	f7ff f865 	bl	800d84c <xTaskResumeAll>
		if( pvReturn == NULL )
 800e782:	2d00      	cmp	r5, #0
 800e784:	d100      	bne.n	800e788 <pvPortMalloc+0x104>
 800e786:	e78b      	b.n	800e6a0 <pvPortMalloc+0x1c>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e788:	076b      	lsls	r3, r5, #29
 800e78a:	d100      	bne.n	800e78e <pvPortMalloc+0x10a>
 800e78c:	e78b      	b.n	800e6a6 <pvPortMalloc+0x22>
 800e78e:	b672      	cpsid	i
 800e790:	e7fe      	b.n	800e790 <pvPortMalloc+0x10c>
 800e792:	46c0      	nop			; (mov r8, r8)
 800e794:	20001e80 	.word	0x20001e80
 800e798:	200068bc 	.word	0x200068bc
 800e79c:	20001e84 	.word	0x20001e84
 800e7a0:	00004a38 	.word	0x00004a38
 800e7a4:	200068c8 	.word	0x200068c8
 800e7a8:	200068c4 	.word	0x200068c4
 800e7ac:	200068c0 	.word	0x200068c0

0800e7b0 <vPortFree>:
{
 800e7b0:	b510      	push	{r4, lr}
	if( pv != NULL )
 800e7b2:	2800      	cmp	r0, #0
 800e7b4:	d020      	beq.n	800e7f8 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e7b6:	0003      	movs	r3, r0
 800e7b8:	3b08      	subs	r3, #8
 800e7ba:	685b      	ldr	r3, [r3, #4]
 800e7bc:	4a0f      	ldr	r2, [pc, #60]	; (800e7fc <vPortFree+0x4c>)
 800e7be:	6812      	ldr	r2, [r2, #0]
 800e7c0:	421a      	tst	r2, r3
 800e7c2:	d101      	bne.n	800e7c8 <vPortFree+0x18>
 800e7c4:	b672      	cpsid	i
 800e7c6:	e7fe      	b.n	800e7c6 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e7c8:	0001      	movs	r1, r0
 800e7ca:	3908      	subs	r1, #8
 800e7cc:	6809      	ldr	r1, [r1, #0]
 800e7ce:	2900      	cmp	r1, #0
 800e7d0:	d001      	beq.n	800e7d6 <vPortFree+0x26>
 800e7d2:	b672      	cpsid	i
 800e7d4:	e7fe      	b.n	800e7d4 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e7d6:	3808      	subs	r0, #8
 800e7d8:	0004      	movs	r4, r0
 800e7da:	4393      	bics	r3, r2
 800e7dc:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800e7de:	f7fe ff95 	bl	800d70c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e7e2:	4a07      	ldr	r2, [pc, #28]	; (800e800 <vPortFree+0x50>)
 800e7e4:	6863      	ldr	r3, [r4, #4]
 800e7e6:	6811      	ldr	r1, [r2, #0]
 800e7e8:	468c      	mov	ip, r1
 800e7ea:	4463      	add	r3, ip
 800e7ec:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e7ee:	0020      	movs	r0, r4
 800e7f0:	f7ff ff1e 	bl	800e630 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800e7f4:	f7ff f82a 	bl	800d84c <xTaskResumeAll>
}
 800e7f8:	bd10      	pop	{r4, pc}
 800e7fa:	46c0      	nop			; (mov r8, r8)
 800e7fc:	200068bc 	.word	0x200068bc
 800e800:	200068c0 	.word	0x200068c0

0800e804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e804:	b510      	push	{r4, lr}
 800e806:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800e808:	f001 fd5a 	bl	80102c0 <HAL_RCC_GetHCLKFreq>
 800e80c:	21fa      	movs	r1, #250	; 0xfa
 800e80e:	0089      	lsls	r1, r1, #2
 800e810:	f7f1 fc9e 	bl	8000150 <__udivsi3>
 800e814:	f000 f88a 	bl	800e92c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800e818:	2001      	movs	r0, #1
 800e81a:	2200      	movs	r2, #0
 800e81c:	0021      	movs	r1, r4
 800e81e:	4240      	negs	r0, r0
 800e820:	f000 f83c 	bl	800e89c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800e824:	2000      	movs	r0, #0
 800e826:	bd10      	pop	{r4, pc}

0800e828 <HAL_Init>:
{
 800e828:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e82a:	4a06      	ldr	r2, [pc, #24]	; (800e844 <HAL_Init+0x1c>)
 800e82c:	6813      	ldr	r3, [r2, #0]
 800e82e:	2110      	movs	r1, #16
 800e830:	430b      	orrs	r3, r1
 800e832:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800e834:	2000      	movs	r0, #0
 800e836:	f7ff ffe5 	bl	800e804 <HAL_InitTick>
  HAL_MspInit();
 800e83a:	f001 f8e9 	bl	800fa10 <HAL_MspInit>
}
 800e83e:	2000      	movs	r0, #0
 800e840:	bd10      	pop	{r4, pc}
 800e842:	46c0      	nop			; (mov r8, r8)
 800e844:	40022000 	.word	0x40022000

0800e848 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800e848:	4a02      	ldr	r2, [pc, #8]	; (800e854 <HAL_IncTick+0xc>)
 800e84a:	6813      	ldr	r3, [r2, #0]
 800e84c:	3301      	adds	r3, #1
 800e84e:	6013      	str	r3, [r2, #0]
}
 800e850:	4770      	bx	lr
 800e852:	46c0      	nop			; (mov r8, r8)
 800e854:	200068d0 	.word	0x200068d0

0800e858 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800e858:	4b01      	ldr	r3, [pc, #4]	; (800e860 <HAL_GetTick+0x8>)
 800e85a:	6818      	ldr	r0, [r3, #0]
}
 800e85c:	4770      	bx	lr
 800e85e:	46c0      	nop			; (mov r8, r8)
 800e860:	200068d0 	.word	0x200068d0

0800e864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800e864:	b510      	push	{r4, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800e86a:	f7ff fff5 	bl	800e858 <HAL_GetTick>
 800e86e:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800e870:	f7ff fff2 	bl	800e858 <HAL_GetTick>
 800e874:	9b01      	ldr	r3, [sp, #4]
 800e876:	1b00      	subs	r0, r0, r4
 800e878:	4298      	cmp	r0, r3
 800e87a:	d3f9      	bcc.n	800e870 <HAL_Delay+0xc>
  {
  }
}
 800e87c:	b002      	add	sp, #8
 800e87e:	bd10      	pop	{r4, pc}

0800e880 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800e880:	4b01      	ldr	r3, [pc, #4]	; (800e888 <HAL_GetREVID+0x8>)
 800e882:	6818      	ldr	r0, [r3, #0]
 800e884:	0c00      	lsrs	r0, r0, #16
}
 800e886:	4770      	bx	lr
 800e888:	40015800 	.word	0x40015800

0800e88c <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800e88c:	4b02      	ldr	r3, [pc, #8]	; (800e898 <HAL_GetDEVID+0xc>)
 800e88e:	6818      	ldr	r0, [r3, #0]
 800e890:	0500      	lsls	r0, r0, #20
 800e892:	0d00      	lsrs	r0, r0, #20
}
 800e894:	4770      	bx	lr
 800e896:	46c0      	nop			; (mov r8, r8)
 800e898:	40015800 	.word	0x40015800

0800e89c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e89c:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	db14      	blt.n	800e8cc <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e8a2:	0883      	lsrs	r3, r0, #2
 800e8a4:	009b      	lsls	r3, r3, #2
 800e8a6:	4a15      	ldr	r2, [pc, #84]	; (800e8fc <HAL_NVIC_SetPriority+0x60>)
 800e8a8:	4694      	mov	ip, r2
 800e8aa:	4463      	add	r3, ip
 800e8ac:	26c0      	movs	r6, #192	; 0xc0
 800e8ae:	00b6      	lsls	r6, r6, #2
 800e8b0:	599d      	ldr	r5, [r3, r6]
 800e8b2:	2403      	movs	r4, #3
 800e8b4:	4020      	ands	r0, r4
 800e8b6:	00c0      	lsls	r0, r0, #3
 800e8b8:	22ff      	movs	r2, #255	; 0xff
 800e8ba:	0014      	movs	r4, r2
 800e8bc:	4084      	lsls	r4, r0
 800e8be:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e8c0:	0189      	lsls	r1, r1, #6
 800e8c2:	400a      	ands	r2, r1
 800e8c4:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e8c6:	432a      	orrs	r2, r5
 800e8c8:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800e8ca:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e8cc:	b2c0      	uxtb	r0, r0
 800e8ce:	230f      	movs	r3, #15
 800e8d0:	4003      	ands	r3, r0
 800e8d2:	3b08      	subs	r3, #8
 800e8d4:	089b      	lsrs	r3, r3, #2
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	4a09      	ldr	r2, [pc, #36]	; (800e900 <HAL_NVIC_SetPriority+0x64>)
 800e8da:	4694      	mov	ip, r2
 800e8dc:	4463      	add	r3, ip
 800e8de:	69dd      	ldr	r5, [r3, #28]
 800e8e0:	2203      	movs	r2, #3
 800e8e2:	4010      	ands	r0, r2
 800e8e4:	00c0      	lsls	r0, r0, #3
 800e8e6:	24ff      	movs	r4, #255	; 0xff
 800e8e8:	0022      	movs	r2, r4
 800e8ea:	4082      	lsls	r2, r0
 800e8ec:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e8ee:	0189      	lsls	r1, r1, #6
 800e8f0:	400c      	ands	r4, r1
 800e8f2:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e8f4:	432c      	orrs	r4, r5
 800e8f6:	61dc      	str	r4, [r3, #28]
 800e8f8:	e7e7      	b.n	800e8ca <HAL_NVIC_SetPriority+0x2e>
 800e8fa:	46c0      	nop			; (mov r8, r8)
 800e8fc:	e000e100 	.word	0xe000e100
 800e900:	e000ed00 	.word	0xe000ed00

0800e904 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800e904:	231f      	movs	r3, #31
 800e906:	4018      	ands	r0, r3
 800e908:	3b1e      	subs	r3, #30
 800e90a:	4083      	lsls	r3, r0
 800e90c:	4a01      	ldr	r2, [pc, #4]	; (800e914 <HAL_NVIC_EnableIRQ+0x10>)
 800e90e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800e910:	4770      	bx	lr
 800e912:	46c0      	nop			; (mov r8, r8)
 800e914:	e000e100 	.word	0xe000e100

0800e918 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800e918:	231f      	movs	r3, #31
 800e91a:	4018      	ands	r0, r3
 800e91c:	3b1e      	subs	r3, #30
 800e91e:	4083      	lsls	r3, r0
 800e920:	4901      	ldr	r1, [pc, #4]	; (800e928 <HAL_NVIC_DisableIRQ+0x10>)
 800e922:	2280      	movs	r2, #128	; 0x80
 800e924:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800e926:	4770      	bx	lr
 800e928:	e000e100 	.word	0xe000e100

0800e92c <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800e92c:	1e43      	subs	r3, r0, #1
 800e92e:	4a0a      	ldr	r2, [pc, #40]	; (800e958 <HAL_SYSTICK_Config+0x2c>)
 800e930:	2001      	movs	r0, #1
 800e932:	4293      	cmp	r3, r2
 800e934:	d80e      	bhi.n	800e954 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e936:	4a09      	ldr	r2, [pc, #36]	; (800e95c <HAL_SYSTICK_Config+0x30>)
 800e938:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e93a:	4809      	ldr	r0, [pc, #36]	; (800e960 <HAL_SYSTICK_Config+0x34>)
 800e93c:	6a03      	ldr	r3, [r0, #32]
 800e93e:	021b      	lsls	r3, r3, #8
 800e940:	0a1b      	lsrs	r3, r3, #8
 800e942:	21c0      	movs	r1, #192	; 0xc0
 800e944:	0609      	lsls	r1, r1, #24
 800e946:	430b      	orrs	r3, r1
 800e948:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e94a:	2300      	movs	r3, #0
 800e94c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e94e:	3307      	adds	r3, #7
 800e950:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e952:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800e954:	4770      	bx	lr
 800e956:	46c0      	nop			; (mov r8, r8)
 800e958:	00ffffff 	.word	0x00ffffff
 800e95c:	e000e010 	.word	0xe000e010
 800e960:	e000ed00 	.word	0xe000ed00

0800e964 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800e964:	2804      	cmp	r0, #4
 800e966:	d005      	beq.n	800e974 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800e968:	4a05      	ldr	r2, [pc, #20]	; (800e980 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800e96a:	6813      	ldr	r3, [r2, #0]
 800e96c:	2104      	movs	r1, #4
 800e96e:	438b      	bics	r3, r1
 800e970:	6013      	str	r3, [r2, #0]
  }
}
 800e972:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800e974:	4a02      	ldr	r2, [pc, #8]	; (800e980 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800e976:	6813      	ldr	r3, [r2, #0]
 800e978:	2104      	movs	r1, #4
 800e97a:	430b      	orrs	r3, r1
 800e97c:	6013      	str	r3, [r2, #0]
 800e97e:	e7f8      	b.n	800e972 <HAL_SYSTICK_CLKSourceConfig+0xe>
 800e980:	e000e010 	.word	0xe000e010

0800e984 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800e984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e986:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800e988:	0891      	lsrs	r1, r2, #2
 800e98a:	d013      	beq.n	800e9b4 <CRC_Handle_8+0x30>
 800e98c:	0034      	movs	r4, r6
 800e98e:	2303      	movs	r3, #3
 800e990:	0017      	movs	r7, r2
 800e992:	439f      	bics	r7, r3
 800e994:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800e996:	7823      	ldrb	r3, [r4, #0]
 800e998:	061b      	lsls	r3, r3, #24
 800e99a:	7865      	ldrb	r5, [r4, #1]
 800e99c:	042d      	lsls	r5, r5, #16
 800e99e:	432b      	orrs	r3, r5
 800e9a0:	78e5      	ldrb	r5, [r4, #3]
 800e9a2:	432b      	orrs	r3, r5
 800e9a4:	78a5      	ldrb	r5, [r4, #2]
 800e9a6:	022d      	lsls	r5, r5, #8
 800e9a8:	432b      	orrs	r3, r5
 800e9aa:	6805      	ldr	r5, [r0, #0]
 800e9ac:	602b      	str	r3, [r5, #0]
 800e9ae:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 800e9b0:	42bc      	cmp	r4, r7
 800e9b2:	d1f0      	bne.n	800e996 <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800e9b4:	2303      	movs	r3, #3
 800e9b6:	401a      	ands	r2, r3
 800e9b8:	d01e      	beq.n	800e9f8 <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 800e9ba:	2a01      	cmp	r2, #1
 800e9bc:	d00a      	beq.n	800e9d4 <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 800e9be:	2a02      	cmp	r2, #2
 800e9c0:	d10d      	bne.n	800e9de <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800e9c2:	0089      	lsls	r1, r1, #2
 800e9c4:	5c72      	ldrb	r2, [r6, r1]
 800e9c6:	0212      	lsls	r2, r2, #8
 800e9c8:	1871      	adds	r1, r6, r1
 800e9ca:	784b      	ldrb	r3, [r1, #1]
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	6802      	ldr	r2, [r0, #0]
 800e9d0:	8013      	strh	r3, [r2, #0]
 800e9d2:	e011      	b.n	800e9f8 <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800e9d4:	0089      	lsls	r1, r1, #2
 800e9d6:	5d8b      	ldrb	r3, [r1, r6]
 800e9d8:	6802      	ldr	r2, [r0, #0]
 800e9da:	7013      	strb	r3, [r2, #0]
 800e9dc:	e00c      	b.n	800e9f8 <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 800e9de:	2a03      	cmp	r2, #3
 800e9e0:	d10a      	bne.n	800e9f8 <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800e9e2:	0089      	lsls	r1, r1, #2
 800e9e4:	5c72      	ldrb	r2, [r6, r1]
 800e9e6:	0212      	lsls	r2, r2, #8
 800e9e8:	1871      	adds	r1, r6, r1
 800e9ea:	784b      	ldrb	r3, [r1, #1]
 800e9ec:	4313      	orrs	r3, r2
 800e9ee:	6802      	ldr	r2, [r0, #0]
 800e9f0:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800e9f2:	788b      	ldrb	r3, [r1, #2]
 800e9f4:	6802      	ldr	r2, [r0, #0]
 800e9f6:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800e9f8:	6803      	ldr	r3, [r0, #0]
 800e9fa:	6818      	ldr	r0, [r3, #0]
}
 800e9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e9fe <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800e9fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea00:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 800ea02:	0852      	lsrs	r2, r2, #1
 800ea04:	d00b      	beq.n	800ea1e <CRC_Handle_16+0x20>
 800ea06:	000c      	movs	r4, r1
 800ea08:	0097      	lsls	r7, r2, #2
 800ea0a:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800ea0c:	8823      	ldrh	r3, [r4, #0]
 800ea0e:	041b      	lsls	r3, r3, #16
 800ea10:	8866      	ldrh	r6, [r4, #2]
 800ea12:	4333      	orrs	r3, r6
 800ea14:	6806      	ldr	r6, [r0, #0]
 800ea16:	6033      	str	r3, [r6, #0]
 800ea18:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 800ea1a:	42bc      	cmp	r4, r7
 800ea1c:	d1f6      	bne.n	800ea0c <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 800ea1e:	07eb      	lsls	r3, r5, #31
 800ea20:	d503      	bpl.n	800ea2a <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800ea22:	0092      	lsls	r2, r2, #2
 800ea24:	5a53      	ldrh	r3, [r2, r1]
 800ea26:	6802      	ldr	r2, [r0, #0]
 800ea28:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800ea2a:	6803      	ldr	r3, [r0, #0]
 800ea2c:	6818      	ldr	r0, [r3, #0]
}
 800ea2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea30 <HAL_CRC_Init>:
{
 800ea30:	b510      	push	{r4, lr}
 800ea32:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800ea34:	d029      	beq.n	800ea8a <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800ea36:	7f43      	ldrb	r3, [r0, #29]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d01e      	beq.n	800ea7a <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800ea3c:	2302      	movs	r3, #2
 800ea3e:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800ea40:	0020      	movs	r0, r4
 800ea42:	f000 f8b1 	bl	800eba8 <HAL_CRCEx_Init>
 800ea46:	2800      	cmp	r0, #0
 800ea48:	d121      	bne.n	800ea8e <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800ea4a:	7963      	ldrb	r3, [r4, #5]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d118      	bne.n	800ea82 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800ea50:	6823      	ldr	r3, [r4, #0]
 800ea52:	2201      	movs	r2, #1
 800ea54:	4252      	negs	r2, r2
 800ea56:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800ea58:	6822      	ldr	r2, [r4, #0]
 800ea5a:	6893      	ldr	r3, [r2, #8]
 800ea5c:	2160      	movs	r1, #96	; 0x60
 800ea5e:	438b      	bics	r3, r1
 800ea60:	6961      	ldr	r1, [r4, #20]
 800ea62:	430b      	orrs	r3, r1
 800ea64:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800ea66:	6822      	ldr	r2, [r4, #0]
 800ea68:	6893      	ldr	r3, [r2, #8]
 800ea6a:	2180      	movs	r1, #128	; 0x80
 800ea6c:	438b      	bics	r3, r1
 800ea6e:	69a1      	ldr	r1, [r4, #24]
 800ea70:	430b      	orrs	r3, r1
 800ea72:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800ea74:	2301      	movs	r3, #1
 800ea76:	7763      	strb	r3, [r4, #29]
}
 800ea78:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800ea7a:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800ea7c:	f7fc ff84 	bl	800b988 <HAL_CRC_MspInit>
 800ea80:	e7dc      	b.n	800ea3c <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800ea82:	6823      	ldr	r3, [r4, #0]
 800ea84:	6922      	ldr	r2, [r4, #16]
 800ea86:	611a      	str	r2, [r3, #16]
 800ea88:	e7e6      	b.n	800ea58 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 800ea8a:	2001      	movs	r0, #1
 800ea8c:	e7f4      	b.n	800ea78 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 800ea8e:	2001      	movs	r0, #1
 800ea90:	e7f2      	b.n	800ea78 <HAL_CRC_Init+0x48>

0800ea92 <HAL_CRC_Accumulate>:
{
 800ea92:	b510      	push	{r4, lr}
 800ea94:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800ea96:	7f03      	ldrb	r3, [r0, #28]
 800ea98:	2b01      	cmp	r3, #1
 800ea9a:	d024      	beq.n	800eae6 <HAL_CRC_Accumulate+0x54>
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800eaa4:	6a03      	ldr	r3, [r0, #32]
 800eaa6:	2b02      	cmp	r3, #2
 800eaa8:	d01a      	beq.n	800eae0 <HAL_CRC_Accumulate+0x4e>
 800eaaa:	2b03      	cmp	r3, #3
 800eaac:	d007      	beq.n	800eabe <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800eaae:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800eab0:	2b01      	cmp	r3, #1
 800eab2:	d011      	beq.n	800ead8 <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 800eab4:	2301      	movs	r3, #1
 800eab6:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800eab8:	2300      	movs	r3, #0
 800eaba:	7723      	strb	r3, [r4, #28]
}
 800eabc:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 800eabe:	2a00      	cmp	r2, #0
 800eac0:	d007      	beq.n	800ead2 <HAL_CRC_Accumulate+0x40>
 800eac2:	000b      	movs	r3, r1
 800eac4:	0092      	lsls	r2, r2, #2
 800eac6:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800eac8:	6822      	ldr	r2, [r4, #0]
 800eaca:	cb01      	ldmia	r3!, {r0}
 800eacc:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 800eace:	428b      	cmp	r3, r1
 800ead0:	d1fa      	bne.n	800eac8 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 800ead2:	6823      	ldr	r3, [r4, #0]
 800ead4:	6818      	ldr	r0, [r3, #0]
      break;
 800ead6:	e7ed      	b.n	800eab4 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800ead8:	0020      	movs	r0, r4
 800eada:	f7ff ff53 	bl	800e984 <CRC_Handle_8>
      break;
 800eade:	e7e9      	b.n	800eab4 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800eae0:	f7ff ff8d 	bl	800e9fe <CRC_Handle_16>
      break;
 800eae4:	e7e6      	b.n	800eab4 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 800eae6:	2002      	movs	r0, #2
 800eae8:	e7e8      	b.n	800eabc <HAL_CRC_Accumulate+0x2a>

0800eaea <HAL_CRC_Calculate>:
{
 800eaea:	b570      	push	{r4, r5, r6, lr}
 800eaec:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800eaee:	7f03      	ldrb	r3, [r0, #28]
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	d029      	beq.n	800eb48 <HAL_CRC_Calculate+0x5e>
 800eaf4:	2501      	movs	r5, #1
 800eaf6:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800eaf8:	2302      	movs	r3, #2
 800eafa:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800eafc:	6800      	ldr	r0, [r0, #0]
 800eafe:	6883      	ldr	r3, [r0, #8]
 800eb00:	432b      	orrs	r3, r5
 800eb02:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 800eb04:	6a23      	ldr	r3, [r4, #32]
 800eb06:	2b02      	cmp	r3, #2
 800eb08:	d01a      	beq.n	800eb40 <HAL_CRC_Calculate+0x56>
 800eb0a:	2b03      	cmp	r3, #3
 800eb0c:	d007      	beq.n	800eb1e <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 800eb0e:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d011      	beq.n	800eb38 <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 800eb14:	2301      	movs	r3, #1
 800eb16:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 800eb18:	2300      	movs	r3, #0
 800eb1a:	7723      	strb	r3, [r4, #28]
}
 800eb1c:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 800eb1e:	2a00      	cmp	r2, #0
 800eb20:	d007      	beq.n	800eb32 <HAL_CRC_Calculate+0x48>
 800eb22:	000b      	movs	r3, r1
 800eb24:	0092      	lsls	r2, r2, #2
 800eb26:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 800eb28:	6820      	ldr	r0, [r4, #0]
 800eb2a:	cb20      	ldmia	r3!, {r5}
 800eb2c:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 800eb2e:	428b      	cmp	r3, r1
 800eb30:	d1fa      	bne.n	800eb28 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 800eb32:	6823      	ldr	r3, [r4, #0]
 800eb34:	6818      	ldr	r0, [r3, #0]
      break;
 800eb36:	e7ed      	b.n	800eb14 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 800eb38:	0020      	movs	r0, r4
 800eb3a:	f7ff ff23 	bl	800e984 <CRC_Handle_8>
      break;
 800eb3e:	e7e9      	b.n	800eb14 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 800eb40:	0020      	movs	r0, r4
 800eb42:	f7ff ff5c 	bl	800e9fe <CRC_Handle_16>
      break;
 800eb46:	e7e5      	b.n	800eb14 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 800eb48:	2002      	movs	r0, #2
 800eb4a:	e7e7      	b.n	800eb1c <HAL_CRC_Calculate+0x32>

0800eb4c <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800eb4c:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800eb4e:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 800eb50:	2501      	movs	r5, #1
 800eb52:	002c      	movs	r4, r5
 800eb54:	409c      	lsls	r4, r3
 800eb56:	4221      	tst	r1, r4
 800eb58:	d10b      	bne.n	800eb72 <HAL_CRCEx_Polynomial_Set+0x26>
 800eb5a:	3b01      	subs	r3, #1
 800eb5c:	d2f9      	bcs.n	800eb52 <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 800eb5e:	2a10      	cmp	r2, #16
 800eb60:	d01c      	beq.n	800eb9c <HAL_CRCEx_Polynomial_Set+0x50>
 800eb62:	2a18      	cmp	r2, #24
 800eb64:	d01e      	beq.n	800eba4 <HAL_CRCEx_Polynomial_Set+0x58>
 800eb66:	2a08      	cmp	r2, #8
 800eb68:	d109      	bne.n	800eb7e <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 800eb6a:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 800eb6c:	2b0f      	cmp	r3, #15
 800eb6e:	d906      	bls.n	800eb7e <HAL_CRCEx_Polynomial_Set+0x32>
 800eb70:	e00e      	b.n	800eb90 <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 800eb72:	2a10      	cmp	r2, #16
 800eb74:	d012      	beq.n	800eb9c <HAL_CRCEx_Polynomial_Set+0x50>
 800eb76:	2a18      	cmp	r2, #24
 800eb78:	d00c      	beq.n	800eb94 <HAL_CRCEx_Polynomial_Set+0x48>
 800eb7a:	2a08      	cmp	r2, #8
 800eb7c:	d0f5      	beq.n	800eb6a <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 800eb7e:	6803      	ldr	r3, [r0, #0]
 800eb80:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800eb82:	6801      	ldr	r1, [r0, #0]
 800eb84:	688b      	ldr	r3, [r1, #8]
 800eb86:	2018      	movs	r0, #24
 800eb88:	4383      	bics	r3, r0
 800eb8a:	431a      	orrs	r2, r3
 800eb8c:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 800eb8e:	2400      	movs	r4, #0
}
 800eb90:	0020      	movs	r0, r4
 800eb92:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 800eb94:	2b06      	cmp	r3, #6
 800eb96:	d9f2      	bls.n	800eb7e <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 800eb98:	2401      	movs	r4, #1
 800eb9a:	e7f9      	b.n	800eb90 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 800eb9c:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 800eb9e:	2b07      	cmp	r3, #7
 800eba0:	d9ed      	bls.n	800eb7e <HAL_CRCEx_Polynomial_Set+0x32>
 800eba2:	e7f5      	b.n	800eb90 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 800eba4:	2401      	movs	r4, #1
 800eba6:	e7f3      	b.n	800eb90 <HAL_CRCEx_Polynomial_Set+0x44>

0800eba8 <HAL_CRCEx_Init>:
{
 800eba8:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800ebaa:	7903      	ldrb	r3, [r0, #4]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d109      	bne.n	800ebc4 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 800ebb0:	6803      	ldr	r3, [r0, #0]
 800ebb2:	4a08      	ldr	r2, [pc, #32]	; (800ebd4 <HAL_CRCEx_Init+0x2c>)
 800ebb4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800ebb6:	6802      	ldr	r2, [r0, #0]
 800ebb8:	6893      	ldr	r3, [r2, #8]
 800ebba:	2118      	movs	r1, #24
 800ebbc:	438b      	bics	r3, r1
 800ebbe:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 800ebc0:	2000      	movs	r0, #0
}
 800ebc2:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800ebc4:	68c2      	ldr	r2, [r0, #12]
 800ebc6:	6881      	ldr	r1, [r0, #8]
 800ebc8:	f7ff ffc0 	bl	800eb4c <HAL_CRCEx_Polynomial_Set>
 800ebcc:	1e43      	subs	r3, r0, #1
 800ebce:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 800ebd0:	b2c0      	uxtb	r0, r0
 800ebd2:	e7f6      	b.n	800ebc2 <HAL_CRCEx_Init+0x1a>
 800ebd4:	04c11db7 	.word	0x04c11db7

0800ebd8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800ebd8:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800ebda:	2800      	cmp	r0, #0
 800ebdc:	d022      	beq.n	800ec24 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 800ebde:	2321      	movs	r3, #33	; 0x21
 800ebe0:	5cc3      	ldrb	r3, [r0, r3]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d102      	bne.n	800ebec <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 800ebe6:	3320      	adds	r3, #32
 800ebe8:	2200      	movs	r2, #0
 800ebea:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ebec:	2121      	movs	r1, #33	; 0x21
 800ebee:	2302      	movs	r3, #2
 800ebf0:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ebf2:	6804      	ldr	r4, [r0, #0]
 800ebf4:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800ebf6:	4a0c      	ldr	r2, [pc, #48]	; (800ec28 <HAL_DMA_Init+0x50>)
 800ebf8:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ebfa:	6843      	ldr	r3, [r0, #4]
 800ebfc:	6885      	ldr	r5, [r0, #8]
 800ebfe:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ec00:	68c5      	ldr	r5, [r0, #12]
 800ec02:	432b      	orrs	r3, r5
 800ec04:	6905      	ldr	r5, [r0, #16]
 800ec06:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ec08:	6945      	ldr	r5, [r0, #20]
 800ec0a:	432b      	orrs	r3, r5
 800ec0c:	6985      	ldr	r5, [r0, #24]
 800ec0e:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800ec10:	69c5      	ldr	r5, [r0, #28]
 800ec12:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800ec14:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800ec16:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800ec1c:	3301      	adds	r3, #1
 800ec1e:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 800ec20:	2000      	movs	r0, #0
}  
 800ec22:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800ec24:	2001      	movs	r0, #1
 800ec26:	e7fc      	b.n	800ec22 <HAL_DMA_Init+0x4a>
 800ec28:	ffffc00f 	.word	0xffffc00f

0800ec2c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ec2c:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 800ec2e:	2420      	movs	r4, #32
 800ec30:	5d04      	ldrb	r4, [r0, r4]
 800ec32:	2c01      	cmp	r4, #1
 800ec34:	d02d      	beq.n	800ec92 <HAL_DMA_Start_IT+0x66>
 800ec36:	2601      	movs	r6, #1
 800ec38:	2420      	movs	r4, #32
 800ec3a:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 800ec3c:	3401      	adds	r4, #1
 800ec3e:	2502      	movs	r5, #2
 800ec40:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800ec42:	6805      	ldr	r5, [r0, #0]
 800ec44:	682c      	ldr	r4, [r5, #0]
 800ec46:	43b4      	bics	r4, r6
 800ec48:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ec4a:	6804      	ldr	r4, [r0, #0]
 800ec4c:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ec4e:	6843      	ldr	r3, [r0, #4]
 800ec50:	2b10      	cmp	r3, #16
 800ec52:	d019      	beq.n	800ec88 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800ec54:	6803      	ldr	r3, [r0, #0]
 800ec56:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800ec58:	6803      	ldr	r3, [r0, #0]
 800ec5a:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800ec5c:	6802      	ldr	r2, [r0, #0]
 800ec5e:	6813      	ldr	r3, [r2, #0]
 800ec60:	2102      	movs	r1, #2
 800ec62:	430b      	orrs	r3, r1
 800ec64:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800ec66:	6802      	ldr	r2, [r0, #0]
 800ec68:	6813      	ldr	r3, [r2, #0]
 800ec6a:	3102      	adds	r1, #2
 800ec6c:	430b      	orrs	r3, r1
 800ec6e:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 800ec70:	6802      	ldr	r2, [r0, #0]
 800ec72:	6813      	ldr	r3, [r2, #0]
 800ec74:	3104      	adds	r1, #4
 800ec76:	430b      	orrs	r3, r1
 800ec78:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 800ec7a:	6802      	ldr	r2, [r0, #0]
 800ec7c:	6813      	ldr	r3, [r2, #0]
 800ec7e:	3907      	subs	r1, #7
 800ec80:	430b      	orrs	r3, r1
 800ec82:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 800ec84:	2000      	movs	r0, #0
} 
 800ec86:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 800ec88:	6803      	ldr	r3, [r0, #0]
 800ec8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800ec8c:	6803      	ldr	r3, [r0, #0]
 800ec8e:	60d9      	str	r1, [r3, #12]
 800ec90:	e7e4      	b.n	800ec5c <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 800ec92:	2002      	movs	r0, #2
 800ec94:	e7f7      	b.n	800ec86 <HAL_DMA_Start_IT+0x5a>

0800ec96 <HAL_DMA_Abort>:
{
 800ec96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec98:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800ec9a:	6802      	ldr	r2, [r0, #0]
 800ec9c:	6813      	ldr	r3, [r2, #0]
 800ec9e:	2101      	movs	r1, #1
 800eca0:	438b      	bics	r3, r1
 800eca2:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800eca4:	f7ff fdd8 	bl	800e858 <HAL_GetTick>
 800eca8:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800ecaa:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800ecac:	26fa      	movs	r6, #250	; 0xfa
 800ecae:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 800ecb0:	6823      	ldr	r3, [r4, #0]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	421d      	tst	r5, r3
 800ecb6:	d00f      	beq.n	800ecd8 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800ecb8:	f7ff fdce 	bl	800e858 <HAL_GetTick>
 800ecbc:	1bc0      	subs	r0, r0, r7
 800ecbe:	42b0      	cmp	r0, r6
 800ecc0:	d9f6      	bls.n	800ecb0 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800ecc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ecc4:	2220      	movs	r2, #32
 800ecc6:	4313      	orrs	r3, r2
 800ecc8:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ecca:	2321      	movs	r3, #33	; 0x21
 800eccc:	2103      	movs	r1, #3
 800ecce:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 800ecd4:	2003      	movs	r0, #3
 800ecd6:	e006      	b.n	800ece6 <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 800ecd8:	2321      	movs	r3, #33	; 0x21
 800ecda:	2201      	movs	r2, #1
 800ecdc:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 800ecde:	3b01      	subs	r3, #1
 800ece0:	2200      	movs	r2, #0
 800ece2:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 800ece4:	2000      	movs	r0, #0
}
 800ece6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ece8 <HAL_DMA_IRQHandler>:
{        
 800ece8:	b510      	push	{r4, lr}
 800ecea:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ecec:	6803      	ldr	r3, [r0, #0]
 800ecee:	4ab4      	ldr	r2, [pc, #720]	; (800efc0 <HAL_DMA_IRQHandler+0x2d8>)
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	d94d      	bls.n	800ed90 <HAL_DMA_IRQHandler+0xa8>
 800ecf4:	4ab3      	ldr	r2, [pc, #716]	; (800efc4 <HAL_DMA_IRQHandler+0x2dc>)
 800ecf6:	6811      	ldr	r1, [r2, #0]
 800ecf8:	4ab3      	ldr	r2, [pc, #716]	; (800efc8 <HAL_DMA_IRQHandler+0x2e0>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d026      	beq.n	800ed4c <HAL_DMA_IRQHandler+0x64>
 800ecfe:	4ab3      	ldr	r2, [pc, #716]	; (800efcc <HAL_DMA_IRQHandler+0x2e4>)
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d02d      	beq.n	800ed60 <HAL_DMA_IRQHandler+0x78>
 800ed04:	4ab2      	ldr	r2, [pc, #712]	; (800efd0 <HAL_DMA_IRQHandler+0x2e8>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d02c      	beq.n	800ed64 <HAL_DMA_IRQHandler+0x7c>
 800ed0a:	4ab2      	ldr	r2, [pc, #712]	; (800efd4 <HAL_DMA_IRQHandler+0x2ec>)
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	d02c      	beq.n	800ed6a <HAL_DMA_IRQHandler+0x82>
 800ed10:	4ab1      	ldr	r2, [pc, #708]	; (800efd8 <HAL_DMA_IRQHandler+0x2f0>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d02c      	beq.n	800ed70 <HAL_DMA_IRQHandler+0x88>
 800ed16:	4ab1      	ldr	r2, [pc, #708]	; (800efdc <HAL_DMA_IRQHandler+0x2f4>)
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	d02c      	beq.n	800ed76 <HAL_DMA_IRQHandler+0x8e>
 800ed1c:	4aa8      	ldr	r2, [pc, #672]	; (800efc0 <HAL_DMA_IRQHandler+0x2d8>)
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d02c      	beq.n	800ed7c <HAL_DMA_IRQHandler+0x94>
 800ed22:	4aaf      	ldr	r2, [pc, #700]	; (800efe0 <HAL_DMA_IRQHandler+0x2f8>)
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d02c      	beq.n	800ed82 <HAL_DMA_IRQHandler+0x9a>
 800ed28:	4aae      	ldr	r2, [pc, #696]	; (800efe4 <HAL_DMA_IRQHandler+0x2fc>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d02b      	beq.n	800ed86 <HAL_DMA_IRQHandler+0x9e>
 800ed2e:	4aae      	ldr	r2, [pc, #696]	; (800efe8 <HAL_DMA_IRQHandler+0x300>)
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d02a      	beq.n	800ed8a <HAL_DMA_IRQHandler+0xa2>
 800ed34:	4aad      	ldr	r2, [pc, #692]	; (800efec <HAL_DMA_IRQHandler+0x304>)
 800ed36:	189a      	adds	r2, r3, r2
 800ed38:	4250      	negs	r0, r2
 800ed3a:	4142      	adcs	r2, r0
 800ed3c:	4252      	negs	r2, r2
 800ed3e:	48ac      	ldr	r0, [pc, #688]	; (800eff0 <HAL_DMA_IRQHandler+0x308>)
 800ed40:	4002      	ands	r2, r0
 800ed42:	2080      	movs	r0, #128	; 0x80
 800ed44:	0300      	lsls	r0, r0, #12
 800ed46:	4684      	mov	ip, r0
 800ed48:	4462      	add	r2, ip
 800ed4a:	e000      	b.n	800ed4e <HAL_DMA_IRQHandler+0x66>
 800ed4c:	2208      	movs	r2, #8
 800ed4e:	420a      	tst	r2, r1
 800ed50:	d100      	bne.n	800ed54 <HAL_DMA_IRQHandler+0x6c>
 800ed52:	e0e6      	b.n	800ef22 <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	0712      	lsls	r2, r2, #28
 800ed58:	d500      	bpl.n	800ed5c <HAL_DMA_IRQHandler+0x74>
 800ed5a:	e097      	b.n	800ee8c <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ed5c:	6823      	ldr	r3, [r4, #0]
 800ed5e:	e0e0      	b.n	800ef22 <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ed60:	2280      	movs	r2, #128	; 0x80
 800ed62:	e7f4      	b.n	800ed4e <HAL_DMA_IRQHandler+0x66>
 800ed64:	2280      	movs	r2, #128	; 0x80
 800ed66:	0112      	lsls	r2, r2, #4
 800ed68:	e7f1      	b.n	800ed4e <HAL_DMA_IRQHandler+0x66>
 800ed6a:	2280      	movs	r2, #128	; 0x80
 800ed6c:	0212      	lsls	r2, r2, #8
 800ed6e:	e7ee      	b.n	800ed4e <HAL_DMA_IRQHandler+0x66>
 800ed70:	2280      	movs	r2, #128	; 0x80
 800ed72:	0312      	lsls	r2, r2, #12
 800ed74:	e7eb      	b.n	800ed4e <HAL_DMA_IRQHandler+0x66>
 800ed76:	2280      	movs	r2, #128	; 0x80
 800ed78:	0412      	lsls	r2, r2, #16
 800ed7a:	e7e8      	b.n	800ed4e <HAL_DMA_IRQHandler+0x66>
 800ed7c:	2280      	movs	r2, #128	; 0x80
 800ed7e:	0512      	lsls	r2, r2, #20
 800ed80:	e7e5      	b.n	800ed4e <HAL_DMA_IRQHandler+0x66>
 800ed82:	2208      	movs	r2, #8
 800ed84:	e7e3      	b.n	800ed4e <HAL_DMA_IRQHandler+0x66>
 800ed86:	2280      	movs	r2, #128	; 0x80
 800ed88:	e7e1      	b.n	800ed4e <HAL_DMA_IRQHandler+0x66>
 800ed8a:	2280      	movs	r2, #128	; 0x80
 800ed8c:	0112      	lsls	r2, r2, #4
 800ed8e:	e7de      	b.n	800ed4e <HAL_DMA_IRQHandler+0x66>
 800ed90:	4a98      	ldr	r2, [pc, #608]	; (800eff4 <HAL_DMA_IRQHandler+0x30c>)
 800ed92:	6811      	ldr	r1, [r2, #0]
 800ed94:	4a8c      	ldr	r2, [pc, #560]	; (800efc8 <HAL_DMA_IRQHandler+0x2e0>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d026      	beq.n	800ede8 <HAL_DMA_IRQHandler+0x100>
 800ed9a:	4a8c      	ldr	r2, [pc, #560]	; (800efcc <HAL_DMA_IRQHandler+0x2e4>)
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d05d      	beq.n	800ee5c <HAL_DMA_IRQHandler+0x174>
 800eda0:	4a8b      	ldr	r2, [pc, #556]	; (800efd0 <HAL_DMA_IRQHandler+0x2e8>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d05c      	beq.n	800ee60 <HAL_DMA_IRQHandler+0x178>
 800eda6:	4a8b      	ldr	r2, [pc, #556]	; (800efd4 <HAL_DMA_IRQHandler+0x2ec>)
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d05c      	beq.n	800ee66 <HAL_DMA_IRQHandler+0x17e>
 800edac:	4a8a      	ldr	r2, [pc, #552]	; (800efd8 <HAL_DMA_IRQHandler+0x2f0>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d05c      	beq.n	800ee6c <HAL_DMA_IRQHandler+0x184>
 800edb2:	4a8a      	ldr	r2, [pc, #552]	; (800efdc <HAL_DMA_IRQHandler+0x2f4>)
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d05c      	beq.n	800ee72 <HAL_DMA_IRQHandler+0x18a>
 800edb8:	4a81      	ldr	r2, [pc, #516]	; (800efc0 <HAL_DMA_IRQHandler+0x2d8>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d05c      	beq.n	800ee78 <HAL_DMA_IRQHandler+0x190>
 800edbe:	4a88      	ldr	r2, [pc, #544]	; (800efe0 <HAL_DMA_IRQHandler+0x2f8>)
 800edc0:	4293      	cmp	r3, r2
 800edc2:	d05c      	beq.n	800ee7e <HAL_DMA_IRQHandler+0x196>
 800edc4:	4a87      	ldr	r2, [pc, #540]	; (800efe4 <HAL_DMA_IRQHandler+0x2fc>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d05b      	beq.n	800ee82 <HAL_DMA_IRQHandler+0x19a>
 800edca:	4a87      	ldr	r2, [pc, #540]	; (800efe8 <HAL_DMA_IRQHandler+0x300>)
 800edcc:	4293      	cmp	r3, r2
 800edce:	d05a      	beq.n	800ee86 <HAL_DMA_IRQHandler+0x19e>
 800edd0:	4a86      	ldr	r2, [pc, #536]	; (800efec <HAL_DMA_IRQHandler+0x304>)
 800edd2:	189a      	adds	r2, r3, r2
 800edd4:	4250      	negs	r0, r2
 800edd6:	4142      	adcs	r2, r0
 800edd8:	4252      	negs	r2, r2
 800edda:	4885      	ldr	r0, [pc, #532]	; (800eff0 <HAL_DMA_IRQHandler+0x308>)
 800eddc:	4002      	ands	r2, r0
 800edde:	2080      	movs	r0, #128	; 0x80
 800ede0:	0300      	lsls	r0, r0, #12
 800ede2:	4684      	mov	ip, r0
 800ede4:	4462      	add	r2, ip
 800ede6:	e000      	b.n	800edea <HAL_DMA_IRQHandler+0x102>
 800ede8:	2208      	movs	r2, #8
 800edea:	420a      	tst	r2, r1
 800edec:	d000      	beq.n	800edf0 <HAL_DMA_IRQHandler+0x108>
 800edee:	e3ad      	b.n	800f54c <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800edf0:	4a80      	ldr	r2, [pc, #512]	; (800eff4 <HAL_DMA_IRQHandler+0x30c>)
 800edf2:	6811      	ldr	r1, [r2, #0]
 800edf4:	4a74      	ldr	r2, [pc, #464]	; (800efc8 <HAL_DMA_IRQHandler+0x2e0>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d100      	bne.n	800edfc <HAL_DMA_IRQHandler+0x114>
 800edfa:	e198      	b.n	800f12e <HAL_DMA_IRQHandler+0x446>
 800edfc:	4a73      	ldr	r2, [pc, #460]	; (800efcc <HAL_DMA_IRQHandler+0x2e4>)
 800edfe:	4293      	cmp	r3, r2
 800ee00:	d100      	bne.n	800ee04 <HAL_DMA_IRQHandler+0x11c>
 800ee02:	e1da      	b.n	800f1ba <HAL_DMA_IRQHandler+0x4d2>
 800ee04:	4a72      	ldr	r2, [pc, #456]	; (800efd0 <HAL_DMA_IRQHandler+0x2e8>)
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d100      	bne.n	800ee0c <HAL_DMA_IRQHandler+0x124>
 800ee0a:	e1d8      	b.n	800f1be <HAL_DMA_IRQHandler+0x4d6>
 800ee0c:	4a71      	ldr	r2, [pc, #452]	; (800efd4 <HAL_DMA_IRQHandler+0x2ec>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d100      	bne.n	800ee14 <HAL_DMA_IRQHandler+0x12c>
 800ee12:	e1d7      	b.n	800f1c4 <HAL_DMA_IRQHandler+0x4dc>
 800ee14:	4a70      	ldr	r2, [pc, #448]	; (800efd8 <HAL_DMA_IRQHandler+0x2f0>)
 800ee16:	4293      	cmp	r3, r2
 800ee18:	d100      	bne.n	800ee1c <HAL_DMA_IRQHandler+0x134>
 800ee1a:	e1d6      	b.n	800f1ca <HAL_DMA_IRQHandler+0x4e2>
 800ee1c:	4a6f      	ldr	r2, [pc, #444]	; (800efdc <HAL_DMA_IRQHandler+0x2f4>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d100      	bne.n	800ee24 <HAL_DMA_IRQHandler+0x13c>
 800ee22:	e1d5      	b.n	800f1d0 <HAL_DMA_IRQHandler+0x4e8>
 800ee24:	4a66      	ldr	r2, [pc, #408]	; (800efc0 <HAL_DMA_IRQHandler+0x2d8>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d100      	bne.n	800ee2c <HAL_DMA_IRQHandler+0x144>
 800ee2a:	e1d4      	b.n	800f1d6 <HAL_DMA_IRQHandler+0x4ee>
 800ee2c:	4a6c      	ldr	r2, [pc, #432]	; (800efe0 <HAL_DMA_IRQHandler+0x2f8>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d100      	bne.n	800ee34 <HAL_DMA_IRQHandler+0x14c>
 800ee32:	e1d3      	b.n	800f1dc <HAL_DMA_IRQHandler+0x4f4>
 800ee34:	4a6b      	ldr	r2, [pc, #428]	; (800efe4 <HAL_DMA_IRQHandler+0x2fc>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d100      	bne.n	800ee3c <HAL_DMA_IRQHandler+0x154>
 800ee3a:	e1d1      	b.n	800f1e0 <HAL_DMA_IRQHandler+0x4f8>
 800ee3c:	4a6a      	ldr	r2, [pc, #424]	; (800efe8 <HAL_DMA_IRQHandler+0x300>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d100      	bne.n	800ee44 <HAL_DMA_IRQHandler+0x15c>
 800ee42:	e1cf      	b.n	800f1e4 <HAL_DMA_IRQHandler+0x4fc>
 800ee44:	4a69      	ldr	r2, [pc, #420]	; (800efec <HAL_DMA_IRQHandler+0x304>)
 800ee46:	189a      	adds	r2, r3, r2
 800ee48:	4250      	negs	r0, r2
 800ee4a:	4142      	adcs	r2, r0
 800ee4c:	4252      	negs	r2, r2
 800ee4e:	486a      	ldr	r0, [pc, #424]	; (800eff8 <HAL_DMA_IRQHandler+0x310>)
 800ee50:	4002      	ands	r2, r0
 800ee52:	2080      	movs	r0, #128	; 0x80
 800ee54:	02c0      	lsls	r0, r0, #11
 800ee56:	4684      	mov	ip, r0
 800ee58:	4462      	add	r2, ip
 800ee5a:	e169      	b.n	800f130 <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 800ee5c:	2280      	movs	r2, #128	; 0x80
 800ee5e:	e7c4      	b.n	800edea <HAL_DMA_IRQHandler+0x102>
 800ee60:	2280      	movs	r2, #128	; 0x80
 800ee62:	0112      	lsls	r2, r2, #4
 800ee64:	e7c1      	b.n	800edea <HAL_DMA_IRQHandler+0x102>
 800ee66:	2280      	movs	r2, #128	; 0x80
 800ee68:	0212      	lsls	r2, r2, #8
 800ee6a:	e7be      	b.n	800edea <HAL_DMA_IRQHandler+0x102>
 800ee6c:	2280      	movs	r2, #128	; 0x80
 800ee6e:	0312      	lsls	r2, r2, #12
 800ee70:	e7bb      	b.n	800edea <HAL_DMA_IRQHandler+0x102>
 800ee72:	2280      	movs	r2, #128	; 0x80
 800ee74:	0412      	lsls	r2, r2, #16
 800ee76:	e7b8      	b.n	800edea <HAL_DMA_IRQHandler+0x102>
 800ee78:	2280      	movs	r2, #128	; 0x80
 800ee7a:	0512      	lsls	r2, r2, #20
 800ee7c:	e7b5      	b.n	800edea <HAL_DMA_IRQHandler+0x102>
 800ee7e:	2208      	movs	r2, #8
 800ee80:	e7b3      	b.n	800edea <HAL_DMA_IRQHandler+0x102>
 800ee82:	2280      	movs	r2, #128	; 0x80
 800ee84:	e7b1      	b.n	800edea <HAL_DMA_IRQHandler+0x102>
 800ee86:	2280      	movs	r2, #128	; 0x80
 800ee88:	0112      	lsls	r2, r2, #4
 800ee8a:	e7ae      	b.n	800edea <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	2108      	movs	r1, #8
 800ee90:	438a      	bics	r2, r1
 800ee92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ee94:	6823      	ldr	r3, [r4, #0]
 800ee96:	4a4a      	ldr	r2, [pc, #296]	; (800efc0 <HAL_DMA_IRQHandler+0x2d8>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d800      	bhi.n	800ee9e <HAL_DMA_IRQHandler+0x1b6>
 800ee9c:	e0ae      	b.n	800effc <HAL_DMA_IRQHandler+0x314>
 800ee9e:	4a4a      	ldr	r2, [pc, #296]	; (800efc8 <HAL_DMA_IRQHandler+0x2e0>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d027      	beq.n	800eef4 <HAL_DMA_IRQHandler+0x20c>
 800eea4:	4a49      	ldr	r2, [pc, #292]	; (800efcc <HAL_DMA_IRQHandler+0x2e4>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d071      	beq.n	800ef8e <HAL_DMA_IRQHandler+0x2a6>
 800eeaa:	4a49      	ldr	r2, [pc, #292]	; (800efd0 <HAL_DMA_IRQHandler+0x2e8>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d070      	beq.n	800ef92 <HAL_DMA_IRQHandler+0x2aa>
 800eeb0:	4a48      	ldr	r2, [pc, #288]	; (800efd4 <HAL_DMA_IRQHandler+0x2ec>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d070      	beq.n	800ef98 <HAL_DMA_IRQHandler+0x2b0>
 800eeb6:	4a48      	ldr	r2, [pc, #288]	; (800efd8 <HAL_DMA_IRQHandler+0x2f0>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d070      	beq.n	800ef9e <HAL_DMA_IRQHandler+0x2b6>
 800eebc:	4a47      	ldr	r2, [pc, #284]	; (800efdc <HAL_DMA_IRQHandler+0x2f4>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d070      	beq.n	800efa4 <HAL_DMA_IRQHandler+0x2bc>
 800eec2:	4a3f      	ldr	r2, [pc, #252]	; (800efc0 <HAL_DMA_IRQHandler+0x2d8>)
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d070      	beq.n	800efaa <HAL_DMA_IRQHandler+0x2c2>
 800eec8:	4a45      	ldr	r2, [pc, #276]	; (800efe0 <HAL_DMA_IRQHandler+0x2f8>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d070      	beq.n	800efb0 <HAL_DMA_IRQHandler+0x2c8>
 800eece:	4a45      	ldr	r2, [pc, #276]	; (800efe4 <HAL_DMA_IRQHandler+0x2fc>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d06f      	beq.n	800efb4 <HAL_DMA_IRQHandler+0x2cc>
 800eed4:	4a44      	ldr	r2, [pc, #272]	; (800efe8 <HAL_DMA_IRQHandler+0x300>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d06e      	beq.n	800efb8 <HAL_DMA_IRQHandler+0x2d0>
 800eeda:	4a44      	ldr	r2, [pc, #272]	; (800efec <HAL_DMA_IRQHandler+0x304>)
 800eedc:	4694      	mov	ip, r2
 800eede:	4463      	add	r3, ip
 800eee0:	425a      	negs	r2, r3
 800eee2:	4153      	adcs	r3, r2
 800eee4:	425b      	negs	r3, r3
 800eee6:	4a42      	ldr	r2, [pc, #264]	; (800eff0 <HAL_DMA_IRQHandler+0x308>)
 800eee8:	4013      	ands	r3, r2
 800eeea:	2280      	movs	r2, #128	; 0x80
 800eeec:	0312      	lsls	r2, r2, #12
 800eeee:	4694      	mov	ip, r2
 800eef0:	4463      	add	r3, ip
 800eef2:	e000      	b.n	800eef6 <HAL_DMA_IRQHandler+0x20e>
 800eef4:	2308      	movs	r3, #8
 800eef6:	4a33      	ldr	r2, [pc, #204]	; (800efc4 <HAL_DMA_IRQHandler+0x2dc>)
 800eef8:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800eefa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eefc:	2201      	movs	r2, #1
 800eefe:	4313      	orrs	r3, r2
 800ef00:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 800ef02:	2321      	movs	r3, #33	; 0x21
 800ef04:	3203      	adds	r2, #3
 800ef06:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 800ef08:	3b01      	subs	r3, #1
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800ef0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d001      	beq.n	800ef18 <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 800ef14:	0020      	movs	r0, r4
 800ef16:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800ef18:	6823      	ldr	r3, [r4, #0]
 800ef1a:	4a29      	ldr	r2, [pc, #164]	; (800efc0 <HAL_DMA_IRQHandler+0x2d8>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d800      	bhi.n	800ef22 <HAL_DMA_IRQHandler+0x23a>
 800ef20:	e766      	b.n	800edf0 <HAL_DMA_IRQHandler+0x108>
 800ef22:	4a28      	ldr	r2, [pc, #160]	; (800efc4 <HAL_DMA_IRQHandler+0x2dc>)
 800ef24:	6811      	ldr	r1, [r2, #0]
 800ef26:	4a28      	ldr	r2, [pc, #160]	; (800efc8 <HAL_DMA_IRQHandler+0x2e0>)
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d100      	bne.n	800ef2e <HAL_DMA_IRQHandler+0x246>
 800ef2c:	e0ad      	b.n	800f08a <HAL_DMA_IRQHandler+0x3a2>
 800ef2e:	4a27      	ldr	r2, [pc, #156]	; (800efcc <HAL_DMA_IRQHandler+0x2e4>)
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d100      	bne.n	800ef36 <HAL_DMA_IRQHandler+0x24e>
 800ef34:	e0e3      	b.n	800f0fe <HAL_DMA_IRQHandler+0x416>
 800ef36:	4a26      	ldr	r2, [pc, #152]	; (800efd0 <HAL_DMA_IRQHandler+0x2e8>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d100      	bne.n	800ef3e <HAL_DMA_IRQHandler+0x256>
 800ef3c:	e0e1      	b.n	800f102 <HAL_DMA_IRQHandler+0x41a>
 800ef3e:	4a25      	ldr	r2, [pc, #148]	; (800efd4 <HAL_DMA_IRQHandler+0x2ec>)
 800ef40:	4293      	cmp	r3, r2
 800ef42:	d100      	bne.n	800ef46 <HAL_DMA_IRQHandler+0x25e>
 800ef44:	e0e0      	b.n	800f108 <HAL_DMA_IRQHandler+0x420>
 800ef46:	4a24      	ldr	r2, [pc, #144]	; (800efd8 <HAL_DMA_IRQHandler+0x2f0>)
 800ef48:	4293      	cmp	r3, r2
 800ef4a:	d100      	bne.n	800ef4e <HAL_DMA_IRQHandler+0x266>
 800ef4c:	e0df      	b.n	800f10e <HAL_DMA_IRQHandler+0x426>
 800ef4e:	4a23      	ldr	r2, [pc, #140]	; (800efdc <HAL_DMA_IRQHandler+0x2f4>)
 800ef50:	4293      	cmp	r3, r2
 800ef52:	d100      	bne.n	800ef56 <HAL_DMA_IRQHandler+0x26e>
 800ef54:	e0de      	b.n	800f114 <HAL_DMA_IRQHandler+0x42c>
 800ef56:	4a1a      	ldr	r2, [pc, #104]	; (800efc0 <HAL_DMA_IRQHandler+0x2d8>)
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d100      	bne.n	800ef5e <HAL_DMA_IRQHandler+0x276>
 800ef5c:	e0dd      	b.n	800f11a <HAL_DMA_IRQHandler+0x432>
 800ef5e:	4a20      	ldr	r2, [pc, #128]	; (800efe0 <HAL_DMA_IRQHandler+0x2f8>)
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d100      	bne.n	800ef66 <HAL_DMA_IRQHandler+0x27e>
 800ef64:	e0dc      	b.n	800f120 <HAL_DMA_IRQHandler+0x438>
 800ef66:	4a1f      	ldr	r2, [pc, #124]	; (800efe4 <HAL_DMA_IRQHandler+0x2fc>)
 800ef68:	4293      	cmp	r3, r2
 800ef6a:	d100      	bne.n	800ef6e <HAL_DMA_IRQHandler+0x286>
 800ef6c:	e0da      	b.n	800f124 <HAL_DMA_IRQHandler+0x43c>
 800ef6e:	4a1e      	ldr	r2, [pc, #120]	; (800efe8 <HAL_DMA_IRQHandler+0x300>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d100      	bne.n	800ef76 <HAL_DMA_IRQHandler+0x28e>
 800ef74:	e0d8      	b.n	800f128 <HAL_DMA_IRQHandler+0x440>
 800ef76:	4a1d      	ldr	r2, [pc, #116]	; (800efec <HAL_DMA_IRQHandler+0x304>)
 800ef78:	189a      	adds	r2, r3, r2
 800ef7a:	4250      	negs	r0, r2
 800ef7c:	4142      	adcs	r2, r0
 800ef7e:	4252      	negs	r2, r2
 800ef80:	481d      	ldr	r0, [pc, #116]	; (800eff8 <HAL_DMA_IRQHandler+0x310>)
 800ef82:	4002      	ands	r2, r0
 800ef84:	2080      	movs	r0, #128	; 0x80
 800ef86:	02c0      	lsls	r0, r0, #11
 800ef88:	4684      	mov	ip, r0
 800ef8a:	4462      	add	r2, ip
 800ef8c:	e07e      	b.n	800f08c <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800ef8e:	2380      	movs	r3, #128	; 0x80
 800ef90:	e7b1      	b.n	800eef6 <HAL_DMA_IRQHandler+0x20e>
 800ef92:	2380      	movs	r3, #128	; 0x80
 800ef94:	011b      	lsls	r3, r3, #4
 800ef96:	e7ae      	b.n	800eef6 <HAL_DMA_IRQHandler+0x20e>
 800ef98:	2380      	movs	r3, #128	; 0x80
 800ef9a:	021b      	lsls	r3, r3, #8
 800ef9c:	e7ab      	b.n	800eef6 <HAL_DMA_IRQHandler+0x20e>
 800ef9e:	2380      	movs	r3, #128	; 0x80
 800efa0:	031b      	lsls	r3, r3, #12
 800efa2:	e7a8      	b.n	800eef6 <HAL_DMA_IRQHandler+0x20e>
 800efa4:	2380      	movs	r3, #128	; 0x80
 800efa6:	041b      	lsls	r3, r3, #16
 800efa8:	e7a5      	b.n	800eef6 <HAL_DMA_IRQHandler+0x20e>
 800efaa:	2380      	movs	r3, #128	; 0x80
 800efac:	051b      	lsls	r3, r3, #20
 800efae:	e7a2      	b.n	800eef6 <HAL_DMA_IRQHandler+0x20e>
 800efb0:	2308      	movs	r3, #8
 800efb2:	e7a0      	b.n	800eef6 <HAL_DMA_IRQHandler+0x20e>
 800efb4:	2380      	movs	r3, #128	; 0x80
 800efb6:	e79e      	b.n	800eef6 <HAL_DMA_IRQHandler+0x20e>
 800efb8:	2380      	movs	r3, #128	; 0x80
 800efba:	011b      	lsls	r3, r3, #4
 800efbc:	e79b      	b.n	800eef6 <HAL_DMA_IRQHandler+0x20e>
 800efbe:	46c0      	nop			; (mov r8, r8)
 800efc0:	40020080 	.word	0x40020080
 800efc4:	40020400 	.word	0x40020400
 800efc8:	40020008 	.word	0x40020008
 800efcc:	4002001c 	.word	0x4002001c
 800efd0:	40020030 	.word	0x40020030
 800efd4:	40020044 	.word	0x40020044
 800efd8:	40020058 	.word	0x40020058
 800efdc:	4002006c 	.word	0x4002006c
 800efe0:	40020408 	.word	0x40020408
 800efe4:	4002041c 	.word	0x4002041c
 800efe8:	40020430 	.word	0x40020430
 800efec:	bffdfbbc 	.word	0xbffdfbbc
 800eff0:	fff88000 	.word	0xfff88000
 800eff4:	40020000 	.word	0x40020000
 800eff8:	fffc4000 	.word	0xfffc4000
 800effc:	4aaa      	ldr	r2, [pc, #680]	; (800f2a8 <HAL_DMA_IRQHandler+0x5c0>)
 800effe:	4293      	cmp	r3, r2
 800f000:	d027      	beq.n	800f052 <HAL_DMA_IRQHandler+0x36a>
 800f002:	4aaa      	ldr	r2, [pc, #680]	; (800f2ac <HAL_DMA_IRQHandler+0x5c4>)
 800f004:	4293      	cmp	r3, r2
 800f006:	d028      	beq.n	800f05a <HAL_DMA_IRQHandler+0x372>
 800f008:	4aa9      	ldr	r2, [pc, #676]	; (800f2b0 <HAL_DMA_IRQHandler+0x5c8>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d027      	beq.n	800f05e <HAL_DMA_IRQHandler+0x376>
 800f00e:	4aa9      	ldr	r2, [pc, #676]	; (800f2b4 <HAL_DMA_IRQHandler+0x5cc>)
 800f010:	4293      	cmp	r3, r2
 800f012:	d027      	beq.n	800f064 <HAL_DMA_IRQHandler+0x37c>
 800f014:	4aa8      	ldr	r2, [pc, #672]	; (800f2b8 <HAL_DMA_IRQHandler+0x5d0>)
 800f016:	4293      	cmp	r3, r2
 800f018:	d027      	beq.n	800f06a <HAL_DMA_IRQHandler+0x382>
 800f01a:	4aa8      	ldr	r2, [pc, #672]	; (800f2bc <HAL_DMA_IRQHandler+0x5d4>)
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d027      	beq.n	800f070 <HAL_DMA_IRQHandler+0x388>
 800f020:	4aa7      	ldr	r2, [pc, #668]	; (800f2c0 <HAL_DMA_IRQHandler+0x5d8>)
 800f022:	4293      	cmp	r3, r2
 800f024:	d027      	beq.n	800f076 <HAL_DMA_IRQHandler+0x38e>
 800f026:	4aa7      	ldr	r2, [pc, #668]	; (800f2c4 <HAL_DMA_IRQHandler+0x5dc>)
 800f028:	4293      	cmp	r3, r2
 800f02a:	d027      	beq.n	800f07c <HAL_DMA_IRQHandler+0x394>
 800f02c:	4aa6      	ldr	r2, [pc, #664]	; (800f2c8 <HAL_DMA_IRQHandler+0x5e0>)
 800f02e:	4293      	cmp	r3, r2
 800f030:	d026      	beq.n	800f080 <HAL_DMA_IRQHandler+0x398>
 800f032:	4aa6      	ldr	r2, [pc, #664]	; (800f2cc <HAL_DMA_IRQHandler+0x5e4>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d025      	beq.n	800f084 <HAL_DMA_IRQHandler+0x39c>
 800f038:	4aa5      	ldr	r2, [pc, #660]	; (800f2d0 <HAL_DMA_IRQHandler+0x5e8>)
 800f03a:	4694      	mov	ip, r2
 800f03c:	4463      	add	r3, ip
 800f03e:	425a      	negs	r2, r3
 800f040:	4153      	adcs	r3, r2
 800f042:	425b      	negs	r3, r3
 800f044:	4aa3      	ldr	r2, [pc, #652]	; (800f2d4 <HAL_DMA_IRQHandler+0x5ec>)
 800f046:	4013      	ands	r3, r2
 800f048:	2280      	movs	r2, #128	; 0x80
 800f04a:	0312      	lsls	r2, r2, #12
 800f04c:	4694      	mov	ip, r2
 800f04e:	4463      	add	r3, ip
 800f050:	e000      	b.n	800f054 <HAL_DMA_IRQHandler+0x36c>
 800f052:	2308      	movs	r3, #8
 800f054:	4aa0      	ldr	r2, [pc, #640]	; (800f2d8 <HAL_DMA_IRQHandler+0x5f0>)
 800f056:	6053      	str	r3, [r2, #4]
 800f058:	e74f      	b.n	800eefa <HAL_DMA_IRQHandler+0x212>
 800f05a:	2380      	movs	r3, #128	; 0x80
 800f05c:	e7fa      	b.n	800f054 <HAL_DMA_IRQHandler+0x36c>
 800f05e:	2380      	movs	r3, #128	; 0x80
 800f060:	011b      	lsls	r3, r3, #4
 800f062:	e7f7      	b.n	800f054 <HAL_DMA_IRQHandler+0x36c>
 800f064:	2380      	movs	r3, #128	; 0x80
 800f066:	021b      	lsls	r3, r3, #8
 800f068:	e7f4      	b.n	800f054 <HAL_DMA_IRQHandler+0x36c>
 800f06a:	2380      	movs	r3, #128	; 0x80
 800f06c:	031b      	lsls	r3, r3, #12
 800f06e:	e7f1      	b.n	800f054 <HAL_DMA_IRQHandler+0x36c>
 800f070:	2380      	movs	r3, #128	; 0x80
 800f072:	041b      	lsls	r3, r3, #16
 800f074:	e7ee      	b.n	800f054 <HAL_DMA_IRQHandler+0x36c>
 800f076:	2380      	movs	r3, #128	; 0x80
 800f078:	051b      	lsls	r3, r3, #20
 800f07a:	e7eb      	b.n	800f054 <HAL_DMA_IRQHandler+0x36c>
 800f07c:	2308      	movs	r3, #8
 800f07e:	e7e9      	b.n	800f054 <HAL_DMA_IRQHandler+0x36c>
 800f080:	2380      	movs	r3, #128	; 0x80
 800f082:	e7e7      	b.n	800f054 <HAL_DMA_IRQHandler+0x36c>
 800f084:	2380      	movs	r3, #128	; 0x80
 800f086:	011b      	lsls	r3, r3, #4
 800f088:	e7e4      	b.n	800f054 <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f08a:	2204      	movs	r2, #4
 800f08c:	420a      	tst	r2, r1
 800f08e:	d152      	bne.n	800f136 <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f090:	6821      	ldr	r1, [r4, #0]
 800f092:	4b92      	ldr	r3, [pc, #584]	; (800f2dc <HAL_DMA_IRQHandler+0x5f4>)
 800f094:	6818      	ldr	r0, [r3, #0]
 800f096:	4a84      	ldr	r2, [pc, #528]	; (800f2a8 <HAL_DMA_IRQHandler+0x5c0>)
 800f098:	4291      	cmp	r1, r2
 800f09a:	d100      	bne.n	800f09e <HAL_DMA_IRQHandler+0x3b6>
 800f09c:	e16b      	b.n	800f376 <HAL_DMA_IRQHandler+0x68e>
 800f09e:	4a83      	ldr	r2, [pc, #524]	; (800f2ac <HAL_DMA_IRQHandler+0x5c4>)
 800f0a0:	4291      	cmp	r1, r2
 800f0a2:	d100      	bne.n	800f0a6 <HAL_DMA_IRQHandler+0x3be>
 800f0a4:	e1aa      	b.n	800f3fc <HAL_DMA_IRQHandler+0x714>
 800f0a6:	4a82      	ldr	r2, [pc, #520]	; (800f2b0 <HAL_DMA_IRQHandler+0x5c8>)
 800f0a8:	4291      	cmp	r1, r2
 800f0aa:	d100      	bne.n	800f0ae <HAL_DMA_IRQHandler+0x3c6>
 800f0ac:	e1a8      	b.n	800f400 <HAL_DMA_IRQHandler+0x718>
 800f0ae:	4a81      	ldr	r2, [pc, #516]	; (800f2b4 <HAL_DMA_IRQHandler+0x5cc>)
 800f0b0:	4291      	cmp	r1, r2
 800f0b2:	d100      	bne.n	800f0b6 <HAL_DMA_IRQHandler+0x3ce>
 800f0b4:	e1a7      	b.n	800f406 <HAL_DMA_IRQHandler+0x71e>
 800f0b6:	4b80      	ldr	r3, [pc, #512]	; (800f2b8 <HAL_DMA_IRQHandler+0x5d0>)
 800f0b8:	4299      	cmp	r1, r3
 800f0ba:	d100      	bne.n	800f0be <HAL_DMA_IRQHandler+0x3d6>
 800f0bc:	e1a6      	b.n	800f40c <HAL_DMA_IRQHandler+0x724>
 800f0be:	4b7f      	ldr	r3, [pc, #508]	; (800f2bc <HAL_DMA_IRQHandler+0x5d4>)
 800f0c0:	4299      	cmp	r1, r3
 800f0c2:	d100      	bne.n	800f0c6 <HAL_DMA_IRQHandler+0x3de>
 800f0c4:	e1a5      	b.n	800f412 <HAL_DMA_IRQHandler+0x72a>
 800f0c6:	4b7e      	ldr	r3, [pc, #504]	; (800f2c0 <HAL_DMA_IRQHandler+0x5d8>)
 800f0c8:	4299      	cmp	r1, r3
 800f0ca:	d100      	bne.n	800f0ce <HAL_DMA_IRQHandler+0x3e6>
 800f0cc:	e1a4      	b.n	800f418 <HAL_DMA_IRQHandler+0x730>
 800f0ce:	4b7d      	ldr	r3, [pc, #500]	; (800f2c4 <HAL_DMA_IRQHandler+0x5dc>)
 800f0d0:	4299      	cmp	r1, r3
 800f0d2:	d100      	bne.n	800f0d6 <HAL_DMA_IRQHandler+0x3ee>
 800f0d4:	e1a3      	b.n	800f41e <HAL_DMA_IRQHandler+0x736>
 800f0d6:	4b7c      	ldr	r3, [pc, #496]	; (800f2c8 <HAL_DMA_IRQHandler+0x5e0>)
 800f0d8:	4299      	cmp	r1, r3
 800f0da:	d100      	bne.n	800f0de <HAL_DMA_IRQHandler+0x3f6>
 800f0dc:	e1a1      	b.n	800f422 <HAL_DMA_IRQHandler+0x73a>
 800f0de:	4b7b      	ldr	r3, [pc, #492]	; (800f2cc <HAL_DMA_IRQHandler+0x5e4>)
 800f0e0:	4299      	cmp	r1, r3
 800f0e2:	d100      	bne.n	800f0e6 <HAL_DMA_IRQHandler+0x3fe>
 800f0e4:	e19f      	b.n	800f426 <HAL_DMA_IRQHandler+0x73e>
 800f0e6:	4b7a      	ldr	r3, [pc, #488]	; (800f2d0 <HAL_DMA_IRQHandler+0x5e8>)
 800f0e8:	18ca      	adds	r2, r1, r3
 800f0ea:	4253      	negs	r3, r2
 800f0ec:	415a      	adcs	r2, r3
 800f0ee:	4252      	negs	r2, r2
 800f0f0:	4b7b      	ldr	r3, [pc, #492]	; (800f2e0 <HAL_DMA_IRQHandler+0x5f8>)
 800f0f2:	4013      	ands	r3, r2
 800f0f4:	2280      	movs	r2, #128	; 0x80
 800f0f6:	0292      	lsls	r2, r2, #10
 800f0f8:	4694      	mov	ip, r2
 800f0fa:	4463      	add	r3, ip
 800f0fc:	e13c      	b.n	800f378 <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f0fe:	2240      	movs	r2, #64	; 0x40
 800f100:	e7c4      	b.n	800f08c <HAL_DMA_IRQHandler+0x3a4>
 800f102:	2280      	movs	r2, #128	; 0x80
 800f104:	00d2      	lsls	r2, r2, #3
 800f106:	e7c1      	b.n	800f08c <HAL_DMA_IRQHandler+0x3a4>
 800f108:	2280      	movs	r2, #128	; 0x80
 800f10a:	01d2      	lsls	r2, r2, #7
 800f10c:	e7be      	b.n	800f08c <HAL_DMA_IRQHandler+0x3a4>
 800f10e:	2280      	movs	r2, #128	; 0x80
 800f110:	02d2      	lsls	r2, r2, #11
 800f112:	e7bb      	b.n	800f08c <HAL_DMA_IRQHandler+0x3a4>
 800f114:	2280      	movs	r2, #128	; 0x80
 800f116:	03d2      	lsls	r2, r2, #15
 800f118:	e7b8      	b.n	800f08c <HAL_DMA_IRQHandler+0x3a4>
 800f11a:	2280      	movs	r2, #128	; 0x80
 800f11c:	04d2      	lsls	r2, r2, #19
 800f11e:	e7b5      	b.n	800f08c <HAL_DMA_IRQHandler+0x3a4>
 800f120:	2204      	movs	r2, #4
 800f122:	e7b3      	b.n	800f08c <HAL_DMA_IRQHandler+0x3a4>
 800f124:	2240      	movs	r2, #64	; 0x40
 800f126:	e7b1      	b.n	800f08c <HAL_DMA_IRQHandler+0x3a4>
 800f128:	2280      	movs	r2, #128	; 0x80
 800f12a:	00d2      	lsls	r2, r2, #3
 800f12c:	e7ae      	b.n	800f08c <HAL_DMA_IRQHandler+0x3a4>
 800f12e:	2204      	movs	r2, #4
 800f130:	420a      	tst	r2, r1
 800f132:	d100      	bne.n	800f136 <HAL_DMA_IRQHandler+0x44e>
 800f134:	e208      	b.n	800f548 <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f136:	681a      	ldr	r2, [r3, #0]
 800f138:	0752      	lsls	r2, r2, #29
 800f13a:	d561      	bpl.n	800f200 <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	0692      	lsls	r2, r2, #26
 800f140:	d403      	bmi.n	800f14a <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f142:	681a      	ldr	r2, [r3, #0]
 800f144:	2104      	movs	r1, #4
 800f146:	438a      	bics	r2, r1
 800f148:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800f14a:	6823      	ldr	r3, [r4, #0]
 800f14c:	4a5c      	ldr	r2, [pc, #368]	; (800f2c0 <HAL_DMA_IRQHandler+0x5d8>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d800      	bhi.n	800f154 <HAL_DMA_IRQHandler+0x46c>
 800f152:	e0c9      	b.n	800f2e8 <HAL_DMA_IRQHandler+0x600>
 800f154:	4a54      	ldr	r2, [pc, #336]	; (800f2a8 <HAL_DMA_IRQHandler+0x5c0>)
 800f156:	4293      	cmp	r3, r2
 800f158:	d047      	beq.n	800f1ea <HAL_DMA_IRQHandler+0x502>
 800f15a:	4a54      	ldr	r2, [pc, #336]	; (800f2ac <HAL_DMA_IRQHandler+0x5c4>)
 800f15c:	4293      	cmp	r3, r2
 800f15e:	d100      	bne.n	800f162 <HAL_DMA_IRQHandler+0x47a>
 800f160:	e089      	b.n	800f276 <HAL_DMA_IRQHandler+0x58e>
 800f162:	4a53      	ldr	r2, [pc, #332]	; (800f2b0 <HAL_DMA_IRQHandler+0x5c8>)
 800f164:	4293      	cmp	r3, r2
 800f166:	d100      	bne.n	800f16a <HAL_DMA_IRQHandler+0x482>
 800f168:	e087      	b.n	800f27a <HAL_DMA_IRQHandler+0x592>
 800f16a:	4a52      	ldr	r2, [pc, #328]	; (800f2b4 <HAL_DMA_IRQHandler+0x5cc>)
 800f16c:	4293      	cmp	r3, r2
 800f16e:	d100      	bne.n	800f172 <HAL_DMA_IRQHandler+0x48a>
 800f170:	e086      	b.n	800f280 <HAL_DMA_IRQHandler+0x598>
 800f172:	4a51      	ldr	r2, [pc, #324]	; (800f2b8 <HAL_DMA_IRQHandler+0x5d0>)
 800f174:	4293      	cmp	r3, r2
 800f176:	d100      	bne.n	800f17a <HAL_DMA_IRQHandler+0x492>
 800f178:	e085      	b.n	800f286 <HAL_DMA_IRQHandler+0x59e>
 800f17a:	4a50      	ldr	r2, [pc, #320]	; (800f2bc <HAL_DMA_IRQHandler+0x5d4>)
 800f17c:	4293      	cmp	r3, r2
 800f17e:	d100      	bne.n	800f182 <HAL_DMA_IRQHandler+0x49a>
 800f180:	e084      	b.n	800f28c <HAL_DMA_IRQHandler+0x5a4>
 800f182:	4a4f      	ldr	r2, [pc, #316]	; (800f2c0 <HAL_DMA_IRQHandler+0x5d8>)
 800f184:	4293      	cmp	r3, r2
 800f186:	d100      	bne.n	800f18a <HAL_DMA_IRQHandler+0x4a2>
 800f188:	e083      	b.n	800f292 <HAL_DMA_IRQHandler+0x5aa>
 800f18a:	4a4e      	ldr	r2, [pc, #312]	; (800f2c4 <HAL_DMA_IRQHandler+0x5dc>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d100      	bne.n	800f192 <HAL_DMA_IRQHandler+0x4aa>
 800f190:	e082      	b.n	800f298 <HAL_DMA_IRQHandler+0x5b0>
 800f192:	4a4d      	ldr	r2, [pc, #308]	; (800f2c8 <HAL_DMA_IRQHandler+0x5e0>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d100      	bne.n	800f19a <HAL_DMA_IRQHandler+0x4b2>
 800f198:	e080      	b.n	800f29c <HAL_DMA_IRQHandler+0x5b4>
 800f19a:	4a4c      	ldr	r2, [pc, #304]	; (800f2cc <HAL_DMA_IRQHandler+0x5e4>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d07f      	beq.n	800f2a0 <HAL_DMA_IRQHandler+0x5b8>
 800f1a0:	4a4b      	ldr	r2, [pc, #300]	; (800f2d0 <HAL_DMA_IRQHandler+0x5e8>)
 800f1a2:	4694      	mov	ip, r2
 800f1a4:	4463      	add	r3, ip
 800f1a6:	425a      	negs	r2, r3
 800f1a8:	4153      	adcs	r3, r2
 800f1aa:	425b      	negs	r3, r3
 800f1ac:	4a4d      	ldr	r2, [pc, #308]	; (800f2e4 <HAL_DMA_IRQHandler+0x5fc>)
 800f1ae:	4013      	ands	r3, r2
 800f1b0:	2280      	movs	r2, #128	; 0x80
 800f1b2:	02d2      	lsls	r2, r2, #11
 800f1b4:	4694      	mov	ip, r2
 800f1b6:	4463      	add	r3, ip
 800f1b8:	e018      	b.n	800f1ec <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f1ba:	2240      	movs	r2, #64	; 0x40
 800f1bc:	e7b8      	b.n	800f130 <HAL_DMA_IRQHandler+0x448>
 800f1be:	2280      	movs	r2, #128	; 0x80
 800f1c0:	00d2      	lsls	r2, r2, #3
 800f1c2:	e7b5      	b.n	800f130 <HAL_DMA_IRQHandler+0x448>
 800f1c4:	2280      	movs	r2, #128	; 0x80
 800f1c6:	01d2      	lsls	r2, r2, #7
 800f1c8:	e7b2      	b.n	800f130 <HAL_DMA_IRQHandler+0x448>
 800f1ca:	2280      	movs	r2, #128	; 0x80
 800f1cc:	02d2      	lsls	r2, r2, #11
 800f1ce:	e7af      	b.n	800f130 <HAL_DMA_IRQHandler+0x448>
 800f1d0:	2280      	movs	r2, #128	; 0x80
 800f1d2:	03d2      	lsls	r2, r2, #15
 800f1d4:	e7ac      	b.n	800f130 <HAL_DMA_IRQHandler+0x448>
 800f1d6:	2280      	movs	r2, #128	; 0x80
 800f1d8:	04d2      	lsls	r2, r2, #19
 800f1da:	e7a9      	b.n	800f130 <HAL_DMA_IRQHandler+0x448>
 800f1dc:	2204      	movs	r2, #4
 800f1de:	e7a7      	b.n	800f130 <HAL_DMA_IRQHandler+0x448>
 800f1e0:	2240      	movs	r2, #64	; 0x40
 800f1e2:	e7a5      	b.n	800f130 <HAL_DMA_IRQHandler+0x448>
 800f1e4:	2280      	movs	r2, #128	; 0x80
 800f1e6:	00d2      	lsls	r2, r2, #3
 800f1e8:	e7a2      	b.n	800f130 <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800f1ea:	2304      	movs	r3, #4
 800f1ec:	4a3b      	ldr	r2, [pc, #236]	; (800f2dc <HAL_DMA_IRQHandler+0x5f4>)
 800f1ee:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800f1f0:	2321      	movs	r3, #33	; 0x21
 800f1f2:	2211      	movs	r2, #17
 800f1f4:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800f1f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d001      	beq.n	800f200 <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 800f1fc:	0020      	movs	r0, r4
 800f1fe:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f200:	6821      	ldr	r1, [r4, #0]
 800f202:	4b2f      	ldr	r3, [pc, #188]	; (800f2c0 <HAL_DMA_IRQHandler+0x5d8>)
 800f204:	4299      	cmp	r1, r3
 800f206:	d900      	bls.n	800f20a <HAL_DMA_IRQHandler+0x522>
 800f208:	e743      	b.n	800f092 <HAL_DMA_IRQHandler+0x3aa>
 800f20a:	4b33      	ldr	r3, [pc, #204]	; (800f2d8 <HAL_DMA_IRQHandler+0x5f0>)
 800f20c:	6818      	ldr	r0, [r3, #0]
 800f20e:	4a26      	ldr	r2, [pc, #152]	; (800f2a8 <HAL_DMA_IRQHandler+0x5c0>)
 800f210:	4291      	cmp	r1, r2
 800f212:	d100      	bne.n	800f216 <HAL_DMA_IRQHandler+0x52e>
 800f214:	e10a      	b.n	800f42c <HAL_DMA_IRQHandler+0x744>
 800f216:	4a25      	ldr	r2, [pc, #148]	; (800f2ac <HAL_DMA_IRQHandler+0x5c4>)
 800f218:	4291      	cmp	r1, r2
 800f21a:	d100      	bne.n	800f21e <HAL_DMA_IRQHandler+0x536>
 800f21c:	e10c      	b.n	800f438 <HAL_DMA_IRQHandler+0x750>
 800f21e:	4a24      	ldr	r2, [pc, #144]	; (800f2b0 <HAL_DMA_IRQHandler+0x5c8>)
 800f220:	4291      	cmp	r1, r2
 800f222:	d100      	bne.n	800f226 <HAL_DMA_IRQHandler+0x53e>
 800f224:	e10a      	b.n	800f43c <HAL_DMA_IRQHandler+0x754>
 800f226:	4a23      	ldr	r2, [pc, #140]	; (800f2b4 <HAL_DMA_IRQHandler+0x5cc>)
 800f228:	4291      	cmp	r1, r2
 800f22a:	d100      	bne.n	800f22e <HAL_DMA_IRQHandler+0x546>
 800f22c:	e109      	b.n	800f442 <HAL_DMA_IRQHandler+0x75a>
 800f22e:	4b22      	ldr	r3, [pc, #136]	; (800f2b8 <HAL_DMA_IRQHandler+0x5d0>)
 800f230:	4299      	cmp	r1, r3
 800f232:	d100      	bne.n	800f236 <HAL_DMA_IRQHandler+0x54e>
 800f234:	e108      	b.n	800f448 <HAL_DMA_IRQHandler+0x760>
 800f236:	4b21      	ldr	r3, [pc, #132]	; (800f2bc <HAL_DMA_IRQHandler+0x5d4>)
 800f238:	4299      	cmp	r1, r3
 800f23a:	d100      	bne.n	800f23e <HAL_DMA_IRQHandler+0x556>
 800f23c:	e107      	b.n	800f44e <HAL_DMA_IRQHandler+0x766>
 800f23e:	4b20      	ldr	r3, [pc, #128]	; (800f2c0 <HAL_DMA_IRQHandler+0x5d8>)
 800f240:	4299      	cmp	r1, r3
 800f242:	d100      	bne.n	800f246 <HAL_DMA_IRQHandler+0x55e>
 800f244:	e106      	b.n	800f454 <HAL_DMA_IRQHandler+0x76c>
 800f246:	4b1f      	ldr	r3, [pc, #124]	; (800f2c4 <HAL_DMA_IRQHandler+0x5dc>)
 800f248:	4299      	cmp	r1, r3
 800f24a:	d100      	bne.n	800f24e <HAL_DMA_IRQHandler+0x566>
 800f24c:	e105      	b.n	800f45a <HAL_DMA_IRQHandler+0x772>
 800f24e:	4b1e      	ldr	r3, [pc, #120]	; (800f2c8 <HAL_DMA_IRQHandler+0x5e0>)
 800f250:	4299      	cmp	r1, r3
 800f252:	d100      	bne.n	800f256 <HAL_DMA_IRQHandler+0x56e>
 800f254:	e103      	b.n	800f45e <HAL_DMA_IRQHandler+0x776>
 800f256:	4b1d      	ldr	r3, [pc, #116]	; (800f2cc <HAL_DMA_IRQHandler+0x5e4>)
 800f258:	4299      	cmp	r1, r3
 800f25a:	d100      	bne.n	800f25e <HAL_DMA_IRQHandler+0x576>
 800f25c:	e101      	b.n	800f462 <HAL_DMA_IRQHandler+0x77a>
 800f25e:	4b1c      	ldr	r3, [pc, #112]	; (800f2d0 <HAL_DMA_IRQHandler+0x5e8>)
 800f260:	18ca      	adds	r2, r1, r3
 800f262:	4253      	negs	r3, r2
 800f264:	415a      	adcs	r2, r3
 800f266:	4252      	negs	r2, r2
 800f268:	4b1d      	ldr	r3, [pc, #116]	; (800f2e0 <HAL_DMA_IRQHandler+0x5f8>)
 800f26a:	4013      	ands	r3, r2
 800f26c:	2280      	movs	r2, #128	; 0x80
 800f26e:	0292      	lsls	r2, r2, #10
 800f270:	4694      	mov	ip, r2
 800f272:	4463      	add	r3, ip
 800f274:	e0db      	b.n	800f42e <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800f276:	2340      	movs	r3, #64	; 0x40
 800f278:	e7b8      	b.n	800f1ec <HAL_DMA_IRQHandler+0x504>
 800f27a:	2380      	movs	r3, #128	; 0x80
 800f27c:	00db      	lsls	r3, r3, #3
 800f27e:	e7b5      	b.n	800f1ec <HAL_DMA_IRQHandler+0x504>
 800f280:	2380      	movs	r3, #128	; 0x80
 800f282:	01db      	lsls	r3, r3, #7
 800f284:	e7b2      	b.n	800f1ec <HAL_DMA_IRQHandler+0x504>
 800f286:	2380      	movs	r3, #128	; 0x80
 800f288:	02db      	lsls	r3, r3, #11
 800f28a:	e7af      	b.n	800f1ec <HAL_DMA_IRQHandler+0x504>
 800f28c:	2380      	movs	r3, #128	; 0x80
 800f28e:	03db      	lsls	r3, r3, #15
 800f290:	e7ac      	b.n	800f1ec <HAL_DMA_IRQHandler+0x504>
 800f292:	2380      	movs	r3, #128	; 0x80
 800f294:	04db      	lsls	r3, r3, #19
 800f296:	e7a9      	b.n	800f1ec <HAL_DMA_IRQHandler+0x504>
 800f298:	2304      	movs	r3, #4
 800f29a:	e7a7      	b.n	800f1ec <HAL_DMA_IRQHandler+0x504>
 800f29c:	2340      	movs	r3, #64	; 0x40
 800f29e:	e7a5      	b.n	800f1ec <HAL_DMA_IRQHandler+0x504>
 800f2a0:	2380      	movs	r3, #128	; 0x80
 800f2a2:	00db      	lsls	r3, r3, #3
 800f2a4:	e7a2      	b.n	800f1ec <HAL_DMA_IRQHandler+0x504>
 800f2a6:	46c0      	nop			; (mov r8, r8)
 800f2a8:	40020008 	.word	0x40020008
 800f2ac:	4002001c 	.word	0x4002001c
 800f2b0:	40020030 	.word	0x40020030
 800f2b4:	40020044 	.word	0x40020044
 800f2b8:	40020058 	.word	0x40020058
 800f2bc:	4002006c 	.word	0x4002006c
 800f2c0:	40020080 	.word	0x40020080
 800f2c4:	40020408 	.word	0x40020408
 800f2c8:	4002041c 	.word	0x4002041c
 800f2cc:	40020430 	.word	0x40020430
 800f2d0:	bffdfbbc 	.word	0xbffdfbbc
 800f2d4:	fff88000 	.word	0xfff88000
 800f2d8:	40020000 	.word	0x40020000
 800f2dc:	40020400 	.word	0x40020400
 800f2e0:	fffe2000 	.word	0xfffe2000
 800f2e4:	fffc4000 	.word	0xfffc4000
 800f2e8:	4a9b      	ldr	r2, [pc, #620]	; (800f558 <HAL_DMA_IRQHandler+0x870>)
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	d027      	beq.n	800f33e <HAL_DMA_IRQHandler+0x656>
 800f2ee:	4a9b      	ldr	r2, [pc, #620]	; (800f55c <HAL_DMA_IRQHandler+0x874>)
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d028      	beq.n	800f346 <HAL_DMA_IRQHandler+0x65e>
 800f2f4:	4a9a      	ldr	r2, [pc, #616]	; (800f560 <HAL_DMA_IRQHandler+0x878>)
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	d027      	beq.n	800f34a <HAL_DMA_IRQHandler+0x662>
 800f2fa:	4a9a      	ldr	r2, [pc, #616]	; (800f564 <HAL_DMA_IRQHandler+0x87c>)
 800f2fc:	4293      	cmp	r3, r2
 800f2fe:	d027      	beq.n	800f350 <HAL_DMA_IRQHandler+0x668>
 800f300:	4a99      	ldr	r2, [pc, #612]	; (800f568 <HAL_DMA_IRQHandler+0x880>)
 800f302:	4293      	cmp	r3, r2
 800f304:	d027      	beq.n	800f356 <HAL_DMA_IRQHandler+0x66e>
 800f306:	4a99      	ldr	r2, [pc, #612]	; (800f56c <HAL_DMA_IRQHandler+0x884>)
 800f308:	4293      	cmp	r3, r2
 800f30a:	d027      	beq.n	800f35c <HAL_DMA_IRQHandler+0x674>
 800f30c:	4a98      	ldr	r2, [pc, #608]	; (800f570 <HAL_DMA_IRQHandler+0x888>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	d027      	beq.n	800f362 <HAL_DMA_IRQHandler+0x67a>
 800f312:	4a98      	ldr	r2, [pc, #608]	; (800f574 <HAL_DMA_IRQHandler+0x88c>)
 800f314:	4293      	cmp	r3, r2
 800f316:	d027      	beq.n	800f368 <HAL_DMA_IRQHandler+0x680>
 800f318:	4a97      	ldr	r2, [pc, #604]	; (800f578 <HAL_DMA_IRQHandler+0x890>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d026      	beq.n	800f36c <HAL_DMA_IRQHandler+0x684>
 800f31e:	4a97      	ldr	r2, [pc, #604]	; (800f57c <HAL_DMA_IRQHandler+0x894>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d025      	beq.n	800f370 <HAL_DMA_IRQHandler+0x688>
 800f324:	4a96      	ldr	r2, [pc, #600]	; (800f580 <HAL_DMA_IRQHandler+0x898>)
 800f326:	4694      	mov	ip, r2
 800f328:	4463      	add	r3, ip
 800f32a:	425a      	negs	r2, r3
 800f32c:	4153      	adcs	r3, r2
 800f32e:	425b      	negs	r3, r3
 800f330:	4a94      	ldr	r2, [pc, #592]	; (800f584 <HAL_DMA_IRQHandler+0x89c>)
 800f332:	4013      	ands	r3, r2
 800f334:	2280      	movs	r2, #128	; 0x80
 800f336:	02d2      	lsls	r2, r2, #11
 800f338:	4694      	mov	ip, r2
 800f33a:	4463      	add	r3, ip
 800f33c:	e000      	b.n	800f340 <HAL_DMA_IRQHandler+0x658>
 800f33e:	2304      	movs	r3, #4
 800f340:	4a91      	ldr	r2, [pc, #580]	; (800f588 <HAL_DMA_IRQHandler+0x8a0>)
 800f342:	6053      	str	r3, [r2, #4]
 800f344:	e754      	b.n	800f1f0 <HAL_DMA_IRQHandler+0x508>
 800f346:	2340      	movs	r3, #64	; 0x40
 800f348:	e7fa      	b.n	800f340 <HAL_DMA_IRQHandler+0x658>
 800f34a:	2380      	movs	r3, #128	; 0x80
 800f34c:	00db      	lsls	r3, r3, #3
 800f34e:	e7f7      	b.n	800f340 <HAL_DMA_IRQHandler+0x658>
 800f350:	2380      	movs	r3, #128	; 0x80
 800f352:	01db      	lsls	r3, r3, #7
 800f354:	e7f4      	b.n	800f340 <HAL_DMA_IRQHandler+0x658>
 800f356:	2380      	movs	r3, #128	; 0x80
 800f358:	02db      	lsls	r3, r3, #11
 800f35a:	e7f1      	b.n	800f340 <HAL_DMA_IRQHandler+0x658>
 800f35c:	2380      	movs	r3, #128	; 0x80
 800f35e:	03db      	lsls	r3, r3, #15
 800f360:	e7ee      	b.n	800f340 <HAL_DMA_IRQHandler+0x658>
 800f362:	2380      	movs	r3, #128	; 0x80
 800f364:	04db      	lsls	r3, r3, #19
 800f366:	e7eb      	b.n	800f340 <HAL_DMA_IRQHandler+0x658>
 800f368:	2304      	movs	r3, #4
 800f36a:	e7e9      	b.n	800f340 <HAL_DMA_IRQHandler+0x658>
 800f36c:	2340      	movs	r3, #64	; 0x40
 800f36e:	e7e7      	b.n	800f340 <HAL_DMA_IRQHandler+0x658>
 800f370:	2380      	movs	r3, #128	; 0x80
 800f372:	00db      	lsls	r3, r3, #3
 800f374:	e7e4      	b.n	800f340 <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f376:	2302      	movs	r3, #2
 800f378:	4003      	ands	r3, r0
 800f37a:	1e5a      	subs	r2, r3, #1
 800f37c:	4193      	sbcs	r3, r2
 800f37e:	b2db      	uxtb	r3, r3
 800f380:	2b00      	cmp	r3, #0
 800f382:	d100      	bne.n	800f386 <HAL_DMA_IRQHandler+0x69e>
 800f384:	e080      	b.n	800f488 <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f386:	680b      	ldr	r3, [r1, #0]
 800f388:	079b      	lsls	r3, r3, #30
 800f38a:	d57d      	bpl.n	800f488 <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800f38c:	680b      	ldr	r3, [r1, #0]
 800f38e:	069b      	lsls	r3, r3, #26
 800f390:	d403      	bmi.n	800f39a <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 800f392:	680b      	ldr	r3, [r1, #0]
 800f394:	2202      	movs	r2, #2
 800f396:	4393      	bics	r3, r2
 800f398:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800f39a:	6823      	ldr	r3, [r4, #0]
 800f39c:	4a74      	ldr	r2, [pc, #464]	; (800f570 <HAL_DMA_IRQHandler+0x888>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d800      	bhi.n	800f3a4 <HAL_DMA_IRQHandler+0x6bc>
 800f3a2:	e08a      	b.n	800f4ba <HAL_DMA_IRQHandler+0x7d2>
 800f3a4:	4a6c      	ldr	r2, [pc, #432]	; (800f558 <HAL_DMA_IRQHandler+0x870>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d05e      	beq.n	800f468 <HAL_DMA_IRQHandler+0x780>
 800f3aa:	4a6c      	ldr	r2, [pc, #432]	; (800f55c <HAL_DMA_IRQHandler+0x874>)
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	d100      	bne.n	800f3b2 <HAL_DMA_IRQHandler+0x6ca>
 800f3b0:	e06b      	b.n	800f48a <HAL_DMA_IRQHandler+0x7a2>
 800f3b2:	4a6b      	ldr	r2, [pc, #428]	; (800f560 <HAL_DMA_IRQHandler+0x878>)
 800f3b4:	4293      	cmp	r3, r2
 800f3b6:	d06a      	beq.n	800f48e <HAL_DMA_IRQHandler+0x7a6>
 800f3b8:	4a6a      	ldr	r2, [pc, #424]	; (800f564 <HAL_DMA_IRQHandler+0x87c>)
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	d06a      	beq.n	800f494 <HAL_DMA_IRQHandler+0x7ac>
 800f3be:	4a6a      	ldr	r2, [pc, #424]	; (800f568 <HAL_DMA_IRQHandler+0x880>)
 800f3c0:	4293      	cmp	r3, r2
 800f3c2:	d06a      	beq.n	800f49a <HAL_DMA_IRQHandler+0x7b2>
 800f3c4:	4a69      	ldr	r2, [pc, #420]	; (800f56c <HAL_DMA_IRQHandler+0x884>)
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	d06a      	beq.n	800f4a0 <HAL_DMA_IRQHandler+0x7b8>
 800f3ca:	4a69      	ldr	r2, [pc, #420]	; (800f570 <HAL_DMA_IRQHandler+0x888>)
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d06a      	beq.n	800f4a6 <HAL_DMA_IRQHandler+0x7be>
 800f3d0:	4a68      	ldr	r2, [pc, #416]	; (800f574 <HAL_DMA_IRQHandler+0x88c>)
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d06a      	beq.n	800f4ac <HAL_DMA_IRQHandler+0x7c4>
 800f3d6:	4a68      	ldr	r2, [pc, #416]	; (800f578 <HAL_DMA_IRQHandler+0x890>)
 800f3d8:	4293      	cmp	r3, r2
 800f3da:	d069      	beq.n	800f4b0 <HAL_DMA_IRQHandler+0x7c8>
 800f3dc:	4a67      	ldr	r2, [pc, #412]	; (800f57c <HAL_DMA_IRQHandler+0x894>)
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	d068      	beq.n	800f4b4 <HAL_DMA_IRQHandler+0x7cc>
 800f3e2:	4a67      	ldr	r2, [pc, #412]	; (800f580 <HAL_DMA_IRQHandler+0x898>)
 800f3e4:	4694      	mov	ip, r2
 800f3e6:	4463      	add	r3, ip
 800f3e8:	425a      	negs	r2, r3
 800f3ea:	4153      	adcs	r3, r2
 800f3ec:	425b      	negs	r3, r3
 800f3ee:	4a67      	ldr	r2, [pc, #412]	; (800f58c <HAL_DMA_IRQHandler+0x8a4>)
 800f3f0:	4013      	ands	r3, r2
 800f3f2:	2280      	movs	r2, #128	; 0x80
 800f3f4:	0292      	lsls	r2, r2, #10
 800f3f6:	4694      	mov	ip, r2
 800f3f8:	4463      	add	r3, ip
 800f3fa:	e036      	b.n	800f46a <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f3fc:	2320      	movs	r3, #32
 800f3fe:	e7bb      	b.n	800f378 <HAL_DMA_IRQHandler+0x690>
 800f400:	2380      	movs	r3, #128	; 0x80
 800f402:	009b      	lsls	r3, r3, #2
 800f404:	e7b8      	b.n	800f378 <HAL_DMA_IRQHandler+0x690>
 800f406:	2380      	movs	r3, #128	; 0x80
 800f408:	019b      	lsls	r3, r3, #6
 800f40a:	e7b5      	b.n	800f378 <HAL_DMA_IRQHandler+0x690>
 800f40c:	2380      	movs	r3, #128	; 0x80
 800f40e:	029b      	lsls	r3, r3, #10
 800f410:	e7b2      	b.n	800f378 <HAL_DMA_IRQHandler+0x690>
 800f412:	2380      	movs	r3, #128	; 0x80
 800f414:	039b      	lsls	r3, r3, #14
 800f416:	e7af      	b.n	800f378 <HAL_DMA_IRQHandler+0x690>
 800f418:	2380      	movs	r3, #128	; 0x80
 800f41a:	049b      	lsls	r3, r3, #18
 800f41c:	e7ac      	b.n	800f378 <HAL_DMA_IRQHandler+0x690>
 800f41e:	2302      	movs	r3, #2
 800f420:	e7aa      	b.n	800f378 <HAL_DMA_IRQHandler+0x690>
 800f422:	2320      	movs	r3, #32
 800f424:	e7a8      	b.n	800f378 <HAL_DMA_IRQHandler+0x690>
 800f426:	2380      	movs	r3, #128	; 0x80
 800f428:	009b      	lsls	r3, r3, #2
 800f42a:	e7a5      	b.n	800f378 <HAL_DMA_IRQHandler+0x690>
 800f42c:	2302      	movs	r3, #2
 800f42e:	4003      	ands	r3, r0
 800f430:	1e5a      	subs	r2, r3, #1
 800f432:	4193      	sbcs	r3, r2
 800f434:	b2db      	uxtb	r3, r3
 800f436:	e7a3      	b.n	800f380 <HAL_DMA_IRQHandler+0x698>
 800f438:	2320      	movs	r3, #32
 800f43a:	e7f8      	b.n	800f42e <HAL_DMA_IRQHandler+0x746>
 800f43c:	2380      	movs	r3, #128	; 0x80
 800f43e:	009b      	lsls	r3, r3, #2
 800f440:	e7f5      	b.n	800f42e <HAL_DMA_IRQHandler+0x746>
 800f442:	2380      	movs	r3, #128	; 0x80
 800f444:	019b      	lsls	r3, r3, #6
 800f446:	e7f2      	b.n	800f42e <HAL_DMA_IRQHandler+0x746>
 800f448:	2380      	movs	r3, #128	; 0x80
 800f44a:	029b      	lsls	r3, r3, #10
 800f44c:	e7ef      	b.n	800f42e <HAL_DMA_IRQHandler+0x746>
 800f44e:	2380      	movs	r3, #128	; 0x80
 800f450:	039b      	lsls	r3, r3, #14
 800f452:	e7ec      	b.n	800f42e <HAL_DMA_IRQHandler+0x746>
 800f454:	2380      	movs	r3, #128	; 0x80
 800f456:	049b      	lsls	r3, r3, #18
 800f458:	e7e9      	b.n	800f42e <HAL_DMA_IRQHandler+0x746>
 800f45a:	2302      	movs	r3, #2
 800f45c:	e7e7      	b.n	800f42e <HAL_DMA_IRQHandler+0x746>
 800f45e:	2320      	movs	r3, #32
 800f460:	e7e5      	b.n	800f42e <HAL_DMA_IRQHandler+0x746>
 800f462:	2380      	movs	r3, #128	; 0x80
 800f464:	009b      	lsls	r3, r3, #2
 800f466:	e7e2      	b.n	800f42e <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800f468:	2302      	movs	r3, #2
 800f46a:	4a49      	ldr	r2, [pc, #292]	; (800f590 <HAL_DMA_IRQHandler+0x8a8>)
 800f46c:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800f46e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f470:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 800f472:	2321      	movs	r3, #33	; 0x21
 800f474:	2201      	movs	r2, #1
 800f476:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 800f478:	3b01      	subs	r3, #1
 800f47a:	2200      	movs	r2, #0
 800f47c:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 800f47e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f480:	2b00      	cmp	r3, #0
 800f482:	d001      	beq.n	800f488 <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 800f484:	0020      	movs	r0, r4
 800f486:	4798      	blx	r3
}  
 800f488:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800f48a:	2320      	movs	r3, #32
 800f48c:	e7ed      	b.n	800f46a <HAL_DMA_IRQHandler+0x782>
 800f48e:	2380      	movs	r3, #128	; 0x80
 800f490:	009b      	lsls	r3, r3, #2
 800f492:	e7ea      	b.n	800f46a <HAL_DMA_IRQHandler+0x782>
 800f494:	2380      	movs	r3, #128	; 0x80
 800f496:	019b      	lsls	r3, r3, #6
 800f498:	e7e7      	b.n	800f46a <HAL_DMA_IRQHandler+0x782>
 800f49a:	2380      	movs	r3, #128	; 0x80
 800f49c:	029b      	lsls	r3, r3, #10
 800f49e:	e7e4      	b.n	800f46a <HAL_DMA_IRQHandler+0x782>
 800f4a0:	2380      	movs	r3, #128	; 0x80
 800f4a2:	039b      	lsls	r3, r3, #14
 800f4a4:	e7e1      	b.n	800f46a <HAL_DMA_IRQHandler+0x782>
 800f4a6:	2380      	movs	r3, #128	; 0x80
 800f4a8:	049b      	lsls	r3, r3, #18
 800f4aa:	e7de      	b.n	800f46a <HAL_DMA_IRQHandler+0x782>
 800f4ac:	2302      	movs	r3, #2
 800f4ae:	e7dc      	b.n	800f46a <HAL_DMA_IRQHandler+0x782>
 800f4b0:	2320      	movs	r3, #32
 800f4b2:	e7da      	b.n	800f46a <HAL_DMA_IRQHandler+0x782>
 800f4b4:	2380      	movs	r3, #128	; 0x80
 800f4b6:	009b      	lsls	r3, r3, #2
 800f4b8:	e7d7      	b.n	800f46a <HAL_DMA_IRQHandler+0x782>
 800f4ba:	4a27      	ldr	r2, [pc, #156]	; (800f558 <HAL_DMA_IRQHandler+0x870>)
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d027      	beq.n	800f510 <HAL_DMA_IRQHandler+0x828>
 800f4c0:	4a26      	ldr	r2, [pc, #152]	; (800f55c <HAL_DMA_IRQHandler+0x874>)
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d028      	beq.n	800f518 <HAL_DMA_IRQHandler+0x830>
 800f4c6:	4a26      	ldr	r2, [pc, #152]	; (800f560 <HAL_DMA_IRQHandler+0x878>)
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d027      	beq.n	800f51c <HAL_DMA_IRQHandler+0x834>
 800f4cc:	4a25      	ldr	r2, [pc, #148]	; (800f564 <HAL_DMA_IRQHandler+0x87c>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	d027      	beq.n	800f522 <HAL_DMA_IRQHandler+0x83a>
 800f4d2:	4a25      	ldr	r2, [pc, #148]	; (800f568 <HAL_DMA_IRQHandler+0x880>)
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	d027      	beq.n	800f528 <HAL_DMA_IRQHandler+0x840>
 800f4d8:	4a24      	ldr	r2, [pc, #144]	; (800f56c <HAL_DMA_IRQHandler+0x884>)
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d027      	beq.n	800f52e <HAL_DMA_IRQHandler+0x846>
 800f4de:	4a24      	ldr	r2, [pc, #144]	; (800f570 <HAL_DMA_IRQHandler+0x888>)
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d027      	beq.n	800f534 <HAL_DMA_IRQHandler+0x84c>
 800f4e4:	4a23      	ldr	r2, [pc, #140]	; (800f574 <HAL_DMA_IRQHandler+0x88c>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d027      	beq.n	800f53a <HAL_DMA_IRQHandler+0x852>
 800f4ea:	4a23      	ldr	r2, [pc, #140]	; (800f578 <HAL_DMA_IRQHandler+0x890>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d026      	beq.n	800f53e <HAL_DMA_IRQHandler+0x856>
 800f4f0:	4a22      	ldr	r2, [pc, #136]	; (800f57c <HAL_DMA_IRQHandler+0x894>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d025      	beq.n	800f542 <HAL_DMA_IRQHandler+0x85a>
 800f4f6:	4a22      	ldr	r2, [pc, #136]	; (800f580 <HAL_DMA_IRQHandler+0x898>)
 800f4f8:	4694      	mov	ip, r2
 800f4fa:	4463      	add	r3, ip
 800f4fc:	425a      	negs	r2, r3
 800f4fe:	4153      	adcs	r3, r2
 800f500:	425b      	negs	r3, r3
 800f502:	4a22      	ldr	r2, [pc, #136]	; (800f58c <HAL_DMA_IRQHandler+0x8a4>)
 800f504:	4013      	ands	r3, r2
 800f506:	2280      	movs	r2, #128	; 0x80
 800f508:	0292      	lsls	r2, r2, #10
 800f50a:	4694      	mov	ip, r2
 800f50c:	4463      	add	r3, ip
 800f50e:	e000      	b.n	800f512 <HAL_DMA_IRQHandler+0x82a>
 800f510:	2302      	movs	r3, #2
 800f512:	4a1d      	ldr	r2, [pc, #116]	; (800f588 <HAL_DMA_IRQHandler+0x8a0>)
 800f514:	6053      	str	r3, [r2, #4]
 800f516:	e7aa      	b.n	800f46e <HAL_DMA_IRQHandler+0x786>
 800f518:	2320      	movs	r3, #32
 800f51a:	e7fa      	b.n	800f512 <HAL_DMA_IRQHandler+0x82a>
 800f51c:	2380      	movs	r3, #128	; 0x80
 800f51e:	009b      	lsls	r3, r3, #2
 800f520:	e7f7      	b.n	800f512 <HAL_DMA_IRQHandler+0x82a>
 800f522:	2380      	movs	r3, #128	; 0x80
 800f524:	019b      	lsls	r3, r3, #6
 800f526:	e7f4      	b.n	800f512 <HAL_DMA_IRQHandler+0x82a>
 800f528:	2380      	movs	r3, #128	; 0x80
 800f52a:	029b      	lsls	r3, r3, #10
 800f52c:	e7f1      	b.n	800f512 <HAL_DMA_IRQHandler+0x82a>
 800f52e:	2380      	movs	r3, #128	; 0x80
 800f530:	039b      	lsls	r3, r3, #14
 800f532:	e7ee      	b.n	800f512 <HAL_DMA_IRQHandler+0x82a>
 800f534:	2380      	movs	r3, #128	; 0x80
 800f536:	049b      	lsls	r3, r3, #18
 800f538:	e7eb      	b.n	800f512 <HAL_DMA_IRQHandler+0x82a>
 800f53a:	2302      	movs	r3, #2
 800f53c:	e7e9      	b.n	800f512 <HAL_DMA_IRQHandler+0x82a>
 800f53e:	2320      	movs	r3, #32
 800f540:	e7e7      	b.n	800f512 <HAL_DMA_IRQHandler+0x82a>
 800f542:	2380      	movs	r3, #128	; 0x80
 800f544:	009b      	lsls	r3, r3, #2
 800f546:	e7e4      	b.n	800f512 <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800f548:	6821      	ldr	r1, [r4, #0]
 800f54a:	e65e      	b.n	800f20a <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f54c:	681a      	ldr	r2, [r3, #0]
 800f54e:	0712      	lsls	r2, r2, #28
 800f550:	d500      	bpl.n	800f554 <HAL_DMA_IRQHandler+0x86c>
 800f552:	e49b      	b.n	800ee8c <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 800f554:	6823      	ldr	r3, [r4, #0]
 800f556:	e44b      	b.n	800edf0 <HAL_DMA_IRQHandler+0x108>
 800f558:	40020008 	.word	0x40020008
 800f55c:	4002001c 	.word	0x4002001c
 800f560:	40020030 	.word	0x40020030
 800f564:	40020044 	.word	0x40020044
 800f568:	40020058 	.word	0x40020058
 800f56c:	4002006c 	.word	0x4002006c
 800f570:	40020080 	.word	0x40020080
 800f574:	40020408 	.word	0x40020408
 800f578:	4002041c 	.word	0x4002041c
 800f57c:	40020430 	.word	0x40020430
 800f580:	bffdfbbc 	.word	0xbffdfbbc
 800f584:	fffc4000 	.word	0xfffc4000
 800f588:	40020000 	.word	0x40020000
 800f58c:	fffe2000 	.word	0xfffe2000
 800f590:	40020400 	.word	0x40020400

0800f594 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800f594:	4b0a      	ldr	r3, [pc, #40]	; (800f5c0 <FLASH_SetErrorCode+0x2c>)
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	06db      	lsls	r3, r3, #27
 800f59a:	d504      	bpl.n	800f5a6 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f59c:	4a09      	ldr	r2, [pc, #36]	; (800f5c4 <FLASH_SetErrorCode+0x30>)
 800f59e:	69d3      	ldr	r3, [r2, #28]
 800f5a0:	2102      	movs	r1, #2
 800f5a2:	430b      	orrs	r3, r1
 800f5a4:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800f5a6:	4b06      	ldr	r3, [pc, #24]	; (800f5c0 <FLASH_SetErrorCode+0x2c>)
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	075b      	lsls	r3, r3, #29
 800f5ac:	d504      	bpl.n	800f5b8 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800f5ae:	4a05      	ldr	r2, [pc, #20]	; (800f5c4 <FLASH_SetErrorCode+0x30>)
 800f5b0:	69d3      	ldr	r3, [r2, #28]
 800f5b2:	2101      	movs	r1, #1
 800f5b4:	430b      	orrs	r3, r1
 800f5b6:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 800f5b8:	4b01      	ldr	r3, [pc, #4]	; (800f5c0 <FLASH_SetErrorCode+0x2c>)
 800f5ba:	2214      	movs	r2, #20
 800f5bc:	60da      	str	r2, [r3, #12]
}  
 800f5be:	4770      	bx	lr
 800f5c0:	40022000 	.word	0x40022000
 800f5c4:	20006e30 	.word	0x20006e30

0800f5c8 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 800f5c8:	4b05      	ldr	r3, [pc, #20]	; (800f5e0 <HAL_FLASH_Unlock+0x18>)
 800f5ca:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 800f5cc:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 800f5ce:	061b      	lsls	r3, r3, #24
 800f5d0:	d505      	bpl.n	800f5de <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800f5d2:	4b03      	ldr	r3, [pc, #12]	; (800f5e0 <HAL_FLASH_Unlock+0x18>)
 800f5d4:	4a03      	ldr	r2, [pc, #12]	; (800f5e4 <HAL_FLASH_Unlock+0x1c>)
 800f5d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800f5d8:	4a03      	ldr	r2, [pc, #12]	; (800f5e8 <HAL_FLASH_Unlock+0x20>)
 800f5da:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 800f5dc:	2000      	movs	r0, #0
}
 800f5de:	4770      	bx	lr
 800f5e0:	40022000 	.word	0x40022000
 800f5e4:	45670123 	.word	0x45670123
 800f5e8:	cdef89ab 	.word	0xcdef89ab

0800f5ec <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800f5ec:	4a03      	ldr	r2, [pc, #12]	; (800f5fc <HAL_FLASH_Lock+0x10>)
 800f5ee:	6913      	ldr	r3, [r2, #16]
 800f5f0:	2180      	movs	r1, #128	; 0x80
 800f5f2:	430b      	orrs	r3, r1
 800f5f4:	6113      	str	r3, [r2, #16]
}
 800f5f6:	2000      	movs	r0, #0
 800f5f8:	4770      	bx	lr
 800f5fa:	46c0      	nop			; (mov r8, r8)
 800f5fc:	40022000 	.word	0x40022000

0800f600 <FLASH_WaitForLastOperation>:
{
 800f600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f602:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800f604:	f7ff f928 	bl	800e858 <HAL_GetTick>
 800f608:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800f60a:	4e13      	ldr	r6, [pc, #76]	; (800f658 <FLASH_WaitForLastOperation+0x58>)
 800f60c:	2501      	movs	r5, #1
 800f60e:	68f3      	ldr	r3, [r6, #12]
 800f610:	421d      	tst	r5, r3
 800f612:	d00a      	beq.n	800f62a <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 800f614:	1c63      	adds	r3, r4, #1
 800f616:	d0fa      	beq.n	800f60e <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800f618:	2c00      	cmp	r4, #0
 800f61a:	d01a      	beq.n	800f652 <FLASH_WaitForLastOperation+0x52>
 800f61c:	f7ff f91c 	bl	800e858 <HAL_GetTick>
 800f620:	1bc0      	subs	r0, r0, r7
 800f622:	42a0      	cmp	r0, r4
 800f624:	d9f3      	bls.n	800f60e <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 800f626:	2003      	movs	r0, #3
 800f628:	e012      	b.n	800f650 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800f62a:	4b0b      	ldr	r3, [pc, #44]	; (800f658 <FLASH_WaitForLastOperation+0x58>)
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	069b      	lsls	r3, r3, #26
 800f630:	d502      	bpl.n	800f638 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800f632:	4b09      	ldr	r3, [pc, #36]	; (800f658 <FLASH_WaitForLastOperation+0x58>)
 800f634:	2220      	movs	r2, #32
 800f636:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800f638:	4b07      	ldr	r3, [pc, #28]	; (800f658 <FLASH_WaitForLastOperation+0x58>)
 800f63a:	68db      	ldr	r3, [r3, #12]
 800f63c:	06db      	lsls	r3, r3, #27
 800f63e:	d404      	bmi.n	800f64a <FLASH_WaitForLastOperation+0x4a>
 800f640:	4b05      	ldr	r3, [pc, #20]	; (800f658 <FLASH_WaitForLastOperation+0x58>)
 800f642:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 800f644:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800f646:	075b      	lsls	r3, r3, #29
 800f648:	d502      	bpl.n	800f650 <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 800f64a:	f7ff ffa3 	bl	800f594 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800f64e:	2001      	movs	r0, #1
}
 800f650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800f652:	2003      	movs	r0, #3
 800f654:	e7fc      	b.n	800f650 <FLASH_WaitForLastOperation+0x50>
 800f656:	46c0      	nop			; (mov r8, r8)
 800f658:	40022000 	.word	0x40022000

0800f65c <HAL_FLASH_Program>:
{
 800f65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f65e:	46de      	mov	lr, fp
 800f660:	4657      	mov	r7, sl
 800f662:	464e      	mov	r6, r9
 800f664:	4645      	mov	r5, r8
 800f666:	b5e0      	push	{r5, r6, r7, lr}
 800f668:	b083      	sub	sp, #12
 800f66a:	0004      	movs	r4, r0
 800f66c:	000e      	movs	r6, r1
 800f66e:	9201      	str	r2, [sp, #4]
 800f670:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 800f672:	4b2a      	ldr	r3, [pc, #168]	; (800f71c <HAL_FLASH_Program+0xc0>)
 800f674:	7e1b      	ldrb	r3, [r3, #24]
 800f676:	2b01      	cmp	r3, #1
 800f678:	d04b      	beq.n	800f712 <HAL_FLASH_Program+0xb6>
 800f67a:	4b28      	ldr	r3, [pc, #160]	; (800f71c <HAL_FLASH_Program+0xc0>)
 800f67c:	2201      	movs	r2, #1
 800f67e:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f680:	4827      	ldr	r0, [pc, #156]	; (800f720 <HAL_FLASH_Program+0xc4>)
 800f682:	f7ff ffbd 	bl	800f600 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800f686:	2800      	cmp	r0, #0
 800f688:	d139      	bne.n	800f6fe <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800f68a:	2c01      	cmp	r4, #1
 800f68c:	d043      	beq.n	800f716 <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 800f68e:	3c02      	subs	r4, #2
 800f690:	4263      	negs	r3, r4
 800f692:	415c      	adcs	r4, r3
 800f694:	4264      	negs	r4, r4
 800f696:	2301      	movs	r3, #1
 800f698:	439c      	bics	r4, r3
 800f69a:	46a0      	mov	r8, r4
 800f69c:	3303      	adds	r3, #3
 800f69e:	469c      	mov	ip, r3
 800f6a0:	44e0      	add	r8, ip
{
 800f6a2:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f6a4:	4b1d      	ldr	r3, [pc, #116]	; (800f71c <HAL_FLASH_Program+0xc0>)
 800f6a6:	469b      	mov	fp, r3
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800f6ac:	4c1d      	ldr	r4, [pc, #116]	; (800f724 <HAL_FLASH_Program+0xc8>)
 800f6ae:	e01e      	b.n	800f6ee <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 800f6b0:	2220      	movs	r2, #32
 800f6b2:	1ad2      	subs	r2, r2, r3
 800f6b4:	4649      	mov	r1, r9
 800f6b6:	4091      	lsls	r1, r2
 800f6b8:	000a      	movs	r2, r1
 800f6ba:	9901      	ldr	r1, [sp, #4]
 800f6bc:	40d9      	lsrs	r1, r3
 800f6be:	000b      	movs	r3, r1
 800f6c0:	4313      	orrs	r3, r2
 800f6c2:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f6c4:	465a      	mov	r2, fp
 800f6c6:	4651      	mov	r1, sl
 800f6c8:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800f6ca:	6922      	ldr	r2, [r4, #16]
 800f6cc:	2701      	movs	r7, #1
 800f6ce:	433a      	orrs	r2, r7
 800f6d0:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 800f6d2:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f6d4:	4812      	ldr	r0, [pc, #72]	; (800f720 <HAL_FLASH_Program+0xc4>)
 800f6d6:	f7ff ff93 	bl	800f600 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800f6da:	6923      	ldr	r3, [r4, #16]
 800f6dc:	43bb      	bics	r3, r7
 800f6de:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 800f6e0:	2800      	cmp	r0, #0
 800f6e2:	d10c      	bne.n	800f6fe <HAL_FLASH_Program+0xa2>
 800f6e4:	3501      	adds	r5, #1
 800f6e6:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 800f6e8:	b2eb      	uxtb	r3, r5
 800f6ea:	4598      	cmp	r8, r3
 800f6ec:	d907      	bls.n	800f6fe <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 800f6ee:	012b      	lsls	r3, r5, #4
 800f6f0:	2220      	movs	r2, #32
 800f6f2:	4252      	negs	r2, r2
 800f6f4:	189a      	adds	r2, r3, r2
 800f6f6:	d4db      	bmi.n	800f6b0 <HAL_FLASH_Program+0x54>
 800f6f8:	464b      	mov	r3, r9
 800f6fa:	40d3      	lsrs	r3, r2
 800f6fc:	e7e1      	b.n	800f6c2 <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 800f6fe:	4b07      	ldr	r3, [pc, #28]	; (800f71c <HAL_FLASH_Program+0xc0>)
 800f700:	2200      	movs	r2, #0
 800f702:	761a      	strb	r2, [r3, #24]
}
 800f704:	b003      	add	sp, #12
 800f706:	bc3c      	pop	{r2, r3, r4, r5}
 800f708:	4690      	mov	r8, r2
 800f70a:	4699      	mov	r9, r3
 800f70c:	46a2      	mov	sl, r4
 800f70e:	46ab      	mov	fp, r5
 800f710:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 800f712:	2002      	movs	r0, #2
 800f714:	e7f6      	b.n	800f704 <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 800f716:	2301      	movs	r3, #1
 800f718:	4698      	mov	r8, r3
 800f71a:	e7c2      	b.n	800f6a2 <HAL_FLASH_Program+0x46>
 800f71c:	20006e30 	.word	0x20006e30
 800f720:	0000c350 	.word	0x0000c350
 800f724:	40022000 	.word	0x40022000

0800f728 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f728:	4b06      	ldr	r3, [pc, #24]	; (800f744 <FLASH_MassErase+0x1c>)
 800f72a:	2200      	movs	r2, #0
 800f72c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800f72e:	4b06      	ldr	r3, [pc, #24]	; (800f748 <FLASH_MassErase+0x20>)
 800f730:	691a      	ldr	r2, [r3, #16]
 800f732:	2104      	movs	r1, #4
 800f734:	430a      	orrs	r2, r1
 800f736:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800f738:	691a      	ldr	r2, [r3, #16]
 800f73a:	313c      	adds	r1, #60	; 0x3c
 800f73c:	430a      	orrs	r2, r1
 800f73e:	611a      	str	r2, [r3, #16]
}
 800f740:	4770      	bx	lr
 800f742:	46c0      	nop			; (mov r8, r8)
 800f744:	20006e30 	.word	0x20006e30
 800f748:	40022000 	.word	0x40022000

0800f74c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f74c:	4b06      	ldr	r3, [pc, #24]	; (800f768 <FLASH_PageErase+0x1c>)
 800f74e:	2200      	movs	r2, #0
 800f750:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800f752:	4b06      	ldr	r3, [pc, #24]	; (800f76c <FLASH_PageErase+0x20>)
 800f754:	691a      	ldr	r2, [r3, #16]
 800f756:	2102      	movs	r1, #2
 800f758:	430a      	orrs	r2, r1
 800f75a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800f75c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800f75e:	691a      	ldr	r2, [r3, #16]
 800f760:	313e      	adds	r1, #62	; 0x3e
 800f762:	430a      	orrs	r2, r1
 800f764:	611a      	str	r2, [r3, #16]
}
 800f766:	4770      	bx	lr
 800f768:	20006e30 	.word	0x20006e30
 800f76c:	40022000 	.word	0x40022000

0800f770 <HAL_FLASHEx_Erase>:
{
 800f770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f772:	46c6      	mov	lr, r8
 800f774:	b500      	push	{lr}
 800f776:	0006      	movs	r6, r0
 800f778:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800f77a:	4b2a      	ldr	r3, [pc, #168]	; (800f824 <HAL_FLASHEx_Erase+0xb4>)
 800f77c:	7e1b      	ldrb	r3, [r3, #24]
 800f77e:	2b01      	cmp	r3, #1
 800f780:	d04d      	beq.n	800f81e <HAL_FLASHEx_Erase+0xae>
 800f782:	4b28      	ldr	r3, [pc, #160]	; (800f824 <HAL_FLASHEx_Erase+0xb4>)
 800f784:	2201      	movs	r2, #1
 800f786:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800f788:	6803      	ldr	r3, [r0, #0]
 800f78a:	2b01      	cmp	r3, #1
 800f78c:	d029      	beq.n	800f7e2 <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800f78e:	4826      	ldr	r0, [pc, #152]	; (800f828 <HAL_FLASHEx_Erase+0xb8>)
 800f790:	f7ff ff36 	bl	800f600 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 800f794:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800f796:	2800      	cmp	r0, #0
 800f798:	d129      	bne.n	800f7ee <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 800f79a:	2301      	movs	r3, #1
 800f79c:	425b      	negs	r3, r3
 800f79e:	4642      	mov	r2, r8
 800f7a0:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 800f7a2:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 800f7a4:	68b3      	ldr	r3, [r6, #8]
 800f7a6:	02db      	lsls	r3, r3, #11
 800f7a8:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 800f7aa:	429c      	cmp	r4, r3
 800f7ac:	d235      	bcs.n	800f81a <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800f7ae:	4f1f      	ldr	r7, [pc, #124]	; (800f82c <HAL_FLASHEx_Erase+0xbc>)
 800f7b0:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 800f7b2:	0020      	movs	r0, r4
 800f7b4:	f7ff ffca 	bl	800f74c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f7b8:	481b      	ldr	r0, [pc, #108]	; (800f828 <HAL_FLASHEx_Erase+0xb8>)
 800f7ba:	f7ff ff21 	bl	800f600 <FLASH_WaitForLastOperation>
 800f7be:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	43ab      	bics	r3, r5
 800f7c4:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 800f7c6:	2800      	cmp	r0, #0
 800f7c8:	d124      	bne.n	800f814 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 800f7ca:	2380      	movs	r3, #128	; 0x80
 800f7cc:	011b      	lsls	r3, r3, #4
 800f7ce:	469c      	mov	ip, r3
 800f7d0:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 800f7d2:	68b3      	ldr	r3, [r6, #8]
 800f7d4:	02db      	lsls	r3, r3, #11
 800f7d6:	6871      	ldr	r1, [r6, #4]
 800f7d8:	468c      	mov	ip, r1
 800f7da:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 800f7dc:	42a3      	cmp	r3, r4
 800f7de:	d8e8      	bhi.n	800f7b2 <HAL_FLASHEx_Erase+0x42>
 800f7e0:	e005      	b.n	800f7ee <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800f7e2:	4811      	ldr	r0, [pc, #68]	; (800f828 <HAL_FLASHEx_Erase+0xb8>)
 800f7e4:	f7ff ff0c 	bl	800f600 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 800f7e8:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800f7ea:	2800      	cmp	r0, #0
 800f7ec:	d006      	beq.n	800f7fc <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 800f7ee:	4b0d      	ldr	r3, [pc, #52]	; (800f824 <HAL_FLASHEx_Erase+0xb4>)
 800f7f0:	2100      	movs	r1, #0
 800f7f2:	7619      	strb	r1, [r3, #24]
}
 800f7f4:	0010      	movs	r0, r2
 800f7f6:	bc04      	pop	{r2}
 800f7f8:	4690      	mov	r8, r2
 800f7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 800f7fc:	f7ff ff94 	bl	800f728 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f800:	4809      	ldr	r0, [pc, #36]	; (800f828 <HAL_FLASHEx_Erase+0xb8>)
 800f802:	f7ff fefd 	bl	800f600 <FLASH_WaitForLastOperation>
 800f806:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800f808:	4908      	ldr	r1, [pc, #32]	; (800f82c <HAL_FLASHEx_Erase+0xbc>)
 800f80a:	690b      	ldr	r3, [r1, #16]
 800f80c:	2004      	movs	r0, #4
 800f80e:	4383      	bics	r3, r0
 800f810:	610b      	str	r3, [r1, #16]
 800f812:	e7ec      	b.n	800f7ee <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 800f814:	4643      	mov	r3, r8
 800f816:	601c      	str	r4, [r3, #0]
            break;
 800f818:	e7e9      	b.n	800f7ee <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 800f81a:	2201      	movs	r2, #1
 800f81c:	e7e7      	b.n	800f7ee <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 800f81e:	2202      	movs	r2, #2
 800f820:	e7e8      	b.n	800f7f4 <HAL_FLASHEx_Erase+0x84>
 800f822:	46c0      	nop			; (mov r8, r8)
 800f824:	20006e30 	.word	0x20006e30
 800f828:	0000c350 	.word	0x0000c350
 800f82c:	40022000 	.word	0x40022000

0800f830 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800f830:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f832:	46de      	mov	lr, fp
 800f834:	4657      	mov	r7, sl
 800f836:	464e      	mov	r6, r9
 800f838:	4645      	mov	r5, r8
 800f83a:	b5e0      	push	{r5, r6, r7, lr}
 800f83c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 800f83e:	680a      	ldr	r2, [r1, #0]
 800f840:	2a00      	cmp	r2, #0
 800f842:	d100      	bne.n	800f846 <HAL_GPIO_Init+0x16>
 800f844:	e0bf      	b.n	800f9c6 <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 800f846:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 800f848:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800f84a:	2410      	movs	r4, #16
 800f84c:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800f84e:	3c0d      	subs	r4, #13
 800f850:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800f852:	2480      	movs	r4, #128	; 0x80
 800f854:	0564      	lsls	r4, r4, #21
 800f856:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800f858:	4c5e      	ldr	r4, [pc, #376]	; (800f9d4 <HAL_GPIO_Init+0x1a4>)
 800f85a:	1904      	adds	r4, r0, r4
 800f85c:	1e65      	subs	r5, r4, #1
 800f85e:	41ac      	sbcs	r4, r5
 800f860:	3404      	adds	r4, #4
 800f862:	46a1      	mov	r9, r4
 800f864:	e03b      	b.n	800f8de <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 800f866:	08dc      	lsrs	r4, r3, #3
 800f868:	00a4      	lsls	r4, r4, #2
 800f86a:	1904      	adds	r4, r0, r4
 800f86c:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 800f86e:	2507      	movs	r5, #7
 800f870:	401d      	ands	r5, r3
 800f872:	00ad      	lsls	r5, r5, #2
 800f874:	220f      	movs	r2, #15
 800f876:	40aa      	lsls	r2, r5
 800f878:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 800f87a:	690a      	ldr	r2, [r1, #16]
 800f87c:	40aa      	lsls	r2, r5
 800f87e:	0015      	movs	r5, r2
 800f880:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 800f882:	6225      	str	r5, [r4, #32]
 800f884:	e035      	b.n	800f8f2 <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800f886:	2500      	movs	r5, #0
 800f888:	465a      	mov	r2, fp
 800f88a:	4095      	lsls	r5, r2
 800f88c:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800f88e:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f890:	4c51      	ldr	r4, [pc, #324]	; (800f9d8 <HAL_GPIO_Init+0x1a8>)
 800f892:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800f894:	9a01      	ldr	r2, [sp, #4]
 800f896:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800f898:	684a      	ldr	r2, [r1, #4]
 800f89a:	03d2      	lsls	r2, r2, #15
 800f89c:	d500      	bpl.n	800f8a0 <HAL_GPIO_Init+0x70>
 800f89e:	e086      	b.n	800f9ae <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800f8a0:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 800f8a2:	4f4d      	ldr	r7, [pc, #308]	; (800f9d8 <HAL_GPIO_Init+0x1a8>)
 800f8a4:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 800f8a6:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800f8a8:	684a      	ldr	r2, [r1, #4]
 800f8aa:	0392      	lsls	r2, r2, #14
 800f8ac:	d500      	bpl.n	800f8b0 <HAL_GPIO_Init+0x80>
 800f8ae:	e081      	b.n	800f9b4 <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800f8b0:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 800f8b2:	4f49      	ldr	r7, [pc, #292]	; (800f9d8 <HAL_GPIO_Init+0x1a8>)
 800f8b4:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f8b6:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800f8b8:	684a      	ldr	r2, [r1, #4]
 800f8ba:	02d2      	lsls	r2, r2, #11
 800f8bc:	d47d      	bmi.n	800f9ba <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800f8be:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 800f8c0:	4f45      	ldr	r7, [pc, #276]	; (800f9d8 <HAL_GPIO_Init+0x1a8>)
 800f8c2:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 800f8c4:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800f8c6:	684a      	ldr	r2, [r1, #4]
 800f8c8:	0292      	lsls	r2, r2, #10
 800f8ca:	d479      	bmi.n	800f9c0 <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800f8cc:	0022      	movs	r2, r4
 800f8ce:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 800f8d0:	4c41      	ldr	r4, [pc, #260]	; (800f9d8 <HAL_GPIO_Init+0x1a8>)
 800f8d2:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 800f8d4:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 800f8d6:	680a      	ldr	r2, [r1, #0]
 800f8d8:	0014      	movs	r4, r2
 800f8da:	40dc      	lsrs	r4, r3
 800f8dc:	d073      	beq.n	800f9c6 <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 800f8de:	0034      	movs	r4, r6
 800f8e0:	409c      	lsls	r4, r3
 800f8e2:	4022      	ands	r2, r4
 800f8e4:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 800f8e6:	d0f5      	beq.n	800f8d4 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800f8e8:	684c      	ldr	r4, [r1, #4]
 800f8ea:	4642      	mov	r2, r8
 800f8ec:	4394      	bics	r4, r2
 800f8ee:	2c02      	cmp	r4, #2
 800f8f0:	d0b9      	beq.n	800f866 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 800f8f2:	6804      	ldr	r4, [r0, #0]
 800f8f4:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800f8f6:	4665      	mov	r5, ip
 800f8f8:	40bd      	lsls	r5, r7
 800f8fa:	43ed      	mvns	r5, r5
 800f8fc:	402c      	ands	r4, r5
 800f8fe:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800f900:	684c      	ldr	r4, [r1, #4]
 800f902:	4662      	mov	r2, ip
 800f904:	4014      	ands	r4, r2
 800f906:	40bc      	lsls	r4, r7
 800f908:	465a      	mov	r2, fp
 800f90a:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 800f90c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f90e:	684c      	ldr	r4, [r1, #4]
 800f910:	4642      	mov	r2, r8
 800f912:	4394      	bics	r4, r2
 800f914:	3c01      	subs	r4, #1
 800f916:	2c01      	cmp	r4, #1
 800f918:	d813      	bhi.n	800f942 <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 800f91a:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800f91c:	402c      	ands	r4, r5
 800f91e:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800f920:	68cc      	ldr	r4, [r1, #12]
 800f922:	40bc      	lsls	r4, r7
 800f924:	465a      	mov	r2, fp
 800f926:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 800f928:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800f92a:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800f92c:	0032      	movs	r2, r6
 800f92e:	409a      	lsls	r2, r3
 800f930:	4394      	bics	r4, r2
 800f932:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800f934:	684a      	ldr	r2, [r1, #4]
 800f936:	0914      	lsrs	r4, r2, #4
 800f938:	4034      	ands	r4, r6
 800f93a:	409c      	lsls	r4, r3
 800f93c:	465a      	mov	r2, fp
 800f93e:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 800f940:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 800f942:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800f944:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800f946:	688d      	ldr	r5, [r1, #8]
 800f948:	40bd      	lsls	r5, r7
 800f94a:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 800f94c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800f94e:	684a      	ldr	r2, [r1, #4]
 800f950:	4654      	mov	r4, sl
 800f952:	4222      	tst	r2, r4
 800f954:	d0be      	beq.n	800f8d4 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f956:	4c21      	ldr	r4, [pc, #132]	; (800f9dc <HAL_GPIO_Init+0x1ac>)
 800f958:	69a5      	ldr	r5, [r4, #24]
 800f95a:	4335      	orrs	r5, r6
 800f95c:	61a5      	str	r5, [r4, #24]
 800f95e:	69a4      	ldr	r4, [r4, #24]
 800f960:	4034      	ands	r4, r6
 800f962:	9403      	str	r4, [sp, #12]
 800f964:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800f966:	089c      	lsrs	r4, r3, #2
 800f968:	00a4      	lsls	r4, r4, #2
 800f96a:	4a1d      	ldr	r2, [pc, #116]	; (800f9e0 <HAL_GPIO_Init+0x1b0>)
 800f96c:	4693      	mov	fp, r2
 800f96e:	445c      	add	r4, fp
 800f970:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800f972:	4667      	mov	r7, ip
 800f974:	401f      	ands	r7, r3
 800f976:	00ba      	lsls	r2, r7, #2
 800f978:	4693      	mov	fp, r2
 800f97a:	270f      	movs	r7, #15
 800f97c:	4097      	lsls	r7, r2
 800f97e:	43bd      	bics	r5, r7
 800f980:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800f982:	2590      	movs	r5, #144	; 0x90
 800f984:	05ed      	lsls	r5, r5, #23
 800f986:	42a8      	cmp	r0, r5
 800f988:	d100      	bne.n	800f98c <HAL_GPIO_Init+0x15c>
 800f98a:	e77c      	b.n	800f886 <HAL_GPIO_Init+0x56>
 800f98c:	4d15      	ldr	r5, [pc, #84]	; (800f9e4 <HAL_GPIO_Init+0x1b4>)
 800f98e:	42a8      	cmp	r0, r5
 800f990:	d007      	beq.n	800f9a2 <HAL_GPIO_Init+0x172>
 800f992:	4d15      	ldr	r5, [pc, #84]	; (800f9e8 <HAL_GPIO_Init+0x1b8>)
 800f994:	42a8      	cmp	r0, r5
 800f996:	d006      	beq.n	800f9a6 <HAL_GPIO_Init+0x176>
 800f998:	4d14      	ldr	r5, [pc, #80]	; (800f9ec <HAL_GPIO_Init+0x1bc>)
 800f99a:	42a8      	cmp	r0, r5
 800f99c:	d005      	beq.n	800f9aa <HAL_GPIO_Init+0x17a>
 800f99e:	464d      	mov	r5, r9
 800f9a0:	e772      	b.n	800f888 <HAL_GPIO_Init+0x58>
 800f9a2:	0035      	movs	r5, r6
 800f9a4:	e770      	b.n	800f888 <HAL_GPIO_Init+0x58>
 800f9a6:	2502      	movs	r5, #2
 800f9a8:	e76e      	b.n	800f888 <HAL_GPIO_Init+0x58>
 800f9aa:	4665      	mov	r5, ip
 800f9ac:	e76c      	b.n	800f888 <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 800f9ae:	9a01      	ldr	r2, [sp, #4]
 800f9b0:	4314      	orrs	r4, r2
 800f9b2:	e776      	b.n	800f8a2 <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 800f9b4:	9a01      	ldr	r2, [sp, #4]
 800f9b6:	4314      	orrs	r4, r2
 800f9b8:	e77b      	b.n	800f8b2 <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 800f9ba:	9a01      	ldr	r2, [sp, #4]
 800f9bc:	4314      	orrs	r4, r2
 800f9be:	e77f      	b.n	800f8c0 <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 800f9c0:	9a01      	ldr	r2, [sp, #4]
 800f9c2:	4322      	orrs	r2, r4
 800f9c4:	e784      	b.n	800f8d0 <HAL_GPIO_Init+0xa0>
  } 
}
 800f9c6:	b005      	add	sp, #20
 800f9c8:	bc3c      	pop	{r2, r3, r4, r5}
 800f9ca:	4690      	mov	r8, r2
 800f9cc:	4699      	mov	r9, r3
 800f9ce:	46a2      	mov	sl, r4
 800f9d0:	46ab      	mov	fp, r5
 800f9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9d4:	b7fff000 	.word	0xb7fff000
 800f9d8:	40010400 	.word	0x40010400
 800f9dc:	40021000 	.word	0x40021000
 800f9e0:	40010000 	.word	0x40010000
 800f9e4:	48000400 	.word	0x48000400
 800f9e8:	48000800 	.word	0x48000800
 800f9ec:	48000c00 	.word	0x48000c00

0800f9f0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f9f0:	6900      	ldr	r0, [r0, #16]
 800f9f2:	4008      	ands	r0, r1
 800f9f4:	1e41      	subs	r1, r0, #1
 800f9f6:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800f9f8:	b2c0      	uxtb	r0, r0
  }
 800f9fa:	4770      	bx	lr

0800f9fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f9fc:	2a00      	cmp	r2, #0
 800f9fe:	d101      	bne.n	800fa04 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800fa00:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800fa02:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800fa04:	6181      	str	r1, [r0, #24]
 800fa06:	e7fc      	b.n	800fa02 <HAL_GPIO_WritePin+0x6>

0800fa08 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800fa08:	6943      	ldr	r3, [r0, #20]
 800fa0a:	4059      	eors	r1, r3
 800fa0c:	6141      	str	r1, [r0, #20]
}
 800fa0e:	4770      	bx	lr

0800fa10 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 800fa10:	4770      	bx	lr
	...

0800fa14 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 800fa14:	4a03      	ldr	r2, [pc, #12]	; (800fa24 <HAL_PWR_EnableBkUpAccess+0x10>)
 800fa16:	6811      	ldr	r1, [r2, #0]
 800fa18:	2380      	movs	r3, #128	; 0x80
 800fa1a:	005b      	lsls	r3, r3, #1
 800fa1c:	430b      	orrs	r3, r1
 800fa1e:	6013      	str	r3, [r2, #0]
}
 800fa20:	4770      	bx	lr
 800fa22:	46c0      	nop			; (mov r8, r8)
 800fa24:	40007000 	.word	0x40007000

0800fa28 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fa28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa2a:	46c6      	mov	lr, r8
 800fa2c:	b500      	push	{lr}
 800fa2e:	b082      	sub	sp, #8
 800fa30:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fa32:	6803      	ldr	r3, [r0, #0]
 800fa34:	07db      	lsls	r3, r3, #31
 800fa36:	d538      	bpl.n	800faaa <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800fa38:	4bbd      	ldr	r3, [pc, #756]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fa3a:	685a      	ldr	r2, [r3, #4]
 800fa3c:	230c      	movs	r3, #12
 800fa3e:	4013      	ands	r3, r2
 800fa40:	2b04      	cmp	r3, #4
 800fa42:	d02a      	beq.n	800fa9a <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800fa44:	4bba      	ldr	r3, [pc, #744]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fa46:	685a      	ldr	r2, [r3, #4]
 800fa48:	230c      	movs	r3, #12
 800fa4a:	4013      	ands	r3, r2
 800fa4c:	2b08      	cmp	r3, #8
 800fa4e:	d108      	bne.n	800fa62 <HAL_RCC_OscConfig+0x3a>
 800fa50:	4bb7      	ldr	r3, [pc, #732]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fa52:	685b      	ldr	r3, [r3, #4]
 800fa54:	22c0      	movs	r2, #192	; 0xc0
 800fa56:	0252      	lsls	r2, r2, #9
 800fa58:	4013      	ands	r3, r2
 800fa5a:	2280      	movs	r2, #128	; 0x80
 800fa5c:	0252      	lsls	r2, r2, #9
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d01b      	beq.n	800fa9a <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800fa62:	4bb3      	ldr	r3, [pc, #716]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fa64:	681a      	ldr	r2, [r3, #0]
 800fa66:	49b3      	ldr	r1, [pc, #716]	; (800fd34 <HAL_RCC_OscConfig+0x30c>)
 800fa68:	400a      	ands	r2, r1
 800fa6a:	601a      	str	r2, [r3, #0]
 800fa6c:	681a      	ldr	r2, [r3, #0]
 800fa6e:	49b2      	ldr	r1, [pc, #712]	; (800fd38 <HAL_RCC_OscConfig+0x310>)
 800fa70:	400a      	ands	r2, r1
 800fa72:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa74:	f7fe fef0 	bl	800e858 <HAL_GetTick>
 800fa78:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fa7a:	4ead      	ldr	r6, [pc, #692]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fa7c:	2580      	movs	r5, #128	; 0x80
 800fa7e:	02ad      	lsls	r5, r5, #10
 800fa80:	6833      	ldr	r3, [r6, #0]
 800fa82:	422b      	tst	r3, r5
 800fa84:	d039      	beq.n	800fafa <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fa86:	f7fe fee7 	bl	800e858 <HAL_GetTick>
 800fa8a:	1bc0      	subs	r0, r0, r7
 800fa8c:	2864      	cmp	r0, #100	; 0x64
 800fa8e:	d9f7      	bls.n	800fa80 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 800fa90:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 800fa92:	b002      	add	sp, #8
 800fa94:	bc04      	pop	{r2}
 800fa96:	4690      	mov	r8, r2
 800fa98:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fa9a:	4ba5      	ldr	r3, [pc, #660]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	039b      	lsls	r3, r3, #14
 800faa0:	d503      	bpl.n	800faaa <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 800faa2:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800faa4:	6863      	ldr	r3, [r4, #4]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d0f3      	beq.n	800fa92 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800faaa:	6823      	ldr	r3, [r4, #0]
 800faac:	079b      	lsls	r3, r3, #30
 800faae:	d400      	bmi.n	800fab2 <HAL_RCC_OscConfig+0x8a>
 800fab0:	e08d      	b.n	800fbce <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800fab2:	4b9f      	ldr	r3, [pc, #636]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fab4:	685b      	ldr	r3, [r3, #4]
 800fab6:	220c      	movs	r2, #12
 800fab8:	421a      	tst	r2, r3
 800faba:	d077      	beq.n	800fbac <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800fabc:	4b9c      	ldr	r3, [pc, #624]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fabe:	685a      	ldr	r2, [r3, #4]
 800fac0:	230c      	movs	r3, #12
 800fac2:	4013      	ands	r3, r2
 800fac4:	2b08      	cmp	r3, #8
 800fac6:	d068      	beq.n	800fb9a <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fac8:	68e3      	ldr	r3, [r4, #12]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d100      	bne.n	800fad0 <HAL_RCC_OscConfig+0xa8>
 800face:	e0a1      	b.n	800fc14 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 800fad0:	4a97      	ldr	r2, [pc, #604]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fad2:	6813      	ldr	r3, [r2, #0]
 800fad4:	2101      	movs	r1, #1
 800fad6:	430b      	orrs	r3, r1
 800fad8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800fada:	f7fe febd 	bl	800e858 <HAL_GetTick>
 800fade:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fae0:	4e93      	ldr	r6, [pc, #588]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fae2:	2502      	movs	r5, #2
 800fae4:	6833      	ldr	r3, [r6, #0]
 800fae6:	421d      	tst	r5, r3
 800fae8:	d000      	beq.n	800faec <HAL_RCC_OscConfig+0xc4>
 800faea:	e08a      	b.n	800fc02 <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800faec:	f7fe feb4 	bl	800e858 <HAL_GetTick>
 800faf0:	1bc0      	subs	r0, r0, r7
 800faf2:	2864      	cmp	r0, #100	; 0x64
 800faf4:	d9f6      	bls.n	800fae4 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 800faf6:	2003      	movs	r0, #3
 800faf8:	e7cb      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fafa:	6863      	ldr	r3, [r4, #4]
 800fafc:	2b01      	cmp	r3, #1
 800fafe:	d00b      	beq.n	800fb18 <HAL_RCC_OscConfig+0xf0>
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d122      	bne.n	800fb4a <HAL_RCC_OscConfig+0x122>
 800fb04:	4b8a      	ldr	r3, [pc, #552]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fb06:	681a      	ldr	r2, [r3, #0]
 800fb08:	498a      	ldr	r1, [pc, #552]	; (800fd34 <HAL_RCC_OscConfig+0x30c>)
 800fb0a:	400a      	ands	r2, r1
 800fb0c:	601a      	str	r2, [r3, #0]
 800fb0e:	681a      	ldr	r2, [r3, #0]
 800fb10:	4989      	ldr	r1, [pc, #548]	; (800fd38 <HAL_RCC_OscConfig+0x310>)
 800fb12:	400a      	ands	r2, r1
 800fb14:	601a      	str	r2, [r3, #0]
 800fb16:	e005      	b.n	800fb24 <HAL_RCC_OscConfig+0xfc>
 800fb18:	4a85      	ldr	r2, [pc, #532]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fb1a:	6811      	ldr	r1, [r2, #0]
 800fb1c:	2380      	movs	r3, #128	; 0x80
 800fb1e:	025b      	lsls	r3, r3, #9
 800fb20:	430b      	orrs	r3, r1
 800fb22:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fb24:	6863      	ldr	r3, [r4, #4]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d027      	beq.n	800fb7a <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 800fb2a:	f7fe fe95 	bl	800e858 <HAL_GetTick>
 800fb2e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fb30:	4e7f      	ldr	r6, [pc, #508]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fb32:	2580      	movs	r5, #128	; 0x80
 800fb34:	02ad      	lsls	r5, r5, #10
 800fb36:	6833      	ldr	r3, [r6, #0]
 800fb38:	422b      	tst	r3, r5
 800fb3a:	d1b6      	bne.n	800faaa <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fb3c:	f7fe fe8c 	bl	800e858 <HAL_GetTick>
 800fb40:	1bc0      	subs	r0, r0, r7
 800fb42:	2864      	cmp	r0, #100	; 0x64
 800fb44:	d9f7      	bls.n	800fb36 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 800fb46:	2003      	movs	r0, #3
 800fb48:	e7a3      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fb4a:	2b05      	cmp	r3, #5
 800fb4c:	d009      	beq.n	800fb62 <HAL_RCC_OscConfig+0x13a>
 800fb4e:	4b78      	ldr	r3, [pc, #480]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fb50:	681a      	ldr	r2, [r3, #0]
 800fb52:	4978      	ldr	r1, [pc, #480]	; (800fd34 <HAL_RCC_OscConfig+0x30c>)
 800fb54:	400a      	ands	r2, r1
 800fb56:	601a      	str	r2, [r3, #0]
 800fb58:	681a      	ldr	r2, [r3, #0]
 800fb5a:	4977      	ldr	r1, [pc, #476]	; (800fd38 <HAL_RCC_OscConfig+0x310>)
 800fb5c:	400a      	ands	r2, r1
 800fb5e:	601a      	str	r2, [r3, #0]
 800fb60:	e7e0      	b.n	800fb24 <HAL_RCC_OscConfig+0xfc>
 800fb62:	4b73      	ldr	r3, [pc, #460]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fb64:	6819      	ldr	r1, [r3, #0]
 800fb66:	2280      	movs	r2, #128	; 0x80
 800fb68:	02d2      	lsls	r2, r2, #11
 800fb6a:	430a      	orrs	r2, r1
 800fb6c:	601a      	str	r2, [r3, #0]
 800fb6e:	6819      	ldr	r1, [r3, #0]
 800fb70:	2280      	movs	r2, #128	; 0x80
 800fb72:	0252      	lsls	r2, r2, #9
 800fb74:	430a      	orrs	r2, r1
 800fb76:	601a      	str	r2, [r3, #0]
 800fb78:	e7d4      	b.n	800fb24 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 800fb7a:	f7fe fe6d 	bl	800e858 <HAL_GetTick>
 800fb7e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fb80:	4e6b      	ldr	r6, [pc, #428]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fb82:	2580      	movs	r5, #128	; 0x80
 800fb84:	02ad      	lsls	r5, r5, #10
 800fb86:	6833      	ldr	r3, [r6, #0]
 800fb88:	422b      	tst	r3, r5
 800fb8a:	d08e      	beq.n	800faaa <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fb8c:	f7fe fe64 	bl	800e858 <HAL_GetTick>
 800fb90:	1bc0      	subs	r0, r0, r7
 800fb92:	2864      	cmp	r0, #100	; 0x64
 800fb94:	d9f7      	bls.n	800fb86 <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 800fb96:	2003      	movs	r0, #3
 800fb98:	e77b      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800fb9a:	4b65      	ldr	r3, [pc, #404]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	22c0      	movs	r2, #192	; 0xc0
 800fba0:	0252      	lsls	r2, r2, #9
 800fba2:	4013      	ands	r3, r2
 800fba4:	2280      	movs	r2, #128	; 0x80
 800fba6:	0212      	lsls	r2, r2, #8
 800fba8:	4293      	cmp	r3, r2
 800fbaa:	d18d      	bne.n	800fac8 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fbac:	4b60      	ldr	r3, [pc, #384]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	079b      	lsls	r3, r3, #30
 800fbb2:	d504      	bpl.n	800fbbe <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 800fbb4:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fbb6:	68e3      	ldr	r3, [r4, #12]
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	d000      	beq.n	800fbbe <HAL_RCC_OscConfig+0x196>
 800fbbc:	e769      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fbbe:	495c      	ldr	r1, [pc, #368]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fbc0:	680a      	ldr	r2, [r1, #0]
 800fbc2:	6923      	ldr	r3, [r4, #16]
 800fbc4:	00db      	lsls	r3, r3, #3
 800fbc6:	20f8      	movs	r0, #248	; 0xf8
 800fbc8:	4382      	bics	r2, r0
 800fbca:	4313      	orrs	r3, r2
 800fbcc:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fbce:	6823      	ldr	r3, [r4, #0]
 800fbd0:	071b      	lsls	r3, r3, #28
 800fbd2:	d547      	bpl.n	800fc64 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fbd4:	6a23      	ldr	r3, [r4, #32]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d030      	beq.n	800fc3c <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 800fbda:	4a55      	ldr	r2, [pc, #340]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fbdc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800fbde:	2101      	movs	r1, #1
 800fbe0:	430b      	orrs	r3, r1
 800fbe2:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 800fbe4:	f7fe fe38 	bl	800e858 <HAL_GetTick>
 800fbe8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fbea:	4e51      	ldr	r6, [pc, #324]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fbec:	2502      	movs	r5, #2
 800fbee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fbf0:	421d      	tst	r5, r3
 800fbf2:	d137      	bne.n	800fc64 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fbf4:	f7fe fe30 	bl	800e858 <HAL_GetTick>
 800fbf8:	1bc0      	subs	r0, r0, r7
 800fbfa:	2864      	cmp	r0, #100	; 0x64
 800fbfc:	d9f7      	bls.n	800fbee <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 800fbfe:	2003      	movs	r0, #3
 800fc00:	e747      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fc02:	494b      	ldr	r1, [pc, #300]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fc04:	680a      	ldr	r2, [r1, #0]
 800fc06:	6923      	ldr	r3, [r4, #16]
 800fc08:	00db      	lsls	r3, r3, #3
 800fc0a:	20f8      	movs	r0, #248	; 0xf8
 800fc0c:	4382      	bics	r2, r0
 800fc0e:	4313      	orrs	r3, r2
 800fc10:	600b      	str	r3, [r1, #0]
 800fc12:	e7dc      	b.n	800fbce <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 800fc14:	4a46      	ldr	r2, [pc, #280]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fc16:	6813      	ldr	r3, [r2, #0]
 800fc18:	2101      	movs	r1, #1
 800fc1a:	438b      	bics	r3, r1
 800fc1c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800fc1e:	f7fe fe1b 	bl	800e858 <HAL_GetTick>
 800fc22:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fc24:	4e42      	ldr	r6, [pc, #264]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fc26:	2502      	movs	r5, #2
 800fc28:	6833      	ldr	r3, [r6, #0]
 800fc2a:	421d      	tst	r5, r3
 800fc2c:	d0cf      	beq.n	800fbce <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fc2e:	f7fe fe13 	bl	800e858 <HAL_GetTick>
 800fc32:	1bc0      	subs	r0, r0, r7
 800fc34:	2864      	cmp	r0, #100	; 0x64
 800fc36:	d9f7      	bls.n	800fc28 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 800fc38:	2003      	movs	r0, #3
 800fc3a:	e72a      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 800fc3c:	4a3c      	ldr	r2, [pc, #240]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fc3e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800fc40:	2101      	movs	r1, #1
 800fc42:	438b      	bics	r3, r1
 800fc44:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 800fc46:	f7fe fe07 	bl	800e858 <HAL_GetTick>
 800fc4a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fc4c:	4e38      	ldr	r6, [pc, #224]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fc4e:	2502      	movs	r5, #2
 800fc50:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fc52:	421d      	tst	r5, r3
 800fc54:	d006      	beq.n	800fc64 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fc56:	f7fe fdff 	bl	800e858 <HAL_GetTick>
 800fc5a:	1bc0      	subs	r0, r0, r7
 800fc5c:	2864      	cmp	r0, #100	; 0x64
 800fc5e:	d9f7      	bls.n	800fc50 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 800fc60:	2003      	movs	r0, #3
 800fc62:	e716      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fc64:	6823      	ldr	r3, [r4, #0]
 800fc66:	075b      	lsls	r3, r3, #29
 800fc68:	d442      	bmi.n	800fcf0 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800fc6a:	6823      	ldr	r3, [r4, #0]
 800fc6c:	06db      	lsls	r3, r3, #27
 800fc6e:	d512      	bpl.n	800fc96 <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800fc70:	6963      	ldr	r3, [r4, #20]
 800fc72:	2b01      	cmp	r3, #1
 800fc74:	d100      	bne.n	800fc78 <HAL_RCC_OscConfig+0x250>
 800fc76:	e0ce      	b.n	800fe16 <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800fc78:	3305      	adds	r3, #5
 800fc7a:	d000      	beq.n	800fc7e <HAL_RCC_OscConfig+0x256>
 800fc7c:	e0ec      	b.n	800fe58 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 800fc7e:	4a2c      	ldr	r2, [pc, #176]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fc80:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800fc82:	2104      	movs	r1, #4
 800fc84:	438b      	bics	r3, r1
 800fc86:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800fc88:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800fc8a:	69a3      	ldr	r3, [r4, #24]
 800fc8c:	00db      	lsls	r3, r3, #3
 800fc8e:	20f8      	movs	r0, #248	; 0xf8
 800fc90:	4381      	bics	r1, r0
 800fc92:	430b      	orrs	r3, r1
 800fc94:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800fc96:	6823      	ldr	r3, [r4, #0]
 800fc98:	069b      	lsls	r3, r3, #26
 800fc9a:	d400      	bmi.n	800fc9e <HAL_RCC_OscConfig+0x276>
 800fc9c:	e106      	b.n	800feac <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800fc9e:	4b24      	ldr	r3, [pc, #144]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fca0:	685a      	ldr	r2, [r3, #4]
 800fca2:	230c      	movs	r3, #12
 800fca4:	4013      	ands	r3, r2
 800fca6:	2b0c      	cmp	r3, #12
 800fca8:	d100      	bne.n	800fcac <HAL_RCC_OscConfig+0x284>
 800fcaa:	e0f6      	b.n	800fe9a <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800fcac:	4b20      	ldr	r3, [pc, #128]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fcae:	685a      	ldr	r2, [r3, #4]
 800fcb0:	230c      	movs	r3, #12
 800fcb2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800fcb4:	2b08      	cmp	r3, #8
 800fcb6:	d100      	bne.n	800fcba <HAL_RCC_OscConfig+0x292>
 800fcb8:	e0e7      	b.n	800fe8a <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800fcba:	69e3      	ldr	r3, [r4, #28]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d100      	bne.n	800fcc2 <HAL_RCC_OscConfig+0x29a>
 800fcc0:	e116      	b.n	800fef0 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 800fcc2:	4a1b      	ldr	r2, [pc, #108]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fcc4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800fcc6:	2380      	movs	r3, #128	; 0x80
 800fcc8:	025b      	lsls	r3, r3, #9
 800fcca:	430b      	orrs	r3, r1
 800fccc:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 800fcce:	f7fe fdc3 	bl	800e858 <HAL_GetTick>
 800fcd2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800fcd4:	4e16      	ldr	r6, [pc, #88]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fcd6:	2580      	movs	r5, #128	; 0x80
 800fcd8:	026d      	lsls	r5, r5, #9
 800fcda:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800fcdc:	422b      	tst	r3, r5
 800fcde:	d000      	beq.n	800fce2 <HAL_RCC_OscConfig+0x2ba>
 800fce0:	e0e4      	b.n	800feac <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fce2:	f7fe fdb9 	bl	800e858 <HAL_GetTick>
 800fce6:	1bc0      	subs	r0, r0, r7
 800fce8:	2864      	cmp	r0, #100	; 0x64
 800fcea:	d9f6      	bls.n	800fcda <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 800fcec:	2003      	movs	r0, #3
 800fcee:	e6d0      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 800fcf0:	4a0f      	ldr	r2, [pc, #60]	; (800fd30 <HAL_RCC_OscConfig+0x308>)
 800fcf2:	69d1      	ldr	r1, [r2, #28]
 800fcf4:	2080      	movs	r0, #128	; 0x80
 800fcf6:	0540      	lsls	r0, r0, #21
 800fcf8:	4301      	orrs	r1, r0
 800fcfa:	61d1      	str	r1, [r2, #28]
 800fcfc:	69d3      	ldr	r3, [r2, #28]
 800fcfe:	4003      	ands	r3, r0
 800fd00:	9301      	str	r3, [sp, #4]
 800fd02:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800fd04:	4a0d      	ldr	r2, [pc, #52]	; (800fd3c <HAL_RCC_OscConfig+0x314>)
 800fd06:	6811      	ldr	r1, [r2, #0]
 800fd08:	2380      	movs	r3, #128	; 0x80
 800fd0a:	005b      	lsls	r3, r3, #1
 800fd0c:	430b      	orrs	r3, r1
 800fd0e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800fd10:	f7fe fda2 	bl	800e858 <HAL_GetTick>
 800fd14:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800fd16:	4e09      	ldr	r6, [pc, #36]	; (800fd3c <HAL_RCC_OscConfig+0x314>)
 800fd18:	2580      	movs	r5, #128	; 0x80
 800fd1a:	006d      	lsls	r5, r5, #1
 800fd1c:	6833      	ldr	r3, [r6, #0]
 800fd1e:	422b      	tst	r3, r5
 800fd20:	d10e      	bne.n	800fd40 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800fd22:	f7fe fd99 	bl	800e858 <HAL_GetTick>
 800fd26:	1bc0      	subs	r0, r0, r7
 800fd28:	2864      	cmp	r0, #100	; 0x64
 800fd2a:	d9f7      	bls.n	800fd1c <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 800fd2c:	2003      	movs	r0, #3
 800fd2e:	e6b0      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
 800fd30:	40021000 	.word	0x40021000
 800fd34:	fffeffff 	.word	0xfffeffff
 800fd38:	fffbffff 	.word	0xfffbffff
 800fd3c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 800fd40:	4b95      	ldr	r3, [pc, #596]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800fd42:	6a1a      	ldr	r2, [r3, #32]
 800fd44:	2101      	movs	r1, #1
 800fd46:	438a      	bics	r2, r1
 800fd48:	621a      	str	r2, [r3, #32]
 800fd4a:	6a1a      	ldr	r2, [r3, #32]
 800fd4c:	3103      	adds	r1, #3
 800fd4e:	438a      	bics	r2, r1
 800fd50:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 800fd52:	f7fe fd81 	bl	800e858 <HAL_GetTick>
 800fd56:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fd58:	4e8f      	ldr	r6, [pc, #572]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800fd5a:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fd5c:	4f8f      	ldr	r7, [pc, #572]	; (800ff9c <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fd5e:	6a33      	ldr	r3, [r6, #32]
 800fd60:	421d      	tst	r5, r3
 800fd62:	d007      	beq.n	800fd74 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fd64:	f7fe fd78 	bl	800e858 <HAL_GetTick>
 800fd68:	4643      	mov	r3, r8
 800fd6a:	1ac0      	subs	r0, r0, r3
 800fd6c:	42b8      	cmp	r0, r7
 800fd6e:	d9f6      	bls.n	800fd5e <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 800fd70:	2003      	movs	r0, #3
 800fd72:	e68e      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fd74:	68a3      	ldr	r3, [r4, #8]
 800fd76:	2b01      	cmp	r3, #1
 800fd78:	d00b      	beq.n	800fd92 <HAL_RCC_OscConfig+0x36a>
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d123      	bne.n	800fdc6 <HAL_RCC_OscConfig+0x39e>
 800fd7e:	4b86      	ldr	r3, [pc, #536]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800fd80:	6a1a      	ldr	r2, [r3, #32]
 800fd82:	2101      	movs	r1, #1
 800fd84:	438a      	bics	r2, r1
 800fd86:	621a      	str	r2, [r3, #32]
 800fd88:	6a1a      	ldr	r2, [r3, #32]
 800fd8a:	3103      	adds	r1, #3
 800fd8c:	438a      	bics	r2, r1
 800fd8e:	621a      	str	r2, [r3, #32]
 800fd90:	e004      	b.n	800fd9c <HAL_RCC_OscConfig+0x374>
 800fd92:	4a81      	ldr	r2, [pc, #516]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800fd94:	6a13      	ldr	r3, [r2, #32]
 800fd96:	2101      	movs	r1, #1
 800fd98:	430b      	orrs	r3, r1
 800fd9a:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fd9c:	68a3      	ldr	r3, [r4, #8]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d027      	beq.n	800fdf2 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 800fda2:	f7fe fd59 	bl	800e858 <HAL_GetTick>
 800fda6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fda8:	4e7b      	ldr	r6, [pc, #492]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800fdaa:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fdac:	4f7b      	ldr	r7, [pc, #492]	; (800ff9c <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800fdae:	6a33      	ldr	r3, [r6, #32]
 800fdb0:	421d      	tst	r5, r3
 800fdb2:	d000      	beq.n	800fdb6 <HAL_RCC_OscConfig+0x38e>
 800fdb4:	e759      	b.n	800fc6a <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fdb6:	f7fe fd4f 	bl	800e858 <HAL_GetTick>
 800fdba:	4643      	mov	r3, r8
 800fdbc:	1ac0      	subs	r0, r0, r3
 800fdbe:	42b8      	cmp	r0, r7
 800fdc0:	d9f5      	bls.n	800fdae <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 800fdc2:	2003      	movs	r0, #3
 800fdc4:	e665      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fdc6:	2b05      	cmp	r3, #5
 800fdc8:	d009      	beq.n	800fdde <HAL_RCC_OscConfig+0x3b6>
 800fdca:	4b73      	ldr	r3, [pc, #460]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800fdcc:	6a1a      	ldr	r2, [r3, #32]
 800fdce:	2101      	movs	r1, #1
 800fdd0:	438a      	bics	r2, r1
 800fdd2:	621a      	str	r2, [r3, #32]
 800fdd4:	6a1a      	ldr	r2, [r3, #32]
 800fdd6:	3103      	adds	r1, #3
 800fdd8:	438a      	bics	r2, r1
 800fdda:	621a      	str	r2, [r3, #32]
 800fddc:	e7de      	b.n	800fd9c <HAL_RCC_OscConfig+0x374>
 800fdde:	4b6e      	ldr	r3, [pc, #440]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800fde0:	6a1a      	ldr	r2, [r3, #32]
 800fde2:	2104      	movs	r1, #4
 800fde4:	430a      	orrs	r2, r1
 800fde6:	621a      	str	r2, [r3, #32]
 800fde8:	6a1a      	ldr	r2, [r3, #32]
 800fdea:	3903      	subs	r1, #3
 800fdec:	430a      	orrs	r2, r1
 800fdee:	621a      	str	r2, [r3, #32]
 800fdf0:	e7d4      	b.n	800fd9c <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 800fdf2:	f7fe fd31 	bl	800e858 <HAL_GetTick>
 800fdf6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fdf8:	4e67      	ldr	r6, [pc, #412]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800fdfa:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fdfc:	4f67      	ldr	r7, [pc, #412]	; (800ff9c <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800fdfe:	6a33      	ldr	r3, [r6, #32]
 800fe00:	421d      	tst	r5, r3
 800fe02:	d100      	bne.n	800fe06 <HAL_RCC_OscConfig+0x3de>
 800fe04:	e731      	b.n	800fc6a <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fe06:	f7fe fd27 	bl	800e858 <HAL_GetTick>
 800fe0a:	4643      	mov	r3, r8
 800fe0c:	1ac0      	subs	r0, r0, r3
 800fe0e:	42b8      	cmp	r0, r7
 800fe10:	d9f5      	bls.n	800fdfe <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 800fe12:	2003      	movs	r0, #3
 800fe14:	e63d      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 800fe16:	4b60      	ldr	r3, [pc, #384]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800fe18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe1a:	2104      	movs	r1, #4
 800fe1c:	430a      	orrs	r2, r1
 800fe1e:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800fe20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe22:	3903      	subs	r1, #3
 800fe24:	430a      	orrs	r2, r1
 800fe26:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800fe28:	f7fe fd16 	bl	800e858 <HAL_GetTick>
 800fe2c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800fe2e:	4e5a      	ldr	r6, [pc, #360]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800fe30:	2502      	movs	r5, #2
 800fe32:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800fe34:	421d      	tst	r5, r3
 800fe36:	d106      	bne.n	800fe46 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800fe38:	f7fe fd0e 	bl	800e858 <HAL_GetTick>
 800fe3c:	1bc0      	subs	r0, r0, r7
 800fe3e:	2864      	cmp	r0, #100	; 0x64
 800fe40:	d9f7      	bls.n	800fe32 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 800fe42:	2003      	movs	r0, #3
 800fe44:	e625      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800fe46:	4954      	ldr	r1, [pc, #336]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800fe48:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800fe4a:	69a3      	ldr	r3, [r4, #24]
 800fe4c:	00db      	lsls	r3, r3, #3
 800fe4e:	20f8      	movs	r0, #248	; 0xf8
 800fe50:	4382      	bics	r2, r0
 800fe52:	4313      	orrs	r3, r2
 800fe54:	634b      	str	r3, [r1, #52]	; 0x34
 800fe56:	e71e      	b.n	800fc96 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 800fe58:	4b4f      	ldr	r3, [pc, #316]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800fe5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe5c:	2104      	movs	r1, #4
 800fe5e:	430a      	orrs	r2, r1
 800fe60:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800fe62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe64:	3903      	subs	r1, #3
 800fe66:	438a      	bics	r2, r1
 800fe68:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800fe6a:	f7fe fcf5 	bl	800e858 <HAL_GetTick>
 800fe6e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800fe70:	4e49      	ldr	r6, [pc, #292]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800fe72:	2502      	movs	r5, #2
 800fe74:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800fe76:	421d      	tst	r5, r3
 800fe78:	d100      	bne.n	800fe7c <HAL_RCC_OscConfig+0x454>
 800fe7a:	e70c      	b.n	800fc96 <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800fe7c:	f7fe fcec 	bl	800e858 <HAL_GetTick>
 800fe80:	1bc0      	subs	r0, r0, r7
 800fe82:	2864      	cmp	r0, #100	; 0x64
 800fe84:	d9f6      	bls.n	800fe74 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 800fe86:	2003      	movs	r0, #3
 800fe88:	e603      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800fe8a:	4b43      	ldr	r3, [pc, #268]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	22c0      	movs	r2, #192	; 0xc0
 800fe90:	0252      	lsls	r2, r2, #9
 800fe92:	4013      	ands	r3, r2
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d000      	beq.n	800fe9a <HAL_RCC_OscConfig+0x472>
 800fe98:	e70f      	b.n	800fcba <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800fe9a:	4b3f      	ldr	r3, [pc, #252]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800fe9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe9e:	03db      	lsls	r3, r3, #15
 800fea0:	d504      	bpl.n	800feac <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 800fea2:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800fea4:	69e3      	ldr	r3, [r4, #28]
 800fea6:	2b01      	cmp	r3, #1
 800fea8:	d000      	beq.n	800feac <HAL_RCC_OscConfig+0x484>
 800feaa:	e5f2      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800feac:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 800feae:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d100      	bne.n	800feb6 <HAL_RCC_OscConfig+0x48e>
 800feb4:	e5ed      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800feb6:	4a38      	ldr	r2, [pc, #224]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800feb8:	6851      	ldr	r1, [r2, #4]
 800feba:	220c      	movs	r2, #12
 800febc:	400a      	ands	r2, r1
 800febe:	2a08      	cmp	r2, #8
 800fec0:	d068      	beq.n	800ff94 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fec2:	2b02      	cmp	r3, #2
 800fec4:	d029      	beq.n	800ff1a <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 800fec6:	4a34      	ldr	r2, [pc, #208]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800fec8:	6813      	ldr	r3, [r2, #0]
 800feca:	4935      	ldr	r1, [pc, #212]	; (800ffa0 <HAL_RCC_OscConfig+0x578>)
 800fecc:	400b      	ands	r3, r1
 800fece:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800fed0:	f7fe fcc2 	bl	800e858 <HAL_GetTick>
 800fed4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800fed6:	4d30      	ldr	r5, [pc, #192]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800fed8:	2480      	movs	r4, #128	; 0x80
 800feda:	04a4      	lsls	r4, r4, #18
 800fedc:	682b      	ldr	r3, [r5, #0]
 800fede:	4223      	tst	r3, r4
 800fee0:	d056      	beq.n	800ff90 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fee2:	f7fe fcb9 	bl	800e858 <HAL_GetTick>
 800fee6:	1b80      	subs	r0, r0, r6
 800fee8:	2864      	cmp	r0, #100	; 0x64
 800feea:	d9f7      	bls.n	800fedc <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 800feec:	2003      	movs	r0, #3
 800feee:	e5d0      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 800fef0:	4a29      	ldr	r2, [pc, #164]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800fef2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800fef4:	492b      	ldr	r1, [pc, #172]	; (800ffa4 <HAL_RCC_OscConfig+0x57c>)
 800fef6:	400b      	ands	r3, r1
 800fef8:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 800fefa:	f7fe fcad 	bl	800e858 <HAL_GetTick>
 800fefe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800ff00:	4e25      	ldr	r6, [pc, #148]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800ff02:	2580      	movs	r5, #128	; 0x80
 800ff04:	026d      	lsls	r5, r5, #9
 800ff06:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800ff08:	422b      	tst	r3, r5
 800ff0a:	d0cf      	beq.n	800feac <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ff0c:	f7fe fca4 	bl	800e858 <HAL_GetTick>
 800ff10:	1bc0      	subs	r0, r0, r7
 800ff12:	2864      	cmp	r0, #100	; 0x64
 800ff14:	d9f7      	bls.n	800ff06 <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 800ff16:	2003      	movs	r0, #3
 800ff18:	e5bb      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 800ff1a:	4a1f      	ldr	r2, [pc, #124]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800ff1c:	6813      	ldr	r3, [r2, #0]
 800ff1e:	4920      	ldr	r1, [pc, #128]	; (800ffa0 <HAL_RCC_OscConfig+0x578>)
 800ff20:	400b      	ands	r3, r1
 800ff22:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800ff24:	f7fe fc98 	bl	800e858 <HAL_GetTick>
 800ff28:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ff2a:	4e1b      	ldr	r6, [pc, #108]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800ff2c:	2580      	movs	r5, #128	; 0x80
 800ff2e:	04ad      	lsls	r5, r5, #18
 800ff30:	6833      	ldr	r3, [r6, #0]
 800ff32:	422b      	tst	r3, r5
 800ff34:	d006      	beq.n	800ff44 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ff36:	f7fe fc8f 	bl	800e858 <HAL_GetTick>
 800ff3a:	1bc0      	subs	r0, r0, r7
 800ff3c:	2864      	cmp	r0, #100	; 0x64
 800ff3e:	d9f7      	bls.n	800ff30 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 800ff40:	2003      	movs	r0, #3
 800ff42:	e5a6      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ff44:	4b14      	ldr	r3, [pc, #80]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800ff46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff48:	210f      	movs	r1, #15
 800ff4a:	438a      	bics	r2, r1
 800ff4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ff4e:	430a      	orrs	r2, r1
 800ff50:	62da      	str	r2, [r3, #44]	; 0x2c
 800ff52:	6859      	ldr	r1, [r3, #4]
 800ff54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ff56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ff58:	4302      	orrs	r2, r0
 800ff5a:	4813      	ldr	r0, [pc, #76]	; (800ffa8 <HAL_RCC_OscConfig+0x580>)
 800ff5c:	4001      	ands	r1, r0
 800ff5e:	430a      	orrs	r2, r1
 800ff60:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 800ff62:	6819      	ldr	r1, [r3, #0]
 800ff64:	2280      	movs	r2, #128	; 0x80
 800ff66:	0452      	lsls	r2, r2, #17
 800ff68:	430a      	orrs	r2, r1
 800ff6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800ff6c:	f7fe fc74 	bl	800e858 <HAL_GetTick>
 800ff70:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ff72:	4d09      	ldr	r5, [pc, #36]	; (800ff98 <HAL_RCC_OscConfig+0x570>)
 800ff74:	2480      	movs	r4, #128	; 0x80
 800ff76:	04a4      	lsls	r4, r4, #18
 800ff78:	682b      	ldr	r3, [r5, #0]
 800ff7a:	4223      	tst	r3, r4
 800ff7c:	d106      	bne.n	800ff8c <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ff7e:	f7fe fc6b 	bl	800e858 <HAL_GetTick>
 800ff82:	1b80      	subs	r0, r0, r6
 800ff84:	2864      	cmp	r0, #100	; 0x64
 800ff86:	d9f7      	bls.n	800ff78 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 800ff88:	2003      	movs	r0, #3
 800ff8a:	e582      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 800ff8c:	2000      	movs	r0, #0
 800ff8e:	e580      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
 800ff90:	2000      	movs	r0, #0
 800ff92:	e57e      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 800ff94:	2001      	movs	r0, #1
 800ff96:	e57c      	b.n	800fa92 <HAL_RCC_OscConfig+0x6a>
 800ff98:	40021000 	.word	0x40021000
 800ff9c:	00001388 	.word	0x00001388
 800ffa0:	feffffff 	.word	0xfeffffff
 800ffa4:	fffeffff 	.word	0xfffeffff
 800ffa8:	ffc27fff 	.word	0xffc27fff

0800ffac <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ffac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffae:	46ce      	mov	lr, r9
 800ffb0:	4647      	mov	r7, r8
 800ffb2:	b580      	push	{r7, lr}
 800ffb4:	0005      	movs	r5, r0
 800ffb6:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800ffb8:	4b95      	ldr	r3, [pc, #596]	; (8010210 <HAL_RCC_ClockConfig+0x264>)
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	2301      	movs	r3, #1
 800ffbe:	4013      	ands	r3, r2
 800ffc0:	428b      	cmp	r3, r1
 800ffc2:	d300      	bcc.n	800ffc6 <HAL_RCC_ClockConfig+0x1a>
 800ffc4:	e089      	b.n	80100da <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ffc6:	4992      	ldr	r1, [pc, #584]	; (8010210 <HAL_RCC_ClockConfig+0x264>)
 800ffc8:	680b      	ldr	r3, [r1, #0]
 800ffca:	2201      	movs	r2, #1
 800ffcc:	4393      	bics	r3, r2
 800ffce:	4323      	orrs	r3, r4
 800ffd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ffd2:	680b      	ldr	r3, [r1, #0]
 800ffd4:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 800ffd6:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ffd8:	42a2      	cmp	r2, r4
 800ffda:	d003      	beq.n	800ffe4 <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 800ffdc:	bc0c      	pop	{r2, r3}
 800ffde:	4690      	mov	r8, r2
 800ffe0:	4699      	mov	r9, r3
 800ffe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ffe4:	682b      	ldr	r3, [r5, #0]
 800ffe6:	079b      	lsls	r3, r3, #30
 800ffe8:	d506      	bpl.n	800fff8 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ffea:	4a8a      	ldr	r2, [pc, #552]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 800ffec:	6853      	ldr	r3, [r2, #4]
 800ffee:	21f0      	movs	r1, #240	; 0xf0
 800fff0:	438b      	bics	r3, r1
 800fff2:	68a9      	ldr	r1, [r5, #8]
 800fff4:	430b      	orrs	r3, r1
 800fff6:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fff8:	682b      	ldr	r3, [r5, #0]
 800fffa:	07db      	lsls	r3, r3, #31
 800fffc:	d400      	bmi.n	8010000 <HAL_RCC_ClockConfig+0x54>
 800fffe:	e0f7      	b.n	80101f0 <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010000:	686b      	ldr	r3, [r5, #4]
 8010002:	2b01      	cmp	r3, #1
 8010004:	d009      	beq.n	801001a <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010006:	2b02      	cmp	r3, #2
 8010008:	d02b      	beq.n	8010062 <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801000a:	2b03      	cmp	r3, #3
 801000c:	d02f      	beq.n	801006e <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801000e:	4a81      	ldr	r2, [pc, #516]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 8010010:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8010012:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010014:	0792      	lsls	r2, r2, #30
 8010016:	d405      	bmi.n	8010024 <HAL_RCC_ClockConfig+0x78>
 8010018:	e7e0      	b.n	800ffdc <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801001a:	4a7e      	ldr	r2, [pc, #504]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 801001c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801001e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010020:	0392      	lsls	r2, r2, #14
 8010022:	d5db      	bpl.n	800ffdc <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010024:	497b      	ldr	r1, [pc, #492]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 8010026:	684a      	ldr	r2, [r1, #4]
 8010028:	2003      	movs	r0, #3
 801002a:	4382      	bics	r2, r0
 801002c:	4313      	orrs	r3, r2
 801002e:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8010030:	f7fe fc12 	bl	800e858 <HAL_GetTick>
 8010034:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010036:	686b      	ldr	r3, [r5, #4]
 8010038:	2b01      	cmp	r3, #1
 801003a:	d01e      	beq.n	801007a <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801003c:	2b02      	cmp	r3, #2
 801003e:	d02c      	beq.n	801009a <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010040:	2b03      	cmp	r3, #3
 8010042:	d03a      	beq.n	80100ba <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010044:	4f73      	ldr	r7, [pc, #460]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 8010046:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010048:	4b73      	ldr	r3, [pc, #460]	; (8010218 <HAL_RCC_ClockConfig+0x26c>)
 801004a:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	421e      	tst	r6, r3
 8010050:	d100      	bne.n	8010054 <HAL_RCC_ClockConfig+0xa8>
 8010052:	e0cd      	b.n	80101f0 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010054:	f7fe fc00 	bl	800e858 <HAL_GetTick>
 8010058:	1b00      	subs	r0, r0, r4
 801005a:	4540      	cmp	r0, r8
 801005c:	d9f6      	bls.n	801004c <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 801005e:	2003      	movs	r0, #3
 8010060:	e7bc      	b.n	800ffdc <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010062:	4a6c      	ldr	r2, [pc, #432]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 8010064:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8010066:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010068:	0192      	lsls	r2, r2, #6
 801006a:	d4db      	bmi.n	8010024 <HAL_RCC_ClockConfig+0x78>
 801006c:	e7b6      	b.n	800ffdc <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801006e:	4a69      	ldr	r2, [pc, #420]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 8010070:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 8010072:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010074:	03d2      	lsls	r2, r2, #15
 8010076:	d4d5      	bmi.n	8010024 <HAL_RCC_ClockConfig+0x78>
 8010078:	e7b0      	b.n	800ffdc <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801007a:	4f66      	ldr	r7, [pc, #408]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 801007c:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801007e:	4b66      	ldr	r3, [pc, #408]	; (8010218 <HAL_RCC_ClockConfig+0x26c>)
 8010080:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	4033      	ands	r3, r6
 8010086:	2b04      	cmp	r3, #4
 8010088:	d100      	bne.n	801008c <HAL_RCC_ClockConfig+0xe0>
 801008a:	e0b1      	b.n	80101f0 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801008c:	f7fe fbe4 	bl	800e858 <HAL_GetTick>
 8010090:	1b00      	subs	r0, r0, r4
 8010092:	4540      	cmp	r0, r8
 8010094:	d9f5      	bls.n	8010082 <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 8010096:	2003      	movs	r0, #3
 8010098:	e7a0      	b.n	800ffdc <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801009a:	4f5e      	ldr	r7, [pc, #376]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 801009c:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801009e:	4b5e      	ldr	r3, [pc, #376]	; (8010218 <HAL_RCC_ClockConfig+0x26c>)
 80100a0:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	4033      	ands	r3, r6
 80100a6:	2b08      	cmp	r3, #8
 80100a8:	d100      	bne.n	80100ac <HAL_RCC_ClockConfig+0x100>
 80100aa:	e0a1      	b.n	80101f0 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80100ac:	f7fe fbd4 	bl	800e858 <HAL_GetTick>
 80100b0:	1b00      	subs	r0, r0, r4
 80100b2:	4540      	cmp	r0, r8
 80100b4:	d9f5      	bls.n	80100a2 <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 80100b6:	2003      	movs	r0, #3
 80100b8:	e790      	b.n	800ffdc <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80100ba:	4f56      	ldr	r7, [pc, #344]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 80100bc:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80100be:	4b56      	ldr	r3, [pc, #344]	; (8010218 <HAL_RCC_ClockConfig+0x26c>)
 80100c0:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	4033      	ands	r3, r6
 80100c6:	2b0c      	cmp	r3, #12
 80100c8:	d100      	bne.n	80100cc <HAL_RCC_ClockConfig+0x120>
 80100ca:	e091      	b.n	80101f0 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80100cc:	f7fe fbc4 	bl	800e858 <HAL_GetTick>
 80100d0:	1b00      	subs	r0, r0, r4
 80100d2:	4540      	cmp	r0, r8
 80100d4:	d9f5      	bls.n	80100c2 <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 80100d6:	2003      	movs	r0, #3
 80100d8:	e780      	b.n	800ffdc <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80100da:	6803      	ldr	r3, [r0, #0]
 80100dc:	079b      	lsls	r3, r3, #30
 80100de:	d506      	bpl.n	80100ee <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80100e0:	4a4c      	ldr	r2, [pc, #304]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 80100e2:	6853      	ldr	r3, [r2, #4]
 80100e4:	21f0      	movs	r1, #240	; 0xf0
 80100e6:	438b      	bics	r3, r1
 80100e8:	6881      	ldr	r1, [r0, #8]
 80100ea:	430b      	orrs	r3, r1
 80100ec:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80100ee:	682b      	ldr	r3, [r5, #0]
 80100f0:	07db      	lsls	r3, r3, #31
 80100f2:	d571      	bpl.n	80101d8 <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80100f4:	686b      	ldr	r3, [r5, #4]
 80100f6:	2b01      	cmp	r3, #1
 80100f8:	d009      	beq.n	801010e <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80100fa:	2b02      	cmp	r3, #2
 80100fc:	d02d      	beq.n	801015a <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80100fe:	2b03      	cmp	r3, #3
 8010100:	d031      	beq.n	8010166 <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010102:	4a44      	ldr	r2, [pc, #272]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 8010104:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8010106:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010108:	0792      	lsls	r2, r2, #30
 801010a:	d406      	bmi.n	801011a <HAL_RCC_ClockConfig+0x16e>
 801010c:	e766      	b.n	800ffdc <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801010e:	4a41      	ldr	r2, [pc, #260]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 8010110:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8010112:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010114:	0392      	lsls	r2, r2, #14
 8010116:	d400      	bmi.n	801011a <HAL_RCC_ClockConfig+0x16e>
 8010118:	e760      	b.n	800ffdc <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801011a:	493e      	ldr	r1, [pc, #248]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 801011c:	684a      	ldr	r2, [r1, #4]
 801011e:	2003      	movs	r0, #3
 8010120:	4382      	bics	r2, r0
 8010122:	4313      	orrs	r3, r2
 8010124:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8010126:	f7fe fb97 	bl	800e858 <HAL_GetTick>
 801012a:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801012c:	686b      	ldr	r3, [r5, #4]
 801012e:	2b01      	cmp	r3, #1
 8010130:	d01f      	beq.n	8010172 <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010132:	2b02      	cmp	r3, #2
 8010134:	d02e      	beq.n	8010194 <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010136:	2b03      	cmp	r3, #3
 8010138:	d03d      	beq.n	80101b6 <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801013a:	4b36      	ldr	r3, [pc, #216]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 801013c:	4698      	mov	r8, r3
 801013e:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010140:	4b35      	ldr	r3, [pc, #212]	; (8010218 <HAL_RCC_ClockConfig+0x26c>)
 8010142:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010144:	4643      	mov	r3, r8
 8010146:	685b      	ldr	r3, [r3, #4]
 8010148:	421f      	tst	r7, r3
 801014a:	d045      	beq.n	80101d8 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801014c:	f7fe fb84 	bl	800e858 <HAL_GetTick>
 8010150:	1b80      	subs	r0, r0, r6
 8010152:	4548      	cmp	r0, r9
 8010154:	d9f6      	bls.n	8010144 <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 8010156:	2003      	movs	r0, #3
 8010158:	e740      	b.n	800ffdc <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801015a:	4a2e      	ldr	r2, [pc, #184]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 801015c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801015e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010160:	0192      	lsls	r2, r2, #6
 8010162:	d4da      	bmi.n	801011a <HAL_RCC_ClockConfig+0x16e>
 8010164:	e73a      	b.n	800ffdc <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8010166:	4a2b      	ldr	r2, [pc, #172]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 8010168:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 801016a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801016c:	03d2      	lsls	r2, r2, #15
 801016e:	d4d4      	bmi.n	801011a <HAL_RCC_ClockConfig+0x16e>
 8010170:	e734      	b.n	800ffdc <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010172:	4b28      	ldr	r3, [pc, #160]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 8010174:	4698      	mov	r8, r3
 8010176:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010178:	4b27      	ldr	r3, [pc, #156]	; (8010218 <HAL_RCC_ClockConfig+0x26c>)
 801017a:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801017c:	4643      	mov	r3, r8
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	403b      	ands	r3, r7
 8010182:	2b04      	cmp	r3, #4
 8010184:	d028      	beq.n	80101d8 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010186:	f7fe fb67 	bl	800e858 <HAL_GetTick>
 801018a:	1b80      	subs	r0, r0, r6
 801018c:	4548      	cmp	r0, r9
 801018e:	d9f5      	bls.n	801017c <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 8010190:	2003      	movs	r0, #3
 8010192:	e723      	b.n	800ffdc <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010194:	4b1f      	ldr	r3, [pc, #124]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 8010196:	4698      	mov	r8, r3
 8010198:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801019a:	4b1f      	ldr	r3, [pc, #124]	; (8010218 <HAL_RCC_ClockConfig+0x26c>)
 801019c:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801019e:	4643      	mov	r3, r8
 80101a0:	685b      	ldr	r3, [r3, #4]
 80101a2:	403b      	ands	r3, r7
 80101a4:	2b08      	cmp	r3, #8
 80101a6:	d017      	beq.n	80101d8 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80101a8:	f7fe fb56 	bl	800e858 <HAL_GetTick>
 80101ac:	1b80      	subs	r0, r0, r6
 80101ae:	4548      	cmp	r0, r9
 80101b0:	d9f5      	bls.n	801019e <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 80101b2:	2003      	movs	r0, #3
 80101b4:	e712      	b.n	800ffdc <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80101b6:	4b17      	ldr	r3, [pc, #92]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 80101b8:	4698      	mov	r8, r3
 80101ba:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80101bc:	4b16      	ldr	r3, [pc, #88]	; (8010218 <HAL_RCC_ClockConfig+0x26c>)
 80101be:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80101c0:	4643      	mov	r3, r8
 80101c2:	685b      	ldr	r3, [r3, #4]
 80101c4:	403b      	ands	r3, r7
 80101c6:	2b0c      	cmp	r3, #12
 80101c8:	d006      	beq.n	80101d8 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80101ca:	f7fe fb45 	bl	800e858 <HAL_GetTick>
 80101ce:	1b80      	subs	r0, r0, r6
 80101d0:	4548      	cmp	r0, r9
 80101d2:	d9f5      	bls.n	80101c0 <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 80101d4:	2003      	movs	r0, #3
 80101d6:	e701      	b.n	800ffdc <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80101d8:	490d      	ldr	r1, [pc, #52]	; (8010210 <HAL_RCC_ClockConfig+0x264>)
 80101da:	680b      	ldr	r3, [r1, #0]
 80101dc:	2201      	movs	r2, #1
 80101de:	4393      	bics	r3, r2
 80101e0:	4323      	orrs	r3, r4
 80101e2:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80101e4:	680b      	ldr	r3, [r1, #0]
 80101e6:	401a      	ands	r2, r3
      return HAL_ERROR;
 80101e8:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80101ea:	42a2      	cmp	r2, r4
 80101ec:	d000      	beq.n	80101f0 <HAL_RCC_ClockConfig+0x244>
 80101ee:	e6f5      	b.n	800ffdc <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80101f0:	682b      	ldr	r3, [r5, #0]
 80101f2:	075b      	lsls	r3, r3, #29
 80101f4:	d506      	bpl.n	8010204 <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80101f6:	4a07      	ldr	r2, [pc, #28]	; (8010214 <HAL_RCC_ClockConfig+0x268>)
 80101f8:	6853      	ldr	r3, [r2, #4]
 80101fa:	4908      	ldr	r1, [pc, #32]	; (801021c <HAL_RCC_ClockConfig+0x270>)
 80101fc:	400b      	ands	r3, r1
 80101fe:	68e9      	ldr	r1, [r5, #12]
 8010200:	430b      	orrs	r3, r1
 8010202:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8010204:	2000      	movs	r0, #0
 8010206:	f7fe fafd 	bl	800e804 <HAL_InitTick>
  return HAL_OK;
 801020a:	2000      	movs	r0, #0
 801020c:	e6e6      	b.n	800ffdc <HAL_RCC_ClockConfig+0x30>
 801020e:	46c0      	nop			; (mov r8, r8)
 8010210:	40022000 	.word	0x40022000
 8010214:	40021000 	.word	0x40021000
 8010218:	00001388 	.word	0x00001388
 801021c:	fffff8ff 	.word	0xfffff8ff

08010220 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010220:	b530      	push	{r4, r5, lr}
 8010222:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8010224:	aa04      	add	r2, sp, #16
 8010226:	4b21      	ldr	r3, [pc, #132]	; (80102ac <HAL_RCC_GetSysClockFreq+0x8c>)
 8010228:	0018      	movs	r0, r3
 801022a:	c832      	ldmia	r0!, {r1, r4, r5}
 801022c:	c232      	stmia	r2!, {r1, r4, r5}
 801022e:	0011      	movs	r1, r2
 8010230:	6802      	ldr	r2, [r0, #0]
 8010232:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8010234:	466a      	mov	r2, sp
 8010236:	3310      	adds	r3, #16
 8010238:	cb13      	ldmia	r3!, {r0, r1, r4}
 801023a:	c213      	stmia	r2!, {r0, r1, r4}
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8010240:	4b1b      	ldr	r3, [pc, #108]	; (80102b0 <HAL_RCC_GetSysClockFreq+0x90>)
 8010242:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8010244:	200c      	movs	r0, #12
 8010246:	4018      	ands	r0, r3
 8010248:	2808      	cmp	r0, #8
 801024a:	d00a      	beq.n	8010262 <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801024c:	380c      	subs	r0, #12
 801024e:	4243      	negs	r3, r0
 8010250:	4158      	adcs	r0, r3
 8010252:	4240      	negs	r0, r0
 8010254:	4b17      	ldr	r3, [pc, #92]	; (80102b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8010256:	4018      	ands	r0, r3
 8010258:	4b17      	ldr	r3, [pc, #92]	; (80102b8 <HAL_RCC_GetSysClockFreq+0x98>)
 801025a:	469c      	mov	ip, r3
 801025c:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 801025e:	b009      	add	sp, #36	; 0x24
 8010260:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8010262:	0c99      	lsrs	r1, r3, #18
 8010264:	220f      	movs	r2, #15
 8010266:	4011      	ands	r1, r2
 8010268:	a804      	add	r0, sp, #16
 801026a:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 801026c:	4910      	ldr	r1, [pc, #64]	; (80102b0 <HAL_RCC_GetSysClockFreq+0x90>)
 801026e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8010270:	400a      	ands	r2, r1
 8010272:	4669      	mov	r1, sp
 8010274:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8010276:	22c0      	movs	r2, #192	; 0xc0
 8010278:	0252      	lsls	r2, r2, #9
 801027a:	4013      	ands	r3, r2
 801027c:	2280      	movs	r2, #128	; 0x80
 801027e:	0252      	lsls	r2, r2, #9
 8010280:	4293      	cmp	r3, r2
 8010282:	d008      	beq.n	8010296 <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8010284:	22c0      	movs	r2, #192	; 0xc0
 8010286:	0252      	lsls	r2, r2, #9
 8010288:	4293      	cmp	r3, r2
 801028a:	d009      	beq.n	80102a0 <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 801028c:	480a      	ldr	r0, [pc, #40]	; (80102b8 <HAL_RCC_GetSysClockFreq+0x98>)
 801028e:	f7ef ff5f 	bl	8000150 <__udivsi3>
 8010292:	4360      	muls	r0, r4
 8010294:	e7e3      	b.n	801025e <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8010296:	4808      	ldr	r0, [pc, #32]	; (80102b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8010298:	f7ef ff5a 	bl	8000150 <__udivsi3>
 801029c:	4360      	muls	r0, r4
 801029e:	e7de      	b.n	801025e <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 80102a0:	4806      	ldr	r0, [pc, #24]	; (80102bc <HAL_RCC_GetSysClockFreq+0x9c>)
 80102a2:	f7ef ff55 	bl	8000150 <__udivsi3>
 80102a6:	4360      	muls	r0, r4
 80102a8:	e7d9      	b.n	801025e <HAL_RCC_GetSysClockFreq+0x3e>
 80102aa:	46c0      	nop			; (mov r8, r8)
 80102ac:	0801626c 	.word	0x0801626c
 80102b0:	40021000 	.word	0x40021000
 80102b4:	02625a00 	.word	0x02625a00
 80102b8:	007a1200 	.word	0x007a1200
 80102bc:	02dc6c00 	.word	0x02dc6c00

080102c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80102c0:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80102c2:	f7ff ffad 	bl	8010220 <HAL_RCC_GetSysClockFreq>
 80102c6:	4b05      	ldr	r3, [pc, #20]	; (80102dc <HAL_RCC_GetHCLKFreq+0x1c>)
 80102c8:	685b      	ldr	r3, [r3, #4]
 80102ca:	061b      	lsls	r3, r3, #24
 80102cc:	0f1b      	lsrs	r3, r3, #28
 80102ce:	4a04      	ldr	r2, [pc, #16]	; (80102e0 <HAL_RCC_GetHCLKFreq+0x20>)
 80102d0:	5cd3      	ldrb	r3, [r2, r3]
 80102d2:	40d8      	lsrs	r0, r3
 80102d4:	4b03      	ldr	r3, [pc, #12]	; (80102e4 <HAL_RCC_GetHCLKFreq+0x24>)
 80102d6:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80102d8:	bd10      	pop	{r4, pc}
 80102da:	46c0      	nop			; (mov r8, r8)
 80102dc:	40021000 	.word	0x40021000
 80102e0:	08018d9c 	.word	0x08018d9c
 80102e4:	20000090 	.word	0x20000090

080102e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80102e8:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 80102ea:	f7ff ffe9 	bl	80102c0 <HAL_RCC_GetHCLKFreq>
 80102ee:	4b04      	ldr	r3, [pc, #16]	; (8010300 <HAL_RCC_GetPCLK1Freq+0x18>)
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	055b      	lsls	r3, r3, #21
 80102f4:	0f5b      	lsrs	r3, r3, #29
 80102f6:	4a03      	ldr	r2, [pc, #12]	; (8010304 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80102f8:	5cd3      	ldrb	r3, [r2, r3]
 80102fa:	40d8      	lsrs	r0, r3
}    
 80102fc:	bd10      	pop	{r4, pc}
 80102fe:	46c0      	nop			; (mov r8, r8)
 8010300:	40021000 	.word	0x40021000
 8010304:	08018d9c 	.word	0x08018d9c

08010308 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801030a:	46c6      	mov	lr, r8
 801030c:	b500      	push	{lr}
 801030e:	b082      	sub	sp, #8
 8010310:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8010312:	6803      	ldr	r3, [r0, #0]
 8010314:	03db      	lsls	r3, r3, #15
 8010316:	d507      	bpl.n	8010328 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010318:	4b43      	ldr	r3, [pc, #268]	; (8010428 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801031a:	6a1b      	ldr	r3, [r3, #32]
 801031c:	6842      	ldr	r2, [r0, #4]
 801031e:	4053      	eors	r3, r2
 8010320:	22c0      	movs	r2, #192	; 0xc0
 8010322:	0092      	lsls	r2, r2, #2
 8010324:	4213      	tst	r3, r2
 8010326:	d136      	bne.n	8010396 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010328:	6823      	ldr	r3, [r4, #0]
 801032a:	07db      	lsls	r3, r3, #31
 801032c:	d506      	bpl.n	801033c <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801032e:	4a3e      	ldr	r2, [pc, #248]	; (8010428 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8010330:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010332:	2103      	movs	r1, #3
 8010334:	438b      	bics	r3, r1
 8010336:	68a1      	ldr	r1, [r4, #8]
 8010338:	430b      	orrs	r3, r1
 801033a:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801033c:	6823      	ldr	r3, [r4, #0]
 801033e:	079b      	lsls	r3, r3, #30
 8010340:	d506      	bpl.n	8010350 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010342:	4a39      	ldr	r2, [pc, #228]	; (8010428 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8010344:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010346:	4939      	ldr	r1, [pc, #228]	; (801042c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8010348:	400b      	ands	r3, r1
 801034a:	68e1      	ldr	r1, [r4, #12]
 801034c:	430b      	orrs	r3, r1
 801034e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8010350:	6823      	ldr	r3, [r4, #0]
 8010352:	035b      	lsls	r3, r3, #13
 8010354:	d506      	bpl.n	8010364 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8010356:	4a34      	ldr	r2, [pc, #208]	; (8010428 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8010358:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801035a:	4935      	ldr	r1, [pc, #212]	; (8010430 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 801035c:	400b      	ands	r3, r1
 801035e:	6921      	ldr	r1, [r4, #16]
 8010360:	430b      	orrs	r3, r1
 8010362:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010364:	6823      	ldr	r3, [r4, #0]
 8010366:	069b      	lsls	r3, r3, #26
 8010368:	d506      	bpl.n	8010378 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801036a:	4a2f      	ldr	r2, [pc, #188]	; (8010428 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801036c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801036e:	2110      	movs	r1, #16
 8010370:	438b      	bics	r3, r1
 8010372:	6961      	ldr	r1, [r4, #20]
 8010374:	430b      	orrs	r3, r1
 8010376:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8010378:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801037a:	6823      	ldr	r3, [r4, #0]
 801037c:	055b      	lsls	r3, r3, #21
 801037e:	d506      	bpl.n	801038e <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010380:	4a29      	ldr	r2, [pc, #164]	; (8010428 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8010382:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8010384:	2140      	movs	r1, #64	; 0x40
 8010386:	438b      	bics	r3, r1
 8010388:	69a1      	ldr	r1, [r4, #24]
 801038a:	430b      	orrs	r3, r1
 801038c:	6313      	str	r3, [r2, #48]	; 0x30
}
 801038e:	b002      	add	sp, #8
 8010390:	bc04      	pop	{r2}
 8010392:	4690      	mov	r8, r2
 8010394:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8010396:	4a24      	ldr	r2, [pc, #144]	; (8010428 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8010398:	69d1      	ldr	r1, [r2, #28]
 801039a:	2080      	movs	r0, #128	; 0x80
 801039c:	0540      	lsls	r0, r0, #21
 801039e:	4301      	orrs	r1, r0
 80103a0:	61d1      	str	r1, [r2, #28]
 80103a2:	69d3      	ldr	r3, [r2, #28]
 80103a4:	4003      	ands	r3, r0
 80103a6:	9301      	str	r3, [sp, #4]
 80103a8:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80103aa:	4a22      	ldr	r2, [pc, #136]	; (8010434 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80103ac:	6811      	ldr	r1, [r2, #0]
 80103ae:	2380      	movs	r3, #128	; 0x80
 80103b0:	005b      	lsls	r3, r3, #1
 80103b2:	430b      	orrs	r3, r1
 80103b4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80103b6:	f7fe fa4f 	bl	800e858 <HAL_GetTick>
 80103ba:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80103bc:	4e1d      	ldr	r6, [pc, #116]	; (8010434 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80103be:	2580      	movs	r5, #128	; 0x80
 80103c0:	006d      	lsls	r5, r5, #1
 80103c2:	6833      	ldr	r3, [r6, #0]
 80103c4:	422b      	tst	r3, r5
 80103c6:	d106      	bne.n	80103d6 <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80103c8:	f7fe fa46 	bl	800e858 <HAL_GetTick>
 80103cc:	1bc0      	subs	r0, r0, r7
 80103ce:	2864      	cmp	r0, #100	; 0x64
 80103d0:	d9f7      	bls.n	80103c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 80103d2:	2003      	movs	r0, #3
 80103d4:	e7db      	b.n	801038e <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80103d6:	4b14      	ldr	r3, [pc, #80]	; (8010428 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80103d8:	6a18      	ldr	r0, [r3, #32]
 80103da:	4a17      	ldr	r2, [pc, #92]	; (8010438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80103dc:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 80103de:	6a1d      	ldr	r5, [r3, #32]
 80103e0:	2180      	movs	r1, #128	; 0x80
 80103e2:	0249      	lsls	r1, r1, #9
 80103e4:	4329      	orrs	r1, r5
 80103e6:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80103e8:	6a19      	ldr	r1, [r3, #32]
 80103ea:	4d14      	ldr	r5, [pc, #80]	; (801043c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80103ec:	4029      	ands	r1, r5
 80103ee:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 80103f0:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 80103f2:	0783      	lsls	r3, r0, #30
 80103f4:	d407      	bmi.n	8010406 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80103f6:	4a0c      	ldr	r2, [pc, #48]	; (8010428 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80103f8:	6a13      	ldr	r3, [r2, #32]
 80103fa:	490f      	ldr	r1, [pc, #60]	; (8010438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80103fc:	400b      	ands	r3, r1
 80103fe:	6861      	ldr	r1, [r4, #4]
 8010400:	430b      	orrs	r3, r1
 8010402:	6213      	str	r3, [r2, #32]
 8010404:	e790      	b.n	8010328 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8010406:	f7fe fa27 	bl	800e858 <HAL_GetTick>
 801040a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801040c:	4e06      	ldr	r6, [pc, #24]	; (8010428 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801040e:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010410:	4f0b      	ldr	r7, [pc, #44]	; (8010440 <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010412:	6a33      	ldr	r3, [r6, #32]
 8010414:	421d      	tst	r5, r3
 8010416:	d1ee      	bne.n	80103f6 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010418:	f7fe fa1e 	bl	800e858 <HAL_GetTick>
 801041c:	4643      	mov	r3, r8
 801041e:	1ac0      	subs	r0, r0, r3
 8010420:	42b8      	cmp	r0, r7
 8010422:	d9f6      	bls.n	8010412 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 8010424:	2003      	movs	r0, #3
 8010426:	e7b2      	b.n	801038e <HAL_RCCEx_PeriphCLKConfig+0x86>
 8010428:	40021000 	.word	0x40021000
 801042c:	fffcffff 	.word	0xfffcffff
 8010430:	fff3ffff 	.word	0xfff3ffff
 8010434:	40007000 	.word	0x40007000
 8010438:	fffffcff 	.word	0xfffffcff
 801043c:	fffeffff 	.word	0xfffeffff
 8010440:	00001388 	.word	0x00001388

08010444 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8010444:	4770      	bx	lr

08010446 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8010446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010448:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801044a:	6802      	ldr	r2, [r0, #0]
 801044c:	68d3      	ldr	r3, [r2, #12]
 801044e:	21a0      	movs	r1, #160	; 0xa0
 8010450:	438b      	bics	r3, r1
 8010452:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8010454:	f7fe fa00 	bl	800e858 <HAL_GetTick>
 8010458:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801045a:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801045c:	26fa      	movs	r6, #250	; 0xfa
 801045e:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8010460:	6823      	ldr	r3, [r4, #0]
 8010462:	68db      	ldr	r3, [r3, #12]
 8010464:	421d      	tst	r5, r3
 8010466:	d106      	bne.n	8010476 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8010468:	f7fe f9f6 	bl	800e858 <HAL_GetTick>
 801046c:	1bc0      	subs	r0, r0, r7
 801046e:	42b0      	cmp	r0, r6
 8010470:	d9f6      	bls.n	8010460 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 8010472:	2003      	movs	r0, #3
 8010474:	e000      	b.n	8010478 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 8010476:	2000      	movs	r0, #0
}
 8010478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801047a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 801047a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801047c:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801047e:	6803      	ldr	r3, [r0, #0]
 8010480:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8010482:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010484:	0652      	lsls	r2, r2, #25
 8010486:	d500      	bpl.n	801048a <RTC_EnterInitMode+0x10>
}
 8010488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801048a:	2201      	movs	r2, #1
 801048c:	4252      	negs	r2, r2
 801048e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8010490:	f7fe f9e2 	bl	800e858 <HAL_GetTick>
 8010494:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010496:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8010498:	26fa      	movs	r6, #250	; 0xfa
 801049a:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801049c:	6823      	ldr	r3, [r4, #0]
 801049e:	68db      	ldr	r3, [r3, #12]
 80104a0:	421d      	tst	r5, r3
 80104a2:	d106      	bne.n	80104b2 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80104a4:	f7fe f9d8 	bl	800e858 <HAL_GetTick>
 80104a8:	1bc0      	subs	r0, r0, r7
 80104aa:	42b0      	cmp	r0, r6
 80104ac:	d9f6      	bls.n	801049c <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 80104ae:	2003      	movs	r0, #3
 80104b0:	e7ea      	b.n	8010488 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 80104b2:	2000      	movs	r0, #0
 80104b4:	e7e8      	b.n	8010488 <RTC_EnterInitMode+0xe>
	...

080104b8 <HAL_RTC_Init>:
{
 80104b8:	b570      	push	{r4, r5, r6, lr}
 80104ba:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 80104bc:	d046      	beq.n	801054c <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80104be:	7f43      	ldrb	r3, [r0, #29]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d038      	beq.n	8010536 <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80104c4:	2302      	movs	r3, #2
 80104c6:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80104c8:	6823      	ldr	r3, [r4, #0]
 80104ca:	22ca      	movs	r2, #202	; 0xca
 80104cc:	625a      	str	r2, [r3, #36]	; 0x24
 80104ce:	6823      	ldr	r3, [r4, #0]
 80104d0:	3a77      	subs	r2, #119	; 0x77
 80104d2:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80104d4:	0020      	movs	r0, r4
 80104d6:	f7ff ffd0 	bl	801047a <RTC_EnterInitMode>
 80104da:	2800      	cmp	r0, #0
 80104dc:	d12f      	bne.n	801053e <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80104de:	6822      	ldr	r2, [r4, #0]
 80104e0:	6893      	ldr	r3, [r2, #8]
 80104e2:	491b      	ldr	r1, [pc, #108]	; (8010550 <HAL_RTC_Init+0x98>)
 80104e4:	400b      	ands	r3, r1
 80104e6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80104e8:	6822      	ldr	r2, [r4, #0]
 80104ea:	6891      	ldr	r1, [r2, #8]
 80104ec:	6863      	ldr	r3, [r4, #4]
 80104ee:	6925      	ldr	r5, [r4, #16]
 80104f0:	432b      	orrs	r3, r5
 80104f2:	6965      	ldr	r5, [r4, #20]
 80104f4:	432b      	orrs	r3, r5
 80104f6:	430b      	orrs	r3, r1
 80104f8:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80104fa:	6823      	ldr	r3, [r4, #0]
 80104fc:	68e2      	ldr	r2, [r4, #12]
 80104fe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8010500:	6822      	ldr	r2, [r4, #0]
 8010502:	6911      	ldr	r1, [r2, #16]
 8010504:	68a3      	ldr	r3, [r4, #8]
 8010506:	041b      	lsls	r3, r3, #16
 8010508:	430b      	orrs	r3, r1
 801050a:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 801050c:	6822      	ldr	r2, [r4, #0]
 801050e:	68d3      	ldr	r3, [r2, #12]
 8010510:	2180      	movs	r1, #128	; 0x80
 8010512:	438b      	bics	r3, r1
 8010514:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8010516:	6822      	ldr	r2, [r4, #0]
 8010518:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801051a:	490e      	ldr	r1, [pc, #56]	; (8010554 <HAL_RTC_Init+0x9c>)
 801051c:	400b      	ands	r3, r1
 801051e:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8010520:	6822      	ldr	r2, [r4, #0]
 8010522:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010524:	69a1      	ldr	r1, [r4, #24]
 8010526:	430b      	orrs	r3, r1
 8010528:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801052a:	6823      	ldr	r3, [r4, #0]
 801052c:	22ff      	movs	r2, #255	; 0xff
 801052e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8010530:	2301      	movs	r3, #1
 8010532:	7763      	strb	r3, [r4, #29]
}
 8010534:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8010536:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8010538:	f7ff ff84 	bl	8010444 <HAL_RTC_MspInit>
 801053c:	e7c2      	b.n	80104c4 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801053e:	6823      	ldr	r3, [r4, #0]
 8010540:	22ff      	movs	r2, #255	; 0xff
 8010542:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8010544:	2304      	movs	r3, #4
 8010546:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8010548:	2001      	movs	r0, #1
 801054a:	e7f3      	b.n	8010534 <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 801054c:	2001      	movs	r0, #1
 801054e:	e7f1      	b.n	8010534 <HAL_RTC_Init+0x7c>
 8010550:	ff8fffbf 	.word	0xff8fffbf
 8010554:	fffbffff 	.word	0xfffbffff

08010558 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8010558:	2809      	cmp	r0, #9
 801055a:	d909      	bls.n	8010570 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 801055c:	2300      	movs	r3, #0
  {
    bcdhigh++;
 801055e:	3301      	adds	r3, #1
    Value -= 10;
 8010560:	380a      	subs	r0, #10
 8010562:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8010564:	2809      	cmp	r0, #9
 8010566:	d8fa      	bhi.n	801055e <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8010568:	011b      	lsls	r3, r3, #4
 801056a:	4318      	orrs	r0, r3
 801056c:	b2c0      	uxtb	r0, r0
}
 801056e:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 8010570:	2300      	movs	r3, #0
 8010572:	e7f9      	b.n	8010568 <RTC_ByteToBcd2+0x10>

08010574 <HAL_RTC_SetTime>:
{
 8010574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010576:	46c6      	mov	lr, r8
 8010578:	b500      	push	{lr}
 801057a:	0004      	movs	r4, r0
 801057c:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 801057e:	7f03      	ldrb	r3, [r0, #28]
 8010580:	2b01      	cmp	r3, #1
 8010582:	d100      	bne.n	8010586 <HAL_RTC_SetTime+0x12>
 8010584:	e075      	b.n	8010672 <HAL_RTC_SetTime+0xfe>
 8010586:	2301      	movs	r3, #1
 8010588:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 801058a:	3301      	adds	r3, #1
 801058c:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 801058e:	2a00      	cmp	r2, #0
 8010590:	d144      	bne.n	801061c <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8010592:	6803      	ldr	r3, [r0, #0]
 8010594:	689b      	ldr	r3, [r3, #8]
 8010596:	065b      	lsls	r3, r3, #25
 8010598:	d401      	bmi.n	801059e <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 801059a:	2300      	movs	r3, #0
 801059c:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801059e:	7830      	ldrb	r0, [r6, #0]
 80105a0:	f7ff ffda 	bl	8010558 <RTC_ByteToBcd2>
 80105a4:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80105a6:	7870      	ldrb	r0, [r6, #1]
 80105a8:	f7ff ffd6 	bl	8010558 <RTC_ByteToBcd2>
 80105ac:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80105ae:	78b0      	ldrb	r0, [r6, #2]
 80105b0:	f7ff ffd2 	bl	8010558 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 80105b4:	7a35      	ldrb	r5, [r6, #8]
 80105b6:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80105b8:	4305      	orrs	r5, r0
 80105ba:	4643      	mov	r3, r8
 80105bc:	0418      	lsls	r0, r3, #16
 80105be:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80105c0:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80105c2:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80105c4:	6823      	ldr	r3, [r4, #0]
 80105c6:	22ca      	movs	r2, #202	; 0xca
 80105c8:	625a      	str	r2, [r3, #36]	; 0x24
 80105ca:	6823      	ldr	r3, [r4, #0]
 80105cc:	3a77      	subs	r2, #119	; 0x77
 80105ce:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80105d0:	0020      	movs	r0, r4
 80105d2:	f7ff ff52 	bl	801047a <RTC_EnterInitMode>
 80105d6:	1e07      	subs	r7, r0, #0
 80105d8:	d131      	bne.n	801063e <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80105da:	6823      	ldr	r3, [r4, #0]
 80105dc:	4826      	ldr	r0, [pc, #152]	; (8010678 <HAL_RTC_SetTime+0x104>)
 80105de:	4005      	ands	r5, r0
 80105e0:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80105e2:	6822      	ldr	r2, [r4, #0]
 80105e4:	6893      	ldr	r3, [r2, #8]
 80105e6:	4925      	ldr	r1, [pc, #148]	; (801067c <HAL_RTC_SetTime+0x108>)
 80105e8:	400b      	ands	r3, r1
 80105ea:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80105ec:	6822      	ldr	r2, [r4, #0]
 80105ee:	6891      	ldr	r1, [r2, #8]
 80105f0:	68f3      	ldr	r3, [r6, #12]
 80105f2:	6930      	ldr	r0, [r6, #16]
 80105f4:	4303      	orrs	r3, r0
 80105f6:	430b      	orrs	r3, r1
 80105f8:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80105fa:	6822      	ldr	r2, [r4, #0]
 80105fc:	68d3      	ldr	r3, [r2, #12]
 80105fe:	2180      	movs	r1, #128	; 0x80
 8010600:	438b      	bics	r3, r1
 8010602:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8010604:	6823      	ldr	r3, [r4, #0]
 8010606:	689b      	ldr	r3, [r3, #8]
 8010608:	069b      	lsls	r3, r3, #26
 801060a:	d524      	bpl.n	8010656 <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801060c:	6823      	ldr	r3, [r4, #0]
 801060e:	22ff      	movs	r2, #255	; 0xff
 8010610:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8010612:	2301      	movs	r3, #1
 8010614:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8010616:	2300      	movs	r3, #0
 8010618:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 801061a:	e018      	b.n	801064e <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801061c:	6803      	ldr	r3, [r0, #0]
 801061e:	689b      	ldr	r3, [r3, #8]
 8010620:	065b      	lsls	r3, r3, #25
 8010622:	d401      	bmi.n	8010628 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 8010624:	2300      	movs	r3, #0
 8010626:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8010628:	7835      	ldrb	r5, [r6, #0]
 801062a:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 801062c:	7870      	ldrb	r0, [r6, #1]
 801062e:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8010630:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8010632:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8010634:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8010636:	7a30      	ldrb	r0, [r6, #8]
 8010638:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801063a:	4305      	orrs	r5, r0
 801063c:	e7c2      	b.n	80105c4 <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801063e:	6823      	ldr	r3, [r4, #0]
 8010640:	22ff      	movs	r2, #255	; 0xff
 8010642:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8010644:	2304      	movs	r3, #4
 8010646:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8010648:	2300      	movs	r3, #0
 801064a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 801064c:	2701      	movs	r7, #1
}
 801064e:	0038      	movs	r0, r7
 8010650:	bc04      	pop	{r2}
 8010652:	4690      	mov	r8, r2
 8010654:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010656:	0020      	movs	r0, r4
 8010658:	f7ff fef5 	bl	8010446 <HAL_RTC_WaitForSynchro>
 801065c:	2800      	cmp	r0, #0
 801065e:	d0d5      	beq.n	801060c <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8010660:	6823      	ldr	r3, [r4, #0]
 8010662:	22ff      	movs	r2, #255	; 0xff
 8010664:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8010666:	2304      	movs	r3, #4
 8010668:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 801066a:	2300      	movs	r3, #0
 801066c:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 801066e:	2701      	movs	r7, #1
 8010670:	e7ed      	b.n	801064e <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 8010672:	2702      	movs	r7, #2
 8010674:	e7eb      	b.n	801064e <HAL_RTC_SetTime+0xda>
 8010676:	46c0      	nop			; (mov r8, r8)
 8010678:	007f7f7f 	.word	0x007f7f7f
 801067c:	fffbffff 	.word	0xfffbffff

08010680 <HAL_RTC_SetDate>:
{
 8010680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010682:	46c6      	mov	lr, r8
 8010684:	b500      	push	{lr}
 8010686:	0004      	movs	r4, r0
 8010688:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 801068a:	7f03      	ldrb	r3, [r0, #28]
 801068c:	2b01      	cmp	r3, #1
 801068e:	d03a      	beq.n	8010706 <HAL_RTC_SetDate+0x86>
 8010690:	2301      	movs	r3, #1
 8010692:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8010694:	3301      	adds	r3, #1
 8010696:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8010698:	2a00      	cmp	r2, #0
 801069a:	d136      	bne.n	801070a <HAL_RTC_SetDate+0x8a>
 801069c:	784b      	ldrb	r3, [r1, #1]
 801069e:	06da      	lsls	r2, r3, #27
 80106a0:	d503      	bpl.n	80106aa <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 80106a2:	2210      	movs	r2, #16
 80106a4:	4393      	bics	r3, r2
 80106a6:	330a      	adds	r3, #10
 80106a8:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80106aa:	78f0      	ldrb	r0, [r6, #3]
 80106ac:	f7ff ff54 	bl	8010558 <RTC_ByteToBcd2>
 80106b0:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80106b2:	7870      	ldrb	r0, [r6, #1]
 80106b4:	f7ff ff50 	bl	8010558 <RTC_ByteToBcd2>
 80106b8:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80106ba:	78b0      	ldrb	r0, [r6, #2]
 80106bc:	f7ff ff4c 	bl	8010558 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 80106c0:	7835      	ldrb	r5, [r6, #0]
 80106c2:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80106c4:	4305      	orrs	r5, r0
 80106c6:	4643      	mov	r3, r8
 80106c8:	0418      	lsls	r0, r3, #16
 80106ca:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80106cc:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80106ce:	433d      	orrs	r5, r7
 80106d0:	e025      	b.n	801071e <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80106d2:	6823      	ldr	r3, [r4, #0]
 80106d4:	22ff      	movs	r2, #255	; 0xff
 80106d6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80106d8:	2304      	movs	r3, #4
 80106da:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80106dc:	2300      	movs	r3, #0
 80106de:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80106e0:	2601      	movs	r6, #1
}
 80106e2:	0030      	movs	r0, r6
 80106e4:	bc04      	pop	{r2}
 80106e6:	4690      	mov	r8, r2
 80106e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80106ea:	0020      	movs	r0, r4
 80106ec:	f7ff feab 	bl	8010446 <HAL_RTC_WaitForSynchro>
 80106f0:	2800      	cmp	r0, #0
 80106f2:	d02c      	beq.n	801074e <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80106f4:	6823      	ldr	r3, [r4, #0]
 80106f6:	22ff      	movs	r2, #255	; 0xff
 80106f8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80106fa:	2304      	movs	r3, #4
 80106fc:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80106fe:	2300      	movs	r3, #0
 8010700:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8010702:	2601      	movs	r6, #1
 8010704:	e7ed      	b.n	80106e2 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8010706:	2602      	movs	r6, #2
 8010708:	e7eb      	b.n	80106e2 <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801070a:	78cd      	ldrb	r5, [r1, #3]
 801070c:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 801070e:	7848      	ldrb	r0, [r1, #1]
 8010710:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8010712:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8010714:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8010716:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8010718:	7808      	ldrb	r0, [r1, #0]
 801071a:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801071c:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801071e:	6823      	ldr	r3, [r4, #0]
 8010720:	22ca      	movs	r2, #202	; 0xca
 8010722:	625a      	str	r2, [r3, #36]	; 0x24
 8010724:	6823      	ldr	r3, [r4, #0]
 8010726:	3a77      	subs	r2, #119	; 0x77
 8010728:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801072a:	0020      	movs	r0, r4
 801072c:	f7ff fea5 	bl	801047a <RTC_EnterInitMode>
 8010730:	1e06      	subs	r6, r0, #0
 8010732:	d1ce      	bne.n	80106d2 <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8010734:	6823      	ldr	r3, [r4, #0]
 8010736:	480a      	ldr	r0, [pc, #40]	; (8010760 <HAL_RTC_SetDate+0xe0>)
 8010738:	4005      	ands	r5, r0
 801073a:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801073c:	6822      	ldr	r2, [r4, #0]
 801073e:	68d3      	ldr	r3, [r2, #12]
 8010740:	2180      	movs	r1, #128	; 0x80
 8010742:	438b      	bics	r3, r1
 8010744:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8010746:	6823      	ldr	r3, [r4, #0]
 8010748:	689b      	ldr	r3, [r3, #8]
 801074a:	069b      	lsls	r3, r3, #26
 801074c:	d5cd      	bpl.n	80106ea <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801074e:	6823      	ldr	r3, [r4, #0]
 8010750:	22ff      	movs	r2, #255	; 0xff
 8010752:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8010754:	2301      	movs	r3, #1
 8010756:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8010758:	2300      	movs	r3, #0
 801075a:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 801075c:	e7c1      	b.n	80106e2 <HAL_RTC_SetDate+0x62>
 801075e:	46c0      	nop			; (mov r8, r8)
 8010760:	00ffff3f 	.word	0x00ffff3f

08010764 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8010764:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010766:	0900      	lsrs	r0, r0, #4
 8010768:	0083      	lsls	r3, r0, #2
 801076a:	181b      	adds	r3, r3, r0
 801076c:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801076e:	200f      	movs	r0, #15
 8010770:	4010      	ands	r0, r2
 8010772:	1818      	adds	r0, r3, r0
 8010774:	b2c0      	uxtb	r0, r0
}
 8010776:	4770      	bx	lr

08010778 <HAL_RTC_GetTime>:
{
 8010778:	b570      	push	{r4, r5, r6, lr}
 801077a:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801077c:	6803      	ldr	r3, [r0, #0]
 801077e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010780:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8010782:	6803      	ldr	r3, [r0, #0]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	490e      	ldr	r1, [pc, #56]	; (80107c0 <HAL_RTC_GetTime+0x48>)
 8010788:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 801078a:	0c19      	lsrs	r1, r3, #16
 801078c:	203f      	movs	r0, #63	; 0x3f
 801078e:	4008      	ands	r0, r1
 8010790:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8010792:	0a1e      	lsrs	r6, r3, #8
 8010794:	b2f6      	uxtb	r6, r6
 8010796:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8010798:	b2dc      	uxtb	r4, r3
 801079a:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 801079c:	2340      	movs	r3, #64	; 0x40
 801079e:	400b      	ands	r3, r1
 80107a0:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 80107a2:	2a00      	cmp	r2, #0
 80107a4:	d10a      	bne.n	80107bc <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80107a6:	f7ff ffdd 	bl	8010764 <RTC_Bcd2ToByte>
 80107aa:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80107ac:	0030      	movs	r0, r6
 80107ae:	f7ff ffd9 	bl	8010764 <RTC_Bcd2ToByte>
 80107b2:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80107b4:	0020      	movs	r0, r4
 80107b6:	f7ff ffd5 	bl	8010764 <RTC_Bcd2ToByte>
 80107ba:	70a8      	strb	r0, [r5, #2]
}
 80107bc:	2000      	movs	r0, #0
 80107be:	bd70      	pop	{r4, r5, r6, pc}
 80107c0:	007f7f7f 	.word	0x007f7f7f

080107c4 <HAL_RTC_GetDate>:
{
 80107c4:	b570      	push	{r4, r5, r6, lr}
 80107c6:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80107c8:	6803      	ldr	r3, [r0, #0]
 80107ca:	685b      	ldr	r3, [r3, #4]
 80107cc:	490d      	ldr	r1, [pc, #52]	; (8010804 <HAL_RTC_GetDate+0x40>)
 80107ce:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80107d0:	0c18      	lsrs	r0, r3, #16
 80107d2:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80107d4:	04dd      	lsls	r5, r3, #19
 80107d6:	0eed      	lsrs	r5, r5, #27
 80107d8:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80107da:	b2de      	uxtb	r6, r3
 80107dc:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80107de:	041b      	lsls	r3, r3, #16
 80107e0:	0f5b      	lsrs	r3, r3, #29
 80107e2:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 80107e4:	2a00      	cmp	r2, #0
 80107e6:	d10a      	bne.n	80107fe <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80107e8:	f7ff ffbc 	bl	8010764 <RTC_Bcd2ToByte>
 80107ec:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80107ee:	0028      	movs	r0, r5
 80107f0:	f7ff ffb8 	bl	8010764 <RTC_Bcd2ToByte>
 80107f4:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 80107f6:	0030      	movs	r0, r6
 80107f8:	f7ff ffb4 	bl	8010764 <RTC_Bcd2ToByte>
 80107fc:	70a0      	strb	r0, [r4, #2]
}
 80107fe:	2000      	movs	r0, #0
 8010800:	bd70      	pop	{r4, r5, r6, pc}
 8010802:	46c0      	nop			; (mov r8, r8)
 8010804:	00ffff3f 	.word	0x00ffff3f

08010808 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8010808:	6803      	ldr	r3, [r0, #0]
 801080a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 801080c:	0089      	lsls	r1, r1, #2
 801080e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8010810:	600a      	str	r2, [r1, #0]
}
 8010812:	4770      	bx	lr

08010814 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8010814:	6803      	ldr	r3, [r0, #0]
 8010816:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8010818:	0089      	lsls	r1, r1, #2
 801081a:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801081c:	6808      	ldr	r0, [r1, #0]
}
 801081e:	4770      	bx	lr

08010820 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8010820:	4770      	bx	lr

08010822 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8010822:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8010824:	2239      	movs	r2, #57	; 0x39
 8010826:	2302      	movs	r3, #2
 8010828:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801082a:	6804      	ldr	r4, [r0, #0]
 801082c:	6823      	ldr	r3, [r4, #0]
 801082e:	2101      	movs	r1, #1
 8010830:	430b      	orrs	r3, r1
 8010832:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8010834:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8010836:	2000      	movs	r0, #0
 8010838:	bd10      	pop	{r4, pc}
	...

0801083c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 801083c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801083e:	4a36      	ldr	r2, [pc, #216]	; (8010918 <TIM_Base_SetConfig+0xdc>)
 8010840:	4290      	cmp	r0, r2
 8010842:	d022      	beq.n	801088a <TIM_Base_SetConfig+0x4e>
 8010844:	2280      	movs	r2, #128	; 0x80
 8010846:	05d2      	lsls	r2, r2, #23
 8010848:	4290      	cmp	r0, r2
 801084a:	d014      	beq.n	8010876 <TIM_Base_SetConfig+0x3a>
 801084c:	4a33      	ldr	r2, [pc, #204]	; (801091c <TIM_Base_SetConfig+0xe0>)
 801084e:	4290      	cmp	r0, r2
 8010850:	d016      	beq.n	8010880 <TIM_Base_SetConfig+0x44>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010852:	4a33      	ldr	r2, [pc, #204]	; (8010920 <TIM_Base_SetConfig+0xe4>)
 8010854:	4290      	cmp	r0, r2
 8010856:	d040      	beq.n	80108da <TIM_Base_SetConfig+0x9e>
 8010858:	4a32      	ldr	r2, [pc, #200]	; (8010924 <TIM_Base_SetConfig+0xe8>)
 801085a:	4290      	cmp	r0, r2
 801085c:	d047      	beq.n	80108ee <TIM_Base_SetConfig+0xb2>
 801085e:	4a32      	ldr	r2, [pc, #200]	; (8010928 <TIM_Base_SetConfig+0xec>)
 8010860:	4290      	cmp	r0, r2
 8010862:	d04e      	beq.n	8010902 <TIM_Base_SetConfig+0xc6>
 8010864:	4a31      	ldr	r2, [pc, #196]	; (801092c <TIM_Base_SetConfig+0xf0>)
 8010866:	4290      	cmp	r0, r2
 8010868:	d02d      	beq.n	80108c6 <TIM_Base_SetConfig+0x8a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 801086a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801086c:	688b      	ldr	r3, [r1, #8]
 801086e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8010870:	680b      	ldr	r3, [r1, #0]
 8010872:	6283      	str	r3, [r0, #40]	; 0x28
 8010874:	e024      	b.n	80108c0 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010876:	2270      	movs	r2, #112	; 0x70
 8010878:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801087a:	684a      	ldr	r2, [r1, #4]
 801087c:	4313      	orrs	r3, r2
 801087e:	e008      	b.n	8010892 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010880:	2270      	movs	r2, #112	; 0x70
 8010882:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8010884:	684a      	ldr	r2, [r1, #4]
 8010886:	4313      	orrs	r3, r2
 8010888:	e003      	b.n	8010892 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801088a:	2270      	movs	r2, #112	; 0x70
 801088c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801088e:	684a      	ldr	r2, [r1, #4]
 8010890:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8010892:	4a27      	ldr	r2, [pc, #156]	; (8010930 <TIM_Base_SetConfig+0xf4>)
 8010894:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010896:	68ca      	ldr	r2, [r1, #12]
 8010898:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801089a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801089c:	688b      	ldr	r3, [r1, #8]
 801089e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80108a0:	680b      	ldr	r3, [r1, #0]
 80108a2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80108a4:	4b1c      	ldr	r3, [pc, #112]	; (8010918 <TIM_Base_SetConfig+0xdc>)
 80108a6:	4298      	cmp	r0, r3
 80108a8:	d008      	beq.n	80108bc <TIM_Base_SetConfig+0x80>
 80108aa:	4b1e      	ldr	r3, [pc, #120]	; (8010924 <TIM_Base_SetConfig+0xe8>)
 80108ac:	4298      	cmp	r0, r3
 80108ae:	d005      	beq.n	80108bc <TIM_Base_SetConfig+0x80>
 80108b0:	4b1d      	ldr	r3, [pc, #116]	; (8010928 <TIM_Base_SetConfig+0xec>)
 80108b2:	4298      	cmp	r0, r3
 80108b4:	d002      	beq.n	80108bc <TIM_Base_SetConfig+0x80>
 80108b6:	4b1d      	ldr	r3, [pc, #116]	; (801092c <TIM_Base_SetConfig+0xf0>)
 80108b8:	4298      	cmp	r0, r3
 80108ba:	d101      	bne.n	80108c0 <TIM_Base_SetConfig+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80108bc:	690b      	ldr	r3, [r1, #16]
 80108be:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80108c0:	2301      	movs	r3, #1
 80108c2:	6143      	str	r3, [r0, #20]
}
 80108c4:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 80108c6:	4a1a      	ldr	r2, [pc, #104]	; (8010930 <TIM_Base_SetConfig+0xf4>)
 80108c8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80108ca:	68ca      	ldr	r2, [r1, #12]
 80108cc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80108ce:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80108d0:	688b      	ldr	r3, [r1, #8]
 80108d2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80108d4:	680b      	ldr	r3, [r1, #0]
 80108d6:	6283      	str	r3, [r0, #40]	; 0x28
 80108d8:	e7f0      	b.n	80108bc <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 80108da:	4a15      	ldr	r2, [pc, #84]	; (8010930 <TIM_Base_SetConfig+0xf4>)
 80108dc:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80108de:	68ca      	ldr	r2, [r1, #12]
 80108e0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80108e2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80108e4:	688b      	ldr	r3, [r1, #8]
 80108e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80108e8:	680b      	ldr	r3, [r1, #0]
 80108ea:	6283      	str	r3, [r0, #40]	; 0x28
 80108ec:	e7e8      	b.n	80108c0 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 80108ee:	4a10      	ldr	r2, [pc, #64]	; (8010930 <TIM_Base_SetConfig+0xf4>)
 80108f0:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80108f2:	68ca      	ldr	r2, [r1, #12]
 80108f4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80108f6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80108f8:	688b      	ldr	r3, [r1, #8]
 80108fa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80108fc:	680b      	ldr	r3, [r1, #0]
 80108fe:	6283      	str	r3, [r0, #40]	; 0x28
 8010900:	e7dc      	b.n	80108bc <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8010902:	4a0b      	ldr	r2, [pc, #44]	; (8010930 <TIM_Base_SetConfig+0xf4>)
 8010904:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010906:	68ca      	ldr	r2, [r1, #12]
 8010908:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801090a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801090c:	688b      	ldr	r3, [r1, #8]
 801090e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8010910:	680b      	ldr	r3, [r1, #0]
 8010912:	6283      	str	r3, [r0, #40]	; 0x28
 8010914:	e7d2      	b.n	80108bc <TIM_Base_SetConfig+0x80>
 8010916:	46c0      	nop			; (mov r8, r8)
 8010918:	40012c00 	.word	0x40012c00
 801091c:	40000400 	.word	0x40000400
 8010920:	40002000 	.word	0x40002000
 8010924:	40014000 	.word	0x40014000
 8010928:	40014400 	.word	0x40014400
 801092c:	40014800 	.word	0x40014800
 8010930:	fffffcff 	.word	0xfffffcff

08010934 <HAL_TIM_Base_Init>:
{
 8010934:	b570      	push	{r4, r5, r6, lr}
 8010936:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8010938:	d014      	beq.n	8010964 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 801093a:	2339      	movs	r3, #57	; 0x39
 801093c:	5cc3      	ldrb	r3, [r0, r3]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d00a      	beq.n	8010958 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8010942:	2539      	movs	r5, #57	; 0x39
 8010944:	2302      	movs	r3, #2
 8010946:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010948:	1d21      	adds	r1, r4, #4
 801094a:	6820      	ldr	r0, [r4, #0]
 801094c:	f7ff ff76 	bl	801083c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8010950:	2301      	movs	r3, #1
 8010952:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8010954:	2000      	movs	r0, #0
}
 8010956:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8010958:	3338      	adds	r3, #56	; 0x38
 801095a:	2200      	movs	r2, #0
 801095c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 801095e:	f7ff ff5f 	bl	8010820 <HAL_TIM_Base_MspInit>
 8010962:	e7ee      	b.n	8010942 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8010964:	2001      	movs	r0, #1
 8010966:	e7f6      	b.n	8010956 <HAL_TIM_Base_Init+0x22>

08010968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8010968:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 801096a:	2338      	movs	r3, #56	; 0x38
 801096c:	5cc3      	ldrb	r3, [r0, r3]
 801096e:	2b01      	cmp	r3, #1
 8010970:	d01e      	beq.n	80109b0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8010972:	2238      	movs	r2, #56	; 0x38
 8010974:	2501      	movs	r5, #1
 8010976:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8010978:	2439      	movs	r4, #57	; 0x39
 801097a:	2302      	movs	r3, #2
 801097c:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801097e:	6806      	ldr	r6, [r0, #0]
 8010980:	6873      	ldr	r3, [r6, #4]
 8010982:	2770      	movs	r7, #112	; 0x70
 8010984:	43bb      	bics	r3, r7
 8010986:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8010988:	6806      	ldr	r6, [r0, #0]
 801098a:	6873      	ldr	r3, [r6, #4]
 801098c:	680f      	ldr	r7, [r1, #0]
 801098e:	433b      	orrs	r3, r7
 8010990:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8010992:	6806      	ldr	r6, [r0, #0]
 8010994:	68b3      	ldr	r3, [r6, #8]
 8010996:	2780      	movs	r7, #128	; 0x80
 8010998:	43bb      	bics	r3, r7
 801099a:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 801099c:	6806      	ldr	r6, [r0, #0]
 801099e:	68b3      	ldr	r3, [r6, #8]
 80109a0:	6849      	ldr	r1, [r1, #4]
 80109a2:	430b      	orrs	r3, r1
 80109a4:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 80109a6:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 80109a8:	2300      	movs	r3, #0
 80109aa:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80109ac:	2000      	movs	r0, #0
}
 80109ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80109b0:	2002      	movs	r0, #2
 80109b2:	e7fc      	b.n	80109ae <HAL_TIMEx_MasterConfigSynchronization+0x46>

080109b4 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 80109b4:	4770      	bx	lr

080109b6 <HAL_UART_DeInit>:
{
 80109b6:	b570      	push	{r4, r5, r6, lr}
 80109b8:	0004      	movs	r4, r0
    return HAL_ERROR;
 80109ba:	2001      	movs	r0, #1
  if(huart == NULL)
 80109bc:	2c00      	cmp	r4, #0
 80109be:	d016      	beq.n	80109ee <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 80109c0:	2669      	movs	r6, #105	; 0x69
 80109c2:	2302      	movs	r3, #2
 80109c4:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 80109c6:	6822      	ldr	r2, [r4, #0]
 80109c8:	6813      	ldr	r3, [r2, #0]
 80109ca:	2101      	movs	r1, #1
 80109cc:	438b      	bics	r3, r1
 80109ce:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 80109d0:	6823      	ldr	r3, [r4, #0]
 80109d2:	2500      	movs	r5, #0
 80109d4:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 80109d6:	6823      	ldr	r3, [r4, #0]
 80109d8:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 80109da:	6823      	ldr	r3, [r4, #0]
 80109dc:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80109de:	0020      	movs	r0, r4
 80109e0:	f7ff ffe8 	bl	80109b4 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109e4:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 80109e6:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 80109e8:	2368      	movs	r3, #104	; 0x68
 80109ea:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 80109ec:	2000      	movs	r0, #0
}
 80109ee:	bd70      	pop	{r4, r5, r6, pc}

080109f0 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80109f0:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80109f2:	2369      	movs	r3, #105	; 0x69
 80109f4:	5cc3      	ldrb	r3, [r0, r3]
 80109f6:	2b01      	cmp	r3, #1
 80109f8:	d004      	beq.n	8010a04 <HAL_UART_Transmit_IT+0x14>
 80109fa:	2369      	movs	r3, #105	; 0x69
 80109fc:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80109fe:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8010a00:	2c22      	cmp	r4, #34	; 0x22
 8010a02:	d127      	bne.n	8010a54 <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 8010a04:	2900      	cmp	r1, #0
 8010a06:	d02b      	beq.n	8010a60 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8010a08:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8010a0a:	2a00      	cmp	r2, #0
 8010a0c:	d022      	beq.n	8010a54 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8010a0e:	3367      	adds	r3, #103	; 0x67
 8010a10:	5cc3      	ldrb	r3, [r0, r3]
 8010a12:	2b01      	cmp	r3, #1
 8010a14:	d026      	beq.n	8010a64 <HAL_UART_Transmit_IT+0x74>
 8010a16:	2368      	movs	r3, #104	; 0x68
 8010a18:	2401      	movs	r4, #1
 8010a1a:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 8010a1c:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8010a1e:	3b18      	subs	r3, #24
 8010a20:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8010a22:	3302      	adds	r3, #2
 8010a24:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a26:	2300      	movs	r3, #0
 8010a28:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8010a2a:	3369      	adds	r3, #105	; 0x69
 8010a2c:	5cc3      	ldrb	r3, [r0, r3]
 8010a2e:	2b22      	cmp	r3, #34	; 0x22
 8010a30:	d012      	beq.n	8010a58 <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8010a32:	2369      	movs	r3, #105	; 0x69
 8010a34:	2212      	movs	r2, #18
 8010a36:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8010a38:	6802      	ldr	r2, [r0, #0]
 8010a3a:	6893      	ldr	r3, [r2, #8]
 8010a3c:	2101      	movs	r1, #1
 8010a3e:	430b      	orrs	r3, r1
 8010a40:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8010a42:	2368      	movs	r3, #104	; 0x68
 8010a44:	2200      	movs	r2, #0
 8010a46:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8010a48:	6802      	ldr	r2, [r0, #0]
 8010a4a:	6813      	ldr	r3, [r2, #0]
 8010a4c:	317f      	adds	r1, #127	; 0x7f
 8010a4e:	430b      	orrs	r3, r1
 8010a50:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8010a52:	2300      	movs	r3, #0
  }
}
 8010a54:	0018      	movs	r0, r3
 8010a56:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8010a58:	3347      	adds	r3, #71	; 0x47
 8010a5a:	2232      	movs	r2, #50	; 0x32
 8010a5c:	54c2      	strb	r2, [r0, r3]
 8010a5e:	e7eb      	b.n	8010a38 <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 8010a60:	2301      	movs	r3, #1
 8010a62:	e7f7      	b.n	8010a54 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8010a64:	2302      	movs	r3, #2
 8010a66:	e7f5      	b.n	8010a54 <HAL_UART_Transmit_IT+0x64>

08010a68 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010a68:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8010a6a:	2369      	movs	r3, #105	; 0x69
 8010a6c:	5cc3      	ldrb	r3, [r0, r3]
 8010a6e:	2b01      	cmp	r3, #1
 8010a70:	d004      	beq.n	8010a7c <HAL_UART_Receive_IT+0x14>
 8010a72:	2369      	movs	r3, #105	; 0x69
 8010a74:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8010a76:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8010a78:	2c12      	cmp	r4, #18
 8010a7a:	d14e      	bne.n	8010b1a <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 8010a7c:	2900      	cmp	r1, #0
 8010a7e:	d05d      	beq.n	8010b3c <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 8010a80:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8010a82:	2a00      	cmp	r2, #0
 8010a84:	d049      	beq.n	8010b1a <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8010a86:	3367      	adds	r3, #103	; 0x67
 8010a88:	5cc3      	ldrb	r3, [r0, r3]
 8010a8a:	2b01      	cmp	r3, #1
 8010a8c:	d058      	beq.n	8010b40 <HAL_UART_Receive_IT+0xd8>
 8010a8e:	2368      	movs	r3, #104	; 0x68
 8010a90:	2401      	movs	r4, #1
 8010a92:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 8010a94:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8010a96:	3b10      	subs	r3, #16
 8010a98:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8010a9a:	3302      	adds	r3, #2
 8010a9c:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 8010a9e:	6883      	ldr	r3, [r0, #8]
 8010aa0:	2280      	movs	r2, #128	; 0x80
 8010aa2:	0152      	lsls	r2, r2, #5
 8010aa4:	4293      	cmp	r3, r2
 8010aa6:	d008      	beq.n	8010aba <HAL_UART_Receive_IT+0x52>
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d115      	bne.n	8010ad8 <HAL_UART_Receive_IT+0x70>
 8010aac:	6903      	ldr	r3, [r0, #16]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d10e      	bne.n	8010ad0 <HAL_UART_Receive_IT+0x68>
 8010ab2:	335c      	adds	r3, #92	; 0x5c
 8010ab4:	22ff      	movs	r2, #255	; 0xff
 8010ab6:	52c2      	strh	r2, [r0, r3]
 8010ab8:	e012      	b.n	8010ae0 <HAL_UART_Receive_IT+0x78>
 8010aba:	6903      	ldr	r3, [r0, #16]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d103      	bne.n	8010ac8 <HAL_UART_Receive_IT+0x60>
 8010ac0:	335c      	adds	r3, #92	; 0x5c
 8010ac2:	4a20      	ldr	r2, [pc, #128]	; (8010b44 <HAL_UART_Receive_IT+0xdc>)
 8010ac4:	52c2      	strh	r2, [r0, r3]
 8010ac6:	e00b      	b.n	8010ae0 <HAL_UART_Receive_IT+0x78>
 8010ac8:	235c      	movs	r3, #92	; 0x5c
 8010aca:	22ff      	movs	r2, #255	; 0xff
 8010acc:	52c2      	strh	r2, [r0, r3]
 8010ace:	e007      	b.n	8010ae0 <HAL_UART_Receive_IT+0x78>
 8010ad0:	235c      	movs	r3, #92	; 0x5c
 8010ad2:	227f      	movs	r2, #127	; 0x7f
 8010ad4:	52c2      	strh	r2, [r0, r3]
 8010ad6:	e003      	b.n	8010ae0 <HAL_UART_Receive_IT+0x78>
 8010ad8:	2280      	movs	r2, #128	; 0x80
 8010ada:	0552      	lsls	r2, r2, #21
 8010adc:	4293      	cmp	r3, r2
 8010ade:	d01e      	beq.n	8010b1e <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8010ae4:	3369      	adds	r3, #105	; 0x69
 8010ae6:	5cc3      	ldrb	r3, [r0, r3]
 8010ae8:	2b12      	cmp	r3, #18
 8010aea:	d023      	beq.n	8010b34 <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8010aec:	2369      	movs	r3, #105	; 0x69
 8010aee:	2222      	movs	r2, #34	; 0x22
 8010af0:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8010af2:	6802      	ldr	r2, [r0, #0]
 8010af4:	6811      	ldr	r1, [r2, #0]
 8010af6:	2380      	movs	r3, #128	; 0x80
 8010af8:	005b      	lsls	r3, r3, #1
 8010afa:	430b      	orrs	r3, r1
 8010afc:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8010afe:	6802      	ldr	r2, [r0, #0]
 8010b00:	6893      	ldr	r3, [r2, #8]
 8010b02:	2101      	movs	r1, #1
 8010b04:	430b      	orrs	r3, r1
 8010b06:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8010b08:	2368      	movs	r3, #104	; 0x68
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8010b0e:	6802      	ldr	r2, [r0, #0]
 8010b10:	6813      	ldr	r3, [r2, #0]
 8010b12:	311f      	adds	r1, #31
 8010b14:	430b      	orrs	r3, r1
 8010b16:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8010b18:	2300      	movs	r3, #0
  }
}
 8010b1a:	0018      	movs	r0, r3
 8010b1c:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8010b1e:	6903      	ldr	r3, [r0, #16]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d103      	bne.n	8010b2c <HAL_UART_Receive_IT+0xc4>
 8010b24:	335c      	adds	r3, #92	; 0x5c
 8010b26:	227f      	movs	r2, #127	; 0x7f
 8010b28:	52c2      	strh	r2, [r0, r3]
 8010b2a:	e7d9      	b.n	8010ae0 <HAL_UART_Receive_IT+0x78>
 8010b2c:	235c      	movs	r3, #92	; 0x5c
 8010b2e:	223f      	movs	r2, #63	; 0x3f
 8010b30:	52c2      	strh	r2, [r0, r3]
 8010b32:	e7d5      	b.n	8010ae0 <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8010b34:	3357      	adds	r3, #87	; 0x57
 8010b36:	2232      	movs	r2, #50	; 0x32
 8010b38:	54c2      	strb	r2, [r0, r3]
 8010b3a:	e7da      	b.n	8010af2 <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	e7ec      	b.n	8010b1a <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8010b40:	2302      	movs	r3, #2
 8010b42:	e7ea      	b.n	8010b1a <HAL_UART_Receive_IT+0xb2>
 8010b44:	000001ff 	.word	0x000001ff

08010b48 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010b48:	b510      	push	{r4, lr}
 8010b4a:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8010b4c:	2369      	movs	r3, #105	; 0x69
 8010b4e:	5cc3      	ldrb	r3, [r0, r3]
 8010b50:	2b01      	cmp	r3, #1
 8010b52:	d004      	beq.n	8010b5e <HAL_UART_Transmit_DMA+0x16>
 8010b54:	2369      	movs	r3, #105	; 0x69
 8010b56:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8010b58:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8010b5a:	2b22      	cmp	r3, #34	; 0x22
 8010b5c:	d134      	bne.n	8010bc8 <HAL_UART_Transmit_DMA+0x80>
    if((pData == NULL ) || (Size == 0))
 8010b5e:	2900      	cmp	r1, #0
 8010b60:	d037      	beq.n	8010bd2 <HAL_UART_Transmit_DMA+0x8a>
      return HAL_ERROR;
 8010b62:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8010b64:	2a00      	cmp	r2, #0
 8010b66:	d02f      	beq.n	8010bc8 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8010b68:	2368      	movs	r3, #104	; 0x68
 8010b6a:	5ce3      	ldrb	r3, [r4, r3]
 8010b6c:	2b01      	cmp	r3, #1
 8010b6e:	d032      	beq.n	8010bd6 <HAL_UART_Transmit_DMA+0x8e>
 8010b70:	2368      	movs	r3, #104	; 0x68
 8010b72:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr = pData;
 8010b74:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8010b76:	3b18      	subs	r3, #24
 8010b78:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8010b7a:	3302      	adds	r3, #2
 8010b7c:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8010b82:	3369      	adds	r3, #105	; 0x69
 8010b84:	5ce3      	ldrb	r3, [r4, r3]
 8010b86:	2b22      	cmp	r3, #34	; 0x22
 8010b88:	d01f      	beq.n	8010bca <HAL_UART_Transmit_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8010b8a:	2369      	movs	r3, #105	; 0x69
 8010b8c:	2012      	movs	r0, #18
 8010b8e:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010b90:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8010b92:	4812      	ldr	r0, [pc, #72]	; (8010bdc <HAL_UART_Transmit_DMA+0x94>)
 8010b94:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010b96:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8010b98:	4811      	ldr	r0, [pc, #68]	; (8010be0 <HAL_UART_Transmit_DMA+0x98>)
 8010b9a:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010b9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8010b9e:	4811      	ldr	r0, [pc, #68]	; (8010be4 <HAL_UART_Transmit_DMA+0x9c>)
 8010ba0:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8010ba2:	6820      	ldr	r0, [r4, #0]
 8010ba4:	3028      	adds	r0, #40	; 0x28
 8010ba6:	0013      	movs	r3, r2
 8010ba8:	0002      	movs	r2, r0
 8010baa:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8010bac:	f7fe f83e 	bl	800ec2c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010bb0:	6823      	ldr	r3, [r4, #0]
 8010bb2:	2240      	movs	r2, #64	; 0x40
 8010bb4:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8010bb6:	6822      	ldr	r2, [r4, #0]
 8010bb8:	6893      	ldr	r3, [r2, #8]
 8010bba:	2180      	movs	r1, #128	; 0x80
 8010bbc:	430b      	orrs	r3, r1
 8010bbe:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8010bc0:	2368      	movs	r3, #104	; 0x68
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8010bc6:	2000      	movs	r0, #0
  }
}
 8010bc8:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8010bca:	3347      	adds	r3, #71	; 0x47
 8010bcc:	3031      	adds	r0, #49	; 0x31
 8010bce:	54e0      	strb	r0, [r4, r3]
 8010bd0:	e7de      	b.n	8010b90 <HAL_UART_Transmit_DMA+0x48>
      return HAL_ERROR;
 8010bd2:	2001      	movs	r0, #1
 8010bd4:	e7f8      	b.n	8010bc8 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8010bd6:	2002      	movs	r0, #2
 8010bd8:	e7f6      	b.n	8010bc8 <HAL_UART_Transmit_DMA+0x80>
 8010bda:	46c0      	nop			; (mov r8, r8)
 8010bdc:	08010c81 	.word	0x08010c81
 8010be0:	08010cb3 	.word	0x08010cb3
 8010be4:	08010d03 	.word	0x08010d03

08010be8 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010be8:	b510      	push	{r4, lr}
 8010bea:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8010bec:	2069      	movs	r0, #105	; 0x69
 8010bee:	5c20      	ldrb	r0, [r4, r0]
 8010bf0:	2801      	cmp	r0, #1
 8010bf2:	d004      	beq.n	8010bfe <HAL_UART_Receive_DMA+0x16>
 8010bf4:	2369      	movs	r3, #105	; 0x69
 8010bf6:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8010bf8:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8010bfa:	2b12      	cmp	r3, #18
 8010bfc:	d130      	bne.n	8010c60 <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 8010bfe:	2900      	cmp	r1, #0
 8010c00:	d033      	beq.n	8010c6a <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 8010c02:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8010c04:	2a00      	cmp	r2, #0
 8010c06:	d02b      	beq.n	8010c60 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8010c08:	2368      	movs	r3, #104	; 0x68
 8010c0a:	5ce3      	ldrb	r3, [r4, r3]
 8010c0c:	2b01      	cmp	r3, #1
 8010c0e:	d02e      	beq.n	8010c6e <HAL_UART_Receive_DMA+0x86>
 8010c10:	2368      	movs	r3, #104	; 0x68
 8010c12:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 8010c14:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8010c16:	3b10      	subs	r3, #16
 8010c18:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8010c1e:	3369      	adds	r3, #105	; 0x69
 8010c20:	5ce3      	ldrb	r3, [r4, r3]
 8010c22:	2b12      	cmp	r3, #18
 8010c24:	d01d      	beq.n	8010c62 <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8010c26:	2369      	movs	r3, #105	; 0x69
 8010c28:	2022      	movs	r0, #34	; 0x22
 8010c2a:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010c2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c2e:	4811      	ldr	r0, [pc, #68]	; (8010c74 <HAL_UART_Receive_DMA+0x8c>)
 8010c30:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010c32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c34:	4810      	ldr	r0, [pc, #64]	; (8010c78 <HAL_UART_Receive_DMA+0x90>)
 8010c36:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010c38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c3a:	4810      	ldr	r0, [pc, #64]	; (8010c7c <HAL_UART_Receive_DMA+0x94>)
 8010c3c:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8010c3e:	6820      	ldr	r0, [r4, #0]
 8010c40:	3024      	adds	r0, #36	; 0x24
 8010c42:	0013      	movs	r3, r2
 8010c44:	000a      	movs	r2, r1
 8010c46:	0001      	movs	r1, r0
 8010c48:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8010c4a:	f7fd ffef 	bl	800ec2c <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8010c4e:	6822      	ldr	r2, [r4, #0]
 8010c50:	6893      	ldr	r3, [r2, #8]
 8010c52:	2140      	movs	r1, #64	; 0x40
 8010c54:	430b      	orrs	r3, r1
 8010c56:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 8010c58:	2368      	movs	r3, #104	; 0x68
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8010c5e:	2000      	movs	r0, #0
  }
}
 8010c60:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8010c62:	3357      	adds	r3, #87	; 0x57
 8010c64:	3031      	adds	r0, #49	; 0x31
 8010c66:	54e0      	strb	r0, [r4, r3]
 8010c68:	e7e0      	b.n	8010c2c <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 8010c6a:	2001      	movs	r0, #1
 8010c6c:	e7f8      	b.n	8010c60 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8010c6e:	2002      	movs	r0, #2
 8010c70:	e7f6      	b.n	8010c60 <HAL_UART_Receive_DMA+0x78>
 8010c72:	46c0      	nop			; (mov r8, r8)
 8010c74:	08010cbd 	.word	0x08010cbd
 8010c78:	08010cf9 	.word	0x08010cf9
 8010c7c:	08010d03 	.word	0x08010d03

08010c80 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010c80:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010c82:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8010c84:	6802      	ldr	r2, [r0, #0]
 8010c86:	6812      	ldr	r2, [r2, #0]
 8010c88:	0692      	lsls	r2, r2, #26
 8010c8a:	d40d      	bmi.n	8010ca8 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 8010c8c:	2252      	movs	r2, #82	; 0x52
 8010c8e:	2100      	movs	r1, #0
 8010c90:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8010c92:	6819      	ldr	r1, [r3, #0]
 8010c94:	688a      	ldr	r2, [r1, #8]
 8010c96:	2080      	movs	r0, #128	; 0x80
 8010c98:	4382      	bics	r2, r0
 8010c9a:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010c9c:	681a      	ldr	r2, [r3, #0]
 8010c9e:	6813      	ldr	r3, [r2, #0]
 8010ca0:	2140      	movs	r1, #64	; 0x40
 8010ca2:	430b      	orrs	r3, r1
 8010ca4:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8010ca6:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8010ca8:	0018      	movs	r0, r3
 8010caa:	f7fb f84f 	bl	800bd4c <HAL_UART_TxCpltCallback>
}
 8010cae:	e7fa      	b.n	8010ca6 <UART_DMATransmitCplt+0x26>

08010cb0 <HAL_UART_TxHalfCpltCallback>:
}
 8010cb0:	4770      	bx	lr

08010cb2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010cb2:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8010cb4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010cb6:	f7ff fffb 	bl	8010cb0 <HAL_UART_TxHalfCpltCallback>
}
 8010cba:	bd10      	pop	{r4, pc}

08010cbc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010cbc:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010cbe:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8010cc0:	6802      	ldr	r2, [r0, #0]
 8010cc2:	6812      	ldr	r2, [r2, #0]
 8010cc4:	0692      	lsls	r2, r2, #26
 8010cc6:	d40e      	bmi.n	8010ce6 <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8010cc8:	225a      	movs	r2, #90	; 0x5a
 8010cca:	2100      	movs	r1, #0
 8010ccc:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8010cce:	6819      	ldr	r1, [r3, #0]
 8010cd0:	688a      	ldr	r2, [r1, #8]
 8010cd2:	2040      	movs	r0, #64	; 0x40
 8010cd4:	4382      	bics	r2, r0
 8010cd6:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8010cd8:	2269      	movs	r2, #105	; 0x69
 8010cda:	5c9a      	ldrb	r2, [r3, r2]
 8010cdc:	2a32      	cmp	r2, #50	; 0x32
 8010cde:	d006      	beq.n	8010cee <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8010ce0:	2269      	movs	r2, #105	; 0x69
 8010ce2:	2101      	movs	r1, #1
 8010ce4:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8010ce6:	0018      	movs	r0, r3
 8010ce8:	f7fb f86e 	bl	800bdc8 <HAL_UART_RxCpltCallback>
}
 8010cec:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8010cee:	3237      	adds	r2, #55	; 0x37
 8010cf0:	2112      	movs	r1, #18
 8010cf2:	5499      	strb	r1, [r3, r2]
 8010cf4:	e7f7      	b.n	8010ce6 <UART_DMAReceiveCplt+0x2a>

08010cf6 <HAL_UART_RxHalfCpltCallback>:
}
 8010cf6:	4770      	bx	lr

08010cf8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010cf8:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8010cfa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010cfc:	f7ff fffb 	bl	8010cf6 <HAL_UART_RxHalfCpltCallback>
}
 8010d00:	bd10      	pop	{r4, pc}

08010d02 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010d02:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010d04:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8010d06:	2300      	movs	r3, #0
 8010d08:	225a      	movs	r2, #90	; 0x5a
 8010d0a:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8010d0c:	3a08      	subs	r2, #8
 8010d0e:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8010d10:	3369      	adds	r3, #105	; 0x69
 8010d12:	3a51      	subs	r2, #81	; 0x51
 8010d14:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010d16:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8010d18:	320f      	adds	r2, #15
 8010d1a:	4313      	orrs	r3, r2
 8010d1c:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8010d1e:	f7fb f82d 	bl	800bd7c <HAL_UART_ErrorCallback>
}
 8010d22:	bd10      	pop	{r4, pc}

08010d24 <UART_SetConfig>:
{
 8010d24:	b570      	push	{r4, r5, r6, lr}
 8010d26:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8010d28:	6801      	ldr	r1, [r0, #0]
 8010d2a:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010d2c:	6883      	ldr	r3, [r0, #8]
 8010d2e:	6900      	ldr	r0, [r0, #16]
 8010d30:	4303      	orrs	r3, r0
 8010d32:	6960      	ldr	r0, [r4, #20]
 8010d34:	4303      	orrs	r3, r0
 8010d36:	69e0      	ldr	r0, [r4, #28]
 8010d38:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8010d3a:	487e      	ldr	r0, [pc, #504]	; (8010f34 <UART_SetConfig+0x210>)
 8010d3c:	4002      	ands	r2, r0
 8010d3e:	4313      	orrs	r3, r2
 8010d40:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010d42:	6822      	ldr	r2, [r4, #0]
 8010d44:	6853      	ldr	r3, [r2, #4]
 8010d46:	497c      	ldr	r1, [pc, #496]	; (8010f38 <UART_SetConfig+0x214>)
 8010d48:	400b      	ands	r3, r1
 8010d4a:	68e1      	ldr	r1, [r4, #12]
 8010d4c:	430b      	orrs	r3, r1
 8010d4e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8010d50:	6821      	ldr	r1, [r4, #0]
 8010d52:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8010d54:	69a3      	ldr	r3, [r4, #24]
 8010d56:	6a20      	ldr	r0, [r4, #32]
 8010d58:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8010d5a:	4878      	ldr	r0, [pc, #480]	; (8010f3c <UART_SetConfig+0x218>)
 8010d5c:	4002      	ands	r2, r0
 8010d5e:	4313      	orrs	r3, r2
 8010d60:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010d62:	6825      	ldr	r5, [r4, #0]
 8010d64:	4b76      	ldr	r3, [pc, #472]	; (8010f40 <UART_SetConfig+0x21c>)
 8010d66:	429d      	cmp	r5, r3
 8010d68:	d022      	beq.n	8010db0 <UART_SetConfig+0x8c>
 8010d6a:	4b76      	ldr	r3, [pc, #472]	; (8010f44 <UART_SetConfig+0x220>)
 8010d6c:	429d      	cmp	r5, r3
 8010d6e:	d034      	beq.n	8010dda <UART_SetConfig+0xb6>
 8010d70:	4b75      	ldr	r3, [pc, #468]	; (8010f48 <UART_SetConfig+0x224>)
 8010d72:	429d      	cmp	r5, r3
 8010d74:	d100      	bne.n	8010d78 <UART_SetConfig+0x54>
 8010d76:	e06b      	b.n	8010e50 <UART_SetConfig+0x12c>
 8010d78:	4b74      	ldr	r3, [pc, #464]	; (8010f4c <UART_SetConfig+0x228>)
 8010d7a:	429d      	cmp	r5, r3
 8010d7c:	d100      	bne.n	8010d80 <UART_SetConfig+0x5c>
 8010d7e:	e08e      	b.n	8010e9e <UART_SetConfig+0x17a>
 8010d80:	4b73      	ldr	r3, [pc, #460]	; (8010f50 <UART_SetConfig+0x22c>)
 8010d82:	429d      	cmp	r5, r3
 8010d84:	d100      	bne.n	8010d88 <UART_SetConfig+0x64>
 8010d86:	e08a      	b.n	8010e9e <UART_SetConfig+0x17a>
 8010d88:	4b72      	ldr	r3, [pc, #456]	; (8010f54 <UART_SetConfig+0x230>)
 8010d8a:	429d      	cmp	r5, r3
 8010d8c:	d100      	bne.n	8010d90 <UART_SetConfig+0x6c>
 8010d8e:	e086      	b.n	8010e9e <UART_SetConfig+0x17a>
 8010d90:	4b71      	ldr	r3, [pc, #452]	; (8010f58 <UART_SetConfig+0x234>)
 8010d92:	429d      	cmp	r5, r3
 8010d94:	d100      	bne.n	8010d98 <UART_SetConfig+0x74>
 8010d96:	e082      	b.n	8010e9e <UART_SetConfig+0x17a>
 8010d98:	4b70      	ldr	r3, [pc, #448]	; (8010f5c <UART_SetConfig+0x238>)
 8010d9a:	429d      	cmp	r5, r3
 8010d9c:	d100      	bne.n	8010da0 <UART_SetConfig+0x7c>
 8010d9e:	e07e      	b.n	8010e9e <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010da0:	2380      	movs	r3, #128	; 0x80
 8010da2:	021b      	lsls	r3, r3, #8
 8010da4:	69e2      	ldr	r2, [r4, #28]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d100      	bne.n	8010dac <UART_SetConfig+0x88>
 8010daa:	e072      	b.n	8010e92 <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 8010dac:	2001      	movs	r0, #1
 8010dae:	e04e      	b.n	8010e4e <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010db0:	4b6b      	ldr	r3, [pc, #428]	; (8010f60 <UART_SetConfig+0x23c>)
 8010db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010db4:	2303      	movs	r3, #3
 8010db6:	4013      	ands	r3, r2
 8010db8:	2b01      	cmp	r3, #1
 8010dba:	d100      	bne.n	8010dbe <UART_SetConfig+0x9a>
 8010dbc:	e09a      	b.n	8010ef4 <UART_SetConfig+0x1d0>
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d02f      	beq.n	8010e22 <UART_SetConfig+0xfe>
 8010dc2:	2b02      	cmp	r3, #2
 8010dc4:	d100      	bne.n	8010dc8 <UART_SetConfig+0xa4>
 8010dc6:	e0a5      	b.n	8010f14 <UART_SetConfig+0x1f0>
 8010dc8:	2b03      	cmp	r3, #3
 8010dca:	d01a      	beq.n	8010e02 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010dcc:	2380      	movs	r3, #128	; 0x80
 8010dce:	021b      	lsls	r3, r3, #8
 8010dd0:	69e2      	ldr	r2, [r4, #28]
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d060      	beq.n	8010e98 <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 8010dd6:	2001      	movs	r0, #1
 8010dd8:	e039      	b.n	8010e4e <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010dda:	4b61      	ldr	r3, [pc, #388]	; (8010f60 <UART_SetConfig+0x23c>)
 8010ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dde:	22c0      	movs	r2, #192	; 0xc0
 8010de0:	0292      	lsls	r2, r2, #10
 8010de2:	4013      	ands	r3, r2
 8010de4:	2280      	movs	r2, #128	; 0x80
 8010de6:	0252      	lsls	r2, r2, #9
 8010de8:	4293      	cmp	r3, r2
 8010dea:	d100      	bne.n	8010dee <UART_SetConfig+0xca>
 8010dec:	e082      	b.n	8010ef4 <UART_SetConfig+0x1d0>
 8010dee:	d916      	bls.n	8010e1e <UART_SetConfig+0xfa>
 8010df0:	2280      	movs	r2, #128	; 0x80
 8010df2:	0292      	lsls	r2, r2, #10
 8010df4:	4293      	cmp	r3, r2
 8010df6:	d100      	bne.n	8010dfa <UART_SetConfig+0xd6>
 8010df8:	e08c      	b.n	8010f14 <UART_SetConfig+0x1f0>
 8010dfa:	22c0      	movs	r2, #192	; 0xc0
 8010dfc:	0292      	lsls	r2, r2, #10
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d1e4      	bne.n	8010dcc <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010e02:	2380      	movs	r3, #128	; 0x80
 8010e04:	021b      	lsls	r3, r3, #8
 8010e06:	69e2      	ldr	r2, [r4, #28]
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d038      	beq.n	8010e7e <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8010e0c:	6861      	ldr	r1, [r4, #4]
 8010e0e:	4855      	ldr	r0, [pc, #340]	; (8010f64 <UART_SetConfig+0x240>)
 8010e10:	f7ef f99e 	bl	8000150 <__udivsi3>
 8010e14:	0400      	lsls	r0, r0, #16
 8010e16:	0c00      	lsrs	r0, r0, #16
 8010e18:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8010e1a:	2000      	movs	r0, #0
        break;
 8010e1c:	e017      	b.n	8010e4e <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d1d4      	bne.n	8010dcc <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010e22:	2380      	movs	r3, #128	; 0x80
 8010e24:	021b      	lsls	r3, r3, #8
 8010e26:	69e2      	ldr	r2, [r4, #28]
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	d13d      	bne.n	8010ea8 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8010e2c:	f7ff fa5c 	bl	80102e8 <HAL_RCC_GetPCLK1Freq>
 8010e30:	0040      	lsls	r0, r0, #1
 8010e32:	6861      	ldr	r1, [r4, #4]
 8010e34:	f7ef f98c 	bl	8000150 <__udivsi3>
 8010e38:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8010e3a:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 8010e3c:	220f      	movs	r2, #15
 8010e3e:	0019      	movs	r1, r3
 8010e40:	4391      	bics	r1, r2
 8010e42:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 8010e44:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8010e46:	071b      	lsls	r3, r3, #28
 8010e48:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8010e4a:	4313      	orrs	r3, r2
 8010e4c:	60cb      	str	r3, [r1, #12]
}
 8010e4e:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010e50:	4b43      	ldr	r3, [pc, #268]	; (8010f60 <UART_SetConfig+0x23c>)
 8010e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e54:	22c0      	movs	r2, #192	; 0xc0
 8010e56:	0312      	lsls	r2, r2, #12
 8010e58:	4013      	ands	r3, r2
 8010e5a:	2280      	movs	r2, #128	; 0x80
 8010e5c:	02d2      	lsls	r2, r2, #11
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d02d      	beq.n	8010ebe <UART_SetConfig+0x19a>
 8010e62:	d913      	bls.n	8010e8c <UART_SetConfig+0x168>
 8010e64:	2280      	movs	r2, #128	; 0x80
 8010e66:	0312      	lsls	r2, r2, #12
 8010e68:	4293      	cmp	r3, r2
 8010e6a:	d036      	beq.n	8010eda <UART_SetConfig+0x1b6>
 8010e6c:	22c0      	movs	r2, #192	; 0xc0
 8010e6e:	0312      	lsls	r2, r2, #12
 8010e70:	4293      	cmp	r3, r2
 8010e72:	d1ab      	bne.n	8010dcc <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010e74:	2380      	movs	r3, #128	; 0x80
 8010e76:	021b      	lsls	r3, r3, #8
 8010e78:	69e2      	ldr	r2, [r4, #28]
 8010e7a:	429a      	cmp	r2, r3
 8010e7c:	d1c6      	bne.n	8010e0c <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8010e7e:	6861      	ldr	r1, [r4, #4]
 8010e80:	4839      	ldr	r0, [pc, #228]	; (8010f68 <UART_SetConfig+0x244>)
 8010e82:	f7ef f965 	bl	8000150 <__udivsi3>
 8010e86:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8010e88:	2000      	movs	r0, #0
        break;
 8010e8a:	e7d7      	b.n	8010e3c <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d0c8      	beq.n	8010e22 <UART_SetConfig+0xfe>
 8010e90:	e79c      	b.n	8010dcc <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 8010e92:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8010e94:	2300      	movs	r3, #0
 8010e96:	e7d1      	b.n	8010e3c <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 8010e98:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	e7ce      	b.n	8010e3c <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010e9e:	2380      	movs	r3, #128	; 0x80
 8010ea0:	021b      	lsls	r3, r3, #8
 8010ea2:	69e2      	ldr	r2, [r4, #28]
 8010ea4:	429a      	cmp	r2, r3
 8010ea6:	d0c1      	beq.n	8010e2c <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8010ea8:	f7ff fa1e 	bl	80102e8 <HAL_RCC_GetPCLK1Freq>
 8010eac:	6825      	ldr	r5, [r4, #0]
 8010eae:	6861      	ldr	r1, [r4, #4]
 8010eb0:	f7ef f94e 	bl	8000150 <__udivsi3>
 8010eb4:	0400      	lsls	r0, r0, #16
 8010eb6:	0c00      	lsrs	r0, r0, #16
 8010eb8:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8010eba:	2000      	movs	r0, #0
  return ret;
 8010ebc:	e7c7      	b.n	8010e4e <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010ebe:	2380      	movs	r3, #128	; 0x80
 8010ec0:	021b      	lsls	r3, r3, #8
 8010ec2:	69e2      	ldr	r2, [r4, #28]
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	d11a      	bne.n	8010efe <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8010ec8:	f7ff f9aa 	bl	8010220 <HAL_RCC_GetSysClockFreq>
 8010ecc:	0040      	lsls	r0, r0, #1
 8010ece:	6861      	ldr	r1, [r4, #4]
 8010ed0:	f7ef f93e 	bl	8000150 <__udivsi3>
 8010ed4:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8010ed6:	2000      	movs	r0, #0
        break;
 8010ed8:	e7b0      	b.n	8010e3c <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010eda:	2380      	movs	r3, #128	; 0x80
 8010edc:	021b      	lsls	r3, r3, #8
 8010ede:	69e2      	ldr	r2, [r4, #28]
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d11c      	bne.n	8010f1e <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8010ee4:	6861      	ldr	r1, [r4, #4]
 8010ee6:	2080      	movs	r0, #128	; 0x80
 8010ee8:	0240      	lsls	r0, r0, #9
 8010eea:	f7ef f931 	bl	8000150 <__udivsi3>
 8010eee:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8010ef0:	2000      	movs	r0, #0
        break;
 8010ef2:	e7a3      	b.n	8010e3c <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010ef4:	2380      	movs	r3, #128	; 0x80
 8010ef6:	021b      	lsls	r3, r3, #8
 8010ef8:	69e2      	ldr	r2, [r4, #28]
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d0e4      	beq.n	8010ec8 <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8010efe:	f7ff f98f 	bl	8010220 <HAL_RCC_GetSysClockFreq>
 8010f02:	6825      	ldr	r5, [r4, #0]
 8010f04:	6861      	ldr	r1, [r4, #4]
 8010f06:	f7ef f923 	bl	8000150 <__udivsi3>
 8010f0a:	0400      	lsls	r0, r0, #16
 8010f0c:	0c00      	lsrs	r0, r0, #16
 8010f0e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8010f10:	2000      	movs	r0, #0
        break;
 8010f12:	e79c      	b.n	8010e4e <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010f14:	2380      	movs	r3, #128	; 0x80
 8010f16:	021b      	lsls	r3, r3, #8
 8010f18:	69e2      	ldr	r2, [r4, #28]
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d0e2      	beq.n	8010ee4 <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8010f1e:	6861      	ldr	r1, [r4, #4]
 8010f20:	2080      	movs	r0, #128	; 0x80
 8010f22:	0200      	lsls	r0, r0, #8
 8010f24:	f7ef f914 	bl	8000150 <__udivsi3>
 8010f28:	0400      	lsls	r0, r0, #16
 8010f2a:	0c00      	lsrs	r0, r0, #16
 8010f2c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8010f2e:	2000      	movs	r0, #0
        break;
 8010f30:	e78d      	b.n	8010e4e <UART_SetConfig+0x12a>
 8010f32:	46c0      	nop			; (mov r8, r8)
 8010f34:	efff69f3 	.word	0xefff69f3
 8010f38:	ffffcfff 	.word	0xffffcfff
 8010f3c:	fffff4ff 	.word	0xfffff4ff
 8010f40:	40013800 	.word	0x40013800
 8010f44:	40004400 	.word	0x40004400
 8010f48:	40004800 	.word	0x40004800
 8010f4c:	40004c00 	.word	0x40004c00
 8010f50:	40005000 	.word	0x40005000
 8010f54:	40011400 	.word	0x40011400
 8010f58:	40011800 	.word	0x40011800
 8010f5c:	40011c00 	.word	0x40011c00
 8010f60:	40021000 	.word	0x40021000
 8010f64:	007a1200 	.word	0x007a1200
 8010f68:	00f42400 	.word	0x00f42400

08010f6c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010f6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010f6e:	07db      	lsls	r3, r3, #31
 8010f70:	d506      	bpl.n	8010f80 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010f72:	6802      	ldr	r2, [r0, #0]
 8010f74:	6853      	ldr	r3, [r2, #4]
 8010f76:	492c      	ldr	r1, [pc, #176]	; (8011028 <UART_AdvFeatureConfig+0xbc>)
 8010f78:	400b      	ands	r3, r1
 8010f7a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8010f7c:	430b      	orrs	r3, r1
 8010f7e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010f80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010f82:	079b      	lsls	r3, r3, #30
 8010f84:	d506      	bpl.n	8010f94 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010f86:	6802      	ldr	r2, [r0, #0]
 8010f88:	6853      	ldr	r3, [r2, #4]
 8010f8a:	4928      	ldr	r1, [pc, #160]	; (801102c <UART_AdvFeatureConfig+0xc0>)
 8010f8c:	400b      	ands	r3, r1
 8010f8e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8010f90:	430b      	orrs	r3, r1
 8010f92:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010f94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010f96:	075b      	lsls	r3, r3, #29
 8010f98:	d506      	bpl.n	8010fa8 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010f9a:	6802      	ldr	r2, [r0, #0]
 8010f9c:	6853      	ldr	r3, [r2, #4]
 8010f9e:	4924      	ldr	r1, [pc, #144]	; (8011030 <UART_AdvFeatureConfig+0xc4>)
 8010fa0:	400b      	ands	r3, r1
 8010fa2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8010fa4:	430b      	orrs	r3, r1
 8010fa6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010fa8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010faa:	071b      	lsls	r3, r3, #28
 8010fac:	d506      	bpl.n	8010fbc <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010fae:	6802      	ldr	r2, [r0, #0]
 8010fb0:	6853      	ldr	r3, [r2, #4]
 8010fb2:	4920      	ldr	r1, [pc, #128]	; (8011034 <UART_AdvFeatureConfig+0xc8>)
 8010fb4:	400b      	ands	r3, r1
 8010fb6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8010fb8:	430b      	orrs	r3, r1
 8010fba:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010fbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010fbe:	06db      	lsls	r3, r3, #27
 8010fc0:	d506      	bpl.n	8010fd0 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010fc2:	6802      	ldr	r2, [r0, #0]
 8010fc4:	6893      	ldr	r3, [r2, #8]
 8010fc6:	491c      	ldr	r1, [pc, #112]	; (8011038 <UART_AdvFeatureConfig+0xcc>)
 8010fc8:	400b      	ands	r3, r1
 8010fca:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8010fcc:	430b      	orrs	r3, r1
 8010fce:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010fd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010fd2:	069b      	lsls	r3, r3, #26
 8010fd4:	d506      	bpl.n	8010fe4 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010fd6:	6802      	ldr	r2, [r0, #0]
 8010fd8:	6893      	ldr	r3, [r2, #8]
 8010fda:	4918      	ldr	r1, [pc, #96]	; (801103c <UART_AdvFeatureConfig+0xd0>)
 8010fdc:	400b      	ands	r3, r1
 8010fde:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8010fe0:	430b      	orrs	r3, r1
 8010fe2:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010fe4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010fe6:	065b      	lsls	r3, r3, #25
 8010fe8:	d50b      	bpl.n	8011002 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010fea:	6802      	ldr	r2, [r0, #0]
 8010fec:	6853      	ldr	r3, [r2, #4]
 8010fee:	4914      	ldr	r1, [pc, #80]	; (8011040 <UART_AdvFeatureConfig+0xd4>)
 8010ff0:	400b      	ands	r3, r1
 8010ff2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8010ff4:	430b      	orrs	r3, r1
 8010ff6:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010ff8:	2380      	movs	r3, #128	; 0x80
 8010ffa:	035b      	lsls	r3, r3, #13
 8010ffc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d00a      	beq.n	8011018 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011002:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011004:	061b      	lsls	r3, r3, #24
 8011006:	d506      	bpl.n	8011016 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011008:	6802      	ldr	r2, [r0, #0]
 801100a:	6853      	ldr	r3, [r2, #4]
 801100c:	490d      	ldr	r1, [pc, #52]	; (8011044 <UART_AdvFeatureConfig+0xd8>)
 801100e:	400b      	ands	r3, r1
 8011010:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8011012:	430b      	orrs	r3, r1
 8011014:	6053      	str	r3, [r2, #4]
}
 8011016:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011018:	6802      	ldr	r2, [r0, #0]
 801101a:	6853      	ldr	r3, [r2, #4]
 801101c:	490a      	ldr	r1, [pc, #40]	; (8011048 <UART_AdvFeatureConfig+0xdc>)
 801101e:	400b      	ands	r3, r1
 8011020:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8011022:	430b      	orrs	r3, r1
 8011024:	6053      	str	r3, [r2, #4]
 8011026:	e7ec      	b.n	8011002 <UART_AdvFeatureConfig+0x96>
 8011028:	fffdffff 	.word	0xfffdffff
 801102c:	fffeffff 	.word	0xfffeffff
 8011030:	fffbffff 	.word	0xfffbffff
 8011034:	ffff7fff 	.word	0xffff7fff
 8011038:	ffffefff 	.word	0xffffefff
 801103c:	ffffdfff 	.word	0xffffdfff
 8011040:	ffefffff 	.word	0xffefffff
 8011044:	fff7ffff 	.word	0xfff7ffff
 8011048:	ff9fffff 	.word	0xff9fffff

0801104c <UART_WaitOnFlagUntilTimeout>:
{
 801104c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801104e:	46c6      	mov	lr, r8
 8011050:	b500      	push	{lr}
 8011052:	0006      	movs	r6, r0
 8011054:	000c      	movs	r4, r1
 8011056:	0017      	movs	r7, r2
 8011058:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 801105a:	f7fd fbfd 	bl	800e858 <HAL_GetTick>
 801105e:	4680      	mov	r8, r0
  if(Status == RESET)
 8011060:	2f00      	cmp	r7, #0
 8011062:	d029      	beq.n	80110b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8011064:	6832      	ldr	r2, [r6, #0]
 8011066:	69d3      	ldr	r3, [r2, #28]
 8011068:	4023      	ands	r3, r4
 801106a:	42a3      	cmp	r3, r4
 801106c:	d152      	bne.n	8011114 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 801106e:	1c6b      	adds	r3, r5, #1
 8011070:	d0f9      	beq.n	8011066 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011072:	2d00      	cmp	r5, #0
 8011074:	d005      	beq.n	8011082 <UART_WaitOnFlagUntilTimeout+0x36>
 8011076:	f7fd fbef 	bl	800e858 <HAL_GetTick>
 801107a:	4643      	mov	r3, r8
 801107c:	1ac0      	subs	r0, r0, r3
 801107e:	42a8      	cmp	r0, r5
 8011080:	d9f0      	bls.n	8011064 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011082:	6832      	ldr	r2, [r6, #0]
 8011084:	6813      	ldr	r3, [r2, #0]
 8011086:	2180      	movs	r1, #128	; 0x80
 8011088:	438b      	bics	r3, r1
 801108a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801108c:	6832      	ldr	r2, [r6, #0]
 801108e:	6813      	ldr	r3, [r2, #0]
 8011090:	3960      	subs	r1, #96	; 0x60
 8011092:	438b      	bics	r3, r1
 8011094:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011096:	6832      	ldr	r2, [r6, #0]
 8011098:	6813      	ldr	r3, [r2, #0]
 801109a:	491f      	ldr	r1, [pc, #124]	; (8011118 <UART_WaitOnFlagUntilTimeout+0xcc>)
 801109c:	400b      	ands	r3, r1
 801109e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80110a0:	6831      	ldr	r1, [r6, #0]
 80110a2:	688b      	ldr	r3, [r1, #8]
 80110a4:	2201      	movs	r2, #1
 80110a6:	4393      	bics	r3, r2
 80110a8:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 80110aa:	2369      	movs	r3, #105	; 0x69
 80110ac:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 80110ae:	3b01      	subs	r3, #1
 80110b0:	2200      	movs	r2, #0
 80110b2:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80110b4:	2003      	movs	r0, #3
 80110b6:	e02a      	b.n	801110e <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80110b8:	6832      	ldr	r2, [r6, #0]
 80110ba:	69d3      	ldr	r3, [r2, #28]
 80110bc:	4023      	ands	r3, r4
 80110be:	42a3      	cmp	r3, r4
 80110c0:	d024      	beq.n	801110c <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 80110c2:	1c6b      	adds	r3, r5, #1
 80110c4:	d0f9      	beq.n	80110ba <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80110c6:	2d00      	cmp	r5, #0
 80110c8:	d005      	beq.n	80110d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80110ca:	f7fd fbc5 	bl	800e858 <HAL_GetTick>
 80110ce:	4643      	mov	r3, r8
 80110d0:	1ac0      	subs	r0, r0, r3
 80110d2:	42a8      	cmp	r0, r5
 80110d4:	d9f0      	bls.n	80110b8 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80110d6:	6832      	ldr	r2, [r6, #0]
 80110d8:	6813      	ldr	r3, [r2, #0]
 80110da:	2180      	movs	r1, #128	; 0x80
 80110dc:	438b      	bics	r3, r1
 80110de:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80110e0:	6832      	ldr	r2, [r6, #0]
 80110e2:	6813      	ldr	r3, [r2, #0]
 80110e4:	3960      	subs	r1, #96	; 0x60
 80110e6:	438b      	bics	r3, r1
 80110e8:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80110ea:	6832      	ldr	r2, [r6, #0]
 80110ec:	6813      	ldr	r3, [r2, #0]
 80110ee:	490a      	ldr	r1, [pc, #40]	; (8011118 <UART_WaitOnFlagUntilTimeout+0xcc>)
 80110f0:	400b      	ands	r3, r1
 80110f2:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80110f4:	6831      	ldr	r1, [r6, #0]
 80110f6:	688b      	ldr	r3, [r1, #8]
 80110f8:	2201      	movs	r2, #1
 80110fa:	4393      	bics	r3, r2
 80110fc:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 80110fe:	2369      	movs	r3, #105	; 0x69
 8011100:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8011102:	3b01      	subs	r3, #1
 8011104:	2200      	movs	r2, #0
 8011106:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8011108:	2003      	movs	r0, #3
 801110a:	e000      	b.n	801110e <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 801110c:	2000      	movs	r0, #0
}
 801110e:	bc04      	pop	{r2}
 8011110:	4690      	mov	r8, r2
 8011112:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8011114:	2000      	movs	r0, #0
 8011116:	e7fa      	b.n	801110e <UART_WaitOnFlagUntilTimeout+0xc2>
 8011118:	fffffeff 	.word	0xfffffeff

0801111c <HAL_UART_Transmit>:
{
 801111c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801111e:	b083      	sub	sp, #12
 8011120:	0004      	movs	r4, r0
 8011122:	000e      	movs	r6, r1
 8011124:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011126:	2369      	movs	r3, #105	; 0x69
 8011128:	5cc3      	ldrb	r3, [r0, r3]
 801112a:	2b01      	cmp	r3, #1
 801112c:	d004      	beq.n	8011138 <HAL_UART_Transmit+0x1c>
 801112e:	2369      	movs	r3, #105	; 0x69
 8011130:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 8011132:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8011134:	2b22      	cmp	r3, #34	; 0x22
 8011136:	d153      	bne.n	80111e0 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 8011138:	2e00      	cmp	r6, #0
 801113a:	d050      	beq.n	80111de <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 801113c:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 801113e:	2a00      	cmp	r2, #0
 8011140:	d04e      	beq.n	80111e0 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8011142:	2368      	movs	r3, #104	; 0x68
 8011144:	5ce3      	ldrb	r3, [r4, r3]
 8011146:	2b01      	cmp	r3, #1
 8011148:	d04c      	beq.n	80111e4 <HAL_UART_Transmit+0xc8>
 801114a:	2368      	movs	r3, #104	; 0x68
 801114c:	2101      	movs	r1, #1
 801114e:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011150:	2300      	movs	r3, #0
 8011152:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8011154:	3369      	adds	r3, #105	; 0x69
 8011156:	5ce3      	ldrb	r3, [r4, r3]
 8011158:	2b22      	cmp	r3, #34	; 0x22
 801115a:	d008      	beq.n	801116e <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 801115c:	2369      	movs	r3, #105	; 0x69
 801115e:	2112      	movs	r1, #18
 8011160:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8011162:	2350      	movs	r3, #80	; 0x50
 8011164:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 8011166:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011168:	2580      	movs	r5, #128	; 0x80
 801116a:	016d      	lsls	r5, r5, #5
 801116c:	e00a      	b.n	8011184 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801116e:	3347      	adds	r3, #71	; 0x47
 8011170:	3131      	adds	r1, #49	; 0x31
 8011172:	54e1      	strb	r1, [r4, r3]
 8011174:	e7f5      	b.n	8011162 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8011176:	7833      	ldrb	r3, [r6, #0]
 8011178:	6822      	ldr	r2, [r4, #0]
 801117a:	8513      	strh	r3, [r2, #40]	; 0x28
 801117c:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 801117e:	5be2      	ldrh	r2, [r4, r7]
 8011180:	2a00      	cmp	r2, #0
 8011182:	d016      	beq.n	80111b2 <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8011184:	3a01      	subs	r2, #1
 8011186:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8011188:	9b01      	ldr	r3, [sp, #4]
 801118a:	2200      	movs	r2, #0
 801118c:	2180      	movs	r1, #128	; 0x80
 801118e:	0020      	movs	r0, r4
 8011190:	f7ff ff5c 	bl	801104c <UART_WaitOnFlagUntilTimeout>
 8011194:	2800      	cmp	r0, #0
 8011196:	d127      	bne.n	80111e8 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011198:	68a3      	ldr	r3, [r4, #8]
 801119a:	42ab      	cmp	r3, r5
 801119c:	d1eb      	bne.n	8011176 <HAL_UART_Transmit+0x5a>
 801119e:	6923      	ldr	r3, [r4, #16]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d1e8      	bne.n	8011176 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80111a4:	8833      	ldrh	r3, [r6, #0]
 80111a6:	05db      	lsls	r3, r3, #23
 80111a8:	0ddb      	lsrs	r3, r3, #23
 80111aa:	6822      	ldr	r2, [r4, #0]
 80111ac:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80111ae:	3602      	adds	r6, #2
 80111b0:	e7e5      	b.n	801117e <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80111b2:	9b01      	ldr	r3, [sp, #4]
 80111b4:	2140      	movs	r1, #64	; 0x40
 80111b6:	0020      	movs	r0, r4
 80111b8:	f7ff ff48 	bl	801104c <UART_WaitOnFlagUntilTimeout>
 80111bc:	2800      	cmp	r0, #0
 80111be:	d115      	bne.n	80111ec <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80111c0:	2369      	movs	r3, #105	; 0x69
 80111c2:	5ce3      	ldrb	r3, [r4, r3]
 80111c4:	2b32      	cmp	r3, #50	; 0x32
 80111c6:	d006      	beq.n	80111d6 <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 80111c8:	2369      	movs	r3, #105	; 0x69
 80111ca:	2201      	movs	r2, #1
 80111cc:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 80111ce:	2368      	movs	r3, #104	; 0x68
 80111d0:	2200      	movs	r2, #0
 80111d2:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80111d4:	e004      	b.n	80111e0 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80111d6:	3337      	adds	r3, #55	; 0x37
 80111d8:	2222      	movs	r2, #34	; 0x22
 80111da:	54e2      	strb	r2, [r4, r3]
 80111dc:	e7f7      	b.n	80111ce <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 80111de:	2001      	movs	r0, #1
}
 80111e0:	b003      	add	sp, #12
 80111e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 80111e4:	2002      	movs	r0, #2
 80111e6:	e7fb      	b.n	80111e0 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 80111e8:	2003      	movs	r0, #3
 80111ea:	e7f9      	b.n	80111e0 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 80111ec:	2003      	movs	r0, #3
 80111ee:	e7f7      	b.n	80111e0 <HAL_UART_Transmit+0xc4>

080111f0 <UART_CheckIdleState>:
{
 80111f0:	b510      	push	{r4, lr}
 80111f2:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80111f4:	2300      	movs	r3, #0
 80111f6:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80111f8:	6803      	ldr	r3, [r0, #0]
 80111fa:	4a18      	ldr	r2, [pc, #96]	; (801125c <UART_CheckIdleState+0x6c>)
 80111fc:	4293      	cmp	r3, r2
 80111fe:	d005      	beq.n	801120c <UART_CheckIdleState+0x1c>
 8011200:	4a17      	ldr	r2, [pc, #92]	; (8011260 <UART_CheckIdleState+0x70>)
 8011202:	4293      	cmp	r3, r2
 8011204:	d002      	beq.n	801120c <UART_CheckIdleState+0x1c>
 8011206:	4a17      	ldr	r2, [pc, #92]	; (8011264 <UART_CheckIdleState+0x74>)
 8011208:	4293      	cmp	r3, r2
 801120a:	d106      	bne.n	801121a <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	071b      	lsls	r3, r3, #28
 8011210:	d40b      	bmi.n	801122a <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011212:	6823      	ldr	r3, [r4, #0]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	075b      	lsls	r3, r3, #29
 8011218:	d413      	bmi.n	8011242 <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 801121a:	2369      	movs	r3, #105	; 0x69
 801121c:	2201      	movs	r2, #1
 801121e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8011220:	3b01      	subs	r3, #1
 8011222:	2200      	movs	r2, #0
 8011224:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8011226:	2000      	movs	r0, #0
}
 8011228:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801122a:	23fa      	movs	r3, #250	; 0xfa
 801122c:	2180      	movs	r1, #128	; 0x80
 801122e:	009b      	lsls	r3, r3, #2
 8011230:	2200      	movs	r2, #0
 8011232:	0389      	lsls	r1, r1, #14
 8011234:	0020      	movs	r0, r4
 8011236:	f7ff ff09 	bl	801104c <UART_WaitOnFlagUntilTimeout>
 801123a:	2800      	cmp	r0, #0
 801123c:	d0e9      	beq.n	8011212 <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 801123e:	2003      	movs	r0, #3
 8011240:	e7f2      	b.n	8011228 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8011242:	23fa      	movs	r3, #250	; 0xfa
 8011244:	2180      	movs	r1, #128	; 0x80
 8011246:	009b      	lsls	r3, r3, #2
 8011248:	2200      	movs	r2, #0
 801124a:	03c9      	lsls	r1, r1, #15
 801124c:	0020      	movs	r0, r4
 801124e:	f7ff fefd 	bl	801104c <UART_WaitOnFlagUntilTimeout>
 8011252:	2800      	cmp	r0, #0
 8011254:	d0e1      	beq.n	801121a <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8011256:	2003      	movs	r0, #3
 8011258:	e7e6      	b.n	8011228 <UART_CheckIdleState+0x38>
 801125a:	46c0      	nop			; (mov r8, r8)
 801125c:	40013800 	.word	0x40013800
 8011260:	40004400 	.word	0x40004400
 8011264:	40004800 	.word	0x40004800

08011268 <HAL_UART_Init>:
{
 8011268:	b510      	push	{r4, lr}
 801126a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 801126c:	d030      	beq.n	80112d0 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 801126e:	2369      	movs	r3, #105	; 0x69
 8011270:	5cc3      	ldrb	r3, [r0, r3]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d022      	beq.n	80112bc <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8011276:	2369      	movs	r3, #105	; 0x69
 8011278:	2202      	movs	r2, #2
 801127a:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 801127c:	6822      	ldr	r2, [r4, #0]
 801127e:	6813      	ldr	r3, [r2, #0]
 8011280:	2101      	movs	r1, #1
 8011282:	438b      	bics	r3, r1
 8011284:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011286:	0020      	movs	r0, r4
 8011288:	f7ff fd4c 	bl	8010d24 <UART_SetConfig>
 801128c:	2801      	cmp	r0, #1
 801128e:	d014      	beq.n	80112ba <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011292:	2b00      	cmp	r3, #0
 8011294:	d118      	bne.n	80112c8 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8011296:	6822      	ldr	r2, [r4, #0]
 8011298:	6853      	ldr	r3, [r2, #4]
 801129a:	490e      	ldr	r1, [pc, #56]	; (80112d4 <HAL_UART_Init+0x6c>)
 801129c:	400b      	ands	r3, r1
 801129e:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80112a0:	6822      	ldr	r2, [r4, #0]
 80112a2:	6893      	ldr	r3, [r2, #8]
 80112a4:	212a      	movs	r1, #42	; 0x2a
 80112a6:	438b      	bics	r3, r1
 80112a8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80112aa:	6822      	ldr	r2, [r4, #0]
 80112ac:	6813      	ldr	r3, [r2, #0]
 80112ae:	3929      	subs	r1, #41	; 0x29
 80112b0:	430b      	orrs	r3, r1
 80112b2:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80112b4:	0020      	movs	r0, r4
 80112b6:	f7ff ff9b 	bl	80111f0 <UART_CheckIdleState>
}
 80112ba:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80112bc:	3368      	adds	r3, #104	; 0x68
 80112be:	2200      	movs	r2, #0
 80112c0:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80112c2:	f7fb f81d 	bl	800c300 <HAL_UART_MspInit>
 80112c6:	e7d6      	b.n	8011276 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80112c8:	0020      	movs	r0, r4
 80112ca:	f7ff fe4f 	bl	8010f6c <UART_AdvFeatureConfig>
 80112ce:	e7e2      	b.n	8011296 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 80112d0:	2001      	movs	r0, #1
 80112d2:	e7f2      	b.n	80112ba <HAL_UART_Init+0x52>
 80112d4:	ffffb7ff 	.word	0xffffb7ff

080112d8 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80112d8:	2369      	movs	r3, #105	; 0x69
 80112da:	5cc3      	ldrb	r3, [r0, r3]
 80112dc:	2b12      	cmp	r3, #18
 80112de:	d004      	beq.n	80112ea <UART_Transmit_IT+0x12>
 80112e0:	2369      	movs	r3, #105	; 0x69
 80112e2:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80112e4:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80112e6:	2a32      	cmp	r2, #50	; 0x32
 80112e8:	d113      	bne.n	8011312 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 80112ea:	2352      	movs	r3, #82	; 0x52
 80112ec:	5ac3      	ldrh	r3, [r0, r3]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d011      	beq.n	8011316 <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80112f2:	2380      	movs	r3, #128	; 0x80
 80112f4:	015b      	lsls	r3, r3, #5
 80112f6:	6882      	ldr	r2, [r0, #8]
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d018      	beq.n	801132e <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 80112fc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80112fe:	1c5a      	adds	r2, r3, #1
 8011300:	64c2      	str	r2, [r0, #76]	; 0x4c
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	6802      	ldr	r2, [r0, #0]
 8011306:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8011308:	2252      	movs	r2, #82	; 0x52
 801130a:	5a83      	ldrh	r3, [r0, r2]
 801130c:	3b01      	subs	r3, #1
 801130e:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8011310:	2300      	movs	r3, #0
  }
}
 8011312:	0018      	movs	r0, r3
 8011314:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011316:	6802      	ldr	r2, [r0, #0]
 8011318:	6813      	ldr	r3, [r2, #0]
 801131a:	2180      	movs	r1, #128	; 0x80
 801131c:	438b      	bics	r3, r1
 801131e:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011320:	6802      	ldr	r2, [r0, #0]
 8011322:	6813      	ldr	r3, [r2, #0]
 8011324:	3940      	subs	r1, #64	; 0x40
 8011326:	430b      	orrs	r3, r1
 8011328:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 801132a:	2300      	movs	r3, #0
 801132c:	e7f1      	b.n	8011312 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801132e:	6903      	ldr	r3, [r0, #16]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d1e3      	bne.n	80112fc <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8011334:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8011336:	881b      	ldrh	r3, [r3, #0]
 8011338:	05db      	lsls	r3, r3, #23
 801133a:	0ddb      	lsrs	r3, r3, #23
 801133c:	6802      	ldr	r2, [r0, #0]
 801133e:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8011340:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8011342:	3302      	adds	r3, #2
 8011344:	64c3      	str	r3, [r0, #76]	; 0x4c
 8011346:	e7df      	b.n	8011308 <UART_Transmit_IT+0x30>

08011348 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011348:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801134a:	6802      	ldr	r2, [r0, #0]
 801134c:	6813      	ldr	r3, [r2, #0]
 801134e:	2140      	movs	r1, #64	; 0x40
 8011350:	438b      	bics	r3, r1
 8011352:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8011354:	2369      	movs	r3, #105	; 0x69
 8011356:	5cc3      	ldrb	r3, [r0, r3]
 8011358:	2b32      	cmp	r3, #50	; 0x32
 801135a:	d00a      	beq.n	8011372 <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801135c:	6801      	ldr	r1, [r0, #0]
 801135e:	688b      	ldr	r3, [r1, #8]
 8011360:	2201      	movs	r2, #1
 8011362:	4393      	bics	r3, r2
 8011364:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8011366:	2369      	movs	r3, #105	; 0x69
 8011368:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 801136a:	f7fa fcef 	bl	800bd4c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 801136e:	2000      	movs	r0, #0
 8011370:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8011372:	3337      	adds	r3, #55	; 0x37
 8011374:	2222      	movs	r2, #34	; 0x22
 8011376:	54c2      	strb	r2, [r0, r3]
 8011378:	e7f7      	b.n	801136a <UART_EndTransmit_IT+0x22>
	...

0801137c <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801137c:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801137e:	2369      	movs	r3, #105	; 0x69
 8011380:	5cc3      	ldrb	r3, [r0, r3]
 8011382:	2b22      	cmp	r3, #34	; 0x22
 8011384:	d004      	beq.n	8011390 <UART_Receive_IT+0x14>
 8011386:	2369      	movs	r3, #105	; 0x69
 8011388:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801138a:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801138c:	2b32      	cmp	r3, #50	; 0x32
 801138e:	d12d      	bne.n	80113ec <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 8011390:	235c      	movs	r3, #92	; 0x5c
 8011392:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011394:	2280      	movs	r2, #128	; 0x80
 8011396:	0152      	lsls	r2, r2, #5
 8011398:	6883      	ldr	r3, [r0, #8]
 801139a:	4293      	cmp	r3, r2
 801139c:	d028      	beq.n	80113f0 <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801139e:	6803      	ldr	r3, [r0, #0]
 80113a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80113a2:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80113a4:	1c54      	adds	r4, r2, #1
 80113a6:	6544      	str	r4, [r0, #84]	; 0x54
 80113a8:	400b      	ands	r3, r1
 80113aa:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 80113ac:	225a      	movs	r2, #90	; 0x5a
 80113ae:	5a83      	ldrh	r3, [r0, r2]
 80113b0:	3b01      	subs	r3, #1
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 80113b6:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d117      	bne.n	80113ec <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80113bc:	6802      	ldr	r2, [r0, #0]
 80113be:	6813      	ldr	r3, [r2, #0]
 80113c0:	2120      	movs	r1, #32
 80113c2:	438b      	bics	r3, r1
 80113c4:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80113c6:	2369      	movs	r3, #105	; 0x69
 80113c8:	5cc3      	ldrb	r3, [r0, r3]
 80113ca:	2b32      	cmp	r3, #50	; 0x32
 80113cc:	d01c      	beq.n	8011408 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80113ce:	6802      	ldr	r2, [r0, #0]
 80113d0:	6813      	ldr	r3, [r2, #0]
 80113d2:	490f      	ldr	r1, [pc, #60]	; (8011410 <UART_Receive_IT+0x94>)
 80113d4:	400b      	ands	r3, r1
 80113d6:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80113d8:	6801      	ldr	r1, [r0, #0]
 80113da:	688b      	ldr	r3, [r1, #8]
 80113dc:	2201      	movs	r2, #1
 80113de:	4393      	bics	r3, r2
 80113e0:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 80113e2:	2369      	movs	r3, #105	; 0x69
 80113e4:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 80113e6:	f7fa fcef 	bl	800bdc8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80113ea:	2200      	movs	r2, #0
  }
}
 80113ec:	0010      	movs	r0, r2
 80113ee:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80113f0:	6903      	ldr	r3, [r0, #16]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d1d3      	bne.n	801139e <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80113f6:	6803      	ldr	r3, [r0, #0]
 80113f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80113fa:	400b      	ands	r3, r1
 80113fc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80113fe:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8011400:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8011402:	3302      	adds	r3, #2
 8011404:	6543      	str	r3, [r0, #84]	; 0x54
 8011406:	e7d1      	b.n	80113ac <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8011408:	3337      	adds	r3, #55	; 0x37
 801140a:	2212      	movs	r2, #18
 801140c:	54c2      	strb	r2, [r0, r3]
 801140e:	e7ea      	b.n	80113e6 <UART_Receive_IT+0x6a>
 8011410:	fffffeff 	.word	0xfffffeff

08011414 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8011414:	4770      	bx	lr

08011416 <HAL_UART_IRQHandler>:
{
 8011416:	b510      	push	{r4, lr}
 8011418:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 801141a:	6803      	ldr	r3, [r0, #0]
 801141c:	69da      	ldr	r2, [r3, #28]
 801141e:	07d2      	lsls	r2, r2, #31
 8011420:	d509      	bpl.n	8011436 <HAL_UART_IRQHandler+0x20>
 8011422:	681a      	ldr	r2, [r3, #0]
 8011424:	05d2      	lsls	r2, r2, #23
 8011426:	d506      	bpl.n	8011436 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8011428:	2201      	movs	r2, #1
 801142a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 801142c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801142e:	4313      	orrs	r3, r2
 8011430:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011432:	2369      	movs	r3, #105	; 0x69
 8011434:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011436:	6823      	ldr	r3, [r4, #0]
 8011438:	69da      	ldr	r2, [r3, #28]
 801143a:	0792      	lsls	r2, r2, #30
 801143c:	d50b      	bpl.n	8011456 <HAL_UART_IRQHandler+0x40>
 801143e:	689a      	ldr	r2, [r3, #8]
 8011440:	07d2      	lsls	r2, r2, #31
 8011442:	d508      	bpl.n	8011456 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8011444:	2202      	movs	r2, #2
 8011446:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011448:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801144a:	3202      	adds	r2, #2
 801144c:	4313      	orrs	r3, r2
 801144e:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011450:	2369      	movs	r3, #105	; 0x69
 8011452:	3a03      	subs	r2, #3
 8011454:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011456:	6823      	ldr	r3, [r4, #0]
 8011458:	69da      	ldr	r2, [r3, #28]
 801145a:	0752      	lsls	r2, r2, #29
 801145c:	d50b      	bpl.n	8011476 <HAL_UART_IRQHandler+0x60>
 801145e:	689a      	ldr	r2, [r3, #8]
 8011460:	07d2      	lsls	r2, r2, #31
 8011462:	d508      	bpl.n	8011476 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8011464:	2204      	movs	r2, #4
 8011466:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011468:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801146a:	3a02      	subs	r2, #2
 801146c:	4313      	orrs	r3, r2
 801146e:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8011470:	2369      	movs	r3, #105	; 0x69
 8011472:	3a01      	subs	r2, #1
 8011474:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8011476:	6823      	ldr	r3, [r4, #0]
 8011478:	69da      	ldr	r2, [r3, #28]
 801147a:	0712      	lsls	r2, r2, #28
 801147c:	d50a      	bpl.n	8011494 <HAL_UART_IRQHandler+0x7e>
 801147e:	689a      	ldr	r2, [r3, #8]
 8011480:	07d2      	lsls	r2, r2, #31
 8011482:	d507      	bpl.n	8011494 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8011484:	2208      	movs	r2, #8
 8011486:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011488:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801148a:	4313      	orrs	r3, r2
 801148c:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801148e:	2369      	movs	r3, #105	; 0x69
 8011490:	3a07      	subs	r2, #7
 8011492:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011494:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011496:	2b00      	cmp	r3, #0
 8011498:	d11c      	bne.n	80114d4 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 801149a:	6823      	ldr	r3, [r4, #0]
 801149c:	69da      	ldr	r2, [r3, #28]
 801149e:	02d2      	lsls	r2, r2, #11
 80114a0:	d502      	bpl.n	80114a8 <HAL_UART_IRQHandler+0x92>
 80114a2:	689a      	ldr	r2, [r3, #8]
 80114a4:	0252      	lsls	r2, r2, #9
 80114a6:	d419      	bmi.n	80114dc <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 80114a8:	6823      	ldr	r3, [r4, #0]
 80114aa:	69da      	ldr	r2, [r3, #28]
 80114ac:	0692      	lsls	r2, r2, #26
 80114ae:	d502      	bpl.n	80114b6 <HAL_UART_IRQHandler+0xa0>
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	069b      	lsls	r3, r3, #26
 80114b4:	d41c      	bmi.n	80114f0 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 80114b6:	6823      	ldr	r3, [r4, #0]
 80114b8:	69da      	ldr	r2, [r3, #28]
 80114ba:	0612      	lsls	r2, r2, #24
 80114bc:	d502      	bpl.n	80114c4 <HAL_UART_IRQHandler+0xae>
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	061b      	lsls	r3, r3, #24
 80114c2:	d41e      	bmi.n	8011502 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 80114c4:	6823      	ldr	r3, [r4, #0]
 80114c6:	69da      	ldr	r2, [r3, #28]
 80114c8:	0652      	lsls	r2, r2, #25
 80114ca:	d502      	bpl.n	80114d2 <HAL_UART_IRQHandler+0xbc>
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	065b      	lsls	r3, r3, #25
 80114d0:	d41b      	bmi.n	801150a <HAL_UART_IRQHandler+0xf4>
}
 80114d2:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 80114d4:	0020      	movs	r0, r4
 80114d6:	f7fa fc51 	bl	800bd7c <HAL_UART_ErrorCallback>
 80114da:	e7de      	b.n	801149a <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80114dc:	2280      	movs	r2, #128	; 0x80
 80114de:	0352      	lsls	r2, r2, #13
 80114e0:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 80114e2:	2369      	movs	r3, #105	; 0x69
 80114e4:	2201      	movs	r2, #1
 80114e6:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 80114e8:	0020      	movs	r0, r4
 80114ea:	f7ff ff93 	bl	8011414 <HAL_UARTEx_WakeupCallback>
 80114ee:	e7db      	b.n	80114a8 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 80114f0:	0020      	movs	r0, r4
 80114f2:	f7ff ff43 	bl	801137c <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80114f6:	6822      	ldr	r2, [r4, #0]
 80114f8:	6993      	ldr	r3, [r2, #24]
 80114fa:	2108      	movs	r1, #8
 80114fc:	430b      	orrs	r3, r1
 80114fe:	6193      	str	r3, [r2, #24]
 8011500:	e7d9      	b.n	80114b6 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8011502:	0020      	movs	r0, r4
 8011504:	f7ff fee8 	bl	80112d8 <UART_Transmit_IT>
 8011508:	e7dc      	b.n	80114c4 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 801150a:	0020      	movs	r0, r4
 801150c:	f7ff ff1c 	bl	8011348 <UART_EndTransmit_IT>
}
 8011510:	e7df      	b.n	80114d2 <HAL_UART_IRQHandler+0xbc>

08011512 <main>:


/* Main functions ------------------------------------------------------------*/

int main(void)
{
 8011512:	b510      	push	{r4, lr}


  /* MCU Configuration----------------------------------------------------------*/

  /* Reset all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8011514:	f7fd f988 	bl	800e828 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8011518:	f7f9 f81a 	bl	800a550 <SystemClock_Config>

  /* Initialize all user peripherals */

  /* Initialize BitzOS */
  BOS_Init();
 801151c:	f7f2 fca6 	bl	8003e6c <BOS_Init>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8011520:	f7f6 f84a 	bl	80075b8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8011524:	f7fb f96e 	bl	800c804 <osKernelStart>
 8011528:	e7fe      	b.n	8011528 <main+0x16>

0801152a <UserTask>:

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void * argument)
{
 801152a:	e7fe      	b.n	801152a <UserTask>

0801152c <atof>:
 801152c:	b510      	push	{r4, lr}
 801152e:	2100      	movs	r1, #0
 8011530:	f001 fb3e 	bl	8012bb0 <strtod>
 8011534:	bd10      	pop	{r4, pc}

08011536 <atoi>:
 8011536:	b510      	push	{r4, lr}
 8011538:	220a      	movs	r2, #10
 801153a:	2100      	movs	r1, #0
 801153c:	f001 fc04 	bl	8012d48 <strtol>
 8011540:	bd10      	pop	{r4, pc}

08011542 <atol>:
 8011542:	b510      	push	{r4, lr}
 8011544:	220a      	movs	r2, #10
 8011546:	2100      	movs	r1, #0
 8011548:	f001 fbfe 	bl	8012d48 <strtol>
 801154c:	bd10      	pop	{r4, pc}
	...

08011550 <__libc_init_array>:
 8011550:	b570      	push	{r4, r5, r6, lr}
 8011552:	2600      	movs	r6, #0
 8011554:	4d0c      	ldr	r5, [pc, #48]	; (8011588 <__libc_init_array+0x38>)
 8011556:	4c0d      	ldr	r4, [pc, #52]	; (801158c <__libc_init_array+0x3c>)
 8011558:	1b64      	subs	r4, r4, r5
 801155a:	10a4      	asrs	r4, r4, #2
 801155c:	42a6      	cmp	r6, r4
 801155e:	d109      	bne.n	8011574 <__libc_init_array+0x24>
 8011560:	2600      	movs	r6, #0
 8011562:	f004 fe6d 	bl	8016240 <_init>
 8011566:	4d0a      	ldr	r5, [pc, #40]	; (8011590 <__libc_init_array+0x40>)
 8011568:	4c0a      	ldr	r4, [pc, #40]	; (8011594 <__libc_init_array+0x44>)
 801156a:	1b64      	subs	r4, r4, r5
 801156c:	10a4      	asrs	r4, r4, #2
 801156e:	42a6      	cmp	r6, r4
 8011570:	d105      	bne.n	801157e <__libc_init_array+0x2e>
 8011572:	bd70      	pop	{r4, r5, r6, pc}
 8011574:	00b3      	lsls	r3, r6, #2
 8011576:	58eb      	ldr	r3, [r5, r3]
 8011578:	4798      	blx	r3
 801157a:	3601      	adds	r6, #1
 801157c:	e7ee      	b.n	801155c <__libc_init_array+0xc>
 801157e:	00b3      	lsls	r3, r6, #2
 8011580:	58eb      	ldr	r3, [r5, r3]
 8011582:	4798      	blx	r3
 8011584:	3601      	adds	r6, #1
 8011586:	e7f2      	b.n	801156e <__libc_init_array+0x1e>
 8011588:	0801907c 	.word	0x0801907c
 801158c:	0801907c 	.word	0x0801907c
 8011590:	0801907c 	.word	0x0801907c
 8011594:	08019084 	.word	0x08019084

08011598 <__locale_ctype_ptr_l>:
 8011598:	30ec      	adds	r0, #236	; 0xec
 801159a:	6800      	ldr	r0, [r0, #0]
 801159c:	4770      	bx	lr
	...

080115a0 <__locale_ctype_ptr>:
 80115a0:	4b04      	ldr	r3, [pc, #16]	; (80115b4 <__locale_ctype_ptr+0x14>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d100      	bne.n	80115ac <__locale_ctype_ptr+0xc>
 80115aa:	4b03      	ldr	r3, [pc, #12]	; (80115b8 <__locale_ctype_ptr+0x18>)
 80115ac:	33ec      	adds	r3, #236	; 0xec
 80115ae:	6818      	ldr	r0, [r3, #0]
 80115b0:	4770      	bx	lr
 80115b2:	46c0      	nop			; (mov r8, r8)
 80115b4:	200000a8 	.word	0x200000a8
 80115b8:	200004d8 	.word	0x200004d8

080115bc <malloc>:
 80115bc:	b510      	push	{r4, lr}
 80115be:	4b03      	ldr	r3, [pc, #12]	; (80115cc <malloc+0x10>)
 80115c0:	0001      	movs	r1, r0
 80115c2:	6818      	ldr	r0, [r3, #0]
 80115c4:	f000 f80e 	bl	80115e4 <_malloc_r>
 80115c8:	bd10      	pop	{r4, pc}
 80115ca:	46c0      	nop			; (mov r8, r8)
 80115cc:	200000a8 	.word	0x200000a8

080115d0 <free>:
 80115d0:	b510      	push	{r4, lr}
 80115d2:	4b03      	ldr	r3, [pc, #12]	; (80115e0 <free+0x10>)
 80115d4:	0001      	movs	r1, r0
 80115d6:	6818      	ldr	r0, [r3, #0]
 80115d8:	f003 fd10 	bl	8014ffc <_free_r>
 80115dc:	bd10      	pop	{r4, pc}
 80115de:	46c0      	nop			; (mov r8, r8)
 80115e0:	200000a8 	.word	0x200000a8

080115e4 <_malloc_r>:
 80115e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115e6:	000d      	movs	r5, r1
 80115e8:	b085      	sub	sp, #20
 80115ea:	350b      	adds	r5, #11
 80115ec:	9001      	str	r0, [sp, #4]
 80115ee:	2d16      	cmp	r5, #22
 80115f0:	d908      	bls.n	8011604 <_malloc_r+0x20>
 80115f2:	2307      	movs	r3, #7
 80115f4:	439d      	bics	r5, r3
 80115f6:	d506      	bpl.n	8011606 <_malloc_r+0x22>
 80115f8:	230c      	movs	r3, #12
 80115fa:	9a01      	ldr	r2, [sp, #4]
 80115fc:	6013      	str	r3, [r2, #0]
 80115fe:	2000      	movs	r0, #0
 8011600:	b005      	add	sp, #20
 8011602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011604:	2510      	movs	r5, #16
 8011606:	428d      	cmp	r5, r1
 8011608:	d3f6      	bcc.n	80115f8 <_malloc_r+0x14>
 801160a:	9801      	ldr	r0, [sp, #4]
 801160c:	f000 fa34 	bl	8011a78 <__malloc_lock>
 8011610:	23f8      	movs	r3, #248	; 0xf8
 8011612:	33ff      	adds	r3, #255	; 0xff
 8011614:	4ac4      	ldr	r2, [pc, #784]	; (8011928 <_malloc_r+0x344>)
 8011616:	429d      	cmp	r5, r3
 8011618:	d820      	bhi.n	801165c <_malloc_r+0x78>
 801161a:	0029      	movs	r1, r5
 801161c:	3108      	adds	r1, #8
 801161e:	1851      	adds	r1, r2, r1
 8011620:	0008      	movs	r0, r1
 8011622:	684c      	ldr	r4, [r1, #4]
 8011624:	3808      	subs	r0, #8
 8011626:	08eb      	lsrs	r3, r5, #3
 8011628:	4284      	cmp	r4, r0
 801162a:	d104      	bne.n	8011636 <_malloc_r+0x52>
 801162c:	68cc      	ldr	r4, [r1, #12]
 801162e:	3302      	adds	r3, #2
 8011630:	469c      	mov	ip, r3
 8011632:	42a1      	cmp	r1, r4
 8011634:	d02a      	beq.n	801168c <_malloc_r+0xa8>
 8011636:	2303      	movs	r3, #3
 8011638:	6862      	ldr	r2, [r4, #4]
 801163a:	68a1      	ldr	r1, [r4, #8]
 801163c:	439a      	bics	r2, r3
 801163e:	0013      	movs	r3, r2
 8011640:	68e2      	ldr	r2, [r4, #12]
 8011642:	18e3      	adds	r3, r4, r3
 8011644:	60ca      	str	r2, [r1, #12]
 8011646:	6091      	str	r1, [r2, #8]
 8011648:	2201      	movs	r2, #1
 801164a:	6859      	ldr	r1, [r3, #4]
 801164c:	430a      	orrs	r2, r1
 801164e:	605a      	str	r2, [r3, #4]
 8011650:	9801      	ldr	r0, [sp, #4]
 8011652:	f000 fa19 	bl	8011a88 <__malloc_unlock>
 8011656:	0020      	movs	r0, r4
 8011658:	3008      	adds	r0, #8
 801165a:	e7d1      	b.n	8011600 <_malloc_r+0x1c>
 801165c:	0a69      	lsrs	r1, r5, #9
 801165e:	233f      	movs	r3, #63	; 0x3f
 8011660:	2900      	cmp	r1, #0
 8011662:	d003      	beq.n	801166c <_malloc_r+0x88>
 8011664:	2904      	cmp	r1, #4
 8011666:	d828      	bhi.n	80116ba <_malloc_r+0xd6>
 8011668:	09ab      	lsrs	r3, r5, #6
 801166a:	3338      	adds	r3, #56	; 0x38
 801166c:	2103      	movs	r1, #3
 801166e:	468c      	mov	ip, r1
 8011670:	00d8      	lsls	r0, r3, #3
 8011672:	1880      	adds	r0, r0, r2
 8011674:	68c4      	ldr	r4, [r0, #12]
 8011676:	4284      	cmp	r4, r0
 8011678:	d006      	beq.n	8011688 <_malloc_r+0xa4>
 801167a:	4666      	mov	r6, ip
 801167c:	6861      	ldr	r1, [r4, #4]
 801167e:	43b1      	bics	r1, r6
 8011680:	1b4f      	subs	r7, r1, r5
 8011682:	2f0f      	cmp	r7, #15
 8011684:	dd31      	ble.n	80116ea <_malloc_r+0x106>
 8011686:	3b01      	subs	r3, #1
 8011688:	3301      	adds	r3, #1
 801168a:	469c      	mov	ip, r3
 801168c:	6914      	ldr	r4, [r2, #16]
 801168e:	49a7      	ldr	r1, [pc, #668]	; (801192c <_malloc_r+0x348>)
 8011690:	428c      	cmp	r4, r1
 8011692:	d055      	beq.n	8011740 <_malloc_r+0x15c>
 8011694:	2303      	movs	r3, #3
 8011696:	6860      	ldr	r0, [r4, #4]
 8011698:	4398      	bics	r0, r3
 801169a:	0003      	movs	r3, r0
 801169c:	1b46      	subs	r6, r0, r5
 801169e:	2e0f      	cmp	r6, #15
 80116a0:	dd31      	ble.n	8011706 <_malloc_r+0x122>
 80116a2:	2701      	movs	r7, #1
 80116a4:	1960      	adds	r0, r4, r5
 80116a6:	433d      	orrs	r5, r7
 80116a8:	4337      	orrs	r7, r6
 80116aa:	6065      	str	r5, [r4, #4]
 80116ac:	6150      	str	r0, [r2, #20]
 80116ae:	6110      	str	r0, [r2, #16]
 80116b0:	60c1      	str	r1, [r0, #12]
 80116b2:	6081      	str	r1, [r0, #8]
 80116b4:	6047      	str	r7, [r0, #4]
 80116b6:	50e6      	str	r6, [r4, r3]
 80116b8:	e7ca      	b.n	8011650 <_malloc_r+0x6c>
 80116ba:	2914      	cmp	r1, #20
 80116bc:	d802      	bhi.n	80116c4 <_malloc_r+0xe0>
 80116be:	000b      	movs	r3, r1
 80116c0:	335b      	adds	r3, #91	; 0x5b
 80116c2:	e7d3      	b.n	801166c <_malloc_r+0x88>
 80116c4:	2954      	cmp	r1, #84	; 0x54
 80116c6:	d802      	bhi.n	80116ce <_malloc_r+0xea>
 80116c8:	0b2b      	lsrs	r3, r5, #12
 80116ca:	336e      	adds	r3, #110	; 0x6e
 80116cc:	e7ce      	b.n	801166c <_malloc_r+0x88>
 80116ce:	23aa      	movs	r3, #170	; 0xaa
 80116d0:	005b      	lsls	r3, r3, #1
 80116d2:	4299      	cmp	r1, r3
 80116d4:	d802      	bhi.n	80116dc <_malloc_r+0xf8>
 80116d6:	0beb      	lsrs	r3, r5, #15
 80116d8:	3377      	adds	r3, #119	; 0x77
 80116da:	e7c7      	b.n	801166c <_malloc_r+0x88>
 80116dc:	4894      	ldr	r0, [pc, #592]	; (8011930 <_malloc_r+0x34c>)
 80116de:	237e      	movs	r3, #126	; 0x7e
 80116e0:	4281      	cmp	r1, r0
 80116e2:	d8c3      	bhi.n	801166c <_malloc_r+0x88>
 80116e4:	0cab      	lsrs	r3, r5, #18
 80116e6:	337c      	adds	r3, #124	; 0x7c
 80116e8:	e7c0      	b.n	801166c <_malloc_r+0x88>
 80116ea:	68e6      	ldr	r6, [r4, #12]
 80116ec:	2f00      	cmp	r7, #0
 80116ee:	db08      	blt.n	8011702 <_malloc_r+0x11e>
 80116f0:	68a3      	ldr	r3, [r4, #8]
 80116f2:	1861      	adds	r1, r4, r1
 80116f4:	60de      	str	r6, [r3, #12]
 80116f6:	60b3      	str	r3, [r6, #8]
 80116f8:	2301      	movs	r3, #1
 80116fa:	684a      	ldr	r2, [r1, #4]
 80116fc:	4313      	orrs	r3, r2
 80116fe:	604b      	str	r3, [r1, #4]
 8011700:	e7a6      	b.n	8011650 <_malloc_r+0x6c>
 8011702:	0034      	movs	r4, r6
 8011704:	e7b7      	b.n	8011676 <_malloc_r+0x92>
 8011706:	6151      	str	r1, [r2, #20]
 8011708:	6111      	str	r1, [r2, #16]
 801170a:	2e00      	cmp	r6, #0
 801170c:	db05      	blt.n	801171a <_malloc_r+0x136>
 801170e:	2101      	movs	r1, #1
 8011710:	1823      	adds	r3, r4, r0
 8011712:	685a      	ldr	r2, [r3, #4]
 8011714:	4311      	orrs	r1, r2
 8011716:	6059      	str	r1, [r3, #4]
 8011718:	e79a      	b.n	8011650 <_malloc_r+0x6c>
 801171a:	4986      	ldr	r1, [pc, #536]	; (8011934 <_malloc_r+0x350>)
 801171c:	6857      	ldr	r7, [r2, #4]
 801171e:	4288      	cmp	r0, r1
 8011720:	d900      	bls.n	8011724 <_malloc_r+0x140>
 8011722:	e090      	b.n	8011846 <_malloc_r+0x262>
 8011724:	08c3      	lsrs	r3, r0, #3
 8011726:	39ff      	subs	r1, #255	; 0xff
 8011728:	1098      	asrs	r0, r3, #2
 801172a:	39ff      	subs	r1, #255	; 0xff
 801172c:	4081      	lsls	r1, r0
 801172e:	00db      	lsls	r3, r3, #3
 8011730:	4339      	orrs	r1, r7
 8011732:	6051      	str	r1, [r2, #4]
 8011734:	189a      	adds	r2, r3, r2
 8011736:	6893      	ldr	r3, [r2, #8]
 8011738:	60e2      	str	r2, [r4, #12]
 801173a:	60a3      	str	r3, [r4, #8]
 801173c:	6094      	str	r4, [r2, #8]
 801173e:	60dc      	str	r4, [r3, #12]
 8011740:	4663      	mov	r3, ip
 8011742:	2201      	movs	r2, #1
 8011744:	4978      	ldr	r1, [pc, #480]	; (8011928 <_malloc_r+0x344>)
 8011746:	109b      	asrs	r3, r3, #2
 8011748:	6848      	ldr	r0, [r1, #4]
 801174a:	409a      	lsls	r2, r3
 801174c:	4290      	cmp	r0, r2
 801174e:	d32d      	bcc.n	80117ac <_malloc_r+0x1c8>
 8011750:	4202      	tst	r2, r0
 8011752:	d109      	bne.n	8011768 <_malloc_r+0x184>
 8011754:	2303      	movs	r3, #3
 8011756:	4664      	mov	r4, ip
 8011758:	439c      	bics	r4, r3
 801175a:	0023      	movs	r3, r4
 801175c:	3304      	adds	r3, #4
 801175e:	469c      	mov	ip, r3
 8011760:	0052      	lsls	r2, r2, #1
 8011762:	4202      	tst	r2, r0
 8011764:	d100      	bne.n	8011768 <_malloc_r+0x184>
 8011766:	e0a4      	b.n	80118b2 <_malloc_r+0x2ce>
 8011768:	4663      	mov	r3, ip
 801176a:	00db      	lsls	r3, r3, #3
 801176c:	18cb      	adds	r3, r1, r3
 801176e:	9303      	str	r3, [sp, #12]
 8011770:	001f      	movs	r7, r3
 8011772:	4663      	mov	r3, ip
 8011774:	9302      	str	r3, [sp, #8]
 8011776:	68fc      	ldr	r4, [r7, #12]
 8011778:	42bc      	cmp	r4, r7
 801177a:	d000      	beq.n	801177e <_malloc_r+0x19a>
 801177c:	e09c      	b.n	80118b8 <_malloc_r+0x2d4>
 801177e:	2003      	movs	r0, #3
 8011780:	9b02      	ldr	r3, [sp, #8]
 8011782:	3708      	adds	r7, #8
 8011784:	3301      	adds	r3, #1
 8011786:	9302      	str	r3, [sp, #8]
 8011788:	4203      	tst	r3, r0
 801178a:	d1f4      	bne.n	8011776 <_malloc_r+0x192>
 801178c:	4663      	mov	r3, ip
 801178e:	2003      	movs	r0, #3
 8011790:	4203      	tst	r3, r0
 8011792:	d000      	beq.n	8011796 <_malloc_r+0x1b2>
 8011794:	e0b3      	b.n	80118fe <_malloc_r+0x31a>
 8011796:	684b      	ldr	r3, [r1, #4]
 8011798:	4393      	bics	r3, r2
 801179a:	604b      	str	r3, [r1, #4]
 801179c:	4b62      	ldr	r3, [pc, #392]	; (8011928 <_malloc_r+0x344>)
 801179e:	0052      	lsls	r2, r2, #1
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	4293      	cmp	r3, r2
 80117a4:	d302      	bcc.n	80117ac <_malloc_r+0x1c8>
 80117a6:	2a00      	cmp	r2, #0
 80117a8:	d000      	beq.n	80117ac <_malloc_r+0x1c8>
 80117aa:	e0b9      	b.n	8011920 <_malloc_r+0x33c>
 80117ac:	2303      	movs	r3, #3
 80117ae:	688f      	ldr	r7, [r1, #8]
 80117b0:	687a      	ldr	r2, [r7, #4]
 80117b2:	439a      	bics	r2, r3
 80117b4:	9202      	str	r2, [sp, #8]
 80117b6:	42aa      	cmp	r2, r5
 80117b8:	d303      	bcc.n	80117c2 <_malloc_r+0x1de>
 80117ba:	1b52      	subs	r2, r2, r5
 80117bc:	2a0f      	cmp	r2, #15
 80117be:	dd00      	ble.n	80117c2 <_malloc_r+0x1de>
 80117c0:	e116      	b.n	80119f0 <_malloc_r+0x40c>
 80117c2:	4b5d      	ldr	r3, [pc, #372]	; (8011938 <_malloc_r+0x354>)
 80117c4:	2008      	movs	r0, #8
 80117c6:	681e      	ldr	r6, [r3, #0]
 80117c8:	f002 fd26 	bl	8014218 <sysconf>
 80117cc:	4b5b      	ldr	r3, [pc, #364]	; (801193c <_malloc_r+0x358>)
 80117ce:	3610      	adds	r6, #16
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	1976      	adds	r6, r6, r5
 80117d4:	9003      	str	r0, [sp, #12]
 80117d6:	3301      	adds	r3, #1
 80117d8:	d003      	beq.n	80117e2 <_malloc_r+0x1fe>
 80117da:	3e01      	subs	r6, #1
 80117dc:	1836      	adds	r6, r6, r0
 80117de:	4243      	negs	r3, r0
 80117e0:	401e      	ands	r6, r3
 80117e2:	0031      	movs	r1, r6
 80117e4:	9801      	ldr	r0, [sp, #4]
 80117e6:	f000 fb27 	bl	8011e38 <_sbrk_r>
 80117ea:	0004      	movs	r4, r0
 80117ec:	1c43      	adds	r3, r0, #1
 80117ee:	d100      	bne.n	80117f2 <_malloc_r+0x20e>
 80117f0:	e0d6      	b.n	80119a0 <_malloc_r+0x3bc>
 80117f2:	9b02      	ldr	r3, [sp, #8]
 80117f4:	18fb      	adds	r3, r7, r3
 80117f6:	4283      	cmp	r3, r0
 80117f8:	d903      	bls.n	8011802 <_malloc_r+0x21e>
 80117fa:	4a4b      	ldr	r2, [pc, #300]	; (8011928 <_malloc_r+0x344>)
 80117fc:	4297      	cmp	r7, r2
 80117fe:	d000      	beq.n	8011802 <_malloc_r+0x21e>
 8011800:	e0ce      	b.n	80119a0 <_malloc_r+0x3bc>
 8011802:	494f      	ldr	r1, [pc, #316]	; (8011940 <_malloc_r+0x35c>)
 8011804:	680a      	ldr	r2, [r1, #0]
 8011806:	18b2      	adds	r2, r6, r2
 8011808:	600a      	str	r2, [r1, #0]
 801180a:	9903      	ldr	r1, [sp, #12]
 801180c:	4694      	mov	ip, r2
 801180e:	1e48      	subs	r0, r1, #1
 8011810:	42a3      	cmp	r3, r4
 8011812:	d000      	beq.n	8011816 <_malloc_r+0x232>
 8011814:	e09a      	b.n	801194c <_malloc_r+0x368>
 8011816:	4203      	tst	r3, r0
 8011818:	d000      	beq.n	801181c <_malloc_r+0x238>
 801181a:	e097      	b.n	801194c <_malloc_r+0x368>
 801181c:	9a02      	ldr	r2, [sp, #8]
 801181e:	4b42      	ldr	r3, [pc, #264]	; (8011928 <_malloc_r+0x344>)
 8011820:	1992      	adds	r2, r2, r6
 8011822:	2601      	movs	r6, #1
 8011824:	689b      	ldr	r3, [r3, #8]
 8011826:	4316      	orrs	r6, r2
 8011828:	605e      	str	r6, [r3, #4]
 801182a:	4b45      	ldr	r3, [pc, #276]	; (8011940 <_malloc_r+0x35c>)
 801182c:	4a45      	ldr	r2, [pc, #276]	; (8011944 <_malloc_r+0x360>)
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	6811      	ldr	r1, [r2, #0]
 8011832:	428b      	cmp	r3, r1
 8011834:	d900      	bls.n	8011838 <_malloc_r+0x254>
 8011836:	6013      	str	r3, [r2, #0]
 8011838:	4a43      	ldr	r2, [pc, #268]	; (8011948 <_malloc_r+0x364>)
 801183a:	6811      	ldr	r1, [r2, #0]
 801183c:	428b      	cmp	r3, r1
 801183e:	d800      	bhi.n	8011842 <_malloc_r+0x25e>
 8011840:	e0ae      	b.n	80119a0 <_malloc_r+0x3bc>
 8011842:	6013      	str	r3, [r2, #0]
 8011844:	e0ac      	b.n	80119a0 <_malloc_r+0x3bc>
 8011846:	0a40      	lsrs	r0, r0, #9
 8011848:	2804      	cmp	r0, #4
 801184a:	d810      	bhi.n	801186e <_malloc_r+0x28a>
 801184c:	0999      	lsrs	r1, r3, #6
 801184e:	3138      	adds	r1, #56	; 0x38
 8011850:	00ce      	lsls	r6, r1, #3
 8011852:	18b6      	adds	r6, r6, r2
 8011854:	68b0      	ldr	r0, [r6, #8]
 8011856:	4286      	cmp	r6, r0
 8011858:	d124      	bne.n	80118a4 <_malloc_r+0x2c0>
 801185a:	2301      	movs	r3, #1
 801185c:	1089      	asrs	r1, r1, #2
 801185e:	408b      	lsls	r3, r1
 8011860:	433b      	orrs	r3, r7
 8011862:	6053      	str	r3, [r2, #4]
 8011864:	60e6      	str	r6, [r4, #12]
 8011866:	60a0      	str	r0, [r4, #8]
 8011868:	60b4      	str	r4, [r6, #8]
 801186a:	60c4      	str	r4, [r0, #12]
 801186c:	e768      	b.n	8011740 <_malloc_r+0x15c>
 801186e:	2814      	cmp	r0, #20
 8011870:	d802      	bhi.n	8011878 <_malloc_r+0x294>
 8011872:	0001      	movs	r1, r0
 8011874:	315b      	adds	r1, #91	; 0x5b
 8011876:	e7eb      	b.n	8011850 <_malloc_r+0x26c>
 8011878:	2854      	cmp	r0, #84	; 0x54
 801187a:	d802      	bhi.n	8011882 <_malloc_r+0x29e>
 801187c:	0b19      	lsrs	r1, r3, #12
 801187e:	316e      	adds	r1, #110	; 0x6e
 8011880:	e7e6      	b.n	8011850 <_malloc_r+0x26c>
 8011882:	21aa      	movs	r1, #170	; 0xaa
 8011884:	0049      	lsls	r1, r1, #1
 8011886:	4288      	cmp	r0, r1
 8011888:	d802      	bhi.n	8011890 <_malloc_r+0x2ac>
 801188a:	0bd9      	lsrs	r1, r3, #15
 801188c:	3177      	adds	r1, #119	; 0x77
 801188e:	e7df      	b.n	8011850 <_malloc_r+0x26c>
 8011890:	4e27      	ldr	r6, [pc, #156]	; (8011930 <_malloc_r+0x34c>)
 8011892:	217e      	movs	r1, #126	; 0x7e
 8011894:	42b0      	cmp	r0, r6
 8011896:	d8db      	bhi.n	8011850 <_malloc_r+0x26c>
 8011898:	0c99      	lsrs	r1, r3, #18
 801189a:	317c      	adds	r1, #124	; 0x7c
 801189c:	e7d8      	b.n	8011850 <_malloc_r+0x26c>
 801189e:	6880      	ldr	r0, [r0, #8]
 80118a0:	4286      	cmp	r6, r0
 80118a2:	d004      	beq.n	80118ae <_malloc_r+0x2ca>
 80118a4:	2103      	movs	r1, #3
 80118a6:	6842      	ldr	r2, [r0, #4]
 80118a8:	438a      	bics	r2, r1
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d8f7      	bhi.n	801189e <_malloc_r+0x2ba>
 80118ae:	68c6      	ldr	r6, [r0, #12]
 80118b0:	e7d8      	b.n	8011864 <_malloc_r+0x280>
 80118b2:	2304      	movs	r3, #4
 80118b4:	449c      	add	ip, r3
 80118b6:	e753      	b.n	8011760 <_malloc_r+0x17c>
 80118b8:	2003      	movs	r0, #3
 80118ba:	6863      	ldr	r3, [r4, #4]
 80118bc:	4383      	bics	r3, r0
 80118be:	1b5e      	subs	r6, r3, r5
 80118c0:	68e0      	ldr	r0, [r4, #12]
 80118c2:	2e0f      	cmp	r6, #15
 80118c4:	dd0e      	ble.n	80118e4 <_malloc_r+0x300>
 80118c6:	2701      	movs	r7, #1
 80118c8:	1962      	adds	r2, r4, r5
 80118ca:	433d      	orrs	r5, r7
 80118cc:	6065      	str	r5, [r4, #4]
 80118ce:	68a5      	ldr	r5, [r4, #8]
 80118d0:	4337      	orrs	r7, r6
 80118d2:	60e8      	str	r0, [r5, #12]
 80118d4:	6085      	str	r5, [r0, #8]
 80118d6:	614a      	str	r2, [r1, #20]
 80118d8:	610a      	str	r2, [r1, #16]
 80118da:	4914      	ldr	r1, [pc, #80]	; (801192c <_malloc_r+0x348>)
 80118dc:	6057      	str	r7, [r2, #4]
 80118de:	60d1      	str	r1, [r2, #12]
 80118e0:	6091      	str	r1, [r2, #8]
 80118e2:	e6e8      	b.n	80116b6 <_malloc_r+0xd2>
 80118e4:	2e00      	cmp	r6, #0
 80118e6:	db08      	blt.n	80118fa <_malloc_r+0x316>
 80118e8:	2201      	movs	r2, #1
 80118ea:	18e3      	adds	r3, r4, r3
 80118ec:	6859      	ldr	r1, [r3, #4]
 80118ee:	430a      	orrs	r2, r1
 80118f0:	605a      	str	r2, [r3, #4]
 80118f2:	68a3      	ldr	r3, [r4, #8]
 80118f4:	60d8      	str	r0, [r3, #12]
 80118f6:	6083      	str	r3, [r0, #8]
 80118f8:	e6aa      	b.n	8011650 <_malloc_r+0x6c>
 80118fa:	0004      	movs	r4, r0
 80118fc:	e73c      	b.n	8011778 <_malloc_r+0x194>
 80118fe:	2301      	movs	r3, #1
 8011900:	425b      	negs	r3, r3
 8011902:	449c      	add	ip, r3
 8011904:	9b03      	ldr	r3, [sp, #12]
 8011906:	6818      	ldr	r0, [r3, #0]
 8011908:	3b08      	subs	r3, #8
 801190a:	9003      	str	r0, [sp, #12]
 801190c:	4298      	cmp	r0, r3
 801190e:	d100      	bne.n	8011912 <_malloc_r+0x32e>
 8011910:	e73c      	b.n	801178c <_malloc_r+0x1a8>
 8011912:	e743      	b.n	801179c <_malloc_r+0x1b8>
 8011914:	2004      	movs	r0, #4
 8011916:	0052      	lsls	r2, r2, #1
 8011918:	4484      	add	ip, r0
 801191a:	421a      	tst	r2, r3
 801191c:	d0fa      	beq.n	8011914 <_malloc_r+0x330>
 801191e:	e723      	b.n	8011768 <_malloc_r+0x184>
 8011920:	9802      	ldr	r0, [sp, #8]
 8011922:	4684      	mov	ip, r0
 8011924:	e7f9      	b.n	801191a <_malloc_r+0x336>
 8011926:	46c0      	nop			; (mov r8, r8)
 8011928:	20000644 	.word	0x20000644
 801192c:	2000064c 	.word	0x2000064c
 8011930:	00000554 	.word	0x00000554
 8011934:	000001ff 	.word	0x000001ff
 8011938:	20006904 	.word	0x20006904
 801193c:	20000a4c 	.word	0x20000a4c
 8011940:	200068d4 	.word	0x200068d4
 8011944:	200068fc 	.word	0x200068fc
 8011948:	20006900 	.word	0x20006900
 801194c:	492e      	ldr	r1, [pc, #184]	; (8011a08 <_malloc_r+0x424>)
 801194e:	680a      	ldr	r2, [r1, #0]
 8011950:	3201      	adds	r2, #1
 8011952:	d133      	bne.n	80119bc <_malloc_r+0x3d8>
 8011954:	600c      	str	r4, [r1, #0]
 8011956:	2307      	movs	r3, #7
 8011958:	4023      	ands	r3, r4
 801195a:	d002      	beq.n	8011962 <_malloc_r+0x37e>
 801195c:	2208      	movs	r2, #8
 801195e:	1ad3      	subs	r3, r2, r3
 8011960:	18e4      	adds	r4, r4, r3
 8011962:	9a03      	ldr	r2, [sp, #12]
 8011964:	19a6      	adds	r6, r4, r6
 8011966:	18d3      	adds	r3, r2, r3
 8011968:	4006      	ands	r6, r0
 801196a:	1b9e      	subs	r6, r3, r6
 801196c:	0031      	movs	r1, r6
 801196e:	9801      	ldr	r0, [sp, #4]
 8011970:	f000 fa62 	bl	8011e38 <_sbrk_r>
 8011974:	1c43      	adds	r3, r0, #1
 8011976:	d101      	bne.n	801197c <_malloc_r+0x398>
 8011978:	0020      	movs	r0, r4
 801197a:	2600      	movs	r6, #0
 801197c:	4a23      	ldr	r2, [pc, #140]	; (8011a0c <_malloc_r+0x428>)
 801197e:	1b00      	subs	r0, r0, r4
 8011980:	6813      	ldr	r3, [r2, #0]
 8011982:	199b      	adds	r3, r3, r6
 8011984:	6013      	str	r3, [r2, #0]
 8011986:	2301      	movs	r3, #1
 8011988:	4a21      	ldr	r2, [pc, #132]	; (8011a10 <_malloc_r+0x42c>)
 801198a:	1986      	adds	r6, r0, r6
 801198c:	431e      	orrs	r6, r3
 801198e:	6094      	str	r4, [r2, #8]
 8011990:	6066      	str	r6, [r4, #4]
 8011992:	4297      	cmp	r7, r2
 8011994:	d100      	bne.n	8011998 <_malloc_r+0x3b4>
 8011996:	e748      	b.n	801182a <_malloc_r+0x246>
 8011998:	9a02      	ldr	r2, [sp, #8]
 801199a:	2a0f      	cmp	r2, #15
 801199c:	d813      	bhi.n	80119c6 <_malloc_r+0x3e2>
 801199e:	6063      	str	r3, [r4, #4]
 80119a0:	2203      	movs	r2, #3
 80119a2:	4b1b      	ldr	r3, [pc, #108]	; (8011a10 <_malloc_r+0x42c>)
 80119a4:	689b      	ldr	r3, [r3, #8]
 80119a6:	685b      	ldr	r3, [r3, #4]
 80119a8:	4393      	bics	r3, r2
 80119aa:	1b5a      	subs	r2, r3, r5
 80119ac:	42ab      	cmp	r3, r5
 80119ae:	d301      	bcc.n	80119b4 <_malloc_r+0x3d0>
 80119b0:	2a0f      	cmp	r2, #15
 80119b2:	dc1d      	bgt.n	80119f0 <_malloc_r+0x40c>
 80119b4:	9801      	ldr	r0, [sp, #4]
 80119b6:	f000 f867 	bl	8011a88 <__malloc_unlock>
 80119ba:	e620      	b.n	80115fe <_malloc_r+0x1a>
 80119bc:	1ae3      	subs	r3, r4, r3
 80119be:	4a13      	ldr	r2, [pc, #76]	; (8011a0c <_malloc_r+0x428>)
 80119c0:	4463      	add	r3, ip
 80119c2:	6013      	str	r3, [r2, #0]
 80119c4:	e7c7      	b.n	8011956 <_malloc_r+0x372>
 80119c6:	2207      	movs	r2, #7
 80119c8:	9e02      	ldr	r6, [sp, #8]
 80119ca:	3e0c      	subs	r6, #12
 80119cc:	4396      	bics	r6, r2
 80119ce:	687a      	ldr	r2, [r7, #4]
 80119d0:	4013      	ands	r3, r2
 80119d2:	2205      	movs	r2, #5
 80119d4:	4333      	orrs	r3, r6
 80119d6:	607b      	str	r3, [r7, #4]
 80119d8:	19bb      	adds	r3, r7, r6
 80119da:	605a      	str	r2, [r3, #4]
 80119dc:	609a      	str	r2, [r3, #8]
 80119de:	2e0f      	cmp	r6, #15
 80119e0:	d800      	bhi.n	80119e4 <_malloc_r+0x400>
 80119e2:	e722      	b.n	801182a <_malloc_r+0x246>
 80119e4:	0039      	movs	r1, r7
 80119e6:	9801      	ldr	r0, [sp, #4]
 80119e8:	3108      	adds	r1, #8
 80119ea:	f003 fb07 	bl	8014ffc <_free_r>
 80119ee:	e71c      	b.n	801182a <_malloc_r+0x246>
 80119f0:	2301      	movs	r3, #1
 80119f2:	0018      	movs	r0, r3
 80119f4:	4906      	ldr	r1, [pc, #24]	; (8011a10 <_malloc_r+0x42c>)
 80119f6:	4328      	orrs	r0, r5
 80119f8:	688c      	ldr	r4, [r1, #8]
 80119fa:	4313      	orrs	r3, r2
 80119fc:	1965      	adds	r5, r4, r5
 80119fe:	6060      	str	r0, [r4, #4]
 8011a00:	608d      	str	r5, [r1, #8]
 8011a02:	606b      	str	r3, [r5, #4]
 8011a04:	e624      	b.n	8011650 <_malloc_r+0x6c>
 8011a06:	46c0      	nop			; (mov r8, r8)
 8011a08:	20000a4c 	.word	0x20000a4c
 8011a0c:	200068d4 	.word	0x200068d4
 8011a10:	20000644 	.word	0x20000644

08011a14 <__ascii_mbtowc>:
 8011a14:	b082      	sub	sp, #8
 8011a16:	2900      	cmp	r1, #0
 8011a18:	d100      	bne.n	8011a1c <__ascii_mbtowc+0x8>
 8011a1a:	a901      	add	r1, sp, #4
 8011a1c:	1e10      	subs	r0, r2, #0
 8011a1e:	d006      	beq.n	8011a2e <__ascii_mbtowc+0x1a>
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d006      	beq.n	8011a32 <__ascii_mbtowc+0x1e>
 8011a24:	7813      	ldrb	r3, [r2, #0]
 8011a26:	600b      	str	r3, [r1, #0]
 8011a28:	7810      	ldrb	r0, [r2, #0]
 8011a2a:	1e43      	subs	r3, r0, #1
 8011a2c:	4198      	sbcs	r0, r3
 8011a2e:	b002      	add	sp, #8
 8011a30:	4770      	bx	lr
 8011a32:	2002      	movs	r0, #2
 8011a34:	4240      	negs	r0, r0
 8011a36:	e7fa      	b.n	8011a2e <__ascii_mbtowc+0x1a>

08011a38 <memcmp>:
 8011a38:	b530      	push	{r4, r5, lr}
 8011a3a:	2400      	movs	r4, #0
 8011a3c:	42a2      	cmp	r2, r4
 8011a3e:	d101      	bne.n	8011a44 <memcmp+0xc>
 8011a40:	2000      	movs	r0, #0
 8011a42:	e005      	b.n	8011a50 <memcmp+0x18>
 8011a44:	5d03      	ldrb	r3, [r0, r4]
 8011a46:	1c65      	adds	r5, r4, #1
 8011a48:	5d0c      	ldrb	r4, [r1, r4]
 8011a4a:	42a3      	cmp	r3, r4
 8011a4c:	d001      	beq.n	8011a52 <memcmp+0x1a>
 8011a4e:	1b18      	subs	r0, r3, r4
 8011a50:	bd30      	pop	{r4, r5, pc}
 8011a52:	002c      	movs	r4, r5
 8011a54:	e7f2      	b.n	8011a3c <memcmp+0x4>

08011a56 <memcpy>:
 8011a56:	2300      	movs	r3, #0
 8011a58:	b510      	push	{r4, lr}
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d100      	bne.n	8011a60 <memcpy+0xa>
 8011a5e:	bd10      	pop	{r4, pc}
 8011a60:	5ccc      	ldrb	r4, [r1, r3]
 8011a62:	54c4      	strb	r4, [r0, r3]
 8011a64:	3301      	adds	r3, #1
 8011a66:	e7f8      	b.n	8011a5a <memcpy+0x4>

08011a68 <memset>:
 8011a68:	0003      	movs	r3, r0
 8011a6a:	1812      	adds	r2, r2, r0
 8011a6c:	4293      	cmp	r3, r2
 8011a6e:	d100      	bne.n	8011a72 <memset+0xa>
 8011a70:	4770      	bx	lr
 8011a72:	7019      	strb	r1, [r3, #0]
 8011a74:	3301      	adds	r3, #1
 8011a76:	e7f9      	b.n	8011a6c <memset+0x4>

08011a78 <__malloc_lock>:
 8011a78:	b510      	push	{r4, lr}
 8011a7a:	4802      	ldr	r0, [pc, #8]	; (8011a84 <__malloc_lock+0xc>)
 8011a7c:	f003 feb2 	bl	80157e4 <__retarget_lock_acquire_recursive>
 8011a80:	bd10      	pop	{r4, pc}
 8011a82:	46c0      	nop			; (mov r8, r8)
 8011a84:	20006e54 	.word	0x20006e54

08011a88 <__malloc_unlock>:
 8011a88:	b510      	push	{r4, lr}
 8011a8a:	4802      	ldr	r0, [pc, #8]	; (8011a94 <__malloc_unlock+0xc>)
 8011a8c:	f003 feab 	bl	80157e6 <__retarget_lock_release_recursive>
 8011a90:	bd10      	pop	{r4, pc}
 8011a92:	46c0      	nop			; (mov r8, r8)
 8011a94:	20006e54 	.word	0x20006e54

08011a98 <rand>:
 8011a98:	4b09      	ldr	r3, [pc, #36]	; (8011ac0 <rand+0x28>)
 8011a9a:	b510      	push	{r4, lr}
 8011a9c:	681c      	ldr	r4, [r3, #0]
 8011a9e:	4a09      	ldr	r2, [pc, #36]	; (8011ac4 <rand+0x2c>)
 8011aa0:	34a8      	adds	r4, #168	; 0xa8
 8011aa2:	6820      	ldr	r0, [r4, #0]
 8011aa4:	6861      	ldr	r1, [r4, #4]
 8011aa6:	4b08      	ldr	r3, [pc, #32]	; (8011ac8 <rand+0x30>)
 8011aa8:	f7ee fd60 	bl	800056c <__aeabi_lmul>
 8011aac:	2201      	movs	r2, #1
 8011aae:	2300      	movs	r3, #0
 8011ab0:	1880      	adds	r0, r0, r2
 8011ab2:	4159      	adcs	r1, r3
 8011ab4:	6020      	str	r0, [r4, #0]
 8011ab6:	6061      	str	r1, [r4, #4]
 8011ab8:	0048      	lsls	r0, r1, #1
 8011aba:	0840      	lsrs	r0, r0, #1
 8011abc:	bd10      	pop	{r4, pc}
 8011abe:	46c0      	nop			; (mov r8, r8)
 8011ac0:	200000a8 	.word	0x200000a8
 8011ac4:	4c957f2d 	.word	0x4c957f2d
 8011ac8:	5851f42d 	.word	0x5851f42d

08011acc <realloc>:
 8011acc:	b510      	push	{r4, lr}
 8011ace:	4b03      	ldr	r3, [pc, #12]	; (8011adc <realloc+0x10>)
 8011ad0:	000a      	movs	r2, r1
 8011ad2:	0001      	movs	r1, r0
 8011ad4:	6818      	ldr	r0, [r3, #0]
 8011ad6:	f000 f803 	bl	8011ae0 <_realloc_r>
 8011ada:	bd10      	pop	{r4, pc}
 8011adc:	200000a8 	.word	0x200000a8

08011ae0 <_realloc_r>:
 8011ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ae2:	b087      	sub	sp, #28
 8011ae4:	9003      	str	r0, [sp, #12]
 8011ae6:	1e0c      	subs	r4, r1, #0
 8011ae8:	9205      	str	r2, [sp, #20]
 8011aea:	d106      	bne.n	8011afa <_realloc_r+0x1a>
 8011aec:	0011      	movs	r1, r2
 8011aee:	f7ff fd79 	bl	80115e4 <_malloc_r>
 8011af2:	0007      	movs	r7, r0
 8011af4:	0038      	movs	r0, r7
 8011af6:	b007      	add	sp, #28
 8011af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011afa:	9803      	ldr	r0, [sp, #12]
 8011afc:	f7ff ffbc 	bl	8011a78 <__malloc_lock>
 8011b00:	0023      	movs	r3, r4
 8011b02:	3b08      	subs	r3, #8
 8011b04:	685f      	ldr	r7, [r3, #4]
 8011b06:	9302      	str	r3, [sp, #8]
 8011b08:	003a      	movs	r2, r7
 8011b0a:	2303      	movs	r3, #3
 8011b0c:	9e05      	ldr	r6, [sp, #20]
 8011b0e:	439a      	bics	r2, r3
 8011b10:	360b      	adds	r6, #11
 8011b12:	9204      	str	r2, [sp, #16]
 8011b14:	2e16      	cmp	r6, #22
 8011b16:	d908      	bls.n	8011b2a <_realloc_r+0x4a>
 8011b18:	3304      	adds	r3, #4
 8011b1a:	439e      	bics	r6, r3
 8011b1c:	9601      	str	r6, [sp, #4]
 8011b1e:	d506      	bpl.n	8011b2e <_realloc_r+0x4e>
 8011b20:	230c      	movs	r3, #12
 8011b22:	9a03      	ldr	r2, [sp, #12]
 8011b24:	2700      	movs	r7, #0
 8011b26:	6013      	str	r3, [r2, #0]
 8011b28:	e7e4      	b.n	8011af4 <_realloc_r+0x14>
 8011b2a:	2310      	movs	r3, #16
 8011b2c:	9301      	str	r3, [sp, #4]
 8011b2e:	9b01      	ldr	r3, [sp, #4]
 8011b30:	9a05      	ldr	r2, [sp, #20]
 8011b32:	4293      	cmp	r3, r2
 8011b34:	d3f4      	bcc.n	8011b20 <_realloc_r+0x40>
 8011b36:	9b01      	ldr	r3, [sp, #4]
 8011b38:	9a04      	ldr	r2, [sp, #16]
 8011b3a:	4293      	cmp	r3, r2
 8011b3c:	dc00      	bgt.n	8011b40 <_realloc_r+0x60>
 8011b3e:	e16f      	b.n	8011e20 <_realloc_r+0x340>
 8011b40:	9b02      	ldr	r3, [sp, #8]
 8011b42:	48bc      	ldr	r0, [pc, #752]	; (8011e34 <_realloc_r+0x354>)
 8011b44:	189b      	adds	r3, r3, r2
 8011b46:	6882      	ldr	r2, [r0, #8]
 8011b48:	4694      	mov	ip, r2
 8011b4a:	685a      	ldr	r2, [r3, #4]
 8011b4c:	459c      	cmp	ip, r3
 8011b4e:	d006      	beq.n	8011b5e <_realloc_r+0x7e>
 8011b50:	2501      	movs	r5, #1
 8011b52:	0011      	movs	r1, r2
 8011b54:	43a9      	bics	r1, r5
 8011b56:	1859      	adds	r1, r3, r1
 8011b58:	6849      	ldr	r1, [r1, #4]
 8011b5a:	4229      	tst	r1, r5
 8011b5c:	d146      	bne.n	8011bec <_realloc_r+0x10c>
 8011b5e:	2103      	movs	r1, #3
 8011b60:	438a      	bics	r2, r1
 8011b62:	9904      	ldr	r1, [sp, #16]
 8011b64:	188e      	adds	r6, r1, r2
 8011b66:	9901      	ldr	r1, [sp, #4]
 8011b68:	459c      	cmp	ip, r3
 8011b6a:	d117      	bne.n	8011b9c <_realloc_r+0xbc>
 8011b6c:	3110      	adds	r1, #16
 8011b6e:	42b1      	cmp	r1, r6
 8011b70:	dc3e      	bgt.n	8011bf0 <_realloc_r+0x110>
 8011b72:	9901      	ldr	r1, [sp, #4]
 8011b74:	9b02      	ldr	r3, [sp, #8]
 8011b76:	468c      	mov	ip, r1
 8011b78:	4463      	add	r3, ip
 8011b7a:	6083      	str	r3, [r0, #8]
 8011b7c:	001a      	movs	r2, r3
 8011b7e:	1a73      	subs	r3, r6, r1
 8011b80:	2601      	movs	r6, #1
 8011b82:	4333      	orrs	r3, r6
 8011b84:	6053      	str	r3, [r2, #4]
 8011b86:	0023      	movs	r3, r4
 8011b88:	3b08      	subs	r3, #8
 8011b8a:	685a      	ldr	r2, [r3, #4]
 8011b8c:	9803      	ldr	r0, [sp, #12]
 8011b8e:	4016      	ands	r6, r2
 8011b90:	430e      	orrs	r6, r1
 8011b92:	605e      	str	r6, [r3, #4]
 8011b94:	f7ff ff78 	bl	8011a88 <__malloc_unlock>
 8011b98:	0027      	movs	r7, r4
 8011b9a:	e7ab      	b.n	8011af4 <_realloc_r+0x14>
 8011b9c:	42b1      	cmp	r1, r6
 8011b9e:	dc27      	bgt.n	8011bf0 <_realloc_r+0x110>
 8011ba0:	68da      	ldr	r2, [r3, #12]
 8011ba2:	689b      	ldr	r3, [r3, #8]
 8011ba4:	60da      	str	r2, [r3, #12]
 8011ba6:	6093      	str	r3, [r2, #8]
 8011ba8:	9b01      	ldr	r3, [sp, #4]
 8011baa:	9a02      	ldr	r2, [sp, #8]
 8011bac:	1af4      	subs	r4, r6, r3
 8011bae:	9b02      	ldr	r3, [sp, #8]
 8011bb0:	1992      	adds	r2, r2, r6
 8011bb2:	685b      	ldr	r3, [r3, #4]
 8011bb4:	9304      	str	r3, [sp, #16]
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	9804      	ldr	r0, [sp, #16]
 8011bba:	4018      	ands	r0, r3
 8011bbc:	2c0f      	cmp	r4, #15
 8011bbe:	d800      	bhi.n	8011bc2 <_realloc_r+0xe2>
 8011bc0:	e130      	b.n	8011e24 <_realloc_r+0x344>
 8011bc2:	9d01      	ldr	r5, [sp, #4]
 8011bc4:	9902      	ldr	r1, [sp, #8]
 8011bc6:	4328      	orrs	r0, r5
 8011bc8:	1949      	adds	r1, r1, r5
 8011bca:	9d02      	ldr	r5, [sp, #8]
 8011bcc:	431c      	orrs	r4, r3
 8011bce:	6068      	str	r0, [r5, #4]
 8011bd0:	604c      	str	r4, [r1, #4]
 8011bd2:	6850      	ldr	r0, [r2, #4]
 8011bd4:	3108      	adds	r1, #8
 8011bd6:	4303      	orrs	r3, r0
 8011bd8:	6053      	str	r3, [r2, #4]
 8011bda:	9803      	ldr	r0, [sp, #12]
 8011bdc:	f003 fa0e 	bl	8014ffc <_free_r>
 8011be0:	9803      	ldr	r0, [sp, #12]
 8011be2:	f7ff ff51 	bl	8011a88 <__malloc_unlock>
 8011be6:	9f02      	ldr	r7, [sp, #8]
 8011be8:	3708      	adds	r7, #8
 8011bea:	e783      	b.n	8011af4 <_realloc_r+0x14>
 8011bec:	2200      	movs	r2, #0
 8011bee:	0013      	movs	r3, r2
 8011bf0:	07f9      	lsls	r1, r7, #31
 8011bf2:	d500      	bpl.n	8011bf6 <_realloc_r+0x116>
 8011bf4:	e0c6      	b.n	8011d84 <_realloc_r+0x2a4>
 8011bf6:	0021      	movs	r1, r4
 8011bf8:	3908      	subs	r1, #8
 8011bfa:	680d      	ldr	r5, [r1, #0]
 8011bfc:	9902      	ldr	r1, [sp, #8]
 8011bfe:	1b4d      	subs	r5, r1, r5
 8011c00:	2103      	movs	r1, #3
 8011c02:	686f      	ldr	r7, [r5, #4]
 8011c04:	438f      	bics	r7, r1
 8011c06:	9904      	ldr	r1, [sp, #16]
 8011c08:	187f      	adds	r7, r7, r1
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d100      	bne.n	8011c10 <_realloc_r+0x130>
 8011c0e:	e084      	b.n	8011d1a <_realloc_r+0x23a>
 8011c10:	19d6      	adds	r6, r2, r7
 8011c12:	459c      	cmp	ip, r3
 8011c14:	d148      	bne.n	8011ca8 <_realloc_r+0x1c8>
 8011c16:	9b01      	ldr	r3, [sp, #4]
 8011c18:	3310      	adds	r3, #16
 8011c1a:	42b3      	cmp	r3, r6
 8011c1c:	dc7d      	bgt.n	8011d1a <_realloc_r+0x23a>
 8011c1e:	68aa      	ldr	r2, [r5, #8]
 8011c20:	68eb      	ldr	r3, [r5, #12]
 8011c22:	002f      	movs	r7, r5
 8011c24:	60d3      	str	r3, [r2, #12]
 8011c26:	609a      	str	r2, [r3, #8]
 8011c28:	000a      	movs	r2, r1
 8011c2a:	3a04      	subs	r2, #4
 8011c2c:	3708      	adds	r7, #8
 8011c2e:	2a24      	cmp	r2, #36	; 0x24
 8011c30:	d835      	bhi.n	8011c9e <_realloc_r+0x1be>
 8011c32:	003b      	movs	r3, r7
 8011c34:	2a13      	cmp	r2, #19
 8011c36:	d908      	bls.n	8011c4a <_realloc_r+0x16a>
 8011c38:	6823      	ldr	r3, [r4, #0]
 8011c3a:	60ab      	str	r3, [r5, #8]
 8011c3c:	6863      	ldr	r3, [r4, #4]
 8011c3e:	60eb      	str	r3, [r5, #12]
 8011c40:	2a1b      	cmp	r2, #27
 8011c42:	d81a      	bhi.n	8011c7a <_realloc_r+0x19a>
 8011c44:	002b      	movs	r3, r5
 8011c46:	3408      	adds	r4, #8
 8011c48:	3310      	adds	r3, #16
 8011c4a:	6822      	ldr	r2, [r4, #0]
 8011c4c:	601a      	str	r2, [r3, #0]
 8011c4e:	6862      	ldr	r2, [r4, #4]
 8011c50:	605a      	str	r2, [r3, #4]
 8011c52:	68a2      	ldr	r2, [r4, #8]
 8011c54:	609a      	str	r2, [r3, #8]
 8011c56:	9b01      	ldr	r3, [sp, #4]
 8011c58:	18ea      	adds	r2, r5, r3
 8011c5a:	4b76      	ldr	r3, [pc, #472]	; (8011e34 <_realloc_r+0x354>)
 8011c5c:	609a      	str	r2, [r3, #8]
 8011c5e:	9b01      	ldr	r3, [sp, #4]
 8011c60:	1af3      	subs	r3, r6, r3
 8011c62:	2601      	movs	r6, #1
 8011c64:	4333      	orrs	r3, r6
 8011c66:	6053      	str	r3, [r2, #4]
 8011c68:	686b      	ldr	r3, [r5, #4]
 8011c6a:	401e      	ands	r6, r3
 8011c6c:	9b01      	ldr	r3, [sp, #4]
 8011c6e:	431e      	orrs	r6, r3
 8011c70:	606e      	str	r6, [r5, #4]
 8011c72:	9803      	ldr	r0, [sp, #12]
 8011c74:	f7ff ff08 	bl	8011a88 <__malloc_unlock>
 8011c78:	e73c      	b.n	8011af4 <_realloc_r+0x14>
 8011c7a:	68a3      	ldr	r3, [r4, #8]
 8011c7c:	612b      	str	r3, [r5, #16]
 8011c7e:	68e3      	ldr	r3, [r4, #12]
 8011c80:	616b      	str	r3, [r5, #20]
 8011c82:	2a24      	cmp	r2, #36	; 0x24
 8011c84:	d003      	beq.n	8011c8e <_realloc_r+0x1ae>
 8011c86:	002b      	movs	r3, r5
 8011c88:	3410      	adds	r4, #16
 8011c8a:	3318      	adds	r3, #24
 8011c8c:	e7dd      	b.n	8011c4a <_realloc_r+0x16a>
 8011c8e:	6923      	ldr	r3, [r4, #16]
 8011c90:	61ab      	str	r3, [r5, #24]
 8011c92:	002b      	movs	r3, r5
 8011c94:	6962      	ldr	r2, [r4, #20]
 8011c96:	3320      	adds	r3, #32
 8011c98:	61ea      	str	r2, [r5, #28]
 8011c9a:	3418      	adds	r4, #24
 8011c9c:	e7d5      	b.n	8011c4a <_realloc_r+0x16a>
 8011c9e:	0021      	movs	r1, r4
 8011ca0:	0038      	movs	r0, r7
 8011ca2:	f003 fdac 	bl	80157fe <memmove>
 8011ca6:	e7d6      	b.n	8011c56 <_realloc_r+0x176>
 8011ca8:	9a01      	ldr	r2, [sp, #4]
 8011caa:	42b2      	cmp	r2, r6
 8011cac:	dc35      	bgt.n	8011d1a <_realloc_r+0x23a>
 8011cae:	0028      	movs	r0, r5
 8011cb0:	68da      	ldr	r2, [r3, #12]
 8011cb2:	689b      	ldr	r3, [r3, #8]
 8011cb4:	3008      	adds	r0, #8
 8011cb6:	60da      	str	r2, [r3, #12]
 8011cb8:	6093      	str	r3, [r2, #8]
 8011cba:	68aa      	ldr	r2, [r5, #8]
 8011cbc:	68eb      	ldr	r3, [r5, #12]
 8011cbe:	60d3      	str	r3, [r2, #12]
 8011cc0:	609a      	str	r2, [r3, #8]
 8011cc2:	9a04      	ldr	r2, [sp, #16]
 8011cc4:	3a04      	subs	r2, #4
 8011cc6:	2a24      	cmp	r2, #36	; 0x24
 8011cc8:	d823      	bhi.n	8011d12 <_realloc_r+0x232>
 8011cca:	2a13      	cmp	r2, #19
 8011ccc:	d907      	bls.n	8011cde <_realloc_r+0x1fe>
 8011cce:	6823      	ldr	r3, [r4, #0]
 8011cd0:	60ab      	str	r3, [r5, #8]
 8011cd2:	6863      	ldr	r3, [r4, #4]
 8011cd4:	60eb      	str	r3, [r5, #12]
 8011cd6:	2a1b      	cmp	r2, #27
 8011cd8:	d809      	bhi.n	8011cee <_realloc_r+0x20e>
 8011cda:	3408      	adds	r4, #8
 8011cdc:	3008      	adds	r0, #8
 8011cde:	6823      	ldr	r3, [r4, #0]
 8011ce0:	6003      	str	r3, [r0, #0]
 8011ce2:	6863      	ldr	r3, [r4, #4]
 8011ce4:	6043      	str	r3, [r0, #4]
 8011ce6:	68a3      	ldr	r3, [r4, #8]
 8011ce8:	6083      	str	r3, [r0, #8]
 8011cea:	9502      	str	r5, [sp, #8]
 8011cec:	e75c      	b.n	8011ba8 <_realloc_r+0xc8>
 8011cee:	68a3      	ldr	r3, [r4, #8]
 8011cf0:	612b      	str	r3, [r5, #16]
 8011cf2:	68e3      	ldr	r3, [r4, #12]
 8011cf4:	616b      	str	r3, [r5, #20]
 8011cf6:	2a24      	cmp	r2, #36	; 0x24
 8011cf8:	d003      	beq.n	8011d02 <_realloc_r+0x222>
 8011cfa:	0028      	movs	r0, r5
 8011cfc:	3410      	adds	r4, #16
 8011cfe:	3018      	adds	r0, #24
 8011d00:	e7ed      	b.n	8011cde <_realloc_r+0x1fe>
 8011d02:	0028      	movs	r0, r5
 8011d04:	6923      	ldr	r3, [r4, #16]
 8011d06:	3020      	adds	r0, #32
 8011d08:	61ab      	str	r3, [r5, #24]
 8011d0a:	6963      	ldr	r3, [r4, #20]
 8011d0c:	3418      	adds	r4, #24
 8011d0e:	61eb      	str	r3, [r5, #28]
 8011d10:	e7e5      	b.n	8011cde <_realloc_r+0x1fe>
 8011d12:	0021      	movs	r1, r4
 8011d14:	f003 fd73 	bl	80157fe <memmove>
 8011d18:	e7e7      	b.n	8011cea <_realloc_r+0x20a>
 8011d1a:	9b01      	ldr	r3, [sp, #4]
 8011d1c:	42bb      	cmp	r3, r7
 8011d1e:	dc31      	bgt.n	8011d84 <_realloc_r+0x2a4>
 8011d20:	0028      	movs	r0, r5
 8011d22:	68aa      	ldr	r2, [r5, #8]
 8011d24:	68eb      	ldr	r3, [r5, #12]
 8011d26:	3008      	adds	r0, #8
 8011d28:	60d3      	str	r3, [r2, #12]
 8011d2a:	609a      	str	r2, [r3, #8]
 8011d2c:	9a04      	ldr	r2, [sp, #16]
 8011d2e:	3a04      	subs	r2, #4
 8011d30:	2a24      	cmp	r2, #36	; 0x24
 8011d32:	d823      	bhi.n	8011d7c <_realloc_r+0x29c>
 8011d34:	2a13      	cmp	r2, #19
 8011d36:	d907      	bls.n	8011d48 <_realloc_r+0x268>
 8011d38:	6823      	ldr	r3, [r4, #0]
 8011d3a:	60ab      	str	r3, [r5, #8]
 8011d3c:	6863      	ldr	r3, [r4, #4]
 8011d3e:	60eb      	str	r3, [r5, #12]
 8011d40:	2a1b      	cmp	r2, #27
 8011d42:	d809      	bhi.n	8011d58 <_realloc_r+0x278>
 8011d44:	3408      	adds	r4, #8
 8011d46:	3008      	adds	r0, #8
 8011d48:	6823      	ldr	r3, [r4, #0]
 8011d4a:	6003      	str	r3, [r0, #0]
 8011d4c:	6863      	ldr	r3, [r4, #4]
 8011d4e:	6043      	str	r3, [r0, #4]
 8011d50:	68a3      	ldr	r3, [r4, #8]
 8011d52:	6083      	str	r3, [r0, #8]
 8011d54:	003e      	movs	r6, r7
 8011d56:	e7c8      	b.n	8011cea <_realloc_r+0x20a>
 8011d58:	68a3      	ldr	r3, [r4, #8]
 8011d5a:	612b      	str	r3, [r5, #16]
 8011d5c:	68e3      	ldr	r3, [r4, #12]
 8011d5e:	616b      	str	r3, [r5, #20]
 8011d60:	2a24      	cmp	r2, #36	; 0x24
 8011d62:	d003      	beq.n	8011d6c <_realloc_r+0x28c>
 8011d64:	0028      	movs	r0, r5
 8011d66:	3410      	adds	r4, #16
 8011d68:	3018      	adds	r0, #24
 8011d6a:	e7ed      	b.n	8011d48 <_realloc_r+0x268>
 8011d6c:	0028      	movs	r0, r5
 8011d6e:	6923      	ldr	r3, [r4, #16]
 8011d70:	3020      	adds	r0, #32
 8011d72:	61ab      	str	r3, [r5, #24]
 8011d74:	6963      	ldr	r3, [r4, #20]
 8011d76:	3418      	adds	r4, #24
 8011d78:	61eb      	str	r3, [r5, #28]
 8011d7a:	e7e5      	b.n	8011d48 <_realloc_r+0x268>
 8011d7c:	0021      	movs	r1, r4
 8011d7e:	f003 fd3e 	bl	80157fe <memmove>
 8011d82:	e7e7      	b.n	8011d54 <_realloc_r+0x274>
 8011d84:	9905      	ldr	r1, [sp, #20]
 8011d86:	9803      	ldr	r0, [sp, #12]
 8011d88:	f7ff fc2c 	bl	80115e4 <_malloc_r>
 8011d8c:	1e07      	subs	r7, r0, #0
 8011d8e:	d100      	bne.n	8011d92 <_realloc_r+0x2b2>
 8011d90:	e76f      	b.n	8011c72 <_realloc_r+0x192>
 8011d92:	0023      	movs	r3, r4
 8011d94:	2201      	movs	r2, #1
 8011d96:	3b08      	subs	r3, #8
 8011d98:	685b      	ldr	r3, [r3, #4]
 8011d9a:	4393      	bics	r3, r2
 8011d9c:	9a02      	ldr	r2, [sp, #8]
 8011d9e:	18d3      	adds	r3, r2, r3
 8011da0:	0002      	movs	r2, r0
 8011da2:	3a08      	subs	r2, #8
 8011da4:	4293      	cmp	r3, r2
 8011da6:	d105      	bne.n	8011db4 <_realloc_r+0x2d4>
 8011da8:	685e      	ldr	r6, [r3, #4]
 8011daa:	2303      	movs	r3, #3
 8011dac:	439e      	bics	r6, r3
 8011dae:	9b04      	ldr	r3, [sp, #16]
 8011db0:	18f6      	adds	r6, r6, r3
 8011db2:	e6f9      	b.n	8011ba8 <_realloc_r+0xc8>
 8011db4:	9a04      	ldr	r2, [sp, #16]
 8011db6:	3a04      	subs	r2, #4
 8011db8:	2a24      	cmp	r2, #36	; 0x24
 8011dba:	d82d      	bhi.n	8011e18 <_realloc_r+0x338>
 8011dbc:	2a13      	cmp	r2, #19
 8011dbe:	d928      	bls.n	8011e12 <_realloc_r+0x332>
 8011dc0:	6823      	ldr	r3, [r4, #0]
 8011dc2:	6003      	str	r3, [r0, #0]
 8011dc4:	6863      	ldr	r3, [r4, #4]
 8011dc6:	6043      	str	r3, [r0, #4]
 8011dc8:	2a1b      	cmp	r2, #27
 8011dca:	d80e      	bhi.n	8011dea <_realloc_r+0x30a>
 8011dcc:	0022      	movs	r2, r4
 8011dce:	0003      	movs	r3, r0
 8011dd0:	3208      	adds	r2, #8
 8011dd2:	3308      	adds	r3, #8
 8011dd4:	6811      	ldr	r1, [r2, #0]
 8011dd6:	6019      	str	r1, [r3, #0]
 8011dd8:	6851      	ldr	r1, [r2, #4]
 8011dda:	6059      	str	r1, [r3, #4]
 8011ddc:	6892      	ldr	r2, [r2, #8]
 8011dde:	609a      	str	r2, [r3, #8]
 8011de0:	0021      	movs	r1, r4
 8011de2:	9803      	ldr	r0, [sp, #12]
 8011de4:	f003 f90a 	bl	8014ffc <_free_r>
 8011de8:	e743      	b.n	8011c72 <_realloc_r+0x192>
 8011dea:	68a3      	ldr	r3, [r4, #8]
 8011dec:	6083      	str	r3, [r0, #8]
 8011dee:	68e3      	ldr	r3, [r4, #12]
 8011df0:	60c3      	str	r3, [r0, #12]
 8011df2:	2a24      	cmp	r2, #36	; 0x24
 8011df4:	d004      	beq.n	8011e00 <_realloc_r+0x320>
 8011df6:	0022      	movs	r2, r4
 8011df8:	0003      	movs	r3, r0
 8011dfa:	3210      	adds	r2, #16
 8011dfc:	3310      	adds	r3, #16
 8011dfe:	e7e9      	b.n	8011dd4 <_realloc_r+0x2f4>
 8011e00:	6923      	ldr	r3, [r4, #16]
 8011e02:	0022      	movs	r2, r4
 8011e04:	6103      	str	r3, [r0, #16]
 8011e06:	0003      	movs	r3, r0
 8011e08:	6961      	ldr	r1, [r4, #20]
 8011e0a:	3218      	adds	r2, #24
 8011e0c:	3318      	adds	r3, #24
 8011e0e:	6141      	str	r1, [r0, #20]
 8011e10:	e7e0      	b.n	8011dd4 <_realloc_r+0x2f4>
 8011e12:	0003      	movs	r3, r0
 8011e14:	0022      	movs	r2, r4
 8011e16:	e7dd      	b.n	8011dd4 <_realloc_r+0x2f4>
 8011e18:	0021      	movs	r1, r4
 8011e1a:	f003 fcf0 	bl	80157fe <memmove>
 8011e1e:	e7df      	b.n	8011de0 <_realloc_r+0x300>
 8011e20:	9e04      	ldr	r6, [sp, #16]
 8011e22:	e6c1      	b.n	8011ba8 <_realloc_r+0xc8>
 8011e24:	9902      	ldr	r1, [sp, #8]
 8011e26:	4306      	orrs	r6, r0
 8011e28:	604e      	str	r6, [r1, #4]
 8011e2a:	6851      	ldr	r1, [r2, #4]
 8011e2c:	430b      	orrs	r3, r1
 8011e2e:	6053      	str	r3, [r2, #4]
 8011e30:	e6d6      	b.n	8011be0 <_realloc_r+0x100>
 8011e32:	46c0      	nop			; (mov r8, r8)
 8011e34:	20000644 	.word	0x20000644

08011e38 <_sbrk_r>:
 8011e38:	2300      	movs	r3, #0
 8011e3a:	b570      	push	{r4, r5, r6, lr}
 8011e3c:	4c06      	ldr	r4, [pc, #24]	; (8011e58 <_sbrk_r+0x20>)
 8011e3e:	0005      	movs	r5, r0
 8011e40:	0008      	movs	r0, r1
 8011e42:	6023      	str	r3, [r4, #0]
 8011e44:	f004 f9ec 	bl	8016220 <_sbrk>
 8011e48:	1c43      	adds	r3, r0, #1
 8011e4a:	d103      	bne.n	8011e54 <_sbrk_r+0x1c>
 8011e4c:	6823      	ldr	r3, [r4, #0]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d000      	beq.n	8011e54 <_sbrk_r+0x1c>
 8011e52:	602b      	str	r3, [r5, #0]
 8011e54:	bd70      	pop	{r4, r5, r6, pc}
 8011e56:	46c0      	nop			; (mov r8, r8)
 8011e58:	20006e5c 	.word	0x20006e5c

08011e5c <sprintf>:
 8011e5c:	b40e      	push	{r1, r2, r3}
 8011e5e:	b500      	push	{lr}
 8011e60:	490b      	ldr	r1, [pc, #44]	; (8011e90 <sprintf+0x34>)
 8011e62:	b09c      	sub	sp, #112	; 0x70
 8011e64:	ab1d      	add	r3, sp, #116	; 0x74
 8011e66:	9002      	str	r0, [sp, #8]
 8011e68:	9006      	str	r0, [sp, #24]
 8011e6a:	9107      	str	r1, [sp, #28]
 8011e6c:	9104      	str	r1, [sp, #16]
 8011e6e:	4809      	ldr	r0, [pc, #36]	; (8011e94 <sprintf+0x38>)
 8011e70:	4909      	ldr	r1, [pc, #36]	; (8011e98 <sprintf+0x3c>)
 8011e72:	cb04      	ldmia	r3!, {r2}
 8011e74:	9105      	str	r1, [sp, #20]
 8011e76:	6800      	ldr	r0, [r0, #0]
 8011e78:	a902      	add	r1, sp, #8
 8011e7a:	9301      	str	r3, [sp, #4]
 8011e7c:	f000 ff78 	bl	8012d70 <_svfprintf_r>
 8011e80:	2300      	movs	r3, #0
 8011e82:	9a02      	ldr	r2, [sp, #8]
 8011e84:	7013      	strb	r3, [r2, #0]
 8011e86:	b01c      	add	sp, #112	; 0x70
 8011e88:	bc08      	pop	{r3}
 8011e8a:	b003      	add	sp, #12
 8011e8c:	4718      	bx	r3
 8011e8e:	46c0      	nop			; (mov r8, r8)
 8011e90:	7fffffff 	.word	0x7fffffff
 8011e94:	200000a8 	.word	0x200000a8
 8011e98:	ffff0208 	.word	0xffff0208

08011e9c <strcat>:
 8011e9c:	0002      	movs	r2, r0
 8011e9e:	b510      	push	{r4, lr}
 8011ea0:	7813      	ldrb	r3, [r2, #0]
 8011ea2:	1c54      	adds	r4, r2, #1
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d105      	bne.n	8011eb4 <strcat+0x18>
 8011ea8:	5ccc      	ldrb	r4, [r1, r3]
 8011eaa:	54d4      	strb	r4, [r2, r3]
 8011eac:	3301      	adds	r3, #1
 8011eae:	2c00      	cmp	r4, #0
 8011eb0:	d1fa      	bne.n	8011ea8 <strcat+0xc>
 8011eb2:	bd10      	pop	{r4, pc}
 8011eb4:	0022      	movs	r2, r4
 8011eb6:	e7f3      	b.n	8011ea0 <strcat+0x4>

08011eb8 <strchr>:
 8011eb8:	b2c9      	uxtb	r1, r1
 8011eba:	7803      	ldrb	r3, [r0, #0]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d004      	beq.n	8011eca <strchr+0x12>
 8011ec0:	428b      	cmp	r3, r1
 8011ec2:	d100      	bne.n	8011ec6 <strchr+0xe>
 8011ec4:	4770      	bx	lr
 8011ec6:	3001      	adds	r0, #1
 8011ec8:	e7f7      	b.n	8011eba <strchr+0x2>
 8011eca:	424b      	negs	r3, r1
 8011ecc:	4159      	adcs	r1, r3
 8011ece:	4249      	negs	r1, r1
 8011ed0:	4008      	ands	r0, r1
 8011ed2:	e7f7      	b.n	8011ec4 <strchr+0xc>

08011ed4 <strcpy>:
 8011ed4:	0003      	movs	r3, r0
 8011ed6:	780a      	ldrb	r2, [r1, #0]
 8011ed8:	3101      	adds	r1, #1
 8011eda:	701a      	strb	r2, [r3, #0]
 8011edc:	3301      	adds	r3, #1
 8011ede:	2a00      	cmp	r2, #0
 8011ee0:	d1f9      	bne.n	8011ed6 <strcpy+0x2>
 8011ee2:	4770      	bx	lr

08011ee4 <strncmp>:
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	b530      	push	{r4, r5, lr}
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d00a      	beq.n	8011f02 <strncmp+0x1e>
 8011eec:	3a01      	subs	r2, #1
 8011eee:	5cc4      	ldrb	r4, [r0, r3]
 8011ef0:	5ccd      	ldrb	r5, [r1, r3]
 8011ef2:	42ac      	cmp	r4, r5
 8011ef4:	d104      	bne.n	8011f00 <strncmp+0x1c>
 8011ef6:	4293      	cmp	r3, r2
 8011ef8:	d002      	beq.n	8011f00 <strncmp+0x1c>
 8011efa:	3301      	adds	r3, #1
 8011efc:	2c00      	cmp	r4, #0
 8011efe:	d1f6      	bne.n	8011eee <strncmp+0xa>
 8011f00:	1b63      	subs	r3, r4, r5
 8011f02:	0018      	movs	r0, r3
 8011f04:	bd30      	pop	{r4, r5, pc}

08011f06 <strncpy>:
 8011f06:	b530      	push	{r4, r5, lr}
 8011f08:	0005      	movs	r5, r0
 8011f0a:	2a00      	cmp	r2, #0
 8011f0c:	d100      	bne.n	8011f10 <strncpy+0xa>
 8011f0e:	bd30      	pop	{r4, r5, pc}
 8011f10:	780c      	ldrb	r4, [r1, #0]
 8011f12:	3a01      	subs	r2, #1
 8011f14:	1c6b      	adds	r3, r5, #1
 8011f16:	702c      	strb	r4, [r5, #0]
 8011f18:	3101      	adds	r1, #1
 8011f1a:	2c00      	cmp	r4, #0
 8011f1c:	d105      	bne.n	8011f2a <strncpy+0x24>
 8011f1e:	189a      	adds	r2, r3, r2
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d0f4      	beq.n	8011f0e <strncpy+0x8>
 8011f24:	701c      	strb	r4, [r3, #0]
 8011f26:	3301      	adds	r3, #1
 8011f28:	e7fa      	b.n	8011f20 <strncpy+0x1a>
 8011f2a:	001d      	movs	r5, r3
 8011f2c:	e7ed      	b.n	8011f0a <strncpy+0x4>
	...

08011f30 <sulp>:
 8011f30:	b570      	push	{r4, r5, r6, lr}
 8011f32:	0016      	movs	r6, r2
 8011f34:	000d      	movs	r5, r1
 8011f36:	f003 ff17 	bl	8015d68 <__ulp>
 8011f3a:	2e00      	cmp	r6, #0
 8011f3c:	d00d      	beq.n	8011f5a <sulp+0x2a>
 8011f3e:	236b      	movs	r3, #107	; 0x6b
 8011f40:	006a      	lsls	r2, r5, #1
 8011f42:	0d52      	lsrs	r2, r2, #21
 8011f44:	1a9b      	subs	r3, r3, r2
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	dd07      	ble.n	8011f5a <sulp+0x2a>
 8011f4a:	2400      	movs	r4, #0
 8011f4c:	4a03      	ldr	r2, [pc, #12]	; (8011f5c <sulp+0x2c>)
 8011f4e:	051b      	lsls	r3, r3, #20
 8011f50:	189d      	adds	r5, r3, r2
 8011f52:	002b      	movs	r3, r5
 8011f54:	0022      	movs	r2, r4
 8011f56:	f7ef fbff 	bl	8001758 <__aeabi_dmul>
 8011f5a:	bd70      	pop	{r4, r5, r6, pc}
 8011f5c:	3ff00000 	.word	0x3ff00000

08011f60 <_strtod_l>:
 8011f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f62:	b0a7      	sub	sp, #156	; 0x9c
 8011f64:	9307      	str	r3, [sp, #28]
 8011f66:	2300      	movs	r3, #0
 8011f68:	9004      	str	r0, [sp, #16]
 8011f6a:	9807      	ldr	r0, [sp, #28]
 8011f6c:	9322      	str	r3, [sp, #136]	; 0x88
 8011f6e:	9106      	str	r1, [sp, #24]
 8011f70:	921d      	str	r2, [sp, #116]	; 0x74
 8011f72:	f003 fc28 	bl	80157c6 <__localeconv_l>
 8011f76:	0005      	movs	r5, r0
 8011f78:	6800      	ldr	r0, [r0, #0]
 8011f7a:	f7ee f8cd 	bl	8000118 <strlen>
 8011f7e:	2600      	movs	r6, #0
 8011f80:	2700      	movs	r7, #0
 8011f82:	9b06      	ldr	r3, [sp, #24]
 8011f84:	9005      	str	r0, [sp, #20]
 8011f86:	9321      	str	r3, [sp, #132]	; 0x84
 8011f88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f8a:	781a      	ldrb	r2, [r3, #0]
 8011f8c:	2a0d      	cmp	r2, #13
 8011f8e:	d839      	bhi.n	8012004 <_strtod_l+0xa4>
 8011f90:	2a09      	cmp	r2, #9
 8011f92:	d23d      	bcs.n	8012010 <_strtod_l+0xb0>
 8011f94:	2a00      	cmp	r2, #0
 8011f96:	d044      	beq.n	8012022 <_strtod_l+0xc2>
 8011f98:	2300      	movs	r3, #0
 8011f9a:	9313      	str	r3, [sp, #76]	; 0x4c
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8011fa0:	920c      	str	r2, [sp, #48]	; 0x30
 8011fa2:	7823      	ldrb	r3, [r4, #0]
 8011fa4:	2b30      	cmp	r3, #48	; 0x30
 8011fa6:	d000      	beq.n	8011faa <_strtod_l+0x4a>
 8011fa8:	e07e      	b.n	80120a8 <_strtod_l+0x148>
 8011faa:	7863      	ldrb	r3, [r4, #1]
 8011fac:	2b58      	cmp	r3, #88	; 0x58
 8011fae:	d002      	beq.n	8011fb6 <_strtod_l+0x56>
 8011fb0:	2b78      	cmp	r3, #120	; 0x78
 8011fb2:	d000      	beq.n	8011fb6 <_strtod_l+0x56>
 8011fb4:	e06e      	b.n	8012094 <_strtod_l+0x134>
 8011fb6:	9b07      	ldr	r3, [sp, #28]
 8011fb8:	4a96      	ldr	r2, [pc, #600]	; (8012214 <_strtod_l+0x2b4>)
 8011fba:	9302      	str	r3, [sp, #8]
 8011fbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011fbe:	a921      	add	r1, sp, #132	; 0x84
 8011fc0:	9301      	str	r3, [sp, #4]
 8011fc2:	ab22      	add	r3, sp, #136	; 0x88
 8011fc4:	9300      	str	r3, [sp, #0]
 8011fc6:	9804      	ldr	r0, [sp, #16]
 8011fc8:	ab23      	add	r3, sp, #140	; 0x8c
 8011fca:	f003 f914 	bl	80151f6 <__gethex>
 8011fce:	2507      	movs	r5, #7
 8011fd0:	9005      	str	r0, [sp, #20]
 8011fd2:	4005      	ands	r5, r0
 8011fd4:	d005      	beq.n	8011fe2 <_strtod_l+0x82>
 8011fd6:	2d06      	cmp	r5, #6
 8011fd8:	d12f      	bne.n	801203a <_strtod_l+0xda>
 8011fda:	2300      	movs	r3, #0
 8011fdc:	3401      	adds	r4, #1
 8011fde:	9421      	str	r4, [sp, #132]	; 0x84
 8011fe0:	9313      	str	r3, [sp, #76]	; 0x4c
 8011fe2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d002      	beq.n	8011fee <_strtod_l+0x8e>
 8011fe8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011fea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011fec:	601a      	str	r2, [r3, #0]
 8011fee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d01d      	beq.n	8012030 <_strtod_l+0xd0>
 8011ff4:	2380      	movs	r3, #128	; 0x80
 8011ff6:	0032      	movs	r2, r6
 8011ff8:	061b      	lsls	r3, r3, #24
 8011ffa:	18fb      	adds	r3, r7, r3
 8011ffc:	0010      	movs	r0, r2
 8011ffe:	0019      	movs	r1, r3
 8012000:	b027      	add	sp, #156	; 0x9c
 8012002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012004:	2a2b      	cmp	r2, #43	; 0x2b
 8012006:	d016      	beq.n	8012036 <_strtod_l+0xd6>
 8012008:	2a2d      	cmp	r2, #45	; 0x2d
 801200a:	d003      	beq.n	8012014 <_strtod_l+0xb4>
 801200c:	2a20      	cmp	r2, #32
 801200e:	d1c3      	bne.n	8011f98 <_strtod_l+0x38>
 8012010:	3301      	adds	r3, #1
 8012012:	e7b8      	b.n	8011f86 <_strtod_l+0x26>
 8012014:	2201      	movs	r2, #1
 8012016:	9213      	str	r2, [sp, #76]	; 0x4c
 8012018:	1c5a      	adds	r2, r3, #1
 801201a:	9221      	str	r2, [sp, #132]	; 0x84
 801201c:	785b      	ldrb	r3, [r3, #1]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d1bc      	bne.n	8011f9c <_strtod_l+0x3c>
 8012022:	9b06      	ldr	r3, [sp, #24]
 8012024:	9321      	str	r3, [sp, #132]	; 0x84
 8012026:	2300      	movs	r3, #0
 8012028:	9313      	str	r3, [sp, #76]	; 0x4c
 801202a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801202c:	2b00      	cmp	r3, #0
 801202e:	d1db      	bne.n	8011fe8 <_strtod_l+0x88>
 8012030:	0032      	movs	r2, r6
 8012032:	003b      	movs	r3, r7
 8012034:	e7e2      	b.n	8011ffc <_strtod_l+0x9c>
 8012036:	2200      	movs	r2, #0
 8012038:	e7ed      	b.n	8012016 <_strtod_l+0xb6>
 801203a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801203c:	2a00      	cmp	r2, #0
 801203e:	d007      	beq.n	8012050 <_strtod_l+0xf0>
 8012040:	2135      	movs	r1, #53	; 0x35
 8012042:	a824      	add	r0, sp, #144	; 0x90
 8012044:	f003 ff7d 	bl	8015f42 <__copybits>
 8012048:	9922      	ldr	r1, [sp, #136]	; 0x88
 801204a:	9804      	ldr	r0, [sp, #16]
 801204c:	f003 fc12 	bl	8015874 <_Bfree>
 8012050:	1e68      	subs	r0, r5, #1
 8012052:	2804      	cmp	r0, #4
 8012054:	d806      	bhi.n	8012064 <_strtod_l+0x104>
 8012056:	f7ee f867 	bl	8000128 <__gnu_thumb1_case_uqi>
 801205a:	030c      	.short	0x030c
 801205c:	1917      	.short	0x1917
 801205e:	0c          	.byte	0x0c
 801205f:	00          	.byte	0x00
 8012060:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8012062:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8012064:	9b05      	ldr	r3, [sp, #20]
 8012066:	071b      	lsls	r3, r3, #28
 8012068:	d5bb      	bpl.n	8011fe2 <_strtod_l+0x82>
 801206a:	2380      	movs	r3, #128	; 0x80
 801206c:	061b      	lsls	r3, r3, #24
 801206e:	431f      	orrs	r7, r3
 8012070:	e7b7      	b.n	8011fe2 <_strtod_l+0x82>
 8012072:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012074:	4a68      	ldr	r2, [pc, #416]	; (8012218 <_strtod_l+0x2b8>)
 8012076:	4969      	ldr	r1, [pc, #420]	; (801221c <_strtod_l+0x2bc>)
 8012078:	401a      	ands	r2, r3
 801207a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801207c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801207e:	185b      	adds	r3, r3, r1
 8012080:	051b      	lsls	r3, r3, #20
 8012082:	431a      	orrs	r2, r3
 8012084:	0017      	movs	r7, r2
 8012086:	e7ed      	b.n	8012064 <_strtod_l+0x104>
 8012088:	4f65      	ldr	r7, [pc, #404]	; (8012220 <_strtod_l+0x2c0>)
 801208a:	e7eb      	b.n	8012064 <_strtod_l+0x104>
 801208c:	2601      	movs	r6, #1
 801208e:	4f65      	ldr	r7, [pc, #404]	; (8012224 <_strtod_l+0x2c4>)
 8012090:	4276      	negs	r6, r6
 8012092:	e7e7      	b.n	8012064 <_strtod_l+0x104>
 8012094:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012096:	1c5a      	adds	r2, r3, #1
 8012098:	9221      	str	r2, [sp, #132]	; 0x84
 801209a:	785b      	ldrb	r3, [r3, #1]
 801209c:	2b30      	cmp	r3, #48	; 0x30
 801209e:	d0f9      	beq.n	8012094 <_strtod_l+0x134>
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d09e      	beq.n	8011fe2 <_strtod_l+0x82>
 80120a4:	2301      	movs	r3, #1
 80120a6:	930c      	str	r3, [sp, #48]	; 0x30
 80120a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80120aa:	220a      	movs	r2, #10
 80120ac:	9312      	str	r3, [sp, #72]	; 0x48
 80120ae:	2300      	movs	r3, #0
 80120b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80120b2:	9308      	str	r3, [sp, #32]
 80120b4:	930a      	str	r3, [sp, #40]	; 0x28
 80120b6:	9821      	ldr	r0, [sp, #132]	; 0x84
 80120b8:	7804      	ldrb	r4, [r0, #0]
 80120ba:	0023      	movs	r3, r4
 80120bc:	3b30      	subs	r3, #48	; 0x30
 80120be:	b2d9      	uxtb	r1, r3
 80120c0:	2909      	cmp	r1, #9
 80120c2:	d934      	bls.n	801212e <_strtod_l+0x1ce>
 80120c4:	9a05      	ldr	r2, [sp, #20]
 80120c6:	6829      	ldr	r1, [r5, #0]
 80120c8:	f7ff ff0c 	bl	8011ee4 <strncmp>
 80120cc:	2800      	cmp	r0, #0
 80120ce:	d040      	beq.n	8012152 <_strtod_l+0x1f2>
 80120d0:	2000      	movs	r0, #0
 80120d2:	0023      	movs	r3, r4
 80120d4:	4684      	mov	ip, r0
 80120d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120d8:	9007      	str	r0, [sp, #28]
 80120da:	9205      	str	r2, [sp, #20]
 80120dc:	2220      	movs	r2, #32
 80120de:	0019      	movs	r1, r3
 80120e0:	4391      	bics	r1, r2
 80120e2:	000a      	movs	r2, r1
 80120e4:	2100      	movs	r1, #0
 80120e6:	2a45      	cmp	r2, #69	; 0x45
 80120e8:	d000      	beq.n	80120ec <_strtod_l+0x18c>
 80120ea:	e0bf      	b.n	801226c <_strtod_l+0x30c>
 80120ec:	9b05      	ldr	r3, [sp, #20]
 80120ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80120f0:	4303      	orrs	r3, r0
 80120f2:	4313      	orrs	r3, r2
 80120f4:	428b      	cmp	r3, r1
 80120f6:	d094      	beq.n	8012022 <_strtod_l+0xc2>
 80120f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80120fa:	9306      	str	r3, [sp, #24]
 80120fc:	3301      	adds	r3, #1
 80120fe:	9321      	str	r3, [sp, #132]	; 0x84
 8012100:	9b06      	ldr	r3, [sp, #24]
 8012102:	785b      	ldrb	r3, [r3, #1]
 8012104:	2b2b      	cmp	r3, #43	; 0x2b
 8012106:	d100      	bne.n	801210a <_strtod_l+0x1aa>
 8012108:	e082      	b.n	8012210 <_strtod_l+0x2b0>
 801210a:	000c      	movs	r4, r1
 801210c:	2b2d      	cmp	r3, #45	; 0x2d
 801210e:	d105      	bne.n	801211c <_strtod_l+0x1bc>
 8012110:	2401      	movs	r4, #1
 8012112:	9b06      	ldr	r3, [sp, #24]
 8012114:	3302      	adds	r3, #2
 8012116:	9321      	str	r3, [sp, #132]	; 0x84
 8012118:	9b06      	ldr	r3, [sp, #24]
 801211a:	789b      	ldrb	r3, [r3, #2]
 801211c:	001a      	movs	r2, r3
 801211e:	3a30      	subs	r2, #48	; 0x30
 8012120:	2a09      	cmp	r2, #9
 8012122:	d800      	bhi.n	8012126 <_strtod_l+0x1c6>
 8012124:	e084      	b.n	8012230 <_strtod_l+0x2d0>
 8012126:	9a06      	ldr	r2, [sp, #24]
 8012128:	2100      	movs	r1, #0
 801212a:	9221      	str	r2, [sp, #132]	; 0x84
 801212c:	e09e      	b.n	801226c <_strtod_l+0x30c>
 801212e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012130:	2908      	cmp	r1, #8
 8012132:	dc09      	bgt.n	8012148 <_strtod_l+0x1e8>
 8012134:	9908      	ldr	r1, [sp, #32]
 8012136:	4351      	muls	r1, r2
 8012138:	18cb      	adds	r3, r1, r3
 801213a:	9308      	str	r3, [sp, #32]
 801213c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801213e:	3001      	adds	r0, #1
 8012140:	3301      	adds	r3, #1
 8012142:	930a      	str	r3, [sp, #40]	; 0x28
 8012144:	9021      	str	r0, [sp, #132]	; 0x84
 8012146:	e7b6      	b.n	80120b6 <_strtod_l+0x156>
 8012148:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801214a:	4351      	muls	r1, r2
 801214c:	18cb      	adds	r3, r1, r3
 801214e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012150:	e7f4      	b.n	801213c <_strtod_l+0x1dc>
 8012152:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012154:	9b05      	ldr	r3, [sp, #20]
 8012156:	4694      	mov	ip, r2
 8012158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801215a:	4463      	add	r3, ip
 801215c:	9321      	str	r3, [sp, #132]	; 0x84
 801215e:	781b      	ldrb	r3, [r3, #0]
 8012160:	2a00      	cmp	r2, #0
 8012162:	d036      	beq.n	80121d2 <_strtod_l+0x272>
 8012164:	4684      	mov	ip, r0
 8012166:	9205      	str	r2, [sp, #20]
 8012168:	001a      	movs	r2, r3
 801216a:	3a30      	subs	r2, #48	; 0x30
 801216c:	2a09      	cmp	r2, #9
 801216e:	d912      	bls.n	8012196 <_strtod_l+0x236>
 8012170:	2201      	movs	r2, #1
 8012172:	9207      	str	r2, [sp, #28]
 8012174:	e7b2      	b.n	80120dc <_strtod_l+0x17c>
 8012176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012178:	3001      	adds	r0, #1
 801217a:	1c5a      	adds	r2, r3, #1
 801217c:	9221      	str	r2, [sp, #132]	; 0x84
 801217e:	785b      	ldrb	r3, [r3, #1]
 8012180:	2b30      	cmp	r3, #48	; 0x30
 8012182:	d0f8      	beq.n	8012176 <_strtod_l+0x216>
 8012184:	001a      	movs	r2, r3
 8012186:	3a31      	subs	r2, #49	; 0x31
 8012188:	2a08      	cmp	r2, #8
 801218a:	d83c      	bhi.n	8012206 <_strtod_l+0x2a6>
 801218c:	4684      	mov	ip, r0
 801218e:	2000      	movs	r0, #0
 8012190:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012192:	9005      	str	r0, [sp, #20]
 8012194:	9212      	str	r2, [sp, #72]	; 0x48
 8012196:	3b30      	subs	r3, #48	; 0x30
 8012198:	1c42      	adds	r2, r0, #1
 801219a:	2b00      	cmp	r3, #0
 801219c:	d013      	beq.n	80121c6 <_strtod_l+0x266>
 801219e:	210a      	movs	r1, #10
 80121a0:	4494      	add	ip, r2
 80121a2:	9a05      	ldr	r2, [sp, #20]
 80121a4:	1885      	adds	r5, r0, r2
 80121a6:	42aa      	cmp	r2, r5
 80121a8:	d115      	bne.n	80121d6 <_strtod_l+0x276>
 80121aa:	9905      	ldr	r1, [sp, #20]
 80121ac:	9a05      	ldr	r2, [sp, #20]
 80121ae:	3101      	adds	r1, #1
 80121b0:	1809      	adds	r1, r1, r0
 80121b2:	1812      	adds	r2, r2, r0
 80121b4:	9105      	str	r1, [sp, #20]
 80121b6:	2a08      	cmp	r2, #8
 80121b8:	dc1b      	bgt.n	80121f2 <_strtod_l+0x292>
 80121ba:	220a      	movs	r2, #10
 80121bc:	9908      	ldr	r1, [sp, #32]
 80121be:	434a      	muls	r2, r1
 80121c0:	189b      	adds	r3, r3, r2
 80121c2:	2200      	movs	r2, #0
 80121c4:	9308      	str	r3, [sp, #32]
 80121c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80121c8:	0010      	movs	r0, r2
 80121ca:	1c59      	adds	r1, r3, #1
 80121cc:	9121      	str	r1, [sp, #132]	; 0x84
 80121ce:	785b      	ldrb	r3, [r3, #1]
 80121d0:	e7ca      	b.n	8012168 <_strtod_l+0x208>
 80121d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80121d4:	e7d4      	b.n	8012180 <_strtod_l+0x220>
 80121d6:	1c54      	adds	r4, r2, #1
 80121d8:	2a08      	cmp	r2, #8
 80121da:	dc04      	bgt.n	80121e6 <_strtod_l+0x286>
 80121dc:	9a08      	ldr	r2, [sp, #32]
 80121de:	434a      	muls	r2, r1
 80121e0:	9208      	str	r2, [sp, #32]
 80121e2:	0022      	movs	r2, r4
 80121e4:	e7df      	b.n	80121a6 <_strtod_l+0x246>
 80121e6:	2c10      	cmp	r4, #16
 80121e8:	dcfb      	bgt.n	80121e2 <_strtod_l+0x282>
 80121ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80121ec:	434a      	muls	r2, r1
 80121ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80121f0:	e7f7      	b.n	80121e2 <_strtod_l+0x282>
 80121f2:	9905      	ldr	r1, [sp, #20]
 80121f4:	2200      	movs	r2, #0
 80121f6:	2910      	cmp	r1, #16
 80121f8:	dce5      	bgt.n	80121c6 <_strtod_l+0x266>
 80121fa:	210a      	movs	r1, #10
 80121fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80121fe:	4341      	muls	r1, r0
 8012200:	185b      	adds	r3, r3, r1
 8012202:	930b      	str	r3, [sp, #44]	; 0x2c
 8012204:	e7df      	b.n	80121c6 <_strtod_l+0x266>
 8012206:	2200      	movs	r2, #0
 8012208:	4694      	mov	ip, r2
 801220a:	9205      	str	r2, [sp, #20]
 801220c:	3201      	adds	r2, #1
 801220e:	e7b0      	b.n	8012172 <_strtod_l+0x212>
 8012210:	000c      	movs	r4, r1
 8012212:	e77e      	b.n	8012112 <_strtod_l+0x1b2>
 8012214:	08018dbc 	.word	0x08018dbc
 8012218:	ffefffff 	.word	0xffefffff
 801221c:	00000433 	.word	0x00000433
 8012220:	7ff00000 	.word	0x7ff00000
 8012224:	7fffffff 	.word	0x7fffffff
 8012228:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801222a:	1c5a      	adds	r2, r3, #1
 801222c:	9221      	str	r2, [sp, #132]	; 0x84
 801222e:	785b      	ldrb	r3, [r3, #1]
 8012230:	2b30      	cmp	r3, #48	; 0x30
 8012232:	d0f9      	beq.n	8012228 <_strtod_l+0x2c8>
 8012234:	001a      	movs	r2, r3
 8012236:	3a31      	subs	r2, #49	; 0x31
 8012238:	2100      	movs	r1, #0
 801223a:	2a08      	cmp	r2, #8
 801223c:	d816      	bhi.n	801226c <_strtod_l+0x30c>
 801223e:	3b30      	subs	r3, #48	; 0x30
 8012240:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8012242:	930e      	str	r3, [sp, #56]	; 0x38
 8012244:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012246:	1c59      	adds	r1, r3, #1
 8012248:	9121      	str	r1, [sp, #132]	; 0x84
 801224a:	785b      	ldrb	r3, [r3, #1]
 801224c:	001a      	movs	r2, r3
 801224e:	3a30      	subs	r2, #48	; 0x30
 8012250:	2a09      	cmp	r2, #9
 8012252:	d932      	bls.n	80122ba <_strtod_l+0x35a>
 8012254:	1b4a      	subs	r2, r1, r5
 8012256:	4dad      	ldr	r5, [pc, #692]	; (801250c <_strtod_l+0x5ac>)
 8012258:	0029      	movs	r1, r5
 801225a:	2a08      	cmp	r2, #8
 801225c:	dc03      	bgt.n	8012266 <_strtod_l+0x306>
 801225e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012260:	42a9      	cmp	r1, r5
 8012262:	dd00      	ble.n	8012266 <_strtod_l+0x306>
 8012264:	0029      	movs	r1, r5
 8012266:	2c00      	cmp	r4, #0
 8012268:	d000      	beq.n	801226c <_strtod_l+0x30c>
 801226a:	4249      	negs	r1, r1
 801226c:	9a05      	ldr	r2, [sp, #20]
 801226e:	2a00      	cmp	r2, #0
 8012270:	d149      	bne.n	8012306 <_strtod_l+0x3a6>
 8012272:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012274:	4310      	orrs	r0, r2
 8012276:	d000      	beq.n	801227a <_strtod_l+0x31a>
 8012278:	e6b3      	b.n	8011fe2 <_strtod_l+0x82>
 801227a:	9a07      	ldr	r2, [sp, #28]
 801227c:	2a00      	cmp	r2, #0
 801227e:	d000      	beq.n	8012282 <_strtod_l+0x322>
 8012280:	e6cf      	b.n	8012022 <_strtod_l+0xc2>
 8012282:	2b4e      	cmp	r3, #78	; 0x4e
 8012284:	d025      	beq.n	80122d2 <_strtod_l+0x372>
 8012286:	dc1f      	bgt.n	80122c8 <_strtod_l+0x368>
 8012288:	2b49      	cmp	r3, #73	; 0x49
 801228a:	d000      	beq.n	801228e <_strtod_l+0x32e>
 801228c:	e6c9      	b.n	8012022 <_strtod_l+0xc2>
 801228e:	49a0      	ldr	r1, [pc, #640]	; (8012510 <_strtod_l+0x5b0>)
 8012290:	a821      	add	r0, sp, #132	; 0x84
 8012292:	f003 f9ed 	bl	8015670 <__match>
 8012296:	2800      	cmp	r0, #0
 8012298:	d100      	bne.n	801229c <_strtod_l+0x33c>
 801229a:	e6c2      	b.n	8012022 <_strtod_l+0xc2>
 801229c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801229e:	499d      	ldr	r1, [pc, #628]	; (8012514 <_strtod_l+0x5b4>)
 80122a0:	3b01      	subs	r3, #1
 80122a2:	a821      	add	r0, sp, #132	; 0x84
 80122a4:	9321      	str	r3, [sp, #132]	; 0x84
 80122a6:	f003 f9e3 	bl	8015670 <__match>
 80122aa:	2800      	cmp	r0, #0
 80122ac:	d102      	bne.n	80122b4 <_strtod_l+0x354>
 80122ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122b0:	3301      	adds	r3, #1
 80122b2:	9321      	str	r3, [sp, #132]	; 0x84
 80122b4:	4f98      	ldr	r7, [pc, #608]	; (8012518 <_strtod_l+0x5b8>)
 80122b6:	2600      	movs	r6, #0
 80122b8:	e693      	b.n	8011fe2 <_strtod_l+0x82>
 80122ba:	220a      	movs	r2, #10
 80122bc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80122be:	434a      	muls	r2, r1
 80122c0:	18d2      	adds	r2, r2, r3
 80122c2:	3a30      	subs	r2, #48	; 0x30
 80122c4:	920e      	str	r2, [sp, #56]	; 0x38
 80122c6:	e7bd      	b.n	8012244 <_strtod_l+0x2e4>
 80122c8:	2b69      	cmp	r3, #105	; 0x69
 80122ca:	d0e0      	beq.n	801228e <_strtod_l+0x32e>
 80122cc:	2b6e      	cmp	r3, #110	; 0x6e
 80122ce:	d000      	beq.n	80122d2 <_strtod_l+0x372>
 80122d0:	e6a7      	b.n	8012022 <_strtod_l+0xc2>
 80122d2:	4992      	ldr	r1, [pc, #584]	; (801251c <_strtod_l+0x5bc>)
 80122d4:	a821      	add	r0, sp, #132	; 0x84
 80122d6:	f003 f9cb 	bl	8015670 <__match>
 80122da:	2800      	cmp	r0, #0
 80122dc:	d100      	bne.n	80122e0 <_strtod_l+0x380>
 80122de:	e6a0      	b.n	8012022 <_strtod_l+0xc2>
 80122e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122e2:	781b      	ldrb	r3, [r3, #0]
 80122e4:	2b28      	cmp	r3, #40	; 0x28
 80122e6:	d10c      	bne.n	8012302 <_strtod_l+0x3a2>
 80122e8:	aa24      	add	r2, sp, #144	; 0x90
 80122ea:	498d      	ldr	r1, [pc, #564]	; (8012520 <_strtod_l+0x5c0>)
 80122ec:	a821      	add	r0, sp, #132	; 0x84
 80122ee:	f003 f9d3 	bl	8015698 <__hexnan>
 80122f2:	2805      	cmp	r0, #5
 80122f4:	d105      	bne.n	8012302 <_strtod_l+0x3a2>
 80122f6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80122f8:	4a87      	ldr	r2, [pc, #540]	; (8012518 <_strtod_l+0x5b8>)
 80122fa:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80122fc:	431a      	orrs	r2, r3
 80122fe:	0017      	movs	r7, r2
 8012300:	e66f      	b.n	8011fe2 <_strtod_l+0x82>
 8012302:	4f88      	ldr	r7, [pc, #544]	; (8012524 <_strtod_l+0x5c4>)
 8012304:	e7d7      	b.n	80122b6 <_strtod_l+0x356>
 8012306:	4663      	mov	r3, ip
 8012308:	1acb      	subs	r3, r1, r3
 801230a:	9307      	str	r3, [sp, #28]
 801230c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801230e:	2b00      	cmp	r3, #0
 8012310:	d101      	bne.n	8012316 <_strtod_l+0x3b6>
 8012312:	9b05      	ldr	r3, [sp, #20]
 8012314:	930a      	str	r3, [sp, #40]	; 0x28
 8012316:	9c05      	ldr	r4, [sp, #20]
 8012318:	2c10      	cmp	r4, #16
 801231a:	dd00      	ble.n	801231e <_strtod_l+0x3be>
 801231c:	2410      	movs	r4, #16
 801231e:	9808      	ldr	r0, [sp, #32]
 8012320:	f7f0 f860 	bl	80023e4 <__aeabi_ui2d>
 8012324:	9b05      	ldr	r3, [sp, #20]
 8012326:	0006      	movs	r6, r0
 8012328:	000f      	movs	r7, r1
 801232a:	2b09      	cmp	r3, #9
 801232c:	dc15      	bgt.n	801235a <_strtod_l+0x3fa>
 801232e:	9b07      	ldr	r3, [sp, #28]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d100      	bne.n	8012336 <_strtod_l+0x3d6>
 8012334:	e655      	b.n	8011fe2 <_strtod_l+0x82>
 8012336:	9b07      	ldr	r3, [sp, #28]
 8012338:	2b00      	cmp	r3, #0
 801233a:	dc00      	bgt.n	801233e <_strtod_l+0x3de>
 801233c:	e07d      	b.n	801243a <_strtod_l+0x4da>
 801233e:	2b16      	cmp	r3, #22
 8012340:	dc62      	bgt.n	8012408 <_strtod_l+0x4a8>
 8012342:	00dc      	lsls	r4, r3, #3
 8012344:	4b78      	ldr	r3, [pc, #480]	; (8012528 <_strtod_l+0x5c8>)
 8012346:	0032      	movs	r2, r6
 8012348:	1919      	adds	r1, r3, r4
 801234a:	003b      	movs	r3, r7
 801234c:	6808      	ldr	r0, [r1, #0]
 801234e:	6849      	ldr	r1, [r1, #4]
 8012350:	f7ef fa02 	bl	8001758 <__aeabi_dmul>
 8012354:	0006      	movs	r6, r0
 8012356:	000f      	movs	r7, r1
 8012358:	e643      	b.n	8011fe2 <_strtod_l+0x82>
 801235a:	0022      	movs	r2, r4
 801235c:	4b72      	ldr	r3, [pc, #456]	; (8012528 <_strtod_l+0x5c8>)
 801235e:	3a09      	subs	r2, #9
 8012360:	00d2      	lsls	r2, r2, #3
 8012362:	189b      	adds	r3, r3, r2
 8012364:	681a      	ldr	r2, [r3, #0]
 8012366:	685b      	ldr	r3, [r3, #4]
 8012368:	f7ef f9f6 	bl	8001758 <__aeabi_dmul>
 801236c:	0006      	movs	r6, r0
 801236e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012370:	000f      	movs	r7, r1
 8012372:	f7f0 f837 	bl	80023e4 <__aeabi_ui2d>
 8012376:	000b      	movs	r3, r1
 8012378:	0002      	movs	r2, r0
 801237a:	0039      	movs	r1, r7
 801237c:	0030      	movs	r0, r6
 801237e:	f7ee fac5 	bl	800090c <__aeabi_dadd>
 8012382:	9b05      	ldr	r3, [sp, #20]
 8012384:	0006      	movs	r6, r0
 8012386:	000f      	movs	r7, r1
 8012388:	2b0f      	cmp	r3, #15
 801238a:	ddd0      	ble.n	801232e <_strtod_l+0x3ce>
 801238c:	9b05      	ldr	r3, [sp, #20]
 801238e:	1b1c      	subs	r4, r3, r4
 8012390:	9b07      	ldr	r3, [sp, #28]
 8012392:	18e4      	adds	r4, r4, r3
 8012394:	2c00      	cmp	r4, #0
 8012396:	dc00      	bgt.n	801239a <_strtod_l+0x43a>
 8012398:	e094      	b.n	80124c4 <_strtod_l+0x564>
 801239a:	230f      	movs	r3, #15
 801239c:	4023      	ands	r3, r4
 801239e:	d00a      	beq.n	80123b6 <_strtod_l+0x456>
 80123a0:	4961      	ldr	r1, [pc, #388]	; (8012528 <_strtod_l+0x5c8>)
 80123a2:	00db      	lsls	r3, r3, #3
 80123a4:	18c9      	adds	r1, r1, r3
 80123a6:	0032      	movs	r2, r6
 80123a8:	6808      	ldr	r0, [r1, #0]
 80123aa:	6849      	ldr	r1, [r1, #4]
 80123ac:	003b      	movs	r3, r7
 80123ae:	f7ef f9d3 	bl	8001758 <__aeabi_dmul>
 80123b2:	0006      	movs	r6, r0
 80123b4:	000f      	movs	r7, r1
 80123b6:	230f      	movs	r3, #15
 80123b8:	439c      	bics	r4, r3
 80123ba:	d06e      	beq.n	801249a <_strtod_l+0x53a>
 80123bc:	3326      	adds	r3, #38	; 0x26
 80123be:	33ff      	adds	r3, #255	; 0xff
 80123c0:	429c      	cmp	r4, r3
 80123c2:	dd48      	ble.n	8012456 <_strtod_l+0x4f6>
 80123c4:	2400      	movs	r4, #0
 80123c6:	9405      	str	r4, [sp, #20]
 80123c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80123ca:	940a      	str	r4, [sp, #40]	; 0x28
 80123cc:	2322      	movs	r3, #34	; 0x22
 80123ce:	2600      	movs	r6, #0
 80123d0:	9a04      	ldr	r2, [sp, #16]
 80123d2:	4f51      	ldr	r7, [pc, #324]	; (8012518 <_strtod_l+0x5b8>)
 80123d4:	6013      	str	r3, [r2, #0]
 80123d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123d8:	42b3      	cmp	r3, r6
 80123da:	d100      	bne.n	80123de <_strtod_l+0x47e>
 80123dc:	e601      	b.n	8011fe2 <_strtod_l+0x82>
 80123de:	9922      	ldr	r1, [sp, #136]	; 0x88
 80123e0:	9804      	ldr	r0, [sp, #16]
 80123e2:	f003 fa47 	bl	8015874 <_Bfree>
 80123e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80123e8:	9804      	ldr	r0, [sp, #16]
 80123ea:	f003 fa43 	bl	8015874 <_Bfree>
 80123ee:	9905      	ldr	r1, [sp, #20]
 80123f0:	9804      	ldr	r0, [sp, #16]
 80123f2:	f003 fa3f 	bl	8015874 <_Bfree>
 80123f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80123f8:	9804      	ldr	r0, [sp, #16]
 80123fa:	f003 fa3b 	bl	8015874 <_Bfree>
 80123fe:	0021      	movs	r1, r4
 8012400:	9804      	ldr	r0, [sp, #16]
 8012402:	f003 fa37 	bl	8015874 <_Bfree>
 8012406:	e5ec      	b.n	8011fe2 <_strtod_l+0x82>
 8012408:	2325      	movs	r3, #37	; 0x25
 801240a:	9a05      	ldr	r2, [sp, #20]
 801240c:	1a9b      	subs	r3, r3, r2
 801240e:	9a07      	ldr	r2, [sp, #28]
 8012410:	4293      	cmp	r3, r2
 8012412:	dbbb      	blt.n	801238c <_strtod_l+0x42c>
 8012414:	230f      	movs	r3, #15
 8012416:	9a05      	ldr	r2, [sp, #20]
 8012418:	4c43      	ldr	r4, [pc, #268]	; (8012528 <_strtod_l+0x5c8>)
 801241a:	1a9d      	subs	r5, r3, r2
 801241c:	00e9      	lsls	r1, r5, #3
 801241e:	1861      	adds	r1, r4, r1
 8012420:	0032      	movs	r2, r6
 8012422:	6808      	ldr	r0, [r1, #0]
 8012424:	6849      	ldr	r1, [r1, #4]
 8012426:	003b      	movs	r3, r7
 8012428:	f7ef f996 	bl	8001758 <__aeabi_dmul>
 801242c:	9b07      	ldr	r3, [sp, #28]
 801242e:	1b5e      	subs	r6, r3, r5
 8012430:	00f6      	lsls	r6, r6, #3
 8012432:	19a6      	adds	r6, r4, r6
 8012434:	6832      	ldr	r2, [r6, #0]
 8012436:	6873      	ldr	r3, [r6, #4]
 8012438:	e78a      	b.n	8012350 <_strtod_l+0x3f0>
 801243a:	9b07      	ldr	r3, [sp, #28]
 801243c:	3316      	adds	r3, #22
 801243e:	dba5      	blt.n	801238c <_strtod_l+0x42c>
 8012440:	9b07      	ldr	r3, [sp, #28]
 8012442:	0030      	movs	r0, r6
 8012444:	00da      	lsls	r2, r3, #3
 8012446:	4b38      	ldr	r3, [pc, #224]	; (8012528 <_strtod_l+0x5c8>)
 8012448:	0039      	movs	r1, r7
 801244a:	1a9b      	subs	r3, r3, r2
 801244c:	681a      	ldr	r2, [r3, #0]
 801244e:	685b      	ldr	r3, [r3, #4]
 8012450:	f7ee fd78 	bl	8000f44 <__aeabi_ddiv>
 8012454:	e77e      	b.n	8012354 <_strtod_l+0x3f4>
 8012456:	2300      	movs	r3, #0
 8012458:	0030      	movs	r0, r6
 801245a:	0039      	movs	r1, r7
 801245c:	001d      	movs	r5, r3
 801245e:	1124      	asrs	r4, r4, #4
 8012460:	2c01      	cmp	r4, #1
 8012462:	dc1d      	bgt.n	80124a0 <_strtod_l+0x540>
 8012464:	2b00      	cmp	r3, #0
 8012466:	d001      	beq.n	801246c <_strtod_l+0x50c>
 8012468:	0006      	movs	r6, r0
 801246a:	000f      	movs	r7, r1
 801246c:	4b2f      	ldr	r3, [pc, #188]	; (801252c <_strtod_l+0x5cc>)
 801246e:	00ed      	lsls	r5, r5, #3
 8012470:	18ff      	adds	r7, r7, r3
 8012472:	4b2f      	ldr	r3, [pc, #188]	; (8012530 <_strtod_l+0x5d0>)
 8012474:	0032      	movs	r2, r6
 8012476:	195d      	adds	r5, r3, r5
 8012478:	6828      	ldr	r0, [r5, #0]
 801247a:	6869      	ldr	r1, [r5, #4]
 801247c:	003b      	movs	r3, r7
 801247e:	f7ef f96b 	bl	8001758 <__aeabi_dmul>
 8012482:	4b25      	ldr	r3, [pc, #148]	; (8012518 <_strtod_l+0x5b8>)
 8012484:	4a2b      	ldr	r2, [pc, #172]	; (8012534 <_strtod_l+0x5d4>)
 8012486:	0006      	movs	r6, r0
 8012488:	400b      	ands	r3, r1
 801248a:	4293      	cmp	r3, r2
 801248c:	d89a      	bhi.n	80123c4 <_strtod_l+0x464>
 801248e:	4a2a      	ldr	r2, [pc, #168]	; (8012538 <_strtod_l+0x5d8>)
 8012490:	4293      	cmp	r3, r2
 8012492:	d913      	bls.n	80124bc <_strtod_l+0x55c>
 8012494:	2601      	movs	r6, #1
 8012496:	4f29      	ldr	r7, [pc, #164]	; (801253c <_strtod_l+0x5dc>)
 8012498:	4276      	negs	r6, r6
 801249a:	2300      	movs	r3, #0
 801249c:	9306      	str	r3, [sp, #24]
 801249e:	e07b      	b.n	8012598 <_strtod_l+0x638>
 80124a0:	2201      	movs	r2, #1
 80124a2:	4214      	tst	r4, r2
 80124a4:	d007      	beq.n	80124b6 <_strtod_l+0x556>
 80124a6:	4a22      	ldr	r2, [pc, #136]	; (8012530 <_strtod_l+0x5d0>)
 80124a8:	00eb      	lsls	r3, r5, #3
 80124aa:	189b      	adds	r3, r3, r2
 80124ac:	681a      	ldr	r2, [r3, #0]
 80124ae:	685b      	ldr	r3, [r3, #4]
 80124b0:	f7ef f952 	bl	8001758 <__aeabi_dmul>
 80124b4:	2301      	movs	r3, #1
 80124b6:	3501      	adds	r5, #1
 80124b8:	1064      	asrs	r4, r4, #1
 80124ba:	e7d1      	b.n	8012460 <_strtod_l+0x500>
 80124bc:	23d4      	movs	r3, #212	; 0xd4
 80124be:	049b      	lsls	r3, r3, #18
 80124c0:	18cf      	adds	r7, r1, r3
 80124c2:	e7ea      	b.n	801249a <_strtod_l+0x53a>
 80124c4:	2c00      	cmp	r4, #0
 80124c6:	d0e8      	beq.n	801249a <_strtod_l+0x53a>
 80124c8:	230f      	movs	r3, #15
 80124ca:	4264      	negs	r4, r4
 80124cc:	4023      	ands	r3, r4
 80124ce:	d00a      	beq.n	80124e6 <_strtod_l+0x586>
 80124d0:	4a15      	ldr	r2, [pc, #84]	; (8012528 <_strtod_l+0x5c8>)
 80124d2:	00db      	lsls	r3, r3, #3
 80124d4:	18d3      	adds	r3, r2, r3
 80124d6:	0030      	movs	r0, r6
 80124d8:	681a      	ldr	r2, [r3, #0]
 80124da:	685b      	ldr	r3, [r3, #4]
 80124dc:	0039      	movs	r1, r7
 80124de:	f7ee fd31 	bl	8000f44 <__aeabi_ddiv>
 80124e2:	0006      	movs	r6, r0
 80124e4:	000f      	movs	r7, r1
 80124e6:	1124      	asrs	r4, r4, #4
 80124e8:	d0d7      	beq.n	801249a <_strtod_l+0x53a>
 80124ea:	2c1f      	cmp	r4, #31
 80124ec:	dd28      	ble.n	8012540 <_strtod_l+0x5e0>
 80124ee:	2400      	movs	r4, #0
 80124f0:	9405      	str	r4, [sp, #20]
 80124f2:	940b      	str	r4, [sp, #44]	; 0x2c
 80124f4:	940a      	str	r4, [sp, #40]	; 0x28
 80124f6:	2322      	movs	r3, #34	; 0x22
 80124f8:	9a04      	ldr	r2, [sp, #16]
 80124fa:	2600      	movs	r6, #0
 80124fc:	6013      	str	r3, [r2, #0]
 80124fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012500:	2700      	movs	r7, #0
 8012502:	2b00      	cmp	r3, #0
 8012504:	d000      	beq.n	8012508 <_strtod_l+0x5a8>
 8012506:	e76a      	b.n	80123de <_strtod_l+0x47e>
 8012508:	e56b      	b.n	8011fe2 <_strtod_l+0x82>
 801250a:	46c0      	nop			; (mov r8, r8)
 801250c:	00004e1f 	.word	0x00004e1f
 8012510:	08018e15 	.word	0x08018e15
 8012514:	08018f68 	.word	0x08018f68
 8012518:	7ff00000 	.word	0x7ff00000
 801251c:	08018e1d 	.word	0x08018e1d
 8012520:	08018dd0 	.word	0x08018dd0
 8012524:	fff80000 	.word	0xfff80000
 8012528:	08018fa0 	.word	0x08018fa0
 801252c:	fcb00000 	.word	0xfcb00000
 8012530:	08018f78 	.word	0x08018f78
 8012534:	7ca00000 	.word	0x7ca00000
 8012538:	7c900000 	.word	0x7c900000
 801253c:	7fefffff 	.word	0x7fefffff
 8012540:	2310      	movs	r3, #16
 8012542:	4023      	ands	r3, r4
 8012544:	9306      	str	r3, [sp, #24]
 8012546:	d001      	beq.n	801254c <_strtod_l+0x5ec>
 8012548:	236a      	movs	r3, #106	; 0x6a
 801254a:	9306      	str	r3, [sp, #24]
 801254c:	2300      	movs	r3, #0
 801254e:	0030      	movs	r0, r6
 8012550:	0039      	movs	r1, r7
 8012552:	001d      	movs	r5, r3
 8012554:	2c00      	cmp	r4, #0
 8012556:	dd00      	ble.n	801255a <_strtod_l+0x5fa>
 8012558:	e10e      	b.n	8012778 <_strtod_l+0x818>
 801255a:	2b00      	cmp	r3, #0
 801255c:	d001      	beq.n	8012562 <_strtod_l+0x602>
 801255e:	0006      	movs	r6, r0
 8012560:	000f      	movs	r7, r1
 8012562:	9b06      	ldr	r3, [sp, #24]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d00f      	beq.n	8012588 <_strtod_l+0x628>
 8012568:	236b      	movs	r3, #107	; 0x6b
 801256a:	0079      	lsls	r1, r7, #1
 801256c:	0d49      	lsrs	r1, r1, #21
 801256e:	003a      	movs	r2, r7
 8012570:	1a5b      	subs	r3, r3, r1
 8012572:	2b00      	cmp	r3, #0
 8012574:	dd08      	ble.n	8012588 <_strtod_l+0x628>
 8012576:	2b1f      	cmp	r3, #31
 8012578:	dc00      	bgt.n	801257c <_strtod_l+0x61c>
 801257a:	e112      	b.n	80127a2 <_strtod_l+0x842>
 801257c:	2600      	movs	r6, #0
 801257e:	2b34      	cmp	r3, #52	; 0x34
 8012580:	dc00      	bgt.n	8012584 <_strtod_l+0x624>
 8012582:	e107      	b.n	8012794 <_strtod_l+0x834>
 8012584:	27dc      	movs	r7, #220	; 0xdc
 8012586:	04bf      	lsls	r7, r7, #18
 8012588:	2200      	movs	r2, #0
 801258a:	2300      	movs	r3, #0
 801258c:	0030      	movs	r0, r6
 801258e:	0039      	movs	r1, r7
 8012590:	f7ed ff64 	bl	800045c <__aeabi_dcmpeq>
 8012594:	2800      	cmp	r0, #0
 8012596:	d1aa      	bne.n	80124ee <_strtod_l+0x58e>
 8012598:	9b08      	ldr	r3, [sp, #32]
 801259a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801259c:	9300      	str	r3, [sp, #0]
 801259e:	9912      	ldr	r1, [sp, #72]	; 0x48
 80125a0:	9b05      	ldr	r3, [sp, #20]
 80125a2:	9804      	ldr	r0, [sp, #16]
 80125a4:	f003 f9ae 	bl	8015904 <__s2b>
 80125a8:	900b      	str	r0, [sp, #44]	; 0x2c
 80125aa:	2800      	cmp	r0, #0
 80125ac:	d100      	bne.n	80125b0 <_strtod_l+0x650>
 80125ae:	e709      	b.n	80123c4 <_strtod_l+0x464>
 80125b0:	9b07      	ldr	r3, [sp, #28]
 80125b2:	9a07      	ldr	r2, [sp, #28]
 80125b4:	17db      	asrs	r3, r3, #31
 80125b6:	4252      	negs	r2, r2
 80125b8:	4013      	ands	r3, r2
 80125ba:	9315      	str	r3, [sp, #84]	; 0x54
 80125bc:	9b07      	ldr	r3, [sp, #28]
 80125be:	2400      	movs	r4, #0
 80125c0:	43db      	mvns	r3, r3
 80125c2:	9a07      	ldr	r2, [sp, #28]
 80125c4:	17db      	asrs	r3, r3, #31
 80125c6:	401a      	ands	r2, r3
 80125c8:	921c      	str	r2, [sp, #112]	; 0x70
 80125ca:	9405      	str	r4, [sp, #20]
 80125cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125ce:	9804      	ldr	r0, [sp, #16]
 80125d0:	6859      	ldr	r1, [r3, #4]
 80125d2:	f003 f927 	bl	8015824 <_Balloc>
 80125d6:	900a      	str	r0, [sp, #40]	; 0x28
 80125d8:	2800      	cmp	r0, #0
 80125da:	d100      	bne.n	80125de <_strtod_l+0x67e>
 80125dc:	e6f6      	b.n	80123cc <_strtod_l+0x46c>
 80125de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80125e2:	691b      	ldr	r3, [r3, #16]
 80125e4:	310c      	adds	r1, #12
 80125e6:	1c9a      	adds	r2, r3, #2
 80125e8:	0092      	lsls	r2, r2, #2
 80125ea:	300c      	adds	r0, #12
 80125ec:	9308      	str	r3, [sp, #32]
 80125ee:	f7ff fa32 	bl	8011a56 <memcpy>
 80125f2:	ab24      	add	r3, sp, #144	; 0x90
 80125f4:	9301      	str	r3, [sp, #4]
 80125f6:	ab23      	add	r3, sp, #140	; 0x8c
 80125f8:	9300      	str	r3, [sp, #0]
 80125fa:	0032      	movs	r2, r6
 80125fc:	003b      	movs	r3, r7
 80125fe:	9804      	ldr	r0, [sp, #16]
 8012600:	960e      	str	r6, [sp, #56]	; 0x38
 8012602:	970f      	str	r7, [sp, #60]	; 0x3c
 8012604:	f003 fc22 	bl	8015e4c <__d2b>
 8012608:	9022      	str	r0, [sp, #136]	; 0x88
 801260a:	2800      	cmp	r0, #0
 801260c:	d100      	bne.n	8012610 <_strtod_l+0x6b0>
 801260e:	e6dd      	b.n	80123cc <_strtod_l+0x46c>
 8012610:	2101      	movs	r1, #1
 8012612:	9804      	ldr	r0, [sp, #16]
 8012614:	f003 f9fd 	bl	8015a12 <__i2b>
 8012618:	9005      	str	r0, [sp, #20]
 801261a:	2800      	cmp	r0, #0
 801261c:	d100      	bne.n	8012620 <_strtod_l+0x6c0>
 801261e:	e6d5      	b.n	80123cc <_strtod_l+0x46c>
 8012620:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012622:	2b00      	cmp	r3, #0
 8012624:	da00      	bge.n	8012628 <_strtod_l+0x6c8>
 8012626:	e0c1      	b.n	80127ac <_strtod_l+0x84c>
 8012628:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801262a:	189d      	adds	r5, r3, r2
 801262c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801262e:	4694      	mov	ip, r2
 8012630:	9906      	ldr	r1, [sp, #24]
 8012632:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012634:	1a5b      	subs	r3, r3, r1
 8012636:	2136      	movs	r1, #54	; 0x36
 8012638:	189b      	adds	r3, r3, r2
 801263a:	1a8a      	subs	r2, r1, r2
 801263c:	49b2      	ldr	r1, [pc, #712]	; (8012908 <_strtod_l+0x9a8>)
 801263e:	3b01      	subs	r3, #1
 8012640:	2001      	movs	r0, #1
 8012642:	428b      	cmp	r3, r1
 8012644:	db00      	blt.n	8012648 <_strtod_l+0x6e8>
 8012646:	e0bd      	b.n	80127c4 <_strtod_l+0x864>
 8012648:	1ac9      	subs	r1, r1, r3
 801264a:	1a52      	subs	r2, r2, r1
 801264c:	291f      	cmp	r1, #31
 801264e:	dd00      	ble.n	8012652 <_strtod_l+0x6f2>
 8012650:	e0b1      	b.n	80127b6 <_strtod_l+0x856>
 8012652:	4088      	lsls	r0, r1
 8012654:	2300      	movs	r3, #0
 8012656:	9014      	str	r0, [sp, #80]	; 0x50
 8012658:	9310      	str	r3, [sp, #64]	; 0x40
 801265a:	18ab      	adds	r3, r5, r2
 801265c:	9308      	str	r3, [sp, #32]
 801265e:	0013      	movs	r3, r2
 8012660:	9a06      	ldr	r2, [sp, #24]
 8012662:	4463      	add	r3, ip
 8012664:	18d3      	adds	r3, r2, r3
 8012666:	9a08      	ldr	r2, [sp, #32]
 8012668:	930c      	str	r3, [sp, #48]	; 0x30
 801266a:	002b      	movs	r3, r5
 801266c:	4295      	cmp	r5, r2
 801266e:	dd00      	ble.n	8012672 <_strtod_l+0x712>
 8012670:	0013      	movs	r3, r2
 8012672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012674:	4293      	cmp	r3, r2
 8012676:	dd00      	ble.n	801267a <_strtod_l+0x71a>
 8012678:	0013      	movs	r3, r2
 801267a:	2b00      	cmp	r3, #0
 801267c:	dd06      	ble.n	801268c <_strtod_l+0x72c>
 801267e:	9a08      	ldr	r2, [sp, #32]
 8012680:	1aed      	subs	r5, r5, r3
 8012682:	1ad2      	subs	r2, r2, r3
 8012684:	9208      	str	r2, [sp, #32]
 8012686:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012688:	1ad2      	subs	r2, r2, r3
 801268a:	920c      	str	r2, [sp, #48]	; 0x30
 801268c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801268e:	2b00      	cmp	r3, #0
 8012690:	d017      	beq.n	80126c2 <_strtod_l+0x762>
 8012692:	001a      	movs	r2, r3
 8012694:	9905      	ldr	r1, [sp, #20]
 8012696:	9804      	ldr	r0, [sp, #16]
 8012698:	f003 fa54 	bl	8015b44 <__pow5mult>
 801269c:	9005      	str	r0, [sp, #20]
 801269e:	2800      	cmp	r0, #0
 80126a0:	d100      	bne.n	80126a4 <_strtod_l+0x744>
 80126a2:	e693      	b.n	80123cc <_strtod_l+0x46c>
 80126a4:	0001      	movs	r1, r0
 80126a6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80126a8:	9804      	ldr	r0, [sp, #16]
 80126aa:	f003 f9bb 	bl	8015a24 <__multiply>
 80126ae:	9012      	str	r0, [sp, #72]	; 0x48
 80126b0:	2800      	cmp	r0, #0
 80126b2:	d100      	bne.n	80126b6 <_strtod_l+0x756>
 80126b4:	e68a      	b.n	80123cc <_strtod_l+0x46c>
 80126b6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80126b8:	9804      	ldr	r0, [sp, #16]
 80126ba:	f003 f8db 	bl	8015874 <_Bfree>
 80126be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80126c0:	9322      	str	r3, [sp, #136]	; 0x88
 80126c2:	9b08      	ldr	r3, [sp, #32]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	dd00      	ble.n	80126ca <_strtod_l+0x76a>
 80126c8:	e07f      	b.n	80127ca <_strtod_l+0x86a>
 80126ca:	9b07      	ldr	r3, [sp, #28]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	dd08      	ble.n	80126e2 <_strtod_l+0x782>
 80126d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80126d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80126d4:	9804      	ldr	r0, [sp, #16]
 80126d6:	f003 fa35 	bl	8015b44 <__pow5mult>
 80126da:	900a      	str	r0, [sp, #40]	; 0x28
 80126dc:	2800      	cmp	r0, #0
 80126de:	d100      	bne.n	80126e2 <_strtod_l+0x782>
 80126e0:	e674      	b.n	80123cc <_strtod_l+0x46c>
 80126e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	dd08      	ble.n	80126fa <_strtod_l+0x79a>
 80126e8:	001a      	movs	r2, r3
 80126ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80126ec:	9804      	ldr	r0, [sp, #16]
 80126ee:	f003 fa6b 	bl	8015bc8 <__lshift>
 80126f2:	900a      	str	r0, [sp, #40]	; 0x28
 80126f4:	2800      	cmp	r0, #0
 80126f6:	d100      	bne.n	80126fa <_strtod_l+0x79a>
 80126f8:	e668      	b.n	80123cc <_strtod_l+0x46c>
 80126fa:	2d00      	cmp	r5, #0
 80126fc:	dd08      	ble.n	8012710 <_strtod_l+0x7b0>
 80126fe:	002a      	movs	r2, r5
 8012700:	9905      	ldr	r1, [sp, #20]
 8012702:	9804      	ldr	r0, [sp, #16]
 8012704:	f003 fa60 	bl	8015bc8 <__lshift>
 8012708:	9005      	str	r0, [sp, #20]
 801270a:	2800      	cmp	r0, #0
 801270c:	d100      	bne.n	8012710 <_strtod_l+0x7b0>
 801270e:	e65d      	b.n	80123cc <_strtod_l+0x46c>
 8012710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012712:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012714:	9804      	ldr	r0, [sp, #16]
 8012716:	f003 fac3 	bl	8015ca0 <__mdiff>
 801271a:	1e04      	subs	r4, r0, #0
 801271c:	d100      	bne.n	8012720 <_strtod_l+0x7c0>
 801271e:	e655      	b.n	80123cc <_strtod_l+0x46c>
 8012720:	2500      	movs	r5, #0
 8012722:	68c3      	ldr	r3, [r0, #12]
 8012724:	9905      	ldr	r1, [sp, #20]
 8012726:	60c5      	str	r5, [r0, #12]
 8012728:	9312      	str	r3, [sp, #72]	; 0x48
 801272a:	f003 fa9f 	bl	8015c6c <__mcmp>
 801272e:	42a8      	cmp	r0, r5
 8012730:	da55      	bge.n	80127de <_strtod_l+0x87e>
 8012732:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012734:	42ab      	cmp	r3, r5
 8012736:	d11b      	bne.n	8012770 <_strtod_l+0x810>
 8012738:	42ae      	cmp	r6, r5
 801273a:	d119      	bne.n	8012770 <_strtod_l+0x810>
 801273c:	033b      	lsls	r3, r7, #12
 801273e:	42ab      	cmp	r3, r5
 8012740:	d116      	bne.n	8012770 <_strtod_l+0x810>
 8012742:	22d6      	movs	r2, #214	; 0xd6
 8012744:	4b71      	ldr	r3, [pc, #452]	; (801290c <_strtod_l+0x9ac>)
 8012746:	04d2      	lsls	r2, r2, #19
 8012748:	403b      	ands	r3, r7
 801274a:	4293      	cmp	r3, r2
 801274c:	d910      	bls.n	8012770 <_strtod_l+0x810>
 801274e:	6963      	ldr	r3, [r4, #20]
 8012750:	42ab      	cmp	r3, r5
 8012752:	d102      	bne.n	801275a <_strtod_l+0x7fa>
 8012754:	6923      	ldr	r3, [r4, #16]
 8012756:	2b01      	cmp	r3, #1
 8012758:	dd0a      	ble.n	8012770 <_strtod_l+0x810>
 801275a:	0021      	movs	r1, r4
 801275c:	2201      	movs	r2, #1
 801275e:	9804      	ldr	r0, [sp, #16]
 8012760:	f003 fa32 	bl	8015bc8 <__lshift>
 8012764:	9905      	ldr	r1, [sp, #20]
 8012766:	0004      	movs	r4, r0
 8012768:	f003 fa80 	bl	8015c6c <__mcmp>
 801276c:	2800      	cmp	r0, #0
 801276e:	dc6b      	bgt.n	8012848 <_strtod_l+0x8e8>
 8012770:	9b06      	ldr	r3, [sp, #24]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d178      	bne.n	8012868 <_strtod_l+0x908>
 8012776:	e632      	b.n	80123de <_strtod_l+0x47e>
 8012778:	2201      	movs	r2, #1
 801277a:	4214      	tst	r4, r2
 801277c:	d007      	beq.n	801278e <_strtod_l+0x82e>
 801277e:	4a64      	ldr	r2, [pc, #400]	; (8012910 <_strtod_l+0x9b0>)
 8012780:	00eb      	lsls	r3, r5, #3
 8012782:	18d3      	adds	r3, r2, r3
 8012784:	681a      	ldr	r2, [r3, #0]
 8012786:	685b      	ldr	r3, [r3, #4]
 8012788:	f7ee ffe6 	bl	8001758 <__aeabi_dmul>
 801278c:	2301      	movs	r3, #1
 801278e:	3501      	adds	r5, #1
 8012790:	1064      	asrs	r4, r4, #1
 8012792:	e6df      	b.n	8012554 <_strtod_l+0x5f4>
 8012794:	2101      	movs	r1, #1
 8012796:	3b20      	subs	r3, #32
 8012798:	4249      	negs	r1, r1
 801279a:	4099      	lsls	r1, r3
 801279c:	400a      	ands	r2, r1
 801279e:	0017      	movs	r7, r2
 80127a0:	e6f2      	b.n	8012588 <_strtod_l+0x628>
 80127a2:	2201      	movs	r2, #1
 80127a4:	4252      	negs	r2, r2
 80127a6:	409a      	lsls	r2, r3
 80127a8:	4016      	ands	r6, r2
 80127aa:	e6ed      	b.n	8012588 <_strtod_l+0x628>
 80127ac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80127ae:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80127b0:	1ad2      	subs	r2, r2, r3
 80127b2:	4694      	mov	ip, r2
 80127b4:	e73c      	b.n	8012630 <_strtod_l+0x6d0>
 80127b6:	4957      	ldr	r1, [pc, #348]	; (8012914 <_strtod_l+0x9b4>)
 80127b8:	1acb      	subs	r3, r1, r3
 80127ba:	0001      	movs	r1, r0
 80127bc:	4099      	lsls	r1, r3
 80127be:	9110      	str	r1, [sp, #64]	; 0x40
 80127c0:	9014      	str	r0, [sp, #80]	; 0x50
 80127c2:	e74a      	b.n	801265a <_strtod_l+0x6fa>
 80127c4:	2300      	movs	r3, #0
 80127c6:	9310      	str	r3, [sp, #64]	; 0x40
 80127c8:	e7fa      	b.n	80127c0 <_strtod_l+0x860>
 80127ca:	9a08      	ldr	r2, [sp, #32]
 80127cc:	9922      	ldr	r1, [sp, #136]	; 0x88
 80127ce:	9804      	ldr	r0, [sp, #16]
 80127d0:	f003 f9fa 	bl	8015bc8 <__lshift>
 80127d4:	9022      	str	r0, [sp, #136]	; 0x88
 80127d6:	2800      	cmp	r0, #0
 80127d8:	d000      	beq.n	80127dc <_strtod_l+0x87c>
 80127da:	e776      	b.n	80126ca <_strtod_l+0x76a>
 80127dc:	e5f6      	b.n	80123cc <_strtod_l+0x46c>
 80127de:	970c      	str	r7, [sp, #48]	; 0x30
 80127e0:	2800      	cmp	r0, #0
 80127e2:	d000      	beq.n	80127e6 <_strtod_l+0x886>
 80127e4:	e0a0      	b.n	8012928 <_strtod_l+0x9c8>
 80127e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80127e8:	033b      	lsls	r3, r7, #12
 80127ea:	0b1b      	lsrs	r3, r3, #12
 80127ec:	2a00      	cmp	r2, #0
 80127ee:	d027      	beq.n	8012840 <_strtod_l+0x8e0>
 80127f0:	4a49      	ldr	r2, [pc, #292]	; (8012918 <_strtod_l+0x9b8>)
 80127f2:	4293      	cmp	r3, r2
 80127f4:	d157      	bne.n	80128a6 <_strtod_l+0x946>
 80127f6:	2201      	movs	r2, #1
 80127f8:	9b06      	ldr	r3, [sp, #24]
 80127fa:	4252      	negs	r2, r2
 80127fc:	0031      	movs	r1, r6
 80127fe:	0010      	movs	r0, r2
 8012800:	2b00      	cmp	r3, #0
 8012802:	d00b      	beq.n	801281c <_strtod_l+0x8bc>
 8012804:	25d4      	movs	r5, #212	; 0xd4
 8012806:	4b41      	ldr	r3, [pc, #260]	; (801290c <_strtod_l+0x9ac>)
 8012808:	04ed      	lsls	r5, r5, #19
 801280a:	403b      	ands	r3, r7
 801280c:	0010      	movs	r0, r2
 801280e:	42ab      	cmp	r3, r5
 8012810:	d804      	bhi.n	801281c <_strtod_l+0x8bc>
 8012812:	306c      	adds	r0, #108	; 0x6c
 8012814:	0d1b      	lsrs	r3, r3, #20
 8012816:	1ac3      	subs	r3, r0, r3
 8012818:	409a      	lsls	r2, r3
 801281a:	0010      	movs	r0, r2
 801281c:	4281      	cmp	r1, r0
 801281e:	d142      	bne.n	80128a6 <_strtod_l+0x946>
 8012820:	4b3e      	ldr	r3, [pc, #248]	; (801291c <_strtod_l+0x9bc>)
 8012822:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012824:	429a      	cmp	r2, r3
 8012826:	d102      	bne.n	801282e <_strtod_l+0x8ce>
 8012828:	1c4b      	adds	r3, r1, #1
 801282a:	d100      	bne.n	801282e <_strtod_l+0x8ce>
 801282c:	e5ce      	b.n	80123cc <_strtod_l+0x46c>
 801282e:	4b37      	ldr	r3, [pc, #220]	; (801290c <_strtod_l+0x9ac>)
 8012830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012832:	2600      	movs	r6, #0
 8012834:	401a      	ands	r2, r3
 8012836:	0013      	movs	r3, r2
 8012838:	2280      	movs	r2, #128	; 0x80
 801283a:	0352      	lsls	r2, r2, #13
 801283c:	189f      	adds	r7, r3, r2
 801283e:	e797      	b.n	8012770 <_strtod_l+0x810>
 8012840:	2b00      	cmp	r3, #0
 8012842:	d130      	bne.n	80128a6 <_strtod_l+0x946>
 8012844:	2e00      	cmp	r6, #0
 8012846:	d12e      	bne.n	80128a6 <_strtod_l+0x946>
 8012848:	9906      	ldr	r1, [sp, #24]
 801284a:	003b      	movs	r3, r7
 801284c:	4a2f      	ldr	r2, [pc, #188]	; (801290c <_strtod_l+0x9ac>)
 801284e:	2900      	cmp	r1, #0
 8012850:	d020      	beq.n	8012894 <_strtod_l+0x934>
 8012852:	0011      	movs	r1, r2
 8012854:	20d6      	movs	r0, #214	; 0xd6
 8012856:	4039      	ands	r1, r7
 8012858:	04c0      	lsls	r0, r0, #19
 801285a:	4281      	cmp	r1, r0
 801285c:	dc1a      	bgt.n	8012894 <_strtod_l+0x934>
 801285e:	23dc      	movs	r3, #220	; 0xdc
 8012860:	049b      	lsls	r3, r3, #18
 8012862:	4299      	cmp	r1, r3
 8012864:	dc00      	bgt.n	8012868 <_strtod_l+0x908>
 8012866:	e646      	b.n	80124f6 <_strtod_l+0x596>
 8012868:	4b2d      	ldr	r3, [pc, #180]	; (8012920 <_strtod_l+0x9c0>)
 801286a:	0030      	movs	r0, r6
 801286c:	931b      	str	r3, [sp, #108]	; 0x6c
 801286e:	2300      	movs	r3, #0
 8012870:	931a      	str	r3, [sp, #104]	; 0x68
 8012872:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012874:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012876:	0039      	movs	r1, r7
 8012878:	f7ee ff6e 	bl	8001758 <__aeabi_dmul>
 801287c:	0006      	movs	r6, r0
 801287e:	000f      	movs	r7, r1
 8012880:	1e0b      	subs	r3, r1, #0
 8012882:	d000      	beq.n	8012886 <_strtod_l+0x926>
 8012884:	e5ab      	b.n	80123de <_strtod_l+0x47e>
 8012886:	2800      	cmp	r0, #0
 8012888:	d000      	beq.n	801288c <_strtod_l+0x92c>
 801288a:	e5a8      	b.n	80123de <_strtod_l+0x47e>
 801288c:	9a04      	ldr	r2, [sp, #16]
 801288e:	3322      	adds	r3, #34	; 0x22
 8012890:	6013      	str	r3, [r2, #0]
 8012892:	e5a4      	b.n	80123de <_strtod_l+0x47e>
 8012894:	2601      	movs	r6, #1
 8012896:	4013      	ands	r3, r2
 8012898:	4a22      	ldr	r2, [pc, #136]	; (8012924 <_strtod_l+0x9c4>)
 801289a:	4276      	negs	r6, r6
 801289c:	189b      	adds	r3, r3, r2
 801289e:	4a1e      	ldr	r2, [pc, #120]	; (8012918 <_strtod_l+0x9b8>)
 80128a0:	431a      	orrs	r2, r3
 80128a2:	0017      	movs	r7, r2
 80128a4:	e764      	b.n	8012770 <_strtod_l+0x810>
 80128a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d015      	beq.n	80128d8 <_strtod_l+0x978>
 80128ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80128b0:	4213      	tst	r3, r2
 80128b2:	d100      	bne.n	80128b6 <_strtod_l+0x956>
 80128b4:	e75c      	b.n	8012770 <_strtod_l+0x810>
 80128b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80128b8:	9a06      	ldr	r2, [sp, #24]
 80128ba:	0030      	movs	r0, r6
 80128bc:	0039      	movs	r1, r7
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d00f      	beq.n	80128e2 <_strtod_l+0x982>
 80128c2:	f7ff fb35 	bl	8011f30 <sulp>
 80128c6:	0002      	movs	r2, r0
 80128c8:	000b      	movs	r3, r1
 80128ca:	980e      	ldr	r0, [sp, #56]	; 0x38
 80128cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80128ce:	f7ee f81d 	bl	800090c <__aeabi_dadd>
 80128d2:	0006      	movs	r6, r0
 80128d4:	000f      	movs	r7, r1
 80128d6:	e74b      	b.n	8012770 <_strtod_l+0x810>
 80128d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80128da:	4233      	tst	r3, r6
 80128dc:	d100      	bne.n	80128e0 <_strtod_l+0x980>
 80128de:	e747      	b.n	8012770 <_strtod_l+0x810>
 80128e0:	e7e9      	b.n	80128b6 <_strtod_l+0x956>
 80128e2:	f7ff fb25 	bl	8011f30 <sulp>
 80128e6:	0002      	movs	r2, r0
 80128e8:	000b      	movs	r3, r1
 80128ea:	980e      	ldr	r0, [sp, #56]	; 0x38
 80128ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80128ee:	f7ef f9a5 	bl	8001c3c <__aeabi_dsub>
 80128f2:	2200      	movs	r2, #0
 80128f4:	2300      	movs	r3, #0
 80128f6:	0006      	movs	r6, r0
 80128f8:	000f      	movs	r7, r1
 80128fa:	f7ed fdaf 	bl	800045c <__aeabi_dcmpeq>
 80128fe:	2800      	cmp	r0, #0
 8012900:	d000      	beq.n	8012904 <_strtod_l+0x9a4>
 8012902:	e5f8      	b.n	80124f6 <_strtod_l+0x596>
 8012904:	e734      	b.n	8012770 <_strtod_l+0x810>
 8012906:	46c0      	nop			; (mov r8, r8)
 8012908:	fffffc02 	.word	0xfffffc02
 801290c:	7ff00000 	.word	0x7ff00000
 8012910:	08018de8 	.word	0x08018de8
 8012914:	fffffbe2 	.word	0xfffffbe2
 8012918:	000fffff 	.word	0x000fffff
 801291c:	7fefffff 	.word	0x7fefffff
 8012920:	39500000 	.word	0x39500000
 8012924:	fff00000 	.word	0xfff00000
 8012928:	9905      	ldr	r1, [sp, #20]
 801292a:	0020      	movs	r0, r4
 801292c:	f003 fae2 	bl	8015ef4 <__ratio>
 8012930:	2380      	movs	r3, #128	; 0x80
 8012932:	2200      	movs	r2, #0
 8012934:	05db      	lsls	r3, r3, #23
 8012936:	9008      	str	r0, [sp, #32]
 8012938:	9109      	str	r1, [sp, #36]	; 0x24
 801293a:	f7ed fd9f 	bl	800047c <__aeabi_dcmple>
 801293e:	2800      	cmp	r0, #0
 8012940:	d100      	bne.n	8012944 <_strtod_l+0x9e4>
 8012942:	e07f      	b.n	8012a44 <_strtod_l+0xae4>
 8012944:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012946:	2b00      	cmp	r3, #0
 8012948:	d04b      	beq.n	80129e2 <_strtod_l+0xa82>
 801294a:	2200      	movs	r2, #0
 801294c:	4b8a      	ldr	r3, [pc, #552]	; (8012b78 <_strtod_l+0xc18>)
 801294e:	9210      	str	r2, [sp, #64]	; 0x40
 8012950:	9311      	str	r3, [sp, #68]	; 0x44
 8012952:	4b89      	ldr	r3, [pc, #548]	; (8012b78 <_strtod_l+0xc18>)
 8012954:	9308      	str	r3, [sp, #32]
 8012956:	4a89      	ldr	r2, [pc, #548]	; (8012b7c <_strtod_l+0xc1c>)
 8012958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801295a:	4013      	ands	r3, r2
 801295c:	9314      	str	r3, [sp, #80]	; 0x50
 801295e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012960:	4b87      	ldr	r3, [pc, #540]	; (8012b80 <_strtod_l+0xc20>)
 8012962:	429a      	cmp	r2, r3
 8012964:	d000      	beq.n	8012968 <_strtod_l+0xa08>
 8012966:	e0ba      	b.n	8012ade <_strtod_l+0xb7e>
 8012968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801296a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801296c:	921a      	str	r2, [sp, #104]	; 0x68
 801296e:	931b      	str	r3, [sp, #108]	; 0x6c
 8012970:	4a84      	ldr	r2, [pc, #528]	; (8012b84 <_strtod_l+0xc24>)
 8012972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012974:	4694      	mov	ip, r2
 8012976:	4463      	add	r3, ip
 8012978:	001f      	movs	r7, r3
 801297a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801297c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801297e:	0030      	movs	r0, r6
 8012980:	0039      	movs	r1, r7
 8012982:	920c      	str	r2, [sp, #48]	; 0x30
 8012984:	930d      	str	r3, [sp, #52]	; 0x34
 8012986:	f003 f9ef 	bl	8015d68 <__ulp>
 801298a:	0002      	movs	r2, r0
 801298c:	000b      	movs	r3, r1
 801298e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012990:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012992:	f7ee fee1 	bl	8001758 <__aeabi_dmul>
 8012996:	0032      	movs	r2, r6
 8012998:	003b      	movs	r3, r7
 801299a:	f7ed ffb7 	bl	800090c <__aeabi_dadd>
 801299e:	4a77      	ldr	r2, [pc, #476]	; (8012b7c <_strtod_l+0xc1c>)
 80129a0:	4b79      	ldr	r3, [pc, #484]	; (8012b88 <_strtod_l+0xc28>)
 80129a2:	0006      	movs	r6, r0
 80129a4:	400a      	ands	r2, r1
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d964      	bls.n	8012a74 <_strtod_l+0xb14>
 80129aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80129ac:	4a77      	ldr	r2, [pc, #476]	; (8012b8c <_strtod_l+0xc2c>)
 80129ae:	4293      	cmp	r3, r2
 80129b0:	d103      	bne.n	80129ba <_strtod_l+0xa5a>
 80129b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80129b4:	3301      	adds	r3, #1
 80129b6:	d100      	bne.n	80129ba <_strtod_l+0xa5a>
 80129b8:	e508      	b.n	80123cc <_strtod_l+0x46c>
 80129ba:	2601      	movs	r6, #1
 80129bc:	4f73      	ldr	r7, [pc, #460]	; (8012b8c <_strtod_l+0xc2c>)
 80129be:	4276      	negs	r6, r6
 80129c0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80129c2:	9804      	ldr	r0, [sp, #16]
 80129c4:	f002 ff56 	bl	8015874 <_Bfree>
 80129c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80129ca:	9804      	ldr	r0, [sp, #16]
 80129cc:	f002 ff52 	bl	8015874 <_Bfree>
 80129d0:	9905      	ldr	r1, [sp, #20]
 80129d2:	9804      	ldr	r0, [sp, #16]
 80129d4:	f002 ff4e 	bl	8015874 <_Bfree>
 80129d8:	0021      	movs	r1, r4
 80129da:	9804      	ldr	r0, [sp, #16]
 80129dc:	f002 ff4a 	bl	8015874 <_Bfree>
 80129e0:	e5f4      	b.n	80125cc <_strtod_l+0x66c>
 80129e2:	2e00      	cmp	r6, #0
 80129e4:	d11e      	bne.n	8012a24 <_strtod_l+0xac4>
 80129e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129e8:	031b      	lsls	r3, r3, #12
 80129ea:	d121      	bne.n	8012a30 <_strtod_l+0xad0>
 80129ec:	9808      	ldr	r0, [sp, #32]
 80129ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80129f0:	2200      	movs	r2, #0
 80129f2:	4b61      	ldr	r3, [pc, #388]	; (8012b78 <_strtod_l+0xc18>)
 80129f4:	f7ed fd38 	bl	8000468 <__aeabi_dcmplt>
 80129f8:	2800      	cmp	r0, #0
 80129fa:	d11f      	bne.n	8012a3c <_strtod_l+0xadc>
 80129fc:	9808      	ldr	r0, [sp, #32]
 80129fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012a00:	2200      	movs	r2, #0
 8012a02:	4b63      	ldr	r3, [pc, #396]	; (8012b90 <_strtod_l+0xc30>)
 8012a04:	f7ee fea8 	bl	8001758 <__aeabi_dmul>
 8012a08:	0005      	movs	r5, r0
 8012a0a:	9108      	str	r1, [sp, #32]
 8012a0c:	2280      	movs	r2, #128	; 0x80
 8012a0e:	0612      	lsls	r2, r2, #24
 8012a10:	4694      	mov	ip, r2
 8012a12:	9b08      	ldr	r3, [sp, #32]
 8012a14:	951e      	str	r5, [sp, #120]	; 0x78
 8012a16:	4463      	add	r3, ip
 8012a18:	931f      	str	r3, [sp, #124]	; 0x7c
 8012a1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012a1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012a1e:	9210      	str	r2, [sp, #64]	; 0x40
 8012a20:	9311      	str	r3, [sp, #68]	; 0x44
 8012a22:	e798      	b.n	8012956 <_strtod_l+0x9f6>
 8012a24:	2e01      	cmp	r6, #1
 8012a26:	d103      	bne.n	8012a30 <_strtod_l+0xad0>
 8012a28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d100      	bne.n	8012a30 <_strtod_l+0xad0>
 8012a2e:	e562      	b.n	80124f6 <_strtod_l+0x596>
 8012a30:	2200      	movs	r2, #0
 8012a32:	4b58      	ldr	r3, [pc, #352]	; (8012b94 <_strtod_l+0xc34>)
 8012a34:	2500      	movs	r5, #0
 8012a36:	9210      	str	r2, [sp, #64]	; 0x40
 8012a38:	9311      	str	r3, [sp, #68]	; 0x44
 8012a3a:	e78a      	b.n	8012952 <_strtod_l+0x9f2>
 8012a3c:	4b54      	ldr	r3, [pc, #336]	; (8012b90 <_strtod_l+0xc30>)
 8012a3e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8012a40:	9308      	str	r3, [sp, #32]
 8012a42:	e7e3      	b.n	8012a0c <_strtod_l+0xaac>
 8012a44:	4b52      	ldr	r3, [pc, #328]	; (8012b90 <_strtod_l+0xc30>)
 8012a46:	9808      	ldr	r0, [sp, #32]
 8012a48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	f7ee fe84 	bl	8001758 <__aeabi_dmul>
 8012a50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012a52:	0005      	movs	r5, r0
 8012a54:	9108      	str	r1, [sp, #32]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d107      	bne.n	8012a6a <_strtod_l+0xb0a>
 8012a5a:	2380      	movs	r3, #128	; 0x80
 8012a5c:	061b      	lsls	r3, r3, #24
 8012a5e:	18cb      	adds	r3, r1, r3
 8012a60:	9016      	str	r0, [sp, #88]	; 0x58
 8012a62:	9317      	str	r3, [sp, #92]	; 0x5c
 8012a64:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012a66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012a68:	e7d9      	b.n	8012a1e <_strtod_l+0xabe>
 8012a6a:	0002      	movs	r2, r0
 8012a6c:	9b08      	ldr	r3, [sp, #32]
 8012a6e:	9216      	str	r2, [sp, #88]	; 0x58
 8012a70:	9317      	str	r3, [sp, #92]	; 0x5c
 8012a72:	e7f7      	b.n	8012a64 <_strtod_l+0xb04>
 8012a74:	23d4      	movs	r3, #212	; 0xd4
 8012a76:	049b      	lsls	r3, r3, #18
 8012a78:	18cf      	adds	r7, r1, r3
 8012a7a:	9b06      	ldr	r3, [sp, #24]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d19f      	bne.n	80129c0 <_strtod_l+0xa60>
 8012a80:	4b3e      	ldr	r3, [pc, #248]	; (8012b7c <_strtod_l+0xc1c>)
 8012a82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012a84:	970c      	str	r7, [sp, #48]	; 0x30
 8012a86:	403b      	ands	r3, r7
 8012a88:	429a      	cmp	r2, r3
 8012a8a:	d199      	bne.n	80129c0 <_strtod_l+0xa60>
 8012a8c:	9908      	ldr	r1, [sp, #32]
 8012a8e:	0028      	movs	r0, r5
 8012a90:	f7ef fc38 	bl	8002304 <__aeabi_d2iz>
 8012a94:	f7ef fc6c 	bl	8002370 <__aeabi_i2d>
 8012a98:	000b      	movs	r3, r1
 8012a9a:	0002      	movs	r2, r0
 8012a9c:	9908      	ldr	r1, [sp, #32]
 8012a9e:	0028      	movs	r0, r5
 8012aa0:	f7ef f8cc 	bl	8001c3c <__aeabi_dsub>
 8012aa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012aa6:	9008      	str	r0, [sp, #32]
 8012aa8:	9109      	str	r1, [sp, #36]	; 0x24
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d104      	bne.n	8012ab8 <_strtod_l+0xb58>
 8012aae:	2e00      	cmp	r6, #0
 8012ab0:	d102      	bne.n	8012ab8 <_strtod_l+0xb58>
 8012ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012ab4:	031b      	lsls	r3, r3, #12
 8012ab6:	d058      	beq.n	8012b6a <_strtod_l+0xc0a>
 8012ab8:	9808      	ldr	r0, [sp, #32]
 8012aba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012abc:	4a36      	ldr	r2, [pc, #216]	; (8012b98 <_strtod_l+0xc38>)
 8012abe:	4b37      	ldr	r3, [pc, #220]	; (8012b9c <_strtod_l+0xc3c>)
 8012ac0:	f7ed fcd2 	bl	8000468 <__aeabi_dcmplt>
 8012ac4:	2800      	cmp	r0, #0
 8012ac6:	d000      	beq.n	8012aca <_strtod_l+0xb6a>
 8012ac8:	e489      	b.n	80123de <_strtod_l+0x47e>
 8012aca:	9808      	ldr	r0, [sp, #32]
 8012acc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012ace:	4a34      	ldr	r2, [pc, #208]	; (8012ba0 <_strtod_l+0xc40>)
 8012ad0:	4b2f      	ldr	r3, [pc, #188]	; (8012b90 <_strtod_l+0xc30>)
 8012ad2:	f7ed fcdd 	bl	8000490 <__aeabi_dcmpgt>
 8012ad6:	2800      	cmp	r0, #0
 8012ad8:	d100      	bne.n	8012adc <_strtod_l+0xb7c>
 8012ada:	e771      	b.n	80129c0 <_strtod_l+0xa60>
 8012adc:	e47f      	b.n	80123de <_strtod_l+0x47e>
 8012ade:	9b06      	ldr	r3, [sp, #24]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d02a      	beq.n	8012b3a <_strtod_l+0xbda>
 8012ae4:	23d4      	movs	r3, #212	; 0xd4
 8012ae6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012ae8:	04db      	lsls	r3, r3, #19
 8012aea:	429a      	cmp	r2, r3
 8012aec:	d825      	bhi.n	8012b3a <_strtod_l+0xbda>
 8012aee:	4a2d      	ldr	r2, [pc, #180]	; (8012ba4 <_strtod_l+0xc44>)
 8012af0:	4b2d      	ldr	r3, [pc, #180]	; (8012ba8 <_strtod_l+0xc48>)
 8012af2:	0028      	movs	r0, r5
 8012af4:	9908      	ldr	r1, [sp, #32]
 8012af6:	f7ed fcc1 	bl	800047c <__aeabi_dcmple>
 8012afa:	2800      	cmp	r0, #0
 8012afc:	d016      	beq.n	8012b2c <_strtod_l+0xbcc>
 8012afe:	0028      	movs	r0, r5
 8012b00:	9908      	ldr	r1, [sp, #32]
 8012b02:	f7ed fd5d 	bl	80005c0 <__aeabi_d2uiz>
 8012b06:	2800      	cmp	r0, #0
 8012b08:	d100      	bne.n	8012b0c <_strtod_l+0xbac>
 8012b0a:	3001      	adds	r0, #1
 8012b0c:	f7ef fc6a 	bl	80023e4 <__aeabi_ui2d>
 8012b10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012b12:	0005      	movs	r5, r0
 8012b14:	9108      	str	r1, [sp, #32]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d122      	bne.n	8012b60 <_strtod_l+0xc00>
 8012b1a:	2380      	movs	r3, #128	; 0x80
 8012b1c:	061b      	lsls	r3, r3, #24
 8012b1e:	18cb      	adds	r3, r1, r3
 8012b20:	9018      	str	r0, [sp, #96]	; 0x60
 8012b22:	9319      	str	r3, [sp, #100]	; 0x64
 8012b24:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012b26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012b28:	9210      	str	r2, [sp, #64]	; 0x40
 8012b2a:	9311      	str	r3, [sp, #68]	; 0x44
 8012b2c:	22d6      	movs	r2, #214	; 0xd6
 8012b2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012b30:	04d2      	lsls	r2, r2, #19
 8012b32:	189b      	adds	r3, r3, r2
 8012b34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012b36:	1a9b      	subs	r3, r3, r2
 8012b38:	9311      	str	r3, [sp, #68]	; 0x44
 8012b3a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012b3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012b3e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8012b40:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8012b42:	f003 f911 	bl	8015d68 <__ulp>
 8012b46:	0002      	movs	r2, r0
 8012b48:	000b      	movs	r3, r1
 8012b4a:	0030      	movs	r0, r6
 8012b4c:	0039      	movs	r1, r7
 8012b4e:	f7ee fe03 	bl	8001758 <__aeabi_dmul>
 8012b52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012b54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012b56:	f7ed fed9 	bl	800090c <__aeabi_dadd>
 8012b5a:	0006      	movs	r6, r0
 8012b5c:	000f      	movs	r7, r1
 8012b5e:	e78c      	b.n	8012a7a <_strtod_l+0xb1a>
 8012b60:	0002      	movs	r2, r0
 8012b62:	9b08      	ldr	r3, [sp, #32]
 8012b64:	9218      	str	r2, [sp, #96]	; 0x60
 8012b66:	9319      	str	r3, [sp, #100]	; 0x64
 8012b68:	e7dc      	b.n	8012b24 <_strtod_l+0xbc4>
 8012b6a:	4a0b      	ldr	r2, [pc, #44]	; (8012b98 <_strtod_l+0xc38>)
 8012b6c:	4b0f      	ldr	r3, [pc, #60]	; (8012bac <_strtod_l+0xc4c>)
 8012b6e:	9808      	ldr	r0, [sp, #32]
 8012b70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012b72:	f7ed fc79 	bl	8000468 <__aeabi_dcmplt>
 8012b76:	e7ae      	b.n	8012ad6 <_strtod_l+0xb76>
 8012b78:	3ff00000 	.word	0x3ff00000
 8012b7c:	7ff00000 	.word	0x7ff00000
 8012b80:	7fe00000 	.word	0x7fe00000
 8012b84:	fcb00000 	.word	0xfcb00000
 8012b88:	7c9fffff 	.word	0x7c9fffff
 8012b8c:	7fefffff 	.word	0x7fefffff
 8012b90:	3fe00000 	.word	0x3fe00000
 8012b94:	bff00000 	.word	0xbff00000
 8012b98:	94a03595 	.word	0x94a03595
 8012b9c:	3fdfffff 	.word	0x3fdfffff
 8012ba0:	35afe535 	.word	0x35afe535
 8012ba4:	ffc00000 	.word	0xffc00000
 8012ba8:	41dfffff 	.word	0x41dfffff
 8012bac:	3fcfffff 	.word	0x3fcfffff

08012bb0 <strtod>:
 8012bb0:	4b06      	ldr	r3, [pc, #24]	; (8012bcc <strtod+0x1c>)
 8012bb2:	b510      	push	{r4, lr}
 8012bb4:	0004      	movs	r4, r0
 8012bb6:	6818      	ldr	r0, [r3, #0]
 8012bb8:	000a      	movs	r2, r1
 8012bba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d100      	bne.n	8012bc2 <strtod+0x12>
 8012bc0:	4b03      	ldr	r3, [pc, #12]	; (8012bd0 <strtod+0x20>)
 8012bc2:	0021      	movs	r1, r4
 8012bc4:	f7ff f9cc 	bl	8011f60 <_strtod_l>
 8012bc8:	bd10      	pop	{r4, pc}
 8012bca:	46c0      	nop			; (mov r8, r8)
 8012bcc:	200000a8 	.word	0x200000a8
 8012bd0:	200004d8 	.word	0x200004d8

08012bd4 <strtok>:
 8012bd4:	4b03      	ldr	r3, [pc, #12]	; (8012be4 <strtok+0x10>)
 8012bd6:	b510      	push	{r4, lr}
 8012bd8:	681a      	ldr	r2, [r3, #0]
 8012bda:	2301      	movs	r3, #1
 8012bdc:	325c      	adds	r2, #92	; 0x5c
 8012bde:	f000 f803 	bl	8012be8 <__strtok_r>
 8012be2:	bd10      	pop	{r4, pc}
 8012be4:	200000a8 	.word	0x200000a8

08012be8 <__strtok_r>:
 8012be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bea:	2800      	cmp	r0, #0
 8012bec:	d104      	bne.n	8012bf8 <__strtok_r+0x10>
 8012bee:	6810      	ldr	r0, [r2, #0]
 8012bf0:	2800      	cmp	r0, #0
 8012bf2:	d101      	bne.n	8012bf8 <__strtok_r+0x10>
 8012bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bf6:	0020      	movs	r0, r4
 8012bf8:	000e      	movs	r6, r1
 8012bfa:	7805      	ldrb	r5, [r0, #0]
 8012bfc:	1c44      	adds	r4, r0, #1
 8012bfe:	7837      	ldrb	r7, [r6, #0]
 8012c00:	2f00      	cmp	r7, #0
 8012c02:	d104      	bne.n	8012c0e <__strtok_r+0x26>
 8012c04:	2d00      	cmp	r5, #0
 8012c06:	d110      	bne.n	8012c2a <__strtok_r+0x42>
 8012c08:	6015      	str	r5, [r2, #0]
 8012c0a:	0028      	movs	r0, r5
 8012c0c:	e7f2      	b.n	8012bf4 <__strtok_r+0xc>
 8012c0e:	3601      	adds	r6, #1
 8012c10:	42bd      	cmp	r5, r7
 8012c12:	d1f4      	bne.n	8012bfe <__strtok_r+0x16>
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d1ee      	bne.n	8012bf6 <__strtok_r+0xe>
 8012c18:	6014      	str	r4, [r2, #0]
 8012c1a:	7003      	strb	r3, [r0, #0]
 8012c1c:	e7ea      	b.n	8012bf4 <__strtok_r+0xc>
 8012c1e:	0033      	movs	r3, r6
 8012c20:	e00d      	b.n	8012c3e <__strtok_r+0x56>
 8012c22:	3501      	adds	r5, #1
 8012c24:	2f00      	cmp	r7, #0
 8012c26:	d103      	bne.n	8012c30 <__strtok_r+0x48>
 8012c28:	001c      	movs	r4, r3
 8012c2a:	000d      	movs	r5, r1
 8012c2c:	7826      	ldrb	r6, [r4, #0]
 8012c2e:	1c63      	adds	r3, r4, #1
 8012c30:	782f      	ldrb	r7, [r5, #0]
 8012c32:	42be      	cmp	r6, r7
 8012c34:	d1f5      	bne.n	8012c22 <__strtok_r+0x3a>
 8012c36:	2e00      	cmp	r6, #0
 8012c38:	d0f1      	beq.n	8012c1e <__strtok_r+0x36>
 8012c3a:	2100      	movs	r1, #0
 8012c3c:	7021      	strb	r1, [r4, #0]
 8012c3e:	6013      	str	r3, [r2, #0]
 8012c40:	e7d8      	b.n	8012bf4 <__strtok_r+0xc>
	...

08012c44 <_strtol_l.isra.0>:
 8012c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c46:	001f      	movs	r7, r3
 8012c48:	000e      	movs	r6, r1
 8012c4a:	b087      	sub	sp, #28
 8012c4c:	9005      	str	r0, [sp, #20]
 8012c4e:	9101      	str	r1, [sp, #4]
 8012c50:	9202      	str	r2, [sp, #8]
 8012c52:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012c54:	7834      	ldrb	r4, [r6, #0]
 8012c56:	f7fe fc9f 	bl	8011598 <__locale_ctype_ptr_l>
 8012c5a:	2208      	movs	r2, #8
 8012c5c:	1900      	adds	r0, r0, r4
 8012c5e:	7843      	ldrb	r3, [r0, #1]
 8012c60:	1c75      	adds	r5, r6, #1
 8012c62:	4013      	ands	r3, r2
 8012c64:	d136      	bne.n	8012cd4 <_strtol_l.isra.0+0x90>
 8012c66:	2c2d      	cmp	r4, #45	; 0x2d
 8012c68:	d136      	bne.n	8012cd8 <_strtol_l.isra.0+0x94>
 8012c6a:	1cb5      	adds	r5, r6, #2
 8012c6c:	7874      	ldrb	r4, [r6, #1]
 8012c6e:	2601      	movs	r6, #1
 8012c70:	2f00      	cmp	r7, #0
 8012c72:	d062      	beq.n	8012d3a <_strtol_l.isra.0+0xf6>
 8012c74:	2f10      	cmp	r7, #16
 8012c76:	d109      	bne.n	8012c8c <_strtol_l.isra.0+0x48>
 8012c78:	2c30      	cmp	r4, #48	; 0x30
 8012c7a:	d107      	bne.n	8012c8c <_strtol_l.isra.0+0x48>
 8012c7c:	2220      	movs	r2, #32
 8012c7e:	782b      	ldrb	r3, [r5, #0]
 8012c80:	4393      	bics	r3, r2
 8012c82:	2b58      	cmp	r3, #88	; 0x58
 8012c84:	d154      	bne.n	8012d30 <_strtol_l.isra.0+0xec>
 8012c86:	2710      	movs	r7, #16
 8012c88:	786c      	ldrb	r4, [r5, #1]
 8012c8a:	3502      	adds	r5, #2
 8012c8c:	4b2d      	ldr	r3, [pc, #180]	; (8012d44 <_strtol_l.isra.0+0x100>)
 8012c8e:	0039      	movs	r1, r7
 8012c90:	18f3      	adds	r3, r6, r3
 8012c92:	0018      	movs	r0, r3
 8012c94:	9303      	str	r3, [sp, #12]
 8012c96:	f7ed fae1 	bl	800025c <__aeabi_uidivmod>
 8012c9a:	9104      	str	r1, [sp, #16]
 8012c9c:	2101      	movs	r1, #1
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	4249      	negs	r1, r1
 8012ca2:	0002      	movs	r2, r0
 8012ca4:	468c      	mov	ip, r1
 8012ca6:	0018      	movs	r0, r3
 8012ca8:	0021      	movs	r1, r4
 8012caa:	3930      	subs	r1, #48	; 0x30
 8012cac:	2909      	cmp	r1, #9
 8012cae:	d81a      	bhi.n	8012ce6 <_strtol_l.isra.0+0xa2>
 8012cb0:	000c      	movs	r4, r1
 8012cb2:	42a7      	cmp	r7, r4
 8012cb4:	dd23      	ble.n	8012cfe <_strtol_l.isra.0+0xba>
 8012cb6:	1c59      	adds	r1, r3, #1
 8012cb8:	d009      	beq.n	8012cce <_strtol_l.isra.0+0x8a>
 8012cba:	4663      	mov	r3, ip
 8012cbc:	4282      	cmp	r2, r0
 8012cbe:	d306      	bcc.n	8012cce <_strtol_l.isra.0+0x8a>
 8012cc0:	d102      	bne.n	8012cc8 <_strtol_l.isra.0+0x84>
 8012cc2:	9904      	ldr	r1, [sp, #16]
 8012cc4:	42a1      	cmp	r1, r4
 8012cc6:	db02      	blt.n	8012cce <_strtol_l.isra.0+0x8a>
 8012cc8:	2301      	movs	r3, #1
 8012cca:	4378      	muls	r0, r7
 8012ccc:	1820      	adds	r0, r4, r0
 8012cce:	782c      	ldrb	r4, [r5, #0]
 8012cd0:	3501      	adds	r5, #1
 8012cd2:	e7e9      	b.n	8012ca8 <_strtol_l.isra.0+0x64>
 8012cd4:	002e      	movs	r6, r5
 8012cd6:	e7bc      	b.n	8012c52 <_strtol_l.isra.0+0xe>
 8012cd8:	2c2b      	cmp	r4, #43	; 0x2b
 8012cda:	d001      	beq.n	8012ce0 <_strtol_l.isra.0+0x9c>
 8012cdc:	001e      	movs	r6, r3
 8012cde:	e7c7      	b.n	8012c70 <_strtol_l.isra.0+0x2c>
 8012ce0:	1cb5      	adds	r5, r6, #2
 8012ce2:	7874      	ldrb	r4, [r6, #1]
 8012ce4:	e7fa      	b.n	8012cdc <_strtol_l.isra.0+0x98>
 8012ce6:	0021      	movs	r1, r4
 8012ce8:	3941      	subs	r1, #65	; 0x41
 8012cea:	2919      	cmp	r1, #25
 8012cec:	d801      	bhi.n	8012cf2 <_strtol_l.isra.0+0xae>
 8012cee:	3c37      	subs	r4, #55	; 0x37
 8012cf0:	e7df      	b.n	8012cb2 <_strtol_l.isra.0+0x6e>
 8012cf2:	0021      	movs	r1, r4
 8012cf4:	3961      	subs	r1, #97	; 0x61
 8012cf6:	2919      	cmp	r1, #25
 8012cf8:	d801      	bhi.n	8012cfe <_strtol_l.isra.0+0xba>
 8012cfa:	3c57      	subs	r4, #87	; 0x57
 8012cfc:	e7d9      	b.n	8012cb2 <_strtol_l.isra.0+0x6e>
 8012cfe:	1c5a      	adds	r2, r3, #1
 8012d00:	d108      	bne.n	8012d14 <_strtol_l.isra.0+0xd0>
 8012d02:	9a05      	ldr	r2, [sp, #20]
 8012d04:	3323      	adds	r3, #35	; 0x23
 8012d06:	6013      	str	r3, [r2, #0]
 8012d08:	9b02      	ldr	r3, [sp, #8]
 8012d0a:	9803      	ldr	r0, [sp, #12]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d109      	bne.n	8012d24 <_strtol_l.isra.0+0xe0>
 8012d10:	b007      	add	sp, #28
 8012d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d14:	2e00      	cmp	r6, #0
 8012d16:	d000      	beq.n	8012d1a <_strtol_l.isra.0+0xd6>
 8012d18:	4240      	negs	r0, r0
 8012d1a:	9a02      	ldr	r2, [sp, #8]
 8012d1c:	2a00      	cmp	r2, #0
 8012d1e:	d0f7      	beq.n	8012d10 <_strtol_l.isra.0+0xcc>
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d001      	beq.n	8012d28 <_strtol_l.isra.0+0xe4>
 8012d24:	1e6b      	subs	r3, r5, #1
 8012d26:	9301      	str	r3, [sp, #4]
 8012d28:	9b02      	ldr	r3, [sp, #8]
 8012d2a:	9a01      	ldr	r2, [sp, #4]
 8012d2c:	601a      	str	r2, [r3, #0]
 8012d2e:	e7ef      	b.n	8012d10 <_strtol_l.isra.0+0xcc>
 8012d30:	2430      	movs	r4, #48	; 0x30
 8012d32:	2f00      	cmp	r7, #0
 8012d34:	d1aa      	bne.n	8012c8c <_strtol_l.isra.0+0x48>
 8012d36:	2708      	movs	r7, #8
 8012d38:	e7a8      	b.n	8012c8c <_strtol_l.isra.0+0x48>
 8012d3a:	2c30      	cmp	r4, #48	; 0x30
 8012d3c:	d09e      	beq.n	8012c7c <_strtol_l.isra.0+0x38>
 8012d3e:	270a      	movs	r7, #10
 8012d40:	e7a4      	b.n	8012c8c <_strtol_l.isra.0+0x48>
 8012d42:	46c0      	nop			; (mov r8, r8)
 8012d44:	7fffffff 	.word	0x7fffffff

08012d48 <strtol>:
 8012d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d4a:	0013      	movs	r3, r2
 8012d4c:	4a06      	ldr	r2, [pc, #24]	; (8012d68 <strtol+0x20>)
 8012d4e:	0005      	movs	r5, r0
 8012d50:	6810      	ldr	r0, [r2, #0]
 8012d52:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8012d54:	2c00      	cmp	r4, #0
 8012d56:	d100      	bne.n	8012d5a <strtol+0x12>
 8012d58:	4c04      	ldr	r4, [pc, #16]	; (8012d6c <strtol+0x24>)
 8012d5a:	000a      	movs	r2, r1
 8012d5c:	9400      	str	r4, [sp, #0]
 8012d5e:	0029      	movs	r1, r5
 8012d60:	f7ff ff70 	bl	8012c44 <_strtol_l.isra.0>
 8012d64:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8012d66:	46c0      	nop			; (mov r8, r8)
 8012d68:	200000a8 	.word	0x200000a8
 8012d6c:	200004d8 	.word	0x200004d8

08012d70 <_svfprintf_r>:
 8012d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d72:	b0d9      	sub	sp, #356	; 0x164
 8012d74:	910b      	str	r1, [sp, #44]	; 0x2c
 8012d76:	9209      	str	r2, [sp, #36]	; 0x24
 8012d78:	001c      	movs	r4, r3
 8012d7a:	900a      	str	r0, [sp, #40]	; 0x28
 8012d7c:	f002 fd26 	bl	80157cc <_localeconv_r>
 8012d80:	6803      	ldr	r3, [r0, #0]
 8012d82:	0018      	movs	r0, r3
 8012d84:	931c      	str	r3, [sp, #112]	; 0x70
 8012d86:	f7ed f9c7 	bl	8000118 <strlen>
 8012d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d8c:	9014      	str	r0, [sp, #80]	; 0x50
 8012d8e:	899b      	ldrh	r3, [r3, #12]
 8012d90:	061b      	lsls	r3, r3, #24
 8012d92:	d518      	bpl.n	8012dc6 <_svfprintf_r+0x56>
 8012d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d96:	691b      	ldr	r3, [r3, #16]
 8012d98:	9308      	str	r3, [sp, #32]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d113      	bne.n	8012dc6 <_svfprintf_r+0x56>
 8012d9e:	2140      	movs	r1, #64	; 0x40
 8012da0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012da2:	f7fe fc1f 	bl	80115e4 <_malloc_r>
 8012da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012da8:	6018      	str	r0, [r3, #0]
 8012daa:	6118      	str	r0, [r3, #16]
 8012dac:	2800      	cmp	r0, #0
 8012dae:	d107      	bne.n	8012dc0 <_svfprintf_r+0x50>
 8012db0:	230c      	movs	r3, #12
 8012db2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012db4:	6013      	str	r3, [r2, #0]
 8012db6:	3b0d      	subs	r3, #13
 8012db8:	9315      	str	r3, [sp, #84]	; 0x54
 8012dba:	9815      	ldr	r0, [sp, #84]	; 0x54
 8012dbc:	b059      	add	sp, #356	; 0x164
 8012dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dc0:	2340      	movs	r3, #64	; 0x40
 8012dc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012dc4:	6153      	str	r3, [r2, #20]
 8012dc6:	2600      	movs	r6, #0
 8012dc8:	af2f      	add	r7, sp, #188	; 0xbc
 8012dca:	972c      	str	r7, [sp, #176]	; 0xb0
 8012dcc:	962e      	str	r6, [sp, #184]	; 0xb8
 8012dce:	962d      	str	r6, [sp, #180]	; 0xb4
 8012dd0:	960d      	str	r6, [sp, #52]	; 0x34
 8012dd2:	961a      	str	r6, [sp, #104]	; 0x68
 8012dd4:	9619      	str	r6, [sp, #100]	; 0x64
 8012dd6:	961e      	str	r6, [sp, #120]	; 0x78
 8012dd8:	961d      	str	r6, [sp, #116]	; 0x74
 8012dda:	9613      	str	r6, [sp, #76]	; 0x4c
 8012ddc:	961b      	str	r6, [sp, #108]	; 0x6c
 8012dde:	961f      	str	r6, [sp, #124]	; 0x7c
 8012de0:	9615      	str	r6, [sp, #84]	; 0x54
 8012de2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012de4:	782b      	ldrb	r3, [r5, #0]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d002      	beq.n	8012df0 <_svfprintf_r+0x80>
 8012dea:	2b25      	cmp	r3, #37	; 0x25
 8012dec:	d000      	beq.n	8012df0 <_svfprintf_r+0x80>
 8012dee:	e095      	b.n	8012f1c <_svfprintf_r+0x1ac>
 8012df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012df2:	1aee      	subs	r6, r5, r3
 8012df4:	d017      	beq.n	8012e26 <_svfprintf_r+0xb6>
 8012df6:	603b      	str	r3, [r7, #0]
 8012df8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8012dfa:	607e      	str	r6, [r7, #4]
 8012dfc:	199b      	adds	r3, r3, r6
 8012dfe:	932e      	str	r3, [sp, #184]	; 0xb8
 8012e00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8012e02:	3708      	adds	r7, #8
 8012e04:	9308      	str	r3, [sp, #32]
 8012e06:	3301      	adds	r3, #1
 8012e08:	932d      	str	r3, [sp, #180]	; 0xb4
 8012e0a:	2b07      	cmp	r3, #7
 8012e0c:	dd08      	ble.n	8012e20 <_svfprintf_r+0xb0>
 8012e0e:	aa2c      	add	r2, sp, #176	; 0xb0
 8012e10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012e12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012e14:	f003 f900 	bl	8016018 <__ssprint_r>
 8012e18:	2800      	cmp	r0, #0
 8012e1a:	d000      	beq.n	8012e1e <_svfprintf_r+0xae>
 8012e1c:	e2d9      	b.n	80133d2 <_svfprintf_r+0x662>
 8012e1e:	af2f      	add	r7, sp, #188	; 0xbc
 8012e20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012e22:	199b      	adds	r3, r3, r6
 8012e24:	9315      	str	r3, [sp, #84]	; 0x54
 8012e26:	782b      	ldrb	r3, [r5, #0]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d101      	bne.n	8012e30 <_svfprintf_r+0xc0>
 8012e2c:	f001 f9e5 	bl	80141fa <_svfprintf_r+0x148a>
 8012e30:	1c6b      	adds	r3, r5, #1
 8012e32:	221b      	movs	r2, #27
 8012e34:	9311      	str	r3, [sp, #68]	; 0x44
 8012e36:	2300      	movs	r3, #0
 8012e38:	a91e      	add	r1, sp, #120	; 0x78
 8012e3a:	1852      	adds	r2, r2, r1
 8012e3c:	7013      	strb	r3, [r2, #0]
 8012e3e:	2201      	movs	r2, #1
 8012e40:	001e      	movs	r6, r3
 8012e42:	2520      	movs	r5, #32
 8012e44:	4252      	negs	r2, r2
 8012e46:	9208      	str	r2, [sp, #32]
 8012e48:	9316      	str	r3, [sp, #88]	; 0x58
 8012e4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012e4c:	781b      	ldrb	r3, [r3, #0]
 8012e4e:	930e      	str	r3, [sp, #56]	; 0x38
 8012e50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012e52:	3301      	adds	r3, #1
 8012e54:	9311      	str	r3, [sp, #68]	; 0x44
 8012e56:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012e58:	3820      	subs	r0, #32
 8012e5a:	285a      	cmp	r0, #90	; 0x5a
 8012e5c:	d901      	bls.n	8012e62 <_svfprintf_r+0xf2>
 8012e5e:	f000 fe3d 	bl	8013adc <_svfprintf_r+0xd6c>
 8012e62:	f7ed f96b 	bl	800013c <__gnu_thumb1_case_shi>
 8012e66:	009e      	.short	0x009e
 8012e68:	063b063b 	.word	0x063b063b
 8012e6c:	063b00a7 	.word	0x063b00a7
 8012e70:	063b063b 	.word	0x063b063b
 8012e74:	063b0080 	.word	0x063b0080
 8012e78:	00a9063b 	.word	0x00a9063b
 8012e7c:	063b00b3 	.word	0x063b00b3
 8012e80:	00b900b1 	.word	0x00b900b1
 8012e84:	00dd063b 	.word	0x00dd063b
 8012e88:	00df00df 	.word	0x00df00df
 8012e8c:	00df00df 	.word	0x00df00df
 8012e90:	00df00df 	.word	0x00df00df
 8012e94:	00df00df 	.word	0x00df00df
 8012e98:	063b00df 	.word	0x063b00df
 8012e9c:	063b063b 	.word	0x063b063b
 8012ea0:	063b063b 	.word	0x063b063b
 8012ea4:	063b063b 	.word	0x063b063b
 8012ea8:	063b0240 	.word	0x063b0240
 8012eac:	01fd010a 	.word	0x01fd010a
 8012eb0:	02400240 	.word	0x02400240
 8012eb4:	063b0240 	.word	0x063b0240
 8012eb8:	063b063b 	.word	0x063b063b
 8012ebc:	00f1063b 	.word	0x00f1063b
 8012ec0:	063b063b 	.word	0x063b063b
 8012ec4:	063b04e2 	.word	0x063b04e2
 8012ec8:	063b063b 	.word	0x063b063b
 8012ecc:	063b0537 	.word	0x063b0537
 8012ed0:	063b0557 	.word	0x063b0557
 8012ed4:	005d063b 	.word	0x005d063b
 8012ed8:	063b063b 	.word	0x063b063b
 8012edc:	063b063b 	.word	0x063b063b
 8012ee0:	063b063b 	.word	0x063b063b
 8012ee4:	063b063b 	.word	0x063b063b
 8012ee8:	063b0240 	.word	0x063b0240
 8012eec:	01ff010a 	.word	0x01ff010a
 8012ef0:	02400240 	.word	0x02400240
 8012ef4:	00f30240 	.word	0x00f30240
 8012ef8:	010601ff 	.word	0x010601ff
 8012efc:	00ff063b 	.word	0x00ff063b
 8012f00:	04c5063b 	.word	0x04c5063b
 8012f04:	052704e4 	.word	0x052704e4
 8012f08:	063b0106 	.word	0x063b0106
 8012f0c:	fff20537 	.word	0xfff20537
 8012f10:	063b0559 	.word	0x063b0559
 8012f14:	0582063b 	.word	0x0582063b
 8012f18:	fff2063b 	.word	0xfff2063b
 8012f1c:	3501      	adds	r5, #1
 8012f1e:	e761      	b.n	8012de4 <_svfprintf_r+0x74>
 8012f20:	4bcb      	ldr	r3, [pc, #812]	; (8013250 <_svfprintf_r+0x4e0>)
 8012f22:	2220      	movs	r2, #32
 8012f24:	931e      	str	r3, [sp, #120]	; 0x78
 8012f26:	4032      	ands	r2, r6
 8012f28:	d101      	bne.n	8012f2e <_svfprintf_r+0x1be>
 8012f2a:	f000 fd21 	bl	8013970 <_svfprintf_r+0xc00>
 8012f2e:	2307      	movs	r3, #7
 8012f30:	3407      	adds	r4, #7
 8012f32:	439c      	bics	r4, r3
 8012f34:	0023      	movs	r3, r4
 8012f36:	3308      	adds	r3, #8
 8012f38:	9312      	str	r3, [sp, #72]	; 0x48
 8012f3a:	6823      	ldr	r3, [r4, #0]
 8012f3c:	6864      	ldr	r4, [r4, #4]
 8012f3e:	9306      	str	r3, [sp, #24]
 8012f40:	9407      	str	r4, [sp, #28]
 8012f42:	07f3      	lsls	r3, r6, #31
 8012f44:	d50a      	bpl.n	8012f5c <_svfprintf_r+0x1ec>
 8012f46:	9b06      	ldr	r3, [sp, #24]
 8012f48:	9a07      	ldr	r2, [sp, #28]
 8012f4a:	4313      	orrs	r3, r2
 8012f4c:	d006      	beq.n	8012f5c <_svfprintf_r+0x1ec>
 8012f4e:	2230      	movs	r2, #48	; 0x30
 8012f50:	ab25      	add	r3, sp, #148	; 0x94
 8012f52:	701a      	strb	r2, [r3, #0]
 8012f54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012f56:	705a      	strb	r2, [r3, #1]
 8012f58:	2302      	movs	r3, #2
 8012f5a:	431e      	orrs	r6, r3
 8012f5c:	4bbd      	ldr	r3, [pc, #756]	; (8013254 <_svfprintf_r+0x4e4>)
 8012f5e:	401e      	ands	r6, r3
 8012f60:	2302      	movs	r3, #2
 8012f62:	f000 fc74 	bl	801384e <_svfprintf_r+0xade>
 8012f66:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012f68:	f002 fc30 	bl	80157cc <_localeconv_r>
 8012f6c:	6843      	ldr	r3, [r0, #4]
 8012f6e:	0018      	movs	r0, r3
 8012f70:	931f      	str	r3, [sp, #124]	; 0x7c
 8012f72:	f7ed f8d1 	bl	8000118 <strlen>
 8012f76:	901b      	str	r0, [sp, #108]	; 0x6c
 8012f78:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012f7a:	f002 fc27 	bl	80157cc <_localeconv_r>
 8012f7e:	6883      	ldr	r3, [r0, #8]
 8012f80:	9313      	str	r3, [sp, #76]	; 0x4c
 8012f82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d100      	bne.n	8012f8a <_svfprintf_r+0x21a>
 8012f88:	e75f      	b.n	8012e4a <_svfprintf_r+0xda>
 8012f8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d100      	bne.n	8012f92 <_svfprintf_r+0x222>
 8012f90:	e75b      	b.n	8012e4a <_svfprintf_r+0xda>
 8012f92:	781b      	ldrb	r3, [r3, #0]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d100      	bne.n	8012f9a <_svfprintf_r+0x22a>
 8012f98:	e757      	b.n	8012e4a <_svfprintf_r+0xda>
 8012f9a:	2380      	movs	r3, #128	; 0x80
 8012f9c:	00db      	lsls	r3, r3, #3
 8012f9e:	431e      	orrs	r6, r3
 8012fa0:	e753      	b.n	8012e4a <_svfprintf_r+0xda>
 8012fa2:	231b      	movs	r3, #27
 8012fa4:	aa1e      	add	r2, sp, #120	; 0x78
 8012fa6:	189b      	adds	r3, r3, r2
 8012fa8:	781a      	ldrb	r2, [r3, #0]
 8012faa:	2a00      	cmp	r2, #0
 8012fac:	d000      	beq.n	8012fb0 <_svfprintf_r+0x240>
 8012fae:	e74c      	b.n	8012e4a <_svfprintf_r+0xda>
 8012fb0:	701d      	strb	r5, [r3, #0]
 8012fb2:	e74a      	b.n	8012e4a <_svfprintf_r+0xda>
 8012fb4:	2301      	movs	r3, #1
 8012fb6:	e7f2      	b.n	8012f9e <_svfprintf_r+0x22e>
 8012fb8:	6823      	ldr	r3, [r4, #0]
 8012fba:	3404      	adds	r4, #4
 8012fbc:	9316      	str	r3, [sp, #88]	; 0x58
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	db00      	blt.n	8012fc4 <_svfprintf_r+0x254>
 8012fc2:	e742      	b.n	8012e4a <_svfprintf_r+0xda>
 8012fc4:	425b      	negs	r3, r3
 8012fc6:	9316      	str	r3, [sp, #88]	; 0x58
 8012fc8:	2304      	movs	r3, #4
 8012fca:	e7e8      	b.n	8012f9e <_svfprintf_r+0x22e>
 8012fcc:	231b      	movs	r3, #27
 8012fce:	aa1e      	add	r2, sp, #120	; 0x78
 8012fd0:	189b      	adds	r3, r3, r2
 8012fd2:	222b      	movs	r2, #43	; 0x2b
 8012fd4:	701a      	strb	r2, [r3, #0]
 8012fd6:	e738      	b.n	8012e4a <_svfprintf_r+0xda>
 8012fd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012fda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012fdc:	7812      	ldrb	r2, [r2, #0]
 8012fde:	3301      	adds	r3, #1
 8012fe0:	920e      	str	r2, [sp, #56]	; 0x38
 8012fe2:	2a2a      	cmp	r2, #42	; 0x2a
 8012fe4:	d008      	beq.n	8012ff8 <_svfprintf_r+0x288>
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	9208      	str	r2, [sp, #32]
 8012fea:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012fec:	001a      	movs	r2, r3
 8012fee:	3930      	subs	r1, #48	; 0x30
 8012ff0:	2909      	cmp	r1, #9
 8012ff2:	d90c      	bls.n	801300e <_svfprintf_r+0x29e>
 8012ff4:	9211      	str	r2, [sp, #68]	; 0x44
 8012ff6:	e72e      	b.n	8012e56 <_svfprintf_r+0xe6>
 8012ff8:	6821      	ldr	r1, [r4, #0]
 8012ffa:	1d22      	adds	r2, r4, #4
 8012ffc:	9108      	str	r1, [sp, #32]
 8012ffe:	2900      	cmp	r1, #0
 8013000:	da02      	bge.n	8013008 <_svfprintf_r+0x298>
 8013002:	2101      	movs	r1, #1
 8013004:	4249      	negs	r1, r1
 8013006:	9108      	str	r1, [sp, #32]
 8013008:	0014      	movs	r4, r2
 801300a:	9311      	str	r3, [sp, #68]	; 0x44
 801300c:	e71d      	b.n	8012e4a <_svfprintf_r+0xda>
 801300e:	200a      	movs	r0, #10
 8013010:	9a08      	ldr	r2, [sp, #32]
 8013012:	4342      	muls	r2, r0
 8013014:	1852      	adds	r2, r2, r1
 8013016:	9208      	str	r2, [sp, #32]
 8013018:	781a      	ldrb	r2, [r3, #0]
 801301a:	3301      	adds	r3, #1
 801301c:	920e      	str	r2, [sp, #56]	; 0x38
 801301e:	e7e4      	b.n	8012fea <_svfprintf_r+0x27a>
 8013020:	2380      	movs	r3, #128	; 0x80
 8013022:	e7bc      	b.n	8012f9e <_svfprintf_r+0x22e>
 8013024:	2300      	movs	r3, #0
 8013026:	9316      	str	r3, [sp, #88]	; 0x58
 8013028:	220a      	movs	r2, #10
 801302a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801302c:	4353      	muls	r3, r2
 801302e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013030:	3a30      	subs	r2, #48	; 0x30
 8013032:	18d3      	adds	r3, r2, r3
 8013034:	9316      	str	r3, [sp, #88]	; 0x58
 8013036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013038:	1c5a      	adds	r2, r3, #1
 801303a:	781b      	ldrb	r3, [r3, #0]
 801303c:	9211      	str	r2, [sp, #68]	; 0x44
 801303e:	930e      	str	r3, [sp, #56]	; 0x38
 8013040:	3b30      	subs	r3, #48	; 0x30
 8013042:	2b09      	cmp	r3, #9
 8013044:	d9f0      	bls.n	8013028 <_svfprintf_r+0x2b8>
 8013046:	e7d5      	b.n	8012ff4 <_svfprintf_r+0x284>
 8013048:	2308      	movs	r3, #8
 801304a:	e7a8      	b.n	8012f9e <_svfprintf_r+0x22e>
 801304c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801304e:	781b      	ldrb	r3, [r3, #0]
 8013050:	2b68      	cmp	r3, #104	; 0x68
 8013052:	d105      	bne.n	8013060 <_svfprintf_r+0x2f0>
 8013054:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013056:	3301      	adds	r3, #1
 8013058:	9311      	str	r3, [sp, #68]	; 0x44
 801305a:	2380      	movs	r3, #128	; 0x80
 801305c:	009b      	lsls	r3, r3, #2
 801305e:	e79e      	b.n	8012f9e <_svfprintf_r+0x22e>
 8013060:	2340      	movs	r3, #64	; 0x40
 8013062:	e79c      	b.n	8012f9e <_svfprintf_r+0x22e>
 8013064:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013066:	781b      	ldrb	r3, [r3, #0]
 8013068:	2b6c      	cmp	r3, #108	; 0x6c
 801306a:	d104      	bne.n	8013076 <_svfprintf_r+0x306>
 801306c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801306e:	3301      	adds	r3, #1
 8013070:	9311      	str	r3, [sp, #68]	; 0x44
 8013072:	432e      	orrs	r6, r5
 8013074:	e6e9      	b.n	8012e4a <_svfprintf_r+0xda>
 8013076:	2310      	movs	r3, #16
 8013078:	e791      	b.n	8012f9e <_svfprintf_r+0x22e>
 801307a:	1d23      	adds	r3, r4, #4
 801307c:	6822      	ldr	r2, [r4, #0]
 801307e:	9312      	str	r3, [sp, #72]	; 0x48
 8013080:	ab3f      	add	r3, sp, #252	; 0xfc
 8013082:	701a      	strb	r2, [r3, #0]
 8013084:	221b      	movs	r2, #27
 8013086:	2000      	movs	r0, #0
 8013088:	a91e      	add	r1, sp, #120	; 0x78
 801308a:	1852      	adds	r2, r2, r1
 801308c:	7010      	strb	r0, [r2, #0]
 801308e:	2201      	movs	r2, #1
 8013090:	0005      	movs	r5, r0
 8013092:	900c      	str	r0, [sp, #48]	; 0x30
 8013094:	9208      	str	r2, [sp, #32]
 8013096:	9017      	str	r0, [sp, #92]	; 0x5c
 8013098:	9010      	str	r0, [sp, #64]	; 0x40
 801309a:	900f      	str	r0, [sp, #60]	; 0x3c
 801309c:	9309      	str	r3, [sp, #36]	; 0x24
 801309e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80130a0:	9a08      	ldr	r2, [sp, #32]
 80130a2:	9318      	str	r3, [sp, #96]	; 0x60
 80130a4:	4293      	cmp	r3, r2
 80130a6:	da00      	bge.n	80130aa <_svfprintf_r+0x33a>
 80130a8:	9218      	str	r2, [sp, #96]	; 0x60
 80130aa:	231b      	movs	r3, #27
 80130ac:	aa1e      	add	r2, sp, #120	; 0x78
 80130ae:	189b      	adds	r3, r3, r2
 80130b0:	781b      	ldrb	r3, [r3, #0]
 80130b2:	1e5a      	subs	r2, r3, #1
 80130b4:	4193      	sbcs	r3, r2
 80130b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80130b8:	18d3      	adds	r3, r2, r3
 80130ba:	9318      	str	r3, [sp, #96]	; 0x60
 80130bc:	2302      	movs	r3, #2
 80130be:	4033      	ands	r3, r6
 80130c0:	9320      	str	r3, [sp, #128]	; 0x80
 80130c2:	d002      	beq.n	80130ca <_svfprintf_r+0x35a>
 80130c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80130c6:	3302      	adds	r3, #2
 80130c8:	9318      	str	r3, [sp, #96]	; 0x60
 80130ca:	2384      	movs	r3, #132	; 0x84
 80130cc:	4033      	ands	r3, r6
 80130ce:	9321      	str	r3, [sp, #132]	; 0x84
 80130d0:	d121      	bne.n	8013116 <_svfprintf_r+0x3a6>
 80130d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80130d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80130d6:	1a9c      	subs	r4, r3, r2
 80130d8:	2c00      	cmp	r4, #0
 80130da:	dd1c      	ble.n	8013116 <_svfprintf_r+0x3a6>
 80130dc:	0039      	movs	r1, r7
 80130de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80130e0:	485d      	ldr	r0, [pc, #372]	; (8013258 <_svfprintf_r+0x4e8>)
 80130e2:	9322      	str	r3, [sp, #136]	; 0x88
 80130e4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80130e6:	3301      	adds	r3, #1
 80130e8:	3108      	adds	r1, #8
 80130ea:	6038      	str	r0, [r7, #0]
 80130ec:	2c10      	cmp	r4, #16
 80130ee:	dd01      	ble.n	80130f4 <_svfprintf_r+0x384>
 80130f0:	f000 fd08 	bl	8013b04 <_svfprintf_r+0xd94>
 80130f4:	607c      	str	r4, [r7, #4]
 80130f6:	18a4      	adds	r4, r4, r2
 80130f8:	942e      	str	r4, [sp, #184]	; 0xb8
 80130fa:	932d      	str	r3, [sp, #180]	; 0xb4
 80130fc:	000f      	movs	r7, r1
 80130fe:	2b07      	cmp	r3, #7
 8013100:	dd09      	ble.n	8013116 <_svfprintf_r+0x3a6>
 8013102:	aa2c      	add	r2, sp, #176	; 0xb0
 8013104:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013106:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013108:	f002 ff86 	bl	8016018 <__ssprint_r>
 801310c:	2800      	cmp	r0, #0
 801310e:	d001      	beq.n	8013114 <_svfprintf_r+0x3a4>
 8013110:	f001 f852 	bl	80141b8 <_svfprintf_r+0x1448>
 8013114:	af2f      	add	r7, sp, #188	; 0xbc
 8013116:	231b      	movs	r3, #27
 8013118:	aa1e      	add	r2, sp, #120	; 0x78
 801311a:	189b      	adds	r3, r3, r2
 801311c:	781a      	ldrb	r2, [r3, #0]
 801311e:	2a00      	cmp	r2, #0
 8013120:	d017      	beq.n	8013152 <_svfprintf_r+0x3e2>
 8013122:	603b      	str	r3, [r7, #0]
 8013124:	2301      	movs	r3, #1
 8013126:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013128:	607b      	str	r3, [r7, #4]
 801312a:	0013      	movs	r3, r2
 801312c:	3301      	adds	r3, #1
 801312e:	932e      	str	r3, [sp, #184]	; 0xb8
 8013130:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013132:	3708      	adds	r7, #8
 8013134:	9322      	str	r3, [sp, #136]	; 0x88
 8013136:	3301      	adds	r3, #1
 8013138:	932d      	str	r3, [sp, #180]	; 0xb4
 801313a:	2b07      	cmp	r3, #7
 801313c:	dd09      	ble.n	8013152 <_svfprintf_r+0x3e2>
 801313e:	aa2c      	add	r2, sp, #176	; 0xb0
 8013140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013142:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013144:	f002 ff68 	bl	8016018 <__ssprint_r>
 8013148:	2800      	cmp	r0, #0
 801314a:	d001      	beq.n	8013150 <_svfprintf_r+0x3e0>
 801314c:	f001 f834 	bl	80141b8 <_svfprintf_r+0x1448>
 8013150:	af2f      	add	r7, sp, #188	; 0xbc
 8013152:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013154:	2b00      	cmp	r3, #0
 8013156:	d019      	beq.n	801318c <_svfprintf_r+0x41c>
 8013158:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801315a:	9320      	str	r3, [sp, #128]	; 0x80
 801315c:	ab25      	add	r3, sp, #148	; 0x94
 801315e:	603b      	str	r3, [r7, #0]
 8013160:	2302      	movs	r3, #2
 8013162:	607b      	str	r3, [r7, #4]
 8013164:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8013166:	3708      	adds	r7, #8
 8013168:	3302      	adds	r3, #2
 801316a:	932e      	str	r3, [sp, #184]	; 0xb8
 801316c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801316e:	9320      	str	r3, [sp, #128]	; 0x80
 8013170:	3301      	adds	r3, #1
 8013172:	932d      	str	r3, [sp, #180]	; 0xb4
 8013174:	2b07      	cmp	r3, #7
 8013176:	dd09      	ble.n	801318c <_svfprintf_r+0x41c>
 8013178:	aa2c      	add	r2, sp, #176	; 0xb0
 801317a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801317c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801317e:	f002 ff4b 	bl	8016018 <__ssprint_r>
 8013182:	2800      	cmp	r0, #0
 8013184:	d001      	beq.n	801318a <_svfprintf_r+0x41a>
 8013186:	f001 f817 	bl	80141b8 <_svfprintf_r+0x1448>
 801318a:	af2f      	add	r7, sp, #188	; 0xbc
 801318c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801318e:	2b80      	cmp	r3, #128	; 0x80
 8013190:	d121      	bne.n	80131d6 <_svfprintf_r+0x466>
 8013192:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013194:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013196:	1a9c      	subs	r4, r3, r2
 8013198:	2c00      	cmp	r4, #0
 801319a:	dd1c      	ble.n	80131d6 <_svfprintf_r+0x466>
 801319c:	0039      	movs	r1, r7
 801319e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80131a0:	482e      	ldr	r0, [pc, #184]	; (801325c <_svfprintf_r+0x4ec>)
 80131a2:	9320      	str	r3, [sp, #128]	; 0x80
 80131a4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80131a6:	3301      	adds	r3, #1
 80131a8:	3108      	adds	r1, #8
 80131aa:	6038      	str	r0, [r7, #0]
 80131ac:	2c10      	cmp	r4, #16
 80131ae:	dd01      	ble.n	80131b4 <_svfprintf_r+0x444>
 80131b0:	f000 fcbc 	bl	8013b2c <_svfprintf_r+0xdbc>
 80131b4:	607c      	str	r4, [r7, #4]
 80131b6:	18a4      	adds	r4, r4, r2
 80131b8:	942e      	str	r4, [sp, #184]	; 0xb8
 80131ba:	932d      	str	r3, [sp, #180]	; 0xb4
 80131bc:	000f      	movs	r7, r1
 80131be:	2b07      	cmp	r3, #7
 80131c0:	dd09      	ble.n	80131d6 <_svfprintf_r+0x466>
 80131c2:	aa2c      	add	r2, sp, #176	; 0xb0
 80131c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80131c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80131c8:	f002 ff26 	bl	8016018 <__ssprint_r>
 80131cc:	2800      	cmp	r0, #0
 80131ce:	d001      	beq.n	80131d4 <_svfprintf_r+0x464>
 80131d0:	f000 fff2 	bl	80141b8 <_svfprintf_r+0x1448>
 80131d4:	af2f      	add	r7, sp, #188	; 0xbc
 80131d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80131d8:	9a08      	ldr	r2, [sp, #32]
 80131da:	1a9c      	subs	r4, r3, r2
 80131dc:	2c00      	cmp	r4, #0
 80131de:	dd1c      	ble.n	801321a <_svfprintf_r+0x4aa>
 80131e0:	0039      	movs	r1, r7
 80131e2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80131e4:	481d      	ldr	r0, [pc, #116]	; (801325c <_svfprintf_r+0x4ec>)
 80131e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80131e8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80131ea:	3301      	adds	r3, #1
 80131ec:	3108      	adds	r1, #8
 80131ee:	6038      	str	r0, [r7, #0]
 80131f0:	2c10      	cmp	r4, #16
 80131f2:	dd01      	ble.n	80131f8 <_svfprintf_r+0x488>
 80131f4:	f000 fcb4 	bl	8013b60 <_svfprintf_r+0xdf0>
 80131f8:	18a2      	adds	r2, r4, r2
 80131fa:	607c      	str	r4, [r7, #4]
 80131fc:	922e      	str	r2, [sp, #184]	; 0xb8
 80131fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8013200:	000f      	movs	r7, r1
 8013202:	2b07      	cmp	r3, #7
 8013204:	dd09      	ble.n	801321a <_svfprintf_r+0x4aa>
 8013206:	aa2c      	add	r2, sp, #176	; 0xb0
 8013208:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801320a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801320c:	f002 ff04 	bl	8016018 <__ssprint_r>
 8013210:	2800      	cmp	r0, #0
 8013212:	d001      	beq.n	8013218 <_svfprintf_r+0x4a8>
 8013214:	f000 ffd0 	bl	80141b8 <_svfprintf_r+0x1448>
 8013218:	af2f      	add	r7, sp, #188	; 0xbc
 801321a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801321c:	9317      	str	r3, [sp, #92]	; 0x5c
 801321e:	05f3      	lsls	r3, r6, #23
 8013220:	d501      	bpl.n	8013226 <_svfprintf_r+0x4b6>
 8013222:	f000 fcb1 	bl	8013b88 <_svfprintf_r+0xe18>
 8013226:	9a08      	ldr	r2, [sp, #32]
 8013228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801322a:	4694      	mov	ip, r2
 801322c:	603b      	str	r3, [r7, #0]
 801322e:	9b08      	ldr	r3, [sp, #32]
 8013230:	607b      	str	r3, [r7, #4]
 8013232:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013234:	4463      	add	r3, ip
 8013236:	932e      	str	r3, [sp, #184]	; 0xb8
 8013238:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801323a:	9308      	str	r3, [sp, #32]
 801323c:	3301      	adds	r3, #1
 801323e:	932d      	str	r3, [sp, #180]	; 0xb4
 8013240:	2b07      	cmp	r3, #7
 8013242:	dd01      	ble.n	8013248 <_svfprintf_r+0x4d8>
 8013244:	f000 fd94 	bl	8013d70 <_svfprintf_r+0x1000>
 8013248:	3708      	adds	r7, #8
 801324a:	f000 fce4 	bl	8013c16 <_svfprintf_r+0xea6>
 801324e:	46c0      	nop			; (mov r8, r8)
 8013250:	08018e31 	.word	0x08018e31
 8013254:	fffffbff 	.word	0xfffffbff
 8013258:	08018e44 	.word	0x08018e44
 801325c:	08018e54 	.word	0x08018e54
 8013260:	2310      	movs	r3, #16
 8013262:	431e      	orrs	r6, r3
 8013264:	06b3      	lsls	r3, r6, #26
 8013266:	d52c      	bpl.n	80132c2 <_svfprintf_r+0x552>
 8013268:	2307      	movs	r3, #7
 801326a:	3407      	adds	r4, #7
 801326c:	439c      	bics	r4, r3
 801326e:	0023      	movs	r3, r4
 8013270:	3308      	adds	r3, #8
 8013272:	9312      	str	r3, [sp, #72]	; 0x48
 8013274:	6823      	ldr	r3, [r4, #0]
 8013276:	6864      	ldr	r4, [r4, #4]
 8013278:	9306      	str	r3, [sp, #24]
 801327a:	9407      	str	r4, [sp, #28]
 801327c:	9b07      	ldr	r3, [sp, #28]
 801327e:	2b00      	cmp	r3, #0
 8013280:	da0b      	bge.n	801329a <_svfprintf_r+0x52a>
 8013282:	9906      	ldr	r1, [sp, #24]
 8013284:	9a07      	ldr	r2, [sp, #28]
 8013286:	2400      	movs	r4, #0
 8013288:	424b      	negs	r3, r1
 801328a:	4194      	sbcs	r4, r2
 801328c:	9306      	str	r3, [sp, #24]
 801328e:	9407      	str	r4, [sp, #28]
 8013290:	231b      	movs	r3, #27
 8013292:	aa1e      	add	r2, sp, #120	; 0x78
 8013294:	189b      	adds	r3, r3, r2
 8013296:	222d      	movs	r2, #45	; 0x2d
 8013298:	701a      	strb	r2, [r3, #0]
 801329a:	9b08      	ldr	r3, [sp, #32]
 801329c:	3301      	adds	r3, #1
 801329e:	d000      	beq.n	80132a2 <_svfprintf_r+0x532>
 80132a0:	e382      	b.n	80139a8 <_svfprintf_r+0xc38>
 80132a2:	9b07      	ldr	r3, [sp, #28]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d000      	beq.n	80132aa <_svfprintf_r+0x53a>
 80132a8:	e3b0      	b.n	8013a0c <_svfprintf_r+0xc9c>
 80132aa:	9b06      	ldr	r3, [sp, #24]
 80132ac:	2b09      	cmp	r3, #9
 80132ae:	d900      	bls.n	80132b2 <_svfprintf_r+0x542>
 80132b0:	e3ac      	b.n	8013a0c <_svfprintf_r+0xc9c>
 80132b2:	23e7      	movs	r3, #231	; 0xe7
 80132b4:	aa1e      	add	r2, sp, #120	; 0x78
 80132b6:	189b      	adds	r3, r3, r2
 80132b8:	9a06      	ldr	r2, [sp, #24]
 80132ba:	3230      	adds	r2, #48	; 0x30
 80132bc:	701a      	strb	r2, [r3, #0]
 80132be:	9309      	str	r3, [sp, #36]	; 0x24
 80132c0:	e395      	b.n	80139ee <_svfprintf_r+0xc7e>
 80132c2:	1d23      	adds	r3, r4, #4
 80132c4:	9312      	str	r3, [sp, #72]	; 0x48
 80132c6:	06f3      	lsls	r3, r6, #27
 80132c8:	d504      	bpl.n	80132d4 <_svfprintf_r+0x564>
 80132ca:	6823      	ldr	r3, [r4, #0]
 80132cc:	9306      	str	r3, [sp, #24]
 80132ce:	17db      	asrs	r3, r3, #31
 80132d0:	9307      	str	r3, [sp, #28]
 80132d2:	e7d3      	b.n	801327c <_svfprintf_r+0x50c>
 80132d4:	6823      	ldr	r3, [r4, #0]
 80132d6:	0672      	lsls	r2, r6, #25
 80132d8:	d501      	bpl.n	80132de <_svfprintf_r+0x56e>
 80132da:	b21b      	sxth	r3, r3
 80132dc:	e7f6      	b.n	80132cc <_svfprintf_r+0x55c>
 80132de:	05b2      	lsls	r2, r6, #22
 80132e0:	d5f4      	bpl.n	80132cc <_svfprintf_r+0x55c>
 80132e2:	b25b      	sxtb	r3, r3
 80132e4:	e7f2      	b.n	80132cc <_svfprintf_r+0x55c>
 80132e6:	2307      	movs	r3, #7
 80132e8:	3407      	adds	r4, #7
 80132ea:	439c      	bics	r4, r3
 80132ec:	0023      	movs	r3, r4
 80132ee:	2201      	movs	r2, #1
 80132f0:	3308      	adds	r3, #8
 80132f2:	9312      	str	r3, [sp, #72]	; 0x48
 80132f4:	6823      	ldr	r3, [r4, #0]
 80132f6:	4252      	negs	r2, r2
 80132f8:	931a      	str	r3, [sp, #104]	; 0x68
 80132fa:	6863      	ldr	r3, [r4, #4]
 80132fc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80132fe:	005c      	lsls	r4, r3, #1
 8013300:	0864      	lsrs	r4, r4, #1
 8013302:	9319      	str	r3, [sp, #100]	; 0x64
 8013304:	0028      	movs	r0, r5
 8013306:	4bcf      	ldr	r3, [pc, #828]	; (8013644 <_svfprintf_r+0x8d4>)
 8013308:	0021      	movs	r1, r4
 801330a:	f7ee ffdf 	bl	80022cc <__aeabi_dcmpun>
 801330e:	2800      	cmp	r0, #0
 8013310:	d125      	bne.n	801335e <_svfprintf_r+0x5ee>
 8013312:	2201      	movs	r2, #1
 8013314:	4bcb      	ldr	r3, [pc, #812]	; (8013644 <_svfprintf_r+0x8d4>)
 8013316:	4252      	negs	r2, r2
 8013318:	0028      	movs	r0, r5
 801331a:	0021      	movs	r1, r4
 801331c:	f7ed f8ae 	bl	800047c <__aeabi_dcmple>
 8013320:	2800      	cmp	r0, #0
 8013322:	d11c      	bne.n	801335e <_svfprintf_r+0x5ee>
 8013324:	2200      	movs	r2, #0
 8013326:	2300      	movs	r3, #0
 8013328:	981a      	ldr	r0, [sp, #104]	; 0x68
 801332a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801332c:	f7ed f89c 	bl	8000468 <__aeabi_dcmplt>
 8013330:	2800      	cmp	r0, #0
 8013332:	d004      	beq.n	801333e <_svfprintf_r+0x5ce>
 8013334:	231b      	movs	r3, #27
 8013336:	aa1e      	add	r2, sp, #120	; 0x78
 8013338:	189b      	adds	r3, r3, r2
 801333a:	222d      	movs	r2, #45	; 0x2d
 801333c:	701a      	strb	r2, [r3, #0]
 801333e:	4bc2      	ldr	r3, [pc, #776]	; (8013648 <_svfprintf_r+0x8d8>)
 8013340:	9309      	str	r3, [sp, #36]	; 0x24
 8013342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013344:	2b47      	cmp	r3, #71	; 0x47
 8013346:	dc01      	bgt.n	801334c <_svfprintf_r+0x5dc>
 8013348:	4bc0      	ldr	r3, [pc, #768]	; (801364c <_svfprintf_r+0x8dc>)
 801334a:	9309      	str	r3, [sp, #36]	; 0x24
 801334c:	2380      	movs	r3, #128	; 0x80
 801334e:	439e      	bics	r6, r3
 8013350:	2300      	movs	r3, #0
 8013352:	930c      	str	r3, [sp, #48]	; 0x30
 8013354:	3303      	adds	r3, #3
 8013356:	9308      	str	r3, [sp, #32]
 8013358:	2300      	movs	r3, #0
 801335a:	9317      	str	r3, [sp, #92]	; 0x5c
 801335c:	e34f      	b.n	80139fe <_svfprintf_r+0xc8e>
 801335e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013360:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013362:	981a      	ldr	r0, [sp, #104]	; 0x68
 8013364:	9919      	ldr	r1, [sp, #100]	; 0x64
 8013366:	f7ee ffb1 	bl	80022cc <__aeabi_dcmpun>
 801336a:	2800      	cmp	r0, #0
 801336c:	d00e      	beq.n	801338c <_svfprintf_r+0x61c>
 801336e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013370:	2b00      	cmp	r3, #0
 8013372:	da04      	bge.n	801337e <_svfprintf_r+0x60e>
 8013374:	231b      	movs	r3, #27
 8013376:	aa1e      	add	r2, sp, #120	; 0x78
 8013378:	189b      	adds	r3, r3, r2
 801337a:	222d      	movs	r2, #45	; 0x2d
 801337c:	701a      	strb	r2, [r3, #0]
 801337e:	4bb4      	ldr	r3, [pc, #720]	; (8013650 <_svfprintf_r+0x8e0>)
 8013380:	9309      	str	r3, [sp, #36]	; 0x24
 8013382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013384:	2b47      	cmp	r3, #71	; 0x47
 8013386:	dce1      	bgt.n	801334c <_svfprintf_r+0x5dc>
 8013388:	4bb2      	ldr	r3, [pc, #712]	; (8013654 <_svfprintf_r+0x8e4>)
 801338a:	e7de      	b.n	801334a <_svfprintf_r+0x5da>
 801338c:	2320      	movs	r3, #32
 801338e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013390:	439a      	bics	r2, r3
 8013392:	920f      	str	r2, [sp, #60]	; 0x3c
 8013394:	2a41      	cmp	r2, #65	; 0x41
 8013396:	d124      	bne.n	80133e2 <_svfprintf_r+0x672>
 8013398:	2230      	movs	r2, #48	; 0x30
 801339a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801339c:	ab25      	add	r3, sp, #148	; 0x94
 801339e:	701a      	strb	r2, [r3, #0]
 80133a0:	3228      	adds	r2, #40	; 0x28
 80133a2:	2961      	cmp	r1, #97	; 0x61
 80133a4:	d100      	bne.n	80133a8 <_svfprintf_r+0x638>
 80133a6:	3220      	adds	r2, #32
 80133a8:	705a      	strb	r2, [r3, #1]
 80133aa:	2302      	movs	r3, #2
 80133ac:	431e      	orrs	r6, r3
 80133ae:	9b08      	ldr	r3, [sp, #32]
 80133b0:	2b63      	cmp	r3, #99	; 0x63
 80133b2:	dc00      	bgt.n	80133b6 <_svfprintf_r+0x646>
 80133b4:	e09e      	b.n	80134f4 <_svfprintf_r+0x784>
 80133b6:	1c59      	adds	r1, r3, #1
 80133b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80133ba:	f7fe f913 	bl	80115e4 <_malloc_r>
 80133be:	9009      	str	r0, [sp, #36]	; 0x24
 80133c0:	2800      	cmp	r0, #0
 80133c2:	d000      	beq.n	80133c6 <_svfprintf_r+0x656>
 80133c4:	e09b      	b.n	80134fe <_svfprintf_r+0x78e>
 80133c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133c8:	899a      	ldrh	r2, [r3, #12]
 80133ca:	2340      	movs	r3, #64	; 0x40
 80133cc:	4313      	orrs	r3, r2
 80133ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80133d0:	8193      	strh	r3, [r2, #12]
 80133d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133d4:	899b      	ldrh	r3, [r3, #12]
 80133d6:	065b      	lsls	r3, r3, #25
 80133d8:	d400      	bmi.n	80133dc <_svfprintf_r+0x66c>
 80133da:	e4ee      	b.n	8012dba <_svfprintf_r+0x4a>
 80133dc:	2301      	movs	r3, #1
 80133de:	425b      	negs	r3, r3
 80133e0:	e4ea      	b.n	8012db8 <_svfprintf_r+0x48>
 80133e2:	9b08      	ldr	r3, [sp, #32]
 80133e4:	900c      	str	r0, [sp, #48]	; 0x30
 80133e6:	3301      	adds	r3, #1
 80133e8:	d100      	bne.n	80133ec <_svfprintf_r+0x67c>
 80133ea:	e08b      	b.n	8013504 <_svfprintf_r+0x794>
 80133ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80133ee:	2b47      	cmp	r3, #71	; 0x47
 80133f0:	d103      	bne.n	80133fa <_svfprintf_r+0x68a>
 80133f2:	9b08      	ldr	r3, [sp, #32]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d100      	bne.n	80133fa <_svfprintf_r+0x68a>
 80133f8:	e087      	b.n	801350a <_svfprintf_r+0x79a>
 80133fa:	2380      	movs	r3, #128	; 0x80
 80133fc:	005b      	lsls	r3, r3, #1
 80133fe:	4333      	orrs	r3, r6
 8013400:	9320      	str	r3, [sp, #128]	; 0x80
 8013402:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013404:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8013406:	2b00      	cmp	r3, #0
 8013408:	db00      	blt.n	801340c <_svfprintf_r+0x69c>
 801340a:	e082      	b.n	8013512 <_svfprintf_r+0x7a2>
 801340c:	2280      	movs	r2, #128	; 0x80
 801340e:	0612      	lsls	r2, r2, #24
 8013410:	4694      	mov	ip, r2
 8013412:	4463      	add	r3, ip
 8013414:	930d      	str	r3, [sp, #52]	; 0x34
 8013416:	232d      	movs	r3, #45	; 0x2d
 8013418:	9322      	str	r3, [sp, #136]	; 0x88
 801341a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801341c:	2b41      	cmp	r3, #65	; 0x41
 801341e:	d000      	beq.n	8013422 <_svfprintf_r+0x6b2>
 8013420:	e105      	b.n	801362e <_svfprintf_r+0x8be>
 8013422:	aa26      	add	r2, sp, #152	; 0x98
 8013424:	0020      	movs	r0, r4
 8013426:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013428:	f002 fdc4 	bl	8015fb4 <frexp>
 801342c:	23ff      	movs	r3, #255	; 0xff
 801342e:	2200      	movs	r2, #0
 8013430:	059b      	lsls	r3, r3, #22
 8013432:	f7ee f991 	bl	8001758 <__aeabi_dmul>
 8013436:	2200      	movs	r2, #0
 8013438:	2300      	movs	r3, #0
 801343a:	0004      	movs	r4, r0
 801343c:	000d      	movs	r5, r1
 801343e:	f7ed f80d 	bl	800045c <__aeabi_dcmpeq>
 8013442:	2800      	cmp	r0, #0
 8013444:	d001      	beq.n	801344a <_svfprintf_r+0x6da>
 8013446:	2301      	movs	r3, #1
 8013448:	9326      	str	r3, [sp, #152]	; 0x98
 801344a:	4b83      	ldr	r3, [pc, #524]	; (8013658 <_svfprintf_r+0x8e8>)
 801344c:	9317      	str	r3, [sp, #92]	; 0x5c
 801344e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013450:	2b61      	cmp	r3, #97	; 0x61
 8013452:	d101      	bne.n	8013458 <_svfprintf_r+0x6e8>
 8013454:	4b81      	ldr	r3, [pc, #516]	; (801365c <_svfprintf_r+0x8ec>)
 8013456:	9317      	str	r3, [sp, #92]	; 0x5c
 8013458:	9b08      	ldr	r3, [sp, #32]
 801345a:	3b01      	subs	r3, #1
 801345c:	9310      	str	r3, [sp, #64]	; 0x40
 801345e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013460:	9318      	str	r3, [sp, #96]	; 0x60
 8013462:	2200      	movs	r2, #0
 8013464:	4b7e      	ldr	r3, [pc, #504]	; (8013660 <_svfprintf_r+0x8f0>)
 8013466:	0020      	movs	r0, r4
 8013468:	0029      	movs	r1, r5
 801346a:	f7ee f975 	bl	8001758 <__aeabi_dmul>
 801346e:	000d      	movs	r5, r1
 8013470:	0004      	movs	r4, r0
 8013472:	f7ee ff47 	bl	8002304 <__aeabi_d2iz>
 8013476:	9021      	str	r0, [sp, #132]	; 0x84
 8013478:	f7ee ff7a 	bl	8002370 <__aeabi_i2d>
 801347c:	0002      	movs	r2, r0
 801347e:	000b      	movs	r3, r1
 8013480:	0020      	movs	r0, r4
 8013482:	0029      	movs	r1, r5
 8013484:	f7ee fbda 	bl	8001c3c <__aeabi_dsub>
 8013488:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801348a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801348c:	3301      	adds	r3, #1
 801348e:	930d      	str	r3, [sp, #52]	; 0x34
 8013490:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013492:	0004      	movs	r4, r0
 8013494:	5c9b      	ldrb	r3, [r3, r2]
 8013496:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013498:	000d      	movs	r5, r1
 801349a:	7013      	strb	r3, [r2, #0]
 801349c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801349e:	9323      	str	r3, [sp, #140]	; 0x8c
 80134a0:	3301      	adds	r3, #1
 80134a2:	d00a      	beq.n	80134ba <_svfprintf_r+0x74a>
 80134a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80134a6:	2200      	movs	r2, #0
 80134a8:	3b01      	subs	r3, #1
 80134aa:	9310      	str	r3, [sp, #64]	; 0x40
 80134ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80134ae:	9318      	str	r3, [sp, #96]	; 0x60
 80134b0:	2300      	movs	r3, #0
 80134b2:	f7ec ffd3 	bl	800045c <__aeabi_dcmpeq>
 80134b6:	2800      	cmp	r0, #0
 80134b8:	d0d3      	beq.n	8013462 <_svfprintf_r+0x6f2>
 80134ba:	2200      	movs	r2, #0
 80134bc:	4b69      	ldr	r3, [pc, #420]	; (8013664 <_svfprintf_r+0x8f4>)
 80134be:	0020      	movs	r0, r4
 80134c0:	0029      	movs	r1, r5
 80134c2:	f7ec ffe5 	bl	8000490 <__aeabi_dcmpgt>
 80134c6:	2800      	cmp	r0, #0
 80134c8:	d126      	bne.n	8013518 <_svfprintf_r+0x7a8>
 80134ca:	2200      	movs	r2, #0
 80134cc:	4b65      	ldr	r3, [pc, #404]	; (8013664 <_svfprintf_r+0x8f4>)
 80134ce:	0020      	movs	r0, r4
 80134d0:	0029      	movs	r1, r5
 80134d2:	f7ec ffc3 	bl	800045c <__aeabi_dcmpeq>
 80134d6:	2800      	cmp	r0, #0
 80134d8:	d002      	beq.n	80134e0 <_svfprintf_r+0x770>
 80134da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134dc:	07db      	lsls	r3, r3, #31
 80134de:	d41b      	bmi.n	8013518 <_svfprintf_r+0x7a8>
 80134e0:	2130      	movs	r1, #48	; 0x30
 80134e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80134e4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80134e6:	1898      	adds	r0, r3, r2
 80134e8:	930d      	str	r3, [sp, #52]	; 0x34
 80134ea:	1ac2      	subs	r2, r0, r3
 80134ec:	d426      	bmi.n	801353c <_svfprintf_r+0x7cc>
 80134ee:	7019      	strb	r1, [r3, #0]
 80134f0:	3301      	adds	r3, #1
 80134f2:	e7f9      	b.n	80134e8 <_svfprintf_r+0x778>
 80134f4:	2300      	movs	r3, #0
 80134f6:	930c      	str	r3, [sp, #48]	; 0x30
 80134f8:	ab3f      	add	r3, sp, #252	; 0xfc
 80134fa:	9309      	str	r3, [sp, #36]	; 0x24
 80134fc:	e77d      	b.n	80133fa <_svfprintf_r+0x68a>
 80134fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013500:	930c      	str	r3, [sp, #48]	; 0x30
 8013502:	e77a      	b.n	80133fa <_svfprintf_r+0x68a>
 8013504:	2306      	movs	r3, #6
 8013506:	9308      	str	r3, [sp, #32]
 8013508:	e777      	b.n	80133fa <_svfprintf_r+0x68a>
 801350a:	9b08      	ldr	r3, [sp, #32]
 801350c:	930c      	str	r3, [sp, #48]	; 0x30
 801350e:	2301      	movs	r3, #1
 8013510:	e7f9      	b.n	8013506 <_svfprintf_r+0x796>
 8013512:	930d      	str	r3, [sp, #52]	; 0x34
 8013514:	2300      	movs	r3, #0
 8013516:	e77f      	b.n	8013418 <_svfprintf_r+0x6a8>
 8013518:	2030      	movs	r0, #48	; 0x30
 801351a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801351c:	932a      	str	r3, [sp, #168]	; 0xa8
 801351e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013520:	7bda      	ldrb	r2, [r3, #15]
 8013522:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8013524:	3b01      	subs	r3, #1
 8013526:	932a      	str	r3, [sp, #168]	; 0xa8
 8013528:	7819      	ldrb	r1, [r3, #0]
 801352a:	4291      	cmp	r1, r2
 801352c:	d07d      	beq.n	801362a <_svfprintf_r+0x8ba>
 801352e:	1c4a      	adds	r2, r1, #1
 8013530:	b2d2      	uxtb	r2, r2
 8013532:	2939      	cmp	r1, #57	; 0x39
 8013534:	d101      	bne.n	801353a <_svfprintf_r+0x7ca>
 8013536:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013538:	7a92      	ldrb	r2, [r2, #10]
 801353a:	701a      	strb	r2, [r3, #0]
 801353c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801353e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013540:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8013542:	1a9b      	subs	r3, r3, r2
 8013544:	930d      	str	r3, [sp, #52]	; 0x34
 8013546:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013548:	2b47      	cmp	r3, #71	; 0x47
 801354a:	d000      	beq.n	801354e <_svfprintf_r+0x7de>
 801354c:	e0d2      	b.n	80136f4 <_svfprintf_r+0x984>
 801354e:	1ceb      	adds	r3, r5, #3
 8013550:	db03      	blt.n	801355a <_svfprintf_r+0x7ea>
 8013552:	9b08      	ldr	r3, [sp, #32]
 8013554:	42ab      	cmp	r3, r5
 8013556:	db00      	blt.n	801355a <_svfprintf_r+0x7ea>
 8013558:	e0fd      	b.n	8013756 <_svfprintf_r+0x9e6>
 801355a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801355c:	3b02      	subs	r3, #2
 801355e:	930e      	str	r3, [sp, #56]	; 0x38
 8013560:	2238      	movs	r2, #56	; 0x38
 8013562:	466b      	mov	r3, sp
 8013564:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013566:	189b      	adds	r3, r3, r2
 8013568:	3a18      	subs	r2, #24
 801356a:	4391      	bics	r1, r2
 801356c:	1e6c      	subs	r4, r5, #1
 801356e:	000a      	movs	r2, r1
 8013570:	9426      	str	r4, [sp, #152]	; 0x98
 8013572:	781b      	ldrb	r3, [r3, #0]
 8013574:	2100      	movs	r1, #0
 8013576:	2a41      	cmp	r2, #65	; 0x41
 8013578:	d102      	bne.n	8013580 <_svfprintf_r+0x810>
 801357a:	330f      	adds	r3, #15
 801357c:	b2db      	uxtb	r3, r3
 801357e:	3101      	adds	r1, #1
 8013580:	aa28      	add	r2, sp, #160	; 0xa0
 8013582:	7013      	strb	r3, [r2, #0]
 8013584:	232b      	movs	r3, #43	; 0x2b
 8013586:	2c00      	cmp	r4, #0
 8013588:	da02      	bge.n	8013590 <_svfprintf_r+0x820>
 801358a:	2401      	movs	r4, #1
 801358c:	232d      	movs	r3, #45	; 0x2d
 801358e:	1b64      	subs	r4, r4, r5
 8013590:	7053      	strb	r3, [r2, #1]
 8013592:	2c09      	cmp	r4, #9
 8013594:	dc00      	bgt.n	8013598 <_svfprintf_r+0x828>
 8013596:	e0c7      	b.n	8013728 <_svfprintf_r+0x9b8>
 8013598:	2537      	movs	r5, #55	; 0x37
 801359a:	ab1e      	add	r3, sp, #120	; 0x78
 801359c:	18ed      	adds	r5, r5, r3
 801359e:	1e6b      	subs	r3, r5, #1
 80135a0:	0020      	movs	r0, r4
 80135a2:	210a      	movs	r1, #10
 80135a4:	9308      	str	r3, [sp, #32]
 80135a6:	f7ec ff43 	bl	8000430 <__aeabi_idivmod>
 80135aa:	1e6b      	subs	r3, r5, #1
 80135ac:	3130      	adds	r1, #48	; 0x30
 80135ae:	7019      	strb	r1, [r3, #0]
 80135b0:	0020      	movs	r0, r4
 80135b2:	210a      	movs	r1, #10
 80135b4:	f7ec fe56 	bl	8000264 <__divsi3>
 80135b8:	0004      	movs	r4, r0
 80135ba:	2809      	cmp	r0, #9
 80135bc:	dd00      	ble.n	80135c0 <_svfprintf_r+0x850>
 80135be:	e0ac      	b.n	801371a <_svfprintf_r+0x9aa>
 80135c0:	232a      	movs	r3, #42	; 0x2a
 80135c2:	2137      	movs	r1, #55	; 0x37
 80135c4:	aa1e      	add	r2, sp, #120	; 0x78
 80135c6:	3d02      	subs	r5, #2
 80135c8:	3430      	adds	r4, #48	; 0x30
 80135ca:	702c      	strb	r4, [r5, #0]
 80135cc:	189b      	adds	r3, r3, r2
 80135ce:	1889      	adds	r1, r1, r2
 80135d0:	001a      	movs	r2, r3
 80135d2:	428d      	cmp	r5, r1
 80135d4:	d200      	bcs.n	80135d8 <_svfprintf_r+0x868>
 80135d6:	e0a2      	b.n	801371e <_svfprintf_r+0x9ae>
 80135d8:	ab28      	add	r3, sp, #160	; 0xa0
 80135da:	1ad3      	subs	r3, r2, r3
 80135dc:	931d      	str	r3, [sp, #116]	; 0x74
 80135de:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80135e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80135e2:	4694      	mov	ip, r2
 80135e4:	4463      	add	r3, ip
 80135e6:	9308      	str	r3, [sp, #32]
 80135e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80135ea:	2b01      	cmp	r3, #1
 80135ec:	dc01      	bgt.n	80135f2 <_svfprintf_r+0x882>
 80135ee:	07f3      	lsls	r3, r6, #31
 80135f0:	d504      	bpl.n	80135fc <_svfprintf_r+0x88c>
 80135f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80135f4:	9b08      	ldr	r3, [sp, #32]
 80135f6:	4694      	mov	ip, r2
 80135f8:	4463      	add	r3, ip
 80135fa:	9308      	str	r3, [sp, #32]
 80135fc:	2280      	movs	r2, #128	; 0x80
 80135fe:	4b1a      	ldr	r3, [pc, #104]	; (8013668 <_svfprintf_r+0x8f8>)
 8013600:	0052      	lsls	r2, r2, #1
 8013602:	4033      	ands	r3, r6
 8013604:	431a      	orrs	r2, r3
 8013606:	2300      	movs	r3, #0
 8013608:	001d      	movs	r5, r3
 801360a:	9220      	str	r2, [sp, #128]	; 0x80
 801360c:	9310      	str	r3, [sp, #64]	; 0x40
 801360e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013610:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013612:	2b00      	cmp	r3, #0
 8013614:	d100      	bne.n	8013618 <_svfprintf_r+0x8a8>
 8013616:	e270      	b.n	8013afa <_svfprintf_r+0xd8a>
 8013618:	231b      	movs	r3, #27
 801361a:	aa1e      	add	r2, sp, #120	; 0x78
 801361c:	189b      	adds	r3, r3, r2
 801361e:	222d      	movs	r2, #45	; 0x2d
 8013620:	701a      	strb	r2, [r3, #0]
 8013622:	2300      	movs	r3, #0
 8013624:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8013626:	9317      	str	r3, [sp, #92]	; 0x5c
 8013628:	e539      	b.n	801309e <_svfprintf_r+0x32e>
 801362a:	7018      	strb	r0, [r3, #0]
 801362c:	e779      	b.n	8013522 <_svfprintf_r+0x7b2>
 801362e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013630:	2b46      	cmp	r3, #70	; 0x46
 8013632:	d01b      	beq.n	801366c <_svfprintf_r+0x8fc>
 8013634:	9d08      	ldr	r5, [sp, #32]
 8013636:	2b45      	cmp	r3, #69	; 0x45
 8013638:	d101      	bne.n	801363e <_svfprintf_r+0x8ce>
 801363a:	9b08      	ldr	r3, [sp, #32]
 801363c:	1c5d      	adds	r5, r3, #1
 801363e:	2302      	movs	r3, #2
 8013640:	e016      	b.n	8013670 <_svfprintf_r+0x900>
 8013642:	46c0      	nop			; (mov r8, r8)
 8013644:	7fefffff 	.word	0x7fefffff
 8013648:	08018e14 	.word	0x08018e14
 801364c:	08018e10 	.word	0x08018e10
 8013650:	08018e1c 	.word	0x08018e1c
 8013654:	08018e18 	.word	0x08018e18
 8013658:	08018e31 	.word	0x08018e31
 801365c:	08018e20 	.word	0x08018e20
 8013660:	40300000 	.word	0x40300000
 8013664:	3fe00000 	.word	0x3fe00000
 8013668:	fffffbff 	.word	0xfffffbff
 801366c:	2303      	movs	r3, #3
 801366e:	9d08      	ldr	r5, [sp, #32]
 8013670:	aa2a      	add	r2, sp, #168	; 0xa8
 8013672:	9204      	str	r2, [sp, #16]
 8013674:	aa27      	add	r2, sp, #156	; 0x9c
 8013676:	9203      	str	r2, [sp, #12]
 8013678:	aa26      	add	r2, sp, #152	; 0x98
 801367a:	9202      	str	r2, [sp, #8]
 801367c:	9300      	str	r3, [sp, #0]
 801367e:	9501      	str	r5, [sp, #4]
 8013680:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013682:	0022      	movs	r2, r4
 8013684:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013686:	f000 fe79 	bl	801437c <_dtoa_r>
 801368a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801368c:	9009      	str	r0, [sp, #36]	; 0x24
 801368e:	2b47      	cmp	r3, #71	; 0x47
 8013690:	d101      	bne.n	8013696 <_svfprintf_r+0x926>
 8013692:	07f3      	lsls	r3, r6, #31
 8013694:	d524      	bpl.n	80136e0 <_svfprintf_r+0x970>
 8013696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013698:	195b      	adds	r3, r3, r5
 801369a:	9310      	str	r3, [sp, #64]	; 0x40
 801369c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801369e:	2b46      	cmp	r3, #70	; 0x46
 80136a0:	d113      	bne.n	80136ca <_svfprintf_r+0x95a>
 80136a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136a4:	781b      	ldrb	r3, [r3, #0]
 80136a6:	2b30      	cmp	r3, #48	; 0x30
 80136a8:	d10a      	bne.n	80136c0 <_svfprintf_r+0x950>
 80136aa:	2200      	movs	r2, #0
 80136ac:	2300      	movs	r3, #0
 80136ae:	0020      	movs	r0, r4
 80136b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80136b2:	f7ec fed3 	bl	800045c <__aeabi_dcmpeq>
 80136b6:	2800      	cmp	r0, #0
 80136b8:	d102      	bne.n	80136c0 <_svfprintf_r+0x950>
 80136ba:	2301      	movs	r3, #1
 80136bc:	1b5d      	subs	r5, r3, r5
 80136be:	9526      	str	r5, [sp, #152]	; 0x98
 80136c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80136c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80136c4:	4694      	mov	ip, r2
 80136c6:	4463      	add	r3, ip
 80136c8:	9310      	str	r3, [sp, #64]	; 0x40
 80136ca:	2200      	movs	r2, #0
 80136cc:	2300      	movs	r3, #0
 80136ce:	0020      	movs	r0, r4
 80136d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80136d2:	f7ec fec3 	bl	800045c <__aeabi_dcmpeq>
 80136d6:	2230      	movs	r2, #48	; 0x30
 80136d8:	2800      	cmp	r0, #0
 80136da:	d006      	beq.n	80136ea <_svfprintf_r+0x97a>
 80136dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80136de:	932a      	str	r3, [sp, #168]	; 0xa8
 80136e0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80136e2:	e72c      	b.n	801353e <_svfprintf_r+0x7ce>
 80136e4:	1c59      	adds	r1, r3, #1
 80136e6:	912a      	str	r1, [sp, #168]	; 0xa8
 80136e8:	701a      	strb	r2, [r3, #0]
 80136ea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80136ec:	9910      	ldr	r1, [sp, #64]	; 0x40
 80136ee:	4299      	cmp	r1, r3
 80136f0:	d8f8      	bhi.n	80136e4 <_svfprintf_r+0x974>
 80136f2:	e7f5      	b.n	80136e0 <_svfprintf_r+0x970>
 80136f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80136f6:	2b46      	cmp	r3, #70	; 0x46
 80136f8:	d000      	beq.n	80136fc <_svfprintf_r+0x98c>
 80136fa:	e731      	b.n	8013560 <_svfprintf_r+0x7f0>
 80136fc:	9b08      	ldr	r3, [sp, #32]
 80136fe:	2d00      	cmp	r5, #0
 8013700:	dd21      	ble.n	8013746 <_svfprintf_r+0x9d6>
 8013702:	2b00      	cmp	r3, #0
 8013704:	d101      	bne.n	801370a <_svfprintf_r+0x99a>
 8013706:	07f3      	lsls	r3, r6, #31
 8013708:	d54a      	bpl.n	80137a0 <_svfprintf_r+0xa30>
 801370a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801370c:	18eb      	adds	r3, r5, r3
 801370e:	9a08      	ldr	r2, [sp, #32]
 8013710:	18d3      	adds	r3, r2, r3
 8013712:	9308      	str	r3, [sp, #32]
 8013714:	2366      	movs	r3, #102	; 0x66
 8013716:	930e      	str	r3, [sp, #56]	; 0x38
 8013718:	e034      	b.n	8013784 <_svfprintf_r+0xa14>
 801371a:	9d08      	ldr	r5, [sp, #32]
 801371c:	e73f      	b.n	801359e <_svfprintf_r+0x82e>
 801371e:	782a      	ldrb	r2, [r5, #0]
 8013720:	3501      	adds	r5, #1
 8013722:	701a      	strb	r2, [r3, #0]
 8013724:	3301      	adds	r3, #1
 8013726:	e753      	b.n	80135d0 <_svfprintf_r+0x860>
 8013728:	232a      	movs	r3, #42	; 0x2a
 801372a:	aa1e      	add	r2, sp, #120	; 0x78
 801372c:	189b      	adds	r3, r3, r2
 801372e:	2900      	cmp	r1, #0
 8013730:	d105      	bne.n	801373e <_svfprintf_r+0x9ce>
 8013732:	2230      	movs	r2, #48	; 0x30
 8013734:	ab28      	add	r3, sp, #160	; 0xa0
 8013736:	709a      	strb	r2, [r3, #2]
 8013738:	232b      	movs	r3, #43	; 0x2b
 801373a:	aa1e      	add	r2, sp, #120	; 0x78
 801373c:	189b      	adds	r3, r3, r2
 801373e:	3430      	adds	r4, #48	; 0x30
 8013740:	1c5a      	adds	r2, r3, #1
 8013742:	701c      	strb	r4, [r3, #0]
 8013744:	e748      	b.n	80135d8 <_svfprintf_r+0x868>
 8013746:	2b00      	cmp	r3, #0
 8013748:	d102      	bne.n	8013750 <_svfprintf_r+0x9e0>
 801374a:	3301      	adds	r3, #1
 801374c:	421e      	tst	r6, r3
 801374e:	d029      	beq.n	80137a4 <_svfprintf_r+0xa34>
 8013750:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013752:	3301      	adds	r3, #1
 8013754:	e7db      	b.n	801370e <_svfprintf_r+0x99e>
 8013756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013758:	42ab      	cmp	r3, r5
 801375a:	dc06      	bgt.n	801376a <_svfprintf_r+0x9fa>
 801375c:	07f3      	lsls	r3, r6, #31
 801375e:	d524      	bpl.n	80137aa <_svfprintf_r+0xa3a>
 8013760:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013762:	18eb      	adds	r3, r5, r3
 8013764:	9308      	str	r3, [sp, #32]
 8013766:	2367      	movs	r3, #103	; 0x67
 8013768:	e7d5      	b.n	8013716 <_svfprintf_r+0x9a6>
 801376a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801376c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801376e:	4694      	mov	ip, r2
 8013770:	4463      	add	r3, ip
 8013772:	9308      	str	r3, [sp, #32]
 8013774:	2367      	movs	r3, #103	; 0x67
 8013776:	930e      	str	r3, [sp, #56]	; 0x38
 8013778:	2d00      	cmp	r5, #0
 801377a:	dc03      	bgt.n	8013784 <_svfprintf_r+0xa14>
 801377c:	9b08      	ldr	r3, [sp, #32]
 801377e:	1b5b      	subs	r3, r3, r5
 8013780:	3301      	adds	r3, #1
 8013782:	9308      	str	r3, [sp, #32]
 8013784:	2380      	movs	r3, #128	; 0x80
 8013786:	00db      	lsls	r3, r3, #3
 8013788:	401e      	ands	r6, r3
 801378a:	2300      	movs	r3, #0
 801378c:	960f      	str	r6, [sp, #60]	; 0x3c
 801378e:	9310      	str	r3, [sp, #64]	; 0x40
 8013790:	2e00      	cmp	r6, #0
 8013792:	d100      	bne.n	8013796 <_svfprintf_r+0xa26>
 8013794:	e73c      	b.n	8013610 <_svfprintf_r+0x8a0>
 8013796:	2d00      	cmp	r5, #0
 8013798:	dc27      	bgt.n	80137ea <_svfprintf_r+0xa7a>
 801379a:	2300      	movs	r3, #0
 801379c:	930f      	str	r3, [sp, #60]	; 0x3c
 801379e:	e737      	b.n	8013610 <_svfprintf_r+0x8a0>
 80137a0:	9508      	str	r5, [sp, #32]
 80137a2:	e7b7      	b.n	8013714 <_svfprintf_r+0x9a4>
 80137a4:	2266      	movs	r2, #102	; 0x66
 80137a6:	920e      	str	r2, [sp, #56]	; 0x38
 80137a8:	e7eb      	b.n	8013782 <_svfprintf_r+0xa12>
 80137aa:	9508      	str	r5, [sp, #32]
 80137ac:	e7db      	b.n	8013766 <_svfprintf_r+0x9f6>
 80137ae:	42ab      	cmp	r3, r5
 80137b0:	da0e      	bge.n	80137d0 <_svfprintf_r+0xa60>
 80137b2:	1aed      	subs	r5, r5, r3
 80137b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80137b6:	785b      	ldrb	r3, [r3, #1]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d012      	beq.n	80137e2 <_svfprintf_r+0xa72>
 80137bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80137be:	3301      	adds	r3, #1
 80137c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80137c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80137c4:	3301      	adds	r3, #1
 80137c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80137c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80137ca:	781b      	ldrb	r3, [r3, #0]
 80137cc:	2bff      	cmp	r3, #255	; 0xff
 80137ce:	d1ee      	bne.n	80137ae <_svfprintf_r+0xa3e>
 80137d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80137d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80137d4:	189b      	adds	r3, r3, r2
 80137d6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80137d8:	4353      	muls	r3, r2
 80137da:	9a08      	ldr	r2, [sp, #32]
 80137dc:	189b      	adds	r3, r3, r2
 80137de:	9308      	str	r3, [sp, #32]
 80137e0:	e716      	b.n	8013610 <_svfprintf_r+0x8a0>
 80137e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80137e4:	3301      	adds	r3, #1
 80137e6:	9310      	str	r3, [sp, #64]	; 0x40
 80137e8:	e7ee      	b.n	80137c8 <_svfprintf_r+0xa58>
 80137ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80137ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80137ee:	e7eb      	b.n	80137c8 <_svfprintf_r+0xa58>
 80137f0:	0022      	movs	r2, r4
 80137f2:	ca08      	ldmia	r2!, {r3}
 80137f4:	9212      	str	r2, [sp, #72]	; 0x48
 80137f6:	06b2      	lsls	r2, r6, #26
 80137f8:	d508      	bpl.n	801380c <_svfprintf_r+0xa9c>
 80137fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80137fc:	601a      	str	r2, [r3, #0]
 80137fe:	17d2      	asrs	r2, r2, #31
 8013800:	605a      	str	r2, [r3, #4]
 8013802:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013804:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8013806:	9309      	str	r3, [sp, #36]	; 0x24
 8013808:	f7ff faeb 	bl	8012de2 <_svfprintf_r+0x72>
 801380c:	06f2      	lsls	r2, r6, #27
 801380e:	d502      	bpl.n	8013816 <_svfprintf_r+0xaa6>
 8013810:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013812:	601a      	str	r2, [r3, #0]
 8013814:	e7f5      	b.n	8013802 <_svfprintf_r+0xa92>
 8013816:	0672      	lsls	r2, r6, #25
 8013818:	d502      	bpl.n	8013820 <_svfprintf_r+0xab0>
 801381a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801381c:	801a      	strh	r2, [r3, #0]
 801381e:	e7f0      	b.n	8013802 <_svfprintf_r+0xa92>
 8013820:	05b2      	lsls	r2, r6, #22
 8013822:	d5f5      	bpl.n	8013810 <_svfprintf_r+0xaa0>
 8013824:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013826:	701a      	strb	r2, [r3, #0]
 8013828:	e7eb      	b.n	8013802 <_svfprintf_r+0xa92>
 801382a:	2310      	movs	r3, #16
 801382c:	431e      	orrs	r6, r3
 801382e:	2220      	movs	r2, #32
 8013830:	4032      	ands	r2, r6
 8013832:	d025      	beq.n	8013880 <_svfprintf_r+0xb10>
 8013834:	2307      	movs	r3, #7
 8013836:	3407      	adds	r4, #7
 8013838:	439c      	bics	r4, r3
 801383a:	0023      	movs	r3, r4
 801383c:	3308      	adds	r3, #8
 801383e:	9312      	str	r3, [sp, #72]	; 0x48
 8013840:	6823      	ldr	r3, [r4, #0]
 8013842:	6864      	ldr	r4, [r4, #4]
 8013844:	9306      	str	r3, [sp, #24]
 8013846:	9407      	str	r4, [sp, #28]
 8013848:	4bc2      	ldr	r3, [pc, #776]	; (8013b54 <_svfprintf_r+0xde4>)
 801384a:	401e      	ands	r6, r3
 801384c:	2300      	movs	r3, #0
 801384e:	221b      	movs	r2, #27
 8013850:	a91e      	add	r1, sp, #120	; 0x78
 8013852:	1852      	adds	r2, r2, r1
 8013854:	2100      	movs	r1, #0
 8013856:	7011      	strb	r1, [r2, #0]
 8013858:	9a08      	ldr	r2, [sp, #32]
 801385a:	3201      	adds	r2, #1
 801385c:	d100      	bne.n	8013860 <_svfprintf_r+0xaf0>
 801385e:	e0a6      	b.n	80139ae <_svfprintf_r+0xc3e>
 8013860:	0032      	movs	r2, r6
 8013862:	2180      	movs	r1, #128	; 0x80
 8013864:	9807      	ldr	r0, [sp, #28]
 8013866:	438e      	bics	r6, r1
 8013868:	9906      	ldr	r1, [sp, #24]
 801386a:	4301      	orrs	r1, r0
 801386c:	d000      	beq.n	8013870 <_svfprintf_r+0xb00>
 801386e:	e09e      	b.n	80139ae <_svfprintf_r+0xc3e>
 8013870:	9908      	ldr	r1, [sp, #32]
 8013872:	2900      	cmp	r1, #0
 8013874:	d100      	bne.n	8013878 <_svfprintf_r+0xb08>
 8013876:	e125      	b.n	8013ac4 <_svfprintf_r+0xd54>
 8013878:	2b01      	cmp	r3, #1
 801387a:	d000      	beq.n	801387e <_svfprintf_r+0xb0e>
 801387c:	e09a      	b.n	80139b4 <_svfprintf_r+0xc44>
 801387e:	e518      	b.n	80132b2 <_svfprintf_r+0x542>
 8013880:	1d23      	adds	r3, r4, #4
 8013882:	9312      	str	r3, [sp, #72]	; 0x48
 8013884:	2310      	movs	r3, #16
 8013886:	4033      	ands	r3, r6
 8013888:	d003      	beq.n	8013892 <_svfprintf_r+0xb22>
 801388a:	6823      	ldr	r3, [r4, #0]
 801388c:	9306      	str	r3, [sp, #24]
 801388e:	9207      	str	r2, [sp, #28]
 8013890:	e7da      	b.n	8013848 <_svfprintf_r+0xad8>
 8013892:	2240      	movs	r2, #64	; 0x40
 8013894:	4032      	ands	r2, r6
 8013896:	d004      	beq.n	80138a2 <_svfprintf_r+0xb32>
 8013898:	6822      	ldr	r2, [r4, #0]
 801389a:	b292      	uxth	r2, r2
 801389c:	9206      	str	r2, [sp, #24]
 801389e:	9307      	str	r3, [sp, #28]
 80138a0:	e7d2      	b.n	8013848 <_svfprintf_r+0xad8>
 80138a2:	2380      	movs	r3, #128	; 0x80
 80138a4:	009b      	lsls	r3, r3, #2
 80138a6:	4033      	ands	r3, r6
 80138a8:	d002      	beq.n	80138b0 <_svfprintf_r+0xb40>
 80138aa:	6823      	ldr	r3, [r4, #0]
 80138ac:	b2db      	uxtb	r3, r3
 80138ae:	e7ed      	b.n	801388c <_svfprintf_r+0xb1c>
 80138b0:	6822      	ldr	r2, [r4, #0]
 80138b2:	e7f3      	b.n	801389c <_svfprintf_r+0xb2c>
 80138b4:	1d23      	adds	r3, r4, #4
 80138b6:	49a8      	ldr	r1, [pc, #672]	; (8013b58 <_svfprintf_r+0xde8>)
 80138b8:	aa25      	add	r2, sp, #148	; 0x94
 80138ba:	9312      	str	r3, [sp, #72]	; 0x48
 80138bc:	6823      	ldr	r3, [r4, #0]
 80138be:	8011      	strh	r1, [r2, #0]
 80138c0:	4aa6      	ldr	r2, [pc, #664]	; (8013b5c <_svfprintf_r+0xdec>)
 80138c2:	9306      	str	r3, [sp, #24]
 80138c4:	2300      	movs	r3, #0
 80138c6:	921e      	str	r2, [sp, #120]	; 0x78
 80138c8:	2278      	movs	r2, #120	; 0x78
 80138ca:	9307      	str	r3, [sp, #28]
 80138cc:	3302      	adds	r3, #2
 80138ce:	431e      	orrs	r6, r3
 80138d0:	920e      	str	r2, [sp, #56]	; 0x38
 80138d2:	e7bc      	b.n	801384e <_svfprintf_r+0xade>
 80138d4:	1d23      	adds	r3, r4, #4
 80138d6:	9312      	str	r3, [sp, #72]	; 0x48
 80138d8:	6823      	ldr	r3, [r4, #0]
 80138da:	2400      	movs	r4, #0
 80138dc:	9309      	str	r3, [sp, #36]	; 0x24
 80138de:	231b      	movs	r3, #27
 80138e0:	aa1e      	add	r2, sp, #120	; 0x78
 80138e2:	189b      	adds	r3, r3, r2
 80138e4:	701c      	strb	r4, [r3, #0]
 80138e6:	9b08      	ldr	r3, [sp, #32]
 80138e8:	3301      	adds	r3, #1
 80138ea:	d00e      	beq.n	801390a <_svfprintf_r+0xb9a>
 80138ec:	9a08      	ldr	r2, [sp, #32]
 80138ee:	0021      	movs	r1, r4
 80138f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80138f2:	f001 ff79 	bl	80157e8 <memchr>
 80138f6:	900c      	str	r0, [sp, #48]	; 0x30
 80138f8:	42a0      	cmp	r0, r4
 80138fa:	d100      	bne.n	80138fe <_svfprintf_r+0xb8e>
 80138fc:	e100      	b.n	8013b00 <_svfprintf_r+0xd90>
 80138fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013900:	1a83      	subs	r3, r0, r2
 8013902:	9308      	str	r3, [sp, #32]
 8013904:	940c      	str	r4, [sp, #48]	; 0x30
 8013906:	0023      	movs	r3, r4
 8013908:	e527      	b.n	801335a <_svfprintf_r+0x5ea>
 801390a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801390c:	f7ec fc04 	bl	8000118 <strlen>
 8013910:	9008      	str	r0, [sp, #32]
 8013912:	e7f7      	b.n	8013904 <_svfprintf_r+0xb94>
 8013914:	2310      	movs	r3, #16
 8013916:	431e      	orrs	r6, r3
 8013918:	2220      	movs	r2, #32
 801391a:	4032      	ands	r2, r6
 801391c:	d00b      	beq.n	8013936 <_svfprintf_r+0xbc6>
 801391e:	2307      	movs	r3, #7
 8013920:	3407      	adds	r4, #7
 8013922:	439c      	bics	r4, r3
 8013924:	0023      	movs	r3, r4
 8013926:	3308      	adds	r3, #8
 8013928:	9312      	str	r3, [sp, #72]	; 0x48
 801392a:	6823      	ldr	r3, [r4, #0]
 801392c:	6864      	ldr	r4, [r4, #4]
 801392e:	9306      	str	r3, [sp, #24]
 8013930:	9407      	str	r4, [sp, #28]
 8013932:	2301      	movs	r3, #1
 8013934:	e78b      	b.n	801384e <_svfprintf_r+0xade>
 8013936:	1d23      	adds	r3, r4, #4
 8013938:	9312      	str	r3, [sp, #72]	; 0x48
 801393a:	2310      	movs	r3, #16
 801393c:	4033      	ands	r3, r6
 801393e:	d003      	beq.n	8013948 <_svfprintf_r+0xbd8>
 8013940:	6823      	ldr	r3, [r4, #0]
 8013942:	9306      	str	r3, [sp, #24]
 8013944:	9207      	str	r2, [sp, #28]
 8013946:	e7f4      	b.n	8013932 <_svfprintf_r+0xbc2>
 8013948:	2240      	movs	r2, #64	; 0x40
 801394a:	4032      	ands	r2, r6
 801394c:	d004      	beq.n	8013958 <_svfprintf_r+0xbe8>
 801394e:	6822      	ldr	r2, [r4, #0]
 8013950:	b292      	uxth	r2, r2
 8013952:	9206      	str	r2, [sp, #24]
 8013954:	9307      	str	r3, [sp, #28]
 8013956:	e7ec      	b.n	8013932 <_svfprintf_r+0xbc2>
 8013958:	2380      	movs	r3, #128	; 0x80
 801395a:	009b      	lsls	r3, r3, #2
 801395c:	4033      	ands	r3, r6
 801395e:	d002      	beq.n	8013966 <_svfprintf_r+0xbf6>
 8013960:	6823      	ldr	r3, [r4, #0]
 8013962:	b2db      	uxtb	r3, r3
 8013964:	e7ed      	b.n	8013942 <_svfprintf_r+0xbd2>
 8013966:	6822      	ldr	r2, [r4, #0]
 8013968:	e7f3      	b.n	8013952 <_svfprintf_r+0xbe2>
 801396a:	4b7c      	ldr	r3, [pc, #496]	; (8013b5c <_svfprintf_r+0xdec>)
 801396c:	f7ff fad9 	bl	8012f22 <_svfprintf_r+0x1b2>
 8013970:	1d23      	adds	r3, r4, #4
 8013972:	9312      	str	r3, [sp, #72]	; 0x48
 8013974:	2310      	movs	r3, #16
 8013976:	4033      	ands	r3, r6
 8013978:	d004      	beq.n	8013984 <_svfprintf_r+0xc14>
 801397a:	6823      	ldr	r3, [r4, #0]
 801397c:	9306      	str	r3, [sp, #24]
 801397e:	9207      	str	r2, [sp, #28]
 8013980:	f7ff fadf 	bl	8012f42 <_svfprintf_r+0x1d2>
 8013984:	2240      	movs	r2, #64	; 0x40
 8013986:	4032      	ands	r2, r6
 8013988:	d005      	beq.n	8013996 <_svfprintf_r+0xc26>
 801398a:	6822      	ldr	r2, [r4, #0]
 801398c:	b292      	uxth	r2, r2
 801398e:	9206      	str	r2, [sp, #24]
 8013990:	9307      	str	r3, [sp, #28]
 8013992:	f7ff fad6 	bl	8012f42 <_svfprintf_r+0x1d2>
 8013996:	2380      	movs	r3, #128	; 0x80
 8013998:	009b      	lsls	r3, r3, #2
 801399a:	4033      	ands	r3, r6
 801399c:	d002      	beq.n	80139a4 <_svfprintf_r+0xc34>
 801399e:	6823      	ldr	r3, [r4, #0]
 80139a0:	b2db      	uxtb	r3, r3
 80139a2:	e7eb      	b.n	801397c <_svfprintf_r+0xc0c>
 80139a4:	6822      	ldr	r2, [r4, #0]
 80139a6:	e7f2      	b.n	801398e <_svfprintf_r+0xc1e>
 80139a8:	0032      	movs	r2, r6
 80139aa:	2301      	movs	r3, #1
 80139ac:	e759      	b.n	8013862 <_svfprintf_r+0xaf2>
 80139ae:	2b01      	cmp	r3, #1
 80139b0:	d100      	bne.n	80139b4 <_svfprintf_r+0xc44>
 80139b2:	e476      	b.n	80132a2 <_svfprintf_r+0x532>
 80139b4:	2b02      	cmp	r3, #2
 80139b6:	d06b      	beq.n	8013a90 <_svfprintf_r+0xd20>
 80139b8:	2507      	movs	r5, #7
 80139ba:	ab58      	add	r3, sp, #352	; 0x160
 80139bc:	1e5a      	subs	r2, r3, #1
 80139be:	9209      	str	r2, [sp, #36]	; 0x24
 80139c0:	9a06      	ldr	r2, [sp, #24]
 80139c2:	1e59      	subs	r1, r3, #1
 80139c4:	402a      	ands	r2, r5
 80139c6:	3230      	adds	r2, #48	; 0x30
 80139c8:	700a      	strb	r2, [r1, #0]
 80139ca:	9907      	ldr	r1, [sp, #28]
 80139cc:	074c      	lsls	r4, r1, #29
 80139ce:	9906      	ldr	r1, [sp, #24]
 80139d0:	08c8      	lsrs	r0, r1, #3
 80139d2:	9907      	ldr	r1, [sp, #28]
 80139d4:	4304      	orrs	r4, r0
 80139d6:	08c9      	lsrs	r1, r1, #3
 80139d8:	9107      	str	r1, [sp, #28]
 80139da:	0021      	movs	r1, r4
 80139dc:	9807      	ldr	r0, [sp, #28]
 80139de:	9406      	str	r4, [sp, #24]
 80139e0:	4301      	orrs	r1, r0
 80139e2:	d111      	bne.n	8013a08 <_svfprintf_r+0xc98>
 80139e4:	07f1      	lsls	r1, r6, #31
 80139e6:	d502      	bpl.n	80139ee <_svfprintf_r+0xc7e>
 80139e8:	3b02      	subs	r3, #2
 80139ea:	2a30      	cmp	r2, #48	; 0x30
 80139ec:	d173      	bne.n	8013ad6 <_svfprintf_r+0xd66>
 80139ee:	9b08      	ldr	r3, [sp, #32]
 80139f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80139f4:	ab58      	add	r3, sp, #352	; 0x160
 80139f6:	1a9b      	subs	r3, r3, r2
 80139f8:	9308      	str	r3, [sp, #32]
 80139fa:	2300      	movs	r3, #0
 80139fc:	930c      	str	r3, [sp, #48]	; 0x30
 80139fe:	9310      	str	r3, [sp, #64]	; 0x40
 8013a00:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a02:	001d      	movs	r5, r3
 8013a04:	f7ff fb4b 	bl	801309e <_svfprintf_r+0x32e>
 8013a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a0a:	e7d7      	b.n	80139bc <_svfprintf_r+0xc4c>
 8013a0c:	2480      	movs	r4, #128	; 0x80
 8013a0e:	2300      	movs	r3, #0
 8013a10:	00e4      	lsls	r4, r4, #3
 8013a12:	930d      	str	r3, [sp, #52]	; 0x34
 8013a14:	4034      	ands	r4, r6
 8013a16:	ab58      	add	r3, sp, #352	; 0x160
 8013a18:	3b01      	subs	r3, #1
 8013a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8013a1c:	220a      	movs	r2, #10
 8013a1e:	9806      	ldr	r0, [sp, #24]
 8013a20:	9907      	ldr	r1, [sp, #28]
 8013a22:	2300      	movs	r3, #0
 8013a24:	f7ec fd82 	bl	800052c <__aeabi_uldivmod>
 8013a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a2a:	3230      	adds	r2, #48	; 0x30
 8013a2c:	701a      	strb	r2, [r3, #0]
 8013a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013a30:	3301      	adds	r3, #1
 8013a32:	930d      	str	r3, [sp, #52]	; 0x34
 8013a34:	2c00      	cmp	r4, #0
 8013a36:	d01d      	beq.n	8013a74 <_svfprintf_r+0xd04>
 8013a38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013a3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013a3c:	781b      	ldrb	r3, [r3, #0]
 8013a3e:	429a      	cmp	r2, r3
 8013a40:	d118      	bne.n	8013a74 <_svfprintf_r+0xd04>
 8013a42:	2aff      	cmp	r2, #255	; 0xff
 8013a44:	d016      	beq.n	8013a74 <_svfprintf_r+0xd04>
 8013a46:	9b07      	ldr	r3, [sp, #28]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d102      	bne.n	8013a52 <_svfprintf_r+0xce2>
 8013a4c:	9b06      	ldr	r3, [sp, #24]
 8013a4e:	2b09      	cmp	r3, #9
 8013a50:	d910      	bls.n	8013a74 <_svfprintf_r+0xd04>
 8013a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a54:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013a56:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8013a58:	1a9b      	subs	r3, r3, r2
 8013a5a:	0018      	movs	r0, r3
 8013a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8013a5e:	f7fe fa52 	bl	8011f06 <strncpy>
 8013a62:	2200      	movs	r2, #0
 8013a64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013a66:	920d      	str	r2, [sp, #52]	; 0x34
 8013a68:	785b      	ldrb	r3, [r3, #1]
 8013a6a:	1e5a      	subs	r2, r3, #1
 8013a6c:	4193      	sbcs	r3, r2
 8013a6e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013a70:	18d3      	adds	r3, r2, r3
 8013a72:	9313      	str	r3, [sp, #76]	; 0x4c
 8013a74:	220a      	movs	r2, #10
 8013a76:	9806      	ldr	r0, [sp, #24]
 8013a78:	9907      	ldr	r1, [sp, #28]
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	f7ec fd56 	bl	800052c <__aeabi_uldivmod>
 8013a80:	9006      	str	r0, [sp, #24]
 8013a82:	9107      	str	r1, [sp, #28]
 8013a84:	9b06      	ldr	r3, [sp, #24]
 8013a86:	9a07      	ldr	r2, [sp, #28]
 8013a88:	4313      	orrs	r3, r2
 8013a8a:	d0b0      	beq.n	80139ee <_svfprintf_r+0xc7e>
 8013a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a8e:	e7c3      	b.n	8013a18 <_svfprintf_r+0xca8>
 8013a90:	200f      	movs	r0, #15
 8013a92:	ab58      	add	r3, sp, #352	; 0x160
 8013a94:	9309      	str	r3, [sp, #36]	; 0x24
 8013a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a98:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013a9a:	3b01      	subs	r3, #1
 8013a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8013a9e:	9b06      	ldr	r3, [sp, #24]
 8013aa0:	4003      	ands	r3, r0
 8013aa2:	5cd3      	ldrb	r3, [r2, r3]
 8013aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013aa6:	7013      	strb	r3, [r2, #0]
 8013aa8:	9b07      	ldr	r3, [sp, #28]
 8013aaa:	0719      	lsls	r1, r3, #28
 8013aac:	9b06      	ldr	r3, [sp, #24]
 8013aae:	091a      	lsrs	r2, r3, #4
 8013ab0:	9b07      	ldr	r3, [sp, #28]
 8013ab2:	4311      	orrs	r1, r2
 8013ab4:	091b      	lsrs	r3, r3, #4
 8013ab6:	9307      	str	r3, [sp, #28]
 8013ab8:	000b      	movs	r3, r1
 8013aba:	9a07      	ldr	r2, [sp, #28]
 8013abc:	9106      	str	r1, [sp, #24]
 8013abe:	4313      	orrs	r3, r2
 8013ac0:	d1e9      	bne.n	8013a96 <_svfprintf_r+0xd26>
 8013ac2:	e794      	b.n	80139ee <_svfprintf_r+0xc7e>
 8013ac4:	a958      	add	r1, sp, #352	; 0x160
 8013ac6:	9109      	str	r1, [sp, #36]	; 0x24
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d190      	bne.n	80139ee <_svfprintf_r+0xc7e>
 8013acc:	07d3      	lsls	r3, r2, #31
 8013ace:	d58e      	bpl.n	80139ee <_svfprintf_r+0xc7e>
 8013ad0:	23e7      	movs	r3, #231	; 0xe7
 8013ad2:	aa1e      	add	r2, sp, #120	; 0x78
 8013ad4:	189b      	adds	r3, r3, r2
 8013ad6:	2230      	movs	r2, #48	; 0x30
 8013ad8:	f7ff fbf0 	bl	80132bc <_svfprintf_r+0x54c>
 8013adc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d100      	bne.n	8013ae4 <_svfprintf_r+0xd74>
 8013ae2:	e38a      	b.n	80141fa <_svfprintf_r+0x148a>
 8013ae4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013ae6:	ab3f      	add	r3, sp, #252	; 0xfc
 8013ae8:	701a      	strb	r2, [r3, #0]
 8013aea:	221b      	movs	r2, #27
 8013aec:	2000      	movs	r0, #0
 8013aee:	a91e      	add	r1, sp, #120	; 0x78
 8013af0:	1852      	adds	r2, r2, r1
 8013af2:	7010      	strb	r0, [r2, #0]
 8013af4:	9412      	str	r4, [sp, #72]	; 0x48
 8013af6:	f7ff faca 	bl	801308e <_svfprintf_r+0x31e>
 8013afa:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8013afc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013afe:	e592      	b.n	8013626 <_svfprintf_r+0x8b6>
 8013b00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b02:	e42a      	b.n	801335a <_svfprintf_r+0x5ea>
 8013b04:	2010      	movs	r0, #16
 8013b06:	1812      	adds	r2, r2, r0
 8013b08:	6078      	str	r0, [r7, #4]
 8013b0a:	922e      	str	r2, [sp, #184]	; 0xb8
 8013b0c:	932d      	str	r3, [sp, #180]	; 0xb4
 8013b0e:	2b07      	cmp	r3, #7
 8013b10:	dd08      	ble.n	8013b24 <_svfprintf_r+0xdb4>
 8013b12:	aa2c      	add	r2, sp, #176	; 0xb0
 8013b14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013b16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013b18:	f002 fa7e 	bl	8016018 <__ssprint_r>
 8013b1c:	2800      	cmp	r0, #0
 8013b1e:	d000      	beq.n	8013b22 <_svfprintf_r+0xdb2>
 8013b20:	e34a      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013b22:	a92f      	add	r1, sp, #188	; 0xbc
 8013b24:	3c10      	subs	r4, #16
 8013b26:	000f      	movs	r7, r1
 8013b28:	f7ff fad8 	bl	80130dc <_svfprintf_r+0x36c>
 8013b2c:	2010      	movs	r0, #16
 8013b2e:	1812      	adds	r2, r2, r0
 8013b30:	6078      	str	r0, [r7, #4]
 8013b32:	922e      	str	r2, [sp, #184]	; 0xb8
 8013b34:	932d      	str	r3, [sp, #180]	; 0xb4
 8013b36:	2b07      	cmp	r3, #7
 8013b38:	dd08      	ble.n	8013b4c <_svfprintf_r+0xddc>
 8013b3a:	aa2c      	add	r2, sp, #176	; 0xb0
 8013b3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013b3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013b40:	f002 fa6a 	bl	8016018 <__ssprint_r>
 8013b44:	2800      	cmp	r0, #0
 8013b46:	d000      	beq.n	8013b4a <_svfprintf_r+0xdda>
 8013b48:	e336      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013b4a:	a92f      	add	r1, sp, #188	; 0xbc
 8013b4c:	3c10      	subs	r4, #16
 8013b4e:	000f      	movs	r7, r1
 8013b50:	f7ff fb24 	bl	801319c <_svfprintf_r+0x42c>
 8013b54:	fffffbff 	.word	0xfffffbff
 8013b58:	00007830 	.word	0x00007830
 8013b5c:	08018e20 	.word	0x08018e20
 8013b60:	2010      	movs	r0, #16
 8013b62:	1812      	adds	r2, r2, r0
 8013b64:	6078      	str	r0, [r7, #4]
 8013b66:	922e      	str	r2, [sp, #184]	; 0xb8
 8013b68:	932d      	str	r3, [sp, #180]	; 0xb4
 8013b6a:	2b07      	cmp	r3, #7
 8013b6c:	dd08      	ble.n	8013b80 <_svfprintf_r+0xe10>
 8013b6e:	aa2c      	add	r2, sp, #176	; 0xb0
 8013b70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013b72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013b74:	f002 fa50 	bl	8016018 <__ssprint_r>
 8013b78:	2800      	cmp	r0, #0
 8013b7a:	d000      	beq.n	8013b7e <_svfprintf_r+0xe0e>
 8013b7c:	e31c      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013b7e:	a92f      	add	r1, sp, #188	; 0xbc
 8013b80:	3c10      	subs	r4, #16
 8013b82:	000f      	movs	r7, r1
 8013b84:	f7ff fb2c 	bl	80131e0 <_svfprintf_r+0x470>
 8013b88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013b8a:	2b65      	cmp	r3, #101	; 0x65
 8013b8c:	dc00      	bgt.n	8013b90 <_svfprintf_r+0xe20>
 8013b8e:	e259      	b.n	8014044 <_svfprintf_r+0x12d4>
 8013b90:	2200      	movs	r2, #0
 8013b92:	2300      	movs	r3, #0
 8013b94:	981a      	ldr	r0, [sp, #104]	; 0x68
 8013b96:	9919      	ldr	r1, [sp, #100]	; 0x64
 8013b98:	f7ec fc60 	bl	800045c <__aeabi_dcmpeq>
 8013b9c:	2800      	cmp	r0, #0
 8013b9e:	d07c      	beq.n	8013c9a <_svfprintf_r+0xf2a>
 8013ba0:	4b81      	ldr	r3, [pc, #516]	; (8013da8 <_svfprintf_r+0x1038>)
 8013ba2:	603b      	str	r3, [r7, #0]
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	607b      	str	r3, [r7, #4]
 8013ba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013baa:	3708      	adds	r7, #8
 8013bac:	3301      	adds	r3, #1
 8013bae:	932e      	str	r3, [sp, #184]	; 0xb8
 8013bb0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013bb2:	9308      	str	r3, [sp, #32]
 8013bb4:	3301      	adds	r3, #1
 8013bb6:	932d      	str	r3, [sp, #180]	; 0xb4
 8013bb8:	2b07      	cmp	r3, #7
 8013bba:	dd08      	ble.n	8013bce <_svfprintf_r+0xe5e>
 8013bbc:	aa2c      	add	r2, sp, #176	; 0xb0
 8013bbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013bc0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013bc2:	f002 fa29 	bl	8016018 <__ssprint_r>
 8013bc6:	2800      	cmp	r0, #0
 8013bc8:	d000      	beq.n	8013bcc <_svfprintf_r+0xe5c>
 8013bca:	e2f5      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013bcc:	af2f      	add	r7, sp, #188	; 0xbc
 8013bce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013bd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013bd2:	4293      	cmp	r3, r2
 8013bd4:	db01      	blt.n	8013bda <_svfprintf_r+0xe6a>
 8013bd6:	07f3      	lsls	r3, r6, #31
 8013bd8:	d51d      	bpl.n	8013c16 <_svfprintf_r+0xea6>
 8013bda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013bdc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013bde:	4694      	mov	ip, r2
 8013be0:	603b      	str	r3, [r7, #0]
 8013be2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013be4:	607b      	str	r3, [r7, #4]
 8013be6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013be8:	3708      	adds	r7, #8
 8013bea:	4463      	add	r3, ip
 8013bec:	932e      	str	r3, [sp, #184]	; 0xb8
 8013bee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013bf0:	9308      	str	r3, [sp, #32]
 8013bf2:	3301      	adds	r3, #1
 8013bf4:	932d      	str	r3, [sp, #180]	; 0xb4
 8013bf6:	2b07      	cmp	r3, #7
 8013bf8:	dd08      	ble.n	8013c0c <_svfprintf_r+0xe9c>
 8013bfa:	aa2c      	add	r2, sp, #176	; 0xb0
 8013bfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013bfe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013c00:	f002 fa0a 	bl	8016018 <__ssprint_r>
 8013c04:	2800      	cmp	r0, #0
 8013c06:	d000      	beq.n	8013c0a <_svfprintf_r+0xe9a>
 8013c08:	e2d6      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013c0a:	af2f      	add	r7, sp, #188	; 0xbc
 8013c0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c0e:	2510      	movs	r5, #16
 8013c10:	1e5c      	subs	r4, r3, #1
 8013c12:	2c00      	cmp	r4, #0
 8013c14:	dc2f      	bgt.n	8013c76 <_svfprintf_r+0xf06>
 8013c16:	0773      	lsls	r3, r6, #29
 8013c18:	d500      	bpl.n	8013c1c <_svfprintf_r+0xeac>
 8013c1a:	e2af      	b.n	801417c <_svfprintf_r+0x140c>
 8013c1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013c1e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013c20:	4293      	cmp	r3, r2
 8013c22:	da00      	bge.n	8013c26 <_svfprintf_r+0xeb6>
 8013c24:	0013      	movs	r3, r2
 8013c26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013c28:	18d3      	adds	r3, r2, r3
 8013c2a:	9315      	str	r3, [sp, #84]	; 0x54
 8013c2c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013c2e:	9308      	str	r3, [sp, #32]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d007      	beq.n	8013c44 <_svfprintf_r+0xed4>
 8013c34:	aa2c      	add	r2, sp, #176	; 0xb0
 8013c36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013c38:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013c3a:	f002 f9ed 	bl	8016018 <__ssprint_r>
 8013c3e:	2800      	cmp	r0, #0
 8013c40:	d000      	beq.n	8013c44 <_svfprintf_r+0xed4>
 8013c42:	e2b9      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013c44:	2300      	movs	r3, #0
 8013c46:	932d      	str	r3, [sp, #180]	; 0xb4
 8013c48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d000      	beq.n	8013c50 <_svfprintf_r+0xee0>
 8013c4e:	e2cf      	b.n	80141f0 <_svfprintf_r+0x1480>
 8013c50:	af2f      	add	r7, sp, #188	; 0xbc
 8013c52:	e5d6      	b.n	8013802 <_svfprintf_r+0xa92>
 8013c54:	3210      	adds	r2, #16
 8013c56:	607d      	str	r5, [r7, #4]
 8013c58:	922e      	str	r2, [sp, #184]	; 0xb8
 8013c5a:	932d      	str	r3, [sp, #180]	; 0xb4
 8013c5c:	2b07      	cmp	r3, #7
 8013c5e:	dd08      	ble.n	8013c72 <_svfprintf_r+0xf02>
 8013c60:	aa2c      	add	r2, sp, #176	; 0xb0
 8013c62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013c64:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013c66:	f002 f9d7 	bl	8016018 <__ssprint_r>
 8013c6a:	2800      	cmp	r0, #0
 8013c6c:	d000      	beq.n	8013c70 <_svfprintf_r+0xf00>
 8013c6e:	e2a3      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013c70:	a92f      	add	r1, sp, #188	; 0xbc
 8013c72:	000f      	movs	r7, r1
 8013c74:	3c10      	subs	r4, #16
 8013c76:	0039      	movs	r1, r7
 8013c78:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013c7a:	484c      	ldr	r0, [pc, #304]	; (8013dac <_svfprintf_r+0x103c>)
 8013c7c:	9308      	str	r3, [sp, #32]
 8013c7e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013c80:	3301      	adds	r3, #1
 8013c82:	3108      	adds	r1, #8
 8013c84:	6038      	str	r0, [r7, #0]
 8013c86:	2c10      	cmp	r4, #16
 8013c88:	dce4      	bgt.n	8013c54 <_svfprintf_r+0xee4>
 8013c8a:	607c      	str	r4, [r7, #4]
 8013c8c:	18a4      	adds	r4, r4, r2
 8013c8e:	942e      	str	r4, [sp, #184]	; 0xb8
 8013c90:	932d      	str	r3, [sp, #180]	; 0xb4
 8013c92:	000f      	movs	r7, r1
 8013c94:	2b07      	cmp	r3, #7
 8013c96:	ddbe      	ble.n	8013c16 <_svfprintf_r+0xea6>
 8013c98:	e06a      	b.n	8013d70 <_svfprintf_r+0x1000>
 8013c9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	dd00      	ble.n	8013ca2 <_svfprintf_r+0xf32>
 8013ca0:	e086      	b.n	8013db0 <_svfprintf_r+0x1040>
 8013ca2:	4b41      	ldr	r3, [pc, #260]	; (8013da8 <_svfprintf_r+0x1038>)
 8013ca4:	603b      	str	r3, [r7, #0]
 8013ca6:	2301      	movs	r3, #1
 8013ca8:	607b      	str	r3, [r7, #4]
 8013caa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013cac:	3708      	adds	r7, #8
 8013cae:	3301      	adds	r3, #1
 8013cb0:	932e      	str	r3, [sp, #184]	; 0xb8
 8013cb2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013cb4:	9308      	str	r3, [sp, #32]
 8013cb6:	3301      	adds	r3, #1
 8013cb8:	932d      	str	r3, [sp, #180]	; 0xb4
 8013cba:	2b07      	cmp	r3, #7
 8013cbc:	dd08      	ble.n	8013cd0 <_svfprintf_r+0xf60>
 8013cbe:	aa2c      	add	r2, sp, #176	; 0xb0
 8013cc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013cc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013cc4:	f002 f9a8 	bl	8016018 <__ssprint_r>
 8013cc8:	2800      	cmp	r0, #0
 8013cca:	d000      	beq.n	8013cce <_svfprintf_r+0xf5e>
 8013ccc:	e274      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013cce:	af2f      	add	r7, sp, #188	; 0xbc
 8013cd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d104      	bne.n	8013ce0 <_svfprintf_r+0xf70>
 8013cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d101      	bne.n	8013ce0 <_svfprintf_r+0xf70>
 8013cdc:	07f3      	lsls	r3, r6, #31
 8013cde:	d59a      	bpl.n	8013c16 <_svfprintf_r+0xea6>
 8013ce0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013ce2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013ce4:	4694      	mov	ip, r2
 8013ce6:	603b      	str	r3, [r7, #0]
 8013ce8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013cea:	607b      	str	r3, [r7, #4]
 8013cec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013cee:	3708      	adds	r7, #8
 8013cf0:	4463      	add	r3, ip
 8013cf2:	932e      	str	r3, [sp, #184]	; 0xb8
 8013cf4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013cf6:	9308      	str	r3, [sp, #32]
 8013cf8:	3301      	adds	r3, #1
 8013cfa:	932d      	str	r3, [sp, #180]	; 0xb4
 8013cfc:	2b07      	cmp	r3, #7
 8013cfe:	dd08      	ble.n	8013d12 <_svfprintf_r+0xfa2>
 8013d00:	aa2c      	add	r2, sp, #176	; 0xb0
 8013d02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013d04:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013d06:	f002 f987 	bl	8016018 <__ssprint_r>
 8013d0a:	2800      	cmp	r0, #0
 8013d0c:	d000      	beq.n	8013d10 <_svfprintf_r+0xfa0>
 8013d0e:	e253      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013d10:	af2f      	add	r7, sp, #188	; 0xbc
 8013d12:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8013d14:	2c00      	cmp	r4, #0
 8013d16:	da1a      	bge.n	8013d4e <_svfprintf_r+0xfde>
 8013d18:	0039      	movs	r1, r7
 8013d1a:	2510      	movs	r5, #16
 8013d1c:	4264      	negs	r4, r4
 8013d1e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013d20:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8013d22:	9308      	str	r3, [sp, #32]
 8013d24:	1c5a      	adds	r2, r3, #1
 8013d26:	4b21      	ldr	r3, [pc, #132]	; (8013dac <_svfprintf_r+0x103c>)
 8013d28:	3708      	adds	r7, #8
 8013d2a:	600b      	str	r3, [r1, #0]
 8013d2c:	2c10      	cmp	r4, #16
 8013d2e:	dc29      	bgt.n	8013d84 <_svfprintf_r+0x1014>
 8013d30:	604c      	str	r4, [r1, #4]
 8013d32:	1824      	adds	r4, r4, r0
 8013d34:	942e      	str	r4, [sp, #184]	; 0xb8
 8013d36:	922d      	str	r2, [sp, #180]	; 0xb4
 8013d38:	2a07      	cmp	r2, #7
 8013d3a:	dd08      	ble.n	8013d4e <_svfprintf_r+0xfde>
 8013d3c:	aa2c      	add	r2, sp, #176	; 0xb0
 8013d3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013d40:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013d42:	f002 f969 	bl	8016018 <__ssprint_r>
 8013d46:	2800      	cmp	r0, #0
 8013d48:	d000      	beq.n	8013d4c <_svfprintf_r+0xfdc>
 8013d4a:	e235      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013d4c:	af2f      	add	r7, sp, #188	; 0xbc
 8013d4e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d52:	468c      	mov	ip, r1
 8013d54:	603b      	str	r3, [r7, #0]
 8013d56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d58:	607b      	str	r3, [r7, #4]
 8013d5a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013d5c:	4463      	add	r3, ip
 8013d5e:	932e      	str	r3, [sp, #184]	; 0xb8
 8013d60:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013d62:	1c5a      	adds	r2, r3, #1
 8013d64:	9308      	str	r3, [sp, #32]
 8013d66:	922d      	str	r2, [sp, #180]	; 0xb4
 8013d68:	2a07      	cmp	r2, #7
 8013d6a:	dc01      	bgt.n	8013d70 <_svfprintf_r+0x1000>
 8013d6c:	f7ff fa6c 	bl	8013248 <_svfprintf_r+0x4d8>
 8013d70:	aa2c      	add	r2, sp, #176	; 0xb0
 8013d72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013d74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013d76:	f002 f94f 	bl	8016018 <__ssprint_r>
 8013d7a:	2800      	cmp	r0, #0
 8013d7c:	d000      	beq.n	8013d80 <_svfprintf_r+0x1010>
 8013d7e:	e21b      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013d80:	af2f      	add	r7, sp, #188	; 0xbc
 8013d82:	e748      	b.n	8013c16 <_svfprintf_r+0xea6>
 8013d84:	3010      	adds	r0, #16
 8013d86:	604d      	str	r5, [r1, #4]
 8013d88:	902e      	str	r0, [sp, #184]	; 0xb8
 8013d8a:	922d      	str	r2, [sp, #180]	; 0xb4
 8013d8c:	2a07      	cmp	r2, #7
 8013d8e:	dd08      	ble.n	8013da2 <_svfprintf_r+0x1032>
 8013d90:	aa2c      	add	r2, sp, #176	; 0xb0
 8013d92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013d94:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013d96:	f002 f93f 	bl	8016018 <__ssprint_r>
 8013d9a:	2800      	cmp	r0, #0
 8013d9c:	d000      	beq.n	8013da0 <_svfprintf_r+0x1030>
 8013d9e:	e20b      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013da0:	af2f      	add	r7, sp, #188	; 0xbc
 8013da2:	3c10      	subs	r4, #16
 8013da4:	0039      	movs	r1, r7
 8013da6:	e7ba      	b.n	8013d1e <_svfprintf_r+0xfae>
 8013da8:	08018e42 	.word	0x08018e42
 8013dac:	08018e54 	.word	0x08018e54
 8013db0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013db2:	002c      	movs	r4, r5
 8013db4:	429d      	cmp	r5, r3
 8013db6:	dd00      	ble.n	8013dba <_svfprintf_r+0x104a>
 8013db8:	001c      	movs	r4, r3
 8013dba:	2c00      	cmp	r4, #0
 8013dbc:	dd15      	ble.n	8013dea <_svfprintf_r+0x107a>
 8013dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dc0:	607c      	str	r4, [r7, #4]
 8013dc2:	603b      	str	r3, [r7, #0]
 8013dc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013dc6:	3708      	adds	r7, #8
 8013dc8:	18e3      	adds	r3, r4, r3
 8013dca:	932e      	str	r3, [sp, #184]	; 0xb8
 8013dcc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013dce:	9308      	str	r3, [sp, #32]
 8013dd0:	3301      	adds	r3, #1
 8013dd2:	932d      	str	r3, [sp, #180]	; 0xb4
 8013dd4:	2b07      	cmp	r3, #7
 8013dd6:	dd08      	ble.n	8013dea <_svfprintf_r+0x107a>
 8013dd8:	aa2c      	add	r2, sp, #176	; 0xb0
 8013dda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013ddc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013dde:	f002 f91b 	bl	8016018 <__ssprint_r>
 8013de2:	2800      	cmp	r0, #0
 8013de4:	d000      	beq.n	8013de8 <_svfprintf_r+0x1078>
 8013de6:	e1e7      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013de8:	af2f      	add	r7, sp, #188	; 0xbc
 8013dea:	43e3      	mvns	r3, r4
 8013dec:	17db      	asrs	r3, r3, #31
 8013dee:	401c      	ands	r4, r3
 8013df0:	1b2c      	subs	r4, r5, r4
 8013df2:	2c00      	cmp	r4, #0
 8013df4:	dd1a      	ble.n	8013e2c <_svfprintf_r+0x10bc>
 8013df6:	0039      	movs	r1, r7
 8013df8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013dfa:	48d4      	ldr	r0, [pc, #848]	; (801414c <_svfprintf_r+0x13dc>)
 8013dfc:	9308      	str	r3, [sp, #32]
 8013dfe:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013e00:	3301      	adds	r3, #1
 8013e02:	3108      	adds	r1, #8
 8013e04:	6038      	str	r0, [r7, #0]
 8013e06:	2c10      	cmp	r4, #16
 8013e08:	dd00      	ble.n	8013e0c <_svfprintf_r+0x109c>
 8013e0a:	e089      	b.n	8013f20 <_svfprintf_r+0x11b0>
 8013e0c:	607c      	str	r4, [r7, #4]
 8013e0e:	18a4      	adds	r4, r4, r2
 8013e10:	942e      	str	r4, [sp, #184]	; 0xb8
 8013e12:	932d      	str	r3, [sp, #180]	; 0xb4
 8013e14:	000f      	movs	r7, r1
 8013e16:	2b07      	cmp	r3, #7
 8013e18:	dd08      	ble.n	8013e2c <_svfprintf_r+0x10bc>
 8013e1a:	aa2c      	add	r2, sp, #176	; 0xb0
 8013e1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013e1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013e20:	f002 f8fa 	bl	8016018 <__ssprint_r>
 8013e24:	2800      	cmp	r0, #0
 8013e26:	d000      	beq.n	8013e2a <_svfprintf_r+0x10ba>
 8013e28:	e1c6      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013e2a:	af2f      	add	r7, sp, #188	; 0xbc
 8013e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e2e:	195d      	adds	r5, r3, r5
 8013e30:	0573      	lsls	r3, r6, #21
 8013e32:	d50d      	bpl.n	8013e50 <_svfprintf_r+0x10e0>
 8013e34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d000      	beq.n	8013e3c <_svfprintf_r+0x10cc>
 8013e3a:	e084      	b.n	8013f46 <_svfprintf_r+0x11d6>
 8013e3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d000      	beq.n	8013e44 <_svfprintf_r+0x10d4>
 8013e42:	e083      	b.n	8013f4c <_svfprintf_r+0x11dc>
 8013e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013e48:	189b      	adds	r3, r3, r2
 8013e4a:	429d      	cmp	r5, r3
 8013e4c:	d900      	bls.n	8013e50 <_svfprintf_r+0x10e0>
 8013e4e:	001d      	movs	r5, r3
 8013e50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013e52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013e54:	4293      	cmp	r3, r2
 8013e56:	db01      	blt.n	8013e5c <_svfprintf_r+0x10ec>
 8013e58:	07f3      	lsls	r3, r6, #31
 8013e5a:	d518      	bpl.n	8013e8e <_svfprintf_r+0x111e>
 8013e5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013e5e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013e60:	4694      	mov	ip, r2
 8013e62:	603b      	str	r3, [r7, #0]
 8013e64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013e66:	607b      	str	r3, [r7, #4]
 8013e68:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013e6a:	3708      	adds	r7, #8
 8013e6c:	4463      	add	r3, ip
 8013e6e:	932e      	str	r3, [sp, #184]	; 0xb8
 8013e70:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013e72:	9308      	str	r3, [sp, #32]
 8013e74:	3301      	adds	r3, #1
 8013e76:	932d      	str	r3, [sp, #180]	; 0xb4
 8013e78:	2b07      	cmp	r3, #7
 8013e7a:	dd08      	ble.n	8013e8e <_svfprintf_r+0x111e>
 8013e7c:	aa2c      	add	r2, sp, #176	; 0xb0
 8013e7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013e80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013e82:	f002 f8c9 	bl	8016018 <__ssprint_r>
 8013e86:	2800      	cmp	r0, #0
 8013e88:	d000      	beq.n	8013e8c <_svfprintf_r+0x111c>
 8013e8a:	e195      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013e8c:	af2f      	add	r7, sp, #188	; 0xbc
 8013e8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e92:	4694      	mov	ip, r2
 8013e94:	9926      	ldr	r1, [sp, #152]	; 0x98
 8013e96:	4463      	add	r3, ip
 8013e98:	1b5b      	subs	r3, r3, r5
 8013e9a:	1a54      	subs	r4, r2, r1
 8013e9c:	429c      	cmp	r4, r3
 8013e9e:	dd00      	ble.n	8013ea2 <_svfprintf_r+0x1132>
 8013ea0:	001c      	movs	r4, r3
 8013ea2:	2c00      	cmp	r4, #0
 8013ea4:	dd14      	ble.n	8013ed0 <_svfprintf_r+0x1160>
 8013ea6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013ea8:	603d      	str	r5, [r7, #0]
 8013eaa:	18e3      	adds	r3, r4, r3
 8013eac:	932e      	str	r3, [sp, #184]	; 0xb8
 8013eae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013eb0:	607c      	str	r4, [r7, #4]
 8013eb2:	9308      	str	r3, [sp, #32]
 8013eb4:	3301      	adds	r3, #1
 8013eb6:	932d      	str	r3, [sp, #180]	; 0xb4
 8013eb8:	3708      	adds	r7, #8
 8013eba:	2b07      	cmp	r3, #7
 8013ebc:	dd08      	ble.n	8013ed0 <_svfprintf_r+0x1160>
 8013ebe:	aa2c      	add	r2, sp, #176	; 0xb0
 8013ec0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013ec2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013ec4:	f002 f8a8 	bl	8016018 <__ssprint_r>
 8013ec8:	2800      	cmp	r0, #0
 8013eca:	d000      	beq.n	8013ece <_svfprintf_r+0x115e>
 8013ecc:	e174      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013ece:	af2f      	add	r7, sp, #188	; 0xbc
 8013ed0:	43e3      	mvns	r3, r4
 8013ed2:	17db      	asrs	r3, r3, #31
 8013ed4:	401c      	ands	r4, r3
 8013ed6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013ed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013eda:	2510      	movs	r5, #16
 8013edc:	1a9b      	subs	r3, r3, r2
 8013ede:	1b1c      	subs	r4, r3, r4
 8013ee0:	2c00      	cmp	r4, #0
 8013ee2:	dc00      	bgt.n	8013ee6 <_svfprintf_r+0x1176>
 8013ee4:	e697      	b.n	8013c16 <_svfprintf_r+0xea6>
 8013ee6:	0039      	movs	r1, r7
 8013ee8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013eea:	4898      	ldr	r0, [pc, #608]	; (801414c <_svfprintf_r+0x13dc>)
 8013eec:	9308      	str	r3, [sp, #32]
 8013eee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013ef0:	3301      	adds	r3, #1
 8013ef2:	3108      	adds	r1, #8
 8013ef4:	6038      	str	r0, [r7, #0]
 8013ef6:	2c10      	cmp	r4, #16
 8013ef8:	dc00      	bgt.n	8013efc <_svfprintf_r+0x118c>
 8013efa:	e6c6      	b.n	8013c8a <_svfprintf_r+0xf1a>
 8013efc:	3210      	adds	r2, #16
 8013efe:	607d      	str	r5, [r7, #4]
 8013f00:	922e      	str	r2, [sp, #184]	; 0xb8
 8013f02:	932d      	str	r3, [sp, #180]	; 0xb4
 8013f04:	2b07      	cmp	r3, #7
 8013f06:	dd08      	ble.n	8013f1a <_svfprintf_r+0x11aa>
 8013f08:	aa2c      	add	r2, sp, #176	; 0xb0
 8013f0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013f0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013f0e:	f002 f883 	bl	8016018 <__ssprint_r>
 8013f12:	2800      	cmp	r0, #0
 8013f14:	d000      	beq.n	8013f18 <_svfprintf_r+0x11a8>
 8013f16:	e14f      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013f18:	a92f      	add	r1, sp, #188	; 0xbc
 8013f1a:	3c10      	subs	r4, #16
 8013f1c:	000f      	movs	r7, r1
 8013f1e:	e7e2      	b.n	8013ee6 <_svfprintf_r+0x1176>
 8013f20:	2010      	movs	r0, #16
 8013f22:	1812      	adds	r2, r2, r0
 8013f24:	6078      	str	r0, [r7, #4]
 8013f26:	922e      	str	r2, [sp, #184]	; 0xb8
 8013f28:	932d      	str	r3, [sp, #180]	; 0xb4
 8013f2a:	2b07      	cmp	r3, #7
 8013f2c:	dd08      	ble.n	8013f40 <_svfprintf_r+0x11d0>
 8013f2e:	aa2c      	add	r2, sp, #176	; 0xb0
 8013f30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013f32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013f34:	f002 f870 	bl	8016018 <__ssprint_r>
 8013f38:	2800      	cmp	r0, #0
 8013f3a:	d000      	beq.n	8013f3e <_svfprintf_r+0x11ce>
 8013f3c:	e13c      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013f3e:	a92f      	add	r1, sp, #188	; 0xbc
 8013f40:	3c10      	subs	r4, #16
 8013f42:	000f      	movs	r7, r1
 8013f44:	e757      	b.n	8013df6 <_svfprintf_r+0x1086>
 8013f46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d061      	beq.n	8014010 <_svfprintf_r+0x12a0>
 8013f4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f4e:	3b01      	subs	r3, #1
 8013f50:	9310      	str	r3, [sp, #64]	; 0x40
 8013f52:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013f54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013f56:	4694      	mov	ip, r2
 8013f58:	603b      	str	r3, [r7, #0]
 8013f5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013f5c:	607b      	str	r3, [r7, #4]
 8013f5e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013f60:	3708      	adds	r7, #8
 8013f62:	4463      	add	r3, ip
 8013f64:	932e      	str	r3, [sp, #184]	; 0xb8
 8013f66:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013f68:	9308      	str	r3, [sp, #32]
 8013f6a:	3301      	adds	r3, #1
 8013f6c:	932d      	str	r3, [sp, #180]	; 0xb4
 8013f6e:	2b07      	cmp	r3, #7
 8013f70:	dd08      	ble.n	8013f84 <_svfprintf_r+0x1214>
 8013f72:	aa2c      	add	r2, sp, #176	; 0xb0
 8013f74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013f76:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013f78:	f002 f84e 	bl	8016018 <__ssprint_r>
 8013f7c:	2800      	cmp	r0, #0
 8013f7e:	d000      	beq.n	8013f82 <_svfprintf_r+0x1212>
 8013f80:	e11a      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013f82:	af2f      	add	r7, sp, #188	; 0xbc
 8013f84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f88:	189b      	adds	r3, r3, r2
 8013f8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013f8c:	1b5b      	subs	r3, r3, r5
 8013f8e:	7814      	ldrb	r4, [r2, #0]
 8013f90:	429c      	cmp	r4, r3
 8013f92:	dd00      	ble.n	8013f96 <_svfprintf_r+0x1226>
 8013f94:	001c      	movs	r4, r3
 8013f96:	2c00      	cmp	r4, #0
 8013f98:	dd14      	ble.n	8013fc4 <_svfprintf_r+0x1254>
 8013f9a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013f9c:	603d      	str	r5, [r7, #0]
 8013f9e:	18e3      	adds	r3, r4, r3
 8013fa0:	932e      	str	r3, [sp, #184]	; 0xb8
 8013fa2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013fa4:	607c      	str	r4, [r7, #4]
 8013fa6:	9308      	str	r3, [sp, #32]
 8013fa8:	3301      	adds	r3, #1
 8013faa:	932d      	str	r3, [sp, #180]	; 0xb4
 8013fac:	3708      	adds	r7, #8
 8013fae:	2b07      	cmp	r3, #7
 8013fb0:	dd08      	ble.n	8013fc4 <_svfprintf_r+0x1254>
 8013fb2:	aa2c      	add	r2, sp, #176	; 0xb0
 8013fb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013fb6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013fb8:	f002 f82e 	bl	8016018 <__ssprint_r>
 8013fbc:	2800      	cmp	r0, #0
 8013fbe:	d000      	beq.n	8013fc2 <_svfprintf_r+0x1252>
 8013fc0:	e0fa      	b.n	80141b8 <_svfprintf_r+0x1448>
 8013fc2:	af2f      	add	r7, sp, #188	; 0xbc
 8013fc4:	43e3      	mvns	r3, r4
 8013fc6:	17db      	asrs	r3, r3, #31
 8013fc8:	401c      	ands	r4, r3
 8013fca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013fcc:	781b      	ldrb	r3, [r3, #0]
 8013fce:	1b1c      	subs	r4, r3, r4
 8013fd0:	2c00      	cmp	r4, #0
 8013fd2:	dd19      	ble.n	8014008 <_svfprintf_r+0x1298>
 8013fd4:	0039      	movs	r1, r7
 8013fd6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8013fd8:	485c      	ldr	r0, [pc, #368]	; (801414c <_svfprintf_r+0x13dc>)
 8013fda:	9308      	str	r3, [sp, #32]
 8013fdc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8013fde:	3301      	adds	r3, #1
 8013fe0:	3108      	adds	r1, #8
 8013fe2:	6038      	str	r0, [r7, #0]
 8013fe4:	2c10      	cmp	r4, #16
 8013fe6:	dc1a      	bgt.n	801401e <_svfprintf_r+0x12ae>
 8013fe8:	607c      	str	r4, [r7, #4]
 8013fea:	18a4      	adds	r4, r4, r2
 8013fec:	942e      	str	r4, [sp, #184]	; 0xb8
 8013fee:	932d      	str	r3, [sp, #180]	; 0xb4
 8013ff0:	000f      	movs	r7, r1
 8013ff2:	2b07      	cmp	r3, #7
 8013ff4:	dd08      	ble.n	8014008 <_svfprintf_r+0x1298>
 8013ff6:	aa2c      	add	r2, sp, #176	; 0xb0
 8013ff8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013ffa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013ffc:	f002 f80c 	bl	8016018 <__ssprint_r>
 8014000:	2800      	cmp	r0, #0
 8014002:	d000      	beq.n	8014006 <_svfprintf_r+0x1296>
 8014004:	e0d8      	b.n	80141b8 <_svfprintf_r+0x1448>
 8014006:	af2f      	add	r7, sp, #188	; 0xbc
 8014008:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801400a:	781b      	ldrb	r3, [r3, #0]
 801400c:	18ed      	adds	r5, r5, r3
 801400e:	e711      	b.n	8013e34 <_svfprintf_r+0x10c4>
 8014010:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014012:	3b01      	subs	r3, #1
 8014014:	9313      	str	r3, [sp, #76]	; 0x4c
 8014016:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014018:	3b01      	subs	r3, #1
 801401a:	930f      	str	r3, [sp, #60]	; 0x3c
 801401c:	e799      	b.n	8013f52 <_svfprintf_r+0x11e2>
 801401e:	2010      	movs	r0, #16
 8014020:	1812      	adds	r2, r2, r0
 8014022:	6078      	str	r0, [r7, #4]
 8014024:	922e      	str	r2, [sp, #184]	; 0xb8
 8014026:	932d      	str	r3, [sp, #180]	; 0xb4
 8014028:	2b07      	cmp	r3, #7
 801402a:	dd08      	ble.n	801403e <_svfprintf_r+0x12ce>
 801402c:	aa2c      	add	r2, sp, #176	; 0xb0
 801402e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014030:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014032:	f001 fff1 	bl	8016018 <__ssprint_r>
 8014036:	2800      	cmp	r0, #0
 8014038:	d000      	beq.n	801403c <_svfprintf_r+0x12cc>
 801403a:	e0bd      	b.n	80141b8 <_svfprintf_r+0x1448>
 801403c:	a92f      	add	r1, sp, #188	; 0xbc
 801403e:	3c10      	subs	r4, #16
 8014040:	000f      	movs	r7, r1
 8014042:	e7c7      	b.n	8013fd4 <_svfprintf_r+0x1264>
 8014044:	003c      	movs	r4, r7
 8014046:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014048:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801404a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801404c:	9308      	str	r3, [sp, #32]
 801404e:	3101      	adds	r1, #1
 8014050:	3301      	adds	r3, #1
 8014052:	3408      	adds	r4, #8
 8014054:	2a01      	cmp	r2, #1
 8014056:	dc03      	bgt.n	8014060 <_svfprintf_r+0x12f0>
 8014058:	2201      	movs	r2, #1
 801405a:	4216      	tst	r6, r2
 801405c:	d100      	bne.n	8014060 <_svfprintf_r+0x12f0>
 801405e:	e088      	b.n	8014172 <_svfprintf_r+0x1402>
 8014060:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014062:	912e      	str	r1, [sp, #184]	; 0xb8
 8014064:	603a      	str	r2, [r7, #0]
 8014066:	2201      	movs	r2, #1
 8014068:	932d      	str	r3, [sp, #180]	; 0xb4
 801406a:	607a      	str	r2, [r7, #4]
 801406c:	2b07      	cmp	r3, #7
 801406e:	dd08      	ble.n	8014082 <_svfprintf_r+0x1312>
 8014070:	aa2c      	add	r2, sp, #176	; 0xb0
 8014072:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014074:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014076:	f001 ffcf 	bl	8016018 <__ssprint_r>
 801407a:	2800      	cmp	r0, #0
 801407c:	d000      	beq.n	8014080 <_svfprintf_r+0x1310>
 801407e:	e09b      	b.n	80141b8 <_svfprintf_r+0x1448>
 8014080:	ac2f      	add	r4, sp, #188	; 0xbc
 8014082:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014084:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014086:	4694      	mov	ip, r2
 8014088:	6023      	str	r3, [r4, #0]
 801408a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801408c:	6063      	str	r3, [r4, #4]
 801408e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014090:	3408      	adds	r4, #8
 8014092:	4463      	add	r3, ip
 8014094:	932e      	str	r3, [sp, #184]	; 0xb8
 8014096:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014098:	9308      	str	r3, [sp, #32]
 801409a:	3301      	adds	r3, #1
 801409c:	932d      	str	r3, [sp, #180]	; 0xb4
 801409e:	2b07      	cmp	r3, #7
 80140a0:	dd08      	ble.n	80140b4 <_svfprintf_r+0x1344>
 80140a2:	aa2c      	add	r2, sp, #176	; 0xb0
 80140a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80140a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80140a8:	f001 ffb6 	bl	8016018 <__ssprint_r>
 80140ac:	2800      	cmp	r0, #0
 80140ae:	d000      	beq.n	80140b2 <_svfprintf_r+0x1342>
 80140b0:	e082      	b.n	80141b8 <_svfprintf_r+0x1448>
 80140b2:	ac2f      	add	r4, sp, #188	; 0xbc
 80140b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140b6:	2200      	movs	r2, #0
 80140b8:	1e5d      	subs	r5, r3, #1
 80140ba:	981a      	ldr	r0, [sp, #104]	; 0x68
 80140bc:	2300      	movs	r3, #0
 80140be:	9919      	ldr	r1, [sp, #100]	; 0x64
 80140c0:	f7ec f9cc 	bl	800045c <__aeabi_dcmpeq>
 80140c4:	2800      	cmp	r0, #0
 80140c6:	d12c      	bne.n	8014122 <_svfprintf_r+0x13b2>
 80140c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80140ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80140cc:	9308      	str	r3, [sp, #32]
 80140ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80140d0:	6065      	str	r5, [r4, #4]
 80140d2:	1c5a      	adds	r2, r3, #1
 80140d4:	930e      	str	r3, [sp, #56]	; 0x38
 80140d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140d8:	922d      	str	r2, [sp, #180]	; 0xb4
 80140da:	3301      	adds	r3, #1
 80140dc:	6023      	str	r3, [r4, #0]
 80140de:	9b08      	ldr	r3, [sp, #32]
 80140e0:	3408      	adds	r4, #8
 80140e2:	3b01      	subs	r3, #1
 80140e4:	185b      	adds	r3, r3, r1
 80140e6:	932e      	str	r3, [sp, #184]	; 0xb8
 80140e8:	2a07      	cmp	r2, #7
 80140ea:	dd07      	ble.n	80140fc <_svfprintf_r+0x138c>
 80140ec:	aa2c      	add	r2, sp, #176	; 0xb0
 80140ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80140f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80140f2:	f001 ff91 	bl	8016018 <__ssprint_r>
 80140f6:	2800      	cmp	r0, #0
 80140f8:	d15e      	bne.n	80141b8 <_svfprintf_r+0x1448>
 80140fa:	ac2f      	add	r4, sp, #188	; 0xbc
 80140fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80140fe:	ab28      	add	r3, sp, #160	; 0xa0
 8014100:	4694      	mov	ip, r2
 8014102:	6023      	str	r3, [r4, #0]
 8014104:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014106:	6063      	str	r3, [r4, #4]
 8014108:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801410a:	4463      	add	r3, ip
 801410c:	932e      	str	r3, [sp, #184]	; 0xb8
 801410e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014110:	9308      	str	r3, [sp, #32]
 8014112:	3301      	adds	r3, #1
 8014114:	932d      	str	r3, [sp, #180]	; 0xb4
 8014116:	2b07      	cmp	r3, #7
 8014118:	dd00      	ble.n	801411c <_svfprintf_r+0x13ac>
 801411a:	e629      	b.n	8013d70 <_svfprintf_r+0x1000>
 801411c:	3408      	adds	r4, #8
 801411e:	0027      	movs	r7, r4
 8014120:	e579      	b.n	8013c16 <_svfprintf_r+0xea6>
 8014122:	2710      	movs	r7, #16
 8014124:	2d00      	cmp	r5, #0
 8014126:	dde9      	ble.n	80140fc <_svfprintf_r+0x138c>
 8014128:	0021      	movs	r1, r4
 801412a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801412c:	4807      	ldr	r0, [pc, #28]	; (801414c <_svfprintf_r+0x13dc>)
 801412e:	9308      	str	r3, [sp, #32]
 8014130:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014132:	3301      	adds	r3, #1
 8014134:	3108      	adds	r1, #8
 8014136:	6020      	str	r0, [r4, #0]
 8014138:	2d10      	cmp	r5, #16
 801413a:	dc09      	bgt.n	8014150 <_svfprintf_r+0x13e0>
 801413c:	6065      	str	r5, [r4, #4]
 801413e:	000c      	movs	r4, r1
 8014140:	18ad      	adds	r5, r5, r2
 8014142:	952e      	str	r5, [sp, #184]	; 0xb8
 8014144:	932d      	str	r3, [sp, #180]	; 0xb4
 8014146:	2b07      	cmp	r3, #7
 8014148:	ddd8      	ble.n	80140fc <_svfprintf_r+0x138c>
 801414a:	e7cf      	b.n	80140ec <_svfprintf_r+0x137c>
 801414c:	08018e54 	.word	0x08018e54
 8014150:	3210      	adds	r2, #16
 8014152:	6067      	str	r7, [r4, #4]
 8014154:	922e      	str	r2, [sp, #184]	; 0xb8
 8014156:	932d      	str	r3, [sp, #180]	; 0xb4
 8014158:	2b07      	cmp	r3, #7
 801415a:	dd07      	ble.n	801416c <_svfprintf_r+0x13fc>
 801415c:	aa2c      	add	r2, sp, #176	; 0xb0
 801415e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014160:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014162:	f001 ff59 	bl	8016018 <__ssprint_r>
 8014166:	2800      	cmp	r0, #0
 8014168:	d126      	bne.n	80141b8 <_svfprintf_r+0x1448>
 801416a:	a92f      	add	r1, sp, #188	; 0xbc
 801416c:	3d10      	subs	r5, #16
 801416e:	000c      	movs	r4, r1
 8014170:	e7da      	b.n	8014128 <_svfprintf_r+0x13b8>
 8014172:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014174:	912e      	str	r1, [sp, #184]	; 0xb8
 8014176:	c705      	stmia	r7!, {r0, r2}
 8014178:	932d      	str	r3, [sp, #180]	; 0xb4
 801417a:	e7e4      	b.n	8014146 <_svfprintf_r+0x13d6>
 801417c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801417e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014180:	2510      	movs	r5, #16
 8014182:	1a9c      	subs	r4, r3, r2
 8014184:	2c00      	cmp	r4, #0
 8014186:	dc00      	bgt.n	801418a <_svfprintf_r+0x141a>
 8014188:	e548      	b.n	8013c1c <_svfprintf_r+0xeac>
 801418a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801418c:	4921      	ldr	r1, [pc, #132]	; (8014214 <_svfprintf_r+0x14a4>)
 801418e:	9308      	str	r3, [sp, #32]
 8014190:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014192:	3301      	adds	r3, #1
 8014194:	6039      	str	r1, [r7, #0]
 8014196:	2c10      	cmp	r4, #16
 8014198:	dc19      	bgt.n	80141ce <_svfprintf_r+0x145e>
 801419a:	607c      	str	r4, [r7, #4]
 801419c:	18a4      	adds	r4, r4, r2
 801419e:	942e      	str	r4, [sp, #184]	; 0xb8
 80141a0:	932d      	str	r3, [sp, #180]	; 0xb4
 80141a2:	2b07      	cmp	r3, #7
 80141a4:	dc00      	bgt.n	80141a8 <_svfprintf_r+0x1438>
 80141a6:	e539      	b.n	8013c1c <_svfprintf_r+0xeac>
 80141a8:	aa2c      	add	r2, sp, #176	; 0xb0
 80141aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80141ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80141ae:	f001 ff33 	bl	8016018 <__ssprint_r>
 80141b2:	2800      	cmp	r0, #0
 80141b4:	d100      	bne.n	80141b8 <_svfprintf_r+0x1448>
 80141b6:	e531      	b.n	8013c1c <_svfprintf_r+0xeac>
 80141b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d101      	bne.n	80141c2 <_svfprintf_r+0x1452>
 80141be:	f7ff f908 	bl	80133d2 <_svfprintf_r+0x662>
 80141c2:	0019      	movs	r1, r3
 80141c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80141c6:	f000 ff19 	bl	8014ffc <_free_r>
 80141ca:	f7ff f902 	bl	80133d2 <_svfprintf_r+0x662>
 80141ce:	3210      	adds	r2, #16
 80141d0:	607d      	str	r5, [r7, #4]
 80141d2:	922e      	str	r2, [sp, #184]	; 0xb8
 80141d4:	932d      	str	r3, [sp, #180]	; 0xb4
 80141d6:	3708      	adds	r7, #8
 80141d8:	2b07      	cmp	r3, #7
 80141da:	dd07      	ble.n	80141ec <_svfprintf_r+0x147c>
 80141dc:	aa2c      	add	r2, sp, #176	; 0xb0
 80141de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80141e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80141e2:	f001 ff19 	bl	8016018 <__ssprint_r>
 80141e6:	2800      	cmp	r0, #0
 80141e8:	d1e6      	bne.n	80141b8 <_svfprintf_r+0x1448>
 80141ea:	af2f      	add	r7, sp, #188	; 0xbc
 80141ec:	3c10      	subs	r4, #16
 80141ee:	e7cc      	b.n	801418a <_svfprintf_r+0x141a>
 80141f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80141f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80141f4:	f000 ff02 	bl	8014ffc <_free_r>
 80141f8:	e52a      	b.n	8013c50 <_svfprintf_r+0xee0>
 80141fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80141fc:	9306      	str	r3, [sp, #24]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d101      	bne.n	8014206 <_svfprintf_r+0x1496>
 8014202:	f7ff f8e6 	bl	80133d2 <_svfprintf_r+0x662>
 8014206:	aa2c      	add	r2, sp, #176	; 0xb0
 8014208:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801420a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801420c:	f001 ff04 	bl	8016018 <__ssprint_r>
 8014210:	f7ff f8df 	bl	80133d2 <_svfprintf_r+0x662>
 8014214:	08018e44 	.word	0x08018e44

08014218 <sysconf>:
 8014218:	2380      	movs	r3, #128	; 0x80
 801421a:	b510      	push	{r4, lr}
 801421c:	015b      	lsls	r3, r3, #5
 801421e:	2808      	cmp	r0, #8
 8014220:	d004      	beq.n	801422c <sysconf+0x14>
 8014222:	f000 fe7d 	bl	8014f20 <__errno>
 8014226:	2316      	movs	r3, #22
 8014228:	6003      	str	r3, [r0, #0]
 801422a:	3b17      	subs	r3, #23
 801422c:	0018      	movs	r0, r3
 801422e:	bd10      	pop	{r4, pc}

08014230 <__ascii_wctomb>:
 8014230:	1e0b      	subs	r3, r1, #0
 8014232:	d004      	beq.n	801423e <__ascii_wctomb+0xe>
 8014234:	2aff      	cmp	r2, #255	; 0xff
 8014236:	d904      	bls.n	8014242 <__ascii_wctomb+0x12>
 8014238:	238a      	movs	r3, #138	; 0x8a
 801423a:	6003      	str	r3, [r0, #0]
 801423c:	3b8b      	subs	r3, #139	; 0x8b
 801423e:	0018      	movs	r0, r3
 8014240:	4770      	bx	lr
 8014242:	700a      	strb	r2, [r1, #0]
 8014244:	2301      	movs	r3, #1
 8014246:	e7fa      	b.n	801423e <__ascii_wctomb+0xe>

08014248 <register_fini>:
 8014248:	4b03      	ldr	r3, [pc, #12]	; (8014258 <register_fini+0x10>)
 801424a:	b510      	push	{r4, lr}
 801424c:	2b00      	cmp	r3, #0
 801424e:	d002      	beq.n	8014256 <register_fini+0xe>
 8014250:	4802      	ldr	r0, [pc, #8]	; (801425c <register_fini+0x14>)
 8014252:	f000 f805 	bl	8014260 <atexit>
 8014256:	bd10      	pop	{r4, pc}
 8014258:	00000000 	.word	0x00000000
 801425c:	08014f2d 	.word	0x08014f2d

08014260 <atexit>:
 8014260:	2300      	movs	r3, #0
 8014262:	b510      	push	{r4, lr}
 8014264:	0001      	movs	r1, r0
 8014266:	001a      	movs	r2, r3
 8014268:	0018      	movs	r0, r3
 801426a:	f001 ff53 	bl	8016114 <__register_exitproc>
 801426e:	bd10      	pop	{r4, pc}

08014270 <quorem>:
 8014270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014272:	6903      	ldr	r3, [r0, #16]
 8014274:	690c      	ldr	r4, [r1, #16]
 8014276:	b089      	sub	sp, #36	; 0x24
 8014278:	0007      	movs	r7, r0
 801427a:	9105      	str	r1, [sp, #20]
 801427c:	2600      	movs	r6, #0
 801427e:	42a3      	cmp	r3, r4
 8014280:	db65      	blt.n	801434e <quorem+0xde>
 8014282:	000b      	movs	r3, r1
 8014284:	3c01      	subs	r4, #1
 8014286:	3314      	adds	r3, #20
 8014288:	00a5      	lsls	r5, r4, #2
 801428a:	9303      	str	r3, [sp, #12]
 801428c:	195b      	adds	r3, r3, r5
 801428e:	9304      	str	r3, [sp, #16]
 8014290:	0003      	movs	r3, r0
 8014292:	3314      	adds	r3, #20
 8014294:	9302      	str	r3, [sp, #8]
 8014296:	195d      	adds	r5, r3, r5
 8014298:	9b04      	ldr	r3, [sp, #16]
 801429a:	6828      	ldr	r0, [r5, #0]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	1c59      	adds	r1, r3, #1
 80142a0:	9301      	str	r3, [sp, #4]
 80142a2:	f7eb ff55 	bl	8000150 <__udivsi3>
 80142a6:	9001      	str	r0, [sp, #4]
 80142a8:	42b0      	cmp	r0, r6
 80142aa:	d029      	beq.n	8014300 <quorem+0x90>
 80142ac:	9b03      	ldr	r3, [sp, #12]
 80142ae:	9802      	ldr	r0, [sp, #8]
 80142b0:	469c      	mov	ip, r3
 80142b2:	9606      	str	r6, [sp, #24]
 80142b4:	4662      	mov	r2, ip
 80142b6:	ca08      	ldmia	r2!, {r3}
 80142b8:	4694      	mov	ip, r2
 80142ba:	9a01      	ldr	r2, [sp, #4]
 80142bc:	b299      	uxth	r1, r3
 80142be:	4351      	muls	r1, r2
 80142c0:	0c1b      	lsrs	r3, r3, #16
 80142c2:	4353      	muls	r3, r2
 80142c4:	1989      	adds	r1, r1, r6
 80142c6:	0c0a      	lsrs	r2, r1, #16
 80142c8:	189b      	adds	r3, r3, r2
 80142ca:	9307      	str	r3, [sp, #28]
 80142cc:	0c1e      	lsrs	r6, r3, #16
 80142ce:	6803      	ldr	r3, [r0, #0]
 80142d0:	b289      	uxth	r1, r1
 80142d2:	b29a      	uxth	r2, r3
 80142d4:	9b06      	ldr	r3, [sp, #24]
 80142d6:	18d2      	adds	r2, r2, r3
 80142d8:	6803      	ldr	r3, [r0, #0]
 80142da:	1a52      	subs	r2, r2, r1
 80142dc:	0c19      	lsrs	r1, r3, #16
 80142de:	466b      	mov	r3, sp
 80142e0:	8b9b      	ldrh	r3, [r3, #28]
 80142e2:	1acb      	subs	r3, r1, r3
 80142e4:	1411      	asrs	r1, r2, #16
 80142e6:	185b      	adds	r3, r3, r1
 80142e8:	1419      	asrs	r1, r3, #16
 80142ea:	b292      	uxth	r2, r2
 80142ec:	041b      	lsls	r3, r3, #16
 80142ee:	431a      	orrs	r2, r3
 80142f0:	9b04      	ldr	r3, [sp, #16]
 80142f2:	9106      	str	r1, [sp, #24]
 80142f4:	c004      	stmia	r0!, {r2}
 80142f6:	4563      	cmp	r3, ip
 80142f8:	d2dc      	bcs.n	80142b4 <quorem+0x44>
 80142fa:	682b      	ldr	r3, [r5, #0]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d02d      	beq.n	801435c <quorem+0xec>
 8014300:	9905      	ldr	r1, [sp, #20]
 8014302:	0038      	movs	r0, r7
 8014304:	f001 fcb2 	bl	8015c6c <__mcmp>
 8014308:	2800      	cmp	r0, #0
 801430a:	db1f      	blt.n	801434c <quorem+0xdc>
 801430c:	2500      	movs	r5, #0
 801430e:	9b01      	ldr	r3, [sp, #4]
 8014310:	9802      	ldr	r0, [sp, #8]
 8014312:	3301      	adds	r3, #1
 8014314:	9903      	ldr	r1, [sp, #12]
 8014316:	9301      	str	r3, [sp, #4]
 8014318:	6802      	ldr	r2, [r0, #0]
 801431a:	c908      	ldmia	r1!, {r3}
 801431c:	b292      	uxth	r2, r2
 801431e:	1955      	adds	r5, r2, r5
 8014320:	b29a      	uxth	r2, r3
 8014322:	1aaa      	subs	r2, r5, r2
 8014324:	6805      	ldr	r5, [r0, #0]
 8014326:	0c1b      	lsrs	r3, r3, #16
 8014328:	0c2d      	lsrs	r5, r5, #16
 801432a:	1aeb      	subs	r3, r5, r3
 801432c:	1415      	asrs	r5, r2, #16
 801432e:	195b      	adds	r3, r3, r5
 8014330:	141d      	asrs	r5, r3, #16
 8014332:	b292      	uxth	r2, r2
 8014334:	041b      	lsls	r3, r3, #16
 8014336:	4313      	orrs	r3, r2
 8014338:	c008      	stmia	r0!, {r3}
 801433a:	9b04      	ldr	r3, [sp, #16]
 801433c:	428b      	cmp	r3, r1
 801433e:	d2eb      	bcs.n	8014318 <quorem+0xa8>
 8014340:	9a02      	ldr	r2, [sp, #8]
 8014342:	00a3      	lsls	r3, r4, #2
 8014344:	18d3      	adds	r3, r2, r3
 8014346:	681a      	ldr	r2, [r3, #0]
 8014348:	2a00      	cmp	r2, #0
 801434a:	d011      	beq.n	8014370 <quorem+0x100>
 801434c:	9e01      	ldr	r6, [sp, #4]
 801434e:	0030      	movs	r0, r6
 8014350:	b009      	add	sp, #36	; 0x24
 8014352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014354:	682b      	ldr	r3, [r5, #0]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d104      	bne.n	8014364 <quorem+0xf4>
 801435a:	3c01      	subs	r4, #1
 801435c:	9b02      	ldr	r3, [sp, #8]
 801435e:	3d04      	subs	r5, #4
 8014360:	42ab      	cmp	r3, r5
 8014362:	d3f7      	bcc.n	8014354 <quorem+0xe4>
 8014364:	613c      	str	r4, [r7, #16]
 8014366:	e7cb      	b.n	8014300 <quorem+0x90>
 8014368:	681a      	ldr	r2, [r3, #0]
 801436a:	2a00      	cmp	r2, #0
 801436c:	d104      	bne.n	8014378 <quorem+0x108>
 801436e:	3c01      	subs	r4, #1
 8014370:	9a02      	ldr	r2, [sp, #8]
 8014372:	3b04      	subs	r3, #4
 8014374:	429a      	cmp	r2, r3
 8014376:	d3f7      	bcc.n	8014368 <quorem+0xf8>
 8014378:	613c      	str	r4, [r7, #16]
 801437a:	e7e7      	b.n	801434c <quorem+0xdc>

0801437c <_dtoa_r>:
 801437c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801437e:	0014      	movs	r4, r2
 8014380:	001d      	movs	r5, r3
 8014382:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8014384:	b09b      	sub	sp, #108	; 0x6c
 8014386:	9002      	str	r0, [sp, #8]
 8014388:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801438a:	9406      	str	r4, [sp, #24]
 801438c:	9507      	str	r5, [sp, #28]
 801438e:	2900      	cmp	r1, #0
 8014390:	d009      	beq.n	80143a6 <_dtoa_r+0x2a>
 8014392:	2301      	movs	r3, #1
 8014394:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014396:	4093      	lsls	r3, r2
 8014398:	604a      	str	r2, [r1, #4]
 801439a:	608b      	str	r3, [r1, #8]
 801439c:	f001 fa6a 	bl	8015874 <_Bfree>
 80143a0:	2300      	movs	r3, #0
 80143a2:	9a02      	ldr	r2, [sp, #8]
 80143a4:	6413      	str	r3, [r2, #64]	; 0x40
 80143a6:	2d00      	cmp	r5, #0
 80143a8:	da20      	bge.n	80143ec <_dtoa_r+0x70>
 80143aa:	2301      	movs	r3, #1
 80143ac:	6033      	str	r3, [r6, #0]
 80143ae:	006b      	lsls	r3, r5, #1
 80143b0:	085b      	lsrs	r3, r3, #1
 80143b2:	9307      	str	r3, [sp, #28]
 80143b4:	9c07      	ldr	r4, [sp, #28]
 80143b6:	4bb2      	ldr	r3, [pc, #712]	; (8014680 <_dtoa_r+0x304>)
 80143b8:	0022      	movs	r2, r4
 80143ba:	9317      	str	r3, [sp, #92]	; 0x5c
 80143bc:	401a      	ands	r2, r3
 80143be:	429a      	cmp	r2, r3
 80143c0:	d117      	bne.n	80143f2 <_dtoa_r+0x76>
 80143c2:	4bb0      	ldr	r3, [pc, #704]	; (8014684 <_dtoa_r+0x308>)
 80143c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80143c6:	6013      	str	r3, [r2, #0]
 80143c8:	9b06      	ldr	r3, [sp, #24]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d103      	bne.n	80143d6 <_dtoa_r+0x5a>
 80143ce:	0324      	lsls	r4, r4, #12
 80143d0:	d101      	bne.n	80143d6 <_dtoa_r+0x5a>
 80143d2:	f000 fd89 	bl	8014ee8 <_dtoa_r+0xb6c>
 80143d6:	4bac      	ldr	r3, [pc, #688]	; (8014688 <_dtoa_r+0x30c>)
 80143d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80143da:	9308      	str	r3, [sp, #32]
 80143dc:	2a00      	cmp	r2, #0
 80143de:	d002      	beq.n	80143e6 <_dtoa_r+0x6a>
 80143e0:	4baa      	ldr	r3, [pc, #680]	; (801468c <_dtoa_r+0x310>)
 80143e2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80143e4:	6013      	str	r3, [r2, #0]
 80143e6:	9808      	ldr	r0, [sp, #32]
 80143e8:	b01b      	add	sp, #108	; 0x6c
 80143ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143ec:	2300      	movs	r3, #0
 80143ee:	6033      	str	r3, [r6, #0]
 80143f0:	e7e0      	b.n	80143b4 <_dtoa_r+0x38>
 80143f2:	9e06      	ldr	r6, [sp, #24]
 80143f4:	9f07      	ldr	r7, [sp, #28]
 80143f6:	2200      	movs	r2, #0
 80143f8:	2300      	movs	r3, #0
 80143fa:	0030      	movs	r0, r6
 80143fc:	0039      	movs	r1, r7
 80143fe:	f7ec f82d 	bl	800045c <__aeabi_dcmpeq>
 8014402:	1e05      	subs	r5, r0, #0
 8014404:	d00b      	beq.n	801441e <_dtoa_r+0xa2>
 8014406:	2301      	movs	r3, #1
 8014408:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801440a:	6013      	str	r3, [r2, #0]
 801440c:	4ba0      	ldr	r3, [pc, #640]	; (8014690 <_dtoa_r+0x314>)
 801440e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014410:	9308      	str	r3, [sp, #32]
 8014412:	2a00      	cmp	r2, #0
 8014414:	d0e7      	beq.n	80143e6 <_dtoa_r+0x6a>
 8014416:	4a9f      	ldr	r2, [pc, #636]	; (8014694 <_dtoa_r+0x318>)
 8014418:	9924      	ldr	r1, [sp, #144]	; 0x90
 801441a:	600a      	str	r2, [r1, #0]
 801441c:	e7e3      	b.n	80143e6 <_dtoa_r+0x6a>
 801441e:	ab18      	add	r3, sp, #96	; 0x60
 8014420:	9301      	str	r3, [sp, #4]
 8014422:	ab19      	add	r3, sp, #100	; 0x64
 8014424:	9300      	str	r3, [sp, #0]
 8014426:	0032      	movs	r2, r6
 8014428:	003b      	movs	r3, r7
 801442a:	9802      	ldr	r0, [sp, #8]
 801442c:	f001 fd0e 	bl	8015e4c <__d2b>
 8014430:	0063      	lsls	r3, r4, #1
 8014432:	9003      	str	r0, [sp, #12]
 8014434:	0d5b      	lsrs	r3, r3, #21
 8014436:	d074      	beq.n	8014522 <_dtoa_r+0x1a6>
 8014438:	033a      	lsls	r2, r7, #12
 801443a:	4c97      	ldr	r4, [pc, #604]	; (8014698 <_dtoa_r+0x31c>)
 801443c:	0b12      	lsrs	r2, r2, #12
 801443e:	4314      	orrs	r4, r2
 8014440:	0021      	movs	r1, r4
 8014442:	4a96      	ldr	r2, [pc, #600]	; (801469c <_dtoa_r+0x320>)
 8014444:	0030      	movs	r0, r6
 8014446:	9516      	str	r5, [sp, #88]	; 0x58
 8014448:	189e      	adds	r6, r3, r2
 801444a:	2200      	movs	r2, #0
 801444c:	4b94      	ldr	r3, [pc, #592]	; (80146a0 <_dtoa_r+0x324>)
 801444e:	f7ed fbf5 	bl	8001c3c <__aeabi_dsub>
 8014452:	4a94      	ldr	r2, [pc, #592]	; (80146a4 <_dtoa_r+0x328>)
 8014454:	4b94      	ldr	r3, [pc, #592]	; (80146a8 <_dtoa_r+0x32c>)
 8014456:	f7ed f97f 	bl	8001758 <__aeabi_dmul>
 801445a:	4a94      	ldr	r2, [pc, #592]	; (80146ac <_dtoa_r+0x330>)
 801445c:	4b94      	ldr	r3, [pc, #592]	; (80146b0 <_dtoa_r+0x334>)
 801445e:	f7ec fa55 	bl	800090c <__aeabi_dadd>
 8014462:	0004      	movs	r4, r0
 8014464:	0030      	movs	r0, r6
 8014466:	000d      	movs	r5, r1
 8014468:	f7ed ff82 	bl	8002370 <__aeabi_i2d>
 801446c:	4a91      	ldr	r2, [pc, #580]	; (80146b4 <_dtoa_r+0x338>)
 801446e:	4b92      	ldr	r3, [pc, #584]	; (80146b8 <_dtoa_r+0x33c>)
 8014470:	f7ed f972 	bl	8001758 <__aeabi_dmul>
 8014474:	0002      	movs	r2, r0
 8014476:	000b      	movs	r3, r1
 8014478:	0020      	movs	r0, r4
 801447a:	0029      	movs	r1, r5
 801447c:	f7ec fa46 	bl	800090c <__aeabi_dadd>
 8014480:	0004      	movs	r4, r0
 8014482:	000d      	movs	r5, r1
 8014484:	f7ed ff3e 	bl	8002304 <__aeabi_d2iz>
 8014488:	2200      	movs	r2, #0
 801448a:	0007      	movs	r7, r0
 801448c:	2300      	movs	r3, #0
 801448e:	0020      	movs	r0, r4
 8014490:	0029      	movs	r1, r5
 8014492:	f7eb ffe9 	bl	8000468 <__aeabi_dcmplt>
 8014496:	2800      	cmp	r0, #0
 8014498:	d009      	beq.n	80144ae <_dtoa_r+0x132>
 801449a:	0038      	movs	r0, r7
 801449c:	f7ed ff68 	bl	8002370 <__aeabi_i2d>
 80144a0:	002b      	movs	r3, r5
 80144a2:	0022      	movs	r2, r4
 80144a4:	f7eb ffda 	bl	800045c <__aeabi_dcmpeq>
 80144a8:	4243      	negs	r3, r0
 80144aa:	4158      	adcs	r0, r3
 80144ac:	1a3f      	subs	r7, r7, r0
 80144ae:	2301      	movs	r3, #1
 80144b0:	9314      	str	r3, [sp, #80]	; 0x50
 80144b2:	2f16      	cmp	r7, #22
 80144b4:	d80d      	bhi.n	80144d2 <_dtoa_r+0x156>
 80144b6:	4981      	ldr	r1, [pc, #516]	; (80146bc <_dtoa_r+0x340>)
 80144b8:	00fb      	lsls	r3, r7, #3
 80144ba:	18c9      	adds	r1, r1, r3
 80144bc:	6808      	ldr	r0, [r1, #0]
 80144be:	6849      	ldr	r1, [r1, #4]
 80144c0:	9a06      	ldr	r2, [sp, #24]
 80144c2:	9b07      	ldr	r3, [sp, #28]
 80144c4:	f7eb ffe4 	bl	8000490 <__aeabi_dcmpgt>
 80144c8:	2800      	cmp	r0, #0
 80144ca:	d046      	beq.n	801455a <_dtoa_r+0x1de>
 80144cc:	2300      	movs	r3, #0
 80144ce:	3f01      	subs	r7, #1
 80144d0:	9314      	str	r3, [sp, #80]	; 0x50
 80144d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80144d4:	1b9e      	subs	r6, r3, r6
 80144d6:	2300      	movs	r3, #0
 80144d8:	930a      	str	r3, [sp, #40]	; 0x28
 80144da:	0033      	movs	r3, r6
 80144dc:	3b01      	subs	r3, #1
 80144de:	930b      	str	r3, [sp, #44]	; 0x2c
 80144e0:	d504      	bpl.n	80144ec <_dtoa_r+0x170>
 80144e2:	2301      	movs	r3, #1
 80144e4:	1b9b      	subs	r3, r3, r6
 80144e6:	930a      	str	r3, [sp, #40]	; 0x28
 80144e8:	2300      	movs	r3, #0
 80144ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80144ec:	2f00      	cmp	r7, #0
 80144ee:	db36      	blt.n	801455e <_dtoa_r+0x1e2>
 80144f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80144f2:	9711      	str	r7, [sp, #68]	; 0x44
 80144f4:	19db      	adds	r3, r3, r7
 80144f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80144f8:	2300      	movs	r3, #0
 80144fa:	9304      	str	r3, [sp, #16]
 80144fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80144fe:	2401      	movs	r4, #1
 8014500:	2b09      	cmp	r3, #9
 8014502:	d900      	bls.n	8014506 <_dtoa_r+0x18a>
 8014504:	e082      	b.n	801460c <_dtoa_r+0x290>
 8014506:	2b05      	cmp	r3, #5
 8014508:	dd02      	ble.n	8014510 <_dtoa_r+0x194>
 801450a:	2400      	movs	r4, #0
 801450c:	3b04      	subs	r3, #4
 801450e:	9320      	str	r3, [sp, #128]	; 0x80
 8014510:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014512:	1e98      	subs	r0, r3, #2
 8014514:	2803      	cmp	r0, #3
 8014516:	d900      	bls.n	801451a <_dtoa_r+0x19e>
 8014518:	e082      	b.n	8014620 <_dtoa_r+0x2a4>
 801451a:	f7eb fe05 	bl	8000128 <__gnu_thumb1_case_uqi>
 801451e:	7573      	.short	0x7573
 8014520:	6828      	.short	0x6828
 8014522:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014524:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014526:	189e      	adds	r6, r3, r2
 8014528:	4b65      	ldr	r3, [pc, #404]	; (80146c0 <_dtoa_r+0x344>)
 801452a:	18f2      	adds	r2, r6, r3
 801452c:	2a20      	cmp	r2, #32
 801452e:	dd0f      	ble.n	8014550 <_dtoa_r+0x1d4>
 8014530:	2340      	movs	r3, #64	; 0x40
 8014532:	1a9b      	subs	r3, r3, r2
 8014534:	409c      	lsls	r4, r3
 8014536:	4b63      	ldr	r3, [pc, #396]	; (80146c4 <_dtoa_r+0x348>)
 8014538:	9806      	ldr	r0, [sp, #24]
 801453a:	18f3      	adds	r3, r6, r3
 801453c:	40d8      	lsrs	r0, r3
 801453e:	4320      	orrs	r0, r4
 8014540:	f7ed ff50 	bl	80023e4 <__aeabi_ui2d>
 8014544:	2301      	movs	r3, #1
 8014546:	4c60      	ldr	r4, [pc, #384]	; (80146c8 <_dtoa_r+0x34c>)
 8014548:	3e01      	subs	r6, #1
 801454a:	1909      	adds	r1, r1, r4
 801454c:	9316      	str	r3, [sp, #88]	; 0x58
 801454e:	e77c      	b.n	801444a <_dtoa_r+0xce>
 8014550:	2320      	movs	r3, #32
 8014552:	9806      	ldr	r0, [sp, #24]
 8014554:	1a9b      	subs	r3, r3, r2
 8014556:	4098      	lsls	r0, r3
 8014558:	e7f2      	b.n	8014540 <_dtoa_r+0x1c4>
 801455a:	9014      	str	r0, [sp, #80]	; 0x50
 801455c:	e7b9      	b.n	80144d2 <_dtoa_r+0x156>
 801455e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014560:	1bdb      	subs	r3, r3, r7
 8014562:	930a      	str	r3, [sp, #40]	; 0x28
 8014564:	427b      	negs	r3, r7
 8014566:	9304      	str	r3, [sp, #16]
 8014568:	2300      	movs	r3, #0
 801456a:	9311      	str	r3, [sp, #68]	; 0x44
 801456c:	e7c6      	b.n	80144fc <_dtoa_r+0x180>
 801456e:	2301      	movs	r3, #1
 8014570:	930d      	str	r3, [sp, #52]	; 0x34
 8014572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014574:	2b00      	cmp	r3, #0
 8014576:	dd57      	ble.n	8014628 <_dtoa_r+0x2ac>
 8014578:	930c      	str	r3, [sp, #48]	; 0x30
 801457a:	9309      	str	r3, [sp, #36]	; 0x24
 801457c:	2200      	movs	r2, #0
 801457e:	9902      	ldr	r1, [sp, #8]
 8014580:	644a      	str	r2, [r1, #68]	; 0x44
 8014582:	3204      	adds	r2, #4
 8014584:	0010      	movs	r0, r2
 8014586:	9902      	ldr	r1, [sp, #8]
 8014588:	3014      	adds	r0, #20
 801458a:	6c49      	ldr	r1, [r1, #68]	; 0x44
 801458c:	4298      	cmp	r0, r3
 801458e:	d950      	bls.n	8014632 <_dtoa_r+0x2b6>
 8014590:	9802      	ldr	r0, [sp, #8]
 8014592:	f001 f947 	bl	8015824 <_Balloc>
 8014596:	9b02      	ldr	r3, [sp, #8]
 8014598:	9008      	str	r0, [sp, #32]
 801459a:	6418      	str	r0, [r3, #64]	; 0x40
 801459c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801459e:	2b0e      	cmp	r3, #14
 80145a0:	d900      	bls.n	80145a4 <_dtoa_r+0x228>
 80145a2:	e10c      	b.n	80147be <_dtoa_r+0x442>
 80145a4:	2c00      	cmp	r4, #0
 80145a6:	d100      	bne.n	80145aa <_dtoa_r+0x22e>
 80145a8:	e109      	b.n	80147be <_dtoa_r+0x442>
 80145aa:	9b06      	ldr	r3, [sp, #24]
 80145ac:	9c07      	ldr	r4, [sp, #28]
 80145ae:	9312      	str	r3, [sp, #72]	; 0x48
 80145b0:	9413      	str	r4, [sp, #76]	; 0x4c
 80145b2:	2f00      	cmp	r7, #0
 80145b4:	dc00      	bgt.n	80145b8 <_dtoa_r+0x23c>
 80145b6:	e08b      	b.n	80146d0 <_dtoa_r+0x354>
 80145b8:	210f      	movs	r1, #15
 80145ba:	003a      	movs	r2, r7
 80145bc:	4b3f      	ldr	r3, [pc, #252]	; (80146bc <_dtoa_r+0x340>)
 80145be:	400a      	ands	r2, r1
 80145c0:	00d2      	lsls	r2, r2, #3
 80145c2:	189b      	adds	r3, r3, r2
 80145c4:	681d      	ldr	r5, [r3, #0]
 80145c6:	685e      	ldr	r6, [r3, #4]
 80145c8:	2302      	movs	r3, #2
 80145ca:	113c      	asrs	r4, r7, #4
 80145cc:	930e      	str	r3, [sp, #56]	; 0x38
 80145ce:	06e3      	lsls	r3, r4, #27
 80145d0:	d50b      	bpl.n	80145ea <_dtoa_r+0x26e>
 80145d2:	4b3e      	ldr	r3, [pc, #248]	; (80146cc <_dtoa_r+0x350>)
 80145d4:	400c      	ands	r4, r1
 80145d6:	6a1a      	ldr	r2, [r3, #32]
 80145d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145da:	9812      	ldr	r0, [sp, #72]	; 0x48
 80145dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80145de:	f7ec fcb1 	bl	8000f44 <__aeabi_ddiv>
 80145e2:	2303      	movs	r3, #3
 80145e4:	9006      	str	r0, [sp, #24]
 80145e6:	9107      	str	r1, [sp, #28]
 80145e8:	930e      	str	r3, [sp, #56]	; 0x38
 80145ea:	2300      	movs	r3, #0
 80145ec:	e03b      	b.n	8014666 <_dtoa_r+0x2ea>
 80145ee:	2301      	movs	r3, #1
 80145f0:	930d      	str	r3, [sp, #52]	; 0x34
 80145f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145f4:	18fb      	adds	r3, r7, r3
 80145f6:	930c      	str	r3, [sp, #48]	; 0x30
 80145f8:	3301      	adds	r3, #1
 80145fa:	9309      	str	r3, [sp, #36]	; 0x24
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	dcbd      	bgt.n	801457c <_dtoa_r+0x200>
 8014600:	2301      	movs	r3, #1
 8014602:	e7bb      	b.n	801457c <_dtoa_r+0x200>
 8014604:	2300      	movs	r3, #0
 8014606:	e7b3      	b.n	8014570 <_dtoa_r+0x1f4>
 8014608:	2300      	movs	r3, #0
 801460a:	e7f1      	b.n	80145f0 <_dtoa_r+0x274>
 801460c:	2300      	movs	r3, #0
 801460e:	940d      	str	r4, [sp, #52]	; 0x34
 8014610:	9320      	str	r3, [sp, #128]	; 0x80
 8014612:	3b01      	subs	r3, #1
 8014614:	2200      	movs	r2, #0
 8014616:	930c      	str	r3, [sp, #48]	; 0x30
 8014618:	9309      	str	r3, [sp, #36]	; 0x24
 801461a:	3313      	adds	r3, #19
 801461c:	9221      	str	r2, [sp, #132]	; 0x84
 801461e:	e7ad      	b.n	801457c <_dtoa_r+0x200>
 8014620:	2301      	movs	r3, #1
 8014622:	930d      	str	r3, [sp, #52]	; 0x34
 8014624:	3b02      	subs	r3, #2
 8014626:	e7f5      	b.n	8014614 <_dtoa_r+0x298>
 8014628:	2301      	movs	r3, #1
 801462a:	930c      	str	r3, [sp, #48]	; 0x30
 801462c:	9309      	str	r3, [sp, #36]	; 0x24
 801462e:	001a      	movs	r2, r3
 8014630:	e7f4      	b.n	801461c <_dtoa_r+0x2a0>
 8014632:	9802      	ldr	r0, [sp, #8]
 8014634:	3101      	adds	r1, #1
 8014636:	6441      	str	r1, [r0, #68]	; 0x44
 8014638:	0052      	lsls	r2, r2, #1
 801463a:	e7a3      	b.n	8014584 <_dtoa_r+0x208>
 801463c:	2301      	movs	r3, #1
 801463e:	421c      	tst	r4, r3
 8014640:	d00e      	beq.n	8014660 <_dtoa_r+0x2e4>
 8014642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014644:	4a21      	ldr	r2, [pc, #132]	; (80146cc <_dtoa_r+0x350>)
 8014646:	3301      	adds	r3, #1
 8014648:	930e      	str	r3, [sp, #56]	; 0x38
 801464a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801464c:	0028      	movs	r0, r5
 801464e:	00db      	lsls	r3, r3, #3
 8014650:	189b      	adds	r3, r3, r2
 8014652:	0031      	movs	r1, r6
 8014654:	681a      	ldr	r2, [r3, #0]
 8014656:	685b      	ldr	r3, [r3, #4]
 8014658:	f7ed f87e 	bl	8001758 <__aeabi_dmul>
 801465c:	0005      	movs	r5, r0
 801465e:	000e      	movs	r6, r1
 8014660:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014662:	1064      	asrs	r4, r4, #1
 8014664:	3301      	adds	r3, #1
 8014666:	9310      	str	r3, [sp, #64]	; 0x40
 8014668:	2c00      	cmp	r4, #0
 801466a:	d1e7      	bne.n	801463c <_dtoa_r+0x2c0>
 801466c:	9806      	ldr	r0, [sp, #24]
 801466e:	9907      	ldr	r1, [sp, #28]
 8014670:	002a      	movs	r2, r5
 8014672:	0033      	movs	r3, r6
 8014674:	f7ec fc66 	bl	8000f44 <__aeabi_ddiv>
 8014678:	9006      	str	r0, [sp, #24]
 801467a:	9107      	str	r1, [sp, #28]
 801467c:	e043      	b.n	8014706 <_dtoa_r+0x38a>
 801467e:	46c0      	nop			; (mov r8, r8)
 8014680:	7ff00000 	.word	0x7ff00000
 8014684:	0000270f 	.word	0x0000270f
 8014688:	08018f6e 	.word	0x08018f6e
 801468c:	08018f71 	.word	0x08018f71
 8014690:	08018e42 	.word	0x08018e42
 8014694:	08018e43 	.word	0x08018e43
 8014698:	3ff00000 	.word	0x3ff00000
 801469c:	fffffc01 	.word	0xfffffc01
 80146a0:	3ff80000 	.word	0x3ff80000
 80146a4:	636f4361 	.word	0x636f4361
 80146a8:	3fd287a7 	.word	0x3fd287a7
 80146ac:	8b60c8b3 	.word	0x8b60c8b3
 80146b0:	3fc68a28 	.word	0x3fc68a28
 80146b4:	509f79fb 	.word	0x509f79fb
 80146b8:	3fd34413 	.word	0x3fd34413
 80146bc:	08018fa0 	.word	0x08018fa0
 80146c0:	00000432 	.word	0x00000432
 80146c4:	00000412 	.word	0x00000412
 80146c8:	fe100000 	.word	0xfe100000
 80146cc:	08018f78 	.word	0x08018f78
 80146d0:	2302      	movs	r3, #2
 80146d2:	930e      	str	r3, [sp, #56]	; 0x38
 80146d4:	2f00      	cmp	r7, #0
 80146d6:	d016      	beq.n	8014706 <_dtoa_r+0x38a>
 80146d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80146da:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80146dc:	427c      	negs	r4, r7
 80146de:	330d      	adds	r3, #13
 80146e0:	4023      	ands	r3, r4
 80146e2:	4acf      	ldr	r2, [pc, #828]	; (8014a20 <_dtoa_r+0x6a4>)
 80146e4:	00db      	lsls	r3, r3, #3
 80146e6:	18d3      	adds	r3, r2, r3
 80146e8:	681a      	ldr	r2, [r3, #0]
 80146ea:	685b      	ldr	r3, [r3, #4]
 80146ec:	f7ed f834 	bl	8001758 <__aeabi_dmul>
 80146f0:	2300      	movs	r3, #0
 80146f2:	2601      	movs	r6, #1
 80146f4:	001d      	movs	r5, r3
 80146f6:	9006      	str	r0, [sp, #24]
 80146f8:	9107      	str	r1, [sp, #28]
 80146fa:	1124      	asrs	r4, r4, #4
 80146fc:	2c00      	cmp	r4, #0
 80146fe:	d000      	beq.n	8014702 <_dtoa_r+0x386>
 8014700:	e08c      	b.n	801481c <_dtoa_r+0x4a0>
 8014702:	2b00      	cmp	r3, #0
 8014704:	d1b8      	bne.n	8014678 <_dtoa_r+0x2fc>
 8014706:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014708:	2b00      	cmp	r3, #0
 801470a:	d100      	bne.n	801470e <_dtoa_r+0x392>
 801470c:	e096      	b.n	801483c <_dtoa_r+0x4c0>
 801470e:	9c06      	ldr	r4, [sp, #24]
 8014710:	9d07      	ldr	r5, [sp, #28]
 8014712:	2200      	movs	r2, #0
 8014714:	4bc3      	ldr	r3, [pc, #780]	; (8014a24 <_dtoa_r+0x6a8>)
 8014716:	0020      	movs	r0, r4
 8014718:	0029      	movs	r1, r5
 801471a:	f7eb fea5 	bl	8000468 <__aeabi_dcmplt>
 801471e:	2800      	cmp	r0, #0
 8014720:	d100      	bne.n	8014724 <_dtoa_r+0x3a8>
 8014722:	e08b      	b.n	801483c <_dtoa_r+0x4c0>
 8014724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014726:	2b00      	cmp	r3, #0
 8014728:	d100      	bne.n	801472c <_dtoa_r+0x3b0>
 801472a:	e087      	b.n	801483c <_dtoa_r+0x4c0>
 801472c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801472e:	2b00      	cmp	r3, #0
 8014730:	dd41      	ble.n	80147b6 <_dtoa_r+0x43a>
 8014732:	4bbd      	ldr	r3, [pc, #756]	; (8014a28 <_dtoa_r+0x6ac>)
 8014734:	2200      	movs	r2, #0
 8014736:	0020      	movs	r0, r4
 8014738:	0029      	movs	r1, r5
 801473a:	f7ed f80d 	bl	8001758 <__aeabi_dmul>
 801473e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014740:	9006      	str	r0, [sp, #24]
 8014742:	9107      	str	r1, [sp, #28]
 8014744:	3301      	adds	r3, #1
 8014746:	930e      	str	r3, [sp, #56]	; 0x38
 8014748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801474a:	1e7e      	subs	r6, r7, #1
 801474c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801474e:	9310      	str	r3, [sp, #64]	; 0x40
 8014750:	f7ed fe0e 	bl	8002370 <__aeabi_i2d>
 8014754:	9a06      	ldr	r2, [sp, #24]
 8014756:	9b07      	ldr	r3, [sp, #28]
 8014758:	f7ec fffe 	bl	8001758 <__aeabi_dmul>
 801475c:	2200      	movs	r2, #0
 801475e:	4bb3      	ldr	r3, [pc, #716]	; (8014a2c <_dtoa_r+0x6b0>)
 8014760:	f7ec f8d4 	bl	800090c <__aeabi_dadd>
 8014764:	4ab2      	ldr	r2, [pc, #712]	; (8014a30 <_dtoa_r+0x6b4>)
 8014766:	900e      	str	r0, [sp, #56]	; 0x38
 8014768:	910f      	str	r1, [sp, #60]	; 0x3c
 801476a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801476c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801476e:	4694      	mov	ip, r2
 8014770:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014772:	4463      	add	r3, ip
 8014774:	9315      	str	r3, [sp, #84]	; 0x54
 8014776:	001d      	movs	r5, r3
 8014778:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801477a:	2b00      	cmp	r3, #0
 801477c:	d161      	bne.n	8014842 <_dtoa_r+0x4c6>
 801477e:	9806      	ldr	r0, [sp, #24]
 8014780:	9907      	ldr	r1, [sp, #28]
 8014782:	2200      	movs	r2, #0
 8014784:	4bab      	ldr	r3, [pc, #684]	; (8014a34 <_dtoa_r+0x6b8>)
 8014786:	f7ed fa59 	bl	8001c3c <__aeabi_dsub>
 801478a:	0022      	movs	r2, r4
 801478c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801478e:	9006      	str	r0, [sp, #24]
 8014790:	9107      	str	r1, [sp, #28]
 8014792:	f7eb fe7d 	bl	8000490 <__aeabi_dcmpgt>
 8014796:	2800      	cmp	r0, #0
 8014798:	d000      	beq.n	801479c <_dtoa_r+0x420>
 801479a:	e2aa      	b.n	8014cf2 <_dtoa_r+0x976>
 801479c:	48a6      	ldr	r0, [pc, #664]	; (8014a38 <_dtoa_r+0x6bc>)
 801479e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80147a0:	4684      	mov	ip, r0
 80147a2:	4461      	add	r1, ip
 80147a4:	000b      	movs	r3, r1
 80147a6:	9806      	ldr	r0, [sp, #24]
 80147a8:	9907      	ldr	r1, [sp, #28]
 80147aa:	0022      	movs	r2, r4
 80147ac:	f7eb fe5c 	bl	8000468 <__aeabi_dcmplt>
 80147b0:	2800      	cmp	r0, #0
 80147b2:	d000      	beq.n	80147b6 <_dtoa_r+0x43a>
 80147b4:	e297      	b.n	8014ce6 <_dtoa_r+0x96a>
 80147b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80147b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80147ba:	9306      	str	r3, [sp, #24]
 80147bc:	9407      	str	r4, [sp, #28]
 80147be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	da00      	bge.n	80147c6 <_dtoa_r+0x44a>
 80147c4:	e15e      	b.n	8014a84 <_dtoa_r+0x708>
 80147c6:	2f0e      	cmp	r7, #14
 80147c8:	dd00      	ble.n	80147cc <_dtoa_r+0x450>
 80147ca:	e15b      	b.n	8014a84 <_dtoa_r+0x708>
 80147cc:	4b94      	ldr	r3, [pc, #592]	; (8014a20 <_dtoa_r+0x6a4>)
 80147ce:	00fa      	lsls	r2, r7, #3
 80147d0:	189b      	adds	r3, r3, r2
 80147d2:	685c      	ldr	r4, [r3, #4]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	9304      	str	r3, [sp, #16]
 80147d8:	9405      	str	r4, [sp, #20]
 80147da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147dc:	2b00      	cmp	r3, #0
 80147de:	db00      	blt.n	80147e2 <_dtoa_r+0x466>
 80147e0:	e0da      	b.n	8014998 <_dtoa_r+0x61c>
 80147e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	dd00      	ble.n	80147ea <_dtoa_r+0x46e>
 80147e8:	e0d6      	b.n	8014998 <_dtoa_r+0x61c>
 80147ea:	d000      	beq.n	80147ee <_dtoa_r+0x472>
 80147ec:	e27f      	b.n	8014cee <_dtoa_r+0x972>
 80147ee:	9804      	ldr	r0, [sp, #16]
 80147f0:	9905      	ldr	r1, [sp, #20]
 80147f2:	2200      	movs	r2, #0
 80147f4:	4b8f      	ldr	r3, [pc, #572]	; (8014a34 <_dtoa_r+0x6b8>)
 80147f6:	f7ec ffaf 	bl	8001758 <__aeabi_dmul>
 80147fa:	9a06      	ldr	r2, [sp, #24]
 80147fc:	9b07      	ldr	r3, [sp, #28]
 80147fe:	f7eb fe51 	bl	80004a4 <__aeabi_dcmpge>
 8014802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014804:	9304      	str	r3, [sp, #16]
 8014806:	001e      	movs	r6, r3
 8014808:	2800      	cmp	r0, #0
 801480a:	d000      	beq.n	801480e <_dtoa_r+0x492>
 801480c:	e251      	b.n	8014cb2 <_dtoa_r+0x936>
 801480e:	9b08      	ldr	r3, [sp, #32]
 8014810:	9a08      	ldr	r2, [sp, #32]
 8014812:	1c5d      	adds	r5, r3, #1
 8014814:	2331      	movs	r3, #49	; 0x31
 8014816:	3701      	adds	r7, #1
 8014818:	7013      	strb	r3, [r2, #0]
 801481a:	e24d      	b.n	8014cb8 <_dtoa_r+0x93c>
 801481c:	4234      	tst	r4, r6
 801481e:	d00a      	beq.n	8014836 <_dtoa_r+0x4ba>
 8014820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014822:	4a86      	ldr	r2, [pc, #536]	; (8014a3c <_dtoa_r+0x6c0>)
 8014824:	3301      	adds	r3, #1
 8014826:	930e      	str	r3, [sp, #56]	; 0x38
 8014828:	00eb      	lsls	r3, r5, #3
 801482a:	189b      	adds	r3, r3, r2
 801482c:	681a      	ldr	r2, [r3, #0]
 801482e:	685b      	ldr	r3, [r3, #4]
 8014830:	f7ec ff92 	bl	8001758 <__aeabi_dmul>
 8014834:	0033      	movs	r3, r6
 8014836:	1064      	asrs	r4, r4, #1
 8014838:	3501      	adds	r5, #1
 801483a:	e75f      	b.n	80146fc <_dtoa_r+0x380>
 801483c:	003e      	movs	r6, r7
 801483e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014840:	e784      	b.n	801474c <_dtoa_r+0x3d0>
 8014842:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014844:	1e5a      	subs	r2, r3, #1
 8014846:	4b76      	ldr	r3, [pc, #472]	; (8014a20 <_dtoa_r+0x6a4>)
 8014848:	00d2      	lsls	r2, r2, #3
 801484a:	189b      	adds	r3, r3, r2
 801484c:	6818      	ldr	r0, [r3, #0]
 801484e:	6859      	ldr	r1, [r3, #4]
 8014850:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014852:	2b00      	cmp	r3, #0
 8014854:	d04b      	beq.n	80148ee <_dtoa_r+0x572>
 8014856:	0002      	movs	r2, r0
 8014858:	000b      	movs	r3, r1
 801485a:	2000      	movs	r0, #0
 801485c:	4978      	ldr	r1, [pc, #480]	; (8014a40 <_dtoa_r+0x6c4>)
 801485e:	f7ec fb71 	bl	8000f44 <__aeabi_ddiv>
 8014862:	002b      	movs	r3, r5
 8014864:	0022      	movs	r2, r4
 8014866:	f7ed f9e9 	bl	8001c3c <__aeabi_dsub>
 801486a:	9b08      	ldr	r3, [sp, #32]
 801486c:	900e      	str	r0, [sp, #56]	; 0x38
 801486e:	910f      	str	r1, [sp, #60]	; 0x3c
 8014870:	9315      	str	r3, [sp, #84]	; 0x54
 8014872:	9806      	ldr	r0, [sp, #24]
 8014874:	9907      	ldr	r1, [sp, #28]
 8014876:	f7ed fd45 	bl	8002304 <__aeabi_d2iz>
 801487a:	0004      	movs	r4, r0
 801487c:	f7ed fd78 	bl	8002370 <__aeabi_i2d>
 8014880:	0002      	movs	r2, r0
 8014882:	000b      	movs	r3, r1
 8014884:	9806      	ldr	r0, [sp, #24]
 8014886:	9907      	ldr	r1, [sp, #28]
 8014888:	f7ed f9d8 	bl	8001c3c <__aeabi_dsub>
 801488c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801488e:	3430      	adds	r4, #48	; 0x30
 8014890:	1c5d      	adds	r5, r3, #1
 8014892:	701c      	strb	r4, [r3, #0]
 8014894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014896:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014898:	9006      	str	r0, [sp, #24]
 801489a:	9107      	str	r1, [sp, #28]
 801489c:	f7eb fde4 	bl	8000468 <__aeabi_dcmplt>
 80148a0:	2800      	cmp	r0, #0
 80148a2:	d16c      	bne.n	801497e <_dtoa_r+0x602>
 80148a4:	9a06      	ldr	r2, [sp, #24]
 80148a6:	9b07      	ldr	r3, [sp, #28]
 80148a8:	2000      	movs	r0, #0
 80148aa:	495e      	ldr	r1, [pc, #376]	; (8014a24 <_dtoa_r+0x6a8>)
 80148ac:	f7ed f9c6 	bl	8001c3c <__aeabi_dsub>
 80148b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80148b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148b4:	f7eb fdd8 	bl	8000468 <__aeabi_dcmplt>
 80148b8:	2800      	cmp	r0, #0
 80148ba:	d000      	beq.n	80148be <_dtoa_r+0x542>
 80148bc:	e0c3      	b.n	8014a46 <_dtoa_r+0x6ca>
 80148be:	9b08      	ldr	r3, [sp, #32]
 80148c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80148c2:	1aeb      	subs	r3, r5, r3
 80148c4:	429a      	cmp	r2, r3
 80148c6:	dc00      	bgt.n	80148ca <_dtoa_r+0x54e>
 80148c8:	e775      	b.n	80147b6 <_dtoa_r+0x43a>
 80148ca:	980e      	ldr	r0, [sp, #56]	; 0x38
 80148cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80148ce:	2200      	movs	r2, #0
 80148d0:	4b55      	ldr	r3, [pc, #340]	; (8014a28 <_dtoa_r+0x6ac>)
 80148d2:	f7ec ff41 	bl	8001758 <__aeabi_dmul>
 80148d6:	2200      	movs	r2, #0
 80148d8:	900e      	str	r0, [sp, #56]	; 0x38
 80148da:	910f      	str	r1, [sp, #60]	; 0x3c
 80148dc:	9806      	ldr	r0, [sp, #24]
 80148de:	9907      	ldr	r1, [sp, #28]
 80148e0:	4b51      	ldr	r3, [pc, #324]	; (8014a28 <_dtoa_r+0x6ac>)
 80148e2:	f7ec ff39 	bl	8001758 <__aeabi_dmul>
 80148e6:	9515      	str	r5, [sp, #84]	; 0x54
 80148e8:	9006      	str	r0, [sp, #24]
 80148ea:	9107      	str	r1, [sp, #28]
 80148ec:	e7c1      	b.n	8014872 <_dtoa_r+0x4f6>
 80148ee:	0022      	movs	r2, r4
 80148f0:	002b      	movs	r3, r5
 80148f2:	f7ec ff31 	bl	8001758 <__aeabi_dmul>
 80148f6:	9c08      	ldr	r4, [sp, #32]
 80148f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80148fa:	0023      	movs	r3, r4
 80148fc:	4694      	mov	ip, r2
 80148fe:	900e      	str	r0, [sp, #56]	; 0x38
 8014900:	910f      	str	r1, [sp, #60]	; 0x3c
 8014902:	4463      	add	r3, ip
 8014904:	9315      	str	r3, [sp, #84]	; 0x54
 8014906:	9806      	ldr	r0, [sp, #24]
 8014908:	9907      	ldr	r1, [sp, #28]
 801490a:	f7ed fcfb 	bl	8002304 <__aeabi_d2iz>
 801490e:	0005      	movs	r5, r0
 8014910:	f7ed fd2e 	bl	8002370 <__aeabi_i2d>
 8014914:	000b      	movs	r3, r1
 8014916:	0002      	movs	r2, r0
 8014918:	9806      	ldr	r0, [sp, #24]
 801491a:	9907      	ldr	r1, [sp, #28]
 801491c:	f7ed f98e 	bl	8001c3c <__aeabi_dsub>
 8014920:	3530      	adds	r5, #48	; 0x30
 8014922:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014924:	7025      	strb	r5, [r4, #0]
 8014926:	3401      	adds	r4, #1
 8014928:	9006      	str	r0, [sp, #24]
 801492a:	9107      	str	r1, [sp, #28]
 801492c:	42a3      	cmp	r3, r4
 801492e:	d12a      	bne.n	8014986 <_dtoa_r+0x60a>
 8014930:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014932:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014934:	9a08      	ldr	r2, [sp, #32]
 8014936:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014938:	4694      	mov	ip, r2
 801493a:	4463      	add	r3, ip
 801493c:	2200      	movs	r2, #0
 801493e:	001d      	movs	r5, r3
 8014940:	4b3f      	ldr	r3, [pc, #252]	; (8014a40 <_dtoa_r+0x6c4>)
 8014942:	f7eb ffe3 	bl	800090c <__aeabi_dadd>
 8014946:	0002      	movs	r2, r0
 8014948:	000b      	movs	r3, r1
 801494a:	9806      	ldr	r0, [sp, #24]
 801494c:	9907      	ldr	r1, [sp, #28]
 801494e:	f7eb fd9f 	bl	8000490 <__aeabi_dcmpgt>
 8014952:	2800      	cmp	r0, #0
 8014954:	d000      	beq.n	8014958 <_dtoa_r+0x5dc>
 8014956:	e076      	b.n	8014a46 <_dtoa_r+0x6ca>
 8014958:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801495a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801495c:	2000      	movs	r0, #0
 801495e:	4938      	ldr	r1, [pc, #224]	; (8014a40 <_dtoa_r+0x6c4>)
 8014960:	f7ed f96c 	bl	8001c3c <__aeabi_dsub>
 8014964:	0002      	movs	r2, r0
 8014966:	000b      	movs	r3, r1
 8014968:	9806      	ldr	r0, [sp, #24]
 801496a:	9907      	ldr	r1, [sp, #28]
 801496c:	f7eb fd7c 	bl	8000468 <__aeabi_dcmplt>
 8014970:	2800      	cmp	r0, #0
 8014972:	d100      	bne.n	8014976 <_dtoa_r+0x5fa>
 8014974:	e71f      	b.n	80147b6 <_dtoa_r+0x43a>
 8014976:	1e6b      	subs	r3, r5, #1
 8014978:	781a      	ldrb	r2, [r3, #0]
 801497a:	2a30      	cmp	r2, #48	; 0x30
 801497c:	d001      	beq.n	8014982 <_dtoa_r+0x606>
 801497e:	0037      	movs	r7, r6
 8014980:	e03f      	b.n	8014a02 <_dtoa_r+0x686>
 8014982:	001d      	movs	r5, r3
 8014984:	e7f7      	b.n	8014976 <_dtoa_r+0x5fa>
 8014986:	9806      	ldr	r0, [sp, #24]
 8014988:	9907      	ldr	r1, [sp, #28]
 801498a:	2200      	movs	r2, #0
 801498c:	4b26      	ldr	r3, [pc, #152]	; (8014a28 <_dtoa_r+0x6ac>)
 801498e:	f7ec fee3 	bl	8001758 <__aeabi_dmul>
 8014992:	9006      	str	r0, [sp, #24]
 8014994:	9107      	str	r1, [sp, #28]
 8014996:	e7b6      	b.n	8014906 <_dtoa_r+0x58a>
 8014998:	9e08      	ldr	r6, [sp, #32]
 801499a:	9a04      	ldr	r2, [sp, #16]
 801499c:	9b05      	ldr	r3, [sp, #20]
 801499e:	9806      	ldr	r0, [sp, #24]
 80149a0:	9907      	ldr	r1, [sp, #28]
 80149a2:	f7ec facf 	bl	8000f44 <__aeabi_ddiv>
 80149a6:	f7ed fcad 	bl	8002304 <__aeabi_d2iz>
 80149aa:	0004      	movs	r4, r0
 80149ac:	f7ed fce0 	bl	8002370 <__aeabi_i2d>
 80149b0:	9a04      	ldr	r2, [sp, #16]
 80149b2:	9b05      	ldr	r3, [sp, #20]
 80149b4:	f7ec fed0 	bl	8001758 <__aeabi_dmul>
 80149b8:	0002      	movs	r2, r0
 80149ba:	000b      	movs	r3, r1
 80149bc:	9806      	ldr	r0, [sp, #24]
 80149be:	9907      	ldr	r1, [sp, #28]
 80149c0:	f7ed f93c 	bl	8001c3c <__aeabi_dsub>
 80149c4:	0023      	movs	r3, r4
 80149c6:	3330      	adds	r3, #48	; 0x30
 80149c8:	7033      	strb	r3, [r6, #0]
 80149ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80149cc:	9b08      	ldr	r3, [sp, #32]
 80149ce:	1c75      	adds	r5, r6, #1
 80149d0:	1aeb      	subs	r3, r5, r3
 80149d2:	429a      	cmp	r2, r3
 80149d4:	d148      	bne.n	8014a68 <_dtoa_r+0x6ec>
 80149d6:	0002      	movs	r2, r0
 80149d8:	000b      	movs	r3, r1
 80149da:	f7eb ff97 	bl	800090c <__aeabi_dadd>
 80149de:	9a04      	ldr	r2, [sp, #16]
 80149e0:	9b05      	ldr	r3, [sp, #20]
 80149e2:	9006      	str	r0, [sp, #24]
 80149e4:	9107      	str	r1, [sp, #28]
 80149e6:	f7eb fd53 	bl	8000490 <__aeabi_dcmpgt>
 80149ea:	2800      	cmp	r0, #0
 80149ec:	d12a      	bne.n	8014a44 <_dtoa_r+0x6c8>
 80149ee:	9a04      	ldr	r2, [sp, #16]
 80149f0:	9b05      	ldr	r3, [sp, #20]
 80149f2:	9806      	ldr	r0, [sp, #24]
 80149f4:	9907      	ldr	r1, [sp, #28]
 80149f6:	f7eb fd31 	bl	800045c <__aeabi_dcmpeq>
 80149fa:	2800      	cmp	r0, #0
 80149fc:	d001      	beq.n	8014a02 <_dtoa_r+0x686>
 80149fe:	07e3      	lsls	r3, r4, #31
 8014a00:	d420      	bmi.n	8014a44 <_dtoa_r+0x6c8>
 8014a02:	9903      	ldr	r1, [sp, #12]
 8014a04:	9802      	ldr	r0, [sp, #8]
 8014a06:	f000 ff35 	bl	8015874 <_Bfree>
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	702b      	strb	r3, [r5, #0]
 8014a0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014a10:	3701      	adds	r7, #1
 8014a12:	601f      	str	r7, [r3, #0]
 8014a14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d100      	bne.n	8014a1c <_dtoa_r+0x6a0>
 8014a1a:	e4e4      	b.n	80143e6 <_dtoa_r+0x6a>
 8014a1c:	601d      	str	r5, [r3, #0]
 8014a1e:	e4e2      	b.n	80143e6 <_dtoa_r+0x6a>
 8014a20:	08018fa0 	.word	0x08018fa0
 8014a24:	3ff00000 	.word	0x3ff00000
 8014a28:	40240000 	.word	0x40240000
 8014a2c:	401c0000 	.word	0x401c0000
 8014a30:	fcc00000 	.word	0xfcc00000
 8014a34:	40140000 	.word	0x40140000
 8014a38:	7cc00000 	.word	0x7cc00000
 8014a3c:	08018f78 	.word	0x08018f78
 8014a40:	3fe00000 	.word	0x3fe00000
 8014a44:	003e      	movs	r6, r7
 8014a46:	1e6b      	subs	r3, r5, #1
 8014a48:	781a      	ldrb	r2, [r3, #0]
 8014a4a:	2a39      	cmp	r2, #57	; 0x39
 8014a4c:	d106      	bne.n	8014a5c <_dtoa_r+0x6e0>
 8014a4e:	9a08      	ldr	r2, [sp, #32]
 8014a50:	429a      	cmp	r2, r3
 8014a52:	d107      	bne.n	8014a64 <_dtoa_r+0x6e8>
 8014a54:	2330      	movs	r3, #48	; 0x30
 8014a56:	7013      	strb	r3, [r2, #0]
 8014a58:	0013      	movs	r3, r2
 8014a5a:	3601      	adds	r6, #1
 8014a5c:	781a      	ldrb	r2, [r3, #0]
 8014a5e:	3201      	adds	r2, #1
 8014a60:	701a      	strb	r2, [r3, #0]
 8014a62:	e78c      	b.n	801497e <_dtoa_r+0x602>
 8014a64:	001d      	movs	r5, r3
 8014a66:	e7ee      	b.n	8014a46 <_dtoa_r+0x6ca>
 8014a68:	2200      	movs	r2, #0
 8014a6a:	4ba4      	ldr	r3, [pc, #656]	; (8014cfc <_dtoa_r+0x980>)
 8014a6c:	f7ec fe74 	bl	8001758 <__aeabi_dmul>
 8014a70:	2200      	movs	r2, #0
 8014a72:	2300      	movs	r3, #0
 8014a74:	9006      	str	r0, [sp, #24]
 8014a76:	9107      	str	r1, [sp, #28]
 8014a78:	002e      	movs	r6, r5
 8014a7a:	f7eb fcef 	bl	800045c <__aeabi_dcmpeq>
 8014a7e:	2800      	cmp	r0, #0
 8014a80:	d08b      	beq.n	801499a <_dtoa_r+0x61e>
 8014a82:	e7be      	b.n	8014a02 <_dtoa_r+0x686>
 8014a84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014a86:	2a00      	cmp	r2, #0
 8014a88:	d100      	bne.n	8014a8c <_dtoa_r+0x710>
 8014a8a:	e0da      	b.n	8014c42 <_dtoa_r+0x8c6>
 8014a8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014a8e:	2a01      	cmp	r2, #1
 8014a90:	dd00      	ble.n	8014a94 <_dtoa_r+0x718>
 8014a92:	e0bd      	b.n	8014c10 <_dtoa_r+0x894>
 8014a94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014a96:	2a00      	cmp	r2, #0
 8014a98:	d100      	bne.n	8014a9c <_dtoa_r+0x720>
 8014a9a:	e0b5      	b.n	8014c08 <_dtoa_r+0x88c>
 8014a9c:	4a98      	ldr	r2, [pc, #608]	; (8014d00 <_dtoa_r+0x984>)
 8014a9e:	189b      	adds	r3, r3, r2
 8014aa0:	9d04      	ldr	r5, [sp, #16]
 8014aa2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014aa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014aa6:	2101      	movs	r1, #1
 8014aa8:	18d2      	adds	r2, r2, r3
 8014aaa:	920a      	str	r2, [sp, #40]	; 0x28
 8014aac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014aae:	9802      	ldr	r0, [sp, #8]
 8014ab0:	18d3      	adds	r3, r2, r3
 8014ab2:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ab4:	f000 ffad 	bl	8015a12 <__i2b>
 8014ab8:	0006      	movs	r6, r0
 8014aba:	2c00      	cmp	r4, #0
 8014abc:	dd0e      	ble.n	8014adc <_dtoa_r+0x760>
 8014abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	dd0b      	ble.n	8014adc <_dtoa_r+0x760>
 8014ac4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014ac6:	0023      	movs	r3, r4
 8014ac8:	4294      	cmp	r4, r2
 8014aca:	dd00      	ble.n	8014ace <_dtoa_r+0x752>
 8014acc:	0013      	movs	r3, r2
 8014ace:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014ad0:	1ae4      	subs	r4, r4, r3
 8014ad2:	1ad2      	subs	r2, r2, r3
 8014ad4:	920a      	str	r2, [sp, #40]	; 0x28
 8014ad6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014ad8:	1ad3      	subs	r3, r2, r3
 8014ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8014adc:	9b04      	ldr	r3, [sp, #16]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d01f      	beq.n	8014b22 <_dtoa_r+0x7a6>
 8014ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d100      	bne.n	8014aea <_dtoa_r+0x76e>
 8014ae8:	e0af      	b.n	8014c4a <_dtoa_r+0x8ce>
 8014aea:	2d00      	cmp	r5, #0
 8014aec:	d011      	beq.n	8014b12 <_dtoa_r+0x796>
 8014aee:	0031      	movs	r1, r6
 8014af0:	002a      	movs	r2, r5
 8014af2:	9802      	ldr	r0, [sp, #8]
 8014af4:	f001 f826 	bl	8015b44 <__pow5mult>
 8014af8:	9a03      	ldr	r2, [sp, #12]
 8014afa:	0001      	movs	r1, r0
 8014afc:	0006      	movs	r6, r0
 8014afe:	9802      	ldr	r0, [sp, #8]
 8014b00:	f000 ff90 	bl	8015a24 <__multiply>
 8014b04:	9903      	ldr	r1, [sp, #12]
 8014b06:	9010      	str	r0, [sp, #64]	; 0x40
 8014b08:	9802      	ldr	r0, [sp, #8]
 8014b0a:	f000 feb3 	bl	8015874 <_Bfree>
 8014b0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014b10:	9303      	str	r3, [sp, #12]
 8014b12:	9b04      	ldr	r3, [sp, #16]
 8014b14:	1b5a      	subs	r2, r3, r5
 8014b16:	d004      	beq.n	8014b22 <_dtoa_r+0x7a6>
 8014b18:	9903      	ldr	r1, [sp, #12]
 8014b1a:	9802      	ldr	r0, [sp, #8]
 8014b1c:	f001 f812 	bl	8015b44 <__pow5mult>
 8014b20:	9003      	str	r0, [sp, #12]
 8014b22:	2101      	movs	r1, #1
 8014b24:	9802      	ldr	r0, [sp, #8]
 8014b26:	f000 ff74 	bl	8015a12 <__i2b>
 8014b2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014b2c:	9004      	str	r0, [sp, #16]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d100      	bne.n	8014b34 <_dtoa_r+0x7b8>
 8014b32:	e1e3      	b.n	8014efc <_dtoa_r+0xb80>
 8014b34:	001a      	movs	r2, r3
 8014b36:	0001      	movs	r1, r0
 8014b38:	9802      	ldr	r0, [sp, #8]
 8014b3a:	f001 f803 	bl	8015b44 <__pow5mult>
 8014b3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014b40:	9004      	str	r0, [sp, #16]
 8014b42:	2b01      	cmp	r3, #1
 8014b44:	dd00      	ble.n	8014b48 <_dtoa_r+0x7cc>
 8014b46:	e082      	b.n	8014c4e <_dtoa_r+0x8d2>
 8014b48:	2500      	movs	r5, #0
 8014b4a:	9b06      	ldr	r3, [sp, #24]
 8014b4c:	42ab      	cmp	r3, r5
 8014b4e:	d10e      	bne.n	8014b6e <_dtoa_r+0x7f2>
 8014b50:	9b07      	ldr	r3, [sp, #28]
 8014b52:	031b      	lsls	r3, r3, #12
 8014b54:	42ab      	cmp	r3, r5
 8014b56:	d10a      	bne.n	8014b6e <_dtoa_r+0x7f2>
 8014b58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014b5a:	9a07      	ldr	r2, [sp, #28]
 8014b5c:	4213      	tst	r3, r2
 8014b5e:	d006      	beq.n	8014b6e <_dtoa_r+0x7f2>
 8014b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b62:	3501      	adds	r5, #1
 8014b64:	3301      	adds	r3, #1
 8014b66:	930a      	str	r3, [sp, #40]	; 0x28
 8014b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b6a:	3301      	adds	r3, #1
 8014b6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014b70:	2001      	movs	r0, #1
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d16c      	bne.n	8014c50 <_dtoa_r+0x8d4>
 8014b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b78:	1818      	adds	r0, r3, r0
 8014b7a:	231f      	movs	r3, #31
 8014b7c:	4018      	ands	r0, r3
 8014b7e:	d07e      	beq.n	8014c7e <_dtoa_r+0x902>
 8014b80:	3301      	adds	r3, #1
 8014b82:	1a1b      	subs	r3, r3, r0
 8014b84:	2b04      	cmp	r3, #4
 8014b86:	dd70      	ble.n	8014c6a <_dtoa_r+0x8ee>
 8014b88:	231c      	movs	r3, #28
 8014b8a:	1a18      	subs	r0, r3, r0
 8014b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b8e:	1824      	adds	r4, r4, r0
 8014b90:	181b      	adds	r3, r3, r0
 8014b92:	930a      	str	r3, [sp, #40]	; 0x28
 8014b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b96:	181b      	adds	r3, r3, r0
 8014b98:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	dd05      	ble.n	8014bac <_dtoa_r+0x830>
 8014ba0:	001a      	movs	r2, r3
 8014ba2:	9903      	ldr	r1, [sp, #12]
 8014ba4:	9802      	ldr	r0, [sp, #8]
 8014ba6:	f001 f80f 	bl	8015bc8 <__lshift>
 8014baa:	9003      	str	r0, [sp, #12]
 8014bac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	dd05      	ble.n	8014bbe <_dtoa_r+0x842>
 8014bb2:	001a      	movs	r2, r3
 8014bb4:	9904      	ldr	r1, [sp, #16]
 8014bb6:	9802      	ldr	r0, [sp, #8]
 8014bb8:	f001 f806 	bl	8015bc8 <__lshift>
 8014bbc:	9004      	str	r0, [sp, #16]
 8014bbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d05e      	beq.n	8014c82 <_dtoa_r+0x906>
 8014bc4:	9904      	ldr	r1, [sp, #16]
 8014bc6:	9803      	ldr	r0, [sp, #12]
 8014bc8:	f001 f850 	bl	8015c6c <__mcmp>
 8014bcc:	2800      	cmp	r0, #0
 8014bce:	da58      	bge.n	8014c82 <_dtoa_r+0x906>
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	220a      	movs	r2, #10
 8014bd4:	9903      	ldr	r1, [sp, #12]
 8014bd6:	9802      	ldr	r0, [sp, #8]
 8014bd8:	f000 fe56 	bl	8015888 <__multadd>
 8014bdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bde:	3f01      	subs	r7, #1
 8014be0:	9003      	str	r0, [sp, #12]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d100      	bne.n	8014be8 <_dtoa_r+0x86c>
 8014be6:	e190      	b.n	8014f0a <_dtoa_r+0xb8e>
 8014be8:	2300      	movs	r3, #0
 8014bea:	0031      	movs	r1, r6
 8014bec:	220a      	movs	r2, #10
 8014bee:	9802      	ldr	r0, [sp, #8]
 8014bf0:	f000 fe4a 	bl	8015888 <__multadd>
 8014bf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bf6:	0006      	movs	r6, r0
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	dd00      	ble.n	8014bfe <_dtoa_r+0x882>
 8014bfc:	e088      	b.n	8014d10 <_dtoa_r+0x994>
 8014bfe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014c00:	2b02      	cmp	r3, #2
 8014c02:	dc00      	bgt.n	8014c06 <_dtoa_r+0x88a>
 8014c04:	e084      	b.n	8014d10 <_dtoa_r+0x994>
 8014c06:	e044      	b.n	8014c92 <_dtoa_r+0x916>
 8014c08:	2336      	movs	r3, #54	; 0x36
 8014c0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014c0c:	1a9b      	subs	r3, r3, r2
 8014c0e:	e747      	b.n	8014aa0 <_dtoa_r+0x724>
 8014c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c12:	1e5d      	subs	r5, r3, #1
 8014c14:	9b04      	ldr	r3, [sp, #16]
 8014c16:	42ab      	cmp	r3, r5
 8014c18:	db08      	blt.n	8014c2c <_dtoa_r+0x8b0>
 8014c1a:	1b5d      	subs	r5, r3, r5
 8014c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	da0c      	bge.n	8014c3c <_dtoa_r+0x8c0>
 8014c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c26:	1a9c      	subs	r4, r3, r2
 8014c28:	2300      	movs	r3, #0
 8014c2a:	e73b      	b.n	8014aa4 <_dtoa_r+0x728>
 8014c2c:	9b04      	ldr	r3, [sp, #16]
 8014c2e:	9504      	str	r5, [sp, #16]
 8014c30:	1aea      	subs	r2, r5, r3
 8014c32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014c34:	2500      	movs	r5, #0
 8014c36:	189b      	adds	r3, r3, r2
 8014c38:	9311      	str	r3, [sp, #68]	; 0x44
 8014c3a:	e7ef      	b.n	8014c1c <_dtoa_r+0x8a0>
 8014c3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c40:	e730      	b.n	8014aa4 <_dtoa_r+0x728>
 8014c42:	9d04      	ldr	r5, [sp, #16]
 8014c44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014c46:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8014c48:	e737      	b.n	8014aba <_dtoa_r+0x73e>
 8014c4a:	9a04      	ldr	r2, [sp, #16]
 8014c4c:	e764      	b.n	8014b18 <_dtoa_r+0x79c>
 8014c4e:	2500      	movs	r5, #0
 8014c50:	9b04      	ldr	r3, [sp, #16]
 8014c52:	9a04      	ldr	r2, [sp, #16]
 8014c54:	691b      	ldr	r3, [r3, #16]
 8014c56:	9310      	str	r3, [sp, #64]	; 0x40
 8014c58:	3303      	adds	r3, #3
 8014c5a:	009b      	lsls	r3, r3, #2
 8014c5c:	18d3      	adds	r3, r2, r3
 8014c5e:	6858      	ldr	r0, [r3, #4]
 8014c60:	f000 fe8e 	bl	8015980 <__hi0bits>
 8014c64:	2320      	movs	r3, #32
 8014c66:	1a18      	subs	r0, r3, r0
 8014c68:	e785      	b.n	8014b76 <_dtoa_r+0x7fa>
 8014c6a:	2b04      	cmp	r3, #4
 8014c6c:	d095      	beq.n	8014b9a <_dtoa_r+0x81e>
 8014c6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c70:	331c      	adds	r3, #28
 8014c72:	18d2      	adds	r2, r2, r3
 8014c74:	920a      	str	r2, [sp, #40]	; 0x28
 8014c76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014c78:	18e4      	adds	r4, r4, r3
 8014c7a:	18d3      	adds	r3, r2, r3
 8014c7c:	e78c      	b.n	8014b98 <_dtoa_r+0x81c>
 8014c7e:	0003      	movs	r3, r0
 8014c80:	e7f5      	b.n	8014c6e <_dtoa_r+0x8f2>
 8014c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	dc3d      	bgt.n	8014d04 <_dtoa_r+0x988>
 8014c88:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014c8a:	2b02      	cmp	r3, #2
 8014c8c:	dd3a      	ble.n	8014d04 <_dtoa_r+0x988>
 8014c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c90:	930c      	str	r3, [sp, #48]	; 0x30
 8014c92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d10c      	bne.n	8014cb2 <_dtoa_r+0x936>
 8014c98:	9904      	ldr	r1, [sp, #16]
 8014c9a:	2205      	movs	r2, #5
 8014c9c:	9802      	ldr	r0, [sp, #8]
 8014c9e:	f000 fdf3 	bl	8015888 <__multadd>
 8014ca2:	9004      	str	r0, [sp, #16]
 8014ca4:	0001      	movs	r1, r0
 8014ca6:	9803      	ldr	r0, [sp, #12]
 8014ca8:	f000 ffe0 	bl	8015c6c <__mcmp>
 8014cac:	2800      	cmp	r0, #0
 8014cae:	dd00      	ble.n	8014cb2 <_dtoa_r+0x936>
 8014cb0:	e5ad      	b.n	801480e <_dtoa_r+0x492>
 8014cb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014cb4:	9d08      	ldr	r5, [sp, #32]
 8014cb6:	43df      	mvns	r7, r3
 8014cb8:	2300      	movs	r3, #0
 8014cba:	9309      	str	r3, [sp, #36]	; 0x24
 8014cbc:	9904      	ldr	r1, [sp, #16]
 8014cbe:	9802      	ldr	r0, [sp, #8]
 8014cc0:	f000 fdd8 	bl	8015874 <_Bfree>
 8014cc4:	2e00      	cmp	r6, #0
 8014cc6:	d100      	bne.n	8014cca <_dtoa_r+0x94e>
 8014cc8:	e69b      	b.n	8014a02 <_dtoa_r+0x686>
 8014cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d005      	beq.n	8014cdc <_dtoa_r+0x960>
 8014cd0:	42b3      	cmp	r3, r6
 8014cd2:	d003      	beq.n	8014cdc <_dtoa_r+0x960>
 8014cd4:	0019      	movs	r1, r3
 8014cd6:	9802      	ldr	r0, [sp, #8]
 8014cd8:	f000 fdcc 	bl	8015874 <_Bfree>
 8014cdc:	0031      	movs	r1, r6
 8014cde:	9802      	ldr	r0, [sp, #8]
 8014ce0:	f000 fdc8 	bl	8015874 <_Bfree>
 8014ce4:	e68d      	b.n	8014a02 <_dtoa_r+0x686>
 8014ce6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ce8:	9304      	str	r3, [sp, #16]
 8014cea:	001e      	movs	r6, r3
 8014cec:	e7e1      	b.n	8014cb2 <_dtoa_r+0x936>
 8014cee:	2300      	movs	r3, #0
 8014cf0:	e7fa      	b.n	8014ce8 <_dtoa_r+0x96c>
 8014cf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014cf4:	0037      	movs	r7, r6
 8014cf6:	9304      	str	r3, [sp, #16]
 8014cf8:	001e      	movs	r6, r3
 8014cfa:	e588      	b.n	801480e <_dtoa_r+0x492>
 8014cfc:	40240000 	.word	0x40240000
 8014d00:	00000433 	.word	0x00000433
 8014d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d100      	bne.n	8014d0c <_dtoa_r+0x990>
 8014d0a:	e0b2      	b.n	8014e72 <_dtoa_r+0xaf6>
 8014d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d0e:	930c      	str	r3, [sp, #48]	; 0x30
 8014d10:	2c00      	cmp	r4, #0
 8014d12:	dd05      	ble.n	8014d20 <_dtoa_r+0x9a4>
 8014d14:	0031      	movs	r1, r6
 8014d16:	0022      	movs	r2, r4
 8014d18:	9802      	ldr	r0, [sp, #8]
 8014d1a:	f000 ff55 	bl	8015bc8 <__lshift>
 8014d1e:	0006      	movs	r6, r0
 8014d20:	0030      	movs	r0, r6
 8014d22:	2d00      	cmp	r5, #0
 8014d24:	d011      	beq.n	8014d4a <_dtoa_r+0x9ce>
 8014d26:	6871      	ldr	r1, [r6, #4]
 8014d28:	9802      	ldr	r0, [sp, #8]
 8014d2a:	f000 fd7b 	bl	8015824 <_Balloc>
 8014d2e:	0031      	movs	r1, r6
 8014d30:	0004      	movs	r4, r0
 8014d32:	6933      	ldr	r3, [r6, #16]
 8014d34:	310c      	adds	r1, #12
 8014d36:	1c9a      	adds	r2, r3, #2
 8014d38:	0092      	lsls	r2, r2, #2
 8014d3a:	300c      	adds	r0, #12
 8014d3c:	f7fc fe8b 	bl	8011a56 <memcpy>
 8014d40:	2201      	movs	r2, #1
 8014d42:	0021      	movs	r1, r4
 8014d44:	9802      	ldr	r0, [sp, #8]
 8014d46:	f000 ff3f 	bl	8015bc8 <__lshift>
 8014d4a:	9609      	str	r6, [sp, #36]	; 0x24
 8014d4c:	0006      	movs	r6, r0
 8014d4e:	9b08      	ldr	r3, [sp, #32]
 8014d50:	930a      	str	r3, [sp, #40]	; 0x28
 8014d52:	9904      	ldr	r1, [sp, #16]
 8014d54:	9803      	ldr	r0, [sp, #12]
 8014d56:	f7ff fa8b 	bl	8014270 <quorem>
 8014d5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d5c:	900d      	str	r0, [sp, #52]	; 0x34
 8014d5e:	0004      	movs	r4, r0
 8014d60:	9803      	ldr	r0, [sp, #12]
 8014d62:	f000 ff83 	bl	8015c6c <__mcmp>
 8014d66:	0032      	movs	r2, r6
 8014d68:	9010      	str	r0, [sp, #64]	; 0x40
 8014d6a:	9904      	ldr	r1, [sp, #16]
 8014d6c:	9802      	ldr	r0, [sp, #8]
 8014d6e:	f000 ff97 	bl	8015ca0 <__mdiff>
 8014d72:	2301      	movs	r3, #1
 8014d74:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d76:	68c3      	ldr	r3, [r0, #12]
 8014d78:	3430      	adds	r4, #48	; 0x30
 8014d7a:	0005      	movs	r5, r0
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d104      	bne.n	8014d8a <_dtoa_r+0xa0e>
 8014d80:	0001      	movs	r1, r0
 8014d82:	9803      	ldr	r0, [sp, #12]
 8014d84:	f000 ff72 	bl	8015c6c <__mcmp>
 8014d88:	900b      	str	r0, [sp, #44]	; 0x2c
 8014d8a:	0029      	movs	r1, r5
 8014d8c:	9802      	ldr	r0, [sp, #8]
 8014d8e:	f000 fd71 	bl	8015874 <_Bfree>
 8014d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014d96:	4313      	orrs	r3, r2
 8014d98:	d10e      	bne.n	8014db8 <_dtoa_r+0xa3c>
 8014d9a:	9a06      	ldr	r2, [sp, #24]
 8014d9c:	3301      	adds	r3, #1
 8014d9e:	4213      	tst	r3, r2
 8014da0:	d10a      	bne.n	8014db8 <_dtoa_r+0xa3c>
 8014da2:	2c39      	cmp	r4, #57	; 0x39
 8014da4:	d026      	beq.n	8014df4 <_dtoa_r+0xa78>
 8014da6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	dd01      	ble.n	8014db0 <_dtoa_r+0xa34>
 8014dac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014dae:	3431      	adds	r4, #49	; 0x31
 8014db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014db2:	1c5d      	adds	r5, r3, #1
 8014db4:	701c      	strb	r4, [r3, #0]
 8014db6:	e781      	b.n	8014cbc <_dtoa_r+0x940>
 8014db8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	db07      	blt.n	8014dce <_dtoa_r+0xa52>
 8014dbe:	001d      	movs	r5, r3
 8014dc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014dc2:	431d      	orrs	r5, r3
 8014dc4:	d122      	bne.n	8014e0c <_dtoa_r+0xa90>
 8014dc6:	2301      	movs	r3, #1
 8014dc8:	9a06      	ldr	r2, [sp, #24]
 8014dca:	4213      	tst	r3, r2
 8014dcc:	d11e      	bne.n	8014e0c <_dtoa_r+0xa90>
 8014dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	dded      	ble.n	8014db0 <_dtoa_r+0xa34>
 8014dd4:	9903      	ldr	r1, [sp, #12]
 8014dd6:	2201      	movs	r2, #1
 8014dd8:	9802      	ldr	r0, [sp, #8]
 8014dda:	f000 fef5 	bl	8015bc8 <__lshift>
 8014dde:	9904      	ldr	r1, [sp, #16]
 8014de0:	9003      	str	r0, [sp, #12]
 8014de2:	f000 ff43 	bl	8015c6c <__mcmp>
 8014de6:	2800      	cmp	r0, #0
 8014de8:	dc02      	bgt.n	8014df0 <_dtoa_r+0xa74>
 8014dea:	d1e1      	bne.n	8014db0 <_dtoa_r+0xa34>
 8014dec:	07e3      	lsls	r3, r4, #31
 8014dee:	d5df      	bpl.n	8014db0 <_dtoa_r+0xa34>
 8014df0:	2c39      	cmp	r4, #57	; 0x39
 8014df2:	d1db      	bne.n	8014dac <_dtoa_r+0xa30>
 8014df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014df6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014df8:	1c5d      	adds	r5, r3, #1
 8014dfa:	2339      	movs	r3, #57	; 0x39
 8014dfc:	7013      	strb	r3, [r2, #0]
 8014dfe:	1e6b      	subs	r3, r5, #1
 8014e00:	781a      	ldrb	r2, [r3, #0]
 8014e02:	2a39      	cmp	r2, #57	; 0x39
 8014e04:	d067      	beq.n	8014ed6 <_dtoa_r+0xb5a>
 8014e06:	3201      	adds	r2, #1
 8014e08:	701a      	strb	r2, [r3, #0]
 8014e0a:	e757      	b.n	8014cbc <_dtoa_r+0x940>
 8014e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e0e:	1c5d      	adds	r5, r3, #1
 8014e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	dd04      	ble.n	8014e20 <_dtoa_r+0xaa4>
 8014e16:	2c39      	cmp	r4, #57	; 0x39
 8014e18:	d0ec      	beq.n	8014df4 <_dtoa_r+0xa78>
 8014e1a:	3401      	adds	r4, #1
 8014e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e1e:	e7c9      	b.n	8014db4 <_dtoa_r+0xa38>
 8014e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e24:	701c      	strb	r4, [r3, #0]
 8014e26:	9b08      	ldr	r3, [sp, #32]
 8014e28:	1aeb      	subs	r3, r5, r3
 8014e2a:	4293      	cmp	r3, r2
 8014e2c:	d03e      	beq.n	8014eac <_dtoa_r+0xb30>
 8014e2e:	2300      	movs	r3, #0
 8014e30:	220a      	movs	r2, #10
 8014e32:	9903      	ldr	r1, [sp, #12]
 8014e34:	9802      	ldr	r0, [sp, #8]
 8014e36:	f000 fd27 	bl	8015888 <__multadd>
 8014e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e3c:	9003      	str	r0, [sp, #12]
 8014e3e:	42b3      	cmp	r3, r6
 8014e40:	d109      	bne.n	8014e56 <_dtoa_r+0xada>
 8014e42:	2300      	movs	r3, #0
 8014e44:	220a      	movs	r2, #10
 8014e46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e48:	9802      	ldr	r0, [sp, #8]
 8014e4a:	f000 fd1d 	bl	8015888 <__multadd>
 8014e4e:	9009      	str	r0, [sp, #36]	; 0x24
 8014e50:	0006      	movs	r6, r0
 8014e52:	950a      	str	r5, [sp, #40]	; 0x28
 8014e54:	e77d      	b.n	8014d52 <_dtoa_r+0x9d6>
 8014e56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e58:	2300      	movs	r3, #0
 8014e5a:	220a      	movs	r2, #10
 8014e5c:	9802      	ldr	r0, [sp, #8]
 8014e5e:	f000 fd13 	bl	8015888 <__multadd>
 8014e62:	2300      	movs	r3, #0
 8014e64:	9009      	str	r0, [sp, #36]	; 0x24
 8014e66:	220a      	movs	r2, #10
 8014e68:	0031      	movs	r1, r6
 8014e6a:	9802      	ldr	r0, [sp, #8]
 8014e6c:	f000 fd0c 	bl	8015888 <__multadd>
 8014e70:	e7ee      	b.n	8014e50 <_dtoa_r+0xad4>
 8014e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e74:	930c      	str	r3, [sp, #48]	; 0x30
 8014e76:	9b08      	ldr	r3, [sp, #32]
 8014e78:	9306      	str	r3, [sp, #24]
 8014e7a:	9904      	ldr	r1, [sp, #16]
 8014e7c:	9803      	ldr	r0, [sp, #12]
 8014e7e:	f7ff f9f7 	bl	8014270 <quorem>
 8014e82:	9b06      	ldr	r3, [sp, #24]
 8014e84:	3030      	adds	r0, #48	; 0x30
 8014e86:	1c5d      	adds	r5, r3, #1
 8014e88:	7018      	strb	r0, [r3, #0]
 8014e8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e8c:	9b08      	ldr	r3, [sp, #32]
 8014e8e:	0004      	movs	r4, r0
 8014e90:	1aeb      	subs	r3, r5, r3
 8014e92:	429a      	cmp	r2, r3
 8014e94:	dd08      	ble.n	8014ea8 <_dtoa_r+0xb2c>
 8014e96:	2300      	movs	r3, #0
 8014e98:	220a      	movs	r2, #10
 8014e9a:	9903      	ldr	r1, [sp, #12]
 8014e9c:	9802      	ldr	r0, [sp, #8]
 8014e9e:	f000 fcf3 	bl	8015888 <__multadd>
 8014ea2:	9506      	str	r5, [sp, #24]
 8014ea4:	9003      	str	r0, [sp, #12]
 8014ea6:	e7e8      	b.n	8014e7a <_dtoa_r+0xafe>
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8014eac:	9903      	ldr	r1, [sp, #12]
 8014eae:	2201      	movs	r2, #1
 8014eb0:	9802      	ldr	r0, [sp, #8]
 8014eb2:	f000 fe89 	bl	8015bc8 <__lshift>
 8014eb6:	9904      	ldr	r1, [sp, #16]
 8014eb8:	9003      	str	r0, [sp, #12]
 8014eba:	f000 fed7 	bl	8015c6c <__mcmp>
 8014ebe:	2800      	cmp	r0, #0
 8014ec0:	dc9d      	bgt.n	8014dfe <_dtoa_r+0xa82>
 8014ec2:	d101      	bne.n	8014ec8 <_dtoa_r+0xb4c>
 8014ec4:	07e3      	lsls	r3, r4, #31
 8014ec6:	d49a      	bmi.n	8014dfe <_dtoa_r+0xa82>
 8014ec8:	1e6b      	subs	r3, r5, #1
 8014eca:	781a      	ldrb	r2, [r3, #0]
 8014ecc:	2a30      	cmp	r2, #48	; 0x30
 8014ece:	d000      	beq.n	8014ed2 <_dtoa_r+0xb56>
 8014ed0:	e6f4      	b.n	8014cbc <_dtoa_r+0x940>
 8014ed2:	001d      	movs	r5, r3
 8014ed4:	e7f8      	b.n	8014ec8 <_dtoa_r+0xb4c>
 8014ed6:	9a08      	ldr	r2, [sp, #32]
 8014ed8:	429a      	cmp	r2, r3
 8014eda:	d103      	bne.n	8014ee4 <_dtoa_r+0xb68>
 8014edc:	2331      	movs	r3, #49	; 0x31
 8014ede:	3701      	adds	r7, #1
 8014ee0:	7013      	strb	r3, [r2, #0]
 8014ee2:	e6eb      	b.n	8014cbc <_dtoa_r+0x940>
 8014ee4:	001d      	movs	r5, r3
 8014ee6:	e78a      	b.n	8014dfe <_dtoa_r+0xa82>
 8014ee8:	4b0b      	ldr	r3, [pc, #44]	; (8014f18 <_dtoa_r+0xb9c>)
 8014eea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014eec:	9308      	str	r3, [sp, #32]
 8014eee:	4b0b      	ldr	r3, [pc, #44]	; (8014f1c <_dtoa_r+0xba0>)
 8014ef0:	2a00      	cmp	r2, #0
 8014ef2:	d001      	beq.n	8014ef8 <_dtoa_r+0xb7c>
 8014ef4:	f7ff fa75 	bl	80143e2 <_dtoa_r+0x66>
 8014ef8:	f7ff fa75 	bl	80143e6 <_dtoa_r+0x6a>
 8014efc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014efe:	2b01      	cmp	r3, #1
 8014f00:	dc00      	bgt.n	8014f04 <_dtoa_r+0xb88>
 8014f02:	e621      	b.n	8014b48 <_dtoa_r+0x7cc>
 8014f04:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8014f06:	2001      	movs	r0, #1
 8014f08:	e635      	b.n	8014b76 <_dtoa_r+0x7fa>
 8014f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	dcb2      	bgt.n	8014e76 <_dtoa_r+0xafa>
 8014f10:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014f12:	2b02      	cmp	r3, #2
 8014f14:	ddaf      	ble.n	8014e76 <_dtoa_r+0xafa>
 8014f16:	e6bc      	b.n	8014c92 <_dtoa_r+0x916>
 8014f18:	08018f65 	.word	0x08018f65
 8014f1c:	08018f6d 	.word	0x08018f6d

08014f20 <__errno>:
 8014f20:	4b01      	ldr	r3, [pc, #4]	; (8014f28 <__errno+0x8>)
 8014f22:	6818      	ldr	r0, [r3, #0]
 8014f24:	4770      	bx	lr
 8014f26:	46c0      	nop			; (mov r8, r8)
 8014f28:	200000a8 	.word	0x200000a8

08014f2c <__libc_fini_array>:
 8014f2c:	b570      	push	{r4, r5, r6, lr}
 8014f2e:	4d07      	ldr	r5, [pc, #28]	; (8014f4c <__libc_fini_array+0x20>)
 8014f30:	4c07      	ldr	r4, [pc, #28]	; (8014f50 <__libc_fini_array+0x24>)
 8014f32:	1b64      	subs	r4, r4, r5
 8014f34:	10a4      	asrs	r4, r4, #2
 8014f36:	2c00      	cmp	r4, #0
 8014f38:	d102      	bne.n	8014f40 <__libc_fini_array+0x14>
 8014f3a:	f001 f987 	bl	801624c <_fini>
 8014f3e:	bd70      	pop	{r4, r5, r6, pc}
 8014f40:	3c01      	subs	r4, #1
 8014f42:	00a3      	lsls	r3, r4, #2
 8014f44:	58eb      	ldr	r3, [r5, r3]
 8014f46:	4798      	blx	r3
 8014f48:	e7f5      	b.n	8014f36 <__libc_fini_array+0xa>
 8014f4a:	46c0      	nop			; (mov r8, r8)
 8014f4c:	08019084 	.word	0x08019084
 8014f50:	08019088 	.word	0x08019088

08014f54 <_malloc_trim_r>:
 8014f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014f56:	0005      	movs	r5, r0
 8014f58:	2008      	movs	r0, #8
 8014f5a:	000c      	movs	r4, r1
 8014f5c:	f7ff f95c 	bl	8014218 <sysconf>
 8014f60:	0007      	movs	r7, r0
 8014f62:	0028      	movs	r0, r5
 8014f64:	f7fc fd88 	bl	8011a78 <__malloc_lock>
 8014f68:	2203      	movs	r2, #3
 8014f6a:	4e21      	ldr	r6, [pc, #132]	; (8014ff0 <_malloc_trim_r+0x9c>)
 8014f6c:	0039      	movs	r1, r7
 8014f6e:	68b3      	ldr	r3, [r6, #8]
 8014f70:	685b      	ldr	r3, [r3, #4]
 8014f72:	4393      	bics	r3, r2
 8014f74:	1b18      	subs	r0, r3, r4
 8014f76:	3811      	subs	r0, #17
 8014f78:	19c0      	adds	r0, r0, r7
 8014f7a:	9301      	str	r3, [sp, #4]
 8014f7c:	f7eb f8e8 	bl	8000150 <__udivsi3>
 8014f80:	1e44      	subs	r4, r0, #1
 8014f82:	437c      	muls	r4, r7
 8014f84:	42a7      	cmp	r7, r4
 8014f86:	dd04      	ble.n	8014f92 <_malloc_trim_r+0x3e>
 8014f88:	0028      	movs	r0, r5
 8014f8a:	f7fc fd7d 	bl	8011a88 <__malloc_unlock>
 8014f8e:	2000      	movs	r0, #0
 8014f90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014f92:	2100      	movs	r1, #0
 8014f94:	0028      	movs	r0, r5
 8014f96:	f7fc ff4f 	bl	8011e38 <_sbrk_r>
 8014f9a:	68b3      	ldr	r3, [r6, #8]
 8014f9c:	9a01      	ldr	r2, [sp, #4]
 8014f9e:	189b      	adds	r3, r3, r2
 8014fa0:	4298      	cmp	r0, r3
 8014fa2:	d1f1      	bne.n	8014f88 <_malloc_trim_r+0x34>
 8014fa4:	4261      	negs	r1, r4
 8014fa6:	0028      	movs	r0, r5
 8014fa8:	f7fc ff46 	bl	8011e38 <_sbrk_r>
 8014fac:	1c43      	adds	r3, r0, #1
 8014fae:	d110      	bne.n	8014fd2 <_malloc_trim_r+0x7e>
 8014fb0:	2100      	movs	r1, #0
 8014fb2:	0028      	movs	r0, r5
 8014fb4:	f7fc ff40 	bl	8011e38 <_sbrk_r>
 8014fb8:	68b2      	ldr	r2, [r6, #8]
 8014fba:	1a81      	subs	r1, r0, r2
 8014fbc:	290f      	cmp	r1, #15
 8014fbe:	dde3      	ble.n	8014f88 <_malloc_trim_r+0x34>
 8014fc0:	4b0c      	ldr	r3, [pc, #48]	; (8014ff4 <_malloc_trim_r+0xa0>)
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	1ac0      	subs	r0, r0, r3
 8014fc6:	4b0c      	ldr	r3, [pc, #48]	; (8014ff8 <_malloc_trim_r+0xa4>)
 8014fc8:	6018      	str	r0, [r3, #0]
 8014fca:	2301      	movs	r3, #1
 8014fcc:	430b      	orrs	r3, r1
 8014fce:	6053      	str	r3, [r2, #4]
 8014fd0:	e7da      	b.n	8014f88 <_malloc_trim_r+0x34>
 8014fd2:	68b2      	ldr	r2, [r6, #8]
 8014fd4:	2601      	movs	r6, #1
 8014fd6:	9b01      	ldr	r3, [sp, #4]
 8014fd8:	0028      	movs	r0, r5
 8014fda:	1b1b      	subs	r3, r3, r4
 8014fdc:	4333      	orrs	r3, r6
 8014fde:	6053      	str	r3, [r2, #4]
 8014fe0:	4b05      	ldr	r3, [pc, #20]	; (8014ff8 <_malloc_trim_r+0xa4>)
 8014fe2:	681a      	ldr	r2, [r3, #0]
 8014fe4:	1b14      	subs	r4, r2, r4
 8014fe6:	601c      	str	r4, [r3, #0]
 8014fe8:	f7fc fd4e 	bl	8011a88 <__malloc_unlock>
 8014fec:	0030      	movs	r0, r6
 8014fee:	e7cf      	b.n	8014f90 <_malloc_trim_r+0x3c>
 8014ff0:	20000644 	.word	0x20000644
 8014ff4:	20000a4c 	.word	0x20000a4c
 8014ff8:	200068d4 	.word	0x200068d4

08014ffc <_free_r>:
 8014ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ffe:	1e0d      	subs	r5, r1, #0
 8015000:	9001      	str	r0, [sp, #4]
 8015002:	d02d      	beq.n	8015060 <_free_r+0x64>
 8015004:	f7fc fd38 	bl	8011a78 <__malloc_lock>
 8015008:	2301      	movs	r3, #1
 801500a:	0029      	movs	r1, r5
 801500c:	469c      	mov	ip, r3
 801500e:	3908      	subs	r1, #8
 8015010:	684f      	ldr	r7, [r1, #4]
 8015012:	4662      	mov	r2, ip
 8015014:	003b      	movs	r3, r7
 8015016:	4666      	mov	r6, ip
 8015018:	4393      	bics	r3, r2
 801501a:	18c8      	adds	r0, r1, r3
 801501c:	6845      	ldr	r5, [r0, #4]
 801501e:	3202      	adds	r2, #2
 8015020:	4395      	bics	r5, r2
 8015022:	4a4a      	ldr	r2, [pc, #296]	; (801514c <_free_r+0x150>)
 8015024:	4037      	ands	r7, r6
 8015026:	6896      	ldr	r6, [r2, #8]
 8015028:	4286      	cmp	r6, r0
 801502a:	d11a      	bne.n	8015062 <_free_r+0x66>
 801502c:	195b      	adds	r3, r3, r5
 801502e:	2f00      	cmp	r7, #0
 8015030:	d106      	bne.n	8015040 <_free_r+0x44>
 8015032:	6808      	ldr	r0, [r1, #0]
 8015034:	1a09      	subs	r1, r1, r0
 8015036:	688d      	ldr	r5, [r1, #8]
 8015038:	181b      	adds	r3, r3, r0
 801503a:	68c8      	ldr	r0, [r1, #12]
 801503c:	60e8      	str	r0, [r5, #12]
 801503e:	6085      	str	r5, [r0, #8]
 8015040:	2001      	movs	r0, #1
 8015042:	4318      	orrs	r0, r3
 8015044:	6048      	str	r0, [r1, #4]
 8015046:	6091      	str	r1, [r2, #8]
 8015048:	4a41      	ldr	r2, [pc, #260]	; (8015150 <_free_r+0x154>)
 801504a:	6812      	ldr	r2, [r2, #0]
 801504c:	429a      	cmp	r2, r3
 801504e:	d804      	bhi.n	801505a <_free_r+0x5e>
 8015050:	4b40      	ldr	r3, [pc, #256]	; (8015154 <_free_r+0x158>)
 8015052:	9801      	ldr	r0, [sp, #4]
 8015054:	6819      	ldr	r1, [r3, #0]
 8015056:	f7ff ff7d 	bl	8014f54 <_malloc_trim_r>
 801505a:	9801      	ldr	r0, [sp, #4]
 801505c:	f7fc fd14 	bl	8011a88 <__malloc_unlock>
 8015060:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8015062:	2600      	movs	r6, #0
 8015064:	6045      	str	r5, [r0, #4]
 8015066:	42b7      	cmp	r7, r6
 8015068:	d109      	bne.n	801507e <_free_r+0x82>
 801506a:	680f      	ldr	r7, [r1, #0]
 801506c:	4c3a      	ldr	r4, [pc, #232]	; (8015158 <_free_r+0x15c>)
 801506e:	1bc9      	subs	r1, r1, r7
 8015070:	19db      	adds	r3, r3, r7
 8015072:	688f      	ldr	r7, [r1, #8]
 8015074:	42a7      	cmp	r7, r4
 8015076:	d02b      	beq.n	80150d0 <_free_r+0xd4>
 8015078:	68cc      	ldr	r4, [r1, #12]
 801507a:	60fc      	str	r4, [r7, #12]
 801507c:	60a7      	str	r7, [r4, #8]
 801507e:	1947      	adds	r7, r0, r5
 8015080:	687c      	ldr	r4, [r7, #4]
 8015082:	2701      	movs	r7, #1
 8015084:	423c      	tst	r4, r7
 8015086:	d10b      	bne.n	80150a0 <_free_r+0xa4>
 8015088:	195b      	adds	r3, r3, r5
 801508a:	6885      	ldr	r5, [r0, #8]
 801508c:	2e00      	cmp	r6, #0
 801508e:	d121      	bne.n	80150d4 <_free_r+0xd8>
 8015090:	4c31      	ldr	r4, [pc, #196]	; (8015158 <_free_r+0x15c>)
 8015092:	42a5      	cmp	r5, r4
 8015094:	d11e      	bne.n	80150d4 <_free_r+0xd8>
 8015096:	003e      	movs	r6, r7
 8015098:	6151      	str	r1, [r2, #20]
 801509a:	6111      	str	r1, [r2, #16]
 801509c:	60cd      	str	r5, [r1, #12]
 801509e:	608d      	str	r5, [r1, #8]
 80150a0:	2001      	movs	r0, #1
 80150a2:	0005      	movs	r5, r0
 80150a4:	431d      	orrs	r5, r3
 80150a6:	604d      	str	r5, [r1, #4]
 80150a8:	50cb      	str	r3, [r1, r3]
 80150aa:	2e00      	cmp	r6, #0
 80150ac:	d1d5      	bne.n	801505a <_free_r+0x5e>
 80150ae:	4d2b      	ldr	r5, [pc, #172]	; (801515c <_free_r+0x160>)
 80150b0:	42ab      	cmp	r3, r5
 80150b2:	d813      	bhi.n	80150dc <_free_r+0xe0>
 80150b4:	08db      	lsrs	r3, r3, #3
 80150b6:	109d      	asrs	r5, r3, #2
 80150b8:	40a8      	lsls	r0, r5
 80150ba:	6854      	ldr	r4, [r2, #4]
 80150bc:	00db      	lsls	r3, r3, #3
 80150be:	4320      	orrs	r0, r4
 80150c0:	6050      	str	r0, [r2, #4]
 80150c2:	189a      	adds	r2, r3, r2
 80150c4:	6893      	ldr	r3, [r2, #8]
 80150c6:	60ca      	str	r2, [r1, #12]
 80150c8:	608b      	str	r3, [r1, #8]
 80150ca:	6091      	str	r1, [r2, #8]
 80150cc:	60d9      	str	r1, [r3, #12]
 80150ce:	e7c4      	b.n	801505a <_free_r+0x5e>
 80150d0:	4666      	mov	r6, ip
 80150d2:	e7d4      	b.n	801507e <_free_r+0x82>
 80150d4:	68c0      	ldr	r0, [r0, #12]
 80150d6:	60e8      	str	r0, [r5, #12]
 80150d8:	6085      	str	r5, [r0, #8]
 80150da:	e7e1      	b.n	80150a0 <_free_r+0xa4>
 80150dc:	0a5d      	lsrs	r5, r3, #9
 80150de:	2d04      	cmp	r5, #4
 80150e0:	d812      	bhi.n	8015108 <_free_r+0x10c>
 80150e2:	0998      	lsrs	r0, r3, #6
 80150e4:	3038      	adds	r0, #56	; 0x38
 80150e6:	00c6      	lsls	r6, r0, #3
 80150e8:	18b6      	adds	r6, r6, r2
 80150ea:	68b5      	ldr	r5, [r6, #8]
 80150ec:	2703      	movs	r7, #3
 80150ee:	42ae      	cmp	r6, r5
 80150f0:	d125      	bne.n	801513e <_free_r+0x142>
 80150f2:	2301      	movs	r3, #1
 80150f4:	1080      	asrs	r0, r0, #2
 80150f6:	4083      	lsls	r3, r0
 80150f8:	6850      	ldr	r0, [r2, #4]
 80150fa:	4303      	orrs	r3, r0
 80150fc:	6053      	str	r3, [r2, #4]
 80150fe:	60ce      	str	r6, [r1, #12]
 8015100:	608d      	str	r5, [r1, #8]
 8015102:	60b1      	str	r1, [r6, #8]
 8015104:	60e9      	str	r1, [r5, #12]
 8015106:	e7a8      	b.n	801505a <_free_r+0x5e>
 8015108:	2d14      	cmp	r5, #20
 801510a:	d802      	bhi.n	8015112 <_free_r+0x116>
 801510c:	0028      	movs	r0, r5
 801510e:	305b      	adds	r0, #91	; 0x5b
 8015110:	e7e9      	b.n	80150e6 <_free_r+0xea>
 8015112:	2d54      	cmp	r5, #84	; 0x54
 8015114:	d802      	bhi.n	801511c <_free_r+0x120>
 8015116:	0b18      	lsrs	r0, r3, #12
 8015118:	306e      	adds	r0, #110	; 0x6e
 801511a:	e7e4      	b.n	80150e6 <_free_r+0xea>
 801511c:	20aa      	movs	r0, #170	; 0xaa
 801511e:	0040      	lsls	r0, r0, #1
 8015120:	4285      	cmp	r5, r0
 8015122:	d802      	bhi.n	801512a <_free_r+0x12e>
 8015124:	0bd8      	lsrs	r0, r3, #15
 8015126:	3077      	adds	r0, #119	; 0x77
 8015128:	e7dd      	b.n	80150e6 <_free_r+0xea>
 801512a:	4e0d      	ldr	r6, [pc, #52]	; (8015160 <_free_r+0x164>)
 801512c:	207e      	movs	r0, #126	; 0x7e
 801512e:	42b5      	cmp	r5, r6
 8015130:	d8d9      	bhi.n	80150e6 <_free_r+0xea>
 8015132:	0c98      	lsrs	r0, r3, #18
 8015134:	307c      	adds	r0, #124	; 0x7c
 8015136:	e7d6      	b.n	80150e6 <_free_r+0xea>
 8015138:	68ad      	ldr	r5, [r5, #8]
 801513a:	42ae      	cmp	r6, r5
 801513c:	d003      	beq.n	8015146 <_free_r+0x14a>
 801513e:	686a      	ldr	r2, [r5, #4]
 8015140:	43ba      	bics	r2, r7
 8015142:	429a      	cmp	r2, r3
 8015144:	d8f8      	bhi.n	8015138 <_free_r+0x13c>
 8015146:	68ee      	ldr	r6, [r5, #12]
 8015148:	e7d9      	b.n	80150fe <_free_r+0x102>
 801514a:	46c0      	nop			; (mov r8, r8)
 801514c:	20000644 	.word	0x20000644
 8015150:	20000a50 	.word	0x20000a50
 8015154:	20006904 	.word	0x20006904
 8015158:	2000064c 	.word	0x2000064c
 801515c:	000001ff 	.word	0x000001ff
 8015160:	00000554 	.word	0x00000554

08015164 <rshift>:
 8015164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015166:	0004      	movs	r4, r0
 8015168:	6905      	ldr	r5, [r0, #16]
 801516a:	3414      	adds	r4, #20
 801516c:	114b      	asrs	r3, r1, #5
 801516e:	0026      	movs	r6, r4
 8015170:	429d      	cmp	r5, r3
 8015172:	dd14      	ble.n	801519e <rshift+0x3a>
 8015174:	221f      	movs	r2, #31
 8015176:	00ad      	lsls	r5, r5, #2
 8015178:	009b      	lsls	r3, r3, #2
 801517a:	4011      	ands	r1, r2
 801517c:	1965      	adds	r5, r4, r5
 801517e:	18e3      	adds	r3, r4, r3
 8015180:	0022      	movs	r2, r4
 8015182:	2900      	cmp	r1, #0
 8015184:	d01e      	beq.n	80151c4 <rshift+0x60>
 8015186:	cb04      	ldmia	r3!, {r2}
 8015188:	2720      	movs	r7, #32
 801518a:	40ca      	lsrs	r2, r1
 801518c:	46a4      	mov	ip, r4
 801518e:	1a7f      	subs	r7, r7, r1
 8015190:	4666      	mov	r6, ip
 8015192:	429d      	cmp	r5, r3
 8015194:	d80b      	bhi.n	80151ae <rshift+0x4a>
 8015196:	6032      	str	r2, [r6, #0]
 8015198:	2a00      	cmp	r2, #0
 801519a:	d000      	beq.n	801519e <rshift+0x3a>
 801519c:	3604      	adds	r6, #4
 801519e:	1b33      	subs	r3, r6, r4
 80151a0:	109b      	asrs	r3, r3, #2
 80151a2:	6103      	str	r3, [r0, #16]
 80151a4:	42a6      	cmp	r6, r4
 80151a6:	d101      	bne.n	80151ac <rshift+0x48>
 80151a8:	2300      	movs	r3, #0
 80151aa:	6143      	str	r3, [r0, #20]
 80151ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151ae:	681e      	ldr	r6, [r3, #0]
 80151b0:	40be      	lsls	r6, r7
 80151b2:	4332      	orrs	r2, r6
 80151b4:	4666      	mov	r6, ip
 80151b6:	c604      	stmia	r6!, {r2}
 80151b8:	cb04      	ldmia	r3!, {r2}
 80151ba:	46b4      	mov	ip, r6
 80151bc:	40ca      	lsrs	r2, r1
 80151be:	e7e7      	b.n	8015190 <rshift+0x2c>
 80151c0:	cb02      	ldmia	r3!, {r1}
 80151c2:	c202      	stmia	r2!, {r1}
 80151c4:	0016      	movs	r6, r2
 80151c6:	429d      	cmp	r5, r3
 80151c8:	d8fa      	bhi.n	80151c0 <rshift+0x5c>
 80151ca:	e7e8      	b.n	801519e <rshift+0x3a>

080151cc <__hexdig_fun>:
 80151cc:	0003      	movs	r3, r0
 80151ce:	3b30      	subs	r3, #48	; 0x30
 80151d0:	2b09      	cmp	r3, #9
 80151d2:	d803      	bhi.n	80151dc <__hexdig_fun+0x10>
 80151d4:	3820      	subs	r0, #32
 80151d6:	b2c3      	uxtb	r3, r0
 80151d8:	0018      	movs	r0, r3
 80151da:	4770      	bx	lr
 80151dc:	0003      	movs	r3, r0
 80151de:	3b61      	subs	r3, #97	; 0x61
 80151e0:	2b05      	cmp	r3, #5
 80151e2:	d801      	bhi.n	80151e8 <__hexdig_fun+0x1c>
 80151e4:	3847      	subs	r0, #71	; 0x47
 80151e6:	e7f6      	b.n	80151d6 <__hexdig_fun+0xa>
 80151e8:	0002      	movs	r2, r0
 80151ea:	3a41      	subs	r2, #65	; 0x41
 80151ec:	2300      	movs	r3, #0
 80151ee:	2a05      	cmp	r2, #5
 80151f0:	d8f2      	bhi.n	80151d8 <__hexdig_fun+0xc>
 80151f2:	3827      	subs	r0, #39	; 0x27
 80151f4:	e7ef      	b.n	80151d6 <__hexdig_fun+0xa>

080151f6 <__gethex>:
 80151f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151f8:	b08d      	sub	sp, #52	; 0x34
 80151fa:	9005      	str	r0, [sp, #20]
 80151fc:	9814      	ldr	r0, [sp, #80]	; 0x50
 80151fe:	9109      	str	r1, [sp, #36]	; 0x24
 8015200:	9202      	str	r2, [sp, #8]
 8015202:	930a      	str	r3, [sp, #40]	; 0x28
 8015204:	f000 fadf 	bl	80157c6 <__localeconv_l>
 8015208:	6803      	ldr	r3, [r0, #0]
 801520a:	0018      	movs	r0, r3
 801520c:	9307      	str	r3, [sp, #28]
 801520e:	f7ea ff83 	bl	8000118 <strlen>
 8015212:	2202      	movs	r2, #2
 8015214:	9b07      	ldr	r3, [sp, #28]
 8015216:	4252      	negs	r2, r2
 8015218:	181b      	adds	r3, r3, r0
 801521a:	3b01      	subs	r3, #1
 801521c:	781b      	ldrb	r3, [r3, #0]
 801521e:	9004      	str	r0, [sp, #16]
 8015220:	930b      	str	r3, [sp, #44]	; 0x2c
 8015222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015224:	6819      	ldr	r1, [r3, #0]
 8015226:	1c8b      	adds	r3, r1, #2
 8015228:	1a52      	subs	r2, r2, r1
 801522a:	18d1      	adds	r1, r2, r3
 801522c:	9301      	str	r3, [sp, #4]
 801522e:	9108      	str	r1, [sp, #32]
 8015230:	9901      	ldr	r1, [sp, #4]
 8015232:	3301      	adds	r3, #1
 8015234:	7808      	ldrb	r0, [r1, #0]
 8015236:	2830      	cmp	r0, #48	; 0x30
 8015238:	d0f7      	beq.n	801522a <__gethex+0x34>
 801523a:	f7ff ffc7 	bl	80151cc <__hexdig_fun>
 801523e:	1e07      	subs	r7, r0, #0
 8015240:	d000      	beq.n	8015244 <__gethex+0x4e>
 8015242:	e06f      	b.n	8015324 <__gethex+0x12e>
 8015244:	9a04      	ldr	r2, [sp, #16]
 8015246:	9907      	ldr	r1, [sp, #28]
 8015248:	9801      	ldr	r0, [sp, #4]
 801524a:	f7fc fe4b 	bl	8011ee4 <strncmp>
 801524e:	2800      	cmp	r0, #0
 8015250:	d000      	beq.n	8015254 <__gethex+0x5e>
 8015252:	e06d      	b.n	8015330 <__gethex+0x13a>
 8015254:	9b01      	ldr	r3, [sp, #4]
 8015256:	9a04      	ldr	r2, [sp, #16]
 8015258:	189c      	adds	r4, r3, r2
 801525a:	7820      	ldrb	r0, [r4, #0]
 801525c:	f7ff ffb6 	bl	80151cc <__hexdig_fun>
 8015260:	2800      	cmp	r0, #0
 8015262:	d069      	beq.n	8015338 <__gethex+0x142>
 8015264:	9401      	str	r4, [sp, #4]
 8015266:	9b01      	ldr	r3, [sp, #4]
 8015268:	7818      	ldrb	r0, [r3, #0]
 801526a:	2830      	cmp	r0, #48	; 0x30
 801526c:	d009      	beq.n	8015282 <__gethex+0x8c>
 801526e:	f7ff ffad 	bl	80151cc <__hexdig_fun>
 8015272:	4243      	negs	r3, r0
 8015274:	4143      	adcs	r3, r0
 8015276:	9303      	str	r3, [sp, #12]
 8015278:	2301      	movs	r3, #1
 801527a:	0026      	movs	r6, r4
 801527c:	9308      	str	r3, [sp, #32]
 801527e:	9c01      	ldr	r4, [sp, #4]
 8015280:	e004      	b.n	801528c <__gethex+0x96>
 8015282:	9b01      	ldr	r3, [sp, #4]
 8015284:	3301      	adds	r3, #1
 8015286:	9301      	str	r3, [sp, #4]
 8015288:	e7ed      	b.n	8015266 <__gethex+0x70>
 801528a:	3401      	adds	r4, #1
 801528c:	7820      	ldrb	r0, [r4, #0]
 801528e:	f7ff ff9d 	bl	80151cc <__hexdig_fun>
 8015292:	2800      	cmp	r0, #0
 8015294:	d1f9      	bne.n	801528a <__gethex+0x94>
 8015296:	9a04      	ldr	r2, [sp, #16]
 8015298:	9907      	ldr	r1, [sp, #28]
 801529a:	0020      	movs	r0, r4
 801529c:	f7fc fe22 	bl	8011ee4 <strncmp>
 80152a0:	2800      	cmp	r0, #0
 80152a2:	d109      	bne.n	80152b8 <__gethex+0xc2>
 80152a4:	2e00      	cmp	r6, #0
 80152a6:	d10a      	bne.n	80152be <__gethex+0xc8>
 80152a8:	9b04      	ldr	r3, [sp, #16]
 80152aa:	18e4      	adds	r4, r4, r3
 80152ac:	0026      	movs	r6, r4
 80152ae:	7820      	ldrb	r0, [r4, #0]
 80152b0:	f7ff ff8c 	bl	80151cc <__hexdig_fun>
 80152b4:	2800      	cmp	r0, #0
 80152b6:	d139      	bne.n	801532c <__gethex+0x136>
 80152b8:	2700      	movs	r7, #0
 80152ba:	42be      	cmp	r6, r7
 80152bc:	d001      	beq.n	80152c2 <__gethex+0xcc>
 80152be:	1b37      	subs	r7, r6, r4
 80152c0:	00bf      	lsls	r7, r7, #2
 80152c2:	7823      	ldrb	r3, [r4, #0]
 80152c4:	2b50      	cmp	r3, #80	; 0x50
 80152c6:	d001      	beq.n	80152cc <__gethex+0xd6>
 80152c8:	2b70      	cmp	r3, #112	; 0x70
 80152ca:	d142      	bne.n	8015352 <__gethex+0x15c>
 80152cc:	7863      	ldrb	r3, [r4, #1]
 80152ce:	2b2b      	cmp	r3, #43	; 0x2b
 80152d0:	d034      	beq.n	801533c <__gethex+0x146>
 80152d2:	2b2d      	cmp	r3, #45	; 0x2d
 80152d4:	d036      	beq.n	8015344 <__gethex+0x14e>
 80152d6:	2300      	movs	r3, #0
 80152d8:	1c66      	adds	r6, r4, #1
 80152da:	9306      	str	r3, [sp, #24]
 80152dc:	7830      	ldrb	r0, [r6, #0]
 80152de:	f7ff ff75 	bl	80151cc <__hexdig_fun>
 80152e2:	1e43      	subs	r3, r0, #1
 80152e4:	b2db      	uxtb	r3, r3
 80152e6:	2b18      	cmp	r3, #24
 80152e8:	d833      	bhi.n	8015352 <__gethex+0x15c>
 80152ea:	3810      	subs	r0, #16
 80152ec:	0005      	movs	r5, r0
 80152ee:	3601      	adds	r6, #1
 80152f0:	7830      	ldrb	r0, [r6, #0]
 80152f2:	f7ff ff6b 	bl	80151cc <__hexdig_fun>
 80152f6:	1e43      	subs	r3, r0, #1
 80152f8:	b2db      	uxtb	r3, r3
 80152fa:	2b18      	cmp	r3, #24
 80152fc:	d924      	bls.n	8015348 <__gethex+0x152>
 80152fe:	9b06      	ldr	r3, [sp, #24]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d000      	beq.n	8015306 <__gethex+0x110>
 8015304:	426d      	negs	r5, r5
 8015306:	197f      	adds	r7, r7, r5
 8015308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801530a:	601e      	str	r6, [r3, #0]
 801530c:	9b03      	ldr	r3, [sp, #12]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d021      	beq.n	8015356 <__gethex+0x160>
 8015312:	9b08      	ldr	r3, [sp, #32]
 8015314:	2606      	movs	r6, #6
 8015316:	425a      	negs	r2, r3
 8015318:	4153      	adcs	r3, r2
 801531a:	425b      	negs	r3, r3
 801531c:	401e      	ands	r6, r3
 801531e:	0030      	movs	r0, r6
 8015320:	b00d      	add	sp, #52	; 0x34
 8015322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015324:	2300      	movs	r3, #0
 8015326:	9303      	str	r3, [sp, #12]
 8015328:	001e      	movs	r6, r3
 801532a:	e7a8      	b.n	801527e <__gethex+0x88>
 801532c:	3401      	adds	r4, #1
 801532e:	e7be      	b.n	80152ae <__gethex+0xb8>
 8015330:	9c01      	ldr	r4, [sp, #4]
 8015332:	2301      	movs	r3, #1
 8015334:	9303      	str	r3, [sp, #12]
 8015336:	e7c4      	b.n	80152c2 <__gethex+0xcc>
 8015338:	0007      	movs	r7, r0
 801533a:	e7fa      	b.n	8015332 <__gethex+0x13c>
 801533c:	2300      	movs	r3, #0
 801533e:	9306      	str	r3, [sp, #24]
 8015340:	1ca6      	adds	r6, r4, #2
 8015342:	e7cb      	b.n	80152dc <__gethex+0xe6>
 8015344:	2301      	movs	r3, #1
 8015346:	e7fa      	b.n	801533e <__gethex+0x148>
 8015348:	230a      	movs	r3, #10
 801534a:	435d      	muls	r5, r3
 801534c:	182d      	adds	r5, r5, r0
 801534e:	3d10      	subs	r5, #16
 8015350:	e7cd      	b.n	80152ee <__gethex+0xf8>
 8015352:	0026      	movs	r6, r4
 8015354:	e7d8      	b.n	8015308 <__gethex+0x112>
 8015356:	9b01      	ldr	r3, [sp, #4]
 8015358:	9903      	ldr	r1, [sp, #12]
 801535a:	1ae3      	subs	r3, r4, r3
 801535c:	3b01      	subs	r3, #1
 801535e:	2b07      	cmp	r3, #7
 8015360:	dc47      	bgt.n	80153f2 <__gethex+0x1fc>
 8015362:	9805      	ldr	r0, [sp, #20]
 8015364:	f000 fa5e 	bl	8015824 <_Balloc>
 8015368:	0003      	movs	r3, r0
 801536a:	3314      	adds	r3, #20
 801536c:	9303      	str	r3, [sp, #12]
 801536e:	9308      	str	r3, [sp, #32]
 8015370:	2300      	movs	r3, #0
 8015372:	0005      	movs	r5, r0
 8015374:	001e      	movs	r6, r3
 8015376:	9306      	str	r3, [sp, #24]
 8015378:	9b01      	ldr	r3, [sp, #4]
 801537a:	42a3      	cmp	r3, r4
 801537c:	d33c      	bcc.n	80153f8 <__gethex+0x202>
 801537e:	9c08      	ldr	r4, [sp, #32]
 8015380:	9b03      	ldr	r3, [sp, #12]
 8015382:	c440      	stmia	r4!, {r6}
 8015384:	1ae4      	subs	r4, r4, r3
 8015386:	10a4      	asrs	r4, r4, #2
 8015388:	612c      	str	r4, [r5, #16]
 801538a:	0030      	movs	r0, r6
 801538c:	f000 faf8 	bl	8015980 <__hi0bits>
 8015390:	9b02      	ldr	r3, [sp, #8]
 8015392:	0164      	lsls	r4, r4, #5
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	1a26      	subs	r6, r4, r0
 8015398:	9301      	str	r3, [sp, #4]
 801539a:	429e      	cmp	r6, r3
 801539c:	dd5f      	ble.n	801545e <__gethex+0x268>
 801539e:	1af6      	subs	r6, r6, r3
 80153a0:	0031      	movs	r1, r6
 80153a2:	0028      	movs	r0, r5
 80153a4:	f000 fde3 	bl	8015f6e <__any_on>
 80153a8:	1e04      	subs	r4, r0, #0
 80153aa:	d00f      	beq.n	80153cc <__gethex+0x1d6>
 80153ac:	2401      	movs	r4, #1
 80153ae:	211f      	movs	r1, #31
 80153b0:	0020      	movs	r0, r4
 80153b2:	1e73      	subs	r3, r6, #1
 80153b4:	4019      	ands	r1, r3
 80153b6:	4088      	lsls	r0, r1
 80153b8:	0001      	movs	r1, r0
 80153ba:	115a      	asrs	r2, r3, #5
 80153bc:	9803      	ldr	r0, [sp, #12]
 80153be:	0092      	lsls	r2, r2, #2
 80153c0:	5812      	ldr	r2, [r2, r0]
 80153c2:	420a      	tst	r2, r1
 80153c4:	d002      	beq.n	80153cc <__gethex+0x1d6>
 80153c6:	42a3      	cmp	r3, r4
 80153c8:	dc41      	bgt.n	801544e <__gethex+0x258>
 80153ca:	2402      	movs	r4, #2
 80153cc:	0031      	movs	r1, r6
 80153ce:	0028      	movs	r0, r5
 80153d0:	f7ff fec8 	bl	8015164 <rshift>
 80153d4:	19bf      	adds	r7, r7, r6
 80153d6:	9b02      	ldr	r3, [sp, #8]
 80153d8:	689b      	ldr	r3, [r3, #8]
 80153da:	9304      	str	r3, [sp, #16]
 80153dc:	42bb      	cmp	r3, r7
 80153de:	da4e      	bge.n	801547e <__gethex+0x288>
 80153e0:	0029      	movs	r1, r5
 80153e2:	9805      	ldr	r0, [sp, #20]
 80153e4:	f000 fa46 	bl	8015874 <_Bfree>
 80153e8:	2300      	movs	r3, #0
 80153ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80153ec:	26a3      	movs	r6, #163	; 0xa3
 80153ee:	6013      	str	r3, [r2, #0]
 80153f0:	e795      	b.n	801531e <__gethex+0x128>
 80153f2:	3101      	adds	r1, #1
 80153f4:	105b      	asrs	r3, r3, #1
 80153f6:	e7b2      	b.n	801535e <__gethex+0x168>
 80153f8:	1e63      	subs	r3, r4, #1
 80153fa:	9309      	str	r3, [sp, #36]	; 0x24
 80153fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80153fe:	781b      	ldrb	r3, [r3, #0]
 8015400:	4293      	cmp	r3, r2
 8015402:	d015      	beq.n	8015430 <__gethex+0x23a>
 8015404:	9b06      	ldr	r3, [sp, #24]
 8015406:	2b20      	cmp	r3, #32
 8015408:	d105      	bne.n	8015416 <__gethex+0x220>
 801540a:	9b08      	ldr	r3, [sp, #32]
 801540c:	601e      	str	r6, [r3, #0]
 801540e:	2600      	movs	r6, #0
 8015410:	3304      	adds	r3, #4
 8015412:	9308      	str	r3, [sp, #32]
 8015414:	9606      	str	r6, [sp, #24]
 8015416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015418:	7818      	ldrb	r0, [r3, #0]
 801541a:	f7ff fed7 	bl	80151cc <__hexdig_fun>
 801541e:	230f      	movs	r3, #15
 8015420:	4018      	ands	r0, r3
 8015422:	9b06      	ldr	r3, [sp, #24]
 8015424:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015426:	4098      	lsls	r0, r3
 8015428:	3304      	adds	r3, #4
 801542a:	4306      	orrs	r6, r0
 801542c:	9306      	str	r3, [sp, #24]
 801542e:	e7a3      	b.n	8015378 <__gethex+0x182>
 8015430:	2301      	movs	r3, #1
 8015432:	9a04      	ldr	r2, [sp, #16]
 8015434:	1a9c      	subs	r4, r3, r2
 8015436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015438:	191c      	adds	r4, r3, r4
 801543a:	9b01      	ldr	r3, [sp, #4]
 801543c:	429c      	cmp	r4, r3
 801543e:	d3e1      	bcc.n	8015404 <__gethex+0x20e>
 8015440:	9907      	ldr	r1, [sp, #28]
 8015442:	0020      	movs	r0, r4
 8015444:	f7fc fd4e 	bl	8011ee4 <strncmp>
 8015448:	2800      	cmp	r0, #0
 801544a:	d1db      	bne.n	8015404 <__gethex+0x20e>
 801544c:	e794      	b.n	8015378 <__gethex+0x182>
 801544e:	1eb1      	subs	r1, r6, #2
 8015450:	0028      	movs	r0, r5
 8015452:	f000 fd8c 	bl	8015f6e <__any_on>
 8015456:	2800      	cmp	r0, #0
 8015458:	d0b7      	beq.n	80153ca <__gethex+0x1d4>
 801545a:	2403      	movs	r4, #3
 801545c:	e7b6      	b.n	80153cc <__gethex+0x1d6>
 801545e:	9b01      	ldr	r3, [sp, #4]
 8015460:	2400      	movs	r4, #0
 8015462:	429e      	cmp	r6, r3
 8015464:	dab7      	bge.n	80153d6 <__gethex+0x1e0>
 8015466:	1b9e      	subs	r6, r3, r6
 8015468:	0029      	movs	r1, r5
 801546a:	0032      	movs	r2, r6
 801546c:	9805      	ldr	r0, [sp, #20]
 801546e:	f000 fbab 	bl	8015bc8 <__lshift>
 8015472:	0003      	movs	r3, r0
 8015474:	3314      	adds	r3, #20
 8015476:	0005      	movs	r5, r0
 8015478:	1bbf      	subs	r7, r7, r6
 801547a:	9303      	str	r3, [sp, #12]
 801547c:	e7ab      	b.n	80153d6 <__gethex+0x1e0>
 801547e:	9b02      	ldr	r3, [sp, #8]
 8015480:	685e      	ldr	r6, [r3, #4]
 8015482:	42be      	cmp	r6, r7
 8015484:	dd6b      	ble.n	801555e <__gethex+0x368>
 8015486:	9b01      	ldr	r3, [sp, #4]
 8015488:	1bf6      	subs	r6, r6, r7
 801548a:	42b3      	cmp	r3, r6
 801548c:	dc32      	bgt.n	80154f4 <__gethex+0x2fe>
 801548e:	9b02      	ldr	r3, [sp, #8]
 8015490:	68db      	ldr	r3, [r3, #12]
 8015492:	2b02      	cmp	r3, #2
 8015494:	d026      	beq.n	80154e4 <__gethex+0x2ee>
 8015496:	2b03      	cmp	r3, #3
 8015498:	d028      	beq.n	80154ec <__gethex+0x2f6>
 801549a:	2b01      	cmp	r3, #1
 801549c:	d119      	bne.n	80154d2 <__gethex+0x2dc>
 801549e:	9b01      	ldr	r3, [sp, #4]
 80154a0:	42b3      	cmp	r3, r6
 80154a2:	d116      	bne.n	80154d2 <__gethex+0x2dc>
 80154a4:	2b01      	cmp	r3, #1
 80154a6:	dc0d      	bgt.n	80154c4 <__gethex+0x2ce>
 80154a8:	9b02      	ldr	r3, [sp, #8]
 80154aa:	2662      	movs	r6, #98	; 0x62
 80154ac:	685b      	ldr	r3, [r3, #4]
 80154ae:	9301      	str	r3, [sp, #4]
 80154b0:	9a01      	ldr	r2, [sp, #4]
 80154b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154b4:	601a      	str	r2, [r3, #0]
 80154b6:	2301      	movs	r3, #1
 80154b8:	9a03      	ldr	r2, [sp, #12]
 80154ba:	612b      	str	r3, [r5, #16]
 80154bc:	6013      	str	r3, [r2, #0]
 80154be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80154c0:	601d      	str	r5, [r3, #0]
 80154c2:	e72c      	b.n	801531e <__gethex+0x128>
 80154c4:	9901      	ldr	r1, [sp, #4]
 80154c6:	0028      	movs	r0, r5
 80154c8:	3901      	subs	r1, #1
 80154ca:	f000 fd50 	bl	8015f6e <__any_on>
 80154ce:	2800      	cmp	r0, #0
 80154d0:	d1ea      	bne.n	80154a8 <__gethex+0x2b2>
 80154d2:	0029      	movs	r1, r5
 80154d4:	9805      	ldr	r0, [sp, #20]
 80154d6:	f000 f9cd 	bl	8015874 <_Bfree>
 80154da:	2300      	movs	r3, #0
 80154dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80154de:	2650      	movs	r6, #80	; 0x50
 80154e0:	6013      	str	r3, [r2, #0]
 80154e2:	e71c      	b.n	801531e <__gethex+0x128>
 80154e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d0de      	beq.n	80154a8 <__gethex+0x2b2>
 80154ea:	e7f2      	b.n	80154d2 <__gethex+0x2dc>
 80154ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d1da      	bne.n	80154a8 <__gethex+0x2b2>
 80154f2:	e7ee      	b.n	80154d2 <__gethex+0x2dc>
 80154f4:	1e77      	subs	r7, r6, #1
 80154f6:	2c00      	cmp	r4, #0
 80154f8:	d12f      	bne.n	801555a <__gethex+0x364>
 80154fa:	2f00      	cmp	r7, #0
 80154fc:	d004      	beq.n	8015508 <__gethex+0x312>
 80154fe:	0039      	movs	r1, r7
 8015500:	0028      	movs	r0, r5
 8015502:	f000 fd34 	bl	8015f6e <__any_on>
 8015506:	0004      	movs	r4, r0
 8015508:	231f      	movs	r3, #31
 801550a:	117a      	asrs	r2, r7, #5
 801550c:	401f      	ands	r7, r3
 801550e:	3b1e      	subs	r3, #30
 8015510:	40bb      	lsls	r3, r7
 8015512:	9903      	ldr	r1, [sp, #12]
 8015514:	0092      	lsls	r2, r2, #2
 8015516:	5852      	ldr	r2, [r2, r1]
 8015518:	421a      	tst	r2, r3
 801551a:	d001      	beq.n	8015520 <__gethex+0x32a>
 801551c:	2302      	movs	r3, #2
 801551e:	431c      	orrs	r4, r3
 8015520:	9b01      	ldr	r3, [sp, #4]
 8015522:	0031      	movs	r1, r6
 8015524:	1b9b      	subs	r3, r3, r6
 8015526:	2602      	movs	r6, #2
 8015528:	0028      	movs	r0, r5
 801552a:	9301      	str	r3, [sp, #4]
 801552c:	f7ff fe1a 	bl	8015164 <rshift>
 8015530:	9b02      	ldr	r3, [sp, #8]
 8015532:	685f      	ldr	r7, [r3, #4]
 8015534:	2c00      	cmp	r4, #0
 8015536:	d040      	beq.n	80155ba <__gethex+0x3c4>
 8015538:	9b02      	ldr	r3, [sp, #8]
 801553a:	68db      	ldr	r3, [r3, #12]
 801553c:	2b02      	cmp	r3, #2
 801553e:	d010      	beq.n	8015562 <__gethex+0x36c>
 8015540:	2b03      	cmp	r3, #3
 8015542:	d012      	beq.n	801556a <__gethex+0x374>
 8015544:	2b01      	cmp	r3, #1
 8015546:	d106      	bne.n	8015556 <__gethex+0x360>
 8015548:	07a2      	lsls	r2, r4, #30
 801554a:	d504      	bpl.n	8015556 <__gethex+0x360>
 801554c:	9a03      	ldr	r2, [sp, #12]
 801554e:	6812      	ldr	r2, [r2, #0]
 8015550:	4314      	orrs	r4, r2
 8015552:	421c      	tst	r4, r3
 8015554:	d10c      	bne.n	8015570 <__gethex+0x37a>
 8015556:	2310      	movs	r3, #16
 8015558:	e02e      	b.n	80155b8 <__gethex+0x3c2>
 801555a:	2401      	movs	r4, #1
 801555c:	e7d4      	b.n	8015508 <__gethex+0x312>
 801555e:	2601      	movs	r6, #1
 8015560:	e7e8      	b.n	8015534 <__gethex+0x33e>
 8015562:	2301      	movs	r3, #1
 8015564:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015566:	1a9b      	subs	r3, r3, r2
 8015568:	9313      	str	r3, [sp, #76]	; 0x4c
 801556a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801556c:	2b00      	cmp	r3, #0
 801556e:	d0f2      	beq.n	8015556 <__gethex+0x360>
 8015570:	692c      	ldr	r4, [r5, #16]
 8015572:	00a3      	lsls	r3, r4, #2
 8015574:	9304      	str	r3, [sp, #16]
 8015576:	002b      	movs	r3, r5
 8015578:	00a2      	lsls	r2, r4, #2
 801557a:	3314      	adds	r3, #20
 801557c:	1899      	adds	r1, r3, r2
 801557e:	2200      	movs	r2, #0
 8015580:	4694      	mov	ip, r2
 8015582:	681a      	ldr	r2, [r3, #0]
 8015584:	1c50      	adds	r0, r2, #1
 8015586:	d01d      	beq.n	80155c4 <__gethex+0x3ce>
 8015588:	3201      	adds	r2, #1
 801558a:	601a      	str	r2, [r3, #0]
 801558c:	002b      	movs	r3, r5
 801558e:	3314      	adds	r3, #20
 8015590:	2e02      	cmp	r6, #2
 8015592:	d13a      	bne.n	801560a <__gethex+0x414>
 8015594:	9a02      	ldr	r2, [sp, #8]
 8015596:	9901      	ldr	r1, [sp, #4]
 8015598:	6812      	ldr	r2, [r2, #0]
 801559a:	3a01      	subs	r2, #1
 801559c:	428a      	cmp	r2, r1
 801559e:	d10a      	bne.n	80155b6 <__gethex+0x3c0>
 80155a0:	114a      	asrs	r2, r1, #5
 80155a2:	211f      	movs	r1, #31
 80155a4:	9801      	ldr	r0, [sp, #4]
 80155a6:	0092      	lsls	r2, r2, #2
 80155a8:	4001      	ands	r1, r0
 80155aa:	2001      	movs	r0, #1
 80155ac:	0004      	movs	r4, r0
 80155ae:	408c      	lsls	r4, r1
 80155b0:	58d3      	ldr	r3, [r2, r3]
 80155b2:	4223      	tst	r3, r4
 80155b4:	d148      	bne.n	8015648 <__gethex+0x452>
 80155b6:	2320      	movs	r3, #32
 80155b8:	431e      	orrs	r6, r3
 80155ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80155bc:	601d      	str	r5, [r3, #0]
 80155be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155c0:	601f      	str	r7, [r3, #0]
 80155c2:	e6ac      	b.n	801531e <__gethex+0x128>
 80155c4:	4662      	mov	r2, ip
 80155c6:	c304      	stmia	r3!, {r2}
 80155c8:	4299      	cmp	r1, r3
 80155ca:	d8da      	bhi.n	8015582 <__gethex+0x38c>
 80155cc:	68ab      	ldr	r3, [r5, #8]
 80155ce:	429c      	cmp	r4, r3
 80155d0:	db12      	blt.n	80155f8 <__gethex+0x402>
 80155d2:	686b      	ldr	r3, [r5, #4]
 80155d4:	9805      	ldr	r0, [sp, #20]
 80155d6:	1c59      	adds	r1, r3, #1
 80155d8:	f000 f924 	bl	8015824 <_Balloc>
 80155dc:	0029      	movs	r1, r5
 80155de:	692b      	ldr	r3, [r5, #16]
 80155e0:	9003      	str	r0, [sp, #12]
 80155e2:	1c9a      	adds	r2, r3, #2
 80155e4:	0092      	lsls	r2, r2, #2
 80155e6:	310c      	adds	r1, #12
 80155e8:	300c      	adds	r0, #12
 80155ea:	f7fc fa34 	bl	8011a56 <memcpy>
 80155ee:	0029      	movs	r1, r5
 80155f0:	9805      	ldr	r0, [sp, #20]
 80155f2:	f000 f93f 	bl	8015874 <_Bfree>
 80155f6:	9d03      	ldr	r5, [sp, #12]
 80155f8:	692b      	ldr	r3, [r5, #16]
 80155fa:	1c5a      	adds	r2, r3, #1
 80155fc:	612a      	str	r2, [r5, #16]
 80155fe:	2201      	movs	r2, #1
 8015600:	3304      	adds	r3, #4
 8015602:	009b      	lsls	r3, r3, #2
 8015604:	18eb      	adds	r3, r5, r3
 8015606:	605a      	str	r2, [r3, #4]
 8015608:	e7c0      	b.n	801558c <__gethex+0x396>
 801560a:	692a      	ldr	r2, [r5, #16]
 801560c:	42a2      	cmp	r2, r4
 801560e:	dd0a      	ble.n	8015626 <__gethex+0x430>
 8015610:	2101      	movs	r1, #1
 8015612:	0028      	movs	r0, r5
 8015614:	f7ff fda6 	bl	8015164 <rshift>
 8015618:	9b02      	ldr	r3, [sp, #8]
 801561a:	3701      	adds	r7, #1
 801561c:	689b      	ldr	r3, [r3, #8]
 801561e:	2601      	movs	r6, #1
 8015620:	42bb      	cmp	r3, r7
 8015622:	dac8      	bge.n	80155b6 <__gethex+0x3c0>
 8015624:	e6dc      	b.n	80153e0 <__gethex+0x1ea>
 8015626:	241f      	movs	r4, #31
 8015628:	9a01      	ldr	r2, [sp, #4]
 801562a:	2601      	movs	r6, #1
 801562c:	4022      	ands	r2, r4
 801562e:	1e14      	subs	r4, r2, #0
 8015630:	d0c1      	beq.n	80155b6 <__gethex+0x3c0>
 8015632:	9a04      	ldr	r2, [sp, #16]
 8015634:	189b      	adds	r3, r3, r2
 8015636:	3b04      	subs	r3, #4
 8015638:	6818      	ldr	r0, [r3, #0]
 801563a:	f000 f9a1 	bl	8015980 <__hi0bits>
 801563e:	2120      	movs	r1, #32
 8015640:	1b0c      	subs	r4, r1, r4
 8015642:	42a0      	cmp	r0, r4
 8015644:	dbe4      	blt.n	8015610 <__gethex+0x41a>
 8015646:	e7b6      	b.n	80155b6 <__gethex+0x3c0>
 8015648:	0006      	movs	r6, r0
 801564a:	e7b4      	b.n	80155b6 <__gethex+0x3c0>

0801564c <L_shift>:
 801564c:	2308      	movs	r3, #8
 801564e:	b570      	push	{r4, r5, r6, lr}
 8015650:	2520      	movs	r5, #32
 8015652:	1a9a      	subs	r2, r3, r2
 8015654:	0092      	lsls	r2, r2, #2
 8015656:	1aad      	subs	r5, r5, r2
 8015658:	6843      	ldr	r3, [r0, #4]
 801565a:	6806      	ldr	r6, [r0, #0]
 801565c:	001c      	movs	r4, r3
 801565e:	40ac      	lsls	r4, r5
 8015660:	40d3      	lsrs	r3, r2
 8015662:	4334      	orrs	r4, r6
 8015664:	6004      	str	r4, [r0, #0]
 8015666:	6043      	str	r3, [r0, #4]
 8015668:	3004      	adds	r0, #4
 801566a:	4288      	cmp	r0, r1
 801566c:	d3f4      	bcc.n	8015658 <L_shift+0xc>
 801566e:	bd70      	pop	{r4, r5, r6, pc}

08015670 <__match>:
 8015670:	b530      	push	{r4, r5, lr}
 8015672:	6803      	ldr	r3, [r0, #0]
 8015674:	780c      	ldrb	r4, [r1, #0]
 8015676:	3301      	adds	r3, #1
 8015678:	2c00      	cmp	r4, #0
 801567a:	d102      	bne.n	8015682 <__match+0x12>
 801567c:	6003      	str	r3, [r0, #0]
 801567e:	2001      	movs	r0, #1
 8015680:	bd30      	pop	{r4, r5, pc}
 8015682:	781a      	ldrb	r2, [r3, #0]
 8015684:	0015      	movs	r5, r2
 8015686:	3d41      	subs	r5, #65	; 0x41
 8015688:	2d19      	cmp	r5, #25
 801568a:	d800      	bhi.n	801568e <__match+0x1e>
 801568c:	3220      	adds	r2, #32
 801568e:	3101      	adds	r1, #1
 8015690:	42a2      	cmp	r2, r4
 8015692:	d0ef      	beq.n	8015674 <__match+0x4>
 8015694:	2000      	movs	r0, #0
 8015696:	e7f3      	b.n	8015680 <__match+0x10>

08015698 <__hexnan>:
 8015698:	b5f0      	push	{r4, r5, r6, r7, lr}
 801569a:	b08b      	sub	sp, #44	; 0x2c
 801569c:	9201      	str	r2, [sp, #4]
 801569e:	680a      	ldr	r2, [r1, #0]
 80156a0:	9901      	ldr	r1, [sp, #4]
 80156a2:	1153      	asrs	r3, r2, #5
 80156a4:	009b      	lsls	r3, r3, #2
 80156a6:	18cb      	adds	r3, r1, r3
 80156a8:	9304      	str	r3, [sp, #16]
 80156aa:	231f      	movs	r3, #31
 80156ac:	401a      	ands	r2, r3
 80156ae:	9008      	str	r0, [sp, #32]
 80156b0:	9206      	str	r2, [sp, #24]
 80156b2:	d002      	beq.n	80156ba <__hexnan+0x22>
 80156b4:	9b04      	ldr	r3, [sp, #16]
 80156b6:	3304      	adds	r3, #4
 80156b8:	9304      	str	r3, [sp, #16]
 80156ba:	9b04      	ldr	r3, [sp, #16]
 80156bc:	2500      	movs	r5, #0
 80156be:	1f1e      	subs	r6, r3, #4
 80156c0:	0037      	movs	r7, r6
 80156c2:	0034      	movs	r4, r6
 80156c4:	9b08      	ldr	r3, [sp, #32]
 80156c6:	6035      	str	r5, [r6, #0]
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	9507      	str	r5, [sp, #28]
 80156cc:	9305      	str	r3, [sp, #20]
 80156ce:	9502      	str	r5, [sp, #8]
 80156d0:	9b05      	ldr	r3, [sp, #20]
 80156d2:	3301      	adds	r3, #1
 80156d4:	9309      	str	r3, [sp, #36]	; 0x24
 80156d6:	9b05      	ldr	r3, [sp, #20]
 80156d8:	785b      	ldrb	r3, [r3, #1]
 80156da:	9303      	str	r3, [sp, #12]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d028      	beq.n	8015732 <__hexnan+0x9a>
 80156e0:	9803      	ldr	r0, [sp, #12]
 80156e2:	f7ff fd73 	bl	80151cc <__hexdig_fun>
 80156e6:	2800      	cmp	r0, #0
 80156e8:	d145      	bne.n	8015776 <__hexnan+0xde>
 80156ea:	9b03      	ldr	r3, [sp, #12]
 80156ec:	2b20      	cmp	r3, #32
 80156ee:	d819      	bhi.n	8015724 <__hexnan+0x8c>
 80156f0:	9b02      	ldr	r3, [sp, #8]
 80156f2:	9a07      	ldr	r2, [sp, #28]
 80156f4:	4293      	cmp	r3, r2
 80156f6:	dd12      	ble.n	801571e <__hexnan+0x86>
 80156f8:	42bc      	cmp	r4, r7
 80156fa:	d206      	bcs.n	801570a <__hexnan+0x72>
 80156fc:	2d07      	cmp	r5, #7
 80156fe:	dc04      	bgt.n	801570a <__hexnan+0x72>
 8015700:	002a      	movs	r2, r5
 8015702:	0039      	movs	r1, r7
 8015704:	0020      	movs	r0, r4
 8015706:	f7ff ffa1 	bl	801564c <L_shift>
 801570a:	9b01      	ldr	r3, [sp, #4]
 801570c:	2508      	movs	r5, #8
 801570e:	429c      	cmp	r4, r3
 8015710:	d905      	bls.n	801571e <__hexnan+0x86>
 8015712:	1f27      	subs	r7, r4, #4
 8015714:	2500      	movs	r5, #0
 8015716:	003c      	movs	r4, r7
 8015718:	9b02      	ldr	r3, [sp, #8]
 801571a:	603d      	str	r5, [r7, #0]
 801571c:	9307      	str	r3, [sp, #28]
 801571e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015720:	9305      	str	r3, [sp, #20]
 8015722:	e7d5      	b.n	80156d0 <__hexnan+0x38>
 8015724:	9b03      	ldr	r3, [sp, #12]
 8015726:	2b29      	cmp	r3, #41	; 0x29
 8015728:	d14a      	bne.n	80157c0 <__hexnan+0x128>
 801572a:	9b05      	ldr	r3, [sp, #20]
 801572c:	9a08      	ldr	r2, [sp, #32]
 801572e:	3302      	adds	r3, #2
 8015730:	6013      	str	r3, [r2, #0]
 8015732:	9b02      	ldr	r3, [sp, #8]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d043      	beq.n	80157c0 <__hexnan+0x128>
 8015738:	42bc      	cmp	r4, r7
 801573a:	d206      	bcs.n	801574a <__hexnan+0xb2>
 801573c:	2d07      	cmp	r5, #7
 801573e:	dc04      	bgt.n	801574a <__hexnan+0xb2>
 8015740:	002a      	movs	r2, r5
 8015742:	0039      	movs	r1, r7
 8015744:	0020      	movs	r0, r4
 8015746:	f7ff ff81 	bl	801564c <L_shift>
 801574a:	9b01      	ldr	r3, [sp, #4]
 801574c:	429c      	cmp	r4, r3
 801574e:	d926      	bls.n	801579e <__hexnan+0x106>
 8015750:	cc04      	ldmia	r4!, {r2}
 8015752:	601a      	str	r2, [r3, #0]
 8015754:	3304      	adds	r3, #4
 8015756:	42a6      	cmp	r6, r4
 8015758:	d2fa      	bcs.n	8015750 <__hexnan+0xb8>
 801575a:	2200      	movs	r2, #0
 801575c:	c304      	stmia	r3!, {r2}
 801575e:	429e      	cmp	r6, r3
 8015760:	d2fc      	bcs.n	801575c <__hexnan+0xc4>
 8015762:	6833      	ldr	r3, [r6, #0]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d104      	bne.n	8015772 <__hexnan+0xda>
 8015768:	9b01      	ldr	r3, [sp, #4]
 801576a:	429e      	cmp	r6, r3
 801576c:	d126      	bne.n	80157bc <__hexnan+0x124>
 801576e:	2301      	movs	r3, #1
 8015770:	6033      	str	r3, [r6, #0]
 8015772:	2005      	movs	r0, #5
 8015774:	e025      	b.n	80157c2 <__hexnan+0x12a>
 8015776:	9b02      	ldr	r3, [sp, #8]
 8015778:	3501      	adds	r5, #1
 801577a:	3301      	adds	r3, #1
 801577c:	9302      	str	r3, [sp, #8]
 801577e:	2d08      	cmp	r5, #8
 8015780:	dd06      	ble.n	8015790 <__hexnan+0xf8>
 8015782:	9b01      	ldr	r3, [sp, #4]
 8015784:	429c      	cmp	r4, r3
 8015786:	d9ca      	bls.n	801571e <__hexnan+0x86>
 8015788:	2300      	movs	r3, #0
 801578a:	2501      	movs	r5, #1
 801578c:	3c04      	subs	r4, #4
 801578e:	6023      	str	r3, [r4, #0]
 8015790:	220f      	movs	r2, #15
 8015792:	6823      	ldr	r3, [r4, #0]
 8015794:	4010      	ands	r0, r2
 8015796:	011b      	lsls	r3, r3, #4
 8015798:	4318      	orrs	r0, r3
 801579a:	6020      	str	r0, [r4, #0]
 801579c:	e7bf      	b.n	801571e <__hexnan+0x86>
 801579e:	9b06      	ldr	r3, [sp, #24]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d0de      	beq.n	8015762 <__hexnan+0xca>
 80157a4:	2120      	movs	r1, #32
 80157a6:	9a06      	ldr	r2, [sp, #24]
 80157a8:	9b04      	ldr	r3, [sp, #16]
 80157aa:	1a89      	subs	r1, r1, r2
 80157ac:	2201      	movs	r2, #1
 80157ae:	4252      	negs	r2, r2
 80157b0:	40ca      	lsrs	r2, r1
 80157b2:	3b04      	subs	r3, #4
 80157b4:	6819      	ldr	r1, [r3, #0]
 80157b6:	400a      	ands	r2, r1
 80157b8:	601a      	str	r2, [r3, #0]
 80157ba:	e7d2      	b.n	8015762 <__hexnan+0xca>
 80157bc:	3e04      	subs	r6, #4
 80157be:	e7d0      	b.n	8015762 <__hexnan+0xca>
 80157c0:	2004      	movs	r0, #4
 80157c2:	b00b      	add	sp, #44	; 0x2c
 80157c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080157c6 <__localeconv_l>:
 80157c6:	30f0      	adds	r0, #240	; 0xf0
 80157c8:	4770      	bx	lr
	...

080157cc <_localeconv_r>:
 80157cc:	4b03      	ldr	r3, [pc, #12]	; (80157dc <_localeconv_r+0x10>)
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80157d2:	2800      	cmp	r0, #0
 80157d4:	d100      	bne.n	80157d8 <_localeconv_r+0xc>
 80157d6:	4802      	ldr	r0, [pc, #8]	; (80157e0 <_localeconv_r+0x14>)
 80157d8:	30f0      	adds	r0, #240	; 0xf0
 80157da:	4770      	bx	lr
 80157dc:	200000a8 	.word	0x200000a8
 80157e0:	200004d8 	.word	0x200004d8

080157e4 <__retarget_lock_acquire_recursive>:
 80157e4:	4770      	bx	lr

080157e6 <__retarget_lock_release_recursive>:
 80157e6:	4770      	bx	lr

080157e8 <memchr>:
 80157e8:	b2c9      	uxtb	r1, r1
 80157ea:	1882      	adds	r2, r0, r2
 80157ec:	4290      	cmp	r0, r2
 80157ee:	d101      	bne.n	80157f4 <memchr+0xc>
 80157f0:	2000      	movs	r0, #0
 80157f2:	4770      	bx	lr
 80157f4:	7803      	ldrb	r3, [r0, #0]
 80157f6:	428b      	cmp	r3, r1
 80157f8:	d0fb      	beq.n	80157f2 <memchr+0xa>
 80157fa:	3001      	adds	r0, #1
 80157fc:	e7f6      	b.n	80157ec <memchr+0x4>

080157fe <memmove>:
 80157fe:	b510      	push	{r4, lr}
 8015800:	4288      	cmp	r0, r1
 8015802:	d902      	bls.n	801580a <memmove+0xc>
 8015804:	188b      	adds	r3, r1, r2
 8015806:	4298      	cmp	r0, r3
 8015808:	d303      	bcc.n	8015812 <memmove+0x14>
 801580a:	2300      	movs	r3, #0
 801580c:	e007      	b.n	801581e <memmove+0x20>
 801580e:	5c8b      	ldrb	r3, [r1, r2]
 8015810:	5483      	strb	r3, [r0, r2]
 8015812:	3a01      	subs	r2, #1
 8015814:	d2fb      	bcs.n	801580e <memmove+0x10>
 8015816:	bd10      	pop	{r4, pc}
 8015818:	5ccc      	ldrb	r4, [r1, r3]
 801581a:	54c4      	strb	r4, [r0, r3]
 801581c:	3301      	adds	r3, #1
 801581e:	429a      	cmp	r2, r3
 8015820:	d1fa      	bne.n	8015818 <memmove+0x1a>
 8015822:	e7f8      	b.n	8015816 <memmove+0x18>

08015824 <_Balloc>:
 8015824:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8015826:	b570      	push	{r4, r5, r6, lr}
 8015828:	0004      	movs	r4, r0
 801582a:	000d      	movs	r5, r1
 801582c:	2b00      	cmp	r3, #0
 801582e:	d012      	beq.n	8015856 <_Balloc+0x32>
 8015830:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8015832:	00ab      	lsls	r3, r5, #2
 8015834:	18d3      	adds	r3, r2, r3
 8015836:	6818      	ldr	r0, [r3, #0]
 8015838:	2800      	cmp	r0, #0
 801583a:	d115      	bne.n	8015868 <_Balloc+0x44>
 801583c:	2101      	movs	r1, #1
 801583e:	000e      	movs	r6, r1
 8015840:	40ae      	lsls	r6, r5
 8015842:	1d72      	adds	r2, r6, #5
 8015844:	0092      	lsls	r2, r2, #2
 8015846:	0020      	movs	r0, r4
 8015848:	f000 fcbe 	bl	80161c8 <_calloc_r>
 801584c:	2800      	cmp	r0, #0
 801584e:	d009      	beq.n	8015864 <_Balloc+0x40>
 8015850:	6045      	str	r5, [r0, #4]
 8015852:	6086      	str	r6, [r0, #8]
 8015854:	e00a      	b.n	801586c <_Balloc+0x48>
 8015856:	2221      	movs	r2, #33	; 0x21
 8015858:	2104      	movs	r1, #4
 801585a:	f000 fcb5 	bl	80161c8 <_calloc_r>
 801585e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8015860:	2800      	cmp	r0, #0
 8015862:	d1e5      	bne.n	8015830 <_Balloc+0xc>
 8015864:	2000      	movs	r0, #0
 8015866:	bd70      	pop	{r4, r5, r6, pc}
 8015868:	6802      	ldr	r2, [r0, #0]
 801586a:	601a      	str	r2, [r3, #0]
 801586c:	2300      	movs	r3, #0
 801586e:	6103      	str	r3, [r0, #16]
 8015870:	60c3      	str	r3, [r0, #12]
 8015872:	e7f8      	b.n	8015866 <_Balloc+0x42>

08015874 <_Bfree>:
 8015874:	2900      	cmp	r1, #0
 8015876:	d006      	beq.n	8015886 <_Bfree+0x12>
 8015878:	684b      	ldr	r3, [r1, #4]
 801587a:	009a      	lsls	r2, r3, #2
 801587c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801587e:	189b      	adds	r3, r3, r2
 8015880:	681a      	ldr	r2, [r3, #0]
 8015882:	600a      	str	r2, [r1, #0]
 8015884:	6019      	str	r1, [r3, #0]
 8015886:	4770      	bx	lr

08015888 <__multadd>:
 8015888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801588a:	001e      	movs	r6, r3
 801588c:	2314      	movs	r3, #20
 801588e:	469c      	mov	ip, r3
 8015890:	0007      	movs	r7, r0
 8015892:	000c      	movs	r4, r1
 8015894:	2000      	movs	r0, #0
 8015896:	690d      	ldr	r5, [r1, #16]
 8015898:	448c      	add	ip, r1
 801589a:	4663      	mov	r3, ip
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	3001      	adds	r0, #1
 80158a0:	b299      	uxth	r1, r3
 80158a2:	4663      	mov	r3, ip
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	4351      	muls	r1, r2
 80158a8:	0c1b      	lsrs	r3, r3, #16
 80158aa:	4353      	muls	r3, r2
 80158ac:	1989      	adds	r1, r1, r6
 80158ae:	0c0e      	lsrs	r6, r1, #16
 80158b0:	199b      	adds	r3, r3, r6
 80158b2:	b289      	uxth	r1, r1
 80158b4:	0c1e      	lsrs	r6, r3, #16
 80158b6:	041b      	lsls	r3, r3, #16
 80158b8:	185b      	adds	r3, r3, r1
 80158ba:	4661      	mov	r1, ip
 80158bc:	c108      	stmia	r1!, {r3}
 80158be:	468c      	mov	ip, r1
 80158c0:	4285      	cmp	r5, r0
 80158c2:	dcea      	bgt.n	801589a <__multadd+0x12>
 80158c4:	2e00      	cmp	r6, #0
 80158c6:	d01b      	beq.n	8015900 <__multadd+0x78>
 80158c8:	68a3      	ldr	r3, [r4, #8]
 80158ca:	42ab      	cmp	r3, r5
 80158cc:	dc12      	bgt.n	80158f4 <__multadd+0x6c>
 80158ce:	6863      	ldr	r3, [r4, #4]
 80158d0:	0038      	movs	r0, r7
 80158d2:	1c59      	adds	r1, r3, #1
 80158d4:	f7ff ffa6 	bl	8015824 <_Balloc>
 80158d8:	0021      	movs	r1, r4
 80158da:	6923      	ldr	r3, [r4, #16]
 80158dc:	9001      	str	r0, [sp, #4]
 80158de:	1c9a      	adds	r2, r3, #2
 80158e0:	0092      	lsls	r2, r2, #2
 80158e2:	310c      	adds	r1, #12
 80158e4:	300c      	adds	r0, #12
 80158e6:	f7fc f8b6 	bl	8011a56 <memcpy>
 80158ea:	0021      	movs	r1, r4
 80158ec:	0038      	movs	r0, r7
 80158ee:	f7ff ffc1 	bl	8015874 <_Bfree>
 80158f2:	9c01      	ldr	r4, [sp, #4]
 80158f4:	1d2b      	adds	r3, r5, #4
 80158f6:	009b      	lsls	r3, r3, #2
 80158f8:	18e3      	adds	r3, r4, r3
 80158fa:	3501      	adds	r5, #1
 80158fc:	605e      	str	r6, [r3, #4]
 80158fe:	6125      	str	r5, [r4, #16]
 8015900:	0020      	movs	r0, r4
 8015902:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08015904 <__s2b>:
 8015904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015906:	0006      	movs	r6, r0
 8015908:	0018      	movs	r0, r3
 801590a:	000c      	movs	r4, r1
 801590c:	3008      	adds	r0, #8
 801590e:	2109      	movs	r1, #9
 8015910:	9301      	str	r3, [sp, #4]
 8015912:	0015      	movs	r5, r2
 8015914:	f7ea fca6 	bl	8000264 <__divsi3>
 8015918:	2301      	movs	r3, #1
 801591a:	2100      	movs	r1, #0
 801591c:	4283      	cmp	r3, r0
 801591e:	db1f      	blt.n	8015960 <__s2b+0x5c>
 8015920:	0030      	movs	r0, r6
 8015922:	f7ff ff7f 	bl	8015824 <_Balloc>
 8015926:	9b08      	ldr	r3, [sp, #32]
 8015928:	6143      	str	r3, [r0, #20]
 801592a:	2301      	movs	r3, #1
 801592c:	6103      	str	r3, [r0, #16]
 801592e:	2d09      	cmp	r5, #9
 8015930:	dd19      	ble.n	8015966 <__s2b+0x62>
 8015932:	0023      	movs	r3, r4
 8015934:	3309      	adds	r3, #9
 8015936:	001f      	movs	r7, r3
 8015938:	9300      	str	r3, [sp, #0]
 801593a:	1964      	adds	r4, r4, r5
 801593c:	783b      	ldrb	r3, [r7, #0]
 801593e:	0001      	movs	r1, r0
 8015940:	3b30      	subs	r3, #48	; 0x30
 8015942:	220a      	movs	r2, #10
 8015944:	0030      	movs	r0, r6
 8015946:	3701      	adds	r7, #1
 8015948:	f7ff ff9e 	bl	8015888 <__multadd>
 801594c:	42a7      	cmp	r7, r4
 801594e:	d1f5      	bne.n	801593c <__s2b+0x38>
 8015950:	9b00      	ldr	r3, [sp, #0]
 8015952:	195c      	adds	r4, r3, r5
 8015954:	3c08      	subs	r4, #8
 8015956:	002f      	movs	r7, r5
 8015958:	9b01      	ldr	r3, [sp, #4]
 801595a:	429f      	cmp	r7, r3
 801595c:	db06      	blt.n	801596c <__s2b+0x68>
 801595e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015960:	005b      	lsls	r3, r3, #1
 8015962:	3101      	adds	r1, #1
 8015964:	e7da      	b.n	801591c <__s2b+0x18>
 8015966:	340a      	adds	r4, #10
 8015968:	2509      	movs	r5, #9
 801596a:	e7f4      	b.n	8015956 <__s2b+0x52>
 801596c:	1b63      	subs	r3, r4, r5
 801596e:	5ddb      	ldrb	r3, [r3, r7]
 8015970:	0001      	movs	r1, r0
 8015972:	3b30      	subs	r3, #48	; 0x30
 8015974:	220a      	movs	r2, #10
 8015976:	0030      	movs	r0, r6
 8015978:	f7ff ff86 	bl	8015888 <__multadd>
 801597c:	3701      	adds	r7, #1
 801597e:	e7eb      	b.n	8015958 <__s2b+0x54>

08015980 <__hi0bits>:
 8015980:	0003      	movs	r3, r0
 8015982:	0c02      	lsrs	r2, r0, #16
 8015984:	2000      	movs	r0, #0
 8015986:	4282      	cmp	r2, r0
 8015988:	d101      	bne.n	801598e <__hi0bits+0xe>
 801598a:	041b      	lsls	r3, r3, #16
 801598c:	3010      	adds	r0, #16
 801598e:	0e1a      	lsrs	r2, r3, #24
 8015990:	d101      	bne.n	8015996 <__hi0bits+0x16>
 8015992:	3008      	adds	r0, #8
 8015994:	021b      	lsls	r3, r3, #8
 8015996:	0f1a      	lsrs	r2, r3, #28
 8015998:	d101      	bne.n	801599e <__hi0bits+0x1e>
 801599a:	3004      	adds	r0, #4
 801599c:	011b      	lsls	r3, r3, #4
 801599e:	0f9a      	lsrs	r2, r3, #30
 80159a0:	d101      	bne.n	80159a6 <__hi0bits+0x26>
 80159a2:	3002      	adds	r0, #2
 80159a4:	009b      	lsls	r3, r3, #2
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	db03      	blt.n	80159b2 <__hi0bits+0x32>
 80159aa:	3001      	adds	r0, #1
 80159ac:	005b      	lsls	r3, r3, #1
 80159ae:	d400      	bmi.n	80159b2 <__hi0bits+0x32>
 80159b0:	2020      	movs	r0, #32
 80159b2:	4770      	bx	lr

080159b4 <__lo0bits>:
 80159b4:	2207      	movs	r2, #7
 80159b6:	6803      	ldr	r3, [r0, #0]
 80159b8:	b510      	push	{r4, lr}
 80159ba:	0001      	movs	r1, r0
 80159bc:	401a      	ands	r2, r3
 80159be:	d00d      	beq.n	80159dc <__lo0bits+0x28>
 80159c0:	2401      	movs	r4, #1
 80159c2:	2000      	movs	r0, #0
 80159c4:	4223      	tst	r3, r4
 80159c6:	d105      	bne.n	80159d4 <__lo0bits+0x20>
 80159c8:	3002      	adds	r0, #2
 80159ca:	4203      	tst	r3, r0
 80159cc:	d003      	beq.n	80159d6 <__lo0bits+0x22>
 80159ce:	40e3      	lsrs	r3, r4
 80159d0:	0020      	movs	r0, r4
 80159d2:	600b      	str	r3, [r1, #0]
 80159d4:	bd10      	pop	{r4, pc}
 80159d6:	089b      	lsrs	r3, r3, #2
 80159d8:	600b      	str	r3, [r1, #0]
 80159da:	e7fb      	b.n	80159d4 <__lo0bits+0x20>
 80159dc:	b29c      	uxth	r4, r3
 80159de:	0010      	movs	r0, r2
 80159e0:	2c00      	cmp	r4, #0
 80159e2:	d101      	bne.n	80159e8 <__lo0bits+0x34>
 80159e4:	2010      	movs	r0, #16
 80159e6:	0c1b      	lsrs	r3, r3, #16
 80159e8:	b2da      	uxtb	r2, r3
 80159ea:	2a00      	cmp	r2, #0
 80159ec:	d101      	bne.n	80159f2 <__lo0bits+0x3e>
 80159ee:	3008      	adds	r0, #8
 80159f0:	0a1b      	lsrs	r3, r3, #8
 80159f2:	071a      	lsls	r2, r3, #28
 80159f4:	d101      	bne.n	80159fa <__lo0bits+0x46>
 80159f6:	3004      	adds	r0, #4
 80159f8:	091b      	lsrs	r3, r3, #4
 80159fa:	079a      	lsls	r2, r3, #30
 80159fc:	d101      	bne.n	8015a02 <__lo0bits+0x4e>
 80159fe:	3002      	adds	r0, #2
 8015a00:	089b      	lsrs	r3, r3, #2
 8015a02:	07da      	lsls	r2, r3, #31
 8015a04:	d4e8      	bmi.n	80159d8 <__lo0bits+0x24>
 8015a06:	085b      	lsrs	r3, r3, #1
 8015a08:	d001      	beq.n	8015a0e <__lo0bits+0x5a>
 8015a0a:	3001      	adds	r0, #1
 8015a0c:	e7e4      	b.n	80159d8 <__lo0bits+0x24>
 8015a0e:	2020      	movs	r0, #32
 8015a10:	e7e0      	b.n	80159d4 <__lo0bits+0x20>

08015a12 <__i2b>:
 8015a12:	b510      	push	{r4, lr}
 8015a14:	000c      	movs	r4, r1
 8015a16:	2101      	movs	r1, #1
 8015a18:	f7ff ff04 	bl	8015824 <_Balloc>
 8015a1c:	2301      	movs	r3, #1
 8015a1e:	6144      	str	r4, [r0, #20]
 8015a20:	6103      	str	r3, [r0, #16]
 8015a22:	bd10      	pop	{r4, pc}

08015a24 <__multiply>:
 8015a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a26:	690b      	ldr	r3, [r1, #16]
 8015a28:	0014      	movs	r4, r2
 8015a2a:	6912      	ldr	r2, [r2, #16]
 8015a2c:	b089      	sub	sp, #36	; 0x24
 8015a2e:	000d      	movs	r5, r1
 8015a30:	4293      	cmp	r3, r2
 8015a32:	da01      	bge.n	8015a38 <__multiply+0x14>
 8015a34:	0025      	movs	r5, r4
 8015a36:	000c      	movs	r4, r1
 8015a38:	692f      	ldr	r7, [r5, #16]
 8015a3a:	6926      	ldr	r6, [r4, #16]
 8015a3c:	6869      	ldr	r1, [r5, #4]
 8015a3e:	19bb      	adds	r3, r7, r6
 8015a40:	9302      	str	r3, [sp, #8]
 8015a42:	68ab      	ldr	r3, [r5, #8]
 8015a44:	19ba      	adds	r2, r7, r6
 8015a46:	4293      	cmp	r3, r2
 8015a48:	da00      	bge.n	8015a4c <__multiply+0x28>
 8015a4a:	3101      	adds	r1, #1
 8015a4c:	f7ff feea 	bl	8015824 <_Balloc>
 8015a50:	0002      	movs	r2, r0
 8015a52:	19bb      	adds	r3, r7, r6
 8015a54:	3214      	adds	r2, #20
 8015a56:	009b      	lsls	r3, r3, #2
 8015a58:	18d3      	adds	r3, r2, r3
 8015a5a:	469c      	mov	ip, r3
 8015a5c:	2100      	movs	r1, #0
 8015a5e:	0013      	movs	r3, r2
 8015a60:	9004      	str	r0, [sp, #16]
 8015a62:	4563      	cmp	r3, ip
 8015a64:	d31d      	bcc.n	8015aa2 <__multiply+0x7e>
 8015a66:	3514      	adds	r5, #20
 8015a68:	00bf      	lsls	r7, r7, #2
 8015a6a:	19eb      	adds	r3, r5, r7
 8015a6c:	3414      	adds	r4, #20
 8015a6e:	00b6      	lsls	r6, r6, #2
 8015a70:	9305      	str	r3, [sp, #20]
 8015a72:	19a3      	adds	r3, r4, r6
 8015a74:	9503      	str	r5, [sp, #12]
 8015a76:	9401      	str	r4, [sp, #4]
 8015a78:	9307      	str	r3, [sp, #28]
 8015a7a:	9b07      	ldr	r3, [sp, #28]
 8015a7c:	9901      	ldr	r1, [sp, #4]
 8015a7e:	4299      	cmp	r1, r3
 8015a80:	d311      	bcc.n	8015aa6 <__multiply+0x82>
 8015a82:	9b02      	ldr	r3, [sp, #8]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	dd06      	ble.n	8015a96 <__multiply+0x72>
 8015a88:	2304      	movs	r3, #4
 8015a8a:	425b      	negs	r3, r3
 8015a8c:	449c      	add	ip, r3
 8015a8e:	4663      	mov	r3, ip
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d051      	beq.n	8015b3a <__multiply+0x116>
 8015a96:	9b04      	ldr	r3, [sp, #16]
 8015a98:	9a02      	ldr	r2, [sp, #8]
 8015a9a:	0018      	movs	r0, r3
 8015a9c:	611a      	str	r2, [r3, #16]
 8015a9e:	b009      	add	sp, #36	; 0x24
 8015aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015aa2:	c302      	stmia	r3!, {r1}
 8015aa4:	e7dd      	b.n	8015a62 <__multiply+0x3e>
 8015aa6:	9b01      	ldr	r3, [sp, #4]
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	b298      	uxth	r0, r3
 8015aac:	2800      	cmp	r0, #0
 8015aae:	d01c      	beq.n	8015aea <__multiply+0xc6>
 8015ab0:	0015      	movs	r5, r2
 8015ab2:	2600      	movs	r6, #0
 8015ab4:	9f03      	ldr	r7, [sp, #12]
 8015ab6:	cf02      	ldmia	r7!, {r1}
 8015ab8:	682c      	ldr	r4, [r5, #0]
 8015aba:	b28b      	uxth	r3, r1
 8015abc:	4343      	muls	r3, r0
 8015abe:	0c09      	lsrs	r1, r1, #16
 8015ac0:	4341      	muls	r1, r0
 8015ac2:	b2a4      	uxth	r4, r4
 8015ac4:	191b      	adds	r3, r3, r4
 8015ac6:	199b      	adds	r3, r3, r6
 8015ac8:	000e      	movs	r6, r1
 8015aca:	6829      	ldr	r1, [r5, #0]
 8015acc:	9506      	str	r5, [sp, #24]
 8015ace:	0c09      	lsrs	r1, r1, #16
 8015ad0:	1871      	adds	r1, r6, r1
 8015ad2:	0c1e      	lsrs	r6, r3, #16
 8015ad4:	1989      	adds	r1, r1, r6
 8015ad6:	0c0e      	lsrs	r6, r1, #16
 8015ad8:	b29b      	uxth	r3, r3
 8015ada:	0409      	lsls	r1, r1, #16
 8015adc:	430b      	orrs	r3, r1
 8015ade:	c508      	stmia	r5!, {r3}
 8015ae0:	9b05      	ldr	r3, [sp, #20]
 8015ae2:	42bb      	cmp	r3, r7
 8015ae4:	d8e7      	bhi.n	8015ab6 <__multiply+0x92>
 8015ae6:	9b06      	ldr	r3, [sp, #24]
 8015ae8:	605e      	str	r6, [r3, #4]
 8015aea:	9b01      	ldr	r3, [sp, #4]
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	0c1d      	lsrs	r5, r3, #16
 8015af0:	d01e      	beq.n	8015b30 <__multiply+0x10c>
 8015af2:	0010      	movs	r0, r2
 8015af4:	2700      	movs	r7, #0
 8015af6:	6813      	ldr	r3, [r2, #0]
 8015af8:	9e03      	ldr	r6, [sp, #12]
 8015afa:	6831      	ldr	r1, [r6, #0]
 8015afc:	6804      	ldr	r4, [r0, #0]
 8015afe:	b289      	uxth	r1, r1
 8015b00:	4369      	muls	r1, r5
 8015b02:	0c24      	lsrs	r4, r4, #16
 8015b04:	1909      	adds	r1, r1, r4
 8015b06:	19c9      	adds	r1, r1, r7
 8015b08:	040f      	lsls	r7, r1, #16
 8015b0a:	b29b      	uxth	r3, r3
 8015b0c:	433b      	orrs	r3, r7
 8015b0e:	6003      	str	r3, [r0, #0]
 8015b10:	ce80      	ldmia	r6!, {r7}
 8015b12:	6843      	ldr	r3, [r0, #4]
 8015b14:	0c3f      	lsrs	r7, r7, #16
 8015b16:	436f      	muls	r7, r5
 8015b18:	b29b      	uxth	r3, r3
 8015b1a:	18fb      	adds	r3, r7, r3
 8015b1c:	0c09      	lsrs	r1, r1, #16
 8015b1e:	185b      	adds	r3, r3, r1
 8015b20:	9905      	ldr	r1, [sp, #20]
 8015b22:	9006      	str	r0, [sp, #24]
 8015b24:	0c1f      	lsrs	r7, r3, #16
 8015b26:	3004      	adds	r0, #4
 8015b28:	42b1      	cmp	r1, r6
 8015b2a:	d8e6      	bhi.n	8015afa <__multiply+0xd6>
 8015b2c:	9906      	ldr	r1, [sp, #24]
 8015b2e:	604b      	str	r3, [r1, #4]
 8015b30:	9b01      	ldr	r3, [sp, #4]
 8015b32:	3204      	adds	r2, #4
 8015b34:	3304      	adds	r3, #4
 8015b36:	9301      	str	r3, [sp, #4]
 8015b38:	e79f      	b.n	8015a7a <__multiply+0x56>
 8015b3a:	9b02      	ldr	r3, [sp, #8]
 8015b3c:	3b01      	subs	r3, #1
 8015b3e:	9302      	str	r3, [sp, #8]
 8015b40:	e79f      	b.n	8015a82 <__multiply+0x5e>
	...

08015b44 <__pow5mult>:
 8015b44:	2303      	movs	r3, #3
 8015b46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015b48:	4013      	ands	r3, r2
 8015b4a:	0006      	movs	r6, r0
 8015b4c:	000f      	movs	r7, r1
 8015b4e:	0015      	movs	r5, r2
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d008      	beq.n	8015b66 <__pow5mult+0x22>
 8015b54:	491a      	ldr	r1, [pc, #104]	; (8015bc0 <__pow5mult+0x7c>)
 8015b56:	3b01      	subs	r3, #1
 8015b58:	009a      	lsls	r2, r3, #2
 8015b5a:	5852      	ldr	r2, [r2, r1]
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	0039      	movs	r1, r7
 8015b60:	f7ff fe92 	bl	8015888 <__multadd>
 8015b64:	0007      	movs	r7, r0
 8015b66:	10ad      	asrs	r5, r5, #2
 8015b68:	d027      	beq.n	8015bba <__pow5mult+0x76>
 8015b6a:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8015b6c:	2c00      	cmp	r4, #0
 8015b6e:	d107      	bne.n	8015b80 <__pow5mult+0x3c>
 8015b70:	4914      	ldr	r1, [pc, #80]	; (8015bc4 <__pow5mult+0x80>)
 8015b72:	0030      	movs	r0, r6
 8015b74:	f7ff ff4d 	bl	8015a12 <__i2b>
 8015b78:	2300      	movs	r3, #0
 8015b7a:	0004      	movs	r4, r0
 8015b7c:	64b0      	str	r0, [r6, #72]	; 0x48
 8015b7e:	6003      	str	r3, [r0, #0]
 8015b80:	2301      	movs	r3, #1
 8015b82:	421d      	tst	r5, r3
 8015b84:	d00a      	beq.n	8015b9c <__pow5mult+0x58>
 8015b86:	0039      	movs	r1, r7
 8015b88:	0022      	movs	r2, r4
 8015b8a:	0030      	movs	r0, r6
 8015b8c:	f7ff ff4a 	bl	8015a24 <__multiply>
 8015b90:	0039      	movs	r1, r7
 8015b92:	9001      	str	r0, [sp, #4]
 8015b94:	0030      	movs	r0, r6
 8015b96:	f7ff fe6d 	bl	8015874 <_Bfree>
 8015b9a:	9f01      	ldr	r7, [sp, #4]
 8015b9c:	106d      	asrs	r5, r5, #1
 8015b9e:	d00c      	beq.n	8015bba <__pow5mult+0x76>
 8015ba0:	6820      	ldr	r0, [r4, #0]
 8015ba2:	2800      	cmp	r0, #0
 8015ba4:	d107      	bne.n	8015bb6 <__pow5mult+0x72>
 8015ba6:	0022      	movs	r2, r4
 8015ba8:	0021      	movs	r1, r4
 8015baa:	0030      	movs	r0, r6
 8015bac:	f7ff ff3a 	bl	8015a24 <__multiply>
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	6020      	str	r0, [r4, #0]
 8015bb4:	6003      	str	r3, [r0, #0]
 8015bb6:	0004      	movs	r4, r0
 8015bb8:	e7e2      	b.n	8015b80 <__pow5mult+0x3c>
 8015bba:	0038      	movs	r0, r7
 8015bbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015bbe:	46c0      	nop			; (mov r8, r8)
 8015bc0:	08019068 	.word	0x08019068
 8015bc4:	00000271 	.word	0x00000271

08015bc8 <__lshift>:
 8015bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bca:	000d      	movs	r5, r1
 8015bcc:	0017      	movs	r7, r2
 8015bce:	692b      	ldr	r3, [r5, #16]
 8015bd0:	1154      	asrs	r4, r2, #5
 8015bd2:	b085      	sub	sp, #20
 8015bd4:	18e3      	adds	r3, r4, r3
 8015bd6:	9301      	str	r3, [sp, #4]
 8015bd8:	3301      	adds	r3, #1
 8015bda:	9300      	str	r3, [sp, #0]
 8015bdc:	6849      	ldr	r1, [r1, #4]
 8015bde:	68ab      	ldr	r3, [r5, #8]
 8015be0:	9002      	str	r0, [sp, #8]
 8015be2:	9a00      	ldr	r2, [sp, #0]
 8015be4:	4293      	cmp	r3, r2
 8015be6:	db35      	blt.n	8015c54 <__lshift+0x8c>
 8015be8:	9802      	ldr	r0, [sp, #8]
 8015bea:	f7ff fe1b 	bl	8015824 <_Balloc>
 8015bee:	2300      	movs	r3, #0
 8015bf0:	0002      	movs	r2, r0
 8015bf2:	0006      	movs	r6, r0
 8015bf4:	0019      	movs	r1, r3
 8015bf6:	3214      	adds	r2, #20
 8015bf8:	42a3      	cmp	r3, r4
 8015bfa:	db2e      	blt.n	8015c5a <__lshift+0x92>
 8015bfc:	43e3      	mvns	r3, r4
 8015bfe:	17db      	asrs	r3, r3, #31
 8015c00:	401c      	ands	r4, r3
 8015c02:	002b      	movs	r3, r5
 8015c04:	00a4      	lsls	r4, r4, #2
 8015c06:	1914      	adds	r4, r2, r4
 8015c08:	692a      	ldr	r2, [r5, #16]
 8015c0a:	3314      	adds	r3, #20
 8015c0c:	0092      	lsls	r2, r2, #2
 8015c0e:	189a      	adds	r2, r3, r2
 8015c10:	4694      	mov	ip, r2
 8015c12:	221f      	movs	r2, #31
 8015c14:	4017      	ands	r7, r2
 8015c16:	d024      	beq.n	8015c62 <__lshift+0x9a>
 8015c18:	3201      	adds	r2, #1
 8015c1a:	1bd2      	subs	r2, r2, r7
 8015c1c:	9203      	str	r2, [sp, #12]
 8015c1e:	2200      	movs	r2, #0
 8015c20:	6819      	ldr	r1, [r3, #0]
 8015c22:	0020      	movs	r0, r4
 8015c24:	40b9      	lsls	r1, r7
 8015c26:	430a      	orrs	r2, r1
 8015c28:	c404      	stmia	r4!, {r2}
 8015c2a:	cb04      	ldmia	r3!, {r2}
 8015c2c:	9903      	ldr	r1, [sp, #12]
 8015c2e:	40ca      	lsrs	r2, r1
 8015c30:	459c      	cmp	ip, r3
 8015c32:	d8f5      	bhi.n	8015c20 <__lshift+0x58>
 8015c34:	6042      	str	r2, [r0, #4]
 8015c36:	2a00      	cmp	r2, #0
 8015c38:	d002      	beq.n	8015c40 <__lshift+0x78>
 8015c3a:	9b01      	ldr	r3, [sp, #4]
 8015c3c:	3302      	adds	r3, #2
 8015c3e:	9300      	str	r3, [sp, #0]
 8015c40:	9b00      	ldr	r3, [sp, #0]
 8015c42:	9802      	ldr	r0, [sp, #8]
 8015c44:	3b01      	subs	r3, #1
 8015c46:	6133      	str	r3, [r6, #16]
 8015c48:	0029      	movs	r1, r5
 8015c4a:	f7ff fe13 	bl	8015874 <_Bfree>
 8015c4e:	0030      	movs	r0, r6
 8015c50:	b005      	add	sp, #20
 8015c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c54:	3101      	adds	r1, #1
 8015c56:	005b      	lsls	r3, r3, #1
 8015c58:	e7c3      	b.n	8015be2 <__lshift+0x1a>
 8015c5a:	0098      	lsls	r0, r3, #2
 8015c5c:	5011      	str	r1, [r2, r0]
 8015c5e:	3301      	adds	r3, #1
 8015c60:	e7ca      	b.n	8015bf8 <__lshift+0x30>
 8015c62:	cb04      	ldmia	r3!, {r2}
 8015c64:	c404      	stmia	r4!, {r2}
 8015c66:	459c      	cmp	ip, r3
 8015c68:	d8fb      	bhi.n	8015c62 <__lshift+0x9a>
 8015c6a:	e7e9      	b.n	8015c40 <__lshift+0x78>

08015c6c <__mcmp>:
 8015c6c:	690a      	ldr	r2, [r1, #16]
 8015c6e:	6903      	ldr	r3, [r0, #16]
 8015c70:	b530      	push	{r4, r5, lr}
 8015c72:	1a9b      	subs	r3, r3, r2
 8015c74:	d10d      	bne.n	8015c92 <__mcmp+0x26>
 8015c76:	0092      	lsls	r2, r2, #2
 8015c78:	3014      	adds	r0, #20
 8015c7a:	3114      	adds	r1, #20
 8015c7c:	1884      	adds	r4, r0, r2
 8015c7e:	1889      	adds	r1, r1, r2
 8015c80:	3c04      	subs	r4, #4
 8015c82:	3904      	subs	r1, #4
 8015c84:	6825      	ldr	r5, [r4, #0]
 8015c86:	680a      	ldr	r2, [r1, #0]
 8015c88:	4295      	cmp	r5, r2
 8015c8a:	d004      	beq.n	8015c96 <__mcmp+0x2a>
 8015c8c:	2301      	movs	r3, #1
 8015c8e:	4295      	cmp	r5, r2
 8015c90:	d304      	bcc.n	8015c9c <__mcmp+0x30>
 8015c92:	0018      	movs	r0, r3
 8015c94:	bd30      	pop	{r4, r5, pc}
 8015c96:	42a0      	cmp	r0, r4
 8015c98:	d3f2      	bcc.n	8015c80 <__mcmp+0x14>
 8015c9a:	e7fa      	b.n	8015c92 <__mcmp+0x26>
 8015c9c:	425b      	negs	r3, r3
 8015c9e:	e7f8      	b.n	8015c92 <__mcmp+0x26>

08015ca0 <__mdiff>:
 8015ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ca2:	000d      	movs	r5, r1
 8015ca4:	b085      	sub	sp, #20
 8015ca6:	0007      	movs	r7, r0
 8015ca8:	0011      	movs	r1, r2
 8015caa:	0028      	movs	r0, r5
 8015cac:	0014      	movs	r4, r2
 8015cae:	f7ff ffdd 	bl	8015c6c <__mcmp>
 8015cb2:	1e06      	subs	r6, r0, #0
 8015cb4:	d108      	bne.n	8015cc8 <__mdiff+0x28>
 8015cb6:	0001      	movs	r1, r0
 8015cb8:	0038      	movs	r0, r7
 8015cba:	f7ff fdb3 	bl	8015824 <_Balloc>
 8015cbe:	2301      	movs	r3, #1
 8015cc0:	6146      	str	r6, [r0, #20]
 8015cc2:	6103      	str	r3, [r0, #16]
 8015cc4:	b005      	add	sp, #20
 8015cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cc8:	2301      	movs	r3, #1
 8015cca:	9301      	str	r3, [sp, #4]
 8015ccc:	2800      	cmp	r0, #0
 8015cce:	db04      	blt.n	8015cda <__mdiff+0x3a>
 8015cd0:	0023      	movs	r3, r4
 8015cd2:	002c      	movs	r4, r5
 8015cd4:	001d      	movs	r5, r3
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	9301      	str	r3, [sp, #4]
 8015cda:	6861      	ldr	r1, [r4, #4]
 8015cdc:	0038      	movs	r0, r7
 8015cde:	f7ff fda1 	bl	8015824 <_Balloc>
 8015ce2:	002f      	movs	r7, r5
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	9b01      	ldr	r3, [sp, #4]
 8015ce8:	6926      	ldr	r6, [r4, #16]
 8015cea:	60c3      	str	r3, [r0, #12]
 8015cec:	3414      	adds	r4, #20
 8015cee:	00b3      	lsls	r3, r6, #2
 8015cf0:	18e3      	adds	r3, r4, r3
 8015cf2:	9302      	str	r3, [sp, #8]
 8015cf4:	692b      	ldr	r3, [r5, #16]
 8015cf6:	3714      	adds	r7, #20
 8015cf8:	009b      	lsls	r3, r3, #2
 8015cfa:	18fb      	adds	r3, r7, r3
 8015cfc:	9303      	str	r3, [sp, #12]
 8015cfe:	0003      	movs	r3, r0
 8015d00:	4694      	mov	ip, r2
 8015d02:	3314      	adds	r3, #20
 8015d04:	cc20      	ldmia	r4!, {r5}
 8015d06:	cf04      	ldmia	r7!, {r2}
 8015d08:	9201      	str	r2, [sp, #4]
 8015d0a:	b2aa      	uxth	r2, r5
 8015d0c:	4494      	add	ip, r2
 8015d0e:	466a      	mov	r2, sp
 8015d10:	4661      	mov	r1, ip
 8015d12:	8892      	ldrh	r2, [r2, #4]
 8015d14:	0c2d      	lsrs	r5, r5, #16
 8015d16:	1a8a      	subs	r2, r1, r2
 8015d18:	9901      	ldr	r1, [sp, #4]
 8015d1a:	0c09      	lsrs	r1, r1, #16
 8015d1c:	1a69      	subs	r1, r5, r1
 8015d1e:	1415      	asrs	r5, r2, #16
 8015d20:	1949      	adds	r1, r1, r5
 8015d22:	140d      	asrs	r5, r1, #16
 8015d24:	b292      	uxth	r2, r2
 8015d26:	0409      	lsls	r1, r1, #16
 8015d28:	430a      	orrs	r2, r1
 8015d2a:	601a      	str	r2, [r3, #0]
 8015d2c:	9a03      	ldr	r2, [sp, #12]
 8015d2e:	46ac      	mov	ip, r5
 8015d30:	3304      	adds	r3, #4
 8015d32:	42ba      	cmp	r2, r7
 8015d34:	d8e6      	bhi.n	8015d04 <__mdiff+0x64>
 8015d36:	9902      	ldr	r1, [sp, #8]
 8015d38:	001a      	movs	r2, r3
 8015d3a:	428c      	cmp	r4, r1
 8015d3c:	d305      	bcc.n	8015d4a <__mdiff+0xaa>
 8015d3e:	3a04      	subs	r2, #4
 8015d40:	6813      	ldr	r3, [r2, #0]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d00e      	beq.n	8015d64 <__mdiff+0xc4>
 8015d46:	6106      	str	r6, [r0, #16]
 8015d48:	e7bc      	b.n	8015cc4 <__mdiff+0x24>
 8015d4a:	cc04      	ldmia	r4!, {r2}
 8015d4c:	b291      	uxth	r1, r2
 8015d4e:	4461      	add	r1, ip
 8015d50:	140d      	asrs	r5, r1, #16
 8015d52:	0c12      	lsrs	r2, r2, #16
 8015d54:	1952      	adds	r2, r2, r5
 8015d56:	1415      	asrs	r5, r2, #16
 8015d58:	b289      	uxth	r1, r1
 8015d5a:	0412      	lsls	r2, r2, #16
 8015d5c:	430a      	orrs	r2, r1
 8015d5e:	46ac      	mov	ip, r5
 8015d60:	c304      	stmia	r3!, {r2}
 8015d62:	e7e8      	b.n	8015d36 <__mdiff+0x96>
 8015d64:	3e01      	subs	r6, #1
 8015d66:	e7ea      	b.n	8015d3e <__mdiff+0x9e>

08015d68 <__ulp>:
 8015d68:	000b      	movs	r3, r1
 8015d6a:	4910      	ldr	r1, [pc, #64]	; (8015dac <__ulp+0x44>)
 8015d6c:	b510      	push	{r4, lr}
 8015d6e:	4019      	ands	r1, r3
 8015d70:	4b0f      	ldr	r3, [pc, #60]	; (8015db0 <__ulp+0x48>)
 8015d72:	18c9      	adds	r1, r1, r3
 8015d74:	2900      	cmp	r1, #0
 8015d76:	dd04      	ble.n	8015d82 <__ulp+0x1a>
 8015d78:	2200      	movs	r2, #0
 8015d7a:	000b      	movs	r3, r1
 8015d7c:	0010      	movs	r0, r2
 8015d7e:	0019      	movs	r1, r3
 8015d80:	bd10      	pop	{r4, pc}
 8015d82:	4249      	negs	r1, r1
 8015d84:	1509      	asrs	r1, r1, #20
 8015d86:	2200      	movs	r2, #0
 8015d88:	2300      	movs	r3, #0
 8015d8a:	2913      	cmp	r1, #19
 8015d8c:	dc04      	bgt.n	8015d98 <__ulp+0x30>
 8015d8e:	2080      	movs	r0, #128	; 0x80
 8015d90:	0300      	lsls	r0, r0, #12
 8015d92:	4108      	asrs	r0, r1
 8015d94:	0003      	movs	r3, r0
 8015d96:	e7f1      	b.n	8015d7c <__ulp+0x14>
 8015d98:	3914      	subs	r1, #20
 8015d9a:	2001      	movs	r0, #1
 8015d9c:	291e      	cmp	r1, #30
 8015d9e:	dc02      	bgt.n	8015da6 <__ulp+0x3e>
 8015da0:	241f      	movs	r4, #31
 8015da2:	1a61      	subs	r1, r4, r1
 8015da4:	4088      	lsls	r0, r1
 8015da6:	0002      	movs	r2, r0
 8015da8:	e7e8      	b.n	8015d7c <__ulp+0x14>
 8015daa:	46c0      	nop			; (mov r8, r8)
 8015dac:	7ff00000 	.word	0x7ff00000
 8015db0:	fcc00000 	.word	0xfcc00000

08015db4 <__b2d>:
 8015db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015db6:	0006      	movs	r6, r0
 8015db8:	6903      	ldr	r3, [r0, #16]
 8015dba:	3614      	adds	r6, #20
 8015dbc:	009b      	lsls	r3, r3, #2
 8015dbe:	18f3      	adds	r3, r6, r3
 8015dc0:	1f1d      	subs	r5, r3, #4
 8015dc2:	682c      	ldr	r4, [r5, #0]
 8015dc4:	000f      	movs	r7, r1
 8015dc6:	0020      	movs	r0, r4
 8015dc8:	9301      	str	r3, [sp, #4]
 8015dca:	f7ff fdd9 	bl	8015980 <__hi0bits>
 8015dce:	2320      	movs	r3, #32
 8015dd0:	1a1b      	subs	r3, r3, r0
 8015dd2:	603b      	str	r3, [r7, #0]
 8015dd4:	491c      	ldr	r1, [pc, #112]	; (8015e48 <__b2d+0x94>)
 8015dd6:	280a      	cmp	r0, #10
 8015dd8:	dc16      	bgt.n	8015e08 <__b2d+0x54>
 8015dda:	230b      	movs	r3, #11
 8015ddc:	0027      	movs	r7, r4
 8015dde:	1a1b      	subs	r3, r3, r0
 8015de0:	40df      	lsrs	r7, r3
 8015de2:	4339      	orrs	r1, r7
 8015de4:	469c      	mov	ip, r3
 8015de6:	000b      	movs	r3, r1
 8015de8:	2100      	movs	r1, #0
 8015dea:	42ae      	cmp	r6, r5
 8015dec:	d202      	bcs.n	8015df4 <__b2d+0x40>
 8015dee:	9901      	ldr	r1, [sp, #4]
 8015df0:	3908      	subs	r1, #8
 8015df2:	6809      	ldr	r1, [r1, #0]
 8015df4:	3015      	adds	r0, #21
 8015df6:	4084      	lsls	r4, r0
 8015df8:	4660      	mov	r0, ip
 8015dfa:	40c1      	lsrs	r1, r0
 8015dfc:	430c      	orrs	r4, r1
 8015dfe:	0022      	movs	r2, r4
 8015e00:	0010      	movs	r0, r2
 8015e02:	0019      	movs	r1, r3
 8015e04:	b003      	add	sp, #12
 8015e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e08:	2700      	movs	r7, #0
 8015e0a:	42ae      	cmp	r6, r5
 8015e0c:	d202      	bcs.n	8015e14 <__b2d+0x60>
 8015e0e:	9d01      	ldr	r5, [sp, #4]
 8015e10:	3d08      	subs	r5, #8
 8015e12:	682f      	ldr	r7, [r5, #0]
 8015e14:	380b      	subs	r0, #11
 8015e16:	4684      	mov	ip, r0
 8015e18:	1e03      	subs	r3, r0, #0
 8015e1a:	d012      	beq.n	8015e42 <__b2d+0x8e>
 8015e1c:	409c      	lsls	r4, r3
 8015e1e:	2020      	movs	r0, #32
 8015e20:	4321      	orrs	r1, r4
 8015e22:	003c      	movs	r4, r7
 8015e24:	1ac0      	subs	r0, r0, r3
 8015e26:	40c4      	lsrs	r4, r0
 8015e28:	4321      	orrs	r1, r4
 8015e2a:	000b      	movs	r3, r1
 8015e2c:	2100      	movs	r1, #0
 8015e2e:	42b5      	cmp	r5, r6
 8015e30:	d901      	bls.n	8015e36 <__b2d+0x82>
 8015e32:	3d04      	subs	r5, #4
 8015e34:	6829      	ldr	r1, [r5, #0]
 8015e36:	4664      	mov	r4, ip
 8015e38:	40c1      	lsrs	r1, r0
 8015e3a:	40a7      	lsls	r7, r4
 8015e3c:	430f      	orrs	r7, r1
 8015e3e:	003a      	movs	r2, r7
 8015e40:	e7de      	b.n	8015e00 <__b2d+0x4c>
 8015e42:	4321      	orrs	r1, r4
 8015e44:	000b      	movs	r3, r1
 8015e46:	e7fa      	b.n	8015e3e <__b2d+0x8a>
 8015e48:	3ff00000 	.word	0x3ff00000

08015e4c <__d2b>:
 8015e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015e4e:	001d      	movs	r5, r3
 8015e50:	2101      	movs	r1, #1
 8015e52:	0014      	movs	r4, r2
 8015e54:	9f08      	ldr	r7, [sp, #32]
 8015e56:	f7ff fce5 	bl	8015824 <_Balloc>
 8015e5a:	032b      	lsls	r3, r5, #12
 8015e5c:	006d      	lsls	r5, r5, #1
 8015e5e:	0006      	movs	r6, r0
 8015e60:	0b1b      	lsrs	r3, r3, #12
 8015e62:	0d6d      	lsrs	r5, r5, #21
 8015e64:	d124      	bne.n	8015eb0 <__d2b+0x64>
 8015e66:	9301      	str	r3, [sp, #4]
 8015e68:	2c00      	cmp	r4, #0
 8015e6a:	d027      	beq.n	8015ebc <__d2b+0x70>
 8015e6c:	4668      	mov	r0, sp
 8015e6e:	9400      	str	r4, [sp, #0]
 8015e70:	f7ff fda0 	bl	80159b4 <__lo0bits>
 8015e74:	9c00      	ldr	r4, [sp, #0]
 8015e76:	2800      	cmp	r0, #0
 8015e78:	d01e      	beq.n	8015eb8 <__d2b+0x6c>
 8015e7a:	9b01      	ldr	r3, [sp, #4]
 8015e7c:	2120      	movs	r1, #32
 8015e7e:	001a      	movs	r2, r3
 8015e80:	1a09      	subs	r1, r1, r0
 8015e82:	408a      	lsls	r2, r1
 8015e84:	40c3      	lsrs	r3, r0
 8015e86:	4322      	orrs	r2, r4
 8015e88:	6172      	str	r2, [r6, #20]
 8015e8a:	9301      	str	r3, [sp, #4]
 8015e8c:	9c01      	ldr	r4, [sp, #4]
 8015e8e:	61b4      	str	r4, [r6, #24]
 8015e90:	1e63      	subs	r3, r4, #1
 8015e92:	419c      	sbcs	r4, r3
 8015e94:	3401      	adds	r4, #1
 8015e96:	6134      	str	r4, [r6, #16]
 8015e98:	2d00      	cmp	r5, #0
 8015e9a:	d018      	beq.n	8015ece <__d2b+0x82>
 8015e9c:	4b12      	ldr	r3, [pc, #72]	; (8015ee8 <__d2b+0x9c>)
 8015e9e:	18ed      	adds	r5, r5, r3
 8015ea0:	2335      	movs	r3, #53	; 0x35
 8015ea2:	182d      	adds	r5, r5, r0
 8015ea4:	603d      	str	r5, [r7, #0]
 8015ea6:	1a18      	subs	r0, r3, r0
 8015ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015eaa:	6018      	str	r0, [r3, #0]
 8015eac:	0030      	movs	r0, r6
 8015eae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015eb0:	2280      	movs	r2, #128	; 0x80
 8015eb2:	0352      	lsls	r2, r2, #13
 8015eb4:	4313      	orrs	r3, r2
 8015eb6:	e7d6      	b.n	8015e66 <__d2b+0x1a>
 8015eb8:	6174      	str	r4, [r6, #20]
 8015eba:	e7e7      	b.n	8015e8c <__d2b+0x40>
 8015ebc:	a801      	add	r0, sp, #4
 8015ebe:	f7ff fd79 	bl	80159b4 <__lo0bits>
 8015ec2:	2401      	movs	r4, #1
 8015ec4:	9b01      	ldr	r3, [sp, #4]
 8015ec6:	6134      	str	r4, [r6, #16]
 8015ec8:	6173      	str	r3, [r6, #20]
 8015eca:	3020      	adds	r0, #32
 8015ecc:	e7e4      	b.n	8015e98 <__d2b+0x4c>
 8015ece:	4b07      	ldr	r3, [pc, #28]	; (8015eec <__d2b+0xa0>)
 8015ed0:	18c0      	adds	r0, r0, r3
 8015ed2:	4b07      	ldr	r3, [pc, #28]	; (8015ef0 <__d2b+0xa4>)
 8015ed4:	6038      	str	r0, [r7, #0]
 8015ed6:	18e3      	adds	r3, r4, r3
 8015ed8:	009b      	lsls	r3, r3, #2
 8015eda:	18f3      	adds	r3, r6, r3
 8015edc:	6958      	ldr	r0, [r3, #20]
 8015ede:	f7ff fd4f 	bl	8015980 <__hi0bits>
 8015ee2:	0164      	lsls	r4, r4, #5
 8015ee4:	1a20      	subs	r0, r4, r0
 8015ee6:	e7df      	b.n	8015ea8 <__d2b+0x5c>
 8015ee8:	fffffbcd 	.word	0xfffffbcd
 8015eec:	fffffbce 	.word	0xfffffbce
 8015ef0:	3fffffff 	.word	0x3fffffff

08015ef4 <__ratio>:
 8015ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ef6:	b085      	sub	sp, #20
 8015ef8:	000f      	movs	r7, r1
 8015efa:	a902      	add	r1, sp, #8
 8015efc:	0006      	movs	r6, r0
 8015efe:	f7ff ff59 	bl	8015db4 <__b2d>
 8015f02:	0004      	movs	r4, r0
 8015f04:	000d      	movs	r5, r1
 8015f06:	0038      	movs	r0, r7
 8015f08:	a903      	add	r1, sp, #12
 8015f0a:	9400      	str	r4, [sp, #0]
 8015f0c:	9501      	str	r5, [sp, #4]
 8015f0e:	f7ff ff51 	bl	8015db4 <__b2d>
 8015f12:	6936      	ldr	r6, [r6, #16]
 8015f14:	693f      	ldr	r7, [r7, #16]
 8015f16:	0002      	movs	r2, r0
 8015f18:	1bf7      	subs	r7, r6, r7
 8015f1a:	017e      	lsls	r6, r7, #5
 8015f1c:	46b4      	mov	ip, r6
 8015f1e:	9f03      	ldr	r7, [sp, #12]
 8015f20:	9e02      	ldr	r6, [sp, #8]
 8015f22:	000b      	movs	r3, r1
 8015f24:	1bf6      	subs	r6, r6, r7
 8015f26:	4466      	add	r6, ip
 8015f28:	0537      	lsls	r7, r6, #20
 8015f2a:	2e00      	cmp	r6, #0
 8015f2c:	dd07      	ble.n	8015f3e <__ratio+0x4a>
 8015f2e:	1979      	adds	r1, r7, r5
 8015f30:	9101      	str	r1, [sp, #4]
 8015f32:	9800      	ldr	r0, [sp, #0]
 8015f34:	9901      	ldr	r1, [sp, #4]
 8015f36:	f7eb f805 	bl	8000f44 <__aeabi_ddiv>
 8015f3a:	b005      	add	sp, #20
 8015f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f3e:	1bcb      	subs	r3, r1, r7
 8015f40:	e7f7      	b.n	8015f32 <__ratio+0x3e>

08015f42 <__copybits>:
 8015f42:	0013      	movs	r3, r2
 8015f44:	3901      	subs	r1, #1
 8015f46:	b510      	push	{r4, lr}
 8015f48:	1149      	asrs	r1, r1, #5
 8015f4a:	6912      	ldr	r2, [r2, #16]
 8015f4c:	3101      	adds	r1, #1
 8015f4e:	0089      	lsls	r1, r1, #2
 8015f50:	3314      	adds	r3, #20
 8015f52:	0092      	lsls	r2, r2, #2
 8015f54:	1841      	adds	r1, r0, r1
 8015f56:	189a      	adds	r2, r3, r2
 8015f58:	429a      	cmp	r2, r3
 8015f5a:	d803      	bhi.n	8015f64 <__copybits+0x22>
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	4281      	cmp	r1, r0
 8015f60:	d803      	bhi.n	8015f6a <__copybits+0x28>
 8015f62:	bd10      	pop	{r4, pc}
 8015f64:	cb10      	ldmia	r3!, {r4}
 8015f66:	c010      	stmia	r0!, {r4}
 8015f68:	e7f6      	b.n	8015f58 <__copybits+0x16>
 8015f6a:	c008      	stmia	r0!, {r3}
 8015f6c:	e7f7      	b.n	8015f5e <__copybits+0x1c>

08015f6e <__any_on>:
 8015f6e:	0002      	movs	r2, r0
 8015f70:	6900      	ldr	r0, [r0, #16]
 8015f72:	b510      	push	{r4, lr}
 8015f74:	3214      	adds	r2, #20
 8015f76:	114b      	asrs	r3, r1, #5
 8015f78:	4298      	cmp	r0, r3
 8015f7a:	db12      	blt.n	8015fa2 <__any_on+0x34>
 8015f7c:	dd0b      	ble.n	8015f96 <__any_on+0x28>
 8015f7e:	201f      	movs	r0, #31
 8015f80:	4001      	ands	r1, r0
 8015f82:	d008      	beq.n	8015f96 <__any_on+0x28>
 8015f84:	0098      	lsls	r0, r3, #2
 8015f86:	5884      	ldr	r4, [r0, r2]
 8015f88:	0020      	movs	r0, r4
 8015f8a:	40c8      	lsrs	r0, r1
 8015f8c:	4088      	lsls	r0, r1
 8015f8e:	0001      	movs	r1, r0
 8015f90:	2001      	movs	r0, #1
 8015f92:	428c      	cmp	r4, r1
 8015f94:	d104      	bne.n	8015fa0 <__any_on+0x32>
 8015f96:	009b      	lsls	r3, r3, #2
 8015f98:	18d3      	adds	r3, r2, r3
 8015f9a:	4293      	cmp	r3, r2
 8015f9c:	d803      	bhi.n	8015fa6 <__any_on+0x38>
 8015f9e:	2000      	movs	r0, #0
 8015fa0:	bd10      	pop	{r4, pc}
 8015fa2:	0003      	movs	r3, r0
 8015fa4:	e7f7      	b.n	8015f96 <__any_on+0x28>
 8015fa6:	3b04      	subs	r3, #4
 8015fa8:	6819      	ldr	r1, [r3, #0]
 8015faa:	2900      	cmp	r1, #0
 8015fac:	d0f5      	beq.n	8015f9a <__any_on+0x2c>
 8015fae:	2001      	movs	r0, #1
 8015fb0:	e7f6      	b.n	8015fa0 <__any_on+0x32>
	...

08015fb4 <frexp>:
 8015fb4:	b570      	push	{r4, r5, r6, lr}
 8015fb6:	0014      	movs	r4, r2
 8015fb8:	2500      	movs	r5, #0
 8015fba:	6025      	str	r5, [r4, #0]
 8015fbc:	4d10      	ldr	r5, [pc, #64]	; (8016000 <frexp+0x4c>)
 8015fbe:	004b      	lsls	r3, r1, #1
 8015fc0:	000a      	movs	r2, r1
 8015fc2:	085b      	lsrs	r3, r3, #1
 8015fc4:	42ab      	cmp	r3, r5
 8015fc6:	dc1a      	bgt.n	8015ffe <frexp+0x4a>
 8015fc8:	001d      	movs	r5, r3
 8015fca:	4305      	orrs	r5, r0
 8015fcc:	d017      	beq.n	8015ffe <frexp+0x4a>
 8015fce:	4d0d      	ldr	r5, [pc, #52]	; (8016004 <frexp+0x50>)
 8015fd0:	42ab      	cmp	r3, r5
 8015fd2:	dc09      	bgt.n	8015fe8 <frexp+0x34>
 8015fd4:	2200      	movs	r2, #0
 8015fd6:	4b0c      	ldr	r3, [pc, #48]	; (8016008 <frexp+0x54>)
 8015fd8:	f7eb fbbe 	bl	8001758 <__aeabi_dmul>
 8015fdc:	2536      	movs	r5, #54	; 0x36
 8015fde:	000a      	movs	r2, r1
 8015fe0:	004b      	lsls	r3, r1, #1
 8015fe2:	426d      	negs	r5, r5
 8015fe4:	085b      	lsrs	r3, r3, #1
 8015fe6:	6025      	str	r5, [r4, #0]
 8015fe8:	4d08      	ldr	r5, [pc, #32]	; (801600c <frexp+0x58>)
 8015fea:	151b      	asrs	r3, r3, #20
 8015fec:	195b      	adds	r3, r3, r5
 8015fee:	6825      	ldr	r5, [r4, #0]
 8015ff0:	18eb      	adds	r3, r5, r3
 8015ff2:	6023      	str	r3, [r4, #0]
 8015ff4:	4b06      	ldr	r3, [pc, #24]	; (8016010 <frexp+0x5c>)
 8015ff6:	401a      	ands	r2, r3
 8015ff8:	4b06      	ldr	r3, [pc, #24]	; (8016014 <frexp+0x60>)
 8015ffa:	4313      	orrs	r3, r2
 8015ffc:	0019      	movs	r1, r3
 8015ffe:	bd70      	pop	{r4, r5, r6, pc}
 8016000:	7fefffff 	.word	0x7fefffff
 8016004:	000fffff 	.word	0x000fffff
 8016008:	43500000 	.word	0x43500000
 801600c:	fffffc02 	.word	0xfffffc02
 8016010:	800fffff 	.word	0x800fffff
 8016014:	3fe00000 	.word	0x3fe00000

08016018 <__ssprint_r>:
 8016018:	b5f0      	push	{r4, r5, r6, r7, lr}
 801601a:	6893      	ldr	r3, [r2, #8]
 801601c:	b087      	sub	sp, #28
 801601e:	9002      	str	r0, [sp, #8]
 8016020:	000c      	movs	r4, r1
 8016022:	0016      	movs	r6, r2
 8016024:	2b00      	cmp	r3, #0
 8016026:	d063      	beq.n	80160f0 <__ssprint_r+0xd8>
 8016028:	6813      	ldr	r3, [r2, #0]
 801602a:	9303      	str	r3, [sp, #12]
 801602c:	2300      	movs	r3, #0
 801602e:	001f      	movs	r7, r3
 8016030:	9305      	str	r3, [sp, #20]
 8016032:	2f00      	cmp	r7, #0
 8016034:	d02e      	beq.n	8016094 <__ssprint_r+0x7c>
 8016036:	68a5      	ldr	r5, [r4, #8]
 8016038:	42af      	cmp	r7, r5
 801603a:	d347      	bcc.n	80160cc <__ssprint_r+0xb4>
 801603c:	2390      	movs	r3, #144	; 0x90
 801603e:	89a2      	ldrh	r2, [r4, #12]
 8016040:	00db      	lsls	r3, r3, #3
 8016042:	421a      	tst	r2, r3
 8016044:	d042      	beq.n	80160cc <__ssprint_r+0xb4>
 8016046:	2003      	movs	r0, #3
 8016048:	6921      	ldr	r1, [r4, #16]
 801604a:	6823      	ldr	r3, [r4, #0]
 801604c:	1a5b      	subs	r3, r3, r1
 801604e:	9304      	str	r3, [sp, #16]
 8016050:	6963      	ldr	r3, [r4, #20]
 8016052:	4343      	muls	r3, r0
 8016054:	0fd8      	lsrs	r0, r3, #31
 8016056:	18c3      	adds	r3, r0, r3
 8016058:	105b      	asrs	r3, r3, #1
 801605a:	9301      	str	r3, [sp, #4]
 801605c:	9b04      	ldr	r3, [sp, #16]
 801605e:	9801      	ldr	r0, [sp, #4]
 8016060:	3301      	adds	r3, #1
 8016062:	19db      	adds	r3, r3, r7
 8016064:	4283      	cmp	r3, r0
 8016066:	d900      	bls.n	801606a <__ssprint_r+0x52>
 8016068:	9301      	str	r3, [sp, #4]
 801606a:	0553      	lsls	r3, r2, #21
 801606c:	d544      	bpl.n	80160f8 <__ssprint_r+0xe0>
 801606e:	9901      	ldr	r1, [sp, #4]
 8016070:	9802      	ldr	r0, [sp, #8]
 8016072:	f7fb fab7 	bl	80115e4 <_malloc_r>
 8016076:	1e05      	subs	r5, r0, #0
 8016078:	d114      	bne.n	80160a4 <__ssprint_r+0x8c>
 801607a:	230c      	movs	r3, #12
 801607c:	9a02      	ldr	r2, [sp, #8]
 801607e:	2001      	movs	r0, #1
 8016080:	6013      	str	r3, [r2, #0]
 8016082:	2340      	movs	r3, #64	; 0x40
 8016084:	89a2      	ldrh	r2, [r4, #12]
 8016086:	4240      	negs	r0, r0
 8016088:	4313      	orrs	r3, r2
 801608a:	81a3      	strh	r3, [r4, #12]
 801608c:	2300      	movs	r3, #0
 801608e:	60b3      	str	r3, [r6, #8]
 8016090:	6073      	str	r3, [r6, #4]
 8016092:	e02f      	b.n	80160f4 <__ssprint_r+0xdc>
 8016094:	9b03      	ldr	r3, [sp, #12]
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	9305      	str	r3, [sp, #20]
 801609a:	9b03      	ldr	r3, [sp, #12]
 801609c:	685f      	ldr	r7, [r3, #4]
 801609e:	3308      	adds	r3, #8
 80160a0:	9303      	str	r3, [sp, #12]
 80160a2:	e7c6      	b.n	8016032 <__ssprint_r+0x1a>
 80160a4:	9a04      	ldr	r2, [sp, #16]
 80160a6:	6921      	ldr	r1, [r4, #16]
 80160a8:	f7fb fcd5 	bl	8011a56 <memcpy>
 80160ac:	89a3      	ldrh	r3, [r4, #12]
 80160ae:	4a18      	ldr	r2, [pc, #96]	; (8016110 <__ssprint_r+0xf8>)
 80160b0:	401a      	ands	r2, r3
 80160b2:	2380      	movs	r3, #128	; 0x80
 80160b4:	4313      	orrs	r3, r2
 80160b6:	81a3      	strh	r3, [r4, #12]
 80160b8:	9b04      	ldr	r3, [sp, #16]
 80160ba:	6125      	str	r5, [r4, #16]
 80160bc:	18ed      	adds	r5, r5, r3
 80160be:	6025      	str	r5, [r4, #0]
 80160c0:	003d      	movs	r5, r7
 80160c2:	9b01      	ldr	r3, [sp, #4]
 80160c4:	9a04      	ldr	r2, [sp, #16]
 80160c6:	6163      	str	r3, [r4, #20]
 80160c8:	1a9b      	subs	r3, r3, r2
 80160ca:	60a3      	str	r3, [r4, #8]
 80160cc:	42bd      	cmp	r5, r7
 80160ce:	d900      	bls.n	80160d2 <__ssprint_r+0xba>
 80160d0:	003d      	movs	r5, r7
 80160d2:	002a      	movs	r2, r5
 80160d4:	9905      	ldr	r1, [sp, #20]
 80160d6:	6820      	ldr	r0, [r4, #0]
 80160d8:	f7ff fb91 	bl	80157fe <memmove>
 80160dc:	68a3      	ldr	r3, [r4, #8]
 80160de:	1b5b      	subs	r3, r3, r5
 80160e0:	60a3      	str	r3, [r4, #8]
 80160e2:	6823      	ldr	r3, [r4, #0]
 80160e4:	195d      	adds	r5, r3, r5
 80160e6:	68b3      	ldr	r3, [r6, #8]
 80160e8:	6025      	str	r5, [r4, #0]
 80160ea:	1bdb      	subs	r3, r3, r7
 80160ec:	60b3      	str	r3, [r6, #8]
 80160ee:	d1d1      	bne.n	8016094 <__ssprint_r+0x7c>
 80160f0:	2000      	movs	r0, #0
 80160f2:	6070      	str	r0, [r6, #4]
 80160f4:	b007      	add	sp, #28
 80160f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160f8:	9a01      	ldr	r2, [sp, #4]
 80160fa:	9802      	ldr	r0, [sp, #8]
 80160fc:	f7fb fcf0 	bl	8011ae0 <_realloc_r>
 8016100:	1e05      	subs	r5, r0, #0
 8016102:	d1d9      	bne.n	80160b8 <__ssprint_r+0xa0>
 8016104:	6921      	ldr	r1, [r4, #16]
 8016106:	9802      	ldr	r0, [sp, #8]
 8016108:	f7fe ff78 	bl	8014ffc <_free_r>
 801610c:	e7b5      	b.n	801607a <__ssprint_r+0x62>
 801610e:	46c0      	nop			; (mov r8, r8)
 8016110:	fffffb7f 	.word	0xfffffb7f

08016114 <__register_exitproc>:
 8016114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016116:	4d29      	ldr	r5, [pc, #164]	; (80161bc <__register_exitproc+0xa8>)
 8016118:	0006      	movs	r6, r0
 801611a:	6828      	ldr	r0, [r5, #0]
 801611c:	9301      	str	r3, [sp, #4]
 801611e:	9100      	str	r1, [sp, #0]
 8016120:	0017      	movs	r7, r2
 8016122:	f7ff fb5f 	bl	80157e4 <__retarget_lock_acquire_recursive>
 8016126:	4b26      	ldr	r3, [pc, #152]	; (80161c0 <__register_exitproc+0xac>)
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	001c      	movs	r4, r3
 801612c:	34fc      	adds	r4, #252	; 0xfc
 801612e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8016130:	2800      	cmp	r0, #0
 8016132:	d103      	bne.n	801613c <__register_exitproc+0x28>
 8016134:	334d      	adds	r3, #77	; 0x4d
 8016136:	33ff      	adds	r3, #255	; 0xff
 8016138:	0018      	movs	r0, r3
 801613a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801613c:	6843      	ldr	r3, [r0, #4]
 801613e:	2b1f      	cmp	r3, #31
 8016140:	dd18      	ble.n	8016174 <__register_exitproc+0x60>
 8016142:	4b20      	ldr	r3, [pc, #128]	; (80161c4 <__register_exitproc+0xb0>)
 8016144:	2b00      	cmp	r3, #0
 8016146:	d105      	bne.n	8016154 <__register_exitproc+0x40>
 8016148:	6828      	ldr	r0, [r5, #0]
 801614a:	f7ff fb4c 	bl	80157e6 <__retarget_lock_release_recursive>
 801614e:	2001      	movs	r0, #1
 8016150:	4240      	negs	r0, r0
 8016152:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016154:	20c8      	movs	r0, #200	; 0xc8
 8016156:	0040      	lsls	r0, r0, #1
 8016158:	f7fb fa30 	bl	80115bc <malloc>
 801615c:	2800      	cmp	r0, #0
 801615e:	d0f3      	beq.n	8016148 <__register_exitproc+0x34>
 8016160:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8016162:	2300      	movs	r3, #0
 8016164:	6002      	str	r2, [r0, #0]
 8016166:	22c4      	movs	r2, #196	; 0xc4
 8016168:	0052      	lsls	r2, r2, #1
 801616a:	6043      	str	r3, [r0, #4]
 801616c:	64e0      	str	r0, [r4, #76]	; 0x4c
 801616e:	5083      	str	r3, [r0, r2]
 8016170:	3204      	adds	r2, #4
 8016172:	5083      	str	r3, [r0, r2]
 8016174:	6843      	ldr	r3, [r0, #4]
 8016176:	2e00      	cmp	r6, #0
 8016178:	d014      	beq.n	80161a4 <__register_exitproc+0x90>
 801617a:	009a      	lsls	r2, r3, #2
 801617c:	1882      	adds	r2, r0, r2
 801617e:	0011      	movs	r1, r2
 8016180:	3188      	adds	r1, #136	; 0x88
 8016182:	600f      	str	r7, [r1, #0]
 8016184:	2101      	movs	r1, #1
 8016186:	0004      	movs	r4, r0
 8016188:	4099      	lsls	r1, r3
 801618a:	3485      	adds	r4, #133	; 0x85
 801618c:	34ff      	adds	r4, #255	; 0xff
 801618e:	6865      	ldr	r5, [r4, #4]
 8016190:	32fc      	adds	r2, #252	; 0xfc
 8016192:	430d      	orrs	r5, r1
 8016194:	6065      	str	r5, [r4, #4]
 8016196:	9d01      	ldr	r5, [sp, #4]
 8016198:	60d5      	str	r5, [r2, #12]
 801619a:	2e02      	cmp	r6, #2
 801619c:	d102      	bne.n	80161a4 <__register_exitproc+0x90>
 801619e:	68a2      	ldr	r2, [r4, #8]
 80161a0:	4311      	orrs	r1, r2
 80161a2:	60a1      	str	r1, [r4, #8]
 80161a4:	1c5a      	adds	r2, r3, #1
 80161a6:	6042      	str	r2, [r0, #4]
 80161a8:	3302      	adds	r3, #2
 80161aa:	9a00      	ldr	r2, [sp, #0]
 80161ac:	009b      	lsls	r3, r3, #2
 80161ae:	501a      	str	r2, [r3, r0]
 80161b0:	4b02      	ldr	r3, [pc, #8]	; (80161bc <__register_exitproc+0xa8>)
 80161b2:	6818      	ldr	r0, [r3, #0]
 80161b4:	f7ff fb17 	bl	80157e6 <__retarget_lock_release_recursive>
 80161b8:	2000      	movs	r0, #0
 80161ba:	e7ca      	b.n	8016152 <__register_exitproc+0x3e>
 80161bc:	20000a54 	.word	0x20000a54
 80161c0:	08018dac 	.word	0x08018dac
 80161c4:	080115bd 	.word	0x080115bd

080161c8 <_calloc_r>:
 80161c8:	b510      	push	{r4, lr}
 80161ca:	4351      	muls	r1, r2
 80161cc:	f7fb fa0a 	bl	80115e4 <_malloc_r>
 80161d0:	1e04      	subs	r4, r0, #0
 80161d2:	d01a      	beq.n	801620a <_calloc_r+0x42>
 80161d4:	0003      	movs	r3, r0
 80161d6:	3b08      	subs	r3, #8
 80161d8:	685a      	ldr	r2, [r3, #4]
 80161da:	2303      	movs	r3, #3
 80161dc:	439a      	bics	r2, r3
 80161de:	3a04      	subs	r2, #4
 80161e0:	2a24      	cmp	r2, #36	; 0x24
 80161e2:	d819      	bhi.n	8016218 <_calloc_r+0x50>
 80161e4:	0003      	movs	r3, r0
 80161e6:	2a13      	cmp	r2, #19
 80161e8:	d90b      	bls.n	8016202 <_calloc_r+0x3a>
 80161ea:	2100      	movs	r1, #0
 80161ec:	3308      	adds	r3, #8
 80161ee:	6001      	str	r1, [r0, #0]
 80161f0:	6041      	str	r1, [r0, #4]
 80161f2:	2a1b      	cmp	r2, #27
 80161f4:	d905      	bls.n	8016202 <_calloc_r+0x3a>
 80161f6:	6081      	str	r1, [r0, #8]
 80161f8:	60c1      	str	r1, [r0, #12]
 80161fa:	2a24      	cmp	r2, #36	; 0x24
 80161fc:	d007      	beq.n	801620e <_calloc_r+0x46>
 80161fe:	0003      	movs	r3, r0
 8016200:	3310      	adds	r3, #16
 8016202:	2200      	movs	r2, #0
 8016204:	601a      	str	r2, [r3, #0]
 8016206:	605a      	str	r2, [r3, #4]
 8016208:	609a      	str	r2, [r3, #8]
 801620a:	0020      	movs	r0, r4
 801620c:	bd10      	pop	{r4, pc}
 801620e:	0003      	movs	r3, r0
 8016210:	6101      	str	r1, [r0, #16]
 8016212:	3318      	adds	r3, #24
 8016214:	6141      	str	r1, [r0, #20]
 8016216:	e7f4      	b.n	8016202 <_calloc_r+0x3a>
 8016218:	2100      	movs	r1, #0
 801621a:	f7fb fc25 	bl	8011a68 <memset>
 801621e:	e7f4      	b.n	801620a <_calloc_r+0x42>

08016220 <_sbrk>:
 8016220:	4b05      	ldr	r3, [pc, #20]	; (8016238 <_sbrk+0x18>)
 8016222:	0002      	movs	r2, r0
 8016224:	6819      	ldr	r1, [r3, #0]
 8016226:	2900      	cmp	r1, #0
 8016228:	d101      	bne.n	801622e <_sbrk+0xe>
 801622a:	4904      	ldr	r1, [pc, #16]	; (801623c <_sbrk+0x1c>)
 801622c:	6019      	str	r1, [r3, #0]
 801622e:	6818      	ldr	r0, [r3, #0]
 8016230:	1882      	adds	r2, r0, r2
 8016232:	601a      	str	r2, [r3, #0]
 8016234:	4770      	bx	lr
 8016236:	46c0      	nop			; (mov r8, r8)
 8016238:	20006908 	.word	0x20006908
 801623c:	20006e60 	.word	0x20006e60

08016240 <_init>:
 8016240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016242:	46c0      	nop			; (mov r8, r8)
 8016244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016246:	bc08      	pop	{r3}
 8016248:	469e      	mov	lr, r3
 801624a:	4770      	bx	lr

0801624c <_fini>:
 801624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801624e:	46c0      	nop			; (mov r8, r8)
 8016250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016252:	bc08      	pop	{r3}
 8016254:	469e      	mov	lr, r3
 8016256:	4770      	bx	lr
